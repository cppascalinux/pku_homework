以下 均 为 合法 的 调用 :
3.7   新版 功能 .
后者 相应 增加 了 一个 别名 :   " Screen . onkeyrelease ( ) "
" %% "   字面 的   " ' % ' "   字符
子 进程 协议
请 注意   cursor   的   arraysize   属性 会 影响 此 操作 的 执行 效率
state   是 一个 表示 编码器 状态 的 元组
" tarfile . open ( ) "   函数 实际上 是 这个 类 方法 的 快捷方式
任何 时候 将   " NULL "   指针 “ 泄露 ” 给   Python   用户 都 会 是 个 严重 的 错误
可以 将 所有 数值 设置 为   " CHAR _ MAX "   ， 以 指示 此 语言 环境 中 未指定 任何 值
它 与 返回 的 记录 数 不同 ， 因为 记录 可能 跨越 多行
对于 需要 对 收集 的 日志 信息 进行 更 精确 控制 的 特定 应用程序 ， 还 可以 进行 其他 优化
模块   " logging . config "   日志 记录 模块 的 配置   API
调用   < old _ target > . dnd _ leave ( source ,   event )
输出 以   8   为 基数 的 数字
传输 端点 已 连接
所有 的 比较 操作符 都 有 相同 的 优先级 ， 且 这个 优先级 比 数值 运算符 低
这 意味着 包含 以下 标准 头文件 ： " < stdio . h > " ， " < string . h > " ， " < errno . h > " ，   " < limits . h > " ， " < assert . h > "   和   " < stdlib . h > " （ 如果 可用 ）
类 名称 将 在 原有 的 全局 命名 空间 中 绑定 到 该类 对象
深度 复制 操作 通常 存在 两个 问题 ,   而 浅层 复制 操作 并 不 存在 这些 问题 ：
测试
返回 面板 栈中 的 底部 面板
扩展 deque 的 右侧 ， 通过 添加 iterable 参数 中 的 元素
" ast "   模块
在   3.2   版 更改 :   Mixer   objects   also   support   the   context   management   protocol .
参见 :
支持   " % Z "   指令 是 基于   " tzname "   中 包含 的 值 以及   " daylight "   是否 为 真
3.4 . 4   新版 功能 .
键 函数 还 可以 访问 外部 资源
因此 ， 通过 定义   " __ lt __ ( ) "   方法 ， 可以 很 容易 地为 类 添加 标准 排序 顺序 :
当 你 改变 一个 颜色 对时 ， 任何 已经 使用 该 颜色 对来 显示 的 文本 将会 更 改为 新 的 颜色
模块 内容
字符串
在 搜索 函数 无法 找到 给定 编码 的 情况 下 ， 它 应当 返回   " None "
如果 一个 结构 无法 在 限定 宽度 内 被 格式化 ， 则 将 做到 尽可能 接近
Smith   在   bpo   1054041   中 贡献 。 ）
索引 可以 得到 单个 字符 ， 而 切片 可以 获取 子 字符串 :
返回 分钟 ， 从 0 到 59 的 整数
引发 一个 审计 事件   " winreg . PyHKEY . Detach " ， 附带 参数   " key "
在   3.3 . 4   版 更改 :   添加 了   Windows   支持
EntityResolver   对象
特殊 标识符   " _ "   在 交互式 解释器 中 被 用来 存放 最近 一次 求值 结果 ； 它 保存 在   " builtins "   模块 中
主要 的 使用 场景 有 ：
这篇 文档 只有 在   https : / / setuptools . readthedocs . io / en / latest / setuptools . html   上 的   " setuptools "   文档 独立 涵盖 此处 包含 的 所有 相关 信息 之前 ， 才 会 单独 保留
" QueueHandler "   实例 将 消息 发送到 队列 ， 例如 在   " queue "   或   " multiprocessing "   模块 中 实现 的 队列
考虑 使用 可选 的 静态 类型 检查
3.6   新版 功能 .
（ 由   Serhiy   Storchaka   在   bpo   36048   中 贡献 。 ）
嵌入 Python
也就是说   ， " \ n "   被 转换 为 单个 换行符 ， " \ r "   被 转换 为 回车符 ， 依此类推
模块   " grp "   针对 用户组 数据库 的 接口 ， 与 本 模块 类似
" type   "   可 接受 任意 可 调用 对象 ， 该 对象 应 传入 单个 字符串 参数 并 返回 转换 后 的 值 :
在 大多数 系统 中 ， 这些 线程 会 直接 被 杀掉 ， 不会 执行   " try "   ...   " finally "   语句 ， 也 不会 执行 对象 析构 函数
对于 从 大量 人群 中 采样 ， 这种 方法 特别 快速 且 节省 空间 ： " sample ( range ( 10000000 ) ,   k   60 ) "
（ 由   Carl   Bordum   Hansen   在   bpo   37376   中 贡献 。 ）
在   3.6   版 更改 :   session   argument   was   added .
库
和 平常 一样 ， 通过 调用 它 创建 实例 :
返回   x   乘以   y   再 加   z   的 结果
此 基类 用于 创建 枚举 常量
所 追踪 事件 可以 以 不同 形式 处理
最后 一个 连接 所 使用 的 地址
PEP   421 :   添加   sys . implementation
一个 为 函数 提供 缓存 功能 的 装饰 器 ， 缓存   maxsize   组 传入 参数 ， 在 下次 以 相同 参数 调用 时 直接 返回 上 一次 的 结果
这 将 执行 一次   setup   语句 ， 然后 返回 执行 主 语句 多次 所 需 的 时间 ， 以 秒 为 单位 测量 为 浮点数
代码 对象
如果 需要 ， 可以 使用 以下 方法 来 解决 这个 问题 ， 但 使用 它 需要 你 自 担风险 ： 你 可以 将 一个 可变 结构 包装 在 一个 类 实例 中 ， 该 实例 同时 具有   " __ eq __ ( ) "   和   " __ hash __ ( ) "   方法
完整 的 函数 头 和   " Popen "   的 构造函数 一样 ， 此 函数 接受 的 大多数 参数 都 被 传递 给 该 接口
请 注意   " re . VERBOSE "   总是 会 被 加为 旗标   ， 因此 自定义 的   idpattern   必须 遵循 详细 正则表达式 的 约定
如果   return _ exceptions   为   False ， 则 在   gather ( )   被 标记 为 已 完成 后 取消 它 将 不会 取消 任何 已 提交 的 可 等待 对象
Pydb 可以 在   http : / / bashdb . sourceforge . net / pydb /   找到 ， DDD 可以 在   https : / / www . gnu . org / software / ddd   找到
可以 通过 从文件 中 读取 来 导入 此 数据 ：
补全 显示 函数 会 在 每次 需要 显示 匹配 项时 以   " function ( substitution ,   [ matches ] ,   longest _ match _ length ) "   的 形式 被 调用
一些 有用 的 Emacs 绑定 是从 Tcl   /   Tk 继承 的 ：
" test "   Python 回归 测试 包
" PyUnicode _ AS _ DATA " :   使用   " PyUnicode _ DATA "   以及   " PyUnicode _ READ "   和   " PyUnicode _ WRITE "
它 返回 已 加载 模块 ， 或者 当找 不到 模块 时 引发   " ZipImportError "   错误
启动 监听器
获取   HTTP   标头
它 还 支持 事后 调试 ， 可以 在 程序控制 下 调用
同时 也 添加 了 相应 的 断言 函数 用于 测试
使用 多 进程 时 ， 一般 使用 消息 机制 实现 进程 间通信 ， 尽可能 避免 使用 同步 原语 ，   例如 锁
默认 警告 过滤器
位置 参数 介绍
将 当前 终端 模式 保存 为   " program "   模式 ， 即 正在 运行 的 程序 使用   curses   的 模式
对于 这个 扩展 ， 其 指定 了 预 处理器 定义 ， include 目录 ， 库 目录 ， 库
与   Cell   对象 对应 的 类型 对 ​ ​ 象
在   3.3   版 更改 :   添加 了   " name "   与   " path "   属性
除了 与 字典 类似 的 方法 ， " ndbm "   对象 还有 以下 方法 ：
3.7   新版 功能 :   Added   the   SortKey   enum .
在 受限   C   API   中 从未 使用 的 垃圾箱 机制
许多 断言 被 添加 到 字典 和 集合 实现 中
3.3   新版 功能 .
反之   (   block   是   " False "   时 ) ， 仅 当 有 可用 对象 能够 取出 时 返回 ， 否则 抛出   " queue . Empty "   异常   ( 在 这种 情形 下   timeout   参数 会 被 忽略 )
3.6   版后 已 移除 :   OpenSSL   has   deprecated   all   version   specific   protocols
（ 由   Matthias   Bussonnier   在   bpo   36895   中 贡献 。 ）
读取 元 数据
新增 模块
有关 此 函数 的 逆 操作 请参阅   " calendar . timegm ( ) "
运算符 优先级
输入 方法
对于 更 高级 的 工作 ， 使用   Context ( )   构造函数 创建 备用 上下文 可能 很 有用
Cookie   对象
" tracemalloc "   跟踪 内存 分配
在 目录   a   和   b   中 ， 根据 类 的 文件 比较 操作符 判定 内容 不 等 的 文件
致谢
" Textbox "   对象 具有 以下 方法 :
文档 字符串 字典 将 被 写入 到   Python   脚本 文件   "   filename   . py "
一次性 压缩 或 解压缩
在 调用 时会 由 调度 算法 来 确定 应该 使用 哪个 实现
" if "   语句
无论 字段名 是 如何 确定 的 ， 字典 都 将 保留 其 原始 顺序
如果   o   不 为   " NULL " ， 则 调用   visit   回调 函数 ， 附带 参数   o   和   arg
" parse _ args ( ) "   返回 两个 值 ：
" optparse "   解析器 的 命令行 选项
一个 使用   " SelectorEventLoop "   事件 循环 实现 的 替代 事件 循环 策略
如果 这个 属性 为 真 ， 记录 到 这个 记录器 的 事件 除了 会 发送到 此 记录器 的 所有 处理程序 外 ， 还会 传递 给 更 高级别 （ 祖先 ） 记录器 的 处理器 ， 此外 任何 关联 到 这个 记录器 的 处理器
如果   " finally "   子句 中 包含 一个   " return "   语句 ， 则 返回值 将 来自   " finally "   子句 的 某个   " return "   语句 的 返回值 ， 而 非 来自   " try "   子句 的   " return "   语句 的 返回值
各个 部分 可能 处于 文件系统 的 不同 位置
ob   不能 为   " NULL "
在   3.4   版 更改 :   " ValueError "   is   raised   when   the   handshake   isn ' t   done
超出 特定 文件系统 上 的 限制 可能 会 导致 解压缩 失败
Python 常见问题
由于 使用 了 字典 存储 缓存 ， 所以 该 函数 的 固定 参数 和 关键字 参数 必须 是 可 哈希 的
这些 函数 在 创建 你 自己 的 函数 时 帮助 很大
举个 栗子 ， 考虑 一个 名为   " myprogram . py "   的 文件 包含 如下 代码 :
" errno "   标准   errno   系统 符号
Unicode   指南
在   3.3   版 更改 :   原来 在   Windows   下 抛出 的 异常 类型   " WindowsError "   现在 是   " OSError "   的 一个 别名
当 嵌入 Python 时 ，   " PyInit _ spam ( ) "   函数 不会 被 自动 调用 ， 除非 放在   " PyImport _ Inittab "   表里
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
" dircmp "   类 提供 以下 方法 ：
要 创建 一个 堆 ， 可以 使用 list 来 初始化 为   " [ ] "   ， 或者 你 可以 通过 一个 函数   " heapify ( ) "   ， 来 把 一个 list 转换 成堆
" Queue "   的 变体 ； 按 优先级 顺序 取出 条目   ( 最小 的 先 取出 )
低 层级   API   索引
如果 在 此 情况 下 你 尝试 用 迭代 器则 会 返回 在 之前 迭代 过程 中 被 耗尽 的 同一 迭代 器 对象 ， 使 其 看起来 就 像是 一个 空 容器
address   是 代表   IP   地址 的 字符串 或 整数
函数
在 这些   unix   上 ，   pw _ passwd   只 包含 星号 （ " '   ' " ） 或 字母 （ " ' x ' " ） ， 而 加密 的 密码 存储 在 文件   " / etc / shadow "   中 ， 此 文件 不是 全局 可读 的
返回 对象 引用 的 函数 通常 只 在 要 指明 发生 了 异常 时才 返回   " NULL "
" FIRST _ EXCEPTION "   函数 将 在 任意 可 等待 对象 因 引发 异常 而 结束 时   返回
否则 的话 ， 该 数字 将 使用 表示 类型   " ' e ' "   和 精度   " p   1 "   进行 格式化
" continue "   语句
返回 一个 具有 新 的   " tzinfo "   属性   tz   的   " datetime "   对象 ， 并会 调整 日期 和 时间 数据 使得 结果 对应 的   UTC   时间 与   self   相同 ， 但 为   tz   时区 的 本地 时间
如果 面板 被 隐藏 （ 不 可见 ） 则 返回   " True " ， 否则 返回   " False "
AU _ read   对象
floor   division   向下 取 整除 法 向下 舍入 到 最 接近 的 整数 的 数学 除法
Python 将 安装 到 您 的 用户 目录 中
记录 变量 数据
" " help " "   打印 用法 消息 ， 包括 所有 选项 和 文档
对于   " int "   操作数 ， 结果 具有 与 操作数 相同 的 类型   （ 强制 转换 后 ） ， 除非 第二个 参数 为 负值 ； 在 这种 情况 下 ， 所有 参数 将 被 转换 为 浮点数 并 输出 浮点数 结果
整数型 对象
共享   " ctypes "   对象
库
内置 的   " compile ( ) "   已 改进 为 可 接受   " ast . PyCF _ ALLOW _ TOP _ LEVEL _ AWAIT "   旗标
文档
为了 使用 颜色 ， 你 必须 在 调用 完 函数   " initscr ( ) "   后 尽快 调用函数   " start _ color ( ) " ， 来 初始化 默认 颜色 集   ( " curses . wrapper ( ) "   函数 自动 完成 了 这 一点 )
" set "   是 一个 内置 类型
parse _ args ( )   方法
日期 字段 的 长度 为 两个 字符 ， 如果 日期 只有 一个 数字 则 会 以 零 填充 ， 例如 :   " ' Wed   Jun   9   04 : 26 : 40   1993 ' "
比较 在 两个 目录   dir1   和   dir2   中 ， 由   common   所 确定 名称 的 文件
保留 在 当前 复制 过程 中 已 复制 的 对象 的   " 备忘录 "   （ " memo " ）   字典 ； 以及
如果 一个 组织 生成 了 许多 库 ， 则 指定 的 记录器 名称 可以 是   “ orgname . foo ”   而 不仅仅 是   “ foo ”
属性
（ 假设 解释器 位于 用户 的   " PATH "   ） 脚本 的 开头 ， 并 将 文件 设置 为 可 执行
以下 是 一些 用作 工具 函数 的 例程 ， 它们 演示 了 使用   " Decimal "   类 的 各种 方式 :
" numbers "   模块 定义 了 数字 类型 的 抽象层次 结构
如果 给出 文件名 则   closefd   必须 为   " True "   （ 默认值 ） ， 否则 将 引发 错误
异常
在   3.5   版 更改 :   支持 写入 任意   bytes   like   objects
类型 名   类名   注释   " ' mozilla ' "   " Mozilla ( ' mozilla ' ) "   " ' firefox ' "   " Mozilla ( ' mozilla ' ) "   " ' netscape ' "   " Mozilla ( ' netscape ' ) "   " ' galeon ' "   " Galeon ( ' galeon ' ) "   " ' epiphany ' "   " Galeon ( ' epiphany ' ) "   " ' skipstone ' "   " BackgroundBrowser ( ' skipstone ' ) "   " ' kfmclient ' "   " Konqueror ( ) "   ( 1 )   " ' konqueror ' "   " Konqueror ( ) "   ( 1 )   " ' kfm ' "   " Konqueror ( ) "   ( 1 )   " ' mosaic ' "   " BackgroundBrowser ( ' mosaic ' ) "   " ' opera ' "   " Opera ( ) "   " ' grail ' "   " Grail ( ) "   " ' links ' "   " GenericBrowser ( ' links ' ) "   " ' elinks ' "   " Elinks ( ' elinks ' ) "   " ' lynx ' "   " GenericBrowser ( ' lynx ' ) "   " ' w3m ' "   " GenericBrowser ( ' w3m ' ) "   " ' windows   default ' "   " WindowsDefault "   ( 2 )   " ' macosx ' "   " MacOSX ( ' default ' ) "   ( 3 )   " ' safari ' "   " MacOSX ( ' safari ' ) "   ( 3 )   " ' google   chrome ' "   " Chrome ( ' google   chrome ' ) "   " ' chrome ' "   " Chrome ( ' chrome ' ) "   " ' chromium ' "   " Chromium ( ' chromium ' ) "   " ' chromium   browser ' "   " Chromium ( ' chromium   browser ' ) "
在   3.4   版 更改 :   convert _ charrefs   关键字 参数 被 添加
可用性 :   Windows ， 具有   POSIX   线程 的 系统
应用 和 库 应当 将   password   限制 在 合理 长度   ( 例如   1024 )
通常 该 数值 会 被 限制 在   1970   年 至   2038   年 之间
PEP   526   变量 标注 的 语法 该 提议 增加 了 标注 变量 （ 也 包括 类 变量 和 实例 变量 ） 类型 的 语法 ， 而 不再 是 通过 注释 来 进行 表达
要 再次 解码 对象 ， 如果   " f "   是 一个 打开 的 以供 阅读 的   text   file   对象 :
我们 推荐 在 新 代码 中 使用   " asyncio "
不 执行 编码 、 解码 或 换行 转换
此外 ， 你 也 可以 单独 运行 其中 的 演示 脚本
在   3.8   版 更改 :   在   Windows   上   cwd   形参 接受 一个 字节 串 对象
" unittest "   模块 不像   " doctest "   模块 那样 易于 使用 ， 但 它 允许 在 一个 单独 的 文件 中 维护 更 全面 的 测试 集 :
生成 的 字符串 和   Python   2   的   " repr ( ) "   返回 的 结果 相似
结构 序列 对象
有 一个 类 方法 可以 为 文件系统 文件创建   " ZipInfo "   实例 :
这 一点 在 默认 形参为 可变 对象 ， 例如 列表 或 字典 的 时候 尤其 需要 重点 理解 ： 如果 函数 修改 了 该 对象 （ 例如 向 列表 添加 了 一项 ） ， 则 实际上 默认值 也 会 被 修改
表达式 语句
名称 和 对象
使用 多个 进程 时 尤其 如此
空 文件 打开 后 将 立即 被 关闭 ； 它们 在 文件 列表 中会 被 注意 到 的 唯一 情况 只有 当 最后 打开 的 文件 为空 的 时候
浮点 数字 面值
在此之前 ， Python   只 支持 基于 时间 戳 来 确定 字节 码 缓存 的 有效性
如果 此形 参 不 存在 或 不适 用于 指定 的   useragent   或者 此形 参 的   " robots . txt "   条目 存在 语法错误 ， 则 返回   " None "
结果 会先 按 每个 元素 在 运算符 左边 的 出现 时间 排序 ， 然后 再 按 其 在 运算符 右边 的 出现 时间 排序
一个 包含 所 关联 的   pax   扩展 标头 的 键值 对 的 字典
下列 类型 检查 宏 适用 于 指向 任意   Python   对象 的 指针
" struct "   将 字节 串 解读 为 打包 的 二进制 数据
Hettinger   撰写 并 实现
结构 体 / 联合 字 段 对齐 及 字节 顺序
特定 于   Windows   的 更改 ：
至少 将 返回 一个 字节 的 数据 （ 除非 为   EOF ）
库
扩展 字 段 数据
替代 捆绑 包
参数 化泛 型 的 结果 会 被 缓存 ， 并且 在   typing   模块 中 的 大部分 类型 是 可 哈希 且 可 比较 相等 性 的
可选 的 格式 说明符 可以 跟 在 表达式 后面
实值 分布
跳过 测试 类 的 写法 跟 跳 过 测试方法 的 写法 相似 :
交互式 编辑 和 编辑 历史
" ' xmlcharrefreplace ' "   使用 适当 的   XML   字符 引用 进行 替换 （ 仅 在 编码 时 ）
将   " input ( prompt ) "   转换 为   " eval ( input ( prompt ) ) "
XXX   最好 是 能 增加 一个 图表
在 扩展 的 情况 下 ， 新 文件 区域 的 内容 取决于 具体 平台 （ 在 大多数 系统 上 ， 额外 的 字节 会 填充 为 零 ）
输入 流 使用 的 一致性 检查 的   ID
模板 对象
它 继承 自   " BufferedIOBase "
每个 定义 都 会 有 一个 新 的 上级 属性
警告 :
在   3.6 . 1   版 更改 :   如果   " Py _ LIMITED _ API "   未 设置 或 设置 为   " 0x03050400 "   与   " 0x03060000 "   之间 的 值 （ 不 包括 边界 ） 或   " 0x03060100 "   或 更 大则   " PySlice _ GetIndicesEx ( ) "   会 被 实现 为 一个 使用   " PySlice _ Unpack ( ) "   和   " PySlice _ AdjustIndices ( ) "   的 宏
调试 菜单 （ 仅   window   编辑器 ）
但是 ， 一些 工具 （ 包括 较 旧 的   Python   版本 ） 不 支持 这些 压缩 方法 ， 并且 可能 拒绝 完全 处理   ZIP   文件 ， 或者 无法 提取 单个 文件
对   Python   发起 调用 时 ， 你 可以 指定 以下 的 任意 选项 :
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
可以 使用   " enumerate ( ) "   重写 为 ：
请 注意 ，   " is _ multipart ( ) "   返回   " True "   不 意味着   " msg . get _ content _ maintype ( )   ' multipart ' "   也 会 返回   " True "
通常 ， 方法 在 绑定 后 立即 被 调用 :
为了 确保 即便 程序员 忽略 了 显式 关闭 句柄 ， 该 句柄 依然 能够 正确 关闭 ， 它 使用 了 一个   handle   对象 而 不是 整数 来 作为 注册表 句柄
在   3.7   版 更改 :   " Distribution "   now   warns   if   " classifiers " ,   " keywords "   and   " platforms "   fields   are   not   specified   as   a   list   or   a   string .
" symbol "   与   Python   解析 树 一起 使用 的 常量
3.7   新版 功能 .
然后   ， hash 代码 用于 计算 内部 数组 中将 存储 该值 的 位置
如果 是 这样 ， 可以 在   setup   字符串 中 的 第一个 语句 重新 启用 GC
加载 器
对于   MIME   消息 ， 调用 根 对象 的   " is _ multipart ( ) "   方法 会 返回   " True " ， 其子 项 可以 通过 负载 操纵 方法 来 进行 访问 ， 例如   " get _ body ( ) " 、 " iter _ parts ( ) "   还有   " walk ( ) "
这个 示例 脚本 有 一个 简单 的 函数   " foo "   ， 它 只是 在 所有 的 日志 级别 中 循环 运行   ， 写 到   " sys . stderr "   ， 说明 它 要 记录 在 哪个 级别 上 ， 然后 在 这个 级别 上 实际 记录 一个 消息
如为 两个 参数 则 计算   " x   y "
你 可以 把 模块 源文件 放进 另 一个 目录 ， 但是 如果 你 有 足够 的 模块 ， 也许 用包 指定 模块 更 简单 ， 而 不是 单独 列出 它们
库
这个 方法 仅 在 调用 了   " close ( ) "   方法 之后 可用
用法 示例 ：
此 旗标 在   SQLite   3.8 . 3   或 更 高 版本 中 受到 支持 ， 如果 在 旧版本 中 使用 将 引发   " NotSupportedError "
改进 的 模块
Python   的 非正式 介绍
将   TOS   存放 到 包含 在 单元 的 第   i   个 空位 中 的 单元 内 并 释放 可用 存储空间
本 参考手册 是 对   Python   编程语言 的 描述
这 类似 于   Python   函数   " gc . is _ finalized ( ) "
文档 字符串
newline   控制   universal   newlines   模式 如何 生效 （ 它 仅 适用 于 文本 模式 ）
" ssl "   套 接字 对象 的   TLS / SSL   包装 器
然后 回调 函数 接收 两个 元素 的 指针 ， 如果 第一个 元素 小于 第二个 ， 则 返回 一个 负 整数 ， 如果 相等 则 返回 0   ， 否则 返回 一个 正整数
使用   " NewType ( ) "   辅助 函数 创建 不同 的 类型 :
第一个 子句 体中 的   " break "   语句 在 执行 时 将 终止 循环 且 不 执行   " else "   子句 体
较 旧 的 高阶   API
如果 上下文 对象 中 不 包含 这个 变量 ， 则 抛出   " KeyError "   异常
object   使用 由   errors   所 定义 的 错误处理 方法 传递 给定   encoding   的 编码器 函数
如果 这些 导入 中 的 任何 一个 失败 ， 都 会 引发   " ModuleNotFoundError "
用例 将 确定 要 在 函数 定义 中 使用 的 参数 :
如果 返回 码为 零则 正常 返回 ， 否则 引发   " CalledProcessError "
这里 有 一个 概述 ：
注解 :
除了 作为 列表 或 集合 显示 的 一部分 ， 包含 至少 一个 逗号 的 表达式 列表 将 生成 一个 元组
如果 失败 ， 此 方法 将 返回   "   1.0 " ， 因此 开发者 应当 调用   " PyErr _ Occurred ( ) "   来 检查 错误
这 包括 所有   " bytes " 、 " bytearray "   和   " array . array "   对象 ， 以及 许多 普通   " memoryview "   对象
Capsule 只能 通过 其 C   API 来 创建 和 访问 ， 但 可以 像 其他 Python 对象 一样 的 传递
函数
请 注意   " doc _ files "   选项 只是 一个 空格 分隔 以 提高 可读性 的 多行 字符串
" zoneinfo "   模块 为 标准 库 引入 了   IANA   时 区 数据库
参见 :
性能 优化
提供 该 属性 以便 可以 提供 自定义 文件名
3.3   新版 功能 .
在   3.4   版 更改 :   根据   PEP   442   ， 带有   " __ del __ ( ) "   方法 的 对象 最终 不再 会 进入   " gc . garbage "
在 标准 交互 模式 解释器 中 ， 一个 完全 空白 的 逻辑 行   ( 即 连 空格 或 注释 都 没有 )   将会 结束 一条 多行 复合 语句
DLL   的 实际 使用
如果   y   和   x   均 为   "   1 " ， 则   " leaveok "   将 设为   " True "
" quantize ( ) "   方法 将 数字 舍入 为 固定 指数
该 构造 器会 为 给定 的 可 写   raw   流 创建 一个   " BufferedWriter "
从   start   开始 自 左向右 对   iterable   的 项 求和 并 返回 总计 值
创建 变量
linejunk   :   此 函数 接受 单个 字符串 参数 ， 如果 其为 垃圾 字符串 则 返回 真值   ， 否则 返回 假值
基础 数据类型
参数 ：
替代   " os . popen ( ) " ,   " os . popen2 ( ) " ,   " os . popen3 ( ) "
Python   软件 基金会 （ Python   Software   Foundation ， 简称   PSF ） 是 一个 独立 的 非盈利 组织 ， 它 拥有   Python   2.1   及 以上 各 版本 的 版权
杂项
模块   " pwd "   用户 数据库 的 接口 ， 与 此 类似
这 意味着 其中 的 值 不会 被 拷贝 ， 而是 在 需要 时 从 原始 解析器 中 获取
这个 例子 演示 了 如何 引用 不同 作用域 和 名称 空间 ， 以及   " global "   和   " nonlocal "   会 如何 影响 变量 绑定 :
构建 Python
3.3   版后 已 移除 :   This   emulation   is   no   longer   needed ,   as   the   standard   import   mechanism   is   now   fully   PEP   302   compliant   and   available   in   " importlib " .
参阅 以下 链接 ：
将 当前 打包 缓冲区 以 字符串 的 形式 返回
仅 在   " cProfile "   可用
JSON   字符串 的 内容 和 最大 长度
启动 程序 将 搜索 两个 . ini 文件 在 当前 用户 的   " application   data "   目录 中 搜索   " py . ini "   （ 即 通过 使用   " CSIDL _ LOCAL _ APPDATA "   调用 Windows 函数   " SHGetFolderPath "   返回 的 目录 ） 以及 与 启动器 位于 同一 目录 中 的   " py . ini "
如果   " shape "   存在 ， 则 相等 的   " product ( shape )   itemsize   len "   仍然 存在 ， 使用者 可以 使用   " itemsize "   来 导航 缓冲区
以下 是 你 可以 执行 的 操作 列表 ， 以 避免 在 你 不 需要 的 日志 记录 期间 进行 处理 ：
源码 ：   Lib / webbrowser . py
在   3.1   版 更改 :   很 明显 ， 方法 总是 返回   " None "
" dictConfigClass "   将 被 绑定 到 这个 新 的 子类 ， 然后 就 可以 与 在 默认 的 未 定制 状态 下 完全相同 的 方式 调用   " dictConfig ( ) "
如果 指定 了   dfile   ， 则 在 错误信息 中 它 将 代替   file   作为 源文件 的 名称
警告 :
" StreamHandler "   实例 发送 消息 到流 （ 类似 文件 对象 ）
在   3.8   版 更改 :   Added   max _ num _ fields   parameter .
然而 其 调用者 已 被 取消 ， 因此   " await "   表达式 仍然 会 引发   " CancelledError "
值   解释   " 0 "   被 括号 括 起来 的 货币 和 金额
一个 重要 的 释放器 函数 实现 要求 是 把 所有 未决 异常 放着 不动
不同于   Popen ， Process   实例 没有 与   " poll ( ) "   方法 等价 的 方法 ；
其它 实用工具
除法 运算   ( " / " )   永远 返回 浮点数 类型
在   3.6   版 更改 :   The   context   is   created   with   secure   default   values
这是 一个 部分 解决方案 ，   但 它 可以 防止 许多 常见 错误
该 上下文 管理器 是   reentrant
否则 将 阻塞 线程 ， 直到 调用   " set ( ) "   方法 将 标识 设置 为   true   或者 发生 可选 的 超时
通常 ， 当 遇到 此 错误 时 你 不应 再 尝试 重用 下层 的 传输
如果 指定 了   error _ callback   ,   它 必须 是 一个 接受 单个 参数 的 可 调用 对象
参见 :
如果 没有 单独 说明 ， 所有 注明   “ 可用性 ： Unix ”   的 函数 都 支持 基于   Unix   核心 构建 的   Mac   OS   X   系统
这是 对于 如何 解读   XML   规范   2.11   节 的 相关 讨论 的 最终 结果
如果   " fromfile _ prefix _ chars   "   参数 提供 给   " ArgumentParser "   构造函数 ， 之后 所有 类型 的 字符 的 参数 都 会 被 当成 文件 处理 ， 并且 会 被 文件 包含 的 参数 替代
因此 我们 使用 以下 代码 :
3.8   新版 功能 .
要 通过 它 的 子类 调用 ， 而 不是 直接 调用
异常
有时 在   " sys . argv "   以外 用   ArgumentParser   解析 参数 也 是 有用 的
面板 类似 于 窗口 ， 区别 在于 它 不受 屏幕 大小 的 限制 ， 并且 不必 与 屏幕 的 特定 部分 相关联
如果 传入   header   ， 它 将 在 调试 开始 前 被 打印 到 控制台
换句话说   ， 类 不能 用于 实现 纯 抽象数据类型
重复 计时器 的 次数 （ 默认 为 5 ）
bpo   42051 ： 模块   " plistlib "   不再 接受   XML   属性 列表 文件 中 的 实体 声明 （ 避免 引发   XML   脆弱性 ）
" collections . abc . MutableSequence "   的 泛型 版本
" collections . abc "   容器 的 抽象 基类
PEP   343 :   " with "   语句
这 是 它 给 我们 的 输出 ：
舍入 方向 为   "   Infinity "
然后 ， 您 可以 询问 诸如 “ 此 字符串 是否 与 模式匹配 ？ ” 或 “ 此 字符串 中 的 模式 是否 匹配 ？ ” 等 问题
Unix   syslog   库 例程
以下 是 一些 与 头 有关 的 更 多 有用 方法 ：
" ' backslashreplace ' "   使用 带反 斜杠 的 转义序列 进行 替换
操作系统 所 报告 的   " ctime "
如果 你 想要 更 多 可控性 ， 可以 使用   " PyRun _ String ( ) " ； 请 在   " Python / pythonrun . c "   中 查看   " PyRun _ SimpleString ( ) "   的 源码
例如 ， RFC   822   标题 行 分为 标题 名称 和 值 ， 用   " ' : ' "   分隔 ， 如下 所示 ：
现在   " os . unsetenv ( ) "   函数 在   Windows   上 也 已 可用
有时候 自己 修复 漏洞 并 将 补丁 提交 给   Python   能 更 快 地 解决问题 ， 因为 它 简化 了 流程 并且 减少 了 参与 的 人力
我应 如何 获取   Python   的 文档 ？
解决办法 是 提高 精度 或 使用 单目 加法 运算 对 输入 执行 强制 舍入 ：
3.8   新版 功能 .
这个 新 的 子类 用于 创建 类 元组 的 对象 ， 可以 通过 字段名 来 获取 属性 值 ， 同样 也 可以 通过 索引 和 迭代 获取 值
如果   x   定义 了   " __ trunc __ ( ) " ， 它 将 返回   " x .__ trunc __ ( ) "
在   3.2   版 更改 :   " assertMultiLineEqual ( ) "   added   as   the   default   type   equality   function   for   comparing   strings .
3.3   新版 功能 .
" curses . textpad "   用于   curses   程序 的 文本 输入 控件
执行   coroutine   coro   并 返回 结果
一旦 锁 被 解锁   ( 不 属于 任何 线程 ) ， 则 抢夺 所有权 ， 设置 递归 等级 为 一 ， 并 返回
3.2   新版 功能 .
这 将 只 写入   value   最低 的   32   位 ； 无论 本 机   " long "   类型 的 长度 如何
库
exc _ info :   异常 元组 ， 或   " None "
任何 上述 虚拟 命令 都 可以 显式 指定 版本 （ 可以 仅为 主要 版本 ， 也 可以 为 主要 版本 加 次要 版本 ） 作为 后缀
Python   3.6 . 10   中 的 重要 变化
" string "   常见 的 字符串 操作
3.1   新版 功能 .
退出 关闭 所有 窗口 并 退出   IDLE （ 如果 未 保存 则 询问 ）
" zoneinfo "   IANA   时 区 支持
迭代
另 一种 变体 形式 是   " sNaN " ， 它 在 每次 运算 后 会 发出信号 而 不是 保持 静默
3.9   版后 已 移除 :   " collections . deque "   now   supports   " [ ] "
它们 存在 于 类型 对象 的 字典 中
枚举 类
在   3.7   版 更改 :   The   return   type   is   now   " const   char   "   rather   of   " char   " .
以反 斜杠 结束 的 行 不能 带有 注释
iid   是 可选 的 指向 接口 标识符 的 指针 ， 它 被 用于 扩展 的 错误报告
新 的 特性
" stat "   模块 定义 了 以下 函数 来 检测 特定 文件类型 ：
" abstractmethod ( ) "   只会 影响 使用 常规 继承 所 派生 的 子类 ；   通过   ABC   的   " register ( ) "   方法 注册 的 “ 虚 子类 ” 不会 受到 影响
在   3.2   版 更改 :   当   interpreter   shutdown   时 ， 即 解释器 关闭 时 ， 若   " garbage "   列表 中 存在 对象 ， 这些 对象 也 会 被 打印输出
默认 是   " ' rb ' "
使用 此 属性 可以 控制 为   " TEXT "   数据类型 返回 的 对象
如上所述 ， 可以 在 版本 说明符 上 使用 可选 的 “   32 ” 或 “   64 ” 后缀 来 更改 此 行为
（ 空 字符串 同样 表示 当前目录 。 ）
args   为 要 解析 的 参数 列表 ， 不 包含 最 开头 的 对 正在 运行 的 程序 的 引用
每个 形参 都 在 下面 有 它 自己 更 多 的 描述 ， 长话短说 有 ：
此 信号 用于 检测 有效位数 的 丢弃
改用   " PyDict _ GetItemWithError ( ) "   获得 错误报告
" gc "   垃圾 回收 器 接口
为 简洁 起 见 ， 它 不应 显式 声明 对象 的 名称 或 类型 ， 因为 这些 可 通过 其他 方式 获得 （ 除非 名称 恰好 是 描述 函数 操作 的 动词 ）
使用   " threading . Thread "   对象 的   " threading . get _ ident ( ) "   或   " ident "   属性 为   thread _ id   获取 合适 的 值
引发 一个 审计 事件   " shutil . unpack _ archive "   附带 参数   " filename " ,   " extract _ dir " ,   " format "
（ 由   Mark   Dickinson 在   bpo   4707   贡献 ）
" HTTPException "   的 一个 子类
第二个 值 是 原始 调用 次数 ， 第一个 是 调用 的 总 次数
要 跳 过 用户 交互 但 仍然 显示 进度 和 错误 ， 请 使用   " / passive "   选项
Python   还 拥有 很 好 的   IDE
如果 提供 了   timeout   参数 ， 这里 的   timeout   参数 优先 于 创建 栅栏 对象 时 提供 的   timeout   参数
如果 实参 是 一个 字符串 ， 则 在 模块 、 函数 、 类 、 方法 、 关键字 或 文档 主题 中 搜索 该 字符串 ， 并 在 控制 台上 打印 帮助 信息
设置 函数 对象   op   的 标注
返回 上下文 对象 中 所有 变量值 的 列表
导入 模块 的 “ 最佳 实践 ” 是 什么 ？
名称   描述   相关 特性   bytedesign   复杂 的 传统 海龟 绘图 模式   " tracer ( ) " ,   delay ,   " update ( ) "   chaos   绘制   Verhulst   动态 模型 ， 演示 通   世界 坐标系   过 计算机 的 运算 可能 会 生成 令人 惊   叹 的 结果   clock   绘制 模拟 时钟 显示 本机 的 当前 时间   海龟 作为 表针 ,   ontimer   colormixer   试验   r ,   g ,   b   颜色 模式   " ondrag ( ) "   当鼠标 拖动   forest   绘制   3   棵 广度 优先 树   随机化   fractalcurves   绘制   Hilbert   &   Koch   曲线   递归   lindenmayer   文化 数学   ( 印度 装饰 艺术 )   L   系统   minimal _ hanoi   汉诺塔   矩形 海龟 作为 汉诺 盘   ( shape ,   shapesize )   nim   玩 经典 的 “ 尼姆 ” 游戏 ， 开始 时有 三   海龟 作为 小棒 ， 事件驱动   堆小棒 ， 与 电脑 对战
移植 到   Python   3.3
子 进程 和 线程
返回 序列 对象   o   的   i1   到   i2   的 切片 ， 失败 时 返回   " NULL "
所有 传输 都 实现 以下 方法 :
在 交互式 解释器 提示符 中 键入 的   future   语句 将 在 解释器 会话 此后 的 交互 中 有效
参见 :   " ssl "   模块 的 文档
正则表达式 HOWTO
请 改用   " PyObject _ Call ( ) "   及其 变化 形式
PEP   293   Codec   Error   Handling   Callbacks   由   Walter   D ö rwald   撰写 并 实现
添加 了 一个 新 变量 用于 保存 下层   ncurses   库 的 结构 版 信息 :   " ncurses _ version "
进程 监视器
此外 ， 对 原生 命名 空间 包 的 支持 也 已 被 实现   ( 参见   PEP   420   )
默认 情况 下 ， 字符 的 位置 和 属性 均 为 窗口 对象 的 当前 设置
path   based   finder   基于 路径 的 查找 器 默认 的 一种 元 路径 查找 器   ， 可 在 一个   import   path   中 查找 模块
到 目前为止 ， 我们 一直 在 研究 位置 参数
" unicodedata "   Unicode   数据库
" pdb "   Python   的 调试器
格式 字符 的 顺序 可能 对 大小 产生 影响 ， 因为 满足 对齐 要求 所 需 的 填充 是 不同 的 :
__ builtins __ `   的 值 通常 是 这个 模块 或者 这个 模块 的 值   " __ dict __ "   属性
默认 状态 下 ， 相当于   " float ( num _ str ) "
" frozenset "   是 一个 内置 的 类
JSON 解码 :
标准 编码
库
换句话说 ， 如果 你 的 代码 调用   " malloc ( ) "   并且 将 分配 的 内存空间 传递 给   " Py _ BuildValue ( ) " ， 你 的 代码 就 有 责任 在   " Py _ BuildValue ( ) "   返回 时 调用   " free ( ) "
此 版本 将 使用 处理程序 的   typemap   属性 来 执行 映射 ， 该 属性 在   " __ init __ ( ) "   被 设置 为 一个 字典 ， 其中 包含   " DEBUG " ,   " INFO " ,   " WARNING " ,   " ERROR "   和   " CRITICAL "   的 映射
" pdb "   模块 定义 了 一个 交互式 源代码 调试器 ， 用于   Python   程序
对于 整数 值则 不 允许 使用   precision
在 发问 之前 ， 请 务必 查看 以下 列表 常见问题   （ 或 简写 为   FAQ ）
参数 解释 同   " debug ( ) "
显然 ， 这个 例子 将 日志 长度 设置 得 太小 ， 这是 一个 极端 的 例子
必选 参数   value   是 上下文 变量 的 新值
条件 变量 ：   " threading . Condition "   的 别名
参见 逻辑值 检测 获取 更 多 关于   Python   如何 测试 值为 真的 信息
PEP   3101 :   高级 字符串 格式
返回值 为   real   +   imag   1j   的 复数 ， 或 将 字符串 或 数字 转换 为 复数
这个 一个 很 微妙 的 规则
作者 :   A . M
只有 在 你 确定 你 的 需求 时才 使用 它
如果 该 字符 是 控制字符   ( 0x00   0x1f )   则 字符串 由 一个 插入 符   ( " ' ^ ' " )   加 相应 的 大写字母 组成
常数   意义   " KQ _ NOTE _ LOWAT "   套 接字 缓冲区 的 低 水线
在 提供 了 等于号   " '   ' "   的 时候 ， 输出 将 包含 表达式 文本 ， " '   ' "   以及 求值 结果
课 前 甜点
" tokenize "   对   Python   代码 使用 的 标记 解析器
py2exe   是 最 流行 的 用来 构建 基于   Python   2 . x   的 可执行文件 的 扩展 ， 它 暂时 还 不 支持   Python   3   但 新 的 版本 已 在 开发 中
第一个 参数 必须 为 窗口 对象 ； 其余 参数均 为 相对 于 该 窗口 的 坐标值
每 一行 可以 使用 以下 三种 常见 的 终止 符号 的 其中 一种 ： 回车符 、 换行符 或 回车符 加 换行符 （ 三者 甚至 可以 混合 使用 ）
filename   应当 是 档案 成员 的 全名 ，   date _ time   应当 是 包含 六个 字段 的 描述 最近 修改 时间 的 元组   ； 这些 字段 的 描述 请参阅   ZipInfo   对象
这些 操作 有 ：   转化 至   " complex "   和   " bool " ，   " real " 、   " imag " 、 " + " 、 "   " 、 "   " 、 " / " 、   " abs ( ) " 、   " conjugate ( ) " 、   "   "   和   " !   "
如果 指定 名称 的 模块 未找到 ， 则 会 引发   " ModuleNotFoundError "
要 明白 为何 会 这样 ， 你 需要 知道   ( a )   如果 一个 对象 实现 了   " __ iadd __ "   魔术 方法 ， 它会 在 执行   " +   "   增强 赋值 时 被 调用 ， 并且 其 返回值 将 用于 该 赋值 语句 ；   ( b )   对于 列表 来说 ， " __ iadd __ "   等价 于 在 列表 上 调用   " extend "   并 返回 该 列表
返回 一个 包含   fs   所 指定 的   " Future "   实例 （ 可能 由 不同 的   " Executor "   实例 创建 ） 的 迭代 器 ， 这些 实例 会 在 完成 时 生成   future   对象 （ 包括 正常 结束 或 被 取消 的   future   对象 ）
Python   有 什么 新 变化 ？
它 定义 了 一个 函数   " kbhit ( ) "   用于 检查 是否 有 键盘 中 的 某个 键 被 按 下 ， 以及   " getch ( ) "   用于 获取 一个 字符 而 不 将 其 回显
日历 的 第一年 由 平台 依赖于 使用 的 平台
对 上下文 表达式   ( 在   " with _ item "   中 给出 的 表达式 )   求值 以 获得 一个 上下文 管理器
请 注意 ， 这些 检查 仅 通过 静态 类型 检查程序 来 强制
" Index ( value ) "   将 返回   " value "   本身 ， " ExtSlice ( slices ) "   将 返回   " Tuple ( slices ,   Load ( ) ) "
源代码 ：   Lib / colorsys . py
如下 记录 的 每个 菜单 标识 着 与 之 关联 的 窗口 类型
关闭   " Process "   对象 ， 释放 与 之 关联 的 所有 资源
" sys . path "   条目 可 指定 的 名称 有 文件系统 中 的 目录 、 zip   文件 和 其他 可 用于 搜索 模块 的 潜在   “ 位置 ” （ 参见   " site "   模块 ） ， 例如   URL   或 数据库 查询 等
（ 由   Pablo   Galindo   在   bpo   35606   中 贡献 。 ）
警告 :
移除 条目 或 改变 其 优先级 的 操作 实现 起来 更为 困难 ， 因为 它会 破坏 堆 结构 不 变量
" y # "   ( 只读   bytes   like   object   )   [ const   char   ,   int   或   " Py _ ssize _ t " ]   " s # "   的 变式 ， 不 接受   Unicode   对象 ， 只 接受 类 字节 类型 变量
要 设置 让 系统 忽略 系统 数据 并 改用   tzdata   包 ， 请 设置   " PYTHONTZPATH   " " "
如果 你 的 应用程序 完全 不 需要 一个 闪烁 的 光标 ， 你 可以 调用   " curs _ set ( False ) "   来 使 它 隐形
角度 转换
它 可以 是 一个 消息 字符串 或 另 一个 异常 实例
如果 此 变量 被 设为 一个 非空 字符串 ， 则 会 启用   " asyncio "   模块 的 调试模式
" trace "   跟踪 Python 语句 执行
可选 的   headersonly   与   " parse ( ) "   方法 中 的   headersonly   是 一致 的
http : / / bugs . jython . org :   Jython   的 错误 追踪 器
由于 文件 本身
删除 和 弃 用 的 模块
" ' auto ' " :   如果   " microsecond "   为   0   则 与   " ' seconds ' "   相同 ， 否则 与   " ' microseconds ' "   相同
参见   iterator   的 定义
如果 给出 了 此 属性 并且   braceidpattern   为   " None "   则 此 模式 也 将 作用 于 带花 括号 的 占位 符
可以 在   Python   公告 邮件 列表 页面 进行 订阅
可选 的   mode   参数 是 文件 的   Unix   模式 ， 仅 在 要 创建 数据库 时才 会 被 使用
如果   ob   为   " PyDateTime _ DateTimeType "   类型 或   " PyDateTime _ DateTimeType "   的 某个 子 类型 则 返回 真值
另外 也 要 注意 不同 平台 还 可能 会 显式 地 限制 最大 缩进 层级
如果 你 想 保留 多重 的 空白行 ， 可以 在 新行 之间 加 空格
在 启用   "   O "   的 同时 丢弃 文档 字符串
UnknownHandler   对象
示例 如下 :
" PyInterpreterState "   结构 已 被 移入   " internal "   头文件 （ 特别 是   Include / internal / pycore _ pystate . h ）
通过 此 模式 ， 多个 工厂 方法 可以 被 链接 起来 ， 并且 只要 它们 不 重载 彼此 的 属性 或是 在 无意 中 覆盖 了 上面 列出 的 标准 属性 ， 就 不会 发生意外
不带 错误 检测 的 宏 版本   " PyList _ SetItem ( ) "
返回 消息 的 信封 头
在 分配 实例 之后 在 类型 对象 上移 除   " Py _ INCREF "   — —   如果 有 的话
在   3.3   版 更改 :   加入   daemon   参数
注解 :
可 选 参数 介绍
3.1   新版 功能 .
Process   是 一个 高层 级 包装 器 ， 它 允许 与子 进程 通信 并 监视 其 完成 情况
" collections . abc . Collection "   的 泛型 版本
第三方 库 也 可能 会 为了 特殊 的 目的 而 定义 它们 自己 的 类型 ， 例如 用于 图像处理 和 数值 分析 等
当 函数 因 某个 未 处理 异常 而 终结 时 ， " sys . unraisablehook ( ) "   会 被 调用 以 处理 异常
在 第一次 调用 此 函数 开始 迭代 之前 ， 由   ppos   所 引用 的   " Py _ ssize _ t "   必须 被 初始化 为   " 0 " ； 该 函数 将 为 字典 中 的 每个 键值 对 返回 真值 ， 一旦 所有 键值 对 都 报告 完毕 则 返回 假值
3.2   新版 功能 .
每种 可 格式化 的 类型 都 可以 自行 定义 如何 对 格式 规格 进行 解读
3.7   新版 功能 .
" calendar "   模块 包含 以下 数据 属性 ：
3.2   新版 功能 :   " > > "   标记
PEP   292   Simpler   String   Substitutions   由   Barry   Warsaw   撰写 并 实现
假如 现在 有 如下 的 目录 结构 :
添加 了 新 的 函数   " math . prod ( ) "   作为 的   " sum ( ) "   同类 ， 该 函数 返回   ' start '   值   ( 默认值 :   1 )   乘以 一个 数字 可 迭代 对象 的 积 :
Lt   词首 大写字母
可选项   altchars   必须 是 一个 长   2   字节 的   bytes   like   object   ， 它 指定 了 用于 替换   " + "   和   " / "   的 字符
[ 1 ]   配置 解析器 允许 重度 定制
( 1 )   " % S "   十进制 数   [ 00 , 61 ]   表示 的 秒
返回 分配 给 字符   chr   的 常规 类别 为 字符串
该 接口 的 描述 信息 在   Buffer   Object   Structures   一节 中 ；
" inspect . getdoc ( ) "   函数 现在 可以 找到   " __ slots __ "   的 文档 字符串 ， 如果 该 属性 是 一个 元素 值为 文档 字符串 的   " dict "   的话
如果   " x "   为 负值 则   " y "   必须 为 整数
请 注意 分派 是 作用 于 第一个 参数 的 类型 ， 要 相应 地 创建 你 的 函数 :
" namedtuple ( ) "   创建 命名 元组 子类 的 工厂 函数   " deque "   类似 列表 ( list ) 的 容器 ， 实现 了 在 两端 快速 添加 ( append ) 和 弹出 ( pop )   " ChainMap "   类似 字典 ( dict ) 的 容器 类 ， 将 多个 映射 集合 到 一个 视图 里面   " Counter "   字典 的 子类 ， 提供 了 可 哈希 对象 的 计数 功能   " OrderedDict "   字典 的 子类 ， 保存 了 他们 被 添加 的 顺序   " defaultdict "   字典 的 子类 ， 提供 了 一个 工厂 函数 ， 为 字典 查询 提供 一个 默认值   " UserDict "   封装 了 字典 对象 ， 简化 了 字典 子 类化   " UserList "   封装 了 列表 对象 ， 简化 了 列表 子 类化   " UserString "   封装 了 列表 对象 ， 简化 了 字符串 子 类化
" unittest "   单元测试 框架
以 字节 串 对象 的 形式 返回 整个 扁平化 后 的 消息
Counter   对象 进行 数学 运算 时 同样 会 保持 顺序
设置 这个 参数 后 ， " sqlite3 "   模块 将 解析 它 返回 的 每 一列 申明 的 类型
如果 模块 包含 类 定义 ， 则 不会 更新 现有 的 类 实例 以 使用 新 的 类 定义
自定义 文件 解析
type   必须 为   ctypes   类型
" % X "   本地化 的 适当 时间 表示
它 应当 被 初始化 为   " PY _ MINOR _ VERSION "
NamedNodeMap   对象
调用 方 应用程序 应当 以 适当 的 数据 填充 这些 区域
十进制 浮点运算
返回 一个   HTML   表格 作为 指定 年 月 的 日历
下列 异常 主要 被 用作 其他 异常 的 基类
当 指定 了 格式 时 默认 会 使用 表达式 的   " str ( ) " ， 除非 声明 了 转换 字 段   " ' ! r ' "
如果 存在 无效 的   Python   语法 将 引发   " SyntaxError " ， 而 如果 存在 无效 的 字 面值 则 将 引发   " OverflowError "   或   " ValueError "
之所以 这样 命名 ， 是因为 程序 应该 如何 处理 该 参数值 ， 完全 取决于 它 在 命令行 出现 的 位置
示例
See   跳过 测试 与 预计 的 失败   for   more   information .
将 此 处理器 的 过滤器 应用 于 记录 ， 在 要 处理 记录 时 返回   " True "
如果 是 你 自已 开发 的 类 ， 更 正确 的 面向对象 风格 是 在 类 中 定义方法 来 封装 特定 的 行为 ， 而 不是 检查 对象 的 类 并 根据 它 属于 什么 类来 做 不同 的 事
如果   logging . raiseExceptions   为   " False "   （ 生产 模式 ） ， 则 会 以 静默 方式 丢弃 该 事件
例如 :
循环 探测器 可以 检测 垃圾 循环 并 回收
你 安装 后 得到 的 东西 有 ：
3.7   新版 功能 .
如果 在 类 中 定义 了   " __ setattr __ ( ) "   或   " __ delattr __ ( ) "   则 将 会 引发   " TypeError "
如果 前面 有   '   '   ， 则 时区 位于 本初子午线 的 东边 ； 否则 ， 在 它 是 西边
asyncio   支持
例如 ， SML 有 一个 制表 工具 ：   " tabulate ( f ) " ， 它 可 产生 一个 序列   " f ( 0 ) ,   f ( 1 ) ,   ... "
必须 传递 给   " re . compile ( ) "   的 结果 字符串 必须 是   " \ \ section "
" profile "   和   " cProfile "   模块 参考
上 次访问 的 时间
因此 如果 之前 导入 过   " foo . bar . baz " ， 则   " sys . modules "   将 包含   " foo " ,   " foo . bar "   和   " foo . bar . baz "   条目
但是 ， 请 注意 一组 可 调用 对象 能够 通过 继承 来 共享 签名 :
解析 无效 的   HTML   ( 例如 ： 未 引用 的 属性 ） 也 能 正常 运行 :
Windows   上 不 接受 文件 对象 ， 但 接受 套 接字
在 无 延迟 模式 下 ， 如果 没有 输入 则 返回   "   1 " ， 在 其他 情况 下 都 会 等待 直至 有键 被 按 下
允许 使用 下列 格式 字符串 :
（ 这 意味着 如果 对于 同一 异常 存在 有 嵌套 的 两个 处理器 ， 而 异常 发生 于 内层 处理器 的   try   子句 中 ， 则 外层 处理器 将 不会 处理 该 异常 。 ）
之后 还 可能 带有 一个 以 冒号   " ' : ' "   标示 的 格式 说明符
例如 不可 再 调用   " get ( ) " ,   " put ( ) "   和   " empty ( ) "   等 方法
指出 之前 进入 队列 的 任务 已经 完成
否则 为   " co _ freevars [ i   len ( co _ cellvars ) ] "
返回   o1   、   o2   做 矩阵 乘法 后 的 结果 ， 如果 失败 ， 返回   " NULL "
实际上 共有 三 种类 别的 文件 对象 :   原始 二进制 文件   ,   缓冲 二进制 文件 以及 文本文件
大致 相当于 ：
如果 定义 发生 于 函数 代码 块 中 ， 则 其 作用域 会 扩展 到 该 函数 所 包含 的 任何 代码 块 ， 除非 有 某个 被 包含 代码 块 引入 了 对 该 名称 的 不同 绑定
" " + Infinity " "   ， 指示 该 运算 数是 正 无穷
你 可以 通过 使用 非 捕获 组来 显式 表达 这个 事实 :   " ( ? : ... ) " ， 你 可以 用 任何 其他 正则表达式 替换   " ... "
BoundedSemaphore   是 特殊 版本 的   " Semaphore " ， 如果 在   " release ( ) "   中 内部 计数器 值 增加 到 初始   value   以上 它 将 引发 一个   " ValueError "
指定   " total   False "   以 允许 键 作为 可选项 :
对键 取值 类型 的 限制 已列 在 之前 的 标准 类型 层级 结构 一节 中
下面 是 一个 多行 文档 字符串 的 例子 :
3.4   新版 功能 .
超过 此 长度 的 说明 将 被 截断
如果   size   为   " None "   则 禁用 撤消 缓冲区
例子 中 函数   " setup ( ) "   在 调用 时 额外 传递 了 元 信息 ， 是 推荐 发布 包 构建 时 的 内容
PEP   495 :   消除 本地 时间 的 歧义
" PyUnicode _ EncodeASCII ( ) " :   使用   " PyUnicode _ AsASCIIString ( ) "
注解 :
让 我们 考虑 表达式   " a [ bcd ]   b "
当 无 参数 调用 时 ：   如果 这个 线程 已经 拥有 锁 ， 递归 级别 增加 一 ， 并 立即 返回
" turtledemo "   演示 脚本 集
来自   " Context . power ( x ,   y ,   modulo ) "   的 结果 值 等于 使用 无限 精度 计算   " ( x   y )   %   modulo "   所 得到 的 值 ， 但 其 计算 过程 更 高效
以上 三个 函数 提供 给 用户 输入 期望值 的 类型 的 对话框 .
" Future "   类 将 可 调用 对象 封装 为 异步 执行
添加 了 新 的   " plistlib . UID "   并 启动 了 对 读取 和 写入 经过   NSKeyedArchiver   编码 的 二进制   plists   的 支持
不 改变 海龟 的 朝向
当 需要 临时 限制 整个 应用程序 中 的 日志 记录 输出 时 ， 此 功能 会 很 有用
" zipfile "   模块 提供 了 简单 的 命令行 接口 用于 与   ZIP   归档 的 交互
方法 是 绑定 的 函数 对象
basename   仅限 在 内部 使用
" % f "   是 对   C   标准 中 格式 字符集 的 扩展 （ 但 单独 在   datetime   对象 中 实现 ， 因此 它 总是 可用 ）
大致 相当于 ：
静态方法 的 调用 可以 在 类 上 进行   ( 例如   " C . f ( ) " )   也 可以 在 实例 上 进行   ( 例如   " C ( ) . f ( ) " )
path   被 希望 使用 一个 模块 的   " __ file "   属性 或 来自 一个包 的   " __ path __ "   来 构建
3.3   新版 功能 .
一个 扩展   " EnvBuilder "   的 例子
每个   " yield "   会 临时 暂停 处理 ， 记住 当前 位置 执行 状态   ( 包括 局部变量 和 挂 起 的   try   语句 )
空 字符串 不会 被 缩进
有 一些 其他 注意事项 ：
（ 由   Raymond   Hettinger   在   bpo   33089   中 贡献 。 ）
对于 这些 新 功能 ， Perl   开发人员 无法 选择 新 的 单键 击 元字符 或 以   " \ "   开头 的 新 特殊 序列 ， 否则   Perl   的 正则表达式 与 标准 正则 容易 混淆
参数 列表 过长
在   3.8   版 更改 :   " unicode _ internal "   编解码器 已 被 移除
" doupdate ( ) "   整体 更新 物理 屏幕 以 匹配 虚拟 屏幕
请 注意 此 函数 会 尝试 获取 并 释放 一个 缓冲区 ， 并且 在 调用 对应 函数 期间 发生 的 异常 会 被 屏蔽
在   3.2   版 更改 :   In   earlier   versions   the   " TestSuite "   accessed   tests   directly   rather   than   through   iteration ,   so   overriding   " __ iter __ ( ) "   wasn ' t   sufficient   for   providing   tests .
如果   allow _ nan   为   true   （ 默认 ） ， 那么   " NaN "   ，   " Infinity "   ， 和   "   Infinity "   进行 编码
虽然 IPv4 不 支持 展开 或 压缩 ， 但 关联 对象 仍 提供 相关 属性 ， 因此 版本 中性 代码 可以 轻松 确保 最 简洁 或 最 详细 的 形式 用于 IPv6 地址 ， 同时 仍能 正确处理 IPv4 地址
解释 协议 的 两个 版本 之间 的 差异 的 细节 超出 了 本 介绍 的 范围 ， 但 读者 需要 至少 知道 存在 这 两个 版本 ， 并且 有时 需要 强制 使用 一个 版本 或 其他 版本
一个 用来 为 指定 模块 返回   " __ file __ "   的 值 的 抽象 方法
特殊 海龟 方法
对于 可 查找 的 输出 流 ， " wave "   头 将 自动更新 以 反映 实际 写入 的 帧 数
在 之前 版本 中 ， 字节 码 求值 循环 会 在 每条 指令 上 被 打断 直到 主线 程 处理 了 信号
" python ._ pth "   ( 仅 Windows )
默认 情况 下 禁用 可 加载 扩展
向 应用 于 写入 到 当前 窗口 的   " background "   集中 添加 属性   attr
对象 展示
" tkinter "   使用 Python 类 ， 对 Tk 的 窗体 小 部件 （ Widgets ） 进行 了 一系列 的 封装
调试器 命令
这些 函数 是 不 可能 用于 未 正确 初始化 的 对象 的 ， 如 一个 列表 对象 被   " PyList _ New ( ) "   创建 ， 但 其中 的 项目 没有 被 设置 为 一些 非 ` ` NULL ` ` 的 值
值   意义   " ' replace ' "   " a [ i1 : i2 ] "   应由   " b [ j1 : j2 ] "   替换
移除 字典   p   中 由 字符串   key   指定 的 键 的 条目
实际 的 暂停 时间 可能 小于 请求 的 时间 ， 因为 任何 捕获 的 信号 将 在 执行 该 信号 的 捕获 例程 后 终止   " sleep ( ) "
compresslevel   参数 是 一个 从   " 0 "   到   " 9 "   的 整数 ， 用于 控制 压缩 等级 ；   " 1 "   最快 但 压缩 比例 最小 ， " 9 "   最慢 但 压缩 比例 最大
一个 例子 就是   Python   库 本身 的   " Py _ OptimizeFlag "   ， 根据 启动 选项   "   O "   、   "   OO "   的 不同 ， 它 是 值 可能 为   0 、 1 、 2   的 整型
这是 为了 向 后 兼容 及 兼容 Unix ， 其中 命令   " python "   通常 是 指 Python   2
3.6   新版 功能 .
在 另一方面 ， 允许 在 一组 枚举 之间 共享 某些 通用 行为 也 是 有 意义 的
源码 ：   Lib / turtle . py
常数
参见   PEP   492
以 正整数 的 形式 返回 年份 值
用 十进制 来 理解 这个 问题 显得 更加 容易 一些
第二个 形参   path   将 是 传递 给   function   的 路径名
如果 在 所有   Future   对象 完成 前 发生 超时 则 将 引发   " asyncio . TimeoutError "
" pickle "   扩展 子 类化 针对   C   优化 的   " Pickler "   现在 可 通过 定义 特殊 的   " reducer _ override ( ) "   方法 来 重载 函数 和 类 的 封存 逻辑
我 发现 这 实际上 提升 了 方法 的 可读性 ： 当 浏览 一个 方法 代码 时 ， 不会 存在 混淆 局部变量 和 实例 变量 的 机会
函数
Gerlach   在   bpo   36268   中 贡献 。 ）
下 一条 历史记录 循环 浏览 历史记录 中 与 当前 条目 匹配 的 后续 命令
你 可以 通过 一系列   " if ...   elif ...   elif ...   else " . 轻松 完成 这项 工作
杀死 子 进程
在   3.3   版 更改 :   移 除了   strict   参数
从 包中 获取 一个 资源
安装程序 有 一个 选项 可以 为 您 设置
将 序列 或 可 迭代 对象   o   作为 其他   " PySequence _ Fast   "   函数 族 可用 的 对象 返回
如果 空位 已 被 填充 ， 则 会 引发   " TypeError "   异常
另 请参阅   " PyThreadState _ GetFrame ( ) "
为了 能够 检测   " UTF   16 "   或   " UTF   32 "   字节 序列 的 大小 端序 ， 可以 使用 所谓 的   BOM   ( " 字节 顺序 标记 " )
目前 为   " PAX _ FORMAT "
该 模块 提供 了 一种 简单 的 方法 来 计算 一小 段   Python   代码 的 耗时
使用 给定 的 参数 调用   function   （ 以 函数 或 方法 对象 的 形式 提供 ， 不能 是 字符串 ）
如 未指定   rmode   则 返回 当前 的 大小 调整 模式
主机 地址 通常 组合 在 一起 形成 IP 网络 ， 因此   " ipaddress "   提供 了 一种 创建 、 检查和 操作 网络 定义 的 方法
在   3.5   版 更改 :   在   Python   3.5   之前 ， 如果 一个   " time "   对象 代表   UTC   午夜 零时 则 会 被 视为 假值
基础教程
3.5   新版 功能 .
如果   o   是 一个 索引 整数 （ 存有   nb _ index   位置 并 有   tp _ as _ number   填入 其中 ） 则 返回   " 1 " ， 否则 返回   " 0 "
其他 改进
" shutil "   高阶 文件 操作
Cython   及其 相关 的   Pyrex   是 接受 稍微 修改 过 的 Python 形式 并 生成 相应 C 代码 的 编译器
为什么 有 单独 的 元组 和 列表 数据类型 ？
内存 将 不会 以 任何 方式 被 初始化
一个 非常简单 的 例子 ：
可 选 参数   isjunk   必须 为   " None "   ( 默认值 )   或 为 接受 一个 序列 元素 并 当且 仅 当 其 为 应 忽略 的 “ 垃圾 ” 元素 时 返回 真值 的 单 参数 函数
给   " True "   赋值 是 非法 的 并 会 引发   " SyntaxError "
另外 ， 它们 的 默认值 分别 为   " False "   和   " True "
了解 Python   2   和   3 之间 的 区别
类似   "   "   这样 的 重复 是 贪婪 的   ； 当 重复 正则 时 ， 匹配 引擎 将 尝试 尽可能 多地 重复 它
EHLO   接受 来自 客户 的 问候 并 将 其 存储 在   " seen _ greeting "   中
[   脚注   ]
调试 构建
请参阅   PEP   483   来 了解 详情 ， 以及   " typing "   或泛 型 别名 类型 来 了解 其 用法
字节 码 分析   API   允许 将   Python   代码 片段 包装 在   " Bytecode "   对象 中 ， 以便 轻松 访问 已 编译 代码 的 详细信息
use _ errno   和   use _ last _ error   具有 与 前面 相同 的 含义
Python   文档
参见 :   Modules   " tkinter . messagebox " ,   读写 文件
返回 一个   " namedtuple ( ) "   " ( nchannels ,   sampwidth ,   framerate ,   nframes ,   comptype ,   compname ) " ， 与   " get   ( ) "   方法 的 输出 相同
某些 平台 可能 支持 其他 指令 ， 但 只有 此处 列出 的 指令 具有   ANSI   C   标准化 的 含义
如果 有 一个 文件名 为   " '   ' " ， 它 也 会 被 替换 为   " sys . stdin "   并且 可 选 参数   mode   和   openhook   会 被 忽略
" ' o ' "   八进制 格式
在 方法 内部 引用 数据 属性 （ 或 其他 方法 ！ ） 并 没有 简便 方式
如何 让 编辑器 不要 在 我 的   Python   源代码 中 插入   tab   ？
" fromtimestamp ( ) "   可能 会 引发   " OverflowError " ， 如果 时间 戳 数值 超出 所在 平台   C   " localtime ( ) "   或   " gmtime ( ) "   函数 的 支持 范围 的话 ， 并会 在   " localtime ( ) "   或   " gmtime ( ) "   报错 时 引发   " OSError "
请 注意 ， 相对 导入 是 基于 当前 模块 的 名称 进行 导入 的
文件 只能 被 附加
Windows 的 子 进程 支持
测试用例
在   3.7   版 更改 :   Support   of   the   " ' If   Modified   Since ' "   header .
在   3.6   版 更改 :   接受 一个 类 路径 对象
当 浮点 型   timeout   参数 被 设置 为 正值 调用 时 ， 只要 无法 获得 锁 ， 将 最 多 阻塞   timeout   设定 的 秒数
这 在 使用 需要 内存地址 的 低 层级 （ 因此 不够 安全 ）   I / O   接口 时会 很 有用 ， 例如 某些   " ioctl ( ) "   操作
返回 包含 对键 的 弱 引用 的 可 迭代 对象
这种 改写 不 考虑 标识符 的 句法 位置 ， 只要 它 出现 在 类 定义 内部 就 会 进行
3.7   新版 功能 .
如果 终结 器为 存活 状态 则 该 特征 属性 为 真值 ， 否则 为 假值
有 几个 其他 实用工具 不 需要
参见 :
多个 目录 中 的 包
注意 ， 迭代 器 在   predicate   首次 为 false 之前 不会 产生 任何 输出 ， 所以 可能 需要 一定 长度 的 启动 时间
提示
但 请 注意 ， 本 示例 的 做法 通常 只会令 程序 的 阅读者 感到 迷惑
二元 位 运算
重要 的 模块 内容
PEP   380 :   委托 给子 生成器 的 语法
clamp   字段 为   " 0 "   ( 默认值 )   或   " 1 "
实际 应用 中 ， 你 应该 会 更 喜欢 使用 内置 函数 去 组成 复杂 的 流程 语句
r   ,   g   ,   b   的 取值 范围 应为   0 .. colormode
在   3.4   版 更改 :   Updated   to   be   based   on   PEP   451
返回   x   和   y   的 差
格式 字符串 语法
为了 应对 这种 情况 ， 通用 解析 系统 允许 用户 指定 :
（ 由   Brett   Cannon   在   bpo   37663   中 贡献 。 ）
第   4   个 参数 是 数据库 的 名称 （ “ main ” ， “ temp ” 等 ） ， 如果 需要的话
结果 状态   " MaildirMessage "   状态   R   标记   S   标记   O   标记   " cur "   子目录   D   标记   T   标记   F   标记   F   标记   A   标记   R   标记
本 小节 将 详细 解释   " 0.1 "   的 例子 ， 并 说明 你 可以 怎样 亲自 对 此类情况 进行 精确 分析
对象 可以 为   " NULL " ， 在 此 情况 下该 宏 不 产生 任何 效果 ； 在 其他 情况 下 其 效果 与   " Py _ DECREF ( ) "   相同 ， 区别 在于 其 参数 也 会 被 设为   " NULL "
参见 列表 、 集合 与 字典 的 显示
所以 ， 它 只 在 直接 调用   Python   C   接口函数 的 时候 有用
" tokenize "   对   Python   代码 使用 的 标记 解析器
delimiter   这是 用来 表示 占位 符 的 起始 的 分隔符 的 字符串 字 面值
（ 由   Antoine   Pitrou   在   bpo   8850 ,   bpo   1589 ,   bpo   8322 ,   bpo   5639 ,   bpo   4870 ,   bpo   8484   和   bpo   8321   中 贡献 。 ）
所有 参数 都 是 必要 的
在 前 一种 情况 下 ， 两个 数字 将 被 转换 为 相同 类型 然后 相乘
宽度   Specifies   an   integer   value   indicating   the   desired   width   of   the   entry   window ,   in   average   size   characters   of   the   widget ' s   font .
参见 :
（ 由   Tal   Einat   和   Saimadhav   Heblikar   在   bpo   17535   中 贡献 。 ）
任何 传给   func   的 可选 的 参数 都 应当 作为 参数 传给   " register ( ) "
例如 :
（ 当 夏令时 结束 时 回拨 时钟 或 由于 政治 原因 导致 当明 时区 的   UTC   时差 减少 就 会 出现 重复 的 时间段 。 ）   取值   0   ( 1 )   表示 两个 时刻 早 于 （ 晚于 ） 所 代表 的 同一 边界 时间
使用 默认 的   " None " ， 则 不 进行 成 定向 ； 子 进程 的 文件 流将 继承 自父 进程
对于 大多数 需求 来说 最为 常见 并且 可能 最为 合理 的 一种 则 是 通过 你 自己 的   " setup . py "   脚本 来 包含 新 的 实现 ， 然后 让   " distutils . core . setup ( ) "   函数 使用 它们 :
（ 由   Yury   Selivanov   在   bpo   32314   中 贡献 。 ）
不是   SQLite   库 的 版本号
将 屏幕 或 滚动 区域 向上 滚动   lines   行
支持 的 运算 ：
其他 对象
移除
以下 是 使用 了 这样 两个 类 的 示例 ( 省略 了 导入 语句 ) :
下列 特性 与   API   已 从   Python   3.8   中 移除 ：
例子   结果   " product ( ' ABCD ' ,   repeat   2 ) "   " AA   AB   AC   AD   BA   BB   BC   BD   CA   CB   CC   CD   DA   DB   DC   DD "   " permutations ( ' ABCD ' ,   2 ) "   " AB   AC   AD   BA   BC   BD   CA   CB   CD   DA   DB   DC "   " combinations ( ' ABCD ' ,   2 ) "   " AB   AC   AD   BC   BD   CD "   " combinations _ with _ replacement ( ' ABCD ' ,   2 ) "   " AA   AB   AC   AD   BB   BC   BD   CC   CD   DD "
使用   Join   避免 僵尸 进程
3.2   新版 功能 :   bjunk   和   bpopular   属性
支持 读取   /   写入   POSIX.1   1988   ( ustar )   格式
" dircmp "   类
如果 一个 索引 仅 由 十进制 数码 构成 ，   则 将 尝试 使用 相应 的 整数 值来 访问 ， 如果 有 必要 则 将 回退 为 字符串 值
使用   "   X   tracemalloc   NFRAME "   以 启动 限定 回溯   NFRAME   帧 的 跟踪
" ' x ' "   或   " ' x : ' "   创建 tarfile 不 进行 压缩
替代   " % x "   和   " % o "   以及 转换 基于 不同 进位制 的 值 :
以下 函数 集 ， 仿照   ANSI   C   标准 ， 并 指定 了 请求 零 字节 时 的 行为 ， 可 用于 从   Python 堆 分配 和 释放 内存
此 模块 定义 了 一个 异常 ：
参阅   RegDeleteKeyEx   文档
( 2 )   " % U "   十进制 数   [ 00 , 53 ]   表示 的 一年 中 的 周数 （ 星期日 作为   ( 3 )   一周 的 第一天 ） 作为
在 给定 数量 和 集合 元素 枚举 所有 不同 的 多 集合 ， 参考   " itertools . combinations _ with _ replacement ( ) "
如果 可 选 参数   align   为 真值   ， 则 分块 应当 以   2   字节 边界 对齐
要 指定 替代 文件 列表 ， 请 将 其 作为 第一个 参数 传给   " input ( ) "
这个 方法 在 遇到 注释 的 时候 被 调用 （ 例如 ：   " < !   comment   > "   ）
在   3.6   版 更改 :   接受 一个 类 路径 对象
没有 代码 应该 直接 使用   " MISSING "   值
不 可能 中断 锁 的   " acquire ( ) "   方法   — —   " KeyboardInterrupt "   一场 会 在 锁 获取 到 之后 发生
还要 注意 ， 数字 扩展 和 其他 扩展 还 定义 了 具有 各种 特性 的 类似 数组 的 结构
PEP   328   导入 ： 多行 和 绝对 / 相对 导入   PEP   由   Aahz   撰写 ， 由   Thomas   Wouters   实现
如果 没有 指定 其他 名称 ， 且 被 导入 的 模块 为 最高 层级 模块 ， 则 模块 的 名称 将 被 绑定 到 局部 命名 空间 作为 对 所 导入 模块 的 引用
在   3.5 . 1   版 更改 :   这个 函数 接受 任意   awaitable   对象
将 中断 字符 （ 通常 为   " Control   C "   或   " Delete "   ） 键入 主要 或 辅助 提示 会 取消 输入 并 返回 主 提示符
实现   " TOS   iter ( TOS ) "
这会 触发 执行 它 管理 的 所有   " SharedMemory "   对象 的   " SharedMemory . unlink ( ) "   方法 ， 然后 停止 这个 进程
Python   作为 计算器 使用
模块   " base64 "   支持 在 16 ， 32 ， 64 ， 85 进制 中 进行 符合   RFC   协议 的   base64   样式 编码
查找 Python 可执行文件
" Packer "   类 的 实例 化 不 附带 参数
返回 记录 的 消息   ID
或者 ， 你 可以 使用   " get _ context ( ) "   来 获取 上下文 对象
在 其他 情况 下 ， 如果 未 提供 参数 ， 或者 如果 参数 为   " None " ， 则   " token _   "   函数 将 改用 一个 合理 的 默认值
函数 式 风格 反对 使用 带有 副作用 的 函数 ， 这些 副作用 会 修改 内部 状态 ， 或者 引起 一些 无法 体现 在 函数 的 返回值 中 的 变化
它 在   " Popen "   由   " shell   True "   调用 时 使用
否则 为   " None "
注解 :
假设   o   由   " PySequence _ Fast ( ) "   返回 且   o   不 为   " NULL "
我 怎么 让   Python   脚本 可 执行 ？
这 也 使得   Roundup   能 在 我们 处理 所 报告 的 错误 时向 你 发送 更新 消息
在 多个 地方 记录 日志
操作 的 数字 代码 ， 对应 于 下面 列出 的 操作码 值 和 操作码 集合 中 的 字节 码值
请 改用   " sys . getswitchinterval ( ) "   和   " sys . setswitchinterval ( ) "
不 存在 语法 来 表示 可选 的 或 关键词 参数 ， 这 类 函数 类型 罕见 用于 回调 函数
赋值 语句 用于 将 名称 （ 重 ） 绑定 到 特定 值 ， 以及 修改 属性 或 可变 对象 的 成员 项 :
" GzipFile "   类 可以 读写   gzip   格式 的 文件 ， 还 能 自动 压缩 和 解压缩 数据 ， 这 让 操作 压缩文件 如同 操作 普通 的   file   object   一样 方便
子 类化   Repr   对象
索引   属性   意义   0   gr _ name   组名   1   gr _ passwd   （ 加密 的 ） 组 密码 ；   通常 为空   2   gr _ gid   数字 组 ID   3   gr _ mem   组内 所有 成员 的 用户名
还有 两个 重复 限定符
PEP   308 :   条件 表达式
这个 模块 定义 了 实现   HTTP   和   HTTPS   协议 客户端 的 类
调用   content _ manager   的   " set _ content ( ) "   方法 ， 将 自身 作为 消息 传入 ， 并 将 其他 参数 或 关键字 作为 额外 参数 传入
类 定义
第一个 元素 是 标记   ID （ 整数 ） ， 第二个 是 标记 位置 ， 从 数据 开头 算起 的 帧 数 （ 整数 ） ， 第三个 是 标记 的 名称 （ 字符串 ）
" logical _ or ( ) "   是 需要 两个   logical   operands   的 逻辑运算 （ 请参阅 逻辑 操作数   ）
（ 由   Brandt   Bucher   在   bpo   39702   中 贡献 。 ）
" importlib "   " import "   的 实现
完成 这个 教程 之后 ， 你 应该 能 毫不 困难 地 阅读 该 文档
对于 3.2 之前 的 Python 版本 ， 行为 如下 ：
如果 格式 字符串 中 的 数字   arg _ names   为   0 ,   1 ,   2 ,   ...   的 序列 ， 它们 可以 全部 省略 （   而 非 部分 省略 ） ， 数字   0 ,   1 ,   2 ,   ...   将会 按 顺序 自动 插入
3.9   新版 功能 .
3.5   新版 功能 .
创建 一个 子 进程
如果 未 设置 ， 则 忽略 异常
其他 语言 特性 修改
构造 器 函数 还 接受 下列 树形 哈希 形参 :
如果   timeout   未指定 或 为   " None " ， 则 不 限制 等待时间
如果 缺 了 一些 东西 ， " check "   会 显示 警告
复杂 数组
为什么 浮点 计算 不 准确 ？
在 这个 例子 中 ，   input   在   " with "   语句 结束 后 将 会 被 关闭 ， 即使 发生 了 异常 也 是 如此 :
通过   " popleft ( ) "   移去 老 的 条目 （ entries ） ， 通过   " extend ( ) "   添加 新 的 条目 ，   然后 反向   rotate
添加 了   encode _ chunked   参数
它们 可用 来 将 数码 分组 以 提高 可读性
3.7   新版 功能 :   " cProfile "   添加   "   m "   选项
直接 翻译成   ctypes   的 代码 如下 ， 但是 这 行不通 :
返回 上下文 对象 中所设 的 变量 的 数量
它们 显示 时 没有 可选 的 字 段 宽度 和 精度 规范 ， 并 被   " strftime ( ) "   结果 中 的 指示 字符 替换 ：
当 管理器 被 垃圾 回收 或者 父 进程 退出 时 ， 管理器 进程 会 立即 退出
" BufferedWriter "   在 继承 自   " BufferedIOBase "   和   " IOBase "   的 成员 以外 还 提供 或 重载 了 下列 方法 :
bpo   33421 :   为 ` ` typing . AsyncContextManager ` ` 添加 缺失 的 文档
这 可能 导致 之前 被 绑定 到 该 名称 的 对象 的 引用 计数 变为 零 ， 造成 该 对象 进入 释放 过程 并 调用 其析 构器 （ 如果 存在   ）
参见 :
这个 模块 还 提供 了 下列 辅助 函数 :
复用 已有 的 测试代码
扩展 插值 使用   " $ { section : option } "   来 表示 来自 外部 小节 的 值
类似 地 ， 字典 和 列表 代理 也 可以 相互 嵌套 :
作为 原子 出现 的 标识符 叫做 名称
使用 过滤器 传递 上下文 信息
请 注意 ， Internet   上 的 大多数   cookie   是   Netscape   cookie
" curses "   终端 字符 单元 显示 的 处理
当 作为 脚本 调用 时 ， 如果 要 调试 的 程序 异常 退出 ， pdb   调试 将 自动 进入 事后 调试
Python   的 当前 “ 通用 二进制 ” 版本 可以 在   Mac   的 新   Intel   和 传统   PPC   CPU   上 本地 运行
类 定义 语法
请求 零 字节 可能 返回 一个 独特 的 非   " NULL "   指针 ， 就 像 调用 了   " PyObject _ Calloc ( 1 ,   1 ) "   一样
" await "   " loop . shutdown _ asyncgens ( ) "   关闭 异步 生成器
UDP   回显 客户端
如果 选中 ， 安装 目录 将 添加 到 系统   " PATH "
当 名称 被 绑定 到 一个 对象 时 ， 对 该 原子 求值 将 返回 相应 对象
" default "   、   " default _ factory "   、   " init "   、   " repr "   、   " hash "   、   " compare "   以及   " metadata "   与 具有 和   " field ( ) "   声明 中 相同 的 意义 和 值
不过 ， " multiprocessing . connection "   模块 其实 提供 了 一些 更 灵活 的 特性
compression   是 在 写入 归档 时要 使用 的   ZIP   压缩 方法 ， 应为   " ZIP _ STORED " ,   " ZIP _ DEFLATED " ,   " ZIP _ BZIP2 "   或   " ZIP _ LZMA " ； 不可 识别 的 值 将 导致 引发   " NotImplementedError "
PEP   343 :   " with "   语句
请 注意 由于 底层 的 内存 管理 架构 （ C   的   " malloc ( ) "   函数 ） ， 解释器 也许 并 不 总是 能够 从 这种 情况 下 完全恢复 ； 但 它 毕竟 可以 引发 一个 异常 ， 这样 就 能 打印 出栈 回溯 信息 ， 以便 找出 导致 问题 的 失控 程序
构建
值 相对 于 已 定义数据 类型 过大
" stringprep "   因特网 字符串 预备
Differ   对象
事件 循环
返回   " x   y   n " ， 其中   n   为 最 接近   " x   /   y "   实际 值 的 整数 （ 如 结果 为   0   则 其 符号 将 与   x   的 符号 相同 ）
这 给出 了 与   " dict . update ( ) "   调用 序列 相同 的 顺序 ， 从 最后 一个 映射 开始 :
宏 版本 的   " PyMethod _ Self ( ) " ， 略去 了 错误 检测
设置 事件
这 可以 通过 指定   " namespace   "   关键字 参数 来 实现 :
如果   func   调用 引发 一个 异常 ， 当 从 迭代 器中 取回 它 的 值时 这个 异常 将 被 引发
" lzma "   用   LZMA   算法 压缩
设计 和 历史 常见问题
对象 分配器
" ' hours ' " :   以 两个 数码 的   " HH "   格式 包含   " hour "
相应 地 ， 集合 不 适宜 作为 依赖于 完全 排序 的 函数 的 参数 （ 例如 如果 给出 一个 集合 列表 作为   " min ( ) " ,   " max ( ) "   和   " sorted ( ) "   的 输入 将 产生 未定义 的 结果 ）
" aifc "   读写   AIFF   和   AIFC   文件
例如 ，   " 0.1 "   、   " 0.10000000000000001 "   、   " 0.1000000000000000055511151231257827021181583404541015625 "   全都 近似于   " 3602879701896397   /   2   55 "
这个 常量 可以 作为   " connect ( ) "   函数 的   detect _ types   参数
对 某 一行 的 改变 会 作用 于 所有 行 ， 通常 这 一定 不是 你 所 希望 的
静态方法 返回 底层 函数 ， 不 做 任何 更改
sqlite3   包
" " + Subnormal " "   ， 指示 该 运算 数是 正 的 次 标准 数
返回 一个   " SMTPHandler "   类 的 新 实例
上面 的 特殊 不 变量 是 用来 作为 一场 锦标赛 的 高效 内存 表示
它们 将会 以   ISO   日期 / ISO   时间 戳 的 形式 发给   SQLite
使用   " ZoneInfo "
返回值 是 转换 后 的 行 数据
3.3   新版 功能 .
Tk   有 与   Xt   的   " XtAddInput ( ) "   对应 的 调用 ， 它 允许 你 注册 一个 回调 函数 ， 当 一个 文件 描述符 可以 进行   I / O   操作 的 时候 ， Tk   主 循环 将会 调用 这个 回调 函数
这是   " print ( code _ info ( x ) ,   file   file ) "   的 便捷 简写 ， 用于 在 解释器 提示符 下 进行 交互式 探索
debug   设置 调试 级别 ； 更 高 的 值 使类 打印 调试 消息 ， 关于 它 正在 做 什么
完整 安装程序
新 的 特性
style   如果 指定 了   format   ， 将 为 格式 字符串 使用 此 风格
在 特定 情况 下 它们 也 可 通过   " EnumClass . member . member "   的 形式 来 访问   ， 但 你 绝对 不 应 这样 做 ， 因为 查找 可能 失败 ， 或者 更 糟糕 地 返回 你 所 查找 的   " Enum "   成员 以外 的 对象 （ 这 也 是 成员 应 使用 全 大写 名称 的 另 一个 好 理由 ） :
返回 类型
在   3.4   版 更改 :   增加 了 对   24   位 采样 的 支持
默认 文件名 为   " ~ / . history "
然后 执行   " rc . a   temp0 "   会 把   " temp0 "   的 内容 拷贝到   " rc "   的 空间
此 方法 在 遇到 处理 指令 的 时候 被 调用
（ 由   Roger   D
这个 类 继承 自   " ResourceLoader "   和   " ExecutionLoader " ， 需要 实现 ：
二进制 转换
" ctypes . wintypes "   模块 提供 了 其他 许多   Windows   专属 的 数据类型 ， 例如   " HWND " ,   " WPARAM "   或   " DWORD "
在 大多数 情况 下 ， 这 意味着 一个 简单 的   " Namespace "   对象 将 从 命令行 参数 中 解析 出 的 属性 构建 ：
3.3   新版 功能 .
发布 日期 :   2017   09   18
致谢
" yield "   语句 在 语义上 等同于   yield   表达式
" await "   " loop . create _ unix _ server ( ) "   创建 一个 Unix   socket 服务
但 这 并 不 保证 其 存在 于 某个 特定 的 操作系统 中
不同于   " :   "   运算符 ， 这个 惯用 方式 不会 使 变量 泄露 到 外部 作用域 中
CTRL _ C _ EVENT   和   CTRL _ BREAK _ EVENT   可以 被 发送给 以 包含   " CREATE _ NEW _ PROCESS "   的   creationflags   形参 启动 的 进程
这所 造成 的 结果 是 字典 被 转换 为   JSON   然后 转换 回 字典 时 可能 和 原来 的 不 相等
" Control   G "   终止 ， 返回 窗口 内容
运算符
是否 有   Python   程序 规范 代码 标准 或 风格 指南 ？
由于 不同 的 操作系统 具有 不同 的 路径 名称 约定 ， 因此 标准 库中 有 此 模块 的 几个 版本
库
在 之前 的 版本 中则 会 引发   " RuntimeError "
只能 在   coroutine   function   内部 使用
需要   " zlib "   模块
返回 复数   op   的 C 类型   " Py _ complex "   值
为 任意 带有 大到 无法 放入 默认 的 单字节 的 参数 的 操作码 添加 前缀
在 您 的   " . gdbinit "   文件 中 （ 或 交互式 ） 添加 命令 ：
如同 使用 其他 编解码器 一样 ， 将 字符串 序列化 为 字节 序列 被 称为 编码   ， 而 从 字节 序列 重建 字符串 被 称为 解码
列表 当中 的 每一项 都 是 一个 字符串 ， 其值 为 对应 子 部分 的   Content   Type   头字 段 的   " charset "   参数值
已 缓存 字节 码 的 失效
index   为 一个 整数 ， 用于 标识 要 获取 值项 的 索引
实例 化旧 类   " Num " ,   " Str " ,   " Bytes " ,   " NameConstant "   和   " Ellipsis "   都 将 返回   " Constant "   的 实例
" parse _ args ( ) "   方法 支持 多种 指定 选项 值 的 方式 （ 如果 它 接受 选项 的话 ）
请参阅   " email . parser "   和   " email . generator "   了解 更 多 细节
在   3.6   版 更改 :   Added   policy   keyword   only   parameter .
从 源代码 和 构建 工具 中 删除 了 对 以下 操作系统 的 支持 ：
这个 修复器 会 插入 临时 变量
所有 start 方法
HTTPS   协议 默认 的 端口号   ( 总是   " 443 " )
PEP   370 :   分 用户 的   site   packages   目录
3.9   版后 已 移除 :   Deprecated   in   favor   of   " status " .
这 等价 于   Python   表达式   " tuple ( o ) "
3.2   新版 功能 .
生成 项目 “ 进入 点 ” 的 能力 ， 进入 点 可 用作 应用 插件 系统 的 基础
它 只 处理 没有 嵌   NUL   字节 的 已 编码数据
3.8   新版 功能 .
小 插曲 ： 编码 风格
要 了解 更 多 细节 请 查看   " Future . add _ done _ callback ( ) "   的 文档
Python   3.9   有 什么 新 变化
此 变量 等价 于   "   X "   " faulthandler "   选项
缓冲区 结构
窗口 控制
" cgitb "   模块 提供 了 用于   Python   脚本 的 特殊 异常 处理程序
堆 在 大 磁盘 排序 中 也 非常 有用
默认 的 精确度 为   " 6 "
将   Intel / DVI   ADPCM   编码 的 片段 解码 为 线性 片段
库
当所 输入 可 迭代 对象 中 最 短 的 一个 被 耗尽 时 ， 迭代 器 将 停止 迭代
常规 的   " dict "   被 设计 为 非常 擅长 映射 操作
在 更 大 的 应用程序 中 嵌入   CPython   运行 时
两个 地方   " dataclass ( ) "   实际 检查 字 段 类型 的 之一 是 确定 字 段 是否是 如   PEP   526   所 定义 的 类 变量
3.3   版后 已 移除 .
运算符   "   "   ( 减 )   将 输出 其 参数 的 差
参见 :
如果 缓冲区 太小 ， 则 将 引发   " BufferTooShort "   异常 ， 并且 完整 的 消息 将会 存放 在 异常 实例   " e "   的   " e . args [ 0 ] "   中
在   data   上 执行   binhex4   游程 编码 压缩 并 返回 结果
3.8   新版 功能 .
如果 对应 元素 不 存在   ， 较 短 的 多项 集 排序 在 前 （ 例如   " [ 1 , 2 ]   <   [ 1 , 2 , 3 ] "   为 真值 ）
测试
在   3.9   版 更改 :   增加 了   encoding   参数
" ntpath "   在   Win32   和   Win64   平台 上 实现   " os . path "
诸如   " +   "   这类 的 操作 会 引发 独立 的 读 操作 和 写 操作 ， 也就是说 这 类 操作符 并 不 具有 原子 性
3.3   新版 功能 .
委托 是 一种 面向对象 的 技巧 （ 也 称为 设计模式 ）
发布 日期 ：   2019   03   25
" Decimal ( 0 )   Decimal ( 0 ) "   结果 为   " InvalidOperation " ， 而 如果   " InvalidOperation "   未 被 捕获 ， 则 结果 为   " Decimal ( ' NaN ' ) "
句法 如下 :
这 能够 通过 传输   " argument _ default   "   关键词 参数 给   " ArgumentParser "   来 完成
在   3.3   版 更改 :   增加 了   context
COM   方法 使用 特殊 的 调用 约定 ： 除了 在   " argtypes "   元组 中 指定 的 形参 ，   它们 还 要求 一个 指向   COM   接口 的 指针 作为 第一个 参数
创建 一个 共享 的   " threading . Barrier "   对象 并 返回 它 的 代理
如果 本 系统 支持 给定 的 一致性 检查 则 返回   " True "
有 一个 附加 目录 将 被 插入 到 索引 路径 的   " PYTHONPATH "   之前 ， 正如 上 文中 接口 选项 所 描述 的
模块   " readline "   使用   " atexit "   读写   " readline "   历史 文件 的 有用 的 例子
如果 要 强制   Python   在 释放 时 删除 某些 内容 ， 请 使用   " atexit "   模块 运行 一个 函数 ， 强制 删除 这些 内容
Python 编译器 当前 生成 以下 字节 码 指令
如果 给定 了   arcname   ， 则 它 将 为 归档 中 的 文件 指定 一个 替代 名称 ， 在 其他 情况 下 ，   名称 将 从   fileobj   的   " name "   属性 或   name   参数 获取
在   3.6   版 更改 :
该 可 迭代 对象 将 被 拆解 为 迭代 项 的 序列 ， 并 被 包含 于 在 拆包 位置 上 新建 的 元组 、 列表 或 集合 之中
如果 未 提供 ， 则 将 使用 当前工作 目录
如果 对象 不 提供   " __ dir __ ( ) " ， 这个 函数 会 尝试 从 对象 已 定义 的   " __ dict __ "   属性 和 类型 对象 收集 信息
对 字符串 数据 中 的   " ' & amp ; ' " ,   " ' & lt ; ' "   和   " ' & gt ; ' "   进行 反 转义
Python   3.6 . 2   正式版
定义 了 以下 函数 ：
回调 函数 应该 立即 执行 完成 ， 否则 会 阻塞 负责 处理结果 的 线程
请参阅   SQLite   文档 ， 了解 第一个 参数 的 可能 值 以及 第二个 和 第三个 参数 的 含义 ， 具体 取决于 第一个 参数
" strftime ( ) "   和   " strptime ( ) "   的 行为
其他 同类 的 术语 还有 流和类 文件 对象
通常 ， 你 应当 使用   " os . path . is   ( ) "   函数 来 检测 文件 的 类型 ； 这里 提供 的 函数 则 适用 于 当 你 要 对 同一 文件 执行 多项 检测 并且 希望 避免 每 项 检测 的   " stat ( ) "   系统 调用 开销 的 情况
它 不 应该 被 用户 自定义 类 直接 继承   ( 这种 情况 请 使用   " Exception " )
到 这时 迭代 器 对象 中 的 数据项 已 耗尽 ， 继续 调用 其   " __ next __ ( ) "   方法 只会 再次 引发   " StopIteration "   异常
当 发起 调用 时 将 浮点数 的   timeout   参数 设 为 正值 时 ， 只要 无法 获得 锁   ， 将 最 多 阻塞   timeout   所 指定 的 秒数
要 屏蔽   stdout   或   stderr ， 可 提供   " DEVNULL "   这个 值
" ProcessPoolExecutor "   类 是   " Executor "   的 子类 ， 它 使用 进程 池来 异步 地 执行 调用
当 它 用作 一个 装饰 器时 ， 每 一次 函数调用 时 都 会 隐式 创建 一个 新 的 生成器 实例 （ 这 使得   " contextmanager ( ) "   创建 的 上下文 管理器 满足 了 支持 多次 调用 以 用作 装饰 器 的 需求 ， 而 非 “ 一次性 ” 的 上下文 管理器 ）
返回 大于 给定 操作数 的 上下文 中 可 表示 的 最小 数字 （ 或者 当前 线程 的 上下文 中 的 可 表示 的 最小 数字 如果 没有 给定 上下文 ）
如果 调用 已 被 取消 或 正常 结束 那么 返回   " True "
扩展 模块 可以 用 distutils 来 构建 ， 这是 Python 自带 的
PEP   3110 :   异常 处理 的 变更
参数 :   poly   一个 多边形 ， 即 由 数值 对 构成 的 元组
示例
ConfigParser   对象
用户 可 重载 此 方法 以 不同 方式 来 处理 这些 步骤 :
plist   可以 是 一个 包含 命名 形参 的 列表 ； 默认值 只是 一个 空 列表
（ 注意 ： curses   使用 美式 拼写   “ color ” ， 而 不是 英式 ／ 加拿大 拼写   “ colour ”
如果   address   也 是   " None "   ,   则 取 默认值
返回   self   除以   other   的 余数
以下 示例 显示 了 使用 “ 错误 方式 ” 进行 排序 的 自定义 排序 规则 ：
通常 预计 算 参数 给   " setup ( ) "   ， 想要 更好 的 结构化 驱动 脚本
对于 无效 的   timespec   参数 将 引发   " ValueError "
" async   for "   语句
底层 的   " sqlite3 "   库 默认 会以   " autocommit "   模式 运行 ， 但   Python   的   " sqlite3 "   模块 默认 则 不 使用 此 模式
根据 给定 的 文件 描述符 创建   kqueue   对象
3.5   新版 功能 .
在   3.3   版 更改 :   增加 了   opener   参数
注解 :
在   3.3   版 更改 :   request   object   needs   " origin _ req _ host "   attribute
与 其他 持久 化 映射 一样 ， 它 的 键 和 值 也 总是 被 存储 为 字节 串
在   Unicode   4.0   中 用   " U + FEFF "   表示   " ZERO   WIDTH   NO   BREAK   SPACE "   已 被 弃用 （ 改用   " U + 2060 "   ( " WORD   JOINER " )   负责 此 任务 ）
Python 为了 可变 长度 的 结构 （ 想下 ： 字符串 ， 元组 ） 有些 内置 支持 ， 这是   " tp _ itemsize "   字 段 存在 的 原由
reader   和   writer   分别 是 可读 和 可 写 的   " RawIOBase "   对象
" defaultdict "   对象 除了 支持 标准   " dict "   的 操作 ， 还 支持 以下 方法 作为 扩展 ：
直接 使用 类 构造函数 时 ， 错误 消息 更加 详细
这个 类 的 构造函数 ：
在   3.8   版 更改 :   在   macOS   上 ， 此 函数 现在 会 在   " mac _ ver ( ) "   返回 的 发布 版 字符串 非空时 使用 它 ， 以便 获取   macOS   版本 而 非   darwin   版本
提供   " Py _ EnterRecursiveCall ( ) "   和   " Py _ LeaveRecursiveCall ( ) "   作为 常规 函数 用于 受限   API
在 编码 无法 找到 时 将 引发   " LookupError "
如果   p   是   " NULL "   ， 则 相当于 调用   " PyMem _ RawMalloc ( n ) "   ； 如果   n   等于   0 ， 则 内存 块 大小 会 被 调整 ， 但 不会 被 释放 ， 返回 非   " NULL "   指针
如果 要 在 脚本 中 使用 启动 文件 ， 则 必须 在 脚本 中显式 执行 此 操作 :
每当 消费者 线程 调用   " task _ done ( ) "   表示 这个 条目 已经 被 回收 ， 该 条目 所有 工作 已经 完成 ， 未 完成 计数 就 会 减少
Pythonwin   是   Python   for   Windows   Extensions   项目 的 一部分 ， 也 是   ActivePython   发行版 的 一部分 （ 参见   https : / / www . activestate . com / activepython ）
（ 参见   bpo   36952 。 ）
" collections . abc . Container "   的 泛型 版本
使用 提供 的 形参 初始化 字节 串 对象   str   ， 其中   str   应当 是从   terminfo   数据库 获取 的 参数 化 字符串
当 读取 时 ，   格式 将 被 自动检测 ， 即使 单个 归档 中 存在 不同 的 格式
花 括号 中 的 数字 可用 来 表示 传递 给   " str . format ( ) "   方法 的 对象 的 位置
作为 基于 模板 字符串 构建 以 实现   i18n   的 库 的 一个 示例 ， 请 参看   flufl . i18n   包
指示 用于 将源 字节 解码 为 文本 的 编码 的 标记 值
此 方法 不 一定 会 在   " Codec "   实例 中 保存 状态
( 这里 就 不再 详述 解析 Python 代码 作为 输入 的 方式 ， 如果 有 兴趣 可以 参考   " Python / pythonmain . c "   中 的   "   c "   命令 代码 。 )
检测 缓冲区 终止 位置 后 的 写入 （ 缓冲区 溢出 ）
另 一种 启动 解释器 的 方式 是   " python   c   command   [ arg ]   ... " ， 其中   command   要 换成 想 执行 的 指令 ， 就 像 命令行 的   "   c "   选项
联系方式 :   < python   at   rcn   dot   com >
下面 是 一个 使用 迭代 器 形式 的 例子 ：
警告 :
设置 指向   " robots . txt "   文件 的   URL
3.1   新版 功能 .
在   3.1   版 更改 :   增加 参数   step   ， 允许 非 整型
注解 :
拥有 规则
如果 提供 了   key   则 其应 指定 一个 单 参数 的 函数 ， 用于 从   iterable   的 每个 元素 中 提取 比较 键   ( 例如   " key   str . lower " )
传入 参数
如果 元组 已经 被 代码 的 其他 部分 所 引用 ， 请 不要 使用 此项
Python   和   C   一样 ， 任何 非零 整数 都 为 真 ； 零为 假
为了 这个 目的 ( 或 其他 的 ) ， 每个 对象 同时 包含 一个 指向 自身 类型 对象 的 指针
这种 格式 的 细节 有意 不带 文档 说明 ； 它 可能 在 不同   Python   版本 中 发生 改变 （ 但 这种 情况 极少 发生 ）
默认值 为   " ' \ n ' "
带有 方法 的   " Enum "   类
使用 条件 变量 的 典型 编程 风格 是 将 锁 用于 同步 某些 共享 状态 的 权限 ， 那些 对 状态 的 某些 特定 改变 感兴趣 的 线程 ， 它们 重复 调用   " wait ( ) "   方法 ， 直到 看到 所 期望 的 改变 发生 ； 而 对于 修改 状态 的 线程 ， 它们 将 当前 状态 改变 为 可能 是 等待 者 所 期待 的 新 状态 后 ， 调用   " notify ( ) "   方法 或者   " notify _ all ( ) "   方法
上次 修改 存档 成员 的 时间 和 日期
注解 :
" urllib . response "   urllib   使用 的   Response   类
此 方法 在 接收 到 数据 前 将 一直 阻塞
发布 版本 :   0.1
3.2   新版 功能 .
参数 必须 为   [   128 ,   127 ]   或   [ 0 ,   255 ]   范围 内 的 字符 或 整数 类型
可以 提供 一个 在 开头 只 执行 一次 的   setup   语句 ：
它 的 实例 化 应当 传入 一个 主机 和 可选 的 端口号
AU _ write   对象
" Element "   有 一些 很 有效 的 方法 ， 可 帮助 递归 遍历 其下 的 所有 子树 （ 包括 子级 ，   子级 的 子级 ， 等等 ）
当 没有 数据 可用 时则 将 引发   " StopIteration "   异常
请参阅   BLAKE2   规格 描述 第   2.10   节 获取 有关 树形 哈希 的 完整 说明
返回 海龟 窗口 的 高度
以下 函数 会 在 全局 历史 列表 上 操作 ：
它 允许 我们 指定 彼此 相互 冲突 的 选项
如果   exc _ type   为   " SystemExit " ， 则 异常 会 被 静默 地 忽略
尽管 阅读 完 非常 繁重 ，   但 作为 语言 本身 的 完整 指南 是 有用 的
如果 省略   mode   并 指定   file   来 传入 一个 文件 类 对象 ， 则   " file . mode "   会 被 用作   mode   的 默认值
这个 列表 是 ：
可以 通过 不带 参数 调用 程序 来 测量 基线 开销 ， 并且 Python 版本 之间 可能 会 有所不同
例如 ， 由于 这个   0.1   并非 真正 的   1 / 10 ， 将 三个   0.1   的 值 相加 也 不 一定 能 恰好 得到   0.3 :
在 此 情况 下 ， 应由 运行 该 异步 生成器 的 事件 循环 或 任务调度 器来 负责 调用 异步 生成器 迭代 器 的   " aclose ( ) "   方法 并 运行 所 返回 的 协程 对象 ， 从而 允许 任何 挂 起 的   " finally "   子句 得以 执行
工具 / 示例
元组 对象
[   脚注   ]
（ 由   Ido   Michael   在   bpo   37404   中 贡献 。 ）
根据   PEP   572   的 提议 ，   从   3.8   开始 ， 键会 先于 值 被 求值
" % p "   const   void   一个   C   指针 的 十六进制 表示 形式
当   allow _ no _ value   为   " True "   ( 默认值 :   " False " )   时 ， 将 接受 没有 值 的 选项 ； 此种 选项 的 值 将 为   " None "   并且 它们 会以 不带 末尾 分隔符 的 形式 被 序列化
返回 作为 海龟 绘图 场所 的   " TurtleScreen "   类 对象
其他 字符 和 块 设备 的 文件大小 字段 的 含义 还会 有 更 多 变化   ， 具体 取决于 底层 系统 调用 的 实现 方式
它 应当 被 用作   asyncio   程序 的 主 入口 点 ， 理想 情况 下 应当 只 被 调用 一次
" h "   ( " int " )   [ short   int ]   将 一个   Python   整型 转化成 一个   C   " short   int "   短 整型
object   必须 是 字符串 或者 代码 对象
示例 :   " compile ( ) "   的 模拟
这 可以 用来 清除 三重 引号 字符串 行 左侧 空格 ， 而 仍然 在 源码 中 显示 为 缩进 格式
" timeit "   测量 小 代码 片段 的 执行 时间
另 请参阅 格式 规格 迷你 语言 一节
该 模块 仅为 提供 向 后 兼容
原始 内存 接口
如果 给出 ，   doc   将 成为 该   property   属性 的 文档 字符串
模块   " logging . handlers "   日志 记录 模块 附带 的 有用 处理程序
默认 情况 下 ， ArgumentParser   对象 添加 一个 简单 的 显示 解析器 帮助 信息 的 选项
在   3.5   版 更改 :   The   value   is   no   longer   dependent   on   " __ debug __ " .
Happy   Eyeballs   算法 可 提升 支持   IPv4   和   IPv6   的 应用 的 响应速度 ， 具体做法 是 尝试 同时 使用 两者 进行 连接
在   3.4 . 4   版 更改 :   RC4   被 从 默认 密码 字符串 中 丢弃
什么 时候 使用 日志
3.3   新版 功能 .
Python   2.6   之后 的 变化
" encodings . mbcs "   Windows   ANSI 代码 页
" with   ( await   asyncio . lock ) : "   和   " with   ( yield   from   asyncio . lock ) : "   语句 已 不再 受 支持 ， 请 改用   " async   with   lock "
− 8   至   − 15 ： 使用   wbits   的 绝对值 作为 窗口 大小 以二为 底 的 对数
该类 将 在 读取 或 写入   NSKeyedArchiver   编码 的 数据 时 被 使用 ， 其中 包含   UID （ 参见   PList   指南 ）
逻辑 行
如果   paths   同时 包含 绝对路径 和 相对路径 ， 或   paths   在 不同 的 驱动器 上 ， 或   paths   为空 ， 则 抛出   " ValueError "   异常
默认 实现 包括   " getint ( ) " ,   " getfloat ( ) "   以及   " getboolean ( ) "
函数
调试器 的 提示符 是   " ( Pdb ) "
Python   3.0   引入 了   ASCII   范围 以外 的 额外 字符   ( 见   PEP   3131   )
" subprocess "   模块 允许 你 生成 新 的 进程 ， 连接 它们 的 输入 、 输出 、 错误 管道 ，   并且 获取 它们 的 返回 码
与 字典 类似 ， 你 可以 使用 某个 小节 的   " get ( ) "   方法 来 提供 回退 值 :
" ProactorEventLoop "   现在 也 支持   UDP
在 光标 下方 插入 一个 空行
返回 1 到 指定 年 月 的 天数 间 的 数字
返回   x   变换   y   次 的 副本
http : / / gnosis . cx / TPiP / ： David   Mertz   书中 的 第一章   Text   Processing   in   Python   ， " Utilizing   Higher   Order   Functions   in   Text   Processing "   标题 部分 讨论 了 文本处理 的 函数 式 编程
学生 需要 尝试 像 计算机 一样 思考 ， 分解 问题 ， 设计 一致 的 接口 并 封装数据
Screen   专有 方法   " bye ( ) "   退出   " exitonclick ( ) "   当 点击 时 退出   " setup ( ) "   设置   " title ( ) "   标题
要 访问 所有 忆 注册 实现 ， 请 使用 只读 的   " registry "   属性 :
由于 在   " / "   左侧 的 形参 不会 被 公开 为 可用 关键字 ， 其他 形参名 仍 可 在   "   kwargs "   中 使用 :
构建 和   C   API   的 改变
通常 一个 控件 要 获得 “ 键盘 焦点 ” ， 需要 点击 那个 控件 （ 而 不是 标签 ； 请 查看   takefocus   选项 ）
注解 :
输出 以   2   为 基数 的 数字
要 将 字典 视图 强制 转换 为 真正 的 列表 ， 可 使用   " list ( dictview ) "
但是 ，   " optparse "   很难 透明 地 扩展 ， 特别 是 那些 为 支持 新 的   " nargs   "   描述 方式 和 更好 的 用法 消息 所 需 的 修改
胶囊
激活 虚拟环境 将 改变 你 所用 终端 的 提示符 ， 以 显示 你 正在 使用 的 虚拟环境 ， 并 修改 环境 以 使   " python "   命令 所 运行 的 将 是 已 安装 的 特定   Python   版本
对于 模块 、 类 、 函数 和 方法 ， 显示 的 文档 内容 取自 文档 字符串 （ 即   " __ doc __ "   属性 ） ， 并会 递归 地 从 其带 文档 的 成员 中 获取
将 消息 上 的 标签 列表 设置 为   labels
源代码 ：   Lib / http / client . py
不过 仍然 建议 显式 调用函数 关闭
所有   " multiprocessing "   异常 的 基类
用   base85 （ 如   git   风格 的 二进制   diff   数据 所用 格式 ） 编码   bytes   like   object   b   并 返回 编码 后 的   " bytes "
状况   One   of   " normal " ,   " readonly " ,   or   " disabled "
" PyObject "   结构 体 本身 包含 了 对象 的   reference   count   和 对象 的 " 类型 对象 "
字节 数组 对象
虽然   Unicode   中 的 大多数 抽象 字符 都 只用 一个 码位 来 代表 ， 但 也 存在 一些 抽象 字符 可 使用 由 多个 码位 组成 的 序列 来 表示
在   3.6   版 更改 :   接受 一个 类 路径 对象
bpo   21906 :   让 Tools / scripts / md5sum . py 可以 工作 在 Python   3
如果 帮助 输出 未 被 记录 命令 的 部分 （ 即 与   " help _   ( ) "   方法 没有 关联 的   " do _   ( ) "   方法 ） ， 则 发出 头文件
假设 我们 要 为 每个 国家 / 地区 的 中 添加 一个 排名 ， 并 在 排名 元素 中 添加 一个   " updated "   属性 ：
解析 XML
对象 分配器
对于 任何 给定 的 发布 版本 ， 编译器 要 知道 哪些 特性 名称 已 被 定义 ， 如果 某个   future   语句 包含 未知 的 特性 则 会 引发 编译 时 错误
代表   C   8   位   " signed   int "   数据类型
参阅   " PyCapsule _ New ( ) "   来 获取   PyCapsule _ Destructor   返回值 的 语义
参见 :
这 使得 以下 函数 描述 成为 可能 :
这比 单独 指定   import   更 方便
核心 与 内置
模块化
在   3.4   版 更改 :   In   earlier   versions   the   " TestSuite "   held   references   to   each   " TestCase "   after   " TestSuite . run ( ) "
一个 类 的 构造 器   " ast . T "   像 下面 这样 parse 它 的 参数
在   3.6 . 2   版 更改 :   file   形参 接受 一个   path   like   object
打开   file   并 返回 对应 的   file   object
将   " sys . maxint "   转换 为   " sys . maxsize "
" ftplib "   FTP   协议 客户端
目录 和 文件 操作
文件系统 编码 格式   ( 详情 见   PEP   529   )
任何 形式 为   " __ spam "   的 标识符 （ 至少 带有 两个 前缀 下划线 ， 至多 一个 后缀 下划线 ） 的 文本 将 被 替换 为   " _ classname __ spam " ， 其中   " classname "   为 去 除了 前缀 下划线 的 当前 类 名称
在   3.5 . 5   版本 中 没有 新 的 更改
" SocketHandler "   类 位于   " logging . handlers "   模块 ， 它会 将 日志 记录 输出 发送到 网络 套 接字
3.8   新版 功能 :   Added   "   module "   option   that   allows   to   run   an   executable   module .
由   C   " unsigned   long "   类型 返回 一个 新 的   " PyLongObject "   对象 ， 失败 时 返回   " NULL "
增量 配置
警告
特别 地 ， " PATH "   和 当前工作 目录 将 不再 被 使用 ， 对 它们 的 修改 将 不再 对 正常 的   DLL   解析 产生 影响
如果   PIPE   被 传递 给   stdin   参数 ， 则   " Process . stdin "   属性 将会 指向 一个   " StreamWriter "   实例
此 函数 接受 两个 参数 ： 第一个 是 函数 ， 第二个 是   C   变量   ( 类型 任意 )   的 地址 ， 转换 为   " void   "   类型
" http "   HTTP   模块
" curses "   模块 提供 了   curses   库 的 接口 ， 这是 可移植 高级 终端 处理 的 事实标准
类似 于   " digest ( ) "   但 摘要 会以 两倍 长度 字符串 对象 的 形式 返回 ， 其中 仅 包含 十六进制 数码
有效 使用   " sqlite3 "
虽然 接 近于零 ， 但 差异 妨碍 了 可靠 的 相等 性 检验 ， 并且 差异 可能 会 累积
属性 ： " year " ,   " month " ,   " day " ,   " hour " ,   " minute " ,   " second " ,   " microsecond " ,   and   " tzinfo " .
当 一个 名称 在 代码 块 中 被 使用 时 ， 会 由 包含 它 的 最近 作用域 来 解析
2   " abcbd "   引擎 尽可能 多地 匹配   " [ bcd ]   "   ， 直   到 字符串 结束
构建
如果 请求 失败 ， " PyMem _ Realloc ( ) "   返回   " NULL "   ，   p   仍然 是 指向 先前 内存 区域 的 有效 指针
实参 是 一个 字符串 ， 以及 可选 的   globals   和   locals
在   3.2   版 更改 :   添加 了   filter   形参
如果 要 允许 访问 ， 则 返回   " SQLITE _ OK " ，   如果 要 终止 整个   SQL   语句 ， 则 返回   " SQLITE _ DENY " ， 如果 这 一列 需要 当做   NULL   值 处理 ， 则 返回   " SQLITE _ IGNORE "
返回   a   右移   b   位 的 结果
头文件 通常 会 与   Python   一起 安装
该 解决方案 需要 主线 程有 正在 运行 的 事件 循环 才能 工作 ， 这 与   " SafeChildWatcher "   一样
当有 多个 可 迭代 对象 时 ， 最短 的 可 迭代 对象 耗尽 则 整个 迭代 就 将 结束
3.4   新版 功能 .
注解 :
把 很长 的 字符串 拆开 分别 输入 的 时候 尤其 有用 :
注意   " ctypes "   并 没有   OOR   （ 返回 原始 对象 ） ,   每次 访问 这个 属性 时 都 会 构造 返回 一个 新 的 相同 对象 :
归档 必须 以 读取 或 追加 方式 打开
" collections . abc . ItemsView "   的 泛型 版本
API   与 特性 的 移除
在 其他 情况 下 将 返回   " False "
在 窗口 、 子 窗口 或 面板 之外 写入 会 引发   " curses . error "
3.2   新版 功能 .
如果 允许   useragent   按照 被 解析   " robots . txt "   文件 中 的 规则 来 获取   url   则 返回   " True "
也 可以 在 定义 子类 的 时候 指定 类 的   " _ pack _ "   属性 来 覆盖 这种 行为
控件
C   函数   " PyGen _ NeedsFinalizing "   已 被 移除
返回 一个 迭代 器 ， 迭代 器 的 内容 为 一 星期 的 数字
" grp "   组 数据库
当其为 偶数 时 ， 将 返回 两个 中间 值中 较 小 的 那个
运算符
这 用于 以   “   000000120 ” 形式 打印 字 段
此 程序 会 迭代   " sys . argv [ 1 : ] "   中 列出 的 所有 文件 内 的 行 ， 如果 列表 为 空则 会 使用   " sys . stdin "
" I "   ( " int " )   [ unsigned   int ]   将 一个   Python   整型 转化成 一个   C   " unsigned   int "   无 符号 整型 ， 并 不 检查 溢出 问题
（ 由   Giampaolo   Rodol à   在   bpo   9795   中 贡献 。 ）
bytecode   字节 码   Python   源代码 会 被 编译 为 字节 码 ， 即   CPython   解释器 中 表示   Python   程序 的 内部 代码
在   3.5   版 更改 :   The   selector   is   now   retried   with   a   recomputed   timeout   when   interrupted   by   a   signal   if   the   signal   handler   did   not   raise   an   exception   ( see   PEP   475   for   the   rationale ) ,   instead   of   returning   an   empty   list   of   events   before   the   timeout .
这个 回调 对象   callable   仅 接受 一个   Python   值 作为 参数 ，   而且 必须 返回 以下 某个 类型 的 值 ： int ， float ， str   或   bytes
lambda   表达式
有关   " try "   语句 和 异常 的 更 多 信息 ， 请参阅 处理 异常
赋值 表达式
此 函数 可 用于 解码 “ Q ” 编码 的 头 数据 ， 具体 描述 见   RFC   1522   :   " MIME   ( Multipurpose   Internet   Mail   Extensions )   Part   Two :   Message   Header   Extensions   for   Non   ASCII   Text "
基于 路径 的 查找 器 自身 并不知道 如何 进行 导入
HTTPBasicAuthHandler   对象
命令行 语法
" tkinter . ttk "   Tk 主题 部件
" ZoneInfo "   类 具有 两个 替代 构造 器 :
下文 中 会 描述 更 多 的 细节
" " store " "   存储 此 选项 的 参数 （ 默认 ）
设置 当前 文件 指针 位置
杂项 说明
补丁 作者 为   Anthony   Sottile
" # ! "   必须 是 文件 的 前 两个 字符
对于   " ' s ' "   格式 字符 ， 计数 会 被 解析 为 字节 的 长度 ， 而 不是 像 其他 格式 字符 那样 的 重复 计数 ； 例如 ， " ' 10s ' "   表示 一个   10   字节 的 字节 串 ， 而   " ' 10c ' "   表示   10   个字符
有些 模块 可以 读取 Unix 邮箱 ， 通过 HTTP 检索 文档 ， 生成 随机数 ， 解析 命令行 选项 ， 编写 CGI 程序 ， 压缩 数据 以及 许多 其他 任务
在 C++ 中 编写 扩展
核心 与 内置
安全
3.3   新版 功能 .
选项   描述   状况   May   be   set   to   " normal "   or   " disabled "   to   control   the   " disabled "   state   bit
基于   " importlib "   重写   import   machinery
未来 的 截止 点 由 C 库 决定 ； 对于 32 位 系统 ， 它 通常 在 2038 年
该 文件 必须 包含   " [ loggers ] " ,   " [ handlers ] "   和   " [ formatters ] "   等 小节 ， 它们 通过 名称 来 标识 文件 中 定义 的 每种 类型 的 实体
调用 此 方法 之后 压缩器 将 不可 再 被 使用
为了 不 使 句法 更加 复杂 ， 于是 通过 定义 将 此 情况 解析 为 抽取 优先 于 解析 为 切片 来 消除 这种 歧义 （ 切片 列表 未 包含 正确 的 切片 就 属于 此 情况 ）
构建
指明 当前 平台 和 实现 是否 提供 防御 符号 链接 攻击 的   " rmtree ( ) "   版本
" tkinter "   最大 的 优点 就 一个 字 ： 快 ， 再 一个 ， 是 Python 自带 的
在   3.3   版 更改 :   family   and   type   arguments   can   be   omitted .
输入 仅 包含   " end "   的 行来 结束 命令 列表
比如   " [ ' abc ' ,   ' def ' ,   ' ghi ' ,   ' abc ' ] "   转换成   " [ ' abc ' ,   ' _ 1 ' ,   ' ghi ' ,   ' _ 3 ' ] "   ，   消除 关键词   " def "   和 重复 字段名   " abc "
此字 段 由   " PyBUF _ FORMAT "   标志 控制
（ 由   Giampaolo   Rodol à   在   bpo   8806   中 贡献 。 ）
缩进
注解 :
它 在 变种 注册表 中 的 名称 是   " ' excel   tab ' "
迭代 器 类型
在 子类 中 实现 这种 方法 使 其 返回   o   的 可 序列化 对象 ， 或者 调用 基础 实现 （ 引发   " TypeError "   ）
3.8   新版 功能 .
相当于   " a [ : ] "
请 注意 ， 通过 使用 前面 例子 中 所示 的   C   库 分配器 ， 为   I / O   缓冲区 分配 的 内存 会 完全 不 受   Python   内存 管理器 管理
" struct "   模块 还 定义 了 以下 类型 ：
值 用于 表示 计数 ， 但 你 实际上 可以 存储 任何 其他 值
在 前 一种 情况 下 ， 两个 数字 将 被 转换 为 相同 类型 然后 相加
以下 示例 显示 了 如何 使用 命令行 界面 来 比较 三个 不同 的 表达式 ：
文件 对象 的 方法
模块   " tty "   针对 常用 终端 控制 操作 的 便捷 函数
下面 的 示例 演示 了 这 一点
按 位置 访问 参数 :
浮点数 说明
每个 实参 都 可以 是 任意 的 数值 类型   （ 包括 复数 ）
" yield "   语句
代表 命名 对象 类型 的 条目 数量 限制
除了 前面 描述 的 引用 计数 调试 之外 ， 还 执行 以下 额外 检查 ：
添加 了   " AsyncMock "   以 支持 异步 版本 的   " Mock "
运算符 优先级
稍后 将 分析 的 脚本 （ bacon . py ） :
要 同时 显示 表达式 文本 及其 求值 后 的 结果 值 （ 这 在 调试 时 很 有用 ） ， 可以 在 表达式 后加 一个 等于号   " '   ' "
增加   Float   value
也 可以 在 抛出 之前 首先 实例 化 异常 ， 并 根据 需要 向 其 添加 任何 属性
在   3.5   版 更改 :   在   Python   3.5   之前 ， " QueueListener "   总是 把 从 队列 中 接收 的 每个 消息 都 传给 它 初始化 的 日志 处理程序
完整 的 详情 可 参阅 更新 日志
fieldvalues   是 一个 序列 ， 包含 了 形似   " Message . get _ all "   返回值 的 标头 字 段值
" sndhdr "   推测 声音文件 的 类型
如果 省略   fieldnames   ， 则 文件   f   第一行 中 的 值 将 用作 字段名
" InvalidBase64LengthDefect "   当 解码 一个   base64   编码 的 字节 分块 时 ，   非 填充   base64   字符 的 数量 无效 （ 比   4   的 倍数 多   1 ）
这个 迭代 器 必须 只   yield   一个 值 出来 ， 这个 值会 被 用 在   " with "   语句 中 ， 绑定 到   " as "   后面 的 变量 ， 如果 给定 了 的话
bpo   28248 :   更新 Windows   构建 和 OS   X 安装程序 以 使用 OpenSSL   1.0 . 2j .
重做 重 做 当前 窗口 最近 一次 所 撤销 的 操作
请 注意 封存 操作 不是 绝对 安全 的
后续 的   " for "   子句 以及 最 左侧   " for "   子句 中 的 任何 筛选 条件 不能 在 外层 作用域 中 被 求值 ， 因为 它们 可能 依赖于 从 最 左侧 可 迭代 对象 中 获得 的 值
此 方法 可 用于 避免 创建 会 导致 垃圾 回收 器 将 保留 键 超出 实际 需要 时长 的 引用
[   示例   ]
第二个 版本 会 将   " self "   舍入 到 最 接近   " Fraction ( 1 ,   10   ndigits ) "   的 倍数 （ 如果   " ndigits "   为 负值 则 为 逻辑运算 ） ， 位值 为 二分之一 时 同样 只 对 偶数 舍入
[ 1 ]   “ Cheese   Shop ” 是   Monty   Python   的 一个 短剧 ： 一位 顾客 来到 一家 奶酪 商店   ， 但 无论 他 要 哪种 奶酪 ， 店员 都 说 没有 货
当 解析器 遇到 语法错误 时 将 被 引发
如果 使用   ADPCM   编码器 构造 网络 数据包 ， 并且 希望 协议 是 无 状态 的 （ 即 能够 容忍 数据包 丢失 ） ， 则 不仅 需要 传输数据 ， 还 应该 传输 状态
分析 函数
注意 在 上面 两个 代码 片段 中 ，   " for "   和   " if "   的 顺序 是 相同 的
这 使得 它们 可以 非常简单 地 创建 和 复制
但是 ， 可能 有 在 概念 上 相关 但 不 依赖于 数据 的 函数
3.5   新版 功能 .
默认 情况 下 它 也 是 不 安全 的 ： 如果 数据 是 由 熟练 的 攻击者 精心设计 的 ， 则 反 序列化 来自 不 受 信任 来源 的   pickle   数据 可以 执行 任意 代码
安装 步骤
如果 要 移除 的 选项 存在 则 返回   " True " ；   在 其他 情况 下 将 返回   " False "
下面 的 表格 对比 了 创建 普通 ctypes 对象 和 基于 共享内存 上 创建 共享 ctypes 对象 的 语法
PEP   590 :   Vectorcall :   用于   CPython   的 快速 调用 协议
如果 存在   " finally " ， 它 将 指定 一个 ‘ 清理 ’ 处理程序
子 进程 的 标准 错误 输出 ， 如果 被   " run ( ) "   捕获
发生 错误 时 返回   "   1 "
如果 指定 了   result   ， 则 当协程 完成 时 将 其 返回 给 调用者
通过 用 文字 省略号 替换 类型 提示 中 的 参数 列表 ：   " Callable [ ... ， ReturnType ] "   ， 可以 声明 可 调用 的 返回 类型 ， 而 无需 指定 调用 签名
冻结 的 实例
将值   x   作为 新项 插入 数组 的   i   位置 之前
这 只是 出于 显示信息 的 目的
更 多 细节 请参阅   How   are   Enums   different ?
返回 一个 标识 用于 编译   Python   的 编译器 的 的 字符串
软件 导致 连接 中止
它 是   " Exception "   的 一个 子类
返回 轮询 对象 的 文件 描述符 对应 的 数字
结构 需要 清理
比如 ， 要 声明 使用   Windows   1252   编码 ， 你 的 源码 文件 要 写成 ：
Filter   对象 包含 更 多 的 过滤器 细节
如果 存在 无 表达式 的   except   子句 ， 它 必须 是 最后 一个 ； 它 将 匹配 任何 异常
" < protocol > _ request ( ) "   —   句柄 知道 如何 预处理   protocol   请求 的 信号
thread   :   引发 异常 的 线程 ， 可以 为   " None "
通过 子 类化 创建 的 两个 不 相关 异常 类 永远 是 不 等效 的 ， 既 使 它们 具有 相同 的 名称
考虑 一个   Python   函数   " f ( a ,   b ,   c ) " ； 你 希望 创建 一个 和   " f ( 1 ,   b ,   c ) "   等价 的 新 函数   " g ( b ,   c ) " ； 也就是说 你 给定 了   " f ( ) "   的 一个 参数 的 值
容器 类型 的 构造函数 必须 符合 两个 规则 ：
它 将 在 未来 的   Python   版本 中 引发   " TypeError "
此 实现 接受 以   extra   形式 传给 构造 器 的 对象 并 使用   ' extra '   键 名将 其 加入   kwargs
可能 的 值 有 ：
但是 不要 太 担心 ， 如果 你 要 定义 一个 类型 ， 通常 只 需要 实现 少量 的 方法
如果 返回   " False " ， 无论 正常 情况 是否 应该 认为 是 其子 类 ， 统一 视为 不是
当 线程 对象 一 但 被 创建 ， 其 活动 一定 会因 调用 线程 的   " start ( ) "   方法 开始
如果 你 想 令 海龟 反映 其 状态 ， 你 必须 使用   " resizemode   auto "
对   C   或   C++   程序员 ， 还有 两个 额外 的 手册 ：   扩展 和 嵌入   Python   解释器 概述 了 如何 编写 一个   Python   扩展 模块 ， Python / C   API   参考手册 详细 介绍 了   C / C++   中 可用 的 接口
返回   o1   、   o2   相乘 的 结果 ， 如果 失败 ， 返回   ` ` NULL ` `
更新 并 返回 表示 当前 本地 符号表 的 字典
Python 运行 时 服务
如果   suffix   、   prefix   和   dir   中 的 任何 一个 不是   " None " ， 就要 保证 它们 是 同一 数据类型
asyncio   的 源代码 可以 在   Lib / asyncio /   中 找到
类似 地 ， 第二个 字母 可以 为   " '   ' "   ( 这 表示命令 将 写入 到 标准 输出 ) ,   " ' f ' "   ( 这 表示命令 将 写入 在 命令行 中 给定 的 文件 )   或   " ' . ' "   ( 这 表示命令 将 不 执行 写入 ， 因而 必须 放在 末尾 。 )
如果 没有 定义 组合 类 ， 则 返回   " 0 "
这样 就 可以 使用   shell   的 文件名 补全 指定 测试 模块
如果 输入 日期 具有 任何 其他 有效 的 时区 差值 ， 则   " datetime "   将 为 一个 感知 型   " datetime "   并 与   " timezone "   " tzinfo "   相对 应
t21   一个 数值   ( 可 选 )
因此 ， 你 可以 使用   " try " ... " except " ... " finally "   语句 来 捕获 该 异常 （ 如果 有 的话 ）   ， 或 确保 进行 了 一些 清理
" BaseManager "   实例 也 有 一个 只读 属性
可用性 ： SQLite   3.6 . 11   或 以上 版本
返回   o1   除以   o2   的 一个 合理 的 近似值 ， 如果 失败 ， 返回   " NULL "
增量 压缩 和 解压
如果   pathname   不是 以   " . py "   为 后缀 的 文件 ， 则 将 引发   " RuntimeError "
offset   默认值 为 零 ， 且 必须 为 一个 将 被 添加 到 内部 指针 值 的 整数
允许 子 类化 定义 了 成员 的 枚举 将会 导致 违反 类型 与 实例 的 某些 重要 的 不可 变 规则
不像   " es "   表达式 ， 它 允许 传入 的 数据 包含   NUL   字符
3.5   新版 功能 .
其他 语言 特性 修改
推导 式 的 常用 句法 元素 为 :
Deprecated   since   version   3.3 ,   will   be   removed   in   version   4.0 :   这是 旧版 样式   " Py _ UNICODE "   API ;   请 迁移 至   " PyUnicode _ AsWideCharString ( ) " .
bpo   34320 :   修复 问题 — — " dict ( od ) "   不会 复制   OrderedDict   的 迭代 顺序
有 了   Python   社区 的 输入 和 贡献 ， Python   才 有 了 如此 出色 的 文档 谢谢你们 ！
该 函数 有 两个 参数 ， 它们 都 属于 指针 ， 指向 任意   Python   对象 ： 即   Python   函数 ， 及其 参数 列表
引发 一个 审计 事件   " ctypes . dlsym / handle " ， 附带 参数   " handle " ,   " name "
想要 释放 此 进程 管理 的 所有 共享内存 块 ， 可以 调用 实例 的   " shutdown ( ) "   方法
Mertz   还 在   IBM   的   DeveloperWorks   站点 上 针对 函数 式 编程 撰写 了 一系列 共   3   篇文章 ； 参见   part   1 ,   part   2   和   part   3 ,
具体 的 对象 层
用   " list "   包装   " zip ( ) "
Windows   允许 你 对 同一 文件 拥有 许多 不同 的 映射
不 改变 绘图 窗口
例如 ， 你 要 传递 一个 事件 对象 时 可以 用 :
当 失败 时 返回   " NULL "
PrettyPrinter   对象
PEP   372 :   有序 字典
（ 由   Victor   Stinner   在   bpo   38916   中 贡献 。 ）
库
以下 为 模块 概览 ：
事件 循环 方法 集
本章 介绍 了 支持 处理 互联网 上 常用 数据格式 的 模块
Python   3.6 . 2   正式版
双目 运算 特殊 方法 （ 如   " __ eq __ ( ) " ,   " __ lt __ ( ) " ,   " __ add __ ( ) " ,   " __ rsub __ ( ) "   等 ） 应 返回 的 特殊 值 ， 用于 表示 运算 没有 针对 其他 类型 的 实现   ； 也 可 由 原地 双目 运算 特殊 方法 （ 如   " __ imul __ ( ) " ,   " __ iand __ ( ) "   等 ） 出于 同样 的 目的 而 返回
参数 :   fun   一个 无 参数 的 函数 或   " None "
背景   Specifies   the   cell   or   item   background   color
在 这种 情况 下 ， " parse _ known _ args ( ) "   方法 会 很 有 用处
源代码 :   Lib / netrc . py
发布 日期 :   2018   05   30
在 此 模式 下 无法 更改 某些 选项 ， 例如 安装 目录 ； 要 修改 这些 ，   您 需要 完全 删除 然后 重新安装 Python
[ 1 ]   GNU   Readline   包 的 问题 可能 会 阻止 这种 情况
异步 推导 式 可以 暂停 执行 它 所在 的 协程 函数
交互式 控制台 对象
在 这种 情况 下 ， 当   Future   对象 被 垃圾 收集 时 ， asyncio 将 发出 一条 日志 消息
在   3.9   版 更改 :   增加 了   errors   形参
" email . utils " :   其他 工具
但是 ， 显式 地 传递   " input   None "   来 继承 父 对象 的 标准 输入 文件 处理 的 特性 则 不受 支持
基本 示例
注解 :
如果   sort _ dicts   为 假值 （ 默认 ） ， 字典 将 按键 的 插入 顺序 显示 ， 否则 将 按 字典 键 排序
可选 的 第二项 是 字符串 形式 的 形参 名称
这 意味着   Python   3.9   支持 Windows   Vista 和 更新 版本
测试
所有 其他 选项 都 传递 为   " name   value "   ， 其中 值 通常 是   " 0 "   来 禁用 某个 特性 ，   " 1 "   来 启用 某个 特性 或 路径
工具 / 示例
设置 海龟 的 横坐标 为   x   ， 纵坐标 保持 不变
作者 :   Peter   Moody
未来 ， 优化 的 实现 有时 会 唤醒 超过   n   个 线程
此类 建立 在   " InteractiveInterpreter "   的 基础 上 ， 使用 熟悉 的   " sys . ps1 "   和   " sys . ps2 "   作为 输入 提示符 ， 并 有 输入 缓冲
还要 注意 的 是 ， 除了 零个 参数 的 形式 以外 ， " super ( ) "   并 不 限于 在 方法 内部 使用
如果 正在 调试 异常 ， 且 最早 抛出 或 传递 该 异常 的 行 不是 当前 行 ， 则 那 一行 用   " > > "   标记
当 连接 对象 被 垃圾 回收 时会 自动 调用
fdel   是 用于 删除 属性 值 的 函数
由 单声道 片段 生成 立体声 片段
剪切 复制 选区 至 系统 剪贴板 ， 然后 删除 选区
您 可以 独立 于   exc _ info   来 指定   stack _ info   ， 例如 ， 即使 在 未 引发 任何 异常 的 情况 下 ， 也 可以 显示 如何 到达 代码 中 的 特定 点
是否 有 与   C   的   " ? : "   三目 运算符 等价 的 东西 ？
在   FIFO   ( first   in ,   first   out )   队列 中 ， 先 添加 的 任务 先 取回
参见 :
如果 指定 了   timeout   ， 它 将 指定 系统 等待 事件 时 ， 等待 多长时间 后 返回 （ 以 毫秒 为 单位   ）
API   和   ABI   版本 管理
在   3.2   版 更改 :   Many   of   the   following   methods   have   been   reworked   and   fixed ,   which   makes   them   incompatible   with   their   3.1   counterparts .
请 注意 关联 到 处理程序 的 过滤器 会 在 事件 由 处理程序 发出 之前 被 查询 ， 而 关联 到 日志 记录器 的 过滤器 则 会 在 有 事件 被 记录 的 的 任何 时候 （ 使用   " debug ( ) " ,   " info ( ) "   等等 ） 在 将 事件 发送给 处理程序 之前 被 查询
ABC   类 的 层次结构 ：
在   3.6   版 更改 :   在此之前 ， 对于 不可 识别 的 压缩 值 将 引发 普通 的   " RuntimeError "
" Context "   类型
回退 值
如果 锁 当前 处于 锁住 状态 ， 将 返回   " False "   ；   否则 将 锁 设置 成 锁住 状态   ， 并 返回   " True "
它们 自   Python   3.7   起 已 被 弃用
核心 与 内置
下面 是 一个 修改   " statistics . mean ( ) "   函数 来 防止   data   形参 被 用作 关键字 参数 的 例子 :
" zlib "   与   gzip   兼容 的 压缩
参数 解释 同   " debug ( ) "
Unix   V7   中   " S _ IXUSR "   的 同义词
字符串 的 方法 字符串 支持 许多 变换 和 查找 的 方法
请 注意 配置 解析器 不 支持 对 注释 前缀 的 转义 ， 因此 使用   inline _ comment _ prefixes   可能 妨碍 用户 将 被 用作 注释 前缀 的 字符 指定 为 可 选值
" field ( ) "   参数 有 ：
这 可能 为   " CHECK _ UNKNOWN "   直到 已 解压 了 足够 的 输入 数据 来 确定 它 所 使用 的 一致性 检查
Turtle   方法
如果 加载 失败 ， 加载 器 必须 移除 任何 它 已 加入 到   " sys . modules "   中 的 模块   ， 但 它 必须 仅限 移除 加载 失败 的 模块 ， 且 所 移除 的 模块 应为 加载 器 自身 显式 加载 的
3.5   新版 功能 :   The   mangle _ from _   parameter .
源码 ：   Lib / keyword . py
请 注意   " a   op1   b   op2   c "   不 意味着 在   a   和   c   之间 进行 任何 比较 ， 因此 ，   如   " x   <   y   >   z "   这样 的 写法 是 完全 合法 的 （ 虽然 也许 不太好 看 ）
而 传入 字符串 会 立即 导致 错误
另外 ， 对于 受 信任 的 输入 ， shell   本身 的 管道 支持 仍然 可 被 直接 使用 :
例如 ：
如果 在   timeout   秒 内 没有 执行 完成 ，   " concurrent . futures . TimeoutError "   将会 被 触发
所有 缺陷 类 都 是   " email . errors . MessageDefect "   的 子类
针对 一个 目前 并 不 包含 于 归档 中 的 名称 调用   " getinfo ( ) "   将会 引发   " KeyError "
action   或   delayfunc   都 可以 引发 异常
4   " abcb "   回退 一次 ， " [ bcd ]   "   少 匹配 一个 字符
[   示例   ]
如果 找 不到 编码器 则 会 引发   " LookupError "
根据 任何 实现 了 缓冲区 协议 的 对象   o   ， 返回 一个 新 的 字节 数组 对象
" tzinfo "   对象
在 构造函数 中 ， 该 标识 值 可以 是 整数 或 带有   " fileno ( ) "   方法 的 对象
注解 :
集合 是 由 不 重复 元素 组成 的 无序 的 集
（ 第三种 是 使用 文件 对象 的   " write ( ) "   方法 ； 标准 输出 文件 可以 作为   " sys . stdout "   引用
但是 ， 在 Java 里面 ， 锁 和 条件 变量 是 每个 对象 的 基础 特性 ， 而 在 Python 里面 ， 这些 被 独立 成 了 单独 的 对象
注解 :
注解 :
如果 提供 了   errors   ， 它会 被 用于 确定 编码 格式 错误 的 处理 方式
如果 你 想要 将 记录 转换 为   dict   或   JSON   字符串 ， 或者 发送 记录 被 修改 后 的 副本 而 让 初始 记录 保持 原样 ， 则 你 可能 会 想要 重载 此 方法
通过   " wait ( ) "   进行 等待 的 任务 现在 将会 阻塞 直至   " set ( ) "   方法 再次 被 调用
图形用户界面 （ GUI ） 常见问题
第二个 形参   callback   为 一个 可 调用 对象 ， 它会 在   ob   被 作为 垃圾 回收 时 接收 通知 ；   它 应该 接受 一个 单独 形参 ， 即弱 引用 对象 本身
在 此 记录器 上 记录   " ERROR "   级别 的 消息
创建 GZIP   文件 示例 ：
配置 解析器 并 不会 猜测 配置文件 中值 的 类型 ， 而 总是 将 它们 在 内部 存储 为 字符串
使用   " issubclass ( ) "   来 检查 类 的 继承 关系 :   " issubclass ( bool ,   int ) "   为   " True " ， 因为   " bool "   是   " int "   的 子类
标记 值 用于 表示 注释
例如 下面 的 函数 :
由于 对负 标号 和 切片 的 支持 存在 于 对象 的   " __ getitem __ ( ) "   方法 ， 重载 此 方法 的 子类 需要 显式 地 添加 这种 支持
out   应当 为 一个 文件 类 对象 ， 它 默认 将 为   sys . stdout
result   是 外部 函数 返回 的 结果 ， 由   " restype "   属性 指明
" path "   应当 为   " str "   类型 并且 是 一个 绝对路径
模块 属性 是 可以 写 ， 你 可以 写出   " modname . the _ answer   42 "
示例 :
例如 ， " & gt ; "   等效 的 十进制 形式 为   " &# 62 ; "   ， 而 十六进制 形式 为   " &# x3E ; "   ； 在 这种 情况 下 ， 方法 将 收到   " ' 62 ' "   或   " ' x3E ' "
是   Python   标准 发行版 附带 的 基本 编辑器 和 解释器 环境
" acquire ( ) "   和   " release ( ) "   方法 也 能 调用 关联 锁 的 相关 方法
文本 颜色
为什么   list . sort ( )   没有 返回 排序 列表 ？
配置 变量
3.6 . 1   新版 功能 .
qualified   name   限定 名称 一个 以点 号 分隔 的 名称 ， 显示 从 模块 的 全局 作用域 到 该 模块 中 定义 的 某个 类   、 函数 或 方法 的 “ 路径 ” ， 相关 定义 见   PEP   3155
仅限 位置 形参要 放在   " / "   ( 正 斜杠 )   之前
它 可以 是   " None " ， " ' ' " ， " ' \ n ' " ， " ' \ r ' "   和   " ' \ r \ n ' "
支持 的   " __ dunder __ "   名称
它 被 昵称 为 “ 海象 运算符 ” 因为 它 很 像是 海象 的 眼睛 和 长牙
添加 了   " statistics . NormalDist "   用于 创建 和 操纵 随机变量 的 正态分布
日志 级别
要 改变 文件 对象 的 位置 ， 请 使用   " f . seek ( offset ,   whence ) "
此外 ， 对于 上述 的 每种   " Decimal "   方法 （ 不 包括   " adjusted ( ) "   和   " as _ tuple ( ) "   方法 ） 都 有 一个 相应 的   " Context "   方法
这些 类型 的 对象 是 可 哈希 的 ， 这 意味着 它们 可 被 作为 字典 的 键
引发 一个 审计 事件   " ctypes . wstring _ at " ， 附带 参数   " address " ,   " size "
在线 程中 运行
在   3.8   版 更改 :   " CancelledError "   现在 是   " BaseException "   的 子类
3.3   新版 功能 .
分隔符
可以 指定 所 需 宽度 内 的 字 段 对齐 方式 ：
关键字
它 可以 是 适用 于   " hashlib . new ( ) "   的 任何 名称
Python   2 . x 的 未来
如果 此 变量 被 设为 一个 非空 字符串 ， Python   将 显示 每次 导入 花费 了 多长时间
如果 你 需要 一个 虚拟 代码 对象 来 创建 一个 代码 帧 ，   请 使用   " PyCode _ NewEmpty ( ) "
" assert "   语句
开始 一个 生成器 函数 的 执行 或 是从 上次 执行 的   yield   表达式 位置 恢复 执行
如果 是 元组 ， " PyTuple _ Size ( ) "   可 返回 其 长度 而   " PyTuple _ GetItem ( ) "   可 返回 指定 序号 上 的 项
Python   JSON   dict   object   list ,   tuple   array   str   string   int ,   float ,   int   和   float   派生 的 枚举   number   True   true   False   false   None   null
请 使用   " if   __ name __   ' __ main __ ' : "   语句 来 确保 一个 文件 的 特定 代码 仅 在 作为 脚本 被 发起 调用 时 执行 而 不是 在 被 导入 时 执行
如果 给出 此 选项 ， Python   将 不会 试图 在 导入 源 模块 时 写入   " . pyc "   文件
可以 看到 ， 为了 进行 测试 ， 我们 使用 了 基类   " TestCase "   提供 的 其中 一个   " assert   ( ) "   方法
序列 用 函数
它们 的 接口定义 均 在   " io "   模块 中
模式   " ' r + ' "   与   " ' r + b ' "   将 打开 文件 并 不 清空 内容
参见 :
3.6   新版 功能 .
使用 其他 日志 格式化 方式
" itertools . tee ( iter ,   [ n ] ) "   可以 复制 一个 迭代 器 ； 它 返回   n   个 能够 返回 源 迭代 器 内容 的 独立 迭代 器
值   1 表示 这是 未知 的 ， 并且 通常 会 导致 填写 正确 的 状态
3.6   新版 功能 .
程序 框架
在 此 记录器 上 记录   level   整数 代表 的 级别 的 消息
集合 显示 会 产生 一个 新 的 可变 集合 对象 ， 其 内容 通过 一系列 表达式 或 一个 推导 式 来 指定
" netrc "   实例 具有 下列 方法 :
已弃 用 的   Python   行为
参数 必须 具有 数值 类型
创建 数组 类型 的 推荐 方式 是 使用 一个 类型 乘以 一个 正数 :
如果   " site "   会 在 稍后 被 显式 地 导入 也 会 禁用 这些 操作   ( 如果 你 希望 触发 它们 则 应 调用   " site . main ( ) " )
校准 后 ， 结果 将 更 准确 （ 在 最小 二乘 意义 上 ） ， 但 它 有时 会 产生 负数 （ 当 调用 计数 异常 低 ， 且 概率 之神 对 您 不利 时 ：   ）
f   string   f   字符串 带有   " ' f ' "   或   " ' F ' "   前缀 的 字符串 字 面值 通常 被 称为 “ f   字符串 ” 即 格式化 字符串 字 面值 的 简写
例如 ， 所有 类 都 是 继承 自   " object " ， 因此 任何 多重 继承 的 情况 都 提供 了 一条 以上 的 路径 可以 通向   " object "
通过 这种 方式 ， 你 可以 在 大多数 情况 下 使用   Python   的   date / timestamp   对象 而无须 任何 额外 处理
它 仍然 可以 使用   %   formatting ， 如下 所示 :
这个 冒号 既 不 属于 字段名 ， 也 不 属于 字 段值
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
可以 定义 结构 体 的 子类 ， 它们 会 继承 基类 的 字 段
调用 此 方法 设置 上下文 变量 在 当前 上下文 中 的 值
在 其它 应用程序 嵌入   Python
PEP   357 :   ' __ index __ '   方法
代码 库
本节 将 展示 如何 使用 现有 的   itertools   作为 基础 构件 来 创建 扩展 的 工具集
正如 在 概述 中 提到 的 ， Python 区分 二进制 和 文本 I / O
3.3   新版 功能 .
一个 演示 如何 使用 队列 来 向 一组 工作 进程 提供 任务 并 收集 结果 的 例子 ：
我该 如何 ... ？
模板 对象
3.3   新版 功能 .
但是   " x . f "   与   " MyClass . f "   并 不是 一 回事 它 是 一个 方法 对象   ， 不是 函数 对象
它 通过 检查 字段 的 类型 是否 为   " typing . ClassVar "   来 完成 此 操作
" _ ignore _ "   一个 名称 列表 ， 可以 为   " list "   或   " str " ， 它 不会 被 转化 为 成员 ， 并 将 从 最终 类中 被 移除
Mock   能 指定 函数 （ 或 其他   Mock   实例 ） 为 魔术 方法 ， 它们 将 被 适当 地 调用
然而 ， 分发 名 用来 生成 文件名 ， 所以 你 应该 坚持 用 字母 、 数字 、 下划线 和 连词 号
在线 程中 运行
内置 的   " sorted ( ) "   确保 是 稳定 的
此 归档文件 将 被 命名 为   " foo   1.0 . tar . gz "   ( 或   " . zip " ) ， 并 将 解包 到 目录   " foo   1.0 "   当中
参见 :
此 方法 调用 底层 锁 的 相应 方法 ， 返回值 是 底层 锁 相应 方法 的 返回值
从 一个 模块 的   capsule   属性 导入 指向   C   对象 的 指针
如下 是 使用 关键字 参数 的 例子 模块 ， 作者 是   Geoff   Philbrick   ( phibrick @ hks . com ) :
该 系统 必须 有 一个 当前 闰秒 表 以便 能 给出 正确 的 回答
" SSLError "   的 子类 ， 当 尝试 读取 或 写入 数据 ， 但 在 请求 被 满足 之前 还 需要 在 下层 的   TCP   传输 上 发送 更 多 数据 时会 被 非 阻塞 型   SSL   套 接字 引发
来自 于   C   变量   " errno "   的 数字 错误码
一个 列表 可以 包含 不同 类型 的 元素 ， 但 通常 使用 时 各个 元素 类型 相同 :
凭据 应当 使用 多少 个 字节 ？
该 模块 提供 了 操作 多个 线程 （ 也 被 称为 轻量级 进程 或 任务   ） 的 底层 原语   — —   多个 控制线 程 共享 全局 数据 空间
[   数据 报 协议   ]
策略 对象
该值 可 通过 使用   " default _ section "   实例 属性 在 运行 时 被 读取 或 修改
它 的 效果 是 禁用 所有 重要 程度 为   level   及 以下 的 日志 记录 调用 ， 因此 如果 你 附带   INFO   值 调用 它 ， 则 所有   INFO   和   DEBUG   事件 就 会 被 丢弃 ， 而 重要 程度 为   WARNING   以及 上 的 事件 将 根据 日志 记录器 的 当前 有效 级别 来 处理
用于 字节 数据 的 函数
可见 性   ~ ~ ~ ~ ~ ~
The   " distutils . core "   是 为了 使用   Distutils   工具 唯一 要 安装 的 模块
当   follow _ symlinks   为 假值 且   src   为 符号 链接 时 ， " copy2 ( ) "   会 尝试 将 来自   src   符号 链接 的 所有 元 数据 拷贝到 新创建 的   dst   符号 链接
核心 与 内置
构建
工具 / 示例
本章 里 描述 的 模块 提供 了 和 Python 解释器 及其 环境 交互 相关 的 广泛 服务
帮助 和 偏好
" help "   字符串 可 包括 各种 格式 描述符 以 避免 重复使用 程序 名称 或 参数   default   等 文本
举个 例子 :
代表   C   " unsigned   char "   数据类型 ， 它 将 值 解读 为 一个 小 整数
如果 您 看到 以下 错误 ， 则 表明 您 没有 安装 启动器 ：
" filecmp "   模块 定义 了 如下 函数 ：
如果   uri   为 真 ， 则   database   被 解释 为   URI
示例
返回 启动 进程 时 使用 的 启动 方法 名
将 IP地址 与 其他 模块 一起 使用
在 一个 生成器 函数 中 ， " return "   语句 表示 生成器 已 完成 并 将 导致   " StopIteration "   被 引发
在   " get _ value ( ) "   通过 调用 内置 的   " getattr ( ) "   函数 返回 后 将 会 查找   " name "   属性
本 机 字节 序 的 结构 体所 对应 的 抽象 基类
如果 你 熟悉 命令行 的 用法 ， 你 会 发现 我 还 没 讲 到 这 一 选项 的 短 版本
（ 由   Victor   Stinner   在   bpo   35134   和   bpo   35081   中 贡献 ， 相关 工作 由   Eric   Snow   在   Python   3.7   中 发起 。 ）
光标 位置 将 保持 不变 （   在 移到 可能 指定 的   y   ,   x   之后 ）
源代码 :   Lib / asyncio / subprocess . py ,   Lib / asyncio / base _ subprocess . py
但是 内存 不会 以 任何 方式 被 初始化
实例 对象 的 有效 方法 名称 依赖于 其 所属 的 类
致谢
环境变量   " PYTHONMALLOC "   可以 用来 在 发布 模式 编译 的   Python   上 安装 调试 钩子
对 列表 中 的 元素 进行 排序 （ 参数 可 用于 自定义 排序 ， 解释 请 参见   " sorted ( ) "   ）
许多 对于 数据结构 的 需求 可以 通过 内置 列表 类型 来 满足
引用 计数
PyGTK ,   PyQt ,   PySide2   和   wxPython   都 拥有 比   Tkinter   更 现代 的 外观 效果 和 更 多 的 可视化 部件
对于 这样 的 事件 循环 ， 禁止 使用   " set _ child _ watcher ( ) "   或 不起作用
通常 ， 你 需要 更多地 控制 输出 的 格式 ， 而 不仅仅 是 打印 空格 分隔 的 值
请 注意 文本 在 被 传入   " TextWrapper "   的   " fill ( ) "   函数 之前 会 被 折叠 ， 因此 改变   " tabsize " ,   " expand _ tabs " ,   " drop _ whitespace "   和   " replace _ whitespace "   的 值 将 没有 任何 效果
PEP   308 :   条件 表达式
在   Python   3.10   中 ， 旧 解析器 将 被 移除 ， 依赖于 它 的 所有 功能 也 将 被 移除 （ 主要 是   " parser "   模块 ， 它 早已 被 弃用 ）
在   3.2   版 更改 :   " Fraction "   构造 器 现在 接受   " float "   和   " decimal . Decimal "   实例
返回   value   在   o   中 出现 的 次数 ， 即 返回 使得   " o [ key ]   value "   的 键 的 数量
装饰 器 表达式 的 求值 规则 与 函数 装饰 器 相同
无效 的 参数
n   为 列表 长度 ； 它 不会 被 打包 到 缓冲区 ， 但是 如果   " len ( array ) "   不 等于   n   则 会 引发   " ValueError "
将 同步 点 限制 为 连续 匹配 保留 了 一些 局部性 概念 ， 这 偶尔 会 带来 产生 更长 差异 的 代价
只有 在   Python   3.9   中 ， 你 可以 使用 命令行 开关   ( "   X   oldparser " )   或 环境变量   ( " PYTHONOLDPARSER   1 " )   切换 回   LL ( 1 )   解析器
每当 消费 协程 调用   " task _ done ( ) "   表示 这个 条目 已经 被 回收 ， 该 条目 所有 工作 已经 完成   ， 未 完成 计数 就 会 减少
PEP   278 :   通用 换行 支持
否则 ， 核心 Python 路径 是从 存储 在 注册表 中 的 PythonPath 构造 的
注意 :   " ratio ( ) "   调用 的 结果 可能 会 取决于 参数 的 顺序
" atexit "   会 按照 注册 顺序 的 逆序 执行 ;   如果 你 注册 了   " A " ,   " B "   和   " C " ,   那么 在 解释器 终止 时会 依序 执行   " C " ,   " B " ,   " A " .
扩展 模块 :   " PyModuleDef "   的   " m _ traverse " ,   " m _ clear "   和   " m _ free "   等 函数 在 模块 状态 被 请求 但 尚未 被 分配 时 将 不会 再 被 调用
GTK +   附带 的 部件 比   Tkinter   所 提供 的 更 多
有 命令 去 检查 （ 甚至 建议 ）   括号 ， 引号 以及 其他 符号 是否 匹配
3.6   新版 功能 .
成功 时 返回   true ; 发生 故障 时 ， 它 将 返回   false   并 引发 相应 的 异常
在   3.8   版 更改 :   The   " io . IOBase "   destructor   now   logs   " close ( ) "   exceptions .
" assert "   语句
在 大多数 平台 上 ， 这 等同于 用   " normpath ( join ( os . getcwd ( ) ,   path ) ) "   的 方式 调用   " normpath ( ) "   函数
文档
例如 ， 下面 两条 语句 会 创建 相同 的   " type "   对象 :
3.6   新版 功能 .
" ast "   类   " slice " ,   " Index "   和   " ExtSlice "   被 视为 已弃 用 并 将 在 未来 的   Python   版本 中 被 移除
（ 由   Oren   Tirosh   和   Hirokazu   Yamamoto   在   bpo   1172711   中 贡献 。 ）
Cmd   对象
在   Unix   上 ， 如 有 必要 提示 会 使用 替换 错误 句柄 写入 到 文件 类 对象   stream
如果   delay   为 真值 ， 则 文件 打开 会 被 推迟 至 第一次 调用   " emit ( ) "   时
对于 用户 定义 对象 ， 会 调用   " __ setitem __ ( ) "   方法 并 附带 适当 的 参数
文件 菜单   （ 命令行 和 编辑器 ）
工具 / 示例
然后 它会 请求 第三个 元素 ， C ，   计算   " func ( func ( A ,   B ) ,   C ) " ， 然后 把 这个 结果 再 和 第四个 元素 组合 并 返回 ， 如此 继续下去 直到 消耗 整个 可 迭代 对象
与   " TemporaryFile ( ) "   不同 ， " mkstemp ( ) "   用户 用 完 临时文件 后 需要 自行 将 其 删除
对于   iso   8859   1   编码 格式 来说 ） ， 这 提升 了 根据 字节 序列 来 正确 猜测   " utf   8   sig "   编码 格式 的 成功率
如果 仍然 尝试 这样 做 ， 则 在 运行 时会 出现异常
返回 音频 总帧 数
字节 对象
" MetavarTypeHelpFormatter "   为 它 的 值 在 每 一个 参数 中 使用   type   的 参数 名 当作 它 的 显示 名 （ 而 不是 使用 通常 的 格式   dest   ) :
分析 给定 的   sample   并 返回 一个   " Dialect "   子类 ， 该 子类 中 包含 了 分析 出 的 格式 参数
注解 :
这个 子 进程 是 由   " create _ subprocess _ exec ( ) "   函数 创建 的 :
在   3.6   版 更改 :   items   can   be   passed   as   separate   arguments ,   not   just   as   a   single   tuple .
indent   ,   width   ,   depth   ,   compact   和   sort _ dicts   将 作为 格式化 形参 被 传给   " PrettyPrinter "   构造 器
" strftime ( ) "   和   " strptime ( ) "   的 行为
更新 日志
另 请参阅   " weekday ( ) " ,   " isocalendar ( ) "
发布 日期 :   2018   03   29
不论是 在   " subpackage1 / moduleX . py "   还是   " subpackage1 / __ init __. py "   中 ，   以下 导入 都 是 有效 的 :
Screen   专有 方法 ,   而 非 继承 自   TurtleScreen
C 很难 写 ， 有没有 其他 选择 ？
第二种 是 通过 一组 循环 和 筛选 指令 计算出来 ， 称为 推导 式
在 一个 内部 字典 中 关联 级别   level   与 文本   levelName   ， 该 字典 会 被 用来 将 数字 级别 映射 为 文本 表示 形式 ， 例如 在   " Formatter "   格式化 消息 的 时候
按键 绑定
定义 如下 ：
3.3   新版 功能 .
如果   " __ float __ ( ) "   未定义 则 将 回退 至   " __ index __ ( ) "
工具 / 示例
As   shown   in   section   一个 简单 的 例子 ,   you   use   the   sdist   command   to   create   a   source   distribution
弹 出   TOS   并 从 一个   generator   生成 它
将   " xrange ( ) "   重命名 为   " range ( ) " ， 并用   " list "   包装 原有 的   " range ( ) "
例子
请 注意 ， 即使 时间 总是 作为 浮点数 返回 ， 但 并非 所有 系统 都 提供 高于 1 秒 的 精度
3.4 . 3   的 变化
如果 此 调用 引发 了 异常 ， 栅栏 对象 将 进入 损坏 态
工具 / 示例
Django   的   Context   class   模版 是 只读 映射
输入 转换器
默认 忽略 不 存在 的 目录
Python   是 一种 易于 学习 又 功能强大 的 编程语言
正 因为 这些 更加 通用 的 数据类型 ， Python 能够 应付 更 多 的 问题 ， 超过   Awk 甚至 Perl ， 而且 很多 东西 在 Python 中 至少 和 那些 语言 同样 简单
对于 字 面值 匹配 ， 请 将 原 字符 用 方括号 括 起来
并且 在   POSIX   fork ( )   调用 之前 的 收集 也 可以 释放 页面 以供 未来 分配 ，   这 也 可能 导致 写入 时 复制 ， 因此 建议 在 主 进程 中 禁用   gc   并 在   fork   之前 冻结 ， 而 在 子 进程 中 启用   gc
编码
仅当   allow _ none   为 true 时才 允许 传递
示例
你 当然 可以 使用 传统 的 装饰 方法 :
其他 改进
注解 :
函数 式 风格 的   Python   程序 并 不会 极端 到 消除 所有   I / O   或者 赋值 的 程度 ； 相反   ， 他们 会 提供 像 函数 式 一样 的 接口 ， 但会 在 内部 使用 非 函数 式 的 特性
引发 一个 审计 事件   " ctypes . cdata / buffer "   附带 参数   " pointer " ,   " size " ,   " offset "
无 状态 的 编码 和 解码
模块   " email "   Represent   and   manipulate   messages .
本文 介绍 了   Python   3.9   相比   3.8   的 新 特性
itertools   配方
请 注意 通过   lambda   表达式 创建 的 函数 不能 包含 语句 或 标注
在   3.7 . 2   版 更改 :   The   invalidation _ mode   parameter ' s   default   value   is   updated   to   None .
3.6   新版 功能 .
注意事项 ：
如果 你 使用 该   API ， 将会 对 整个 应用程序 产生 全局 的 影响
如果 你 想要 知道 如何 将 第一个 序列 转 成 第二个 序列 ， 可以 使用   " get _ opcodes ( ) " :
带 圆括号 的 表达式 列表 将 返回 该 表达式 列表 所 产生 的 任何 东西 ： 如果 该 列表 包含 至少 一个 逗号 ， 它会 产生 一个 元组 ； 否则 ， 它会 产生 该 表达式 列表 所 对应 的 单一 表达式
它 支持 该   RFC   中 描述 的 大部分 数据类型
函数   " bisect ( ) "   还 可以 用于 数字 表 查询
请参阅   " ndiff ( ) "   文档 了解 参数 默认值 及其 说明
PEP   327   十进 数据类型 由   Facundo   Batista   撰写 ， 由 Facundo   Batista ,   Eric   Price ,   Raymond   Hettinger ,   Aahz   和   Tim   Peters   实现
失败 时 返回   "   1 "
在   Windows   上 ，   Python   必须 是 一个   DLL   ， 这样 才 可以 处理 导入 的 本身 就是   DLL   的 模块
force   如果 将 此 关键字 参数 指定 为   true ， 则 在 执行 其他 参   数 指定 的 配置 之前 ， 将 移除 并 关闭 附加 到 根 记录器   的 所有 现有 处理器
注解 :
请 注意 此 函数 添加 的 第六个 属性   ( " processor " )   并 不 存在 于   " os . uname ( ) "   的 结果 中
还有 另外 两个 模块 可以 完成 同样 的 任务 ， 称为   " getopt "   ( 对应 于   C   语言 中 的   " getopt ( ) "   函数 )   和 被 弃 用 的   " optparse "
在 原生   C   " ctime ( ) "   函数   ( " time . ctime ( ) "   会 发起 调用 该 函数 ， 但   " date . ctime ( ) "   则 不会 )   遵循   C   标准 的 平台 上
如果 一个   " field ( ) "   指定 了 一个   " default _ factory "   ， 当 需要 该字 段 的 默认值 时 ， 将 使用 零 参数 调用 它
如果 在 正则 中 使用 捕获 括号 ， 则 它们 的 值 也 将 作为 列表 的 一部分 返回
3.5   新版 功能 .
是否 有 任何 公开 发表 的   Python   相关 文章 可以 供 我 参考 引用 ？
表示 为 百分数 :
运行 时 检查 ：
3.2   新版 功能 .
下表 总结 了 抽象 基类 提供 的   " io "   模块 ：
ST   对象
举个 例子 ， " addstr ( ) "   在   " stdscr "   窗口 的 当前 光标 位置 显示 一个 字符串 ， 而   " mvaddstr ( ) "   则 是 先 移动 到 一个 给定 的   y , x   坐标 再 显示 字符串
3.2   新版 功能 :   autojunk   形参
参见 :
Python 的 使用 则 更加 简单 ， 可以 在 Windows ， Mac   OS   X ， 以及 Unix 操作系统 上 使用 ， 而且 可以 帮 你 更 快 地 完成 工作
如果 给出 可选 的   delimiters   参数 ， 则 该 参数 会 被 解释 为 字符串 ， 该 字符串 包含 了 可能 的 有效 定界符
Future   对象
" default " :   使用 默认 内存 分配器
从 分块 读取 至多   size   个 字节 （ 如果 在 获得   size   个 字节 之前 已 到达 分块 末尾 则 读取 的 字节 会 少于 此 数量 ）
否则 生成器 的 上下文 管理器 将 向   " with "   语句 指示 该 异常 已经 被 处理 ， 程序 将 立即 在   " with "   语句 之后 恢复 并 继续执行
个性化
Python   2.7   于 2010 年 7 月 3 日 发布
这个 方法 回滚 从 上 一次 调用   " commit ( ) "   以来 所有 数据库 的 改变
请 注意   UTF   8   模式 下 的 标准 流 设置 可以 被   " PYTHONIOENCODING "   所 覆盖 （ 在 默认 的 区域 感知 模式 下 也 同样 如此 ）
access   可以 在   Unix   和   Windows   上 使用
3.4   新版 功能 .
这里 是 一个 基于   CPython   的 非 共享 构建 的   tapset   文件
让 我们 创建 一个 扩展 模块   " spam "   ( Monty   Python   粉丝 最 喜欢 的 食物 ... )   并且 想要 创建 对应   C   库函数   " system ( ) "   [ 1 ]   的   Python   接口
如前所述 ， 正则表达式 使用 反 斜杠 字符   ( " ' \ ' " )   来 表示 特殊 形式 或 允许 使用 特殊字符 而 不 调用 它们 的 特殊 含义
对于 整数 类型 字 段 例如   " c _ int " ， 可以 给定 第三个 可选项
" email . iterators " :   迭代 器
" py _ compile "   模块 能够 手动 编译 任意 模块
可以 使用 以下 嵌套 作用域 :
举个 例子 ：
对于 目录 ， 会 递归 地 寻找 其中 的   Python   源码
性能 优化
如果 一个 模块 创建 一个 类 的 实例 ， 重新 加载 定义 那个 类 的 模块 不 影响 那些 实例 的 方法 定义 — — — 它们 继续 使用 旧类 中 的 定义
" " ( " "   的 权 标值
进入   newline   模式
现在 也 支持   " timedelta "   对象 加上 或 乘以 一个   " float "   对象
( 这种 方式 在 调试 时 很 有用 :   如果 输错 了 一个 转义序列   ， 更 容易 在 输出 结果 中 识别 错误 。 )   另外 要 注意 的 一个 关键点 是 ： 专用 于 字符串 字 面值 中 的 转义序列 如果 在 字节 串字 面值 中 出现 ， 会 被 归类 为 无法 识别 的 转义序列
行 由此 操作码 （ 如果 有 ） 启动 ， 否则 为   " None "
基于 路径 的 查找 器
两个 序列 的 元素 都 必须 为   hashable
当   " 0   <   rv   <   size "   ， 输出 转换 成功 而且   rv   个字符 被 写入   str   （ 不 包含 末尾   str   [   rv   ]   的   " ' \ 0 ' "   字节 ）
数字 类型 的 哈希 运算
属性 和 颜色
环境变量   " TZ "   指定 如何 完成
当 一个 操作 会 被 某个 设置 为 非 阻塞 操作 的 对象 （ 例如 套 接字 ） 所 阻塞 时 将 被 引发
未 创建 文档 的 模块
" outline " :   正 数值
如果   obj   支持 可 写 缓冲区 导出 ， 则   memoryview   对象 将 可以 被 读 / 写 ， 否则 它 可能 是 只读 的 ， 也 可以 是 导出 器 自行决定 的 读 / 写
此外 它 还有 一个   " readline ( ) "   方法 可 返回 下 一个 输入 行 ， 以及 一个   " __ getitem __ ( ) "   方法 ， 该 方法 实现 了 序列 行为
如果 在 执行   " try "   语句 时 遇到 一个   " break " ,   " continue "   或   " return "   语句   ， 则   " finally "   子句 将 在 执行   " break " ,   " continue "   或   " return "   语句 之前 被 执行
如果 你 是 一名 处理 关键 线程 的 开发者 ， 请 务必 记录 这些 信息   ( 包括 建议 只 为 日志 处理器 附加   " QueueHandlers " )   以便 于 其他 开发者 使用 你 的 代码
创建   ZIP   归档 所用 的 系统
在   3.5   版 更改 :   补充   " AWAIT "   和   " ASYNC "   标记
复合 请求
默认 情况 下 ，   check _ same _ thread   为   " True " ， 只有 当前 的 线程 可以 使用 该 连接
3.1   新版 功能 :   skip   参数
共享内存 块 内容 的   memoryview
在   3.9   版 更改 :   此 方法 现在 接受 零 作为   k   的 值
当 在   " ZoneInfo "   对象 上 调用   " str "   时 返回 的 字符串 表示 默认 会 使用   " ZoneInfo . key "   属性 （ 参见 该 属性 文档 中 的 用法 注释 ） :
在   3.8 . 1   中 新增 :
BEOPEN   PYTHON   开源 许可 协议 第   1   版
检测   never   awaited   协同程序
调试器 命令
Python   2.6   有 什么 新 变化
新 的 特性
在 布尔运算 时 ， " time "   对象 总是 被 视为 真值
这个 类 被 设计 为 具有 与   " subprocess . Popen "   类 相似 的   API ， 但 两者 有 一些 重要 的 差异 :
为了 简化 对 各种 编解码器 组件 的 访问 ， 本 模块 提供 了 以下 附加 函数 ， 它们 使用   " lookup ( ) "   来 执行 编解码器 查找 ：
注解 :
" ' backslashreplace ' "   将 把 错误 数据 替换 为 一个 反 斜杠 转义序列
" RLock "   支持   context   manager   ， 所以 可 在   " with "   语句 内 使用
例如 ， 某个 类型 检查 器 可能 会 标记 以下 代码 为 错误 的 ：
在   3.4   版 更改 :   Updated   to   be   based   on   PEP   451
带 标注 的 赋值 语句
更 确切 地说 ， 函数 中 所有 的 变量 赋值 都 将 存储 在 局部 符号表 中 ； 而 变量 引用 会 首先 在 局部 符号表 中 查找 ， 然后 是 外层 函数 的 局部 符号表 ， 再 然后 是 全局 符号表 ， 最后 是 内置 名称 的 符号表
模块 的   __ name __   在 通过 标准 输入 、 脚本 文件 或是 交互式 命令 读入 的 时候 会 等于   " ' __ main __ ' "
可用性 :   Windows
通过 创建 上下 文集 和 小数 ， 程序 的 大部分 操作 数据 与 其他   Python   数字 类型 没有 区别
没有 可用 的   XENIX   信标
已弃 用 的 函数 和 变量
每当 一个 模块 被 初始化 时 打印 一条 信息 ， 显示 其 加载 位置 （ 文件名 或 内置 模块 ）
命令行
这个 成员 或者 为   " None " ， 或者 为 一个 包含 需要 保持 存活 以 使 内存 块 的 内存 保持 有效 的   Python   对象 的 字典
修复 生成器 的   " throw ( ) "   方法 的   API   变更
密钥 哈希
type   必须 为 指针 类型 ， 而   obj   必须 为 可以 被 作为 指针 来 解读 的 对象
例如 :
条件 表达式
" pwd "   是 要 传给   " ZipFile . open ( ) "   的   " pwd "   形参
清理
从 包中 导入
为了 避免 内存 破坏 ， 扩展 的 作者 永远 不 应该 试图用   C   库函数 导出 的 函数 来 对   Python   对象 进行 操作 ， 这些 函数 包括 ：   " malloc ( ) " ,   " calloc ( ) " ,   " realloc ( ) "   和   " free ( ) "
（ 由   Paul   Ganssle   在   bpo   36004   中 贡献 。 ）
timeout   参数 的 使用 方法 及 行为 与   " Lock . acquire ( ) "   一样
当 序列 订阅 操作 引发   " IndexError "   时 ， 迭代 结束
参见 :
这 通常 为 基本 文件名 ， 例如   ' test . log '
该   CRC   被 用于   binhex4   格式
变量   " sys . ps1 "   和   " sys . ps2 "   定义 用作 主要 和 辅助 提示 的 字符串 :
安全
只有   " truncate ( ) "   方法 没有 实现
发布 日期 :   2016   06   13
更能 体现 这个 概念 的 命令 如   cp   ， 它 最 基本 的 用法 是   " cp   SRC   DEST "
如果 你 尝试 比较 不同 版本 或 不同 类型 的 对象 ， 则 会 引发   " TypeError "   异常
" sunau "   读写   Sun   AU   文件
源代码 :   Lib / email / iterators . py
可 执行 行 的 主要 预期 目的 是 使 相关 模块 可 导入 （ 加载 第三方 导入 钩子 ， 调整   " PATH "   等 ）
因于 钩子 函数 可能 由 不同 的 运行 时 调用 ， 该 指针 不 应 直接 指向   Python   状态
" ClassVar "   仅 接受 类型 ， 并且 不能 被 再次 添加 下标
参数 缩写 （ 前缀 匹配 ）
地址 对象
w   为 日期 的 宽度 ， 但 始终保持 日期 居中
类似 地 ， 当 不 捕获   " Overflow "   信号 时 ， 也 可以 通过 舍入 到 超出 最大 可 表示 数字 限制 的 方式 产生 无穷大 的 结果
如果 只 提供 了   globals   ， 则 它 必须 是 一个 字典 （ 不能 是 字典 的 子类 ） ， 该 字典 将 同时 被 用于 全局 和 局部变量
文件 操作
特别 需要 注意 的 例子 指定 了 构建 包 的 元 信息 ， 以及 指定 了 包 内容
" ast "   类   " Num " ,   " Str " ,   " Bytes " ,   " NameConstant "   和   " Ellipsis "   被 视为 已弃 用 并 将 在 未来 的   Python   版本 中 被 移除
3.9   版后 已 移除 :   " collections . abc . ItemsView "   now   supports   " [ ] "
你 可以 使用   " time . process _ time ( ) "   来 测量 CPU 时间
PEP   3141   A   Type   Hierarchy   for   Numbers   PEP   由   Jeffrey   Yasskin   撰写
XML   远程 过程 调用
现在 ， 您 可以 在 该 目录 中 创建 一个 名为   " usercustomize . py "   的 文件 ， 并 将 所 需 内容 放入 其中
如果   body   是   " None " ， 那么 对于 要求 正文 的 方法   ( " PUT " ， " POST " ， 和   " PATCH " ) ，   Content   Length   头会 被 设为   " 0 "
" " callback " "   调用 指定 函数
优先 队列 实现 说明
“ 按 字节 交换 ” 片段 中 的 所有 采样 值 ， 返回 修改 后 的 片段
当   " assert "   语句 失败 时 将 被 引发
MemoryView   对象
" fnmatch "   Unix   文件名 模式匹配
不 完整 类型
标准 输出设备
用于 表示 验证 错误 的 人类 可读 的 字符串
XMLParser 对象
Python   2.1   有 什么 新 变化
如果 列表 ， 元组 或 字典 的 字 面值 分布 在 多行 中 ， 则 更 容易 添加 更 多 元素 ， 因为 不必 记住 在 上 一行 中 添加 逗号
创建 一个 新 的 字典
也 可以 使用   " str "   或   bytes   like   object   作为 文件 进行 读取 和 写入
已弃 用 的   C   API   函数 和 类型
这 是因为   " threading "   模块 中 的 锁 实现 并非 总是 可 重入 的 ， 所以 无法 从 此类 信号处理 程序 发起 调用
" 0 "   是 星期一 （ 默认值 ） ， " 6 "   是 星期天
如果 没有 定义 这样 的 值 ， 则 返回   default   ， 如果 没有 给出 ， 则   " ValueError "   被 引发
格式化 输出
由于 正则表达式 用于 对 字符串 进行 操作   ， 因此 我们 将 从 最 常见 的 任务 开始 ： 匹配 字符
类型 和 成员
在   3.3   版 更改 :   如果 其中 一个 工作 进程 被 突然 终止 ， " BrokenProcessPool "   就 会 马上 触发
取消 拖放 进程
Windows   常数
" x   y "   和   " not   x   !   y "
点击 一个 上下文 行会 使 编辑器 跳转 到 该行
简单 的 JSON 解码器
3.2   新版 功能 .
上下文 对象
上下文 管理器 类型
注解 :
在 之前 的 版本 中则 会 引发   " RuntimeError "
注解 :
eventmask   是 可选 的 位 掩码 ， 用于 指定 要 检查 的 事件 类型 ， 它 可以 是 常量   " POLLIN " 、 " POLLPRI "   和   " POLLOUT "   的 组合 ， 如下 表 所述
3.5   新版 功能 :   " follow _ wrapped "   parameter
正则 中 还有 更 多 的 剩余 东西 ， 并且   " > "   在 字符串 的 末尾 不能 匹配 ， 所以 正则表达式 引擎 必须 逐个 字符 地 回溯 ， 直到 它 找到 匹配   " > "
如果 文件 描述符   fp1   和   fp2   指向 相同 文件 ， 则 返回   " True "
请 注意 解析器 层级 的 默认值 总是 会 覆盖 参数 层级 的 默认值 :
可 选 参数   start   和   end   是 切片 符号 ， 用于 将 搜索 限制 为 列表 的 特定 子 序列
这份 文件 是 对 这个 主题 介绍
[ 3 ]   Unicode   标准 明确 区分 码位   ( 例如   U + 0041 )   和 抽象 字符   ( 例如   " 大写 拉丁字母   A " )
Python   3.8 . 1   中 的 重要 变化
在   3.6   版 更改 :   移 除了 对   " mode   ' U ' "   的 支持
字典 显示
3.6   新版 功能 .
库
除非 有意 更换 ， 否则 这是 错误
StreamWriter   对象
尝试 在 窗口   、 子 窗口 或 面板 的 右下角 写入 将 在 字符串 被 打印 之后 导致 异常 被 引发
下面 的 示例 说明 了 这 两种 方法
然后 ， 如果 用户 遇到   MIME   类型 为   video / mpeg   的 邮件 消息 或   Web   文档 时 ， " % s "   将 被 替换 为 一个 文件名 （ 通常 是 一个 临时文件 ） 并且 将 自动 启动   xmpeg   程序 来 查看 该 文件
例如 ，   " < !   comment   > "   这个 注释 会 用   " '   comment   ' "   作为 参数 调用 此 方法
在   " object . h "   中 实际 定义 的   " PyTypeObject "   具有 比如 上 定义 更 多 的 字 段
关闭 监听器 对象 上 的 绑定 套 接字 或者 命名 管道
日期 和 时间 对象 可以 根据 它们 是否 包含 时 区 信息 而 分为 “ 感知 型 ” 和 “ 简单 型 ” 两类
编辑器 和 集成 开发 环境
在   " sys . last _ traceback "   中 查找   traceback ， 并 进入 其 事后 调试
（ 由   Huon   Wilson   在   bpo   40630   中 贡献 。 ）
进程 监视 的 过滤器
例如
只 包含 空白符 的 行会 在 输入 时 被 忽略 并 在 输出 时 被 标准化 为 单个 换行符
当 输出 结果 过长 而 需要 折 行时 ， “ 美化 输出 机制 ” 会 添加 换行符 和 缩进 ， 以 更 清楚 地 展示 数据结构 :
次序 比较   ( " < " ,   " > " ,   " <   "   和   " >   " )   将 引发   " TypeError "
返回 一个   C   " double "   代表   pyfloat   的 内容
所有   ASCII   标点符号 均 可 用作 密码 ， 但是 要 注意 空白符 和 非 打印 字符 不 允许 用作 密码
当 一个 应用程序 或   DLL   被 链接 时 ， 可能 会 生成 一个 导 入库   ， 它 将 需要 被 用于 应用程序 或   DLL   中 未来 所有 依赖于 这些 符号 的   DLL
Python   3.5 . 3   正式版
当 调用 时 附带   "   c   command "   时 ， 它会 执行   command   所 给出 的   Python   语句
源 迭代 器 已经 读取 了 的 行数
bpo   36459 :   修复 了 由于 tokenizer . c 中 的   " tok _ nextc ( ) "   方法 可能 导致 的 两次   " PyMem _ FREE ( ) "   调用
捕获 有关 某个 非 基于 文件 的 模块 的 足够 细节 信息 ， 以 允许 稍后 再 通过   " getline ( ) "   来 获取 其中 的 行 ， 即使 当 稍后 调用 时   module _ globals   为   " None "
如果 源 是 一个 目录 ， 则 会 调用   " copytree ( ) " ， 并 向 它 传入   " copy _ function ( ) "
3.4   新版 功能 .
我们 可以 轻易 地 验证 ， 现在 数组 是 有序 的 了 :
这 意味着   " ProcessPoolExecutor "   不 可以 工作 在 交互式 解释器 中
通过 列表 推导 式 ， 你 会 获得 一个   Python   列表 ； " stripped _ list "   就是 一个 包含 所有 结果 行 的 列表 ， 并 不是 迭代 器
但是   " strptime ( ) "   独立 于 任何 平台 ， 因此 不 一定 支持 所有 未记录 为 支持 的 可用 指令
一个 包含 由   typecode   限制 类型 的 条 目的 新 数组 ， 并 由 可选 的   initializer   值 进行 初始化 ， 该值 必须 为 一个 列表 、   bytes   like   object   或 包含 正确 类型 元素 的 可 迭代 对象
" ipaddress "   IPv4 / IPv6   操作 库
在   3.6   版 更改 :   Added   source   parameter .
返回 两个 复数 的 乘积 ， 用   C   类型   " Py _ complex "   表示
" findall ( ) "   找到 正则 匹配 的 所有 子 字符串 ， 并 将 它们 作为 列表 返   回
（ 由   Batuhan   Taskaya   在   bpo   39562   中 贡献 。 ）
3.6   新版 功能 :   添加 了   " blake2b ( ) "   和   " blake2s ( ) "
其 效果 是 在 这些 调用 期间 ， " LINES "   会 被 设为   " 1 " ； " clear " ,   " cup " ,   " cud " ,   " cud1 " ,   " cuu1 " ,   " cuu " ,   " vpa "   等 功能 会 被 禁用 ； 而   " home "   字符串 会 被 设为   " cr "   的 值
检查 子 进程 是否 已 被 终止
哈希 随机化 旨在 针对 由 精心 选择 的 输入 引起 的 拒绝服务 攻击 提供 防护 ， 这种 输入 利用 了 构造   dict   在 最坏 情况 下 的 性能 即   O ( n ^ 2 )   复杂度
当 调用 时 附带 一个 目录名 参数 时 ， 它会 从 该 目录 读取 并 执行 具有 适当 名称 的 脚本 程序
参见 :
Distutils   示例
我 想 在 Linux 系统 上 编译 一个 Python 模块 ， 但是 缺少 一些 文件
本   FAQ   不 建议 使用 制表符 ，   Python   样式 指南   PEP   8   ， 为 发行 的   Python   代码 推荐   4   个 空格 ； 这 也 是   Emacs   python   mode   默认值
如何 在   C   中 执行 任意   Python   语句 ？
安装 调试 钩子 ：
注解 :
函数 标注
由于 模块 使用 了   / bin / sh   命令行 ， 因此 要求 有   POSIX   或 兼容   " os . system ( ) "   和   " os . popen ( ) "   的 终端 程序
fieldnames   参数 是 由键 组成 的   " 序列 " ， 它 指定 字典 中值 的 顺序 ， 这些 值会 按 指定 顺序 传递 给   " writerow ( ) "   方法 并 写入 文件   f
新 的 文件 描述符 是 不可 继承 的
对于 更 复杂 的 应用程序 ， " ssl . SSLContext "   类 有助于 管理 设置 项 和 证书 ， 进而 可以 被 使用   " SSLContext . wrap _ socket ( ) "   方法 创建 的   SSL   套 接字 继承
（ 由   Kyle   Stanley ,   Antoine   Pitrou   和   Yury   Selivanov   在   bpo   37228   中 贡献 。 。 ）
" abs ( a ) "   a   的 绝对值
如果   x   是 假 的 或者 被 省略 ， 返回   " False " ； 其他 情况 返回   " True "
类似 于   " getstatusoutput ( ) " ， 但 退出 码会 被 忽略 并且 返回值 为 包含 命令 输出 的 字符串
" % Y "   十进制 数 表示 的 带 世纪 的 年份
在   3.7   版 更改 :   x   现在 只能 作为 位置 参数
如果 在 将   input   写入 到   stdin   时 引发 了   " BrokenPipeError "   或   " ConnectionResetError "   异常 ， 异常 会 被 忽略
关闭 数据库 连接
（ 由   Christopher   Welborn   在   bpo   20218   中 贡献 。 ）
除了   " task _ done ( ) "   和   " join ( ) "   之外 ， " Queue "   实现 了 标准 库类   " queue . Queue "   中 所有 的 方法
将 浮点数 转换 为 十进制 数 的 类 方法
赋值 也 是 属于 语句 而 非 表达式
base64   编码 格式 的 缺点 是 它 会 使 文本 变成 人类 不可 读 的 形式
3.8   新版 功能 .
其中   " for ... in "   语句 包含 了 将要 遍历 的 序列
Cookie 的 值
字符 不是 单独 的 数据类型 而是 仅 有 一个 字符 的 字符串
PEP   450   Adding   A   Statistics   Module   To   The   Standard   Library   PEP   由   Steven   D ' Aprano   撰写 并 实现
注释
您 需要 将 Python 安装 目录 添加 到   " PATH "   环境变量 中 ， 该 内容 与 其他 条目 用分 号 分隔
成功 时 返回 结果 ， 在 失败 时 抛出 一个 异常 并 返回   NULL
而是 通过 一个 查找 表 执行 对 函数 或 数据 的 访问
使用   " size "   参数 ， 创建 一个 新 的 指定 字节 大小 的   " SharedMemory "   对象 并 返回
在   3.9   版 更改 :   支持 文件 或类 文件 对象
警告 :
注册 已 注册 过 的 文件 描述符 不会 报错 ， 但是 结果 是 不 确定 的
如果   timeout   未指定 或 为   " None " ， 则 不 限制 等待时间
适用 于 Windows 的 Python 启动器
您 应该 注意 到 最新 的 Python   2 . x 安装 的 版本号 已 打印 出来
当 Python 解释器 完成 一个 垃圾 回收 循环 时 被 触发
属性 名称 还 可 包含 点 号
注解 :
此 函数 是 逐 字符 比较 ， 因此 可能 返回 无效 路径
00 ,   01 ,   ... ,   59   ( 4 ) ,   ( 9 )   " % f "   以 十进制 数 表示 的 微秒 ， 在 左侧 补零   000000 ,   000001 ,   ... ,   ( 5 )
" socket "   底层 网络接口
测试
返回 与 函数 对象   op   相关联 的 全局 字典
摘要 发布 重点
帮助 源
[ 1 ]   参见   https : / / www . w3 . org / TR / html5 / syntax . html # named   character   references
对于 方法 来说 当然 还有 额外 的 第一个 参数   self   ， 这里 省略 了
模块 内容
" sys . modules "   是 可 写 的
移植 到   Python   3.2
[ 3 ]   请参阅   R
返回 代表 整个 屏幕 的 窗口 对象
可 选 参数   language   指定   RFC   2231   当中 的 语言 ， 其 默认值 是 空 字符串
传递 0 以 切换 缓冲 关闭   （ 仅 允许 在 二进制 模式 下 ） ， 1 选择 行 缓冲 （ 仅 在 文本 模式 下 可用 ） ， 并且 > 1   的 整数 以 指示 固定 大小 的 块 缓冲区 的 大小 （ 以 字节 为 单位 ）
可 在 除法 、 取余队 法 或 对 一个 数求 负 数次 幂时 发生
当 多个 线程 使用 同一个 连接 的 时候 ， 用户 应该 把 写 操作 进行 序列化 ， 以 避免 数据 损坏
执行   Python   信号处理 程序
描述符 对象
这些 是
有关   " struct _ time "   对象 的 说明 请 参见 上文
默认 形参 设置 为 初始 延迟 一秒 ， 如果 在 延迟 之后 连接 仍然 无法 建立 ， 处理程序 将 每次 把 延迟 翻倍 直至 达到   30   秒 的 最大值
例如 ， 内置 的   " len ( ) "   函数 的 签名 为   " len ( obj ,   / ) "
移植 到   Python   3.7
当对 浮点数 计数 时 ， 替换 为 乘法 代码 有时 精度 会 更好 ， 例如 ：   " ( start   +   step   i   for   i   in   count ( ) ) "
一个 理论 上 的 优点 是 ， 构造 数学 证明 来 说明 函数 式 程序 是 正确 的 相对 更 容易 些
固定 位
参见 :   PEP   370   分 用户 的   site   packages   目录
" Control   P "   光标 向上 ; 向上 移动 一行
导入 器 关联 的   ZIP   文件 的 文件名 ， 没有 可能 的 子 路径
如果   Future   已经 完成 则 抛出 一个   " InvalidStateError "   错误
要 使用   " inspect . isawaitable ( ) "   来 检测 他们
语法错误
当前 的 流 位置 不变
在   3.3   版 更改 :   添加 了   follow _ symlinks   参数 并且 支持   Linux   扩展 属性
测量 进程 时间 ， 而 不是   wallclock   时间 ， 使用   " time . process _ time ( ) "   而 不是   " time . perf _ counter ( ) "   ， 这是 默认值
两 参数 形式   " pow ( base ,   exp ) "   等价 于 乘方 运算符 :   " base   exp "
如果 找到 了 翻译 ， 则 将   n   代入 复数 公式 ， 然后 返回 得出 的 消息 （ 某些 语言 具有 两种 以上 的 复数 形式 ）
其他 语言 特性 修改
" propagate "   条目 设 为   1   表示 消息 必须 从此 日志 记录器 传播 到 更 高层 级 的 处理程序 ， 设 为   0   表示 消息 不会 传播 到 更 高层 级 的 处理程序
" shlex "   此 模块 提供 了 用于 解析 和 转义 命令行 的 函数
新 的 库 模块 ：
引用 文献
3.3   新版 功能 .
套 接字 类型 不 受 支持
返回 的 值 等于   x   ( 舍入 后 ) ， 并且 指数 为   y
新增 模块
程序员 注意事项 :   在 类 定义 内 定义 的 变量 是 类 属性 ； 它们 将 被 类 实例 所 共享
这样 做 的 实际效果 是 ` ` 192.0 . 2.1 / 24 ` ` 没有 描述 网络
函数 式 编程 模块
注解 :
新增 ， 改进 和 弃 用 的 模块
要求 必须 为 四个 十六进制 数码
库
" http "   HTTP   模块
增加 了   " math . lcm ( ) " :   返回 指定 参数 的 最小 公倍数
这些 工厂 函数 的 第一个 参数 是 返回值 类型 ， 回调 函数 的 参数 类型 作为 剩余 参数
之后 ， 回调 中 的 回溯 信息 将会 输出 到   " sys . stderr "
以 二进制 模式 打开 一个   LZMA   压缩文件
MingW   Python   扩展
大 文件 支持
在   3.2   版 更改 :   加入 了   style   形参
在 交互式 命令行 里 ， 你 得 给 每个 缩进 的 行 敲 下   Tab   键 或者 （ 多个 ） 空格键
失败 时 ， 返回   " NULL "
注意 ， 通过 属性 的 方式 访问 会 缓存 这个 函数 ， 因而 每次 访问 它 时 返回 的 都 是 同一个 对象
这种 时间 格式 的 示例 为   " 2003   01   23   00 : 29 : 50 , 411 "
（ 由   Yury   Selivanov   在   bpo   34790   中 贡献 。 ）
控制 四舍五入 以 满足 法律 或 监管 要求 ，
一个 简单 的 例子
当   Screen   类 的 方法 对应 函数 被 调用 时会 自动 创建 一个   Screen   对象
PEP   273   从 ZIP 压缩包 导入 模块   Written   by   James   C
相关 用例 请 参见 示例
" NormalDist "   示例 和 用法
当   " Generator "   写出   MIME   消息 的 纯 文本 表示 形式 时 ， 如果 它 发现 消息 具有   preamble   属性 ， 它 将 在 标头 及 第一个 分界 之间 区域 写出 这些 文本
当 在 命令行 运行 该 测试 脚本 ， 上文 的 脚本 生成 如 以下 格式 的 输出 :
超时
尽管 你 可以 编写 你 的 程序 来 应对 这些 序列 ， curses   能够 代替 你 做到 这件 事 ， 返回 一个 特殊 值 比如   " curses . KEY _ LEFT "
例如 ， " ' [ ? ] ' "   将 匹配 字符   " ' ? ' "
" OrderedDict "   对象
在 列表 生成式 中 增加 必须 的 括号
" __ call __ "   方法 可以 执行 任意 动作 ， 但 通常 将 基于   " dest "   和   " values "   来 设置   " namespace "   的 属性
如果 已 到达 文件 末尾 ， " f . read ( ) "   将 返回 一个 空 字符串   ( " ' ' " )
3.8   新版 功能 .
" encodings . utf _ 8 _ sig "   带 BOM 签名 的 UTF   8 编解码器
" sys . path "   包含 一个 提供 模块 和 包 搜索 位置 的 字符串 列表
如果 有 参数 ：
当 使用   " cancel ( ) "   发出 取消 请求 时   Task   会 被 取消   ， 其 封包 的 协程 将 传播 被 抛入 的   " CancelledError "   异常
（ 由   Zackery   Spytz   在   bpo   32941   中 贡献 。 ）
其他 流程 控制 工具
一个 标准化 的 附加 示例 :
返回 队列 的 大致 长度
在   3.4   版 更改 :   引发   " SameFileError "   而 不是   " Error "
注解 :
在   3.4   版 更改 :   引发   " OSError "   而 不是   " NotImplemented "
筛选 特定 标志
添加 了   capture _ output   形参 .
如果 该 类型 的 实例 是 可变 的 ， 还 需要 实现   " tp _ clear "
参见 :
" secrets "   生成 安全 随机 数字 用于 管理 密码
致谢
虽然   " Enum "   可以 拥有 任意 类型 的 成员 ， 不过 一旦 你 混合 了 附加 类型 ， 则 所有 成员 必须 为 相应 类型 的 值 ， 如 在 上面 的 例子 中即 为   " int "
这些 对象 会 将 它们 的 属性 视为 对应 于 本地 时间 ， 并且   " tzinfo "   对象 支持 展示 本地 时间 与   UTC   的 差值 、 时 区 名称 以及   DST   差值 的 方法 ， 都 是 与 传给 它们 的 日期 或 时间 对象 的 相对值
如果 没有 正确 设置   encoding   ， 转换 可能 会 失败
当 你 尝试 输入 时 按键 不会 上 屏 ， 这 使得 使用 终端 变得 困难
非 负数 基于 上下文 精度 的 平方根
初始化   curses   并 调用 另 一个 可 调用 对象   func   ， 该 对象 应当 为 你 的 使用   curses   的 应用程序 的 其余部分
在 文本 模式 下 写入 时 ， 默认 会 把 出现 的   " \ n "   转换 回 平台 特定 的 结束符
从   3.4   开始 ， 也 支持   Unix   域套 接字
无论如何 ， 为了 最大化 地 获取 互操作性 ， 你 可能 希望 自己 遵守 该 原则
" color ( ) "   返回 以 一对 颜色 描述 字符串 或 元组 表示 的 当前 画笔 颜色 和 填充 颜色 ， 两者 可 分别 由   " pencolor ( ) "   和   " fillcolor ( ) "   返回
如果   stdout   参数 非   " PIPE " ， 此 属性 为   " None "
记录 名为   pkg _ name   的 包 可以 在 指定 的   path   中 找到
该 文档 显示 了 定义 托管 属性   " x "   的 典型 用法 :
所有 内置 序列 和 集合 类型 以及 字典 都 支持 此 运算 ， 对于 字典 来说   " in "   检测 其 是否 有 给定 的 键
如果 使用 选项   "   m "   module   ， " sys . argv [ 0 ] "   就是 包含 目录 的 模块 全名
默认 情况 下 ， " ArgumentParser "   根据 它 包含 的 参数 来 构建 用法 消息 ：
在   3.9   版 更改 :   The   " Traceback . total _ nframe "   attribute   was   added .
请 记住 ， Python   的 字符串 文字 也 使用 反 斜杠 后 跟 数字 以 允许 在 字符串 中 包含 任意 字符 ， 因此 正则 中 引入 反向 引用 时 务必 使用 原始 字符串
" [ items ] "   ( " list " )   [   相关 的 元素   ]   将 一个   C   变量 序列 转换成   Python   列表 并 保持 相同 的 元素 数量
host   和   port   参数 指明 隧道 连接 的 位置 （ 即   CONNECT   请求 所 包含 的 地址 ，   而 不是 代理服务器 的 地址 ）
这会 显示 如下 内容 ：
简单 语句
通常 你 可以 在 搜索 栏 搜索   " cmd "   来 创建 这种 窗口
" ntpath "   用于   Windows   路径
类型 检查 宏
当   " 0   <   r   <   n "   ， 返回 项 个数 为   " n !   /   ( n   r ) ! "   ； 当   " r   >   n "   ， 返回 项 个数 为 0
sleep   参数 指定 在 备份 剩余 页 的 连续 尝试 之间 要 休眠 的 秒数 ， 可以 指定 为 一个 整数 或 一个 浮点 数值
数据   marshal   操作 支持
它们 可 通过   " async   def "   语句 来 实现
" tp   槽 "
在   SQLite   的   3.6 . 5   版 之前 ， 如果 你 执行   " DELETE   FROM   table "   时 不 附带 任何 条件 ， 则   " rowcount "   将 被 设为   0
它 在 这里 被 提及 是因为 它 包含 基本   ctypes   数据类型 共有 的 属性
文字 转换
每个 配置 必须 定义 所 使用 的 表格 ， " stringprep "   过程 的 其他 可选项 也 是 配置 的 组成部分
返回   " a   is   b "
客户端 套 接字 实例 ， 采用 默认 上下文 和 IPv4 / IPv6 双栈 :
除了 Tk 接口 ，   " tkinter "   也 包含 了 若干   Python   模块 ， " tkinter . constants "   是 其中 最 重要 的
增加 对 实现 了   " os . PathLike "   对象 的 支持
你 可以 使用 一个 名为   pip   的 程序 来 安装 、 升级 和 移除 软件包
" readline "   GNU   readline   接口
注意 对 不同 类型 对象 来说 ， 只要 待 比较 对象 提供 了 合适 的 比较 方法 ， 就 可以 使用   " < "   和   " > "   来 比较
（ 由   Ngalim   Siregar   在   bpo   37444   中 贡献 。 ）
将   " operator "   模块 中 的 许多 方法 调用 转为 其他 的 等效 函数调用
新 的 特性
等价 于   " pack _ into ( ) "   函数 ， 使用 了 已 编译 的 格式
此时 ， 可以 交互 地 探索 执行 的 结果
请 注意 ， 上面 的 代码 适用 于 Python   2 以及 Python   3
但是 ， 要 将 其 表示 为   Python   字符串 文字 ， 必须 再次 转义 两个 反 斜杠
引发 一个 审计 事件   " winreg . EnumValue " ， 附带 参数   " key " ,   " index "
" urllib "   URL   处理 模块
Infinite   和   NaN   数值
工具 / 示例
为 每个   SQLite   后 端 实际 执行 的   SQL   语句 注册 要 调用 的   trace _ callback
" select "   模块 关于   kqueue   的 接口 包含 以下 声明 :
将 音频 片段 中 的 采样 值 转换 为   u   LAW   编码 ， 并 将 其 作为 字节 对象 返回
贪婪 与非 贪婪
返回 一个   reader   对象 ， 该 对象 将 逐行 遍历   csvfile
虽然 过滤器 主要 被 用来 根据 比 层级 更 复杂 的 规则 来 过滤 记录 ， 但 它们 可以 查看 由 它们 关联 的 处理程序 或 日志 记录器 所 处理 的 每条 记录 ： 当 你 想要 执行 统计 特定 日志 记录器 或 处理程序 处理 了 多少 条 记录 ， 或是 在 所 处理 的   " LogRecord "   中 添加 、 修改 或 移除 属性 这样 的 任务 时该 特性 将 很 有 用处
特别 要 说明 的 是 ， " fill ( ) "   接受 与   " wrap ( ) "   完全相同 的 关键字 参数
通常 是   " c _ ubyte "   的 一个 别名
查找 所有 的 副词 及其 位置
其 取值 必须 为 一个 字符串 ， 但 可以 与   " __ name __ "   取 相同 的 值
通常 需要 的 参数 有 ：
" bytes "   对象 形式 的 单个 归档 成员 的 注释
（ 由   Amaury   Forgeot   d ' Arc   在   bpo   9210   中 贡献 。 ）
例如 ， " PYTHONTRACEMALLOC   1 "   只 保存 最近 的 帧
使用   GZIP   压缩 已有 的 文件 示例 ：
设置 或 移除 底层 库 的   " rl _ pre _ input _ hook "   回调 所 发起 调用 的 函数
类似 地 ， 可 使用   " float ( ) "   转换 为 浮点数 ， 例如   " float ( ' 144 ' )   144.0 "
注意   :   在 用户 自定义 坐标系 中 ， 角度 可能 显得 扭曲
致谢
要 检查 泛 型函数 将 为 给定 类型 选择 哪个 实现 ， 请 使用   " dispatch ( ) "   属性 :
从 指针   p   创建 一个   Python   整数
Python   的 冻结 模块 和 冻结 包 ( 由负   " size "   成员 表示 ) 并 不是 广为人知 的 事情 ，   它们 仅仅 用于 实验
执行 不 区分 大小写 的 匹配 ； 字符 类 和 字面 字符串 将 通过 忽略 大小写 来 匹配 字母
API   函数
文本   I / O
同一个 元组   " ( ' a ' ,   ' a ' ,   ' b ' ) "   出现 了 两次 ， 但是 两个   ' a '   字符 来自 不同 的 位置
请 查看   " set "   和 集合 类型   set ,   frozenset   获取 关于 这个 类 的 文档
如果   Unicode   缓冲区 指针 为   " NULL " ， 则 返回   " None "
以 一致 的 规则 为 你 的 类 和 函数 命名 ； 按照 惯例 应 使用   " UpperCamelCase "   来 命名 类 ， 而 以   " lowercase _ with _ underscores "   来 命名 函数 和 方法
模块 可以 通过 查看 预定 义 的 全局变量   " __ name __ "   找到 自己 的 模块 名称
CacheFTPHandler   对象
extent   一个 数值   ( 或   " None " )
返回 撤销 缓冲区 里 的 条目 数
警告 也 可以 使用   " PYTHONWARNINGS "   环境变量 以及 使用   " warnings "   模块 在   Python   程序 内部 进行 控制
值   意义   " ' r ' "   以 只读 方式 打开 现有 数据库 （ 默认 ）   " ' w ' "   以 读写 方式 打开 现有 数据库   " ' c ' "   以 读写 方式 打开 数据库 ， 如果 不 存在 则 创建 它   " ' n ' "   始终 创建 一个 新 的 空 数据库 ， 以 读写 方式 打开
上面 的   YAML   代码 片段 定义 了 三个 格式化 器
将 内容 清单 打印 到   " sys . stdout "
如果 目标 为 标识符 （ 名称 ） :
表达式 输入
3.9   版后 已 移除 :   " contextlib . AbstractAsyncContextManager "   now   supports   " [ ] "
随机数
逻辑值 检测
PEP   498   文字 字符串 插值
在 Python 中 ， 这样 的 结构 是 不 明确 的
配置 Python
当 把   " xml . etree . ElementTree "   序列化 为   XML   文件 时 属性 内部 的 空白 字符 现在 将 被 保留
Wave _ read 对象
核心 与 内置
管道 和 队列
（ 比 整数 更 复杂 的 附加 状态 信息 可以 通过 编组 / 选择 状态 信息 并 将 结果 字符串 的 字节 数据编码 为 整数 来 转换 为 一个整 数值
不 支持 动态 添加 抽象 方法 到 一个 类 ， 或 试图 在 方法 或类 被 创建 后 修改 其 抽象 状态 等 操作
如果   encoding   不 为   " None " ， 则 会 将 其 用作 打开 文件 的 编码 格式
在   3.2   版 更改 :   增加 了   "   X "   选项
返回 一个 将   MIME   类型 映射 到   mailcap   文件 条目 列表 的 字典
" partial "   对象 与   " function "   对象 的 类似之处 在于 它们 都 是 可 调用 、 可弱 引用 的 对象 并 可 拥有 属性
调用 一个 方法
" gettext "   多语种 国际化 服务
这些 函数 提供 了 对   Windows   平台 上 一些 有用 功能 的 访问
这些 基类 的 顺序 为 :
发布 你 的 扩展 模块
如果 合适 的   Python   内置 的 或者 其他 模块 中 的 函数 ， 你 就 一点 也 不 需要 定义新 的 函数 :
如果 你 必须 使用 它 ， 保持警惕 ！ 最小化 你 调用 的 库 的 数量
参数   lo   和   hi   可以 被 用于 确定 需要 考虑 的 子集 ； 默认 情况 下 整个 列表 都 会 被 使用
此 异常 是   " UnicodeError "   的 一个 子类
" asynchat "   异步   socket   指令 / 响应 处理器
冲出 栅栏 所 需要 的 线程 数量
数据 类 、 字典 、 列表 和 元组 被 递归
从此 记录器 中 删除 指定 的 过滤器   filter
最初 保存 该 成员 的 用户 的 用户   ID
API   与 特性 的 移除
另外   field _ names   可以 是 一个 纯 字符串 ， 用 空白 或 逗号 分 隔开 元素 名 ， 比如   " ' x   y ' "   或者   " ' x ,   y ' "
" shutil . copytree ( ) "   会 根据 其 所用 缓存 的   " os . stat ( ) "   值 使用   " os . scandir ( ) "   函数 及 所有 拷贝 函数
" ' g ' "   常规 格式
ZIP   档案 可以 容纳 子目录 结构 去 支持 包 的 导入 ， 并且 可以 将 归档文件 中 的 路径 指定 为 仅 从 子目录 导入
以上 等价 形式 假定   " __ debug __ "   和   " AssertionError "   指向 具有 指定 名称 的 内置 变量
" curses . panel "   模块 定义 了 以下 函数 :
创建 匿名 函数 （ 未 绑定 到 一个 名称 的 函数 ） 以便 立即 在 表达式 中 使用 也 是 可能 的
示例 :
这样 有 可能 在   path   之外 创建 文件 ， 例如 某些 成员 具有 以   " " / " "   开始 的 绝对路径 文件名 或 带有 两个 点 号   " " .. " "   的 文件名
获取   frame   的 代码
由于 它们 会 对 外层 作用域 造成 附带 影响 ， " yield "   表达式 不 被 允许 作为 用于 实现 推导 式 和 生成器 表达式 的 隐式 定义 作用域 的 一部分
参见 :
读写 文件
比如 一个 函数 申请 了 内存 以后 ， 做 了 些 计算 ， 然后 释放 内存 块
已弃 用 的   Python   模块 、 函数 和 方法
结构 体 和 联合
（   不是   gamma   函数 ！   ）   参数 的 条件 是   " alpha   >   0 "   和   " beta   >   0 "
对象 协议
一个 下划线 可 放在 数码 之间 ， 也 可 放在 基数 说明符 例如   " 0x "   之后
在 参数   blocking   被 设置 为   " False "   的 情况 下 调用 ， 将 不会 发生 阻塞
返回 一个 对应 于 以   " YYYY   MM   DD "   格式 给出 的   date _ string   的   " date "   对象 :
在 下 一 章节   ( " 词法 分析 " )   中 使用 的   BNF   全部都是 词法 定义 ； 在 之后 的 章节 中 使用 的 则 是 句法 定义
3.2   新版 功能 .
对象 被 作为 垃圾 回收 ，
返回 指向   obj   的 轻量 指针 ， 该 对象 必须 为 一个   ctypes   类型 的 实例
3.5   新版 功能 .
带 位域 的 结构 体 、 联合 应该 总是 通过 指针 传递 给 函数
此 方法 产生 的 输出 类似 于   traceback   模块 通过   " get _ stack ( ) "   所 获取 的 框架
正则表达式 通常 也 用于 以 各种 方式 修改 字符串 ， 使用 以下 模式 方法 ：
由于 数据 类 只 使用 普通 的   Python   类 创建 ， 因此 它们 也 会 共享 此 行为
PEP   338 :   将 模块 作为 脚本 执行
创建 类 的 新 实例 并 将 此 对象 分配 给 局部变量   " x "
关联 到   ZIP   文件 的   " bytes "   对象 形式 的 说明
" zipimport "   从   Zip   存档 中 导入 模块
如果 这个 方法 返回   " True "   那么   " Future "   不会 被 取消 并 已 将 它 变为 正在 运行 状态 ， 也就是说 调用   " Future . running ( ) "   时 将 返回   True
发布 日期 :   2015   03   28
PEP   324 :   新 的 子 进程 模块
如果   flag   为   " False " ， 光标 在 更新 后 将 总是 位于 “ 光标 位置 ”
库
模块 执行 是 加载 的 关键时刻 ， 在此期间 将 填充 模块 的 命名 空间
除了 各种 任务 的 第三方 包 之外 ， 可用 的 包 还 包括 与   Python   2   兼容 的   Python   3   标准 库中 的 新 模块 和 功能 的 后 端 移植 ， 以及 各种 工具 和 库 ， 这些 工具 和 库 可以 让 用户 更 容易 迁移 到   Python   3
从 队列 中 移除 并 返回 一个 项目
类似 于   " handle _ starttag ( ) " ,   只是 在 解析器 遇到   XHTML   样式 的 空 标记 时 被 调用 （   " < img   ...   / > " ）
从 非空 序列   seq   返回 一个 随机 元素
一个 只读 特征 属性 ， 表示 特定 正态分布 的 方差
参阅   Access   Rights   了解 其它 允许值
有 许多 模块 可 用于 访问 互联网 和 处理 互联网协议
参见 :
默认 交互式 解释器 的 替代品
如果 指定   " verify "   参数 ， 则 它 应当 是 一个 可 调用 对象 ， 该 对象 应当 验证 通过 套 接字 接收 的 字节 数据 是否 有效 且 应 被 处理
" d . timetuple ( ) "   等价 于 :
动态链接库 的 导出 函数 可以 通过 属性 或者 索引 的 方式 访问
其它 实用工具
调试模式 变量
没有 模块 状态 的 扩展 模块   ( " m _ size   <   0 " )   不会 受到 影响
在 Windows 上子 进程 不再 继承 所有 可 继承 的 父 进程 句柄
这 等价 于   Python   表达式   " o1   +   o2 "
（ 由   Victor   Stinner   在   bpo   39395   中 贡献 。 ）
实际上 用 文本编辑 器 的话 ， 你 要 准备 更 复杂 的 输入 方式 ； 所有 像样 的 文本编辑 器 都 有 自动 缩进 的 设置
新增 函数   " ast . get _ source _ segment ( ) "   返回 指定   AST   节点 的 源代码
运算符
用户 自定义 异常
它 还 意味着 网络 对象 可以 使用 像 这样 的 列表 成员 测试 语法 :
" ctypes "   中 的 结构 体 和 联合 使用 的 是 本地 字节 序
在   3.4   版 更改 :   支持 了   " with "   语句
将 在 整个   " PATH "   中 搜索 Python 解释器
永远 不要   unmarshal   来自 不 受 信任 的 或 未经 验证 的 来源 的 数据
[   脚注   ]
取决于 等式   " a   +   ( b   a )   random ( ) "   中 的 浮点 舍入 ， 终点   " b "   可以 包括 或 不 包括 在 该 范围 内
旧 的   " name "   取值 / 设值   API ； 建议 直接 当做 特征 属性 使用 它
" callback "   " process _ exited ( ) "   子 进程 退出 时 被 调用
正在 解析 的   JSON   文档
当   " import "   语句 被 执行 时 ， 标准 的 内置   " __ import __ ( ) "   函数 会 被 调用
相对 导入 使用 前缀 点 号
在 内存 中 压缩 和 解压缩 数据
该 实例 使用   capacity   指定 的 缓冲区 大小 （ 要 缓冲 的 记录 数量 ） 来 初始化
撤消   ( 或 连续 撤消 )   最近 的 一个   ( 或 多个 )   海龟 动作
对于 涉及 两个 文件系统 路径 的 函数   (   例如   " os . rename ( ) " ) ， " filename2 "   将 是 传给 函数 的 第二个 文件名
与
嵌入 Python
FileHandler   对象
将 终端 模式 恢复 到 最后 一次 调用   " savetty ( ) "   时 的 状态
version   . pyc "   ， 其中 名称 中 的 版本 字段 对 编译 文件 的 格式 进行 编码 ；   它 一般 使用 Python 版本号
" inspect . BoundArguments . arguments "   已 从   " OrderedDict "   改为 常规 字典
如果 未 被 陷阱 捕获 ， 则 不经 修改 地 返回 结果
这 将 在 一个 计时器 函数 中 嵌入 对 它们 的 调用 ， 然后 由   " timeit ( ) "   执行
在 单线程 环境 中 ， 最好 完全 不 使用 此 上下文
快而脏 的 模式 将 处理 常见 情况 ， 但   HTML   和   XML   有 特殊 情况 会 破坏 明显 的 正则表达式 ； 当 你 编写 正则表达式 处理 所有 可能 的 情况 时 ， 模式 将 非常复杂
该 模块 本身 的 源代码 是 使用   " mkstringprep . py "   工具 生成 的
" http . server "   HTTP   服务器
通常 使用 一个 字典 作为 最高 层级 对象
例如 :   " a [ start : stop : step ] "   或   " a [ start : stop ,   i ] "
这 将 使得 空行 每次 都 会 作为 键 之间 的 分隔
当 尝试 读取 响应 时 的 结果 是 未 从 连接 读取 到 数据 时 由   " HTTPConnection . getresponse ( ) "   引发 ， 表明 远端 已 关闭 连接
如果 你 以 字符 序列 的 形式 对行 进行 比较 ， 并且 不 希望 区分 空格符 或 硬 制表符
" TZPATH "   可以 只 包含 绝对路径 ， 绝不 包含 相对路径 ， 无论 它 是 如何 配置 的
使用 连接 作为 上下文 管理器
这 应当 在 任何 线程 启动 之前 完成 以 使得 调用   " getcontext ( ) "   的 线程 之间 不会 产生 竞争 条件
Python   3.0   之后 的 变化
当   flag   为   " False "   时 ， 将会 使用 在   terminfo   数据库 中 指定 的 行和列 的 值   ， 即使 设置 了 环境变量   " LINES "   和   " COLUMNS "   ( 默认 使用 ) ， 或者 如果   curses   是 在 窗口 中 运行 （ 在 此 情况 下 如果 未 设置   " LINES "   和   " COLUMNS "   则 默认 行为 将 是 使用 窗口 大小 ）
使用   " ABCMeta "   作为 元类 创建 的 类 含有 如下 方法 ：
3.6   新版 功能 :   " PyExc _ ModuleNotFoundError " .
定时器 对象
（ 请 注意 ， 第二个 示例 需要 在 localhost 上 运行 的 邮件 服务器 。 ）
请 用 以下 习惯 来 声明 类 方法 :
出错 时 返回   "   1 "   并 设置 一个   " TypeError "
测试
注解 :
部分 也 可能 处于   zip   文件 中 、 网络 上 ， 或者   Python   在 导入 期间 可以 搜索 的 其他 地方
" getpass "   便携式 密码 输入 工具
用   asyncio   开发
3.2   新版 功能 .
核心 与 内置
asynchronous   context   manager   是 一种   context   manager   ， 能够 在 其   enter   和   exit   方法 中 暂停 执行
向 右 循环 移动   n   步
如果 代码 块 中 定义 了 一个 局部变量 ， 则 其 作用域 包含 该 代码 块
Statistics   for   Hackers   Jake   Vanderplas   撰写 的 视频教程 ， 使用 一些 基本概念 进行 统计分析 ， 包括 模拟 、 抽样 、 改组 和 交叉 验证
使用 元组 作为 值 并用 自定义 的   " __ new __ ( ) "   以 一个   " int "   值来 替代 该 元组
另 一种 特殊 情况 ， 分派 始于 字符   " ' ! ' "   的 行到 方法   " do _ shell ( ) "   （ 如果 定义 了 这个 方法 ）
你 可以 通过 使用   " register _ unpack _ format ( ) "   注册 新 的 格式 或 为 任何 现有 格式 提供 你 自己 的 解包 器
便利 函数   " PyCapsule _ Import ( ) "   可以 方便 的 载入 通过 Capsule 提供 的 C   API ， 仅 在 Capsule 的 名字 匹配 时
可以 被 传递 给   stdin   ,   stdout   或   stderr   形参
函数 原型
本 节 深入 介绍 了   " contextvars "   模块 的 公用   C   API
不过 也 可能 会 返回   " NotImplemented " ， 如果 比较 目标 具有   " timetuple ( ) "   属性 的话
此 选项 绝不 应当 在 随 特定 包 提供 的 配置文件 中 设置
代表 线程 活动 的 方法
当 使用   " as "   将 目标 赋值 为 一个 异常 时 ， 它 将 在   except   子句 结束 时 被 清除
qualname   应当 是   unicode   对象 或   " NULL " ； 如果 是   " NULL "   则   " __ qualname __ "   属性 设 为 与其   " __ name __ "   属性 相同 的 值
生成 长度 为 十个 字符 的 字母 数字 密码 ， 其中 包含 至少 一个 小写字母 ， 至少 一个 大写字母 以及 至少 三个 数字 :
在   macOS   10.6 ,   10.7   和   10.8   上 ， 默认 的 事件 循环 使用   " selectors . KqueueSelector " ， 在 这些 版本 上 它 并 不 支持 字符 设备
" rgbimg "   模块 已 被 移除
默认值   0   表示 替换 所有
两个 数字 相除 并 返回 结果 的 整数 部分
模板 的 另 一个 应用 是 将 程序逻辑 与 多样 的 格式化 输出 细节 分离 开来
" tkinter . dnd "   拖放 操作 支持
比如   " pkgutil   i   python27 "
如果   mode   为   " ' r ' "   或   " ' a ' " ，   则 文件 应当 可 定位
特定 于   Windows   的 更改 ：
如果   obj   不是   " PyLongObject "   的 实例 ， 先 调用 它 的   " __ index __ ( ) "   或   " __ int __ ( ) "   方法 ( 如果 有 ) 将 其 转换 为   " PyLongObject "
提供 输入输出 高亮 和 错误信息 的   Python   命令行 窗口   （ 交互 解释器 ）
（ 由   Pablo   Galindo   在   bpo   39322   中 贡献 。 ）
Tab   选项
传入 构造函数 的 库 名称
表示 性 错误 是 指 某些 （ 其实 是 大多数 ） 十进制 小数 无法 以 二进制 （ 以   2   为 基数 的 计数 制 ） 精确 表示 这一 事实 造成 的 错误
Python   3.5 . 4   的 显著 变化
从 原始 文件 读取 的 字节 串 将 根据   file _ encoding   解码 ， 其 结果 将 使用   data _ encoding   进行 编码
最 简单 的 文本 编码 格式   ( 称为   " ' latin   1 ' "   或   " ' iso   8859   1 ' " )   将 码位   0   255   映射 为 字节 值   " 0x0 "   " 0xff " ， 这 意味着 包含   " U + 00FF "   以上 码位 的 字符串 对象 无法 使用 此 编解码器 进行 编码
" start ( ) "   和   " end ( ) "   返回 匹配 的 起始 和 结束 索引
在   3.6   版 更改 :   添加 了   module   参数
当   " Parser "   在 标头 之后 及 第一个 分界 字符串 之前 发现 一些 文本 时   ， 它会 将 这些 文本 赋值 给 消息 的   preamble   属性
在   3.4   版 更改 :   " spawn ( ) "   现在 会 从子 进程 的   " os . waitpid ( ) "   返回 状态值
包含 解释器 定义 的 所有 关键字 的 序列
" multiprocessing . shared _ memory "   可 从 进程 直接 访问 的 共享内存
在 其他 方面 它 都 类似 于   " abstractmethod ( ) "
构建 和   C   API   的 改变
" del "   语句
构建
想要 更好 地 格式化 ， 请参阅 格式化 字符串 字 面值 和 格式 字符串 语法 等 小节 ， 例如   " " { : 04d } " . format ( 144 ) "   生成   " ' 0144 ' "   而   " " { : . 3f } " . format ( 1.0 / 3.0 ) "   生成   " ' 0.333 ' "
使用   " loop . create _ connection ( ) "   实现   echo 客户端 .
结构化 数据类型
注意 从   Python   3.7   开始 ， 字典 的 遍历 顺序 一定 和 输入 顺序 一样
如果   C   字符串 指针 为   " NULL " ， 则 使用   " None "
在   3.5   版 更改 .
此 模块 还 提供 了 以下 来自   2 . x   " commands "   模块 的 旧版 函数
在   Unix   上 ， C   扩展 不会 再 被 链接 到   libpython ， 但   Android   和   Cygwin   例外
函数 对象
警告 :
在 完成 计算 之后 ， 将 为了 获得 信息 而 检测 旗标 （ 例如 确定 计算 是否 精确 ）
成功 时 返回   " 0 "
移植 到   Python   2.4
基础 协议
如果 内存 是 连续 的 ， 则   memoryview   对象 指向 原始 内存
同时 实现 这 两种 接口 的 对象 称为 导入 器   — —   它们 在 确定 能 加载 所 需 的 模块 时会 返回 其 自身
如果 名称 绑定 在 一个 代码 块 中 ， 则 为 该 代码 块 的 局部变量 ， 除非 声明 为   " nonlocal "   或   " global "
Linux   扩展 属性
绝大多数 的 信息 ， 其 默认 内容 类型 都 是   text / plain
为 重复 的   " . pyc "   文件 添加 了 使用 硬 软件 的 可能性 :   hardlink _ dupes   形参 以及   hardlink   dupes   命令行 选项
如果 实参 是 其他 任意 对象 ， 则 会 生成 该 对象 的 帮助 页
参数 取   " 1 "   到   " 9 "
（ 由   Scott   Sanderson   在   bpo   29235   中 贡献 。 ）
有关 二进制 数据 的 其他 操作 ， 特别 是 与 文件格式 和 网络协议 有关 的 操作 ， 将 在 相关 章节 中 介绍
源代码 :   Lib / io . py
移植 到   Python   3.0
每次 调用 该 函数 都 会 获取 一个 子项 的 名字
外观
bpo   29572 :   更新 Windows   构建 和 OS   X 安装程序 以 使用 OpenSSL   1.0 . 2k
使用 类似 的 例子 ， " ca + t "   将 匹配   " ' cat ' "   ( 1   个   " ' a ' " ) ， " ' caaat ' "   ( 3   个   " ' a ' " ) ， 但 不会 匹配   " ' ct ' "
3.5   新版 功能 .
" ' namereplace ' "   使用   " \ N { ... } "   转义序列 进行 替换 （ 仅 在 编码 时 ）
具有 两个 可 选 参数 ， 它们 都 必须 指定 为 关键字 参数
升级   optparse   代码   for   details   on   the   differences   from   " optparse " .
安全
移植 到   Python   3.0
使用   HTML   或   XML   解析器 模块 来 执行 此类 任务 。 ）
3.3   新版 功能 .
" pipes "   终端 管道 接口
3.8   新版 功能 :   strict _ timestamps   仅限 关键字 参数
3.2   新版 功能 .
用于 描述 代码 对象 的 对象 的   C   结构
在   GNU / Hurd   系统 中 不 使用 大 文件 支持
对于 Python ，   PEP   8   已经 成为 大多数 项目 所 遵循 的 风格 指南 ； 它 促进 了 一种 非常 易读 且 令人 赏心悦目 的 编码 风格
内置 常量
默认 唤醒 一个 等待 这个 条件 的 线程
3.2   新版 功能 .
请 注意   " getattr ( ) "   可 用于 任何 对象 ， 包括 类 、 类 实例 、 模块 等等
当 在 解码 过程 中 发生 与   Unicode   相关 的 错误 时 将 被 引发
" % u "   以 十进制 数 显示 的   ISO   8601   星期 中   1 ,   2 ,   ... ,   7   的 日 序号 ， 其中   1   表示 星期一
在   3.5   版 更改 :   引入 了 通过   " from   __ future __   import   generator _ stop "   来 实现   RuntimeError   转换 ， 参见   PEP   479
不过 ， 对于 上下文 变量 来说 ， 一个 执行 线程 中 可能 会 有 多个 上下文 ， 而 上下文 变量 的 主要用途 是 对 并发 异步 任务 中 变量 进行 追踪
C   称为 微 版本号   — —   它会 在 每次 发布 问题 修正 时 递增
如果 未 提供 任何 对象 ， 则 此 函数 会 反汇编 最后 一次 回溯
我们 称 这样 对象 为   iterable   ， 也就是说 ， 适合 作为 这样 的 目标 对象 ： 函数 和 结构 期望 从中 获取 连续 的 项 直到 所 提供 的 项 全部 耗尽
参数 :   title   字符串
交互式 输入
（ 由   Stefan   Behnel   在   bpo   36676   和   bpo   36673   中 贡献 。 ）
在   3.9   版 更改 :   添加 了   exit _ on _ error   形参
请参阅   Python   Wiki   中 的   GUI   编程 页面 查看 更 完整 的 列表 ， 以及 不同   GUI   工具集 对比 文档 的 链接
由于 该 算法 被 设计 用作 校验 和 算法 ， 因此 不 适合 用作 通用 散列 算法
测试
它 的 顺序 与   " getmembers ( ) "   所 返回 列表 的 顺序 一致
3.4   新版 功能 .
" asyncio . loop . shutdown _ default _ executor ( ) "   已 被 添加 到   " AbstractEventLoop " ， 这 意味着 继承 自它 的 替代 事件 循环 应当 定义 此 方法
标准   " run ( ) "   方法 调用 传递 给 对象 构造函数 的 可 调用 对象 作为 目标 参数 （ 如果 有 ） ， 分别 从   args   和   kwargs   参数 中 获取 顺序 和 关键字 参数
这个 类 可以 用于 模拟 嵌套 作用域 ， 并且 在 模版 化 的 时候 比较 有用
反过来说 ， 也 等价 于
归档 中 的 文件名称
其 返回值 将 被 绑定 到 函数 名称 而 非 函数 对象
设置   curses   库 在 将 制表符 添加 到 窗口 时 将 制表符 转换 为 空格 所 使用 的 列数
子 过程 可以 从 一个 地方 进入 ， 然后 从 另 一个 地方 退出 （ 从 函数 的 顶端 进入 ， 从   " return "   语句 退出 ）   ， 而 协程 可以 进入 ， 退出 ， 然后 在 很多 不同 的 地方 恢复 （ " yield "   语句 ）
如果 在 调用   " setcontext ( ) "   之前 调用 了   " getcontext ( ) " ， 则   " getcontext ( ) "   将 自动 创建 一个 新 的 上下文 在 当前 线程 中 使用
函数 式 编程 模块
显示 / 隐藏 行号 （ 仅   window   编辑器 ）   Open   a   column   to   the   left   of   the   edit   window   which   shows   the   number   of   each   line   of   text
一般来说 ， 原子 类 的 实例 不会 被 监控 ， 而 非 原子 类 （ 如 容器 、 用户 自定义 的 对象 ）   会 被 监控
在   Windows   中 ， 只有   " ' spawn ' "   是 可用 的
global   interpreter   lock   全局 解释器 锁   CPython   解释器 所 采用 的 一种 机制 ， 它 确保 同一 时刻 只有 一个 线程 在 执行   Python   bytecode
" acquire ( ) " / " release ( ) "   对 可以 嵌套 ； 只有 最终   " release ( ) "   ( 最 外面 一对 的   " release ( ) "   )   将 锁 解开 ， 才能 让 其他 线程 继续 处理   " acquire ( ) "   阻塞
低 层级   API
需要 在 文件 前部 声明 一个 静态 对象 变量 ， 如 :
分类 函数
Python 社区 接受 的 默认值 为 4 个 空格
注释 :
分析 和 跟踪
注解 :
（ 仅 支持   BSD ） 返回 一个 内核 事件 对象 ， 请参阅 下方   Kevent   对象 获取   kevent   对象 所 支持 的 方法
易于 调试 和 测试
使用   asyncio . gather ( )   并行 运行 .
编辑 菜单 （ 命令行 和 编辑器 ）
（ 由   Raymond   Hettinger   贡献 。 ）
" FeedParser "   会 增量 读取 并 解析 消息 ，   并且 只有 在 你 关闭 语法分析 程序 的 时候 才 会 返回 根 对象
" stringprep "   因特网 字符串 预备
" $ $ "   为 转义 符号 ； 它会 被 替换 为 单个 的   " $ "
它 通过 使用 线程 锁来 达成 这个 目标 ； 用 一个 锁来 序列化 对 模块 共享 数据 的 访问 ， 并且 每个 处理程序 也 会 创建 一个 锁来 序列化 对 其 下层   I / O   的 访问
相当于   " get ( False ) "
Unicode   对象 通过   " ' utf   8 ' "   编码 转化成   C   字符串
示例
" Tools / scripts / ndiff . py "   是 这个 函数 的 命令行 前端
" ctypes "   Python   的 外部 函数库
最新 的   Python   发布 版 源代码 总能 从   python . org   获取 ， 下载页 链接 为   https : / / www . python . org / downloads /
因此 ， 它 为   Python   所 特有 ， 不能 用于 与 其他 语言 编写 的 应用程序 通信
这个 表达方式 非常 直接 ， 但 同时 也 存在 一些 问题
A   称为 大 版本号   — —   它 仅 在 对 语言 特性 进行 非常 重大 改变 时才 会 递增
导入 路径 钩子 的 注册 是 通过 向   " sys . path _ hooks "   添加 新 的 可 调用 对象 ， 具体 如下 所述
字符串 格式化 句法 的 描述 参见   Python   库 参考 的   printf   风格 的 字符串 格式化 一节
比如 在 浏览器 上 提交 一个   HTML   表单
可选 的   " kwargs "   条目 ， 当 在   " logging "   包 命名 空间 的 上下文 中 执行   " eval ( ) "   时 将 是 传给 处理程序 的 构造 器 的 关键字 参数 字典
传入 参数 的 类型 错误   ( 例如 在 要求   " int "   时 却 传入 了   " list " )   应当 导致   " TypeError " ， 但 传入 参数 的 值 错误   ( 例如 传入 要求 范围 之外 的 数值 )   则 应当 导致   " ValueError "
在   3.8   版 更改 :   The   " tostring ( ) "   function   now   preserves   the   attribute   order   specified   by   the   user .
已弃 用 的 函数 和 变量
改变 此 对象 的 属性 将会 影响   " repr ( ) "   和   Python   调试器 所 使用 的 大小 限制
等价 于   Python   语句   " o1   |   o2 "
如果 对话框 被 取消 则 返回   " None "
运算符   " @ "   ( at )   的 目标 是 用于 矩阵 乘法
" wave "   读写 WAV 格式文件
注解 :
如果 提供 ， 则 键 参数   daemon   将 进程   " daemon "   标志 设置 为   " True "   或   " False "
可用性 :   Windows ,   FreeBSD ,   Linux ,   macOS ,   OpenBSD ,   NetBSD ,   AIX
工具 / 示例
从泛 型 类 继承 时 ， 某些 类型 变量 可能 是 固定 的 :
整数型 对象
多重 继承
这部分 稍后 解释
为 元素 分组
两个 映射   ( " dict "   的 实例 )   若 要 相等 ， 必须 当且 仅 当 它们 具有 相同 的   ( 键 ,   值 )   对
终止 脚本 的 最 直接 方法 是 使用   " sys . exit ( ) "
这仅 在   localtime   为   " False "   时 应用
如果 传入 了   default   section   名称   ， 则 会 引发   " ValueError "
请参阅   difflib   的 命令行 接口 获取 更 详细 的 示例
开发人员
在   3.1   版 更改 :   支持 多个 上下文 表达式
PEP   309 :   部分 功能 应用
你 也 可以 使用   " : memory : "   来 创建 一个 内存 中 的 数据库
" Final "   变量 、 函数 、 方法 和 类
3.6   新版 功能 .
如何 按 其他 列表 中 的 值 对 一个 列表 进行 排序 ？
安装 一个 计时器 ， 在   t   毫秒 后 调用   fun   函数
将 所有   " optparse . OptionParser . add _ option ( ) "   调用 替换 为   " ArgumentParser . add _ argument ( ) "   调用
如果 此 函数 引发 了 异常 ， 则 会 调用   " sys . excepthook ( ) "   来 处理 它
对于 属性 引用 类 目标 ， 针对 常规 赋值 的 关于 类 和 实例 属性 的 警告 也 同样 适用
虽然 支持 日期 和 时间 算法 ， 但 实现 的 重点 是 有效 的 成员 提取 以 进行 输出 格式化 和 操作
解包 并 返回 可变 长度 字符串
警告 :
补丁 作者   Arthur   Neufeld
函数 的 定义 看起来 可以 像是 这样 ：
注解 :
随着 锁定 执行 判断 式
在 这部 计算机科学 的 经典 教科书 中 ， 第二 和 第三章 讨论 了 使用 序列 和 流来 组织 程序 内部 的 数据 传递
以下 部分 将 引导 你 完成 这个 示例
还 定义 了 以下 异常 ：
除此之外 ，   内部 模块   " _ tkinter "   针对 Python 和 Tcl 之间 的 交互 ， 提供 了 一套 线程 安全 的 机制
解析 将 假定 该行 表示 消息 体 的 第一行 以 继续执行
" fast   copy "   意味着 拷贝 操作 发生 于 内核 中 ， 从而 避免 在 进行   " " outfd . write ( infd . read ( ) ) " "   等 操作 时 使用   Python   中 的 用户 空间 缓冲区
3.3   新版 功能 :   某些 操作系统 还 可 支持 其他 的 值 ， 例如   " os . SEEK _ HOLE "   或   " os . SEEK _ DATA "
" collections "   容器 数据类型
标准 库 作为 预先 编译 和 优化 的   " . pyc "   文件 包含 在   ZIP 中 ， 并 提供 了   " python3 . dll "   ，   " python37 . dll "   ，   " python . exe "   和   " pythonw . exe "   文件
注解 :
性能 优化
在 上述 方法 之外 ， " LoggerAdapter "   还 支持   " Logger "   的 下列 方法 :   " debug ( ) " ,   " info ( ) " ,   " warning ( ) " ,   " error ( ) " ,   " exception ( ) " ,   " critical ( ) " ,   " log ( ) " ,   " isEnabledFor ( ) " ,   " getEffectiveLevel ( ) " ,   " setLevel ( ) "   以及   " hasHandlers ( ) "
混合 解析
这 意味着 一个 Python 安装 可能 无法 满足 每个 应用程序 的 要求
如果 根 日志 记录器 已 配置 了 处理程序 则 此 函数 将 不 执行 任何 操作 ， 除非 关键字 参数   force   被 设为   " True "
这 表示 未 发布 版本 ， 直接 基于   CPython   开发 代码 仓库 构建
树形 模式   ~ ~ ~ ~ ~ ~ ~ ~
由   Georg   Sakkis   在   bpo   3135   中 贡献
为什么 ?
返回值 与   " lru _ cache ( maxsize   None ) "   相同 ， 创建 一个 查找 函数参数 的 字典 的 简单 包装 器
kwdict   形参 是 作为 第三个 参数 从   Python   运行 时 接收 的 关键字 字典
如果 对象   o   是 字节 对象 ， 但 不是 字节 类型 子 类型 的 实例 ， 则 返回   true
在   3.3   版 更改 :   从 工厂 函数 变为 类
如果 此 方法 未 被 覆盖 ， 则 重复 输入 的 最后 一个 非空 命令
form   的 有效值 为   ' NFC '   、   ' NFKC '   、   ' NFD '   和   ' NFKD '
如果   ptype   不 为   " NULL " ， 则 它 指向 的 值 将 被 设为   " Py _ DTST _ FINITE " ,   " Py _ DTST _ INFINITE "   或   " Py _ DTST _ NAN "   中 的 一个 ， 分别 表示   val   是 一个 有限 数字 、 无限 数字 或非 数字
构建
例如 ， " partial ( ) "   可用 来 创建 一个 行为 类似 于   " int ( ) "   函数 的 可 调用 对象 ， 其中   base   参数 默认 为 二 ：
以下 是 该 代码 的 运行 结果 ：
流式 的 编码 和 解码
构建 和   C   API   的 改变
Multiset 多 集合 方法 只 为 正值 的 使用 情况 设计
因此 在 上面 的 例子 中 ， 当 指定 了   " a "   命令 时 ， 将 只 存在   " foo "   和   " bar "   属性 ， 而 当 指定 了   " b "   命令 时 ， 则 只 存在   " foo "   和   " baz "   属性
该 模块 提供 了 用于 计算 数字   ( " Real "   valued )   数据 的 数理统计 量 的 函数
这 可能 导致 解释器 的 误导性 错误
交换 两个 最 顶层 的 堆栈 项
源代码 :   Lib / copy . py
返回   " value "   出现 的 次数
此 方法 接受 从 参数 文件 读取 的 字符串 形式 的 单个 参数   arg _ line
用于 创建 子 进程 的 指令
这些 策略 可以 通过 使用 使用 下文 所 描述 的 多种 钩子 来 加以 修改 和 扩展
在   3.7   版 更改 :   Raises   a   " ValueError "   if   size   is   " NULL "   and   the   " wchar _ t   "   string   contains   null   characters .
" option _ string "   参数 是 可选 的 ， 且 此参数 在 动作 关联 到 位置 参数 时 将 被 略去
刷新 并 关闭 此流
默认 情况 下会 递归 地 添加 目录
创建 一个 压缩器 对象 ， 此 对象 可 被 用来 执行 增量 压缩
返回 一个 元组   " ( address ,   length ) "   以 给出 用于 存放 数组 内容 的 缓冲区 元素 的 当前 内存地址 和 长度
这 包括 通过 使用 异常 来 阻止 任何 不 精确 操作 来 强制执行 精确 算术 的 选项
进程 参数
返回 数据 的 高 中位数
" SMTPHandler "   类 位于   " logging . handlers "   模块 ， 它 支持 将 日志 记录 消息 通过   SMTP   发送到 一个 电子邮件 地址
另 请参阅   PEP   420   了解 对 命名 空间 包 的 规格 描述
注解 :
包括 一些 更 高级 的 使用 生成器 作为 协程 的 示例
它 等价 于   " partial ( update _ wrapper ,   wrapped   wrapped ,   assigned   assigned ,   updated   updated ) "
核心 与 内置
在 Windows 上 编译 Python
如果 信息 对象 中 没有   Content   Type   头字段 ， 抛出   " HeaderParseError "   异常
在   " sys . argv "   以外
复数 对象
摘要 发布 重点
致谢
注释 :
推荐 使用 这个   " os "   模块 版本 而 不是 直接 访问   " posix "   模块
监控 文件 描述符
实例 创建 失败 时 获取 更 多 详细信息
参数 必须 不 为   " NULL " ， 并且 类型 不会 被 检查 :
当 执行 成功 时 ，   callback   会 被 用于 处理 执行 后 的 返回 结果 ， 否则 ， 调用   error _ callback
返回   o1   、   o2   相加 的 结果 ， 如果 失败 ， 返回   " NULL "
在 没有 显式 给出   value   的 值时 ， 默认 为 1
在 开发 定点数 应用 时 ， 更 方便 的 做法 是 定义 处理   " quantize ( ) "   步骤 的 函数 ：
FileHandler   对象
它 仅 在 当 安装 时 配置 了 支持   POSIX   termios   风格 的   tty   I / O   控制 的   Unix   版本 上 可用
物理 行
如果 创建 的 首个   logger   日志 级别 为   " logging . NOTSET "   并且 没有 默认   handler
文件名 由   filename   给出
类 对象
asynchronous   context   manager   异步 上下文 管理器 此种 对象 通过 定义   " __ aenter __ ( ) "   和   " __ aexit __ ( ) "   方法 来 对   " async   with "   语句 中 的 环境 进行 控制
基本   " Codec "   类 定义 了 这些 方法 ， 同时 还 定义 了 无 状态 编码器 和 解码器 的 函数 接口 ：
数据 不 完整 引发 的 异常
参见 :
当 标准 库 提供 用于 执行 某些 操作 的 原语 时 ， 可能 （ 尽管 不能 保证 ） 比 您 可能 提出 的 任何 替代 方案 更 快
注解 :
第二个 参数设置 延迟 值   ( 参见   " delay ( ) " )
作为 副作用 ， 其 尝试 加载   " encodings "   包 ， 如果 尚未 完成 ， 请 确保 它 始终 位于 搜索 函数 列表 的 第一位
默认值 为   " KEY _ WRITE "
这种 序列 必须 以 严格 的 序列 顺序 来 读写 ； 随机 读写 和   " readline ( ) "   不 可以 被 混用
在 这种 情况 下 ， 会 使用   Unix   域套 接字 将 消息 发送到   syslog
它会 返回 以下内容 的 过滤 版本
事件 循环 方法 小节 列出 了 可以 从 管道 读取 并 监视 文件 描述符 而 不会 阻塞 事件 循环 的   API
检测 缓冲区 是否 已满 或是 有 记录 为   flushLevel   或 更 高级别
类型 ， 函数 和 其他 对象 的 自定义 归约
注解 :
将 所有 项 （ 作为 机器 值 ） 写入 到   file   object   f
此 模块 实现 ANSI 代码 页 （ CP _ ACP ）
不 存在 带有   " NULL "   检测 的 变体
来自 其他 小节 的 值 也 可以 被 获取 :
从   C   " Py _ ssize _ t "   类型 返回 一个 新 的   " PyLongObject "   对象 ， 如果 失败 则 返回   " NULL "
当然 最 常见 的 用例 就是 简单 地 启动 执行 一个 脚本 :
注解 :
以下 示例 记录 了 一些 主机名 和 对应 的 标题 ， 随后 将 数据库 的 内容 打印 出来
文本处理 服务
3.8   新版 功能 :   等 号   " '   ' "
( Or ,   you   can   use   the   "   no   defaults "   option   to   disable   the   standard   set   entirely . )   There   are   several   other   commands   available   in   the   manifest   template   mini   language ;   see   section   创建 源码 发行 包 :   sdist   命令 .
如 未指定 参数 ， 则 返回 当前 的   pensize
如果   path   为空 ， 则   head   和   tail   均 为 空
要 使用 备用 活动 ， 请 使用   " setcontext ( ) "   函数
某些   data   可以 在 内部 被 缓冲 ， 以便 用于 后续 的   " decompress ( ) "   调用
模式   初始 海龟 朝向   正数 角度   " standard "   朝右   ( 东 )   逆时针   " logo "   朝上   ( 北 )   顺时针
iterable   可以 为   " NULL "   表示 创建 一个 新 的 空集合
ls   是 一个 即使 在 运行 的 时候 没有 提供 任何 选项 ， 也 非常 有用 的 命令
" "   Infinity " "   ， 指示 运算 数为 负 无穷大
模块 名称 应为 绝对 有效 的   Python   模块 名称 ， 但 具体 实现 可能 并 不 总是 强制 要求 这 一点 （ 例如 它 可能 允许 你 使用 包含 连 字符 的 名称 ）
注意 ， 这个   callable   可 调用 对象 会 把 它 的 参数 作为   Python   字节 串 ，   通常 会以   UTF   8   编码 格式 对 它 进行 编码
列表 数据类型 还有 很多 的 方法
注解 :
类型 提示 属于 可选项 ， Python   不 要求 提供 ， 但 其 可 对 静态 类型 分析 工具 起 作用 ， 并 可 协助   IDE   实现 代码 补全 与 重构
对 软件包 来说 ， 通过 加入   " __ main __. py "   模块 可以 达到 同样 的 效果 ， 当 使用   "   m "   运行 模块 时 ， 其中 的 代码 会 被 执行
" turtle "   模块 是 基于   Python   标准 发行版   2.5   以来 的 同名 模块 重新 编写 并 进行 了 功能 扩展
我们 可以 创建 一个 输出 任意 范围 内   Fibonacci   数列 的 函数 :
" argparse "   命令行 选项 、 参数 和子 命令 解析器
字符串 的   format ( )   方法
当然 ， 如果 不 支持 继承 ， 语言 特性 就 不 值得 称为 “ 类 ”
确保   nframes   是 正确 的 ， 并 在 文件 被   " wave "   打开 时 关闭 它
3.2   新版 功能 .
运算符   " & "   对 两个 参数 进行 按位   AND   ( 与 )   运算 ， 两个 参数 必须 为 整数
注意 ： 在   C   的 某个 方法 内部 ， 像   " self . count   42 "   这样 的 赋值 将 在   " self "   自身 的 字典 中 新建 一个 名为   " count "   的 不 相关 实例
注解 :
在   3.7   版 更改 :   x   现在 只能 作为 位置 参数
这个   win32   " GetWindowRect "   函数 通过 将 指定 窗口 的 维度 拷贝 至 调用者 必须 提供 的   " RECT "   结构 体来 提取 这些 值
例如 ， " \ b "   是 一个 断言 ， 指明 当前 位置 位于 字 边界 ； 这个 位置 根本 不会 被   " \ b "   改变
除非 设置 了   " PYTHONDONTWRITEBYTECODE "   环境变量 ， 否则 当 你 导入 模块 并且   Python   具有 创建   " __ pycache __ "   子目录 并 将 已 编译 模块 写入 该 子目录 的 能力 （   权限 、 存储空间 等等 ） 时 就 会 自动 创建   . pyc   文件
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
汉语 （ 台湾 ） :   big5 ,   cp950
在   Windows   下 ， 如果   winerror   构造 器 参数 是 一个 整数 ， 则   " errno "   属性 会 根据   Windows   错误码 来 确定 ， 而   errno   参数 会 被 忽略
（ 由   Steve   Dower   在   bpo   36085   中 贡献 。 ）
此 错误 的 原因
在   3.3   版 更改 :   source _ address   parameter   was   added .
以于 更 复杂 的 输入 解析 ， 正则表达式 会 比   C   的   " sscanf ( ) "   更 强大 ， 也 更 适合 此类 任务
使用 它们 的 抽象 表示 而 不是 它们 的 数值 来 比较 两个 操作数
（   由   Diego   Rojas   和   Raymond   Hettinger   在   bpo   34160   中 贡献 。 ）
" UnboundLocalError "   为   " NameError "   的 一个 子类
Python   3.6 . 5   中 的 重要 变化
一旦 被 唤醒 ， Condition   会 重新 获取 它 的 锁 并且 此 方法 将 返回   " True "
新增 ： 现在 可以 将 不是   ctypes   类型 的 条目 放入   argtypes ， 但 每个 条目 都 必须 具有   " from _ param ( ) "   方法 用于 返回 可 作为 参数 的 值 （ 整数 、 字符串 、 ctypes   实例 ）
当 将要 执行 替换 的 源 文本 不 符合要求 的 语法 时 引发 的 异常
" KQ _ FILTER _ NETDEV "   筛选 器 标志 （ 在   Mac   OS   X   上 不可 用 ） ：
在   3.5   版 更改 :   现在 接受 可写 的 字节 类 对象
当未 显式 给出 对齐 方式 时 ， 在   width   字段 前加 一个零   ( " ' 0 ' " )   字段 将 为 数字 类型 启用 感知 正负号 的 零 填充
PEP   3110 :   异常 处理 的 变更
在   3.2   版 更改 :   忽略   name   属性
新增 模块
此 协议 由 两个 概念性 模块 构成 ， 即 查找 器 和 加载 器
" fractions "   分数
添加 了   DTrace   和   SystemTap   探测 支持
编写 测试 套件 非常 有用 ， 并且 你 可能 希望 将 你 的 代码 设计 为 易于 测试
模块 内容
当 创建   " Process "   对象 时 ， 它 将 继承 其父 进程 的 身份验证 密钥 ， 尽管 可以 通过 将   " authkey "   设置 为 另 一个 字节 字符串 来 更改
在   3.3   版 更改 :   Updated   to   be   based   directly   on   " importlib "   rather   than   relying   on   the   package   internal   PEP   302   import   emulation .
在   3.2   版 更改 :   新 的   timeout   形参
使用 自定义 计时器
海龟 状态
对   x   与   y   进行 数值 比较
尽管 这样 ， 默认 情况 下 ， 此 模块 接受 并且 输出   " Infinity "   ，   "   Infinity " ， 和   " NaN "   好像 它们 是 有效 的   JSON 数字 字 面值
省略值
在 类 体内 定义 的 属性 的 顺序 保存 在 新类 的   " __ dict __ "   中
b   可以 是 一个 字典 ， 或 任何 支持   " PyMapping _ Keys ( ) "   和   " PyObject _ GetItem ( ) "   的 对象
要 停止 该 服务器 ， 请 调用   " stopListening ( ) "
可用性 :   Windows
特别 地 ， 此 函数 支持 以下 格式 的 字符串 ：
IP 主机 地址
用法 示例
新 的 语法 特性 ：
但是 在   Fortran   连续 数组 中则 是 用 第一个 索引 最快
在 这种 情况 下 ， 新 容器 的 元素 产生 方式 是 将 每个   " for "   或   " if "   子句 视为 一个 代码 块 ， 按 从 左 至 右 的 顺序 嵌套 ， 然后 每次 到达 最 内层 代码 块 时 就 对 表达式 进行 求值 以 产生 一个 元素
timeout   可以 用来 控制 返回 前 最大 的 等待 秒数
" faulthandler "   模块 的 功能
" email " :   示例
例如 :
由于 字段 是 按 插入 顺序排列 的 ， 因此 派生类 会 重载 基类
将 带有 属性   attr   的 字符串   str   绘制 到   " ( y ,   x ) " ， 覆盖 之前 在 屏幕 上 的 任何 内容
如需 快速 随机 访问 ， 请 改用 列表
虽然 列表 和 元组 在 许多 方面 是 相似 的 ， 但 它们 的 使用 方式 通常 是 完全 不同 的
随机 哈希   ~ ~ ~ ~ ~ ~ ~ ~
如 下面 的 模块   constants   所 描述 ， 这些 是 可用 的 大小 取值
（ 由   Dong   hee   Na   在   bpo   39434   中 贡献 。 ）
在   Unix   上 ， " os "   模块 提供 了   " posix "   接口 的 一个 超集
3.6   新版 功能 .
调用 一个 可 调用 对象 并 传入 位置 参数 （ 如果 有 的话 ） 和 关键字 参数
[ 1 ]   一个 帧 是否 会 被 认为 源自 特定 模块 是 由 帧 全局变量   " __ name __ "   来 决定 的
序列 和 其它 类型 的 比较
bpo   28791 :   更新   Windows   构建 以 使用   SQLite   3.21 . 0 .
" \ Z "   只 匹配 字符串 尾
重写 基础 Tk 控件 , 导入 应 跟随 Tk 导入 :
字典
可用性 :   Unix ,   Windows
（ 由   Roger   Aiudi   在   bpo   34775   中 贡献 。 ）
可能 的 启动 方法 有   " ' fork ' "   ，   " ' spawn ' "   和 ` ` ' forkserver ' ` `
3.9   新版 功能 .
带有 方法 的   " Enum "   类
文件 对象 的 方法
假设 上面 的   Python   代码 保存 在 名为   " prog . py "   的 文件 中 ， 它 可以 在 命令行 运行 并 提供 有用 的 帮助 消息 ：
返回 父 进程   " Process "   对象 ， 和 父 进程 调用   " current _ process ( ) "   返回 的 对象 一样
可以 用于 所 需 资源 不可 用 的 情况 下 跳 过 接下来 的 测试
导出 （ 全局变量 ， 函数 和 不 需要 导入 基类 的 类 ）
虽然 此 函数 通常 返回 非 递减 值 ， 但 如果 在 两次 调用 之间 设置 了 系统 时钟   ， 则 它 可以 返回 比 先前 调用 更 低 的 值
在   3.2   版 更改 :   添加 了   allow _ no _ value   ,   delimiters   ,   comment _ prefixes   ,   strict   ,   empty _ lines _ in _ values   ,   default _ section   以及   interpolation
3.7   新版 功能 .
将   " unicode "   重命名 为   " str "
对于 整数 类型 ， 当 使用 二进制 、 八进制 或 十六进制 输出 时 ， 此 选项 会为 输出 值 添加 相应 的   " ' 0b ' " ,   " ' 0o ' "   或   " ' 0x ' "   前缀
在 无 延迟 模式 下 ， 如果 没有 输入 则 引发 一个 异常
不 支持 的 操作系统
在   3.2   版 更改 :   " randrange ( ) "   在 生成 均匀分布 的 值 方面 更为 复杂
包
由于   " Message . add _ payload ( ) "   已 被 弃用 ， 此 异常 实际上 极少 会 被 引发
取值 范围 是   " range ( 24 ) "
这里 有 三种 形式 ， 可以 组合 使用
Python   C   API   存在 两个 问题 ， 如果 你 使用 除   MSVC   之外 的 编译器 用于 构建   python . dll   ， 这 将 会 变得 明显
另存为 副本 ...   保存 当前 窗口 至 另 一个 文件 ， 而 不 修改 当前 对应 文件
rmtree   示例
注解 :
具有 外部 数据 缓冲区 的   pickle   协议   5
支持 所有 常用 字典 方法
PEP   436   The   Argument   Clinic   DSL   PEP   由   Larry   Hastings   撰写 并 实现
将 已弃 用 的   " unittest "   方法 替换 为 正确 的
在 这种 情况 下 ， 在 相应 的 特定 于 平台 的 代码 中 导入 正确 的 模块 是 一个 很 好 的 选择
其他 对象
TarInfo   对象
数据
具有 高 可移植性 的   uname   接口
一个   " PyDLL "   的 实例 ， 它 将   Python   C   API   函数 作为 属性 公开
安装 Python 模块 （ 旧版 ）
如果 还 没有 任何 键 被 按 下此 调用 将会 阻塞 ， 但 它 将 不会 等待   " Enter "   被 按 下
" UTF   32 "   避免 了 这个 问题 ： 字节 的 排列 将 总是 使用 自然 顺序
如果 带有   function   参数 ， 则 在 该 函数 的 第一条 可 执行 语句 处 设置 一个 断点
有些 算法 已知 存在 哈希 碰撞 弱点 ， 请 参考 最后 的 “ 另 请参阅 ” 段
为 所有 日志 记录器 提供 重载 的 级别   level   ， 其 优先级 高于 日志 记录器 自己 的 级别
内置 函数   " open ( ) "   使用   Python   打开 文件 进行 读写 的 标准 方法
动画 控制   " delay ( ) "   延迟   " tracer ( ) "   追踪   " update ( ) "   更新
它们 在 语法 上 限于 单个 表达式
Unicode   字符 最 不 重要 的 一个 位 就是 最 右侧 的 二进制位   x
" findall ( ) "   必须 先 创建 整个 列表 才能 返回 结果
否则 使用 指定 元素 设置 变形 矩阵 改变 海龟 形状 ， 矩阵 第一排 的 值 为   t11 ,   t12 ， 第二排 的 值 为   t21 ,   t22
参见 :   PEP   3118   修改 缓冲区 协议
虚拟 事件
由于   " copytree ( ) "   是 递归 地被 调用 的 ，   ignore   可 调用 对象 对于 每个 被 拷贝 目录 都 将 被 调用 一次
测试用例
顺便 提 一下 ， 这种 语言 的 名字 （ Python 意为 “ 蟒蛇 ” ） 来自 于 BBC 节目 “ Monty   Python 的 飞行 马戏团 ” ， 而 与 爬行动物 没有 关系
需要 在   main   模块 的   " if   __ name __   ' __ main __ ' "   该行 之后 马上 调用 该 函数
还要 注意 你 不能 在 创建 类 之后 改变 此 分隔符   （ 例如 在 子类 的 类 命名 空间 中 必须 设置 不同 的 分隔符 ）
此 格式 还 指定 了 毫秒 ， 并 使用 逗号 分隔符 将 其 附加 到 结果 当中
返回   [ 0.0 ,   1.0 )   范围 内 的 下 一个 随机 浮点数
（ 由   Charles   Wohlganger   和   Terry   Jan   Reedy   在   bpo   27099   中 实现 。 ）
举例来说 ， 如果 你 的   " tp _ traverse "   函数 包括 以下内容 :
[ 1 ]   此 模块 的 名称 来源于   Modula   3   ( 及其 他 语言 )   的 设计者 所 使用 的 术语 ， 他们 使用 术语   " marshal "   来 表示 以自 包含 的 形式 传输数据
3 )   改用 速度 较慢 但是 线程 安全 的   " normalvariate ( ) "   函数
如果 您 使用   SWIG   阴影 类 ， 则   init   函数 将 被 称为   initleoc ( )
3.7   新版 功能 .
这 相当于   Python   表达式   " len ( o ) "
在   3.7   版 更改 :   The   " sentinel "   attributes   now   preserve   their   identity   when   they   are   " copied "   or   " pickled " .
调试模式 变量
此 选项 默认 被 禁用
OutputChecker   对象
解压缩   data   ( 一个   " bytes "   对象 ) ， 返回 包含 解压缩 数据 的   " bytes "   对象
Binary   对象
" TYPEDESC "   结构 体 描述 了 一个   COM   数据类型 ， " vt "   字 段 指明 哪个 联合 字段 是 有效 的
对应 于   " errno "   " EINTR "
简单 示例
将 归档 中 的 所有 成员 提取 到 当前工作 目录 或   path   目录
这里 不 支持 从 列表 末尾 进行 索引
我们 甚至 改变 了 选项 的 名字 来 符合 这一 思路
停止 子 进程
创建 一个 解析器
核心 与 内置
3.7   新版 功能 :   嵌套 定义 的 描述 器
请 注意 传递 给   " exec ( ) "   或   " eval ( ) "   的 代码 不会 将 发起 调用 类 的 类名 视作 当前 类 ； 这 类似 于   " global "   语句 的 效果 ， 因此 这种 效果 仅限于 同时 经过 字节 码 编译 的 代码
函数   callable   args   kwargs   " PyObject _ Call ( ) "   " PyObject   "   tuple   dict / " NULL "   " PyObject _ CallNoArgs ( ) "   " PyObject   "   " PyObject _ CallOneArg ( ) "   " PyObject   "   1 个 对象   " PyObject _ CallObject ( ) "   " PyObject   "   元组 / " NULL "   " PyObject _ CallFunction ( ) "   " PyObject   "   format   " PyObject _ CallMethod ( ) "   对象   " char   "   format   " PyObject _ CallFunctionObjArgs ( ) "   " PyObject   "   可变 参数   " PyObject _ CallMethodObjArgs ( ) "   对象   名称   可变 参数   " PyObject _ CallMethodNoArgs ( ) "   对象   名称   " PyObject _ CallMethodOneArg ( ) "   对象   名称   1 个 对象   " PyObject _ Vectorcall ( ) "   " PyObject   "   vectorcall   vectorcall   " PyObject _ VectorcallDict ( ) "   " PyObject   "   vectorcall   dict / " NULL "   " PyObject _ VectorcallMethod ( ) "   参数   名称   vectorcall   vectorcall
参见 :
3.3   版后 已 移除 :   3.11 " Py _ UNICODE "   is   deprecated   since   Python   3.3
因此 ， 该 架构 需要 能 表示 对象 之间 的 连接
对应 的   " os "   模块 的 工具
如果 名称 绑定 在 模块 层级 ， 则 为 全局变量
我们 随时欢迎 新 的 志愿者   ！
但是 ， 当 你 真正 尝试 时 ， 你 会 看到 它们 都 返回   " 16 "
存在 两种 基于 哈希 的   " . pyc "   文件 ： 检查 型 和 非 检查 型
将   " debug   True "   传递 给   " asyncio . run ( ) "
此 异常 是   " NameError "   的 一个 子类
这 允许 实现 自定义   " __ getattr __ ( ) "   或   " __ getattribute __ ( ) "   函数 的 对象 能够 自定义   " dir ( ) "   来 报告 它们 的 属性
现有 系统 定义 名称 相关 的 讨论 请 参见 特殊 方法 名称 等 章节
如果 对象 是 模块 对象 ， 则 列表 包含 模块 的 属性 名称
如果 在 转换 期间 发生 任何 其他 错误 （ 比如 一个 内存不足 的 错误 ） ， 设置 适当 的   Python   异常 并且 返回   "   1.0 "
为此 ，   " ET "   有 两个 类 ：   " ElementTree "   将 整个 XML 文档 表示 为 一个 树 ，   " Element "   表示 该树 中 的 单个 节点
请 注意 局部 赋值 （ 这是 默认 状态 ） 不会 改变   scope _ test   对   spam   的 绑定
进程 监视器
如果 格式化 字符串 包含   " ' ( asctime ) ' " ， 则 调用   " formatTime ( ) "   来 格式化 事件 时间
请 一定 要 注意 在 读写 此类 文件 时应 使用 二进制 模式
因为 这种 操作 可能 很 耗费 资源 （ 例如 搜索 会 有   stat ( )   调用 的 开销 ） ， 基于 路径 的 查找 器会 维持 一个 缓存 来 将 路径 条目 映射 到 路径 条目 查找 器
" NotImplementedError "   和   " NotImplemented "   不可 互换 ， 即使 它们 有 相似 的 名称 和 用途
通用 操作系统 服务
以下 协程 示例 运行   5   秒 ， 每秒 显示 一次 当前 日期 :
累积 时间 统计 可 用于 识别 算法 选择 上 的 高级别 错误
用   " list "   包装   " map ( ) "
流
发布 日期 :   2015   08   09
（ 由 Georg   Brandl 在   bpo   5675   中 贡献 ）
探索性 测试
在   3.6   版 更改 :   Use   " Py _ FileSystemDefaultEncodeErrors "   error   handler .
" PyType _ HasFeature ( ) "   现在 总是 会 调用   " PyType _ GetFlags ( ) "
应当 提供   " XXX . YYY . ZZZ "   作为 可用 表达式 ， 但   . moduleY   不是 一个 有效 的 表达式
这是 使用 以下 约定 完成 的
参见 :
Literal   类型 指明 一个 形参 或 返回值 被 限定 为 一个 或 多个 特定 的 字 面值 :
私有 名称 会 在 为 其 生成 代码 之前 被 转换 为 一种 更长 的 形式
被 命名 为 超类 但 无法 被   " readmodule _ ex ( ) "   发现 的 类会 作为 类名 字符串 而 非   " Class "   对象 列出
所有 其他 可选 或 关键字 参数 都 传递 给 底层 的   " reader "   实例
注解 :
在   " close ( ) "   方法 被 调用 时 将 会 丢弃 缓冲区
在 撰写 本 文档 时 已经 有 了 德语 和 意大利语 版 的 文档 字符串 字典
改变   ' 8.6 '   以 匹配 所 安装 的   Tcl / Tk   版本
在   3.2   版 更改 :   The   method   " assertRegexpMatches ( ) "   has   been   renamed   to   " assertRegex ( ) " .
如何 创建   . pyc   文件 ？
此 页面 仅 包含 参考 信息
一旦   " close ( ) "   成功 返回 ，   " Process "   对象 的 大多数 其他 方法 和 属性 将 引发   " ValueError "
对于 子类 ， 也 是 一样 的
在 Windows 上 ， 运行 :
它 主要 针对 那些 不 熟悉   IP   网络 术语 的 用户 ， 但 也 可能 对 想要 速览   " ipaddress "   如何 代表 IP 网络 寻址 概念 的 网络 工程师 有用
创建 RPM 软件包
查找 器 并 不 真正 加载 模块
如果 字符串 的 初始段 不是 浮点数 的 有效 的 表达方式 ， 将   "   endptr "   设置 为 指向 字符串 的 开头 ， 引发   ValueError   异常 ， 并且 返回   "   1.0 "
如果 指定 的 启动 方法 不 存在 ， 将 抛出   " ValueError "   异常
运算符
这种 方法 的 主要 缺点 是 ， 文件   " spammodule . h "   过于 复杂
设置 当前 文件 指针 位置
它 也 可以 指定 超时 时间
枚举 名 等于 常量 名   ( 例如   " http . HTTPStatus . OK "   也 可以 是   " http . client . OK " )
3.4   新版 功能 .
在   3.6   版 更改 :   此 变量 现在 也 可以 被 用于 在 发布 模式 下 编译 的   Python
发生 了 舍入 ， 但 或许 并 没有 信息 丢失
3.6   版后 已 移除 :   This   Tk   extension   is   unmaintained   and   should   not   be   used   in   new   code
还有 一个 替代 的 、 功能 更 强大 的 编码器 和 解码器 接口 ， 详细信息 请 参见 源代码
扩展 接口 使用 了   " bdb "   和   " cmd "   模块
我们 引入 了 另 一种 动作   " count " ， 来数 某 一个 可 选 参数 出现 了 几次 ：
成功 时 返回   " 0 " ， 将   buffer   设 为 内存地址 并 将   buffer _ len   设 为 缓冲区 长度
解析 XML
附录
之后 可能 带有 一个 以叹 号   " ' ! ' "   标示 的 转换 字 段
默认 实现 会 调用 处理程序 的   ' rotator '   属性 ， 如果 它 是 可 调用 对象 的话   ， 并 传给 它   source   和   dest   参数
嵌套 的 对象 会 被 输入 到 它们 的 上级 子目录 中
在   3.6   版 更改 :   s   现在 可以 为   " bytes "   或   " bytearray "   类型
异步 生成器 迭代 器 方法   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
这种 信息 是从   Python   源代码 中 直接 提取 而 非 通过 导入 模块 ， 因此 该 模块 可以 安全 地 用于 不 受 信任 的 代码
args   要 合并 到   msg   参数 以 获得 事件 描述 的 可变 数据
相反 ， 当 阅读 x . len ( ) 时   ， 必须 已经 知道 x 是 某种 实现 接口 的 容器 ， 或者 是从 具有 标准 len ( ) 的 类 继承 的 容器
使用   " ZoneInfo "
但是 在 此 间隔 上 有 许多 其他 可 表示 浮点数 是 不 可能 的 选择
更 多 元字符
在   3.2   版 更改 :   group _ pattern   was   added .
如果   future   对象 已经 完成 或 已 取消 ，   fn   会 被 立即 调用
所有   " tarfile "   异常 的 基类
如果 是 管理器 进程 本身 抛出 的 一些 其他 异常 ， 则 会 被   " _ callmethod ( ) "   转换 为   " RemoteError "   异常 重新 抛出
一个 路径 配置文件 是 具有   "   name   . pth "   命名 格式 的 文件 ， 并且 存在 上面 提到 的 四个 目录 之一 中 ； 它 的 内容 是 要 添加 到   " sys . path "   中 的 额外 项目 （ 每行 一个 ）
3.7   新版 功能 :   " pdb . py "   现在 接受   "   m "   选项 ， 该 选项 用于 执行 一个 模块 ， 类似 于   " python3   m "
这 将 导致   C   分配器 和   Python   内存 管理器 之间 的 混用 ， 引发 严重后果 ， 这是 由于 它们 实现 了 不同 的 算法 ， 并 在 不同 的 堆 上 操作
思考 这个 例子 ， 不 使用 数据 类 :
测试
在   3.1   版 更改 :   当 使用   OpenSSL   提供 的 哈希 算法 在 大于   2047   字节 的 数据 上 执行 哈希 更新 时   Python   GIL   会 被 释放 以 允许 其他 线程 运行
GIL   参见   global   interpreter   lock
DST 是 夏令时 ， 在 一年 中 的 一部分 时间 （ 通常 ） 调整 时区 一 小时
库
使 对象 类型 支持 循环 垃圾 回收
常用 参数
受 支持 的   tar   格式
请 注意   ， 由于 每个 驱动器 都 有 一个 “ 当前目录 ” ， 所以   " os . path . join ( " c : " ,   " foo " ) "   表示 驱动器   " C : "   上 当前目录 的 相对路径   ( " c : foo " ) ， 而 不是   " c : \ foo "
" xmlrpc "   是 一个 集合 了   XML   RPC   服务端 与 客户端 实现 模块 的 包
默认 情况 下 ， " '   ' "   会 导致 表达式 的   " repr ( ) "   被 使用 ， 除非 专门 指定 了 格式
步骤   匹配   解释   1   " a "   正则 中 的   " a "   匹配
如果 仅 在 某个 函数 中 使用 模块 ， 您 还 可能 希望 将 导入 移到 该 函数 中
核心 与 内置
注解 :
例如   " for   option   in   parser [ " section " ] "   只会 产生   " optionxform "   形式 的 选项 键 名称
key   是 一个 计算 元素 键值 函数
实际上 ， 在 导入 搜索 期间 可能 找到 多个   " parent "   目录 ， 每个 都 由 不同 的 部分 所 提供
( 实际上 在   Python   2.6   中 这些 方法 就 已经 只是 从 对应 的   " TurtleScreen " / " Screen "   类 的 方法 复制 而 来 。 )
下面 是 一些 相同 类型 序列 之间 比较 的 例子 :
可以 将 Python 编译 为 机器 代码 ， C 或 其他 语言 吗 ？
如果 是 仅限 位置 的 形参 ， 则 其 位置 是 重要 的 ， 并且 该 形参 不能 作为 关键字 传入
唤醒 所有 正在 等待 这个 条件 的 线程
stream   必须 为 一个 文件 类 对象
3.4   新版 功能 .
如果 需要 清楚 表达 具体 含义 ， 请 使用 全称 以 避免 歧义
PEP   530 :   异步 推导
在 失败 时 设置 一个 异常 并 返回   " NULL "
传入   " None "   作为   isjunk   的 值 就 相当于 传入   " lambda   x :   False " ； 也就是说 不 忽略 任何 值
ProxyDigestAuthHandler   对象
在   " sizeof ( long   double )   sizeof ( double ) "   的 平台 上 它 是   " c _ double "   的 一个 别名
（ 由   Serhiy   Storchaka   在   bpo   29209   中 贡献 。 ）
如果 目录 是 一个包 目录 ， 则 所有 的   "   . pyc "   会 被 添加 到 包名 所 表示 的 文件 路径 下 ， 并且 如果 有 任何 子目录 为 包 目录 ， 则 会 以排 好 的 顺序 递归 地 添加 这些 目录
参见 :
相应 的 运行 时 语义 取决于   future   语句 所 启用 的 指定 特性
由   PEP   492   引入
3.7   新版 功能 .
走向 编程 的 第一步
errors   参数 将 被 赋值 给 一个 同名 的 属性
这个 限制 不会 影响   " format ( ) "   函数
标识符 和 关键字
（ 由   Victor   Stinner   在   bpo   23404   中 贡献 。 ）
设置 所有 形参
本章 中 描述 的 模块 列表 是 ：
返回   path   的 大小 ， 以 字节 为 单位
PEP   519 :   添加 文件系统 路径 协议
希望 的 输出 宽度 可 使用   width   形参来 限制 ； 默认值 为   80   个字符
下面 给出 了   " ' p _ sign _ posn ' "   和   " ' n _ sign _ posn ' "   的 可能 值
引发 一个 审计 事件   " msvcrt . locking " ， 附带 参数   " fd " ,   " mode " ,   " nbytes "
注解 :
当 你 调用 一个 方法 来 显示 或 擦除 文本 时 ， 效果 并 不会 立即 显示
difflib   的 命令行 接口
3.2   新版 功能 .
如果 一个 对象 无法 被 拆分 ， 则 将 超出 指定 宽度 :
将 通过 调用   " showsyntaxerror ( ) "   方法 打印 语法 回溯 信息
不幸 的 是 字符   " U + FEFF "   还有 第二个 含义   " ZERO   WIDTH   NO   BREAK   SPACE " :   即 宽度 为 零 并且 不 允许 用来 拆分 单词 的 字符
（ 由   Mark   Dickinson 在   bpo   4910   贡献 ）
stream   参数 必须 为 一个 基于 特定 编解码器 打开 用于 写入 文本 或 二进制 数据 的 文件 类 对象
注意 ， qsize ( )   >   0   不 保证 后续 的   get ( )   不 被 阻塞 ，   qsize ( )   <   maxsize   也 不 保证   put ( )   不 被 阻塞
01 ,   02 ,   ... ,   12   ( 9 )   " % y "   补零 后 ， 以 十进制 数 表示 的 ， 不带 世   00 ,   01 ,   ... ,   99   ( 9 )   纪 的 年份
返回 包含 整个 缓冲区 内容 的   " bytes "
cumtime   指定 的 函数 及其 所有 子函数 （ 从 调用 到 退出 ） 消耗 的 累积 时间
" winreg "   Windows   注册表 访问
FileType   对象
如果 未指定 错误码 ， 则 会 通过 调用   Windows   api   函数   GetLastError   来 获得 最新 的 错误码
提供 了 几个 数学 操作 ， 可以 结合   " Counter "   对象 ， 以 生产   multisets   ( 计数器 中 大于 0 的 元素 ）
任何 形参 的 值 为   " 0 "   都 将 导致 该 形参 使用 默认 字符
capitals   字段 为   " 0 "   或   " 1 "   ( 默认值 )
假定   " foo . pth "   内容 如下 :
（ 你 可以 启用 一个 不 区分 大小写 的 模式 ， 让 这个 正则 匹配   " Test "   或   " TEST " ， 稍后 会 详细 介绍 。 ）
" decimal "   模块 提供 了 运算 所 需要 的 足够 精度 :
在 命令行 中 运行   " python   m   tkinter " ， 应该 会弹 出 一个 Tk 界面 的 窗口 ， 表明   " tkinter "   包 已经 正确 安装 ， 而且 告诉 你   Tcl / Tk   的 版本号 ， 通过 这个 版本号 ，   你 就 可以 参考 对应 的   Tcl / Tk   文档 了
常数   意义   " KQ _ NOTE _ EXIT "   进程 已 退出   " KQ _ NOTE _ FORK "   该 进程 调用 了   fork ( )   " KQ _ NOTE _ EXEC "   进程 已 执行 新 进程   " KQ _ NOTE _ PCTRLMASK "   内部 筛选 器 标志   " KQ _ NOTE _ PDATAMASK "   内部 筛选 器 标志   " KQ _ NOTE _ TRACK "   跨   fork ( )   执行 进程   " KQ _ NOTE _ CHILD "   在   NOTE _ TRACK   的 子 进程 上 返回   " KQ _ NOTE _ TRACKERR "   无法 附加 到子 对象
否则 会 将 可 迭代 对象 作为   initializer   传给   " extend ( ) "   方法
安装   Python   模块 解释 了 怎么 安装 由 其他 Python 开发者 编写 的 模块
如果 提供 了 表达式 列表 ， 它 将 被 求值 ， 否则 以   " None "   替代
在   3.6   版 更改 :   Docs   reorganized   and   rewritten   to   promote   the   new   " EmailMessage " / " EmailPolicy "   API .
如果 调用   " PyObject _ CallObject ( ) "   的   C   代码 是 在   Python   中 发起 调用 的 ， 它 应当 立即 返回 一个 错误 来 告知 其   Python   调用者 ， 以便 解释器 能 打印 栈 回溯 信息 ， 或者 让 调用 方   Python   代码 能 处理 该 异常
你 可能 会 期望 ， 当 它们 被 调用 时 ， 它们 将 分别 返回   " 0 "   、   " 1 "   、   " 4 "   、   " 9 "   和   " 16 "
init _ or _ size   必须 是 一个 指明 数组 大小 的 整数 ， 或者 是 一个 将 被 用来 初始化 数组 条 目的 字节 串 对象
异常 存储 于 解释器 内部 的 静态 全局变量 中 ； 如此 变量 为   " NULL "   表示 未 发生 异常
是否 有   scanf ( )   或   sscanf ( )   的 对应物 ？
本地 DST 时区 的 偏移量 ， 以 UTC 为 单位 的 秒数 ， 如果 已 定义
NumPy   风格 ： 形状 和 步幅
以上 显示 的 参数 仅仅 是 最 简单 的 一些 ， 下面 常用 参数 描述 （ 因此 在 缩写 签名 中 使用 仅 关键字 标示 ）
如果 找到 了 Python 主目录   ， 则 基于 该 文件夹 将 相关 的 子目录 添加 到   " sys . path "   （ " Lib "   ,   " plat   win "   等 ）
之前 的 默认值 是   file   +   " ' c ' "   ( 如果 启用 优化 则 为   " ' o ' " )
但是 ， 如果   n   小于   " 0 "   ， 则 无论 长度 如何 都 会 读取 一行 ， 但是 如果 立即 到达 文件 末尾 ， 则 引发   " EOFError "
通过   " nonlocal "   关键字 可 允许 写入 外层 作用域
mode   参数 可以 是 表示 读取 的   " ' r ' "   ( 默认值 ) ， 表示 覆写 的   " ' w ' " ， 表示 单独 创建 的   " ' x ' " ， 或 表示 添加 的   " ' a ' "
上下文 还 具有 用于 监视 计算 期间 遇到 的 异常情况 的 信号 标志
库
这些 方法 类似 于   " Decimal "   类 的 方法 ， 在 此仅 简单 地 重新 列出
成功 时 返回 一个 新 的 元组 对象 ， 大小 为   n   ， 失败 时 返回   " NULL "
metavar   在 使用 方法 消息 中 使用 的 参数值 示例
为什么 lambda 表达式 不能 包含 语句 ？
如何 检查 对象 是否 为 给定 类 或 其子 类 的 一个 实例 ？
一些 简单 的 格式 字符串 示例
遍历 的 顺序 是 按照   " gdbm "   的 内部 哈希 值 ， 而 不会 根据 键 的 值 排序
只要 输入 文本 中 没有 长于   " width "   的 单个 单词 ， " TextWrapper "   就 能 保证 没有 长于   " width "   个字符 的 输出 行
3.2   新版 功能 .
当 与 斜杠 结合 使用 时 ，   " archive "   和   " prefix "   属性 等价 于 赋予   " zipimporter "   构造 器 的 原始   archivepath   参数
" ctypes "   中 的   a   " cast ( ) "   函数 提供 了 相同 的 功能
PEP   428   The   pathlib   module   object   oriented   filesystem   paths   PEP   由   Antoine   Pitrou   撰写 并 实现
adobe   控制 编码 后 的 字节 序列 是否 要 加上   " < ~ "   和   " ~ > " ， 这是   Adobe   实现 所 使用 的
这 对 大多数 任务 来说 都 已 足够 ， 但 你 确实 需要 记住 它 并非 十进制 算术 ， 且 每次 浮点运算 都 可能 会 导致 新 的 舍入 错误
这些 格式 允许 将 对象 按照 连续 的 内存 块 形式 进行 访问
其他 语言 特性 修改
为 2to3 添加   " yield   from "   的 支持
字符串 常量
通常 是   " c _ uint "   的 一个 别名
示例 变量 可能 如下 所示 （ 假设 前 两个 条目 已经 存在 ） :
输出 样例 （ 可能 因 架构 而异 ） :
通过   mode   你 可以 指定 要 传给   " open ( ) "   的 文件 模式
PEP   328 :   绝对 导入 和 相对 导入
Deprecated   since   version   3.8 ,   will   be   removed   in   version   3.10 :   loop   形参
命令行 选项
" http "   HTTP   模块
参数 列表 必须 是 一个 类型 和 省略号 组成 的 列表 ； 返回值 必须 是 单一 一个 类型
如果 原始 流 发生 阻塞 则 应当 引发   " BlockingIOError "
多线程
它们 的 写法 类似 于 标准 的 函数 ， 但 当 它们 要 返回 数据 时会 使用   " yield "   语句
复合 形状
为了 支持 模块 和 已 初始化 包 的 导入 ， 也 为了 给 命名 空间 包 提供 组成部分 ， 路径 条目 查找 器 必须 实现   " find _ spec ( ) "   方法
选项   描述   foreground   Specifies   the   text   foreground   color
将 多个 已 排序 的 输入 合并 为 一个 已 排序 的 输出 （ 例如 ， 合并 来自 多个 日志 文件 的 带 时间 戳 的 条目 ）
3.2   新版 功能 .
模块   " gettext "   定义 了 下列   API ， 这 与   gettext   API   类似
生成器 表达式 两边 使用 圆括号   ( " ( ) " )   ， 而 列表 推导 式 则 使用 方括号   ( " [ ] " )
在   3.7   版 更改 :   添加 了   " 421   MISDIRECTED _ REQUEST "   状态 码
对于   " date "   对象 ， 时 、 分 、 秒 和 微秒 的 格式 代码 不应 被 使用 ， 因为   " date "   对象 没有 这些 值
为了 处理 同步 问题 ， 也 提供 了 简单 的 锁 机制 （ 也 称为 互斥 锁 或 二进制 信号   ）
迭代 器 对象
默认值 为   " " year " "
使用   uuencode   将   in _ file   文件 编码 为   out _ file   文件
特别 地 也 允许 该类 的 实例
路径 配置 输入 ：
请 注意 ，   " None "   的   " PyTypeObject "   不会 直接 在   Python   /   C   API   中 公开
组件 对象 模型   ( COM )
列出 所有 打开 的 窗口 的 名称 ； 选择 一个 将 其 带到 前台 （ 必要 时 对 其 进行 去 符号化   ）
不 需要 特殊 的 处理 来 记录 属性 是否 被 查找 或 设置 ， 也 不 需要 根据 值 采取 操作
这样 会 把 转换 后 的 文件 写入   " example . py3 "   文件
有效 标识符 由 字母 ， 数字 ， 下划线 组成 ， 但 首字母 不能 是 数字 或 下划线 ， 另外 不能 是 关键词   " keyword "   比如   class   ,   for   ,   return   ,   global   ,   pass   ,   或   raise
下面 是 一个 在 交互式 解释器 中 打开 日志 功能 的 例子 :
以下 是 自   Python   3.3   以来 性能 提升 情况 的 总结 :
PEP   523 :   向 CPython   添加 框架 评估 API
返回 行 缓冲区 的 当前 内容   ( 底层 库中 的   " rl _ line _ buffer " )
它 只 定义 了 链接 器 的 符号 。 ）
3.9   新版 功能 .
返回 一个   iterator   ， 它会 产生 与   " glob ( ) "   相同 的 结果 ， 但 不会 实际 地 同时 保存 它们
将   shell   命令 拆 分为 参数 序列 的 方式 可能 并 不 很 直观 ， 特别 是 在 复杂 的 情况 下
这 是因为 如果 多个 库 作者 都 定义 了 他们 自己 的 自定义 级别 ， 那么 使用 开发人员 很难 控制 和 解释 这些 多个 库 的 日志 记录 输出 ， 因为 给定 的 数值 可能 意味着 不同 的 东西 对于 不同 的 库
StreamReaderWriter   对象
修改 安装
默认 策略 将   context   定义 为 当前 线程
特殊 类型 ， 表明 类型 没有 任何 限制
2to3   自动 将   Python   2   代码 转为   Python   3   代码
未知 元素 将 被   plist   解析器 直接 略过
不 了解 提取 的 默认 行为 可能 导致 不 符合 期望 的 解压缩 结果
这 如果 被 设为 一个 非空 字符串 ， 它 就 相当于 指定   "   O "   选项
虽然 安装程序 提供 了 为 您 配置 PATH 和 PATHEXT 变量 的 选项 ， 但 这仅 适用 于单 版本 、 全局 安装
" defusedxml "   包
如果 你 设置 语言 例如   " language   italian "   则 文档 字符串 字典   " turtle _ docstringdict _ italian . py "   将 在 导入 模块 时 被 加载   ( 如果 导入 路径 即   " turtle "   的 目录 中 存在 此 文件
不要 更改 此 字典 的 内容 ； 更改 不会 影响 解释器 使用 的 局部变量 或 自由 变量 的 值
使用   2to3
重入 锁 是 一个 可以 被 同一个 线程 多次 获取 的 同步 基元 组件
另 参见   namespace   package
NULL 指针
直接 运行 时 的 语义 与 任何   import   语句 相同 ： 存在 一个 后文 将 详细 说明 的 标准 模块   " __ future __ " ， 它会 在 执行   future   语句 时以 通常 的 方式 被 导入
" open ( ) "   所 返回 的 对象 支持 与 字典 相同 的 基本功能 ； 可以 存储 、 获取 和 删除 键 及其 对应 的 值 ， 并 可 使用   " in "   运算符 和   " keys ( ) "   方法 ， 以及   " get ( ) "   和   " setdefault ( ) "
请 注意 如果 消息 对象 没有 前导 文本 ， 则   preamble   属性 将 为   " None "
交互 解释器 对象
节点 对象
该值 默认 为   " False " ， 这 意味着 指定 的 配置 将 以 与 当前   " fileConfig ( ) "   API   所 使用 的 相同 语义 来 替代 现有 的 配置
参见 :
开发   tkinter   应用程序
打印函数 最后 一次 返回 的 返回值
允许 多种 输入 格式
it ' s   recommended   that   you   supply   a   little   more   metadata ,   in   particular   your   name ,   email   address   and   a   URL   for   the   project   ( see   section   编写 安装 脚本   for   an   example )
comment _ prefixes   仅用 在 被 视为 空白 的 行 （ 可以 缩进 ） 之前 而   inline _ comment _ prefixes   可用 在 每个 有效值 之后 （ 例如 小节 名称 、 选项 以及 空白 的 行 ）
value   可以 是 整数 ， 字符串 ， 元组 ， " float "   ， 或 另 一个   " Decimal "   对象
" curses . textpad "   用于   curses   程序 的 文本 输入 控件
如果 字典 缺少   fieldnames   中 的 键 ， 则 可选 参数   restval   用于 指定 要 写入 的 值
例如 ， 下面 的 代码 是 一个 通用 的 无限 缓冲区 容量 的 生产者 消费者 情形 ：
结果 是 经过 良好 定义 的 ， 但 仅限于 “ 几乎 总是 正确 地 舍入 ”
Ratcliff   和   D
obj   必须 为 一个   ctypes   类型 的 实例
新增 命令 可 直接 继承 自   " Command " ， 而 替换 命令 往往 间接 派生 自   " Command " ，   直接 子 类化 它们 所 替换 的 命令
3.5 . 2   新版 功能 .
这个 方法 只 可以 由   " Executor "   实现 和 单元测试 使用
转换 必须 独立 于 当前 的 区域
其 长度 会 被 计入 第一行 的 长度
" fileinput . input ( ) "   和   " fileinput . FileInput ( ) "   中自   Python   3.6   起 就 已 被 忽略 并弃 用 的   " bufsize "   关键字 参数 已 被 移除
异常
（   由   Victor   Stinner   在   bpo   39288   中 贡献 。 ）
从   src   拷贝 权限 位到   dst
选项
源代码 :   Lib / pty . py
输入 一个 空白行 将 重复 最后 输入 的 命令
请 阅读 维基百科 文章   Cryptographically   secure   pseudorandom   number   generator   ( CSPRNG )   以 了解 对于 高 加密 强度 生成器 的 具体 要求
实现   " TOS   TOS1   %   TOS "
多线程
最好 的 做法 是 使用 更 高 的 精度 和 不同 的 舍入 模式 重新 进行 计算
执行 上文 所 描述 的 轮换
mailcap   格式 的 文档 见   RFC   1524   ,   " A   User   Agent   Configuration   Mechanism   For   Multimedia   Mail   Format   Information " ， 但 它 并 不是 一个 因特网 标准
如果 通过 一个   unlocked   锁 调用 则 会 引发   " RuntimeError "
创建 并 返回 一个 新 的   " LogRecord "   实例 ， 实例 属性 由   attrdict   定义
如果   close _ fds   为 真 ， 所有 文件 描述符 除了   " 0 " ,   " 1 " ,   " 2 "   之外 都 会 在 子 进程 执行 前 关闭
其他 资源
其他 使用 IP地址 的 模块 （ 例如   " socket "   ） 通常 不会 直接 接受 来自 该 模块 的 对象
请 记住 在   Python   中 参数 是 通过 赋值 来 传递 的
3.2   新版 功能 :   此 函数 与   " setLogRecordFactory ( ) "   一起 提供 ， 以便 允许 开发者 对 如何 构造 表示 日志 记录 事件 的   " LogRecord "   有 更好 的 控制
若 被 调用 时 不 包含 参数 ， 则 启动 完全 的 垃圾 回收
member   可以 是 一个 文件名 或   " TarInfo "   对象
UDP   回显 服务器
请 注意 所 返回 的 整数 不 一定 要 在   ASCII   范围 以内 ： 功能键 、 小键盘 键 等等 是 由 大于   255   的 数字 表示 的
这 类似 于 Unix   shell 的   " . profile "   功能
在   3.9   版 更改 :   当 使用 了 命令行 参数   "   E "   或   "   I "   时 ， 环境变量   " PYTHONCASEOK "   现在 将 被 忽略
如果 导入 了 指定 的 模块   " __ file __ "   ， 则 返回 为 该 模块 设置 的 值
记录器 对象
PEP   255   简单 生成器   Written   by   Neil   Schemenauer ,   Tim   Peters ,   Magnus   Lie   Hetland
添加 额外 调试 到 线程 模块
这 很 容易 忘记 在 退出 前 释放 内存   ， 特别 是 后期 修改 的 代码
输出 结果 会 像 这样 :
如果 该 对象 不 为   Unicode   对象 则 会 引发   " TypeError "
这种 定义 被 称为 接口 对象 ， 因为 网络 上 IP 表示法 通常 用于 描述 给定 网络 上 的 计算机 的 网络接口 ， 并 在 下 一节 中 进一步 描述
" re . VERBOSE "   标志 有 几种 效果
在 此 变量 中 列出 的 字 段 必须 为 结构 体 或 联合 类型 字 段
" dataclasses "   模块 提供 了 一个 装饰 器 和 一些 函数 ， 用于 自动 将 生成 的 特殊 方法 添加 到 用户 定义 的 类 中
Python 安装程序 自动 将   " . py "   文件 与   " python . exe "   相关联 ， 这样 双击 Python 文件 就 会 将 其 作为 脚本 运行
The   POSIX.1   1988   ustar   格式   ( " USTAR _ FORMAT " )
已弃 用 的   Python   行为
例如 ， 想 要求 出   " 4258 𝑥   +   147 𝑦   369 "   的 整数 解 ， 首先 应 重写 为   " 4258 𝑥   ≡   369   ( mod   147 ) "   然后 求解   ：
创建 任务
handlers   如果 指定 ， 这 应为 一个 包含 要 加入 根 日志 记录器 的   已 创建 处理程序 的 可 迭代 对象
这些 对象 并 不仅 限于   " logging "   模块 所 提供 的 对象 ， 因为 你 还 可以 编写 你 自己 的 格式化 或 处理程序 类
许多   Python   模块   ( " _ abc " ,   " audioop " ,   " _ bz2 " ,   " _ codecs " ,   " _ contextvars " ,   " _ crypt " ,   " _ functools " ,   " _ json " ,   " _ locale " ,   " math " ,   " operator " ,   " resource " ,   " time " ,   " _ weakref " )   现在 会 使用   PEP   489   所 定义 的 多 阶段 初始化 ；
类会 被 视作 其 自身 的 子类
在   3.5   版 更改 :   Discovery   no   longer   checks   package   names   for   matching   pattern   due   to   the   impossibility   of   package   names   matching   the   default   pattern .
我们 使用   " | "   分隔符 来 表示   PEG   的 “   有序 选择 ”   ( 在 传统   PEG   语法 中则 写 为   " / " )
将   n   设 为   10   以 使用 十分 位
对   " 0.0 "   进行 负数 幂次 运算 将 导致   " ZeroDivisionError "
第一个 参数 指定 调用   " timeit ( ) "   的 次数
平台 特定 模块
其他 选项
ignorechars   应当 是 一个   bytes   like   object   或   ASCII   字符串 ， 其中 包含 要 从 输入 中 忽略 的 字符
返回 一个   named   tuple   表示 的 数字 ：   " DecimalTuple ( sign ,   digits ,   exponent ) "
以下 代码 是 一个   Python   程序 ， 它 获取 一个 整数 列表 并 计算 总和 或者 最大值 ：
如果   num   为 空且   exp   不是 正 实数 ， 这个 方法 返回 零 并 设置   " errno "   为   " EDOM "
" parse _ args ( ) "   方法 在 默认 情况 下 允许 将长 选项 缩写 为 前缀 ， 如果 缩写 无 歧义 （ 即 前缀 与 一个 特定 选项 相匹配 ） 的话 :
作者 :   A . M
在 未来 可以 期待   Python   将 有 什么 新进展 ？
PEP   3151 :   重写   OS   和   IO   异常 的 层次结构
要 删除 断点 上 的 所有 命令 ， 请 输入   " commands "   并 立即 以   " end "   结尾 ， 也 就是 不 指定 任何 命令
扩展 切片
只要 视图 保持 存在 ， " BytesIO "   对象 就 无法 被 改变 大小 或 关闭
见 下面 的 注释
如果   group   不 为   " None " ， 则   setregid ( )   系统 调用 将 于子 进程 执行 之前 在 下级 进程 中 进行
在 导入 期间 ， 会 在   " sys . modules "   查找 模块 名称 ， 如 存在 则 其 关联 的 值 就是 需要 导入 的 模块 ， 导入 过程 完成
PEP   3129 :   类 装饰 器
3.9   新版 功能 .
这 相当于 :
如果 指定 的 窗口 自 上次 调用   " refresh ( ) "   后 发生 了 改变 则 返回   " True " ； 否则 返回   " False "
在   3.6   版 更改 :   增加 了   " REPLACE "   语句 的 支持
C   API   的 改变
基本   " Filter "   的 功能 允许 按 特定 的 记录器 名称 进行 过滤
命令行 选项
由于 多线程 或 多 进程 的 环境 ， 该 状态 是 不 可靠 的
下列 是 公开 的 方法
返回 一个   URL   安全 的 随机 字符串 ， 包含   nbytes   个 随机 字节
帮助 与 配置
" I "   ( " int " )   [ unsigned   int ]   将 一个   C   " unsigned   long "   无 符号 整型 转化成   Python   整型 对象
见 地址 格式
返回   o1   减去   o2   的 结果 ， 如果 失败 ， 返回   " NULL "
注解 :
" sunau "   读写   Sun   AU   文件
" py _ compile "   编译   Python   源文件
" Shape "   类 在   " register _ shape ( ) "   方法 的 内部 以 多种 方式 使用
3.9   版后 已 移除 .
回到 例子
我们 稍后 将 介绍 可用 的 设置 ， 但 现在 只 需 一个 例子
通过 刷新 和 关闭 所有 处理程序 来 通知 日志 记录 系统 执行 有序 停止
当 缩进 包含 对 制表符 和 空格符 不 一致 的 使用 时 将 被 引发
如果   mode   为   " ' a ' "   且   file   为 已 存在 的 文件 ，   则 格外 的 文件 将 被 加入
控件
在   3.9   版 更改 :   增加 了   " msg "   形参
它 实际上 是 一个 供库 开发者 使用 的 ‘ 无 操作 ’ 处理程序
[ 1 ]   " exec ( ) "   和   " eval ( ) "   函数 有 可选 参数 用来 重载 全局 和 局部 命名 空间
警告 :
最多会 执行 一个 处理程序
当 你 的 载荷 主要 包含 不可 打印 数据 时 这 是 一种 很 好 用 的 编码 格式 ， 因为 它 比   quoted   printable   更 紧凑
3.3   新版 功能 .
返回 一个 迭代 器 ， 迭代 器 的 内容 与   " itermonthdates ( ) "   类似 为   year   年   month   月 的 日期 ， 但 不受   " datetime . date "   范围 的 限制
测试
改进 的 模块
可 调用 对象 方式 的 缺点 是 速度 略 慢且 生成 的 代码 略 长
如果   key   是 预定 义键 之一 ，   sub _ key   可能 会 是   " None "
文档
上下文 和 启动 方法
它们 没有 其他 的 显式 功能 ； 不过 它们 会 被   NumPy   以及 其他 第三方 扩展 所 使用
这是   " digits " ,   " ascii _ letters " ,   " punctuation "   和   " whitespace "   的 总和
返回   o1   、   o2   做 矩阵 乘法 的 结果 ， 如果 失败 ， 返回   " NULL "
例如
适合 于 作为 静态方法 的 是 那些 不 引用   " self "   变量 的 方法
（ 由   Tarek   Ziad é   在   bpo   2663   中 贡献 。 ）
PEP   305 :   逗号 分隔 文件
它们 在   C   语言 模块   " _ ast "   中 定义 ， 并 被 导出 至   " ast "   模块
参考 文档 内置 类型 和   " collections "   模块
从 数组 中 移除 首次 出现 的   x
左移   n   位 被 定义 为 乘以   " pow ( 2 , n ) "
返回 当前 已 传给   " update ( ) "   方法 的 数据 摘要
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
这里 ，   " n   x "   在 lambda 本地 创建 一个 新 的 变量   " n "   ， 并 在 定义 lambda 时 计算 ，   使 它 具有 与   " x "   在 循环 中该 点 相同 的 值
默认 索引 路径 依赖于 安装 路径 ， 但 通常 都 是 以   "   prefix   / lib / python   version   "   开始   ( 参见 上 文中 的   " PYTHONHOME " )
制作 一个 电话本
如 常用 数学 实践 中 所 使用 的 那样 ,   函数参数 以 分布 方程 中 的 相应 变量 命名 ; 大多数 这些 方程 都 可以 在 任何 统计学 教材 中 找到
注解 :
它 应该 产生 一个 具有 可 赋值 属性 的 对象 ； 否则 将 引发   " TypeError "
3.9   新版 功能 .
用   Python   进行   Curses   编程
移植 到   Python   3.9
注册 已 注册 过 的 文件 描述符 不会 报错 ， 且 等同于 只 注册 一次 该 描述符
请 注意 语句 总是 以   " NEWLINE "   结束 ， 之后 可能 跟随 一个   " DEDENT "
与 协程 对象 对应 的 类型 对 ​ ​ 象
举例来说 ， 如果   " x   float ( ' NaN ' ) "   则   " 3   <   x " ,   " x   <   3 "   和   " x   x "   均 为 假值 ， 而   " x   !   x "   则 为 真值
失败 时 ， 返回   " NULL "
此 模块 定义 了 一种 对象 类型 ， 可以 紧凑 地 表示 基本 类型 值 的 数组 ： 字符 、 整数 、   浮点数 等
在   3.2   版 更改 :   在 之前 的   " configparser "   版本 中 行为 匹配   " comment _ prefixes   ( ' # ' , ' ; ' ) "   和   " inline _ comment _ prefixes   ( ' ; ' , ) "
3.3   新版 功能 .
" groups ( ) "   方法 返回 一个 元组 ， 其中 包含 所有 子组 的 字符串 ， 从 1 到 最后 一个 子组
数据压缩 由   " zlib "   模块 提供
代表   C   32   位   " unsigned   int "   数据类型
由于 对 任何 一直 类型 的 大部分 操作 是 十分相似 的 ， 可以 定义 一个 帮助 函数 ， 即 一个 生成 后续 或 相反 的 实例 的 生成器
这个 抽象 方法 返回 了 一个 不 包含 任何 内容 的 可 迭代 对象
不 包含 额外 的 实例 变量
" " ] " "   的 权 标值
这个   " PyObject "   的 子 类型 被 用来 保存   " set "   和   " frozenset "   对象 的 内部 数据
如果 您 不介意 重新 排序 列表 ， 请 对 其 进行 排序 ， 然后 从 列表 末尾 进行 扫描 ， 删除 重复 项 ：
以下 标识符 被 作为 语言 的 保留字 或称 关键字   ， 不可 被 用作 普通 标识符
RFC   1832   XDR :   外部 数据表示 标准 更新 的   RFC ， 它 提供 了 经 修订 的   XDR   定义
所 返回 序列 中 的 每个 元素 为 一个 元组   " ( name ,   description ) "
在   3.2   版 更改 :   Added   the   legacy   and   optimize   parameter .
注解 :
尝试 链接 过多 的 共享 库
定义 了 两个 附加 函数 用于 对 文件 模式 进行 更 一般化 的 操作 ：
默认 实现 是从   " sys . stdin "   读取 ； 子类 可以 用 其他 实现 代替
引发 一个 审计 事件   " ctypes . get _ errno " ， 不 附带 任何 参数
PEP   327 :   十进制 数据类型
" threading "   基于 线程 的 并行
如果   p   是 ` ` NULL ` ` ， 则 相当于 调用   " PyObject _ Malloc ( n ) "   ； 如果   n   等于   0 ， 则 内存 块 大小 会 被 调整 ， 但 不会 被 释放 ， 返回 非   " NULL "   指针
作者 感谢 以下 人士 对 本文 的 各种 草稿 提出 建议 ：   David   Bolen ,   Mark   Hammond ,   Gregg   Hauser ,   Jeremy   Hylton ,   Fredrik   Lundh ,   Detlef   Lannert ,   Aahz   Maruch ,   Skip   Montanaro ,   Vladimir   Marangozov ,   Tobias   Polzin ,   Guido   van   Rossum ,   Neil   Schemenauer ,   and   Russ   Schmidt .
注解 :
这样 做 是 为了 避免 两个 问题 ： 目录 的 修改 时间 会 在 每当 在 其中 创建 文件 时 被 重置
如果 可用 ， 则 使用   " os . O _ TMPFILE "   标志 （ 仅限于   Linux ， 需要   3.11   及 更 高 版本 的 内核 ）
annotate   的 值会 被 用作 标注 所 应 开始 的 列 的 提示
为了 强制   spawn   在子 进程 退出 之前 返回 所以 应当 抛出   " OSError "
starty   如为 正值 ， 表示 初始 位置 距离 屏幕 上 边缘 多少 像素 ， 负值 表示 距离 下 边缘 ， " None "   表示 窗口 垂直 居中
定义 函数
更 漂亮 的 输出 格式
如果 未 给定   buffer _ size   ， 则 使用 默认 的   " DEFAULT _ BUFFER _ SIZE "
所有 这些 编码 格式 只能 对   Unicode   所 定义 的   1114112   个 码位 中 的   256   个 进行 编码
对于 混用 的 操作数 类型 ， 则 将 应用 双目 算术 运算符 的 类型 强制 转换规则
将 在 配置 字典 中 搜索 下列 键 :
现在 是 返回   dst
然而 对   UTF   8   来说 这 却是 不 可能 的 ， 因为   UTF   8   字节 序列 具有 不 允许 任意 字节 序列 的 特别 结构
它 相当于 用   Python   分析器 逐行 追踪
" create _ subprocess _ exec ( ) "   和   " create _ subprocess _ shell ( ) "   函数 都 返回   Process   类 的 实例
bpo   38525 :   修复 了 使用 空   " dict "   对象 的 反向 迭代 器时 的 分段 错误
对 这个 类 的 需求 已 部分 由 直接 创建   " list "   的 子类 的 功能 所 替代 ； 不过 ， 这个 类 处理 起来 更 容易 ， 因为 底层 的 列表 可以 作为 属性 来 访问
检测 给定 的 相对 屏幕 的 字符 单元格 坐标 是否 被 给定 的 窗口 所 包围 ， 返回   " True "   或   " False "
另 请参阅   "   X "   " oldparser "   选项 和   PEP   617
3.7   新版 功能 .
请参阅 上文 解释 同名 函数 的 文档
此类 对象 的 例子 包括   " dict " ,   " collections . defaultdict " ,   " collections . OrderedDict "   以及   " collections . Counter "
如果 参数 是   " PyLongObject "   但 不是   " PyLongObject "   的 子 类型 ， 返回   true
type   字 段 必须 是 一个   " ctypes "   类型 ， 比如   " c _ int " ， 或者 其他   " ctypes "   类型 :   结构 体 、 联合 、 数组 、 指针
库
默认设置 将 适用 于 大多数 用户
另 一个 使用   ignore   参数 来 添加 记录 调用 的 例子 :
更新 的 模块 ： unittest
注解 :
路径 条目 不必 仅限于 文件系统 位置
多次 使用 相同 的 名字 调用   " getLogger ( ) "   会 一直 返回 相同 的   Logger   对象 的 引用
两者 确实 存在 差异 ，   将 在 后文 说明 ， 但是 其 行为 非常 接近 于 字典 所 具有 一般 行为
请 检查 两个 数据库 以 获取 完整 的 成员 资格 信息
一个 简单 的 例子
通过 重用 一个 种子 值   ， 只要 没有 运行 多线程 ， 相同 的 序列 就 应当 可 在 多次 运行 中 重现
如果 包含 完整 的 元素 ， 则 被 处理 ； 如果 数据 不 完整 ， 将 被 缓冲 直到 更 多 的 数据 被 填充 ， 或者   " close ( ) "   被 调用
等于   1 / 10   +   2 / 100   +   5 / 1000   ， 同理 ， 二进制 的 小数
当 进入 时值 为 零且 有 其他 线程 正在 等待 它 再次 变为 大于 零时 ， 则 唤醒 那   n   个 线程
有些 元 路径 查找 器 只 支持 顶级 导入
返回 一个 新 的 元组 子类 ， 名为   typename
在   3.2   版 更改 :   close _ fds   的 默认值 已经 从   " False "   修改 为 上述 值
名为   " json "   的 标准 模块 可以 采用   Python   数据 层次结构 ， 并 将 它们 转化 为 字符串 表示 形式 ； 这个 过程 称为   serializing
3.3   新版 功能 .
输出 :
输入 参数 的 位置
3.9   版后 已 移除 :   " collections . abc . Callable "   now   supports   " [ ] "
它们 现在 的 速度 快 了 两倍 以上 ， 成为   Python   中 最快 的 实例 变量 查找 形式
比较   a   和   b   ( 字符串 列表 ) ； 返回 上下文 差异 格式 的 增量 信息   ( 一个 产生 增量 行 的   generator   )
标准 库 简介
" __ future __ "   是 一个 真正 的 模块 ， 这 主要 有   3   个 原因 ：
3.2   新版 功能 .
" Formatter "   类 可以 添加 一个 额外 的 可选 关键字 参数   " style "
要 检查 字典 中 是否 存在 一个 特定 键 ， 可 使用   " in "   关键字
一个 简单 的 例子
增加 了   follow _ symlinks   参数
" ftplib "   FTP   协议 客户端
子 进程
虽然 有时 这 看起来 会 与 输入 不 一样 （ 外面 所加 的 引号 可能 会 改变 ） ， 但 两个 字符串 是 相同 的
结果 是 一个 合法 的   Python   表达式
如果 在   timeout   秒 内 没有 执行 完成 ，   " concurrent . futures . TimeoutError "   将会 被 触发
" id ( ) "   返回 一个 整数 ， 该 整数 在 对象 的 生命周期 内 保证 是 唯一 的
请 注意   size   形 参会 涉及 到 性能 方面 的 考虑
请求 的 原始 主机 ， 不 含 端口
二进制 转换
新 模块 ： sysconfig
注解 :
也 可以 通过 在   o   上 调用   " PySequence _ Size ( ) "   来 获取 大小   ， 但是   " PySequence _ Fast _ GET _ SIZE ( ) "   速度 更 快 ， 因为 它 可以 假定   o   为 列表 或 元组
如果   maxsplit   非零 ， 则 最 多 执行   maxsplit   次 拆分
有时 可能 会想 在 循环 时 修改 列表 内容 ， 一般来说 改为 创建 一个 新 列表 是 比较简单 且 安全 的
在   3.5   版 更改 :   The   socket   timeout   is   no   more   reset   each   time   bytes   are   received   or   sent
并且 ， 当前   " contextvars . Context "   会 被 传播 ， 允许 在 不同 的 线程 中 访问 来自 事件 循环 的 上下文 变量
mu   是 平均值 ，   sigma   是 标准差
使 您 的 算法 更 快 （ 或 更 改为 更快 的 算法 ） 可以 产生 比 尝试 在 代码 中 使用 微 优化 技巧 更大 的 好处
头 遵循   RFC   5322   或者   RFC   6532   风格 的 字段名 和 值 ， 字段名 和 字 段值 之间 由 一个 冒号 隔开
" % A "   PyObject   " ascii ( ) "   调用 的 结果
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
要 被 验证 或 美化 打印 的   JSON   文件 ：
" pass "   语句
3.4   版后 已 移除 .
使用   "   f "   参数 可以 明确 指定 需要 使用 的 修复器 集合
全局 配置 变量
参见   " get ( ) "   获取 对于   raw   ,   vars   和   fallback   的 解释
操作 导入 的 动态链接库 中 的 函数
注意 不要 直接 实例 化   " Handler "   ； 这个 类 用来 派生 其他 更 有用 的 子类
你 应该 避免 过度 抽象 ， 特别 是 在 微小 的 功能 或 方法 的 形式 下 （ 这 通常 也 会 对 可读性 产生 不利 影响 ）
" formatter "   ( 可 选 )
算法 上 ，   " OrderedDict "   可以 比   " dict "   更好 地 处理 频繁 的 重新 排序 操作
在   3.7   版 更改 :   This   function   is   now   always   available .
如果 第二个 运算 数 的 指数 大于 第一个 运算 数 的 指数 那 或许 需要 舍入
贪婪 与非 贪婪
内容 为   data   ， 它 可以 是 一个   " str "   或   " bytes "   的 实例 ； 如果 是   " str " ， 则 会 先 使用   UTF   8   进行 编码
3.9   新版 功能 .
" xml . dom . minidom " ： 最小 的   DOM   实现
它 只 对 纯 Python   ( 字节 码 )   函数 触发
该 模块 现在 已 移除
这是 本地化   Python   应用程序 和 模块 的 推荐 方法
Unix   下会 在 成功 时 返回 零 ； 在 失败 时 引发 错误
" abc "   抽象 基类
指定 处理程序 配置 的 小节 说明 如下
该 如何 加快速度 ？
这 将 允许 其他 模块 使用   " PyCapsule _ Import ( ) "   来 导入 此   capsule
doraise   和   quiet   参数 确定 在 编译 文件 时 如何 处理错误
如果 你 必须 使用 较 早 版本 的   ncurses ， 则 你 只要 在 调用   " addstr ( ) "   时 不 传入 嵌入 了 换行符 的   str   即可 避免 触发 此 错误
它 为 相对 高层 的 上下文 管理器 提供 了 一个 合适 的 基础 ， 使得 它 能 根据 应用程序 的 需求 使用 特定 方式 操作 栈
元组 是 不可 变 的 ， 这 意味着 一旦 创建 了 元组 ， 就 不能 用新值 替换 它 的 任何 元素
" xml . parsers . expat " ： Expat 解析器 绑定
下面   5   个 函数 展示 了 如何 将 其 转变成 有 序列表 中 的 标准 查找 函数
ctypes   类型   C   类型   Python   数据类型   " c _ bool "   " _ Bool "   bool   ( 1 )   " c _ char "   " char "   单 字符 字节 串 对象   " c _ wchar "   " wchar _ t "   单 字符 字符串   " c _ byte "   " char "   int   " c _ ubyte "   " unsigned   char "   int   " c _ short "   " short "   int   " c _ ushort "   " unsigned   short "   int   " c _ int "   " int "   int   " c _ uint "   " unsigned   int "   int   " c _ long "   " long "   int   " c _ ulong "   " unsigned   long "   int   " c _ longlong "   " __ int64 "   或   " long   long "   int   " c _ ulonglong "   " unsigned   __ int64 "   或   " unsigned   long   long "   int   " c _ size _ t "   " size _ t "   int   " c _ ssize _ t "   " ssize _ t "   或   " Py _ ssize _ t "   int   " c _ float "   " float "   float   " c _ double "   " double "   float   " c _ longdouble "   " long   double "   float   " c _ char _ p "   " char   "   ( NUL   terminated )   字节 串 对象 或   " None "   " c _ wchar _ p "   " wchar _ t   "   ( NUL   terminated )   字符串 或   " None "   " c _ void _ p "   " void   "   int   或   " None "
线程 安全
格式化 字符串 文字
Smith   和   Barry   Warsaw   实现
如果 子 类型 重载 了 构造函数 ， 它 一定 要 确保 在 做 任何 事前 ， 先 发起 调用 基类 构造 器 ( " Thread .__ init __ ( ) " )
显示 文字
内置 类型
返回 采样 字节 长度
示例
嵌入式 发行版 不 包括   Microsoft   C   Runtime   ， 应用程序 安装程序 负责 提供 此 功能
" ChainMap "   例子 和 方法
distutils   的   " bdist _ wininst "   命令 现在 已弃 用 ， 请 改用   " bdist _ wheel "   ( wheel   包 )
此 函数 在   Python   3.7   中 被 加入
命令行 接口
调用者 可以 在 此 方法 返回 后 释放 或 改变   b   ， 因此 该 实现 应该 仅 在 方法 调用 期间 访问   b
源代码 :   Lib / inspect . py
当 对象 正在 被 垃圾 回收 器 监控 时 返回   " True "   ， 否则 返回   " False "
tail   部分 不会 包含 斜杠 ， 如果   path   以 斜杠 结尾 ， 则   tail   将 为 空
" L "   ( " int " )   [ long   long ]   将 一个   Python   整型 转化成 一个   C   " long   long "   长长 整型
（ 由   Victor   Stinner   在   bpo   37414   中 贡献 。 ）
只有   " Py _ False "   和   " Py _ True "   两个 布尔值
动画 控制
另一方面 ， 如果 你 知道 自己 在 做 什么 ， 则 可以 用 跟 访问 模块 内 的 函数 的 同样 标记 方法 ， 去 访问 一个 模块 的 全局变量 ， " modname . itemname "
" PyNumber _ Long ( ) " ,   " PyNumber _ Float ( ) "   和   " PyFloat _ AsDouble ( ) "   现在 如果 可能 也 将 会 使用   " __ index __ ( ) "   方法
用于 读写   ZIP   文件 的 类
格式 为   " HH : MM : SS . sss "
" hmac "   基于 密钥 的 消息 验证
tag   参数 是 小写 的 标签 名
返回 一个 迭代 器 ， 迭代 器 的 内容 与   " itermonthdates ( ) "   类似 为   year   年   month   月 的 日期 ， 但 不受   " datetime . date "   范围 的 限制
完成 上下文 或 销毁 临时文件 对象 后 ， 临时文件 将 从 文件系统 中 删除
实现 算数 运算
新增 用于 移除 前缀 和 后缀 的 字符串 方法
参见 :
编码 不 支持 的 字符 将 替换 为 相应 的 XML 字符 引用   " &# nnn ; "
" PySequence _ Fast   "   函数 之所以 这样 命名 ， 是因为 它们 会 假定   o   是 一个   " PyTupleObject "   或   " PyListObject "   并 直接 访问   o   的 数据字 段
该 模块 定义 以下内容 ：
缓冲区 的 字节 大小 必须 匹配 格式 所 要求 的 大小 ， 如   " calcsize ( ) "   所示
ctypes   使用 类型 的 共享 ctypes   使用   typecode   的 共享   ctypes   c _ double ( 2.4 )   RawValue ( c _ double ,   2.4 )   RawValue ( ' d ' ,   2.4 )   MyStruct ( 4 ,   6 )   RawValue ( MyStruct ,   4 ,   6 )   ( c _ short   7 ) ( )   RawArray ( c _ short ,   7 )   RawArray ( ' h ' ,   7 )   ( c _ int   3 ) ( 9 ,   2 ,   8 )   RawArray ( c _ int ,   ( 9 ,   2 ,   8 ) )   RawArray ( ' i ' ,   ( 9 ,   2 ,   8 ) )
队列 不 要求 具有 任务 跟踪   API （ 但 如 提供 则 会 使用 它 ） ， 这 意味着 你 可以 为   queue   使用   " SimpleQueue "   实例
3.9   新版 功能 .
" Control   C "   按钮 无法 使用 此 函数 来 读取
虽然 我们 使用   " class "   语法 来 创建   Enum ， 但   Enum   并 不是 普通 的   Python   类
条目 序号 从 一 开始
" linecache "   随机 读写 文本 行
修改 安装
事件 循环 方法 集
良好 的 测试 覆盖率
" noresize " :   不 调整 海龟 的 外观 大小
要 使用 非 本地 字节 序 ， 可以 使用   " BigEndianStructure " ,   " LittleEndianStructure " ,   " BigEndianUnion " ,   and   " LittleEndianUnion "   作为 基类
" malloc " :   来自   C   标准 库 的 系统 分配 ,   C   函数   " malloc ( ) " ,   " calloc ( ) " ,   " realloc ( ) "   and   " free ( ) "
" termios "   POSIX   风格 的   tty   控制
返回 将 调用 一个   COM   方法 的 外部 函数
如果 权重 为 负值 则 将 引发   " ValueError "
" PyObject _ HEAD "   是 强制 要求 必须 在 每个 对象 结构 体 之前 ， 用以 定义 一个 类型 为   " PyObject "   的 字 段 叫   " ob _ base "   ， 包含 了 一个 指针 指向 类型 对象 和 一个 引用 计数 ( 这 可以 用宏   " Py _ REFCNT "   和   " Py _ TYPE "   来 区分 )
正确 的 保护 方法 是 ， 在 任何 不 安全 的 操作前 ， 保存 未决 异常 ， 然后 在 其 完成 后 恢复
返回值 是 一个 浮点数 ， 为 纪元 秒数 （ 参见   " time "   模块 ）
在 导入   " foo "   之后   ， " foo . bar "   将 通过 第二次 遍历 元 路径 来 导入 ， 调用   " mpf . find _ spec ( " foo . bar " ,   foo .__ path __ ,   None ) "
只有 主 解释器 的 主线 程 能够 处理 信号
C   名称   注释   " PyExc _ EnvironmentError "   " PyExc _ IOError "   " PyExc _ WindowsError "   ( 3 )
" PyArg _ ParseTuple ( ) "   在 所有 参数 都 有 正确 类型 且 组成部分 按 顺序 放在 传递 进来 的 地址 里 时 ， 返回 真 ( 非零 )
为什么 Python 使用 缩 进来 分组 语句 ？
此时   " astimezone ( ) "   是 通过 将 两个 相邻 的   UTC   小时 映射 到 两个 相同 的 本地 小时 来 模仿 本地 时钟 的 行为
缓冲区 中 可能 留存 部分 输入 以供 下 一次 调用
类似 的 ，   channels   也 会 返回 实际 值 或者 在 无法 推测 或者 难以 解码 时 返回   " 0 "
示例
设置 或 移除 底层 库 的   " rl _ startup _ hook "   回调 所 发起 调用 的 函数
另 请参阅 迭代 器 类型
由 Zackery   Spytz 修复
如果 任何 关键字 参数 没有 与 之 对应 的 正式 参数 名称 ， 将会 引发   " TypeError "   异常 ， 除非 有 一个 正式 参数 使用 了   "   identifier "   句法 ， 该 正式 参数 将 接受 一个 包含 了 多余 关键字 参数 的 字典 （ 使用 关键字 作为 键 而 参数值 作为 与键 对应 的 值 ）   ， 如果 没有 多余 关键字 参数 则 为 一个 （ 新 的 ） 空 字典
计数器 的 值 永远 不会 小于 零 ； 当   " acquire ( ) "   方法 发现 计数器 为 零时 ， 将会 阻塞 ， 直到 其它 线程 调用   " release ( ) "   方法
如果 你 只 打印   range ， 会 出现 奇怪 的 结果 :
安全
如果 设置 了   " Inexact "   陷阱 ， 它 也 适用 于 验证 有效性 ：
" name "   也 可以 被 修改 ， 在 这种 情况 下   arcname   可以 是 一个 占位 字符串
帮助 源
之后 迭代 器 连续 返回 元素 ， 除非   step   设置 的 值 很 高 导致 被 跳 过
典型 的   53   位 精度 为   Python   浮点数 提供 了   15   16   位 小数 的 精度
bufsize   将 在   " open ( ) "   函数 创建 了   stdin / stdout / stderr   管道 文件 对象 时 作为 对应 的 参数 供应 :
第二个 异议 通常 是 这样 的 ： “ 我 实际上 是 在 告诉 序列 使用 字符串 常量 将 其 成员 连接 在 一起 ”
如果   turtleshape   为 多边形 ， 该 多边形 内部 也 以 新 设置 的 填充 颜色 填充
3.5   新版 功能 .
创建 一个 新 上下文
PKZIP   应用程序 笔记   Phil   Katz   编写 的   ZIP   文件格式 文档 ， 此 格式 和 使用 的 算法 的 创建者
必须 通过 它 的   " __ aiter __ ( ) "   方法 返回 一个   asynchronous   iterator
这些 对象 在 内部 创建 ， 并 由   " fields ( ) "   模块 级 方法 返回 （ 见下文 ）
以下 函数 是 此 模块 的 初始 接口 ：
哪 一种 更受 青睐 呢 ？ 这是 一个 风格 问题 ； 我 通常 的 做法 是 避免 使用   " lambda "
相对 地 ， 本   HOWTO   将会 给 你 一些 基本思路
方法
设置 文件 过滤器 .
与   " perf _ counter ( ) "   相似 ， 但是 返回 时间 为 纳秒
" string "   " str "   " array "   " list "   或   " tuple "   包含 整合 元素
要 获得   3.2   之前 的 行为 ，   " logging . lastResort "   可以 设置 为   " None "
输入 不 完整 ， 需要 更 多 输入 ； 函数   " compile _ command ( ) "   返回   " None "
否则 的话 ，   filename   应当 是 一个   file   object   ， 它 将 被 用来 读取 或 写入 压缩 数据
带有 三个 参数 时 ， 计算   " ( x   y )   %   modulo "
刷新 流 的 写入 缓冲区 （ 如果 适用 ）
在   3.6   版 更改 :   Began   calling   " create _ module ( ) " ,   removing   the   compatibility   warning   for   " importlib . machinery . BuiltinImporter "   and   " importlib . machinery . ExtensionFileLoader " .
" YYYY   MM   DDTHH : MM : SS . ffffff " ， 如果   " microsecond "   不 为   0
如果 提供 了 权重 序列 ， 则 它 必须 与   population   序列 的 长度 相同
复制 枚举 成员 和 值
由   " TextIOBase "   处理 的 下层 二进制 缓冲区 （ 为 一个   " BufferedIOBase "   的 实例 ）
标准 多项 集中 的 类型 标注 泛型
tar   :   未 压缩 的   tar   文件
" headerregistry "   使用 的 解析器 也 在 内部 使用 这个 类
Queue 对象
3.3   新版 功能 .
例如 :
pip   能够 随时 可用   (   PEP   453   ) .
两 函数 都 需要 满足   " str   !   NULL "   ,   " size   >   0 "   和   " format   !   NULL "
当   " stdout   PIPE "   或者   " stderr   PIPE "   并且 子 进程 产生 了 足以 阻塞   OS   管道 缓冲区 接收 更 多 数据 的 输出 到 管道 时 ， 将会 发生 死锁
此 令牌 会 在 任何   ABC   上 每次 调用   " ABCMeta . register ( ) "   时 发生 更改
为了 提供 用户 自定义 对象 实例 化 的 完全 灵活性 ， 用户 需要 提供 一个 ‘ 工厂 ’ 函数   — —   即 在 调用 时 传入 配置 字典 并 返回 实例 化 对象 的 可 调用 对象
文档
" DEVNULL "   表示 使用 特殊 的 文件   " os . devnull "
ZipFile   对象
如果 当前   RAND   方法 不 支持 此 操作 则 会 引发   " SSLError "
返回 当   " timezone "   实例 被 构造 时 指定 的 固定值
在 运行 测试 时 ， 你 可以 通过 添加   v   参数 获取 更 详细 （ 更 多 的 冗余 ） 的 信息
无效 的   "   W "   选项 将 被 忽略 （ 但是 ， 在 发出 第一个 警告 时会 打印 有关 无效 选项 的 警告 消息 ）
通常 是   " c _ short "   的 一个 别名
显然 ， 如下 函数 会 跟 之前 那个 有 一样 的 问题 ：
PEP   405 :   虚拟环境
当 与   " strptime ( ) "   方法 一起 使用 时 ， 如果 使用   " % I "   指令 来 解析 小时 ，   " % p "   指令 只 影响 输出 小时 字 段
默认值 与   " cssclasses "   相同
如果   infile   未指定 ， 则 从   " sys . stdin "   读取
之前 ， 某些 表达式 （ 例如 未 加 圆括号 的 元组 表达式 ） 会 导致 语法错误
" yield "   语句
regular   package   常规 包 传统型 的   package   ， 例如 包含 有 一个   " __ init __. py "   文件 的 目录
此 函数 并 不 实际 改变 消息 的 有效载荷 ， 但 它 会 基于 载荷 数据 将   Content   Transfer   Encoding   标头 相应 地设 为   " 7bit "   或   " 8bit "
注意 多重 赋值 其实 也 只是 元组 打包 和 序列 解包 的 组合
" wrap ( ) " ,   " fill ( ) "   和   " shorten ( ) "   的 作用 方式 为 创建 一个   " TextWrapper "   实例 并 在 其 上 调用 单个 方法
源代码 ：   Lib / _ collections _ abc . py
列表 、 集合 与 字典 的 显示
将 标签 转换 为   ASCII ， 规则 定义 见   RFC   3490
Python   版本 的 编号 形式 是   A . B . C   或   A . B
其 操作数 必须 为 一个   iterable
这 允许 应用 在 出现 当 其他 情况 下会 中止 程序 的 条件 时 仍 能 完成 运行
" add _ help _ option "   ( 默认 :   " True " )   If   true ,   " optparse "   will   add   a   help   option   ( with   option   strings   "   h "   and   "   help " )   to   the   parser .
而 其 缺点 则 是 如果 你 忘记 了 输入 没有 被 舍入 ， 结果 看起来 可能 会 很 奇怪 ：
重新 引发 当前 位于 栈顶 的 异常
Future   对象
回调 处理
它 避免 了 许多 用于 测量 执行 时间 的 常见 陷阱
内置 异常
当 一个 名称 完全 找 不到 时 ， 将会 引发   " NameError "   异常
（ 由   Giampaolo   Rodol à   在   bpo   8807   中 贡献 。 ）
有效 的 属性 名称 是 类 对象 被 创建 时 存在 于类 命名 空间 中 的 所有 名称
这 和 其他 稳定 排序 工具 如   " sorted ( iterable ,   key   keyfunc ,   reverse   True ) [ 0 ] "   和   " heapq . nlargest ( 1 ,   iterable ,   key   keyfunc ) "   保持一致
组合 元组 会以 字典 顺序 根据 所 输入   iterable   的 顺序 发出
测试
" math "   数学 函数
当 被 调用 的 时候 ， 一个 可选 的 方法 应该 将 查找 器 使用 的 任何 内部 缓存 进行 无效
一个 负值   "   N "   表示 子 进程 被 信号   " N "   中断   ( 仅   POSIX ) .
" ( ?   … ) "   正 向前 向 断言
错误 是 由 箭头 指示 的 位置 上面 的   token   引起 的 （ 或者 至少 是 在 这里 被 检测 出 的 ） ： 在 示例 中 ， 在   " print ( ) "   这个 函数 中 检测 到 了 错误 ，   因为 在 它 前面 少 了 个 冒号   ( " ' : ' " )
新闻组 和 邮件 列表 是 彼此 互通 的   — —   如果 你 可以 阅读 新闻 就 不必 再 订阅 邮件 列表
相应 地 ， 它 只 适用 于 无限 的 输入
src   和   dst   应为 路径 类 对象 或 字符串
" MultipartInvariantViolationDefect "   一条 消息 宣称 为   multipart   ，   但 无法 找到 任何 子 部分
它 与   Python   层面 的   " slice "   是 相同 的 对象
当 您 以 交互方式 使用 Python 时 ， 每次 启动 解释器 时 都 会 执行 一些 标准 命令 ， 这 通常 很 方便
" "   Normal " "   ， 指示 该 运算 数是 负 正常 数字
要 从 命令提示符 方便 地 运行 Python ， 您 可以 考虑 在 Windows 中 更改 一些 默认 环境变量
这个 钩子 （ 可 调用 对象 ） 应当 返回 一个 支持 下述 协议 的   path   entry   finder   ， 以 被 用来 获取 一个 专门 针对 来自 网络 的 模块 的 加载 器
移除   " itertools . ifilter ( ) " ， " itertools . izip ( ) "   以及   " itertools . imap ( ) "   的   import
工具 / 示例
" z "   ( " str "   or   " None " )   [ const   char   ]   与   " s "   类似 ， 但   Python   对象 也 可能 为   " None " ， 在 这种 情况 下 ， C   指针 设置 为   " NULL "
Python   3.5 . 5   正式版
如果 函数 定义 中未 使用   " / "   和   "   " ， 则 参数 可以 按 位置 或 按 关键字 传递 给 函数
注解 :
C   标记 生成器 不 使用 以下 标记 类型 值 ， 但   " tokenize "   模块 需要 这些 标记 类型 值
否则 ， 使用 格式   ' % Y   % m   % d   % H : % M : % S , uuu ' ， 其中   uuu   部分 是 毫秒 值 ， 其他 字母 根据   " time . strftime ( ) "   文档
文件类型   位置 和 文件名   注释   system   "   prefix   / lib / python   ver   / distutils / distutils . cfg "   ( 1 )   personal   " $ HOME / . pydistutils . cfg "   ( 2 )   local   " setup . cfg "   ( 3 )
" http . client "   HTTP   协议 客户端
历史 文件
PEP   3110   在   Python   3000   中 捕获 异常   PEP   由   Collin   Winter   撰写 并 实现
当 使用   " Connection . recv "   接收数据 时 ， 数据 会 自动 被 反 序列化
因此 禁止 这样 的 写法 :
command   可以 为 一条 或 以 换行符 分隔 的 多条 语句 ， 其中 前导 空格 像 在 普通 模块 代码 中 一样 具有 作用
Text   和   CDATASection   对象
（ 这里 所说 的 错误 不 包括   " try "   语句 中 由   " except "   所 捕获 的 异常 。 ）   有些 错误 是 无条件 致命 的 ， 会 导致 程序 以非 零 状态 退出 ； 比如 内部 逻辑 矛盾 或 内存 耗尽
第三方 工具 提供 更 易于 使用 和 更 安全 的 替代 方案
当   o1   支持 时 ， 这个 运算 直接 使用 它 储存 结果
除非   " 1   <   ordinal   <   datetime . max . toordinal ( ) "   否则 会 引发   " ValueError "
从 Python   3.6 开始 ， CPython 可以 使用 嵌入式 “ 标记 ” 构建 ， 也 称为 “ 探测器 ” ， 可以 通过 DTrace 或 SystemTap 脚本 观察 ， 从而 更 容易 监视系统 上 的 CPython 进程 正在 做 什么
如果 出现异常 ， 事务 会 被 回滚 ； 否则 ， 事务 会 被 提交
[ 4 ]   由于 存在 自动 垃圾 收集 、 空闲 列表 以及 描述 器 的 动态 特性 ， 你 可能 会 注意 到 在 特定 情况 下 使用   " is "   运算符 会 出现 看似 不 正常 的 行为 ， 例如 涉及 到 实例 方法 或 常量 之间 的 比较 时 就是 如此
" Mock "   是 一个 可以 灵活 的 替换 存根   ( stubs )   的 对象 ， 可以 测试 所有 代码
这些 可能 并 不 嵌套 在 圆括号 中
exposed   是 一个 函数 名 组成 的 序列 ， 用来 指明 只有 这些 方法 可以 使用   " BaseProxy ._ callmethod ( ) "   代理
" excel _ tab "   类 定义 了   Excel   生成 的 、 制表符 分隔 的   CSV   文件 的 常规 属性
常数
https : / / pypi . org :   The   Python   Package   Index ， 以前 也 被 昵称 为   Cheese   Shop   [ 1 ] ， 是 可 下载 用户 自制   Python   模块 的 索引
异常 链
如果   closefd   是   " False "   并且 给出 了 文件 描述符 而 不是 文件名 ， 那么 当 文件 关闭 时 ， 底层 文件 描述符 将 保持 打开 状态
（ 由   Meador   Inge   在   bpo   15153   中 贡献 。 ）
注意 ， 对 代理 使用   " str ( ) "   函数 会 返回 指涉 对象 的 字符串 表示 ， 但是   " repr ( ) "   却会 返回 代理 本身 的 内部 字符串 表示
更 多 Python 资源 ：
把 一个 方法 封装 成类 方法
返回 通过 属性 值   attr   所 设置 的 颜色 对 的 编号
推荐 的   pip   安装 器用   " setuptools "   运行 所有 的   " setup . py "   脚本 ， 即使 脚本 本身 只引 了   " distutils "   包
类似 于   " border ( ) " ， 但   ls   和   rs   均 为   vertch   而   ts   和   bs   均 为   horch
headers   参数 应是 额外 的 随 请求 发送 的   HTTP   信息 头 的 字典
" ' surrogateescape ' "   将 表示 任何 不 正确 的 字节 作为 Unicode 专用 区中 的 代码 点 ， 范围 从 U + DC80 到 U + DCFF
对于 邮件 合并 类型 的 应用 ， 用户 提供 的 数据 有 可能 是 不 完整 的 ， 此时 使用   " safe _ substitute ( ) "   方法 更加 合适   — —   如果 数据 缺失 ， 它会 直接 将 占位 符 原样 保留
基本 对象
3.7   新版 功能 .
头块 要么 以 数据 结束 ， 要么 以 一个 空 行为 终止
新 引发 的 异常 将 导致 旧 异常 的 丢失
序列 可以 通过 切片 来 复制 :
对于 以 字典 为 底层 的 可变 域名 ，   参考   " types . SimpleNamespace ( ) "
在   3.4   版 更改 :   引发   " ImportError "   而 不是   " NotImplementedError "
调用   content _ manager   的   " get _ content ( ) "   方法 ， 将 自身 作为 消息 对象 传入 ， 并 将 其他 参数 或 关键字 作为 额外 参数 传入
否则 ， 你 可以 使用   " os . open ( ) "   函数 来 打开 这个 文件 ， 这会 直接 返回 一个 文件 描述符 （ 结束 时 仍然 需要 关闭 该 文件 ）
下面 的 例子 演示 了   " RobotFileParser "   类 的 基本 用法 :
这是 C 类型   " PyTypeObject "   的 定义 ， 省略 了 只 用于 调试 构建 的 字 段 :
日志 事件 信息 在   " LogRecord "   实例 中 的 记录器 、 处理程序 、 过滤器 和 格式化 程序 之间 传递
一些 用来 从   time   对象 中 提取 字段 的 宏
在   Python   3.3   之前 ， 它们 曾会 引发   " IOError " ， 现在 这是   " OSError "   的 一个 别名
此 转换 是 在 应用 中 进行 的 ； 如 有 可能 将 对 用户 可见 ： 应用 应当 透明 地 将   Unicode   域名 标签 转换 为线 上 的   IDNA ，   并 在   ACE   标签 被 呈现 给 用户 之前 将 其 转换 回   Unicode
为了 避免 干扰 到 生成器 表达式 本身 的 预期 操作 ， 禁止 在 隐式 定义 的 生成器 中 使用   " yield "   和   " yield   from "   表达式
该 可 调用 对象 将 接受 归档文件 的 路径 ， 加上 该 归档文件 要 被 解包 的 目标目录
请 注意 ， 此 下载 可能 比 要求 的 要 大 ， 但是 如果 要 执行 大量 安装 ， 则 拥有 本地 缓存 ​ ​ 的 副本 非常 有用
当 执行 成功 时 ，   callback   会 被 用于 处理 执行 后 的 返回 结果 ， 否则 ， 调用   error _ callback
有 哪些 重要 的 项目 是 用   Python   开发 的 ？
上下文 旗标 将 在 遇到 特定条件 时 被 设定
Python   3.5 . 5   正式版
也就是说 ，   " Popen "   等同于 :
这 不会 修改 您 的 原始 序列 ， 而是 构建 一个 反向 顺序 的 新 副本 以 进行 迭代
这个 改变 不会 影响 其 行为 ， 因为 自   Python   3.3   起   " Py _ UNICODE "   是   " wchar _ t "   的 别名
Window   对象
此 方法 将类 作为 其字 段 的 元组 按 顺序 比较
命令行 接口
为   " x "   存储 的 值 是 与 十进制 的 值   " 1.2 "   ( 非常 接近 )   的 近似值 ， 但 不 完全 等于 它
3.7   新版 功能 .
这些 测试 显著 增加 了   PGO   任务 的 时间 并且 可能 无助于 提升 最终 可执行文件 的 优化 程度
现代 的   tar   实现 ， 包括   GNU   tar ,   bsdtar / libarchive   和   star ， 完全 支持 扩展   pax   特性 ； 某些 老旧 或 不 维护 的 库 可能 不 受 支持 ， 但 应当 会 将   pax   归档 视为 广受 支持 的   ustar   格式
这 不仅仅 是 由于 缺少 开始 / 结束 括号 缺少 声明 和 高级 数据类型 也 是 其中 的 原因 但 缩进 基于 语法 肯定 有 帮助
操作系统 实用程序
3.5   新版 功能 .
增加 freeze 包 的 测试用例
" for "   语句
它 适合 当 语法 上 需要 一条 语句 但 并不需要 执行 任何 代码 时 用来 临时 占位 ， 例如 :
从   " TextIOBase "   分离 出 下层 二进制 缓冲区 并 将 其 返回
支持 的 XPath 语法
格式 字符
新增 模块
3.9   版后 已 移除 :   " collections . abc . AsyncIterator "   now   supports   " [ ] "
3.7   新版 功能 .
当   " close ( ) "   方法 被 调用 时 将 会 丢弃 文本 缓冲区
安全
从   " exec _ module ( ) "   返回 的 任何 值 都 将 被 忽略
示例
这是 通常 的 学校 教学 中 标准 的 处理 方式 ：
虽然   " sqlite3 "   模块 的   " Cursor "   类 实现 了 此 属性 ， 但 数据库 引擎 本身 对于 确定   " 受 影响 行 " / " 已 选择 行 "   的 支持 并 不 完善
0.11   版 :   2006   年   7   月   1   日 发布
如果 存在 关键字 参数 ， 它们 会先 通过 以下 操作 被 转换 为 位置 参数
" class "   ( 强制 )
如果 你 是 浮点运算 的 重度 用户 ， 你 应该 看 一下 数值 运算   Python   包   NumPy   以及 由   SciPy   项目 所 提供 的 许多 其它 数学 和 统计 运算 包
IP 主机 地址
继承
字典 合并 与 更新 运算符
补丁 作者   Zackery   Spytz
这些 函数 会 访问 底层 库 的   " rl _ completer _ word _ break _ characters "   变量
braceidpattern   此 属性 类似 于   idpattern   但是 用来 描述 带花 括号 的 占位 符 的 模式
该 构造 器 接受 一个 参数 作为 模板 字符串
缺点 是 GC 可能 是 所 测量 功能 性能 的 重要 组成部分
接受 包含 多个 路径 的 序列   paths   ， 返回   paths   的 最长 公共 子 路径
构建 的 改变
用户 的   mailcap   文件   " $ HOME / . mailcap "   中 的 设置 将 覆盖 系统   mailcap   文件   " / etc / mailcap " ,   " / usr / etc / mailcap "   和   " / usr / local / etc / mailcap "   中 的 设置
库
实现 原始 锁 对象 的 类
会 添加 一个 形 如下 文 的 头 字 段 ：
" pathlib "   面向对象 的 文件系统 路径
当 从 某个 值 引用 的 选项 并 不 存在 时 引发 的 异常
（ 过去 八年 有 许多 人 都 为此 付出 过 努力 ， 问题 最终 由   Serhiy   Storchaka   在   bpo   13153   中 解决 。 ）
打印 原始 计时 结果 ； 重复 更 多位数 精度
跳 到 分块 末尾
返回 小时 ， 从 0 到 23 的 整数
模块 和 实例 这样 的 对象 具有 可 更新 的   " __ dict __ "   属性 ； 但是 ， 其它 对象 的   " __ dict __ "   属性 可能 会设 为 限制 写入 （ 例如 ， 类会 使用   " types . MappingProxyType "   来 防止 直接 更新 字典 ）
short _ empty _ elements   控制 不 包含 内容 的 元素 的 格式化 ： 如为   " False "   (   默认值 )   则 它们 会以 开始 / 结束 标记 对 的 形式 被 发送 ， 如果 设 为   " True "   则 它们 会以 单个 自 结束 标记 的 形式 被 发送
...   安装 科学计算 类   Python   软件包 ？
3.5   新版 功能 :   The   name   " assertNotRegexpMatches "   is   a   deprecated   alias   for   " assertNotRegex ( ) " .
平台 特定 模块
向 打开 的 文件 写入 值
任何 其他 值 都 将 导致 引发   " ValueError "
要 根据 整个 总体 数据 来 计算 方差 ， 请 参见   " pvariance ( ) "
在 处理 方案 无法 找到 时 将 引发   " LookupError "
属性 引用 使用   Python   中 所有 属性 引用 所 使用 的 标准 语法 :   " obj . name "
等价 于   " pack ( ) "   函数 ， 使用 了 已 编译 的 格式
如果   dir   不 为   " None " ， 则 在 指定 的 目录 创建 文件 ， 是   " None "   则 使用 默认 目录
基础 数据类型
实现   " ' ignore ' "   错误处理 方案 ： 忽略 错误 格式 的 数据 并且 不 加 进一步 通知 就 继续执行
在   3.8   版 更改 :   可能 会 在 内部 使用 平台 专属 的 快速 拷贝 系统 调用 以 更 高效 地 拷贝 文件
归档 程序 示例
如果   " dwFlags "   被 指定 为   " STARTF _ USESTDHANDLES " ， 则 此 属性 是 进程 的 标准 错误 句柄
" ipaddress "   试图 让 这个 过程 变得 简单 直观
这 是因为 整数 是   immutable   对象 ， 当 我们 执行   " x   x   +   1 "   时 我们 并 不是 改变 了   " 5 "   这个 对象 的 值 ； 而是 创建 了 一个 新 的 对象   ( 整数   " 6 " )   并 将 其 赋值 给   " x "   ( 也 就是 改变 了   " x "   所 指向 的 对象 )
内存 映射 文件 对象 的 行为 既 像   " bytearray "   又 像 文件 对象
对于   " bytes "   和   " bytearray "   对象 也 有 类似 的 修改
seq2   必须 为 产生 长度 为   2   的 用作 键值 对 的 元素 的 可 迭代 对象
这个 模块 实现 了 特定 目标 的 容器 ， 以 提供 Python 标准 内 建 容器   " dict "   ,   " list "   ,   " set "   ,   和   " tuple "   的 替代选择
返回 一个 文本框 控件 对象
3.2   新版 功能 :   body   现在 可以 是 可 迭代 对象 了
prefix   、   suffix   和   dir   参数 与   " mkstemp ( ) "   中 的 同名 参数 类似 ， 不同之处 在于 不 支持 字节 类型 的 文件名 ， 不 支持   " suffix   None "   和   " prefix   None "
使用 连接 作为 上下文 管理器
从 虚拟环境
如果   mode   来自 一个 门则 返回 非零值
源代码 ：   Lib / tempfile . py
出于 效率 和 一致性 的 原因 ， Python 仅 在 第一次 导入 模块 时 读取 模块 文件
返回 性能 计数器 的 值 （ 以小 数秒 为 单位 ） ， 即 具有 最高 可用 分辨率 的 时钟 ，   以 测量 短 持续时间
本 节 描述 Python 类型 对象 和 单一 实例 对象 象 None
归档 操作
相反 ， 统计分析 （ 不是 由该 模块 完成 ） 随机 采样 有效 指令 指针 ， 并 推断 时间 花费 在 哪里
如果 你 想要 用 一次 调用 执行 多条   SQL   语句 请 使用   " executescript ( ) "
" distutils . ccompiler "   CCompiler 基类
默认值 是   " None " ， 使用 标准   Base64   字母表
" shutil . rmtree ( ) "   在   Windows   上 现在 会 移除 目录 连接 而 不会 递归 地先 移除 其中 的 内容
函数
常规 的   Netscape   Cookie   协议 和   RFC   2965   定义 的 协议 都 可以 处理
文档 错误
3.1   新版 功能 .
因此 不要 对 产生 的 负数 感到 惊慌
返回   o1   、   o2   相乘 的 结果 ， 如果 失败 ， 返回   " NULL "
用   msg   来 更新   hmac   对象
如果 搜索 到   " object "   有 这个 方法 但   format _ spec   不为 空 ，   format _ spec   或 返回值 不是 字符串 ， 会 触发   " TypeError "   异常
迭代 器 的 第一个 值 与   " firstweekday "   属性 的 值 一至
当前 的   Python   稳定 版本 的 标准 文档 可 在   https : / / docs . python . org / 3 /   查看
在   3.1   版 更改 :   添加 了 对   rename   的 支持
如果   self   已 死亡 则 返回   " None "
" name "   与   " path "   属性 可 通过 对 构造 器 使用 仅 关键字 参数 来 设定
" Future "   实例 由   " Executor . submit ( ) "   创建
举个 实例 ：
" Stats "   类
请 注意 比较 、 成员 检测 和 标识号 检测 均 为 相同 优先级 ， 并 具有 如 比较 运算 一节 所 描述 的 从 左 至 右 串连 特性
示例 :
返回 一个 字节 数组 ， 可 转换 为 人类 可读 的 描述 ， 描述 的 是 音频文件 中 使用 的 压缩 类型
例如 ，   U + 2160 （ ROMAN   NUMERAL   ONE ） 与   U + 0049 （ LATIN   CAPITAL   LETTER   I ） 完全相同
3.8   新版 功能 .
模块   " logging . handlers "   日志 记录 模块 附带 的 有用 处理程序
参数 的 条件 是   " alpha   >   0 "   和   " beta   >   0 "
但 引用 它 时 必须 使用 它 的 全名
此 方法 注册 一个 授权 回调 对象
在 进行 编码 时   utf   8   sig   编解码器 将 把   " 0xef " ,   " 0xbb " ,   " 0xbf "   作为 头 三个 字节 写入 文件
返回 日期 的 预期 格列 高利 历 序号
3.7   新版 功能 .
对 记录 的 属性 字典 执行 封存 并 以 二进制 格式 将 其 写入 套 接字
策略 是 改变   " asyncio . get _ event _ loop ( ) "   这 类 函数 行为 的 一个 底层 机制
递归 控制
文本   I / O
日志 级别
在 循环 之外 ，   由于 有 内部 缓存 ， 没有 太 大 区别
当   func   是 一个 描述 器 （ 例如 普通   Python   函数 ,   " classmethod ( ) " ,   " staticmethod ( ) " ,   " abstractmethod ( ) "   或 其他   " partialmethod "   的 实例   ） 时 ,   对   " __ get __ "   的 调用 会 被 委托 给 底层 的 描述 器 ， 并会 返回 一个 适当 的 部分 对象 作为 结果
在 下 一次 调用 生成器   " __ next __ ( ) "   方法 的 时候 ， 函数 会 恢复 执行
在 适用 于   Linux   的   Windows   子系统 和   QEMU   用户 模拟器 上   ， 使用   " os . posix _ spawn ( ) "   的   Popen   构造 器 不再 会 因 找 不到 程序 等 错误 而 引发 异常 ， 而是 上下级 进程 失败 并 返回 一个 非零 的   " returncode "
父 进程 的 所有 资源 都 由子 进程 继承
" HTTPConnection "   实例 拥有 以下 方法 ：
另 请参阅 为什么 必须 在 方法 定义 和 调用 中显式 使用 “ self ” ？
（ 由   Pablo   Galindo   Salgado   在   bpo   39372   中 贡献 。 ）
传递 的 所有 关键字 参数 必须 与 函数 接受 的 其中 一个 参数 匹配 （ 比如   " actor "   不是 函数   " parrot "   的 有效 参数 ） ， 它们 的 顺序 并 不 重要
虽然 这些 模块 设计 为 与 ` Python   包 索引   < https : / / pypi . org > ` __ 结合 使用 ， 但 它们 也 可以 与 本地 索引 服务器 一起 使用 ， 或者 根本 不 使用 任何 索引 服务器
在   3.8   版 更改 :   Added   " args "   and   " kwargs "   properties .
元素 对象
记录 日志 中 引发 的 异常
这个 函数 可以 通过 下面 的 任何 一种 方式 调用 :
低 中位数 一定 是 数据 集 的 成员
调用 后者 以 实现 深层 拷贝 操作 ； 它 应 传入 一个 参数 即   " memo "   字典
Packer   对象
注解 :
" multiprocessing "   是 一个 支持 使用 与   " threading "   模块 类似 的   API   来 产生 进程 的 包
函数   " math . fmod ( ) "   返回 的 结果 则 会 具有 与 第一个 参数 相同 的 正负 性 ， 因此 在 这种 情况 下 将 返回   "   1e   100 "
从   3.4   开始 ， 也 支持   Unix   域套 接字
对 程序 的 后续 改进 要求 每次 访问 都 要 重新 计算 单元格 ； 但是 ， 程序员 不 希望 影响 直接 访问 该 属性 的 现有 客户端 代码
构建 XML 文档
GitHub 上 开发 CPython 源代码 的 CPython 项目
如果 参数 是 一个 复数 ， 则 返回 它 的 模
C   API   中 的 改变
模块   " logging . handlers "   日志 记录 模块 附带 的 有用 处理程序
该 函数 应该 采用 两个 参数 进行 比较 ， 然后 返回 负值 为 小于 ， 如果 它们 相等 则 返回 零 ， 或者 返回 大于 大于 的 正值
在   3.3   版 更改 :   添加 了   charset   选项
最好 一直 定义   " PY _ SSIZE _ T _ CLEAN "   这个 宏
字符串 是 可以 被 索引   （ 下标 访问 ） 的 ， 第一个 字符 索引 是   0
当 这个 程序 在 收到 错误 的 无效 的 输入 时 ， 它 甚至 能 在 执行 计算 之前 先 退出 ， 还 能 显示 很 有 帮助 的 错误信息
如果   " prefix _ chars   "   被 指定 并且 没有 包含   "   "   字符 ， 在 这种 情况 下 ，   "   h "   "   help "   不是 有效 的 选项
转义序列   意义   注释   " \ N { name } "   Unicode   数据库 中 名称 为   name   的   ( 4 )   字符   " \ uxxxx "   16 位 十六进制 数   xxxx   码位 的 字符   ( 5 )   " \ Uxxxxxxxx "   32 位 16 进制 数   xxxxxxxx   码位 的 字   ( 6 )   符
Nd   十进制 数字
这个 模块 定义 了 以下内容 ：
注释
安全
特定 于 Windows 的 标准 模块 记录 在   Windows 系统 相关 模块 中
其他 类 不能 继承 自它
不 应当 使用 的 选项
关于 这个 过程 ，   PEP   3147   中有 更 多 细节 ， 包括 一个 决策 流程图
一个   bytes   对象 ， 其中 包含 压缩 数据 结束 之后 的 任何 字节 数据
（ 由   Raymond   Hettinger   在   bpo   35664   中 贡献
如果 你 需要 向 探索性 测试 传入 参数 ， 必须 显式 地 使用   " discover "   子 命令
堆 元素 可以 为 元组
一个 简单 的 多 进程 程序 示例 是 :
注意   blue   的 两个 记录 如何 保留 它们 的 原始 顺序 ， 以便   " ( ' blue ' ,   1 ) "   保证 在   " ( ' blue ' ,   2 ) "   之前
源代码 :   Lib / xdrlib . py
相当于   " list [ low : high ]   itemlist "
只 用于 识别 的 字符串
启动 程序 与 所有 可用 的 Python 版本 兼容 ， 因此 安装 哪个 版本 无关紧要
" K "   ( " int " )   [ unsigned   long   long ]   将 一个   Python   整型 转化成 一个   C   " unsigned   long   long "   无 符号 长长 整型   ， 并 不 检查 溢出 问题
注意 ：   " notify ( ) "   方法 和   " notify _ all ( ) "   方法 并 不会 释放 锁 ， 这 意味着 被 唤醒 的 线程 不会 立即 从 它们 的   " wait ( ) "   方法 调用 中 返回 ， 而是 会 在 调用 了   " notify ( ) "   方法 或   " notify _ all ( ) "   方法 的 线程 最终 放弃 了 锁 的 所有权 后 返回
安全
当 一个 类 属性 为 描述 器时 ， 它 的 特殊 绑定 行为 就 会 在 属性 查找 时 被 触发
相反 ， 所有   Py2 . x   版本 都 支持   cmp   参数 来 处理 用户 指定 的 比较 函数
在 使用 交互 解释器 时 有没有 最小化 输入量 的 方式 ？
你 可以 用 如下 方法 在   " Complex "   和   " Real "   中 加入 ` ` MyFoo ` ` ：
修改 了   " END _ FINALLY "   和   " WITH _ CLEANUP _ START "   的 行为
Future   对象
3.5   新版 功能 .
各种 对齐 选项 的 含义 如下 ：
例子 中 的 实例 定义 了 扩展 命名 为   " demo "   ， 从 单一 源码 文件 构建   " demo . c "
通过 这种 方式 ， 对 特定   path   entry   位置 的   path   entry   finder   的 高 耗费 搜索 只 需 进行 一次
此 方法 将 等待 （ 使用 传递 给 构造函数 的   " delayfunc ( ) "   函数 ） 进行 下 一个 事件 ， 然后 执行 它 ， 依此类推 ， 直到 没有 更 多 的 计划 事件
这 两个 函数 之间 最 重要 的 不同点 在于   " import _ module ( ) "   返回 指定 的 包 或 模块   ( 例如   " pkg . mod " ) ， 而   " __ import __ ( ) "   返回 最高 层级 的 包 或 模块   (   例如   " pkg " )
如果   " endptr "   不是   " NULL "   ， 尽可能 多 的 转换 字符串 并 将   "   endptr "   设置 为 指向 第一个 未 转换 的 字符
如果 提供 了 回调 而且 值 不是   " None "   ， 并且 返回 的 弱 引用 对象 仍然 存活 ， 则 在 对象 即将 终结 时 将 调用 回调 ; 弱 引用 对象 将 作为 回调 的 唯一 参数传递 ； 指示 物将 不再 可用
错误 消息 的 开头 部分 以 堆栈 回溯 的 形式 显示 发生 异常 的 上下文
概述
当 需要 混用 动态 类型 和 静态 类型 的 代码 时 ， 上述 行为 可以 让   " Any "   被 用作 应急 出口
窗口 控制   " bgcolor ( ) "   背景 颜色   " bgpic ( ) "   背景图片   " clear ( ) "   |   " clearscreen ( ) "   清屏   " reset ( ) "   |   " resetscreen ( ) "   重置   " screensize ( ) "   屏幕 大小   " setworldcoordinates ( ) "   设置 世界 坐标系
每个 被 挂 起 的 协程 只 返回 一个 栈 框架
因此   ， 如果 您 已 将 Python 安装 到   " C : \ Python \ "   ， 则 默认 库 将 驻留 在   " C : \ Python \ Lib \ "   中 ， 第三方 模块 存储 在   " C : \ Python \ Lib \ site   packages \ "
库
（ 空 字符串 表示 根包 。 ）
Unicode 类型
文件 操作
Python 提供 了 两个 钩子 来 让 你 自定义 它 ： " sitecustomize "   和   " usercustomize "
（ 由   Kyle   Stanley ,   Antoine   Pitrou   和   Yury   Selivanov   在   bpo   37228   中 贡献 。 。 ）
解决方案 的 另 一部分 是   " QueueListener " ， 它 被 设计 用来 作为   " QueueHandler "   的 对应
问题 1 ： 采用   FILE   参数 的 所谓 “ 极 高级 ” 函数 在 多 编译器 环境 中 不起作用 ，   因为 每个 编译器 的 FILE 结构 体 概念 都 不同
如果 消息 为 非   " multipart " ,   " multipart / related "   或   " multipart / alternative " ， 则 先 调用   " make _ mixed ( ) "   然后 再 继续 上述 步骤
上文 所用   Unicode   类别 码 的 含义 :
异常
SMTPServer   对象
salt   :   用于 随机 哈希 的 盐值 （ 对于   BLAKE2b   最长   16   字节 ， 对于   BLAKE2s   最长   8   字节 ）
例如 这 段 代码 :
如果 文件 已经 存在 ，   则 抛出   " FileExistsError "   异常
它 提供 了 比 “   标准 库 参考 ” 中 相应 部分 更 平和 的 介绍
" string "   常见 的 字符串 操作
可以 单独 列出 字符 ， 也 可以 通过 给出 两个 字符 并用   " '   ' "   标记 将 它们 分开 来 表示 一系列 字符
类似   " PyFunction _ New ( ) " ， 但 还 允许 设置 函数 对象 的   " __ qualname __ "   属性
尽管 这些 工具 非常 强大 ， 但 微小 的 设计 错误 却 可以 导致 一些 难以 复现 的 问题
URL   解析
进入 一个 轮询 循环 ， 其 在 循环 计数 超出 或 所有 打开 的 通道 关闭 后 终止
属性
创建   " num "   和   " arr "   时 使用 的   " ' d ' "   和   " ' i ' "   参数 是   " array "   模块 使用 的 类型 的   typecode   ：   " ' d ' "   表示 双 精度 浮点数 ，   " ' i ' "   表示 有 符号 整数
用法 示例 :
Python   3.5   有 什么 新 变化
不同于   " BoundedSemaphore " ， " Semaphore "   允许 执行 的   " release ( ) "   调用 多于   " acquire ( ) "   调用
实值 分布
（ 另 一个 合理 有效 的 惯用 方法 是   " io . StringIO "   ）
例如 :
tp _ call   协议
将 本地 管理器 对象连接 到 一个 远程 管理器 进程 :
库
发布 日期 :   2019   05   06
打包 单精度 浮点数   value
所以 分数 ，   小数 ， 和 十进制 都 可以 用 ， 负值 也 可以 支持
在   3.8   版 更改 :   在   Windows   上 ， 现在 默认 会 使用   " ProactorEventLoop "
该 模块 实现 了 控制台   I / O   API   的 普通 和 宽 字符 变体
位 掩码   含义   " A _ ATTRIBUTES "   用于 提取 属性 的 位 掩码   " A _ CHARTEXT "   用于 提取 字符 的 位 掩码   " A _ COLOR "   用于 提取 颜色 对字段 信息 的 位 掩码
有关 弱 引用 的 更 多 信息 请参阅   " weakref "   模块
移除
3.5   新版 功能 .
comp . lang . python   新闻组 非常 活跃 ， 但 不是 所有   Python   用户 都 会 在 新闻组 发帖 ， 许多 人 甚至 不会 阅读 新闻组
它 接受 一个   domain   ， 它 与   " textdomain ( ) "   接受 的 域 相同
给定 用户 的 数值   ID ， 返回 密码 数据库 的 对应 项目
在   3.2   版 更改 :   Added   support   for   re   encoding   " 8bit "   message   bodies ,   and   the   linesep   argument .
这 表示 添加 到达 UTC 的 本地 时间 的 值
举例来说 ， 如果   longopts   为   " [ ' foo ' ,   ' frob ' ] " ， 则 选项   "   fo "   将 匹配 为   "   foo " ， 但   "   f "   将 不能 得到 唯一 匹配 ， 因此 将 引发   " GetoptError "
使用   " Mock "   的 常见 场景 ：
有关 其他 形参 的 说明 请 查阅   " loop . subprocess _ shell ( ) "   的 文档
实参 也 可以 是   NaN （ 非 数字 ） 、 正负 无穷大 的 字符串
栅栏 对象
DocTestFinder   对象
如果 套 接字 存在 错误 ， 则 静默 地 丢弃 数据包
DefaultCookiePolicy   对象
" malloc _ debug " :   与   " malloc "   相同 但 还 会 安装 调试 钩子
将 两个 参数 的   function   从 左 至 右 积累 地 应用 到   iterable   的 条目 ， 以便 将 该 可 迭代 对象 缩减 为 单一 的 值
从   C   API   移 除了 下列 函数
基础
目前 ， 该 模块 旨在 作为 脚本 调用
" TextWrapper "   构造 器 接受 多个 可选 的 关键字 参数
此 示例 文件 设置 与 上 一 示例 采用 相同 的 选项 ：
在   3.6   版 更改 :   接受 一个 类 路径 对象
3.3   新版 功能 :   使用   " __ suppress _ context __ "   属性 来 抑制 异常 上下文 的 自动 显示
注解 :
安装者 可以 通过 编辑   " setup . cfg "   来 覆盖 你 放在   " setup . py "   中 的 配置
使用 有 界 信号量 能 减少 这种 编程 错误 ： 信号量 的 释放 次数 多于 其 请求 次数
文本 I / O 类 使用   " str "   数据
data   可以 是 序列 或 可 迭代 对象
字典 合并 与 更新 运算符
（ 仅   POSIX ）
集成 新 的 命令
你 可以 任意 使用 源码 ， 只要 你 保留 版权 信息 并 在 你 基于   Python   的 产品 文档 中 显示 该 版权 信息
参考文献
首先 ， 运行   Python   解释器 ， 导入   " re "   模块 ， 然后 编译 一个 正则
默认 情况 下 禁用 可 加载 扩展
基本 定制
注解 :
模块 加载 器 提供 关键 的 加载 功能 ： 模块 执行
在 其他 情况 下 ， 它 必须 为 字节 串
（ 由   Till   Varoquaux   和   Konstantin   Kashin   贡献 。 ）
" ' r + ' "   表示 打开 文件 进行 读写
数据类型
" pass "   的 另 一个 可以 使用 的 场合 是 在 你 编写 新 的 代码 时 作为 一个 函数 或 条件 子句 体 的 占位 符 ， 允许 你 保持 在 更 抽象 的 层次 上 进行 思考
对 这个 类 的 需求 已 部分 由 直接 创建   " dict "   的 子类 的 功能 所 替代 ； 不过 ， 这个 类 处理 起来 更 容易 ， 因为 底层 的 字典 可以 作为 属性 来 访问
参见 :
通常 ， 这些 调用 指定   " ArgumentParser "   如何 获取 命令行 字符串 并 将 其 转换 为 对象
在   3.9   版 更改 :   The   function   no   longer   strips   whitespaces   from   stderr   .
发送 一个 随机 生成 的 消息 到 另一端 ， 并 等待 回复
本节 中 的 常量 仅 与   C   模块 相关
构建
"   W "   或   "   write   unchanged   files "   选项 用来 告诉   2to3   始终 需要 输出 文件 ，   即使 没有 任何 改动
返回   num   个 高 加密 强度 伪 随机 字节 数据
当 底层 锁 是 个   " RLock "   ， 不会 使用 它 的   " release ( ) "   方法 释放 锁 ， 因为 当 它 被 递归 多次 获取 时 ， 实际上 可能 无法 解锁
通常 ， 你 需要 获取 更 多 信息 ， 而 不仅仅 是 正则 是否 匹配
C   API   的 变化
感知 型 对象 和 简单 型 对象
该 构造 器 也 适用 于 拷贝 集合   ( " c   set ( s ) " )
参数   defaults ,   annotations   和   closure   设 为   " NULL "
就 地 实现   " TOS   TOS1   @   TOS "
异常 层次结构
如果 那些 值 很 重要 ， 则 应 改用   " itertools . zip _ longest ( ) "
这 意味着 选项 和 非 选项 参数 可能 会 混 在 一起
在 生成 任何 工作 线程 前 ， 应该 在 主线 程中 初始化 信号量
" '   ' "   强制 将 填充 放置 在 符号 （ 如果 有 ） 之后 但 在 数字 之前
" __ import __ ( ) "   现在 会 引发   " ImportError "   而 不是   " ValueError " ， 后者 曾经 会 在 相对 导入 超出 其 最高 层级 包时 发生
当 只 需要 简单 的 功能 时 ， 首选 字符串 方法 因为 它们 更 容易 阅读 和 调试 :
3.4   新版 功能 .
将 根据 下表 ， 将 DOM 规范 中 使用 的 IDL 类型 映射 为 Python 类型
这 意味着 如果 语句 体从 序列 中 删除 了 当前 （ 或 之前 ） 的 一项 ， 下 一项 就 会 被 跳 过 （ 因为 其 标号 将 变成 已 被 处理 的 当前 项 的 标号 ）
特殊 参数
有时候 ， 我们 需要 暂时 更改 日志 配置 ， 并 在 执行 某些 操作 后 将 其 还原
有关 详细信息 ， 请参阅   Python   打包 用户 指南 中 的 快速 推荐 部分
此 方法 应由 想要 使用 格式化 时间 的 格式 器中 的   " format ( ) "   调用
通过 名称 而 不是 索引 访问 索引
由 尖括号   ( " < ... > " )   括 起来 的 内容 是 对于 所 定义 符号 的 非正式 描述 ； 即 可以 在 必要 时 用来 说明   ' 控制字符 '   的 意图
Tcl / Tk 集成 到 Python 中 已经 有 一些 年头 了
结果 状态   " MHMessage "   状态   R   标记 和   O   标记   非   " unseen "   序列   O   标记   " unseen "   序列   F   标记   " flagged "   序列   A   标记   " replied "   序列
参见 :
如果 可能 ， 在 默认 浏览器 的 新窗口 中 打开   url   ， 否则 ， 在 唯一 的 浏览器 窗口 中 打开   url
用于 协程 兼容 类 的 抽象 基类
Launcher   documentation :   适用 于 Windows 的 Python 启动器
多重 继承
函数 名以 " is " 开始 的 函数 主要 作为   " getmembers ( ) "   的 第 2 个 参数 使用
安全
发布 日期 :   2015   09   09
当有 疑问 时 ， 请 避免 设置   inline _ comment _ prefixes
PEP   488   Elimination   of   PYO   files   PEP   由   Brett   Cannon   撰写 并 实现
Counter 对象 有 一个 字典 接口 ， 如果 引用 的 键 没有 任何 记录 ， 就 返回 一个 0 ，   而 不是 弹 出 一个   " KeyError "   :
自定义
将   " intern ( ) "   转换 为   " sys . intern ( ) "
文档
pminrow   和   pmincol   指定 要 在 面板 中 显示 的 矩形 的 左上角
做 得 不错
由 被 视为 空白 符号 的   ASCII   字符 组成 的 字符串
对 负数 进行 分数 幂次 运算 将 返回   " complex "   数值
一个 当 密码 输入 可能 被 回 显时 发出 的   " UserWarning "   子类
与 真正 的 字典 不同 ， 键 与 键 之间 不但 存在 顺序 关系 ， 还 可以 重复
其他 形符
如果   futrue   在 完成 前 被 取消 则   " CancelledError "   将 被 触发
Kevent   对象
" combinations ( ) "   的 代码 可 被 改写 为   " permutations ( ) "   过滤 后 的 子 序列 ，   （ 相对 于 元素 在 输入 中 的 位置 ） 元素 不是 有序 的
PEP   370 :   分 用户 的   site   packages   目录
库
并发 性 和 多线程
在   3.3   版 更改 :   失败 时 返回值   "   1 "
" collected "   是 该代中 被 回收 的 对象 总数 ；
offset   参数 必须 指定 为 一个   " timedelta "   对象 ， 表示 本地 时间 与   UTC   的 时差
asyncio   还有 下列 低 层级   API   可 配合 子 进程 使用 :   " loop . subprocess _ exec ( ) " ,   " loop . subprocess _ shell ( ) " ,   " loop . connect _ read _ pipe ( ) " ,   " loop . connect _ write _ pipe ( ) "   以及 子 进程 传输 和子 进程 协议
结果 是 使用   " ROUND _ HALF _ EVEN "   舍入 模式 正确 舍入 的
可 用于 类型 提示 和 标注
选项   描述   orient   One   of   " horizontal "   or   " vertical "
相反 ， 低级 信号处理 程序 设置 一个 标志 ， 告诉   virtual   machine   稍后 执行 相应 的   Python   信号处理 程序 （ 例如 在 下 一个   bytecode   指令 ）
确保 所有 堆 分配 类型 的 自定义   " tp _ dealloc "   函数 会 减少 类型 的 引用 计数
如果   lock   为 一个   " Lock "   或   " RLock "   对象 则 该 对象 将 被 用于 同步 对值 的 访问
在 根 日志 记录器 上 记录 一条   " INFO "   级别 的 消息
从   Python   3.6   开始 ， 在   " async   def "   函数 中 可以 使用   " async   for "   子句 来 迭代   asynchronous   iterator
（ 由   Joannah   Nanjekye   和   Victor   Stinner   在   bpo   35537   中 贡献 。 ）
" glob "   Unix   风格 路径名 模式 扩展
当 使用   " stdout   PIPE "   或   " stderr   PIPE "   并且 子 进程 产生 了 足以 阻塞   OS   管道 缓冲区 等待 接收 更 多 的 数据 的 输出 时 ， 此 方法 会 发生 死锁
However ,   as   this   migration   is   currently   still   incomplete ,   the   legacy   versions   of   those   guides   remaining   available   as   安装 Python 模块 （ 旧版 ）   and   分发   Python   模块 （ 遗留 版本 ） .
程序 可以 通过 创建 新 的 异常 类来 命名 它们 自己 的 异常 （ 有关 Python   类 的 更 多 信息 ， 请参阅 类 ）
实现   " TOS   TOS1   &   TOS "
（ POSIX   专属 ）
3.4   新版 功能 .
你 可以 多次 调用   " hash . update ( ) "   至 你 所 想要 的 任意 次数 以 迭代 地 更新 哈希 值 :
在   3.6   版 更改 :   name   形参 接受 一个   path   like   object
如果   initializer   不 为   " None " ， 则 每个 工作 进程 将会 在 启动 时 调用   " initializer (   initargs ) "
使用 工作 进程
稍后 ， 调用   " parse _ args ( ) "   将 返回 一个 具有   " integers "   和   " accumulate "   两个 属性 的 对象
用法 ：
在 其他 方面 它 都 类似 于   " abstractmethod ( ) "
异常
字符串 和 字节 串字 面值 都 可以 带有 前缀   " ' r ' "   或   " ' R ' " ； 这种 字符串 被 称为 原始 字符串 其中 的 反 斜杠 会 被 当作 其 本身 的 字面 字符 来 处理
返回 以 整数 表示 的 当前 文件 “ 文件 描述符 ”
参见 :
3.5   新版 功能 .
形参   module   为 要 读取 模块 名称 的 字符串 ； 它 可能 是 某个 包 内部 的 模块 名称
CPython   implementation   detail :   在   CPython   中 ， 由于 存在 全局 解释器 锁   ， 同一 时刻 只有 一个 线程 可以 执行   Python   代码 （ 虽然 某些 性能 导向 的 库 可能 会 去除 此 限制 ）
（ 由   Jeroen   Demeyer ,   Mark   Shannon   和   Petr   Viktorin   在   bpo   36974   中 贡献   。 ）
" Control   B "   光标 向 左 ， 如果 可能 ， 包含 前 一行
虚拟环境 和 包
执行 一次   TurtleScreen   刷新
处理程序 的 级别
错误 和 异常
PEP   由   Eric   V
源代码 ：   Lib / logging / __ init __. py
如果 任一 参数 为 复数 ， 另 一 参数 会 被 转换 为 复数 ；
在线 程 开始 前 改变 一个 字 段 具有 设置 全 系统 默认值 的 效果
增量 压缩 和 解压
" loop . call _ later ( ) "   在 给定 时间 之后 调用 回调 函数
path   可以 是 一个   path   like   object
一个 模块 被 确定 为 一个包 的 条件 是 ： 它 的 文件 路径 （ 由   " ExecutionLoader . get _ filename ( ) "   提供   ） 当 文件 扩展名 被 移除 时 是 一个 命名 为   " __ init __ "   的 文件 ，   并且 这个 模块 名字 本身 不是 以 ` ` __ init __ ` ` 结束
如何 创建 静态 类 数据 和 静态 类 方法 ？
填充   " filling ( ) "   是否 填充   " begin _ fill ( ) "   开始 填充   " end _ fill ( ) "   结束 填充
在   extra _ groups   中 提供 的 字符串 将 通过   " grp . getgrnam ( ) "   来 查找 ， 并 将 使用   " gr _ gid "   中 的 值
如果 未 发现 加载 器 ， 返回   " None "
你 可能 希望 将   maxBytes   设置 为 一个 合适 的 值
" sqlite3 "   模块 是 SQLite 数据库 库 的 包装 器 ， 提供 了 一个 可以 使用 稍微 非标准 的 SQL 语法 更新 和 访问 的 持久 数据库
如果 你 使用 你 自己 的 级别   ， 你 将 需要 重载 此 方法 或者 在 处理程序 的   typemap   属性 中 放置 一个 合适 的 字典
此 模块 已经 提供 了 两个 有用 的 钩子
注解 :
如果   x   定义 了   " __ index __ ( ) " ， 它 将 返回   " x .__ index __ ( ) "
当 参数 已经 在 列表 或 元组 中 但 要 为 需要 单独 位置 参数 的 函数调用 解包 时 ， 会 发生 相反 的 情况
负值   isdst   会 使   " localtime "   预测 夏季 时间 对 指定 时间 是否 生效
这是 一个 标准 的   Windows   专属 扩展 模块
然而 ， 在 大多数 情况 下 ， 建议 专门 从   Python   堆中 分配内存 ， 因为 后者 由   Python   内存 管理器 控制
摘要 发布 重点
库
参见 :   PEP   324   提出   subprocess   模块 的   PEP
在   3.1   版 更改 :   The   exit   parameter   was   added .
新 进程 会 转为 采用 默认 的 错误模式
与 通过 磁盘 、 套 接字 或者 其他 要求 序列化 、 反 序列化 和 复制 数据 的 共享 形式 相比 ， 直接 通过 内存 共享 数据 拥有 更 出色 的 性能
即使 是 当   asyncio   事件 循环 运行 在 非主   OS   线程 上时 它 也 能 可靠 地 工作
在   3.7   版 更改 :   UTC   时差 不再 限制 为 一个 整数 分钟 值
模式 现在 变得 非常复杂 ， 这 使得 它 难以 阅读 和 理解
从   stdout   和   stderr   读取数据 ， 直到 抵达 文件 结尾
" contextlib "   为   " with " 语句 上下文 提供 的 工具
这个 方法 用于 创建 子 上下文 ， 不 改变 任何 父 映射 的 值
因为 有 大量 的 历史 包袱 影响 字段 的 排序 ， 所以 我们 不会 根据 它们 在 结构 体里 定义 的 顺序 讲解
如果 对话框 被 取消 则 返回   " None "
只有 结果 会 被 舍入
contextlib   模块
找出   " a [ alo : ahi ] "   和   " b [ blo : bhi ] "   中 的 最长 匹配 块
返回 一个   " MemoryHandler "   类 的 新 实例
请 注意 ， 尾随 的 分号 包含 在 名称 中 （ 例如   " ' gt ; ' "   ） ， 但是 即使 没有 分 号 ， 一些 名称 也 会 被 标准 接受 ， 在 这种 情况 下   ， 名称 出现 时 带有 和 不 带有   " ' ; ' "
如果 在 调用 方法 时 内容 类型 未知 ， 则   " set _ boundary ( ) "   方法 将 引发 此 错误
它 的 速度 现在 提升 了 大约   40%
若 要 解锁 ， 线程 调用   " release ( ) "   方法
如果 第二个 操作数 为 正值 则 向 左 轮转 ； 否则 向 右 轮转
全局变量
3.5   新版 功能 .
源码 ：   Lib / timeit . py
例外情况 是 空 元组 ， 这时 圆括号 才 是 必须 的 允许 在 表达式 中 使用 不带 圆括号 的   " 空 "   会 导致 歧义 ， 并会 造成 常见 输入 错误 无法 被 捕获
在   3.1   版 更改 :   Added   the   automatic   calling   of   type   specific   equality   function .
权限 位
变量 只是 指向 具体 对象 的 名称
仅 在 字符串 字 面值 中 可用 的 转义序列 如下 :
解析 错误 将 引发   " NetrcParseError "   并 附带 诊断 信息 ， 包括 文件名 、 行号 以及 终止 令牌
等价 于 :
HELP   返回 有关 命令 语法 的 最少 信息   VRFY   返回 代码 252 （ 服务器 不 知道 该 地址 是否 有效 ）   EXPN   报告 该 命令 未 实现
编译 和 链接
设置 文件 描述符   fd   的 行 结束符 转写 模式
" " < " "   的 权 标值
" args "   条目 ， 当 在   " logging "   包 命名 空间 的 上下文 中 执行   " eval ( ) "   时 将 是 传给 处理程序 类 构造 器 的 参数 列表
在   3.9   版 更改 :   结果 由 元组 改为   named   tuple
在 Unix 平台 中 使用 Python
注解 :
类似 于   " bisect _ left ( ) " ， 但是 返回 的 插入 点 是   a   中 已 存在 元素   x   的 右侧
警告 :
" ignore _ patterns ( ) "   可 被 用于 创建 这种 基于   glob   风格 模式 来 忽略 特定 名称 的 可 调用 对象
这种 实现 直接 调用   " os . waitpid (   1 ) "   来 获取 所有 已 结束 的 进程 ， 可能 会 中断 其它 代码 洐 生 进程 并 等待 它们 结束
" NTEventLogHandler "   类 位于   " logging . handlers "   模块 ， 它 支持 将 日志 记录 消息 发送到 本地   Windows   NT ,   Windows   2000   或   Windows   XP   事件 日志
如果 未指定   output _ dir   则 会 将   tarfile   提取 到 当前目录
参数   shallow   具有 同   " filecmp . cmp ( ) "   一致 的 含义 与 默认值
例如 ， " curses . ascii . ctrl ( ) "   返回 与其 参数 相对 应 的 控制字符
3.5   新版 功能 .
（ 由   Wouter   Bolsterlee   和   Tal   Einat   在   bpo   30977   中 贡献 。 ）
在 多线程 中 使用 日志
" pencolor ( ) "   返回 以 颜色 描述 字符串 或 元组   ( 见 示例 )   表示 的 当前 画笔 颜色
创建 一个 新 的 空 上下文 对象
sequence   序列 一种   iterable   ， 它 支持 通过   " __ getitem __ ( ) "   特殊 方法 来 使用 整数 索引 进行 高效 的 元素 访问 ， 并 定义 了 一个 返回 序列 长度 的   " __ len __ ( ) "   方法
用来 在   " with "   语句 内 发生 异常 时 实现 调用   " context _ manager .__ exit __ (   exc _ info ( ) ) "
在 阅读   Security   considerations   前 不要 使用 此 模块
请 看 下面 的 例子 ， 它会 要求 用户 一直 输入 ， 直到 输入 的 是 一个 有效 的 整数 ， 但 允许 用户 中断 程序 （ 使用   " Control   C "   或 操作系统 支持 的 其他 操作 ） ； 请 注意 用户 引起 的 中断 可以 通过 引发   " KeyboardInterrupt "   异常 来 指示
" statistics "   数学 统计 函数
如果 你 希望 查看 对 该 语言 更 正式 的 定义 ， 也许 你 可以 花些 时间 自己 写 上 一份 或者 发明 一台 克隆 机器   :   )
3.7   版后 已 移除 :   The   option   is   deprecated   since   OpenSSL   1.1 . 0
当   " run ( ) "   方法 刚 开始 直到   " run ( ) "   方法 刚 结束 ， 这个 方法 返回   " True "
在 命令行 中 ，   首先 打开 一个 模块
不再 使用   " parser . readfp ( fp ) "   而是 改用   " parser . read _ file ( readline _ generator ( fp ) ) "
bufsize   指定 块 大小 ， 默认值 为   " 20   512 "   字节
运行 所有 预定 事件
数值 对象
另 一个 可 选 关键字 参数   fmtparams   可以 覆写 当前 变种 格式 中 的 单个 格式 设置
相对 快速 地 返回 一个   " ratio ( ) "   的 上界
（   由   Yury   Selivanov   在   bpo   32528   中 贡献 。 ）
errors   参数 （ 以及 任何 其他 关键字 参数 ） 会 被 传递 给 增量 式 编码器
编码 格式 与   Unicode
import   path   导入 路径 由 多个 位置 （ 或 路径 条目   ） 组成 的 列表 ， 会 被 模块 的   path   based   finder   用来 查找 导入 目标
无此 进程
这 并非 适用 于 所有 系统
警告 :
asyncio   条件 原语 可 被 任务 用于 等待 某个 事件 发生 ， 然后 获取 对 共享资源 的 独占 访问
这 相当于   Python   语句   " del   o [ i ] "
返回   o1   右移   o2   个 比特 后 的 结果 ， 如果 失败 ， 返回   " NULL "
docstring   文档 字符串 作为 类 、 函数 或 模块 之内 的 第一个 表达式 出现 的 字符串 字 面值
每次 在 生成器 上 调用   " next ( ) "   时 ， 它会 从 上次 离开 的 位置 恢复 执行 （ 它会 记住 上次 执行 语句 时 的 所有 数据 值 ）
Python   允许 编写   C   扩展 模块 定义 可以 从   Python   代码 中 操纵 的 新 类型 ， 这 很 像 内置 的   " str "   和   " list "   类型
在   3.6 . 2   版 更改 :   pathname   形参 接受 一个   path   like   object
3.9   版后 已 移除 :   " collections . Counter "   now   supports   " [ ] "
PythonWin   是 一个 包含 有 基于   pdb   的   GUI   调试器 的   Python   IDE
例如 ， 这里 的 正则 使用   " re . VERBOSE " ； 看看 阅读 有 多 容易 ？ :
模块 函数   " enumerate ( ) "   返回 包含 所有 存活 线程 的 列表
完整 支持 流行 的 macOS 版本
有关 交互 模式 的 更 多 内容 ， 请 参考 交互 模式
方法
交互 模式
等价 于 :   " sorted ( iterable ,   key   key ) [ : n ] "
在   3.8   版 更改 :   增加 了   sort _ dicts   形参
回到 前面 的 例子 ， 你 应该 明白 下面 的 代码 :
（ 由   Google   的   Gregory   P
替代 生成器
copytree   示例
索引   意义   " 0 "   The   value   of   the   registry   item
构建 和   C   API   的 改变
返回   str   被 去除 引用 后 的 字符串
返回   o1   除以   o2   后 向下 取整 的 结果 ， 如果 失败 ， 返回   " NULL "
同样 的 ， 对象 的 释放器 必须 符合 两个 类似 的 规则 ：
返回 一个 由 集合 构成 的 具名   2   元组
需要 注意 的 是 ， 文件 默认 使用 二进制 模式 打开
请 注意 对于 更 一般 的 情况 来说 ， 委托 可能 包含 更 多 细节 问题
该 列表 每次 解包 一个 元素 ， 先 解包 一个 无 符号 整数 旗标
我们 看到 列表 和 字符串 有 很多 共同 特性 ， 例如 索引 和 切片 操作
这个 新 进程 的 唯一 目的 就是 管理 所有 由 它 创建 的 共享内存 块 的 生命周期
Morsel   对象
如果 从未 调用 此 函数 ， 则 不会 报告 任何 鼠标 事件
限制 全局变量
例如   " S [ :   1 ] "   就是 原 字符串 去掉 最后 一个 字符   ， 这 可以 用来 移除 某个 字符串 末尾 的 换行符
访问 外部 对象
首选项 设置
当 列表 部分 的 值 包含 字符串   " ％ s "   时 ， 它 被 解释 为 一个 文字 浏览器 命令行 ， 用于 替换   " ％ s "   的 参数   URL   ； 如果 该 部分 不 包含   " ％ s " ， 则 它 只 被 解释 为 要 启动 的 浏览器 的 名称
确定   capsule   是否是 一个 有效 的
以   Python   源代码 形式 显示 的   " brief "   和   " default "   格式化 器 分别 具有 下列 配置 子 字典 :
" math "   模块 提供 对 浮点 数学 的 底层 C 库函数 的 访问 :
" isdir ( ) "   在   Windows   上将 不再 为 不 存在 的 目录 的 链接 返回   " True "
Pull   API 进行 非 阻塞 解析
在   3.7   版 更改 :   如果   gather   本身 被 取消 ， 则 无论   return _ exceptions   取值 为何 ， 消息 都 会 被 传播
" ' d ' "   十进制 整数
在 没有 子 进程 的 情况 下 运行
CPython   implementation   detail :   DTrace 标记 是 CPython 解释器 的 实现 细节
loader   的 抽象 基类
单个 旗 标的 值 应当 为 二 的 乘方   ( 1 ,   2 ,   4 ,   8 ,   ... ) ， 旗 标的 组合 则 无此 限制 :
回调 函数
设置   " prec "   需要 十分 谨慎
另一方面 ，   " search ( ) "   将 向前 扫描 字符串 ， 报告 它 找到 的 第一个 匹配 项
字符串
此 函数 不会 搜索 目录 结构 来 定位 源文件 ； 它 只 编译 显式 指定 的 文件
这种 方法 可以 让   Future   对象 使用 其它 的 事件 循环 实现 ， 它 可以 注入 自己 的 优化 实现
使用   " PyErr _ Occurred ( ) "   来消 歧义
如果 Python 找 不到 它 的 主目录 并且 没有 注册表 值 （ 冻结 的 . exe ， 一些 非常 奇怪 的 安装 设置 ） ， 那么 你 会 得到 一条 带有 一些 默认 但 相对 的 路径 的 路径
3.8   新版 功能 .
在 将   " LogRecord "   实例 与 任何 用户 提供 的 参数 合并 之后 ， 返回 此 实例 的 消息
它 可以 在 命令行 中 使用   2to3   转换成   Python   3 . x   版本 的 代码 ：
一个   " Cmd "   实例 或 子类 实例 是 面向 行 的 解释器 框架结构
所 提供 的 名称 在 从 任意 节 读取 的 时候 被 用于 识别 默认 的 节 ， 而且 也 会 在 将 配置 写回 文件 时 被 使用
当 进入 语句 块 时   " acquire ( ) "   方法 会 被 调用 ， 退出 语句 块 时   " release ( ) "   会 被 调用
结果 的   hour ,   minute ,   second   和   microsecond   值均 为   0 ， 并且   " tzinfo "   值为   " None "
( a )   对于 某些 操作 ， 前缀 表示法 比 后缀 更 容易 阅读 前缀 （ 和 中缀 ！ ） 运算 在 数学 中 有着 悠久 的 传统 ， 就 像 在 视觉 上 帮助 数学家 思考问题 的 记法
引用 计数
例如 ， 可以 选项 可以 被 这样 创建 :
这 也 会 加载 子 模块   " echo "   ， 并 使 其 在 没有 包 前缀 的 情况 下 可用 ， 因此 可以 按 如下 方式 使用 :
通过 编写   " TestCase "   的 子类 或 使用   " FunctionTestCase "   编写 你 自己 的 测试用例
3.5   新版 功能 .
国际化 由 许多 模块 支持 ， 包括   " gettext "   ，   " locale "   ， 以及   " codecs "   包
Path   对象
Kqueue   对象
3.4   新版 功能 .
" $ name "   或   " $ { name } "   形式 的 子 字符串 被 环境变量   name   的 值 替换
但是 当   " setup . py "   附带   "   command   packages   distcmds , buildcmds "   选项 运行 时 ， " distutils . command " ,   " distcmds "   和   " buildcmds "   包将 按此 顺序 被 查找
要 创建 结构 序列 ， 你 首先 必须 创建 特定 的 结构 序列 类型
返回 第一个 已损坏 文件 的 名称 ， 在 其他 情况 下则 返回   " None "
键 也 可以 赋值 为   " None "   ， 强制 下 一次 导入 模块 导致   " ModuleNotFoundError "
提供 这些 集合 用于 字节 码 指令 的 自动 内省 ：
它 还 允许 访问 上面 列出 的 哈希 算法 以及 你 的   OpenSSL   库 可能 提供 的 任何 其他 算法
如果   p   是 一个   " frozenset "   对象 但 不是 其子 类型 的 实例 则 返回 真值
在   3.5   版 更改 :   The   etype   argument   is   ignored   and   inferred   from   the   type   of   value   .
创建 一个 迭代 器 ， 从 每个 可 迭代 对象 中 收集 元素
安装 Python 模块 （ 旧版 ）
3.4   新版 功能 :   The   map   constructor   argument .
如果 对象 发生 改变 ， 就 如本 示例 中 的 字典 那样 ，   则 对 函数 的 后续 调用 将会 引用 这个 被 改变 的 对象
构建
当 此 模块 在 具有 可用 的   " readline "   模块 的   Unix   平台 被 导入 ,   一个   " Completer "   实例 将 被 自动 创建 并且 它 的   " complete ( ) "   方法 将 设置 为   " readline "   的 补全 器 .
如果   o   的 类型 为   " PyContextToken _ Type "   则 返回 真值
返回 以 SQL 文本格式 转储 数据库 的 迭代 器
如果 一个 线程 不是 获得 信号 的 主线 程 ， 字节 码 求值 循环 不会 在 每条 字节 码 指令 上 被 打断 以 检查 无法 被 处理 的 挂 起 信号
新 的 解析器
在   3.5 . 3   版 更改 :   更新 以 支持 和   OpenSSL   1.1 . 0   的 链接
返回 所有 已 注册 变种 的 名称
以   value   作为 初始   CRC   计算   data   的 16 位   CRC   值 ， 返回 其 结果
返回 压缩 类型 （ 只 支持   " ' NONE ' "   类型 ）
3.3   新版 功能 :   进程 池 对象 现在 支持 上下文 管理器 协议 参见 上下文 管理器 类型
" if "   语句
" Py _ DTSF _ ALT "   表示 应用   " 替代 的 "   格式化 规则
" doctest "   测试 交互性 的 Python 示例
深入 条件 控制
其他 功能
它 包含 以下 声明 :
范围 真的 是   " 0 "   到   " 61 "   ； 值   " 60 "   在 表示   leap   seconds   的 时间 戳 中 有效 ， 并且 由于 历史 原因 支持 值   " 61 "
对 输入 进行 解析 标记
一个 扩展   " EnvBuilder "   的 例子
参数 如下 ：
结果 是 操作数 的 按位 求反
当 不再 存在 对 该值 的 强 引用 时 ， 字典 中 的 条目 将 被 丢弃
现在 ， 在 编译 Python 的 框架 版本 时 ， 可以 为   configure   脚本 添加   "   with   framework   name   "   选项 来 指定 要 使用 的 框架 名称
数字 和 数学 模块
如果 未 给出 参数 ， 则 位于 用户 家 目录 的   " . netrc "   文件 即   " os . path . expanduser ( ) "   所 确定 的 文件 将会 被 读取
编译 时 配置   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Python 有 两个 内置 函数 可 被 用于 继承 机制 ：
3.4   新版 功能 .
细节 要点
copytree   示例
调用 解释器
当前 海龟 位置 为 多边形 的 最后 一个 顶点
当其为 偶数 时 ， 将 返回 两个 中间 值中 较大 的 那个
文件 压缩 和 解压
address   是 监听器 对象 中 的 绑定 套 接字 或 命名 管道 使用 的 地址
"   X   oldparser " :   启用 传统 的   LL ( 1 )   解析器
随后 类体 将 在 一个 新 的 执行 帧   ( 参见 命名 与 绑定 )   中 被 执行 ， 使用 新创建 的 局部 命名 空间 和 原有 的 全局 命名 空间
因此 ， 如果 所 输入   iterable   是 已 排序 的 ， 组合 元组 也 将 按 已 排序 的 顺序 生成
引发 一个 审计 事件   " shutil . copytree "   附带 参数   " src " ,   " dst "
这会 确保 除了 解释器 本身 和 运行 于 同一 进程 中 的 其他 可 感知 区域 选项 的 组件   ( 例如   GNU   " readline "   库 )   之外 ， 还 能 在 子 进程   ( 无论 这些 进程 是否 在 运行   Python   解释器 )   以及 在 查询 环境 而 非 当前   C   区域 的 操作   ( 例如   Python   自己 的   " locale . getdefaultlocale ( ) " )   中 看到 更新 的 设置
在 缓冲区 开始 之前 检测 写 操作 （ 缓冲区 下溢 ）
3.2   新版 功能 .
最新 的 开发 版 源代码 可以 在   https : / / github . com / python / cpython /   获取
字节 缓存 区 必须 不 包含 嵌入 的   null   字节 ； 如果 包含 了   null   字节 ， 会 引发 一个   " ValueError "   异常
它 根据 当前 选择 的 窗口 动态变化
画笔 控制
如果 请求 了 一个 以上 的 属性 ， 则 返回 一个 属性 元组
发布 日期 :   2017   12   18
将 输出 写入 流 时 ， 如果   newline   为   " None " ， 则 写入 的 任何   " ' \ n ' "   字符 都 将 转换 为 系统 默认 行 分隔符   " os . linesep "
这 意味着 以下 代码 将会 失败 :
如果 使用 文本 模式 浏览器 ， 则 调用 进程 将 阻塞 ， 直到 用户 退出 浏览器
在   3.8   版 更改 :   增加 了   winmode   参数
Type   对象
注解 :
解压缩   data   ， 返回 一个 包含 未 压缩 数据 的   " bytes "   对象
任何 大于   " 0 "   的 值 将 使得 所有 当前 定义 的 调试 输出 被 打印 到   stdout
使用   Python   在   Mac   上 构建   GUI   应用程序 有 多种 选择
如果 这个 宏 被 定义 ， 长度 是 一个   " Py _ ssize _ t "   Python   元 大小 类型 而 不是 一个   " int "   整型
Python   有没有 提供 断点 与 单步 调试 等 功能 的 ， 源码 层次 的 调试器 ？
Python   3.6 . 2   中 的 重要 变化
作为 一种 跨 进程 共享 数据 的 方式 ， 共享内存 块 的 寿命 可能 超过 创建 它 的 原始 进程
运行 由   args   所 描述 的 命令
ActivePython   具有 多 平台 兼容性 的 安装程序 ， 文档 ， PyWin32
抽象 基类 可以 像   mix   in   类 一样 直接 被子 类 继承
3.3   新版 功能 .
它 生成 算术级数 :
分配   nelem   个 元素 ， 每个 元素 的 大小 为   elsize   字节 ， 并 返回 指向 分配 的 内存 的   " void   "   类型 指针 ， 如果 请求 失败 则 返回   " NULL "
异常 链
使用 自定义 计时器
所有   ctypes   数据类型 都 带有 这个 类 方法 的 默认 实现 ， 它 通常 会 返回   obj   ， 如果 该 对象 是 此 类型 的 实例 的话
" random "   模块 目前 接受 任何 可 哈希 类型 作为 可能 的 种子 值
所有 三个 数据 属性 将 在   b   通过   " set _ seqs ( ) "   或   " set _ seq2 ( ) "   重置 时 被 重置
将 历史 列表 的 最后   nelements   项 添加 到 历史 文件
3.7   新版 功能 .
返回 放置 临时文件 的 目录 的 名称
universal _ newline   参数 等同于   text   并且 提供 了 向 后 兼容性
将 选项 名   option   转换 为 输入 文件 中 的 形式 或 客户端 代码 所 传入 的 应当 在 内部结构 中 使用 的 形式
基于   " TarInfo "   对象 创建 一个 字符串 缓冲区
由于 存在 对于 类 私有 成员 的 有效 使用 场景 （ 例如 避免 名称 与 子类 所 定义 的 名称 相冲突 ） ， 因此 存在 对 此种 机制 的 有限 支持 ， 称为 名称 改写
bpo   33655 :   忽略 运行 在 BSD 平台 的 ZFS 上时 test _ posix _ fallocate 的 失败
替代   " os . popen ( ) " ,   " os . popen2 ( ) " ,   " os . popen3 ( ) "
也就是说   ， 它 将 为   " b " " "   直到 包含 压缩 数据 的 末尾 字节 可用
" Context ( ) "   创建 一个 不 包含 任何 值 的 空 上下文
3.3   新版 功能 .
Python   的   API   可以 通过 在 一个   C   源文件 中 引用   " " Python . h " "   头文件 来 使用
返回   o1   和   o2   “ 按位 或 ” 的 结果 ， 如果 失败 ， 返回   " NULL "
" O & "   ( object )   [   converter   ,   anything   ]   通过 一个   converter   函数 将 一个   Python   对象 转换 为 一个   C   变量
在 格式化 字典 之前 ， 需要 执行 几个 准备 步骤
返回 对象   o   的 估计 长度
设置 spinbox 的 值 为值   .
用户 自定义 异常
异常 与 警告
返回 内核 分配 给 当前 线程 的 原生 集成 线程   ID
命令   Python   callable
另 一个零 宽度 断言 是 前 向 断言
（ 注意 管道 和 套 接字 两种 句柄 不是 可 等待 的 句柄 ）
它 必须 严格 限制 于   "   timedelta ( hours   24 ) "   和   " timedelta ( hours   24 ) "   之间 ， 否则 会 引发   " ValueError "
PEP   391 :   基于 字典 的 日志 配置
如果   Future   还 没 完成   ， 这个 方法 会 引发 一个   " InvalidStateError "   异常
函数   " wrapper ( ) "   接受 一个 可 调用 对象 并 首先 进行 上述 初始化 过程 ， 在 终端 支持 着色 时 还 会 初始化 颜色
函数 定义 会 将 函数 名称 与 函数 对象 在 当前 符号表 中 进行 关联
input   将 被 读取 直到   " input . read ( ) "   返回 空 字节 串 对象
进程 间 共享 状态
所有 文件 都 默认 以 文本 模式 打开 ， 但 你 可以 通过 在 调用   " input ( ) "   或   " FileInput "   时 指定   mode   形参来 重载 此 行为
你 不 需要 实例 化 此类 ， 但 它 具有 你 可能 需要 重载 的 属性 和 方法
初始化 终端
这些 函数 将   Windows   注册表   API   暴露 给   Python
" glob "   模块 提供 了 一个 在 目录 中 使用 通配符 搜索 创建 文件 列表 的 函数 :
当 打开 一个 文件 用于 写入 的 ，   format   ,   check   ,   preset   和   filters   参数 具有 与   " LZMACompressor "   的 参数 相同 的 含义
大多数   " ArgumentParser "   动作 会 添加 一些 值 作为   " parse _ args ( ) "   所 返回 对象 的 一个 属性
" OrderedDict "   例子 和 用法
这 导致 使用 交互 提示符 或   Jupyter   笔记本 更新 、 试验 或 讲解 各种 日志 配置 选项 变得 相当 困难
" email "   电子邮件 与   MIME   处理 包
将   func   注册 为 终止 时 执行 的 函数
注解 :
在 给定 的   name   之下 注册 错误处理 回调 函数   error
所有 编码器 函数 都 只 接受 一个 参数 ， 即 要 编码 的 消息 对象
没有 参数 的 情况 下 ，   " do _ help ( ) "   方法 会 列出 所有 可用 的 帮助 主题   （ 即 所有 具有 相应 的   " help _   ( ) "   方法 或 命令 的 文档 字符串 ） ， 也 会 列举 所有 未 被 记录 的 命令
sequence   会 被 用来 为 一个 新 的   " ShareableList "   填充 值
根据   share   指定 的 剪切 因子 即 剪切 角度 的 切线 来 剪切 海龟 形状
字符串 类型 有 一些 方法 可以 执行 将 字符串 填充 到 给定 列宽 的 有用 操作
向   PSF   提供 捐助 在 美国 是 免税 的
当 你 的 全部 消息 内容 都 在 内存 当中 ， 或者 整个 消息 都 保存 在 文件系统 内 的 一个 文件 当中 的 时候 ， " Parser "   API 非常 有用
此 函数 为 原始 接口 ， 仅 保留 用于 向下兼容
表示 复数 的 C 结构 体
注释 :
给定 上述 示例 命令行 选项 ， 则 命令   bdist _ openpkg   可由类   " distcmds . bdist _ openpkg . bdist _ openpkg "   或   " buildcmds . bdist _ openpkg . bdist _ openpkg "   来 实现
（ 由   Jake   McGuire   和   Antoine   Pitrou   在   bpo   5084   中 贡献 。 ）
完整 的   Python   程序
所有 其他 方法 都 被 委托 给 下层 的   " self ._ outfile "   对象
互联网 数据处理
模块   " binascii "   支持 模块 ， 包含 ASCII 到 二进制 和 二进制 到 ASCII 转换
注解 :
也就是说 ， 56   是 唯一 的   N   值能 令   J   恰好 有   53   位
在 任何 情况 下 ，   " q   b   +   a   %   b "   和   a   基本 相等 ； 如果   " a   %   b "   非零 ， 它 的 符号 和   b   一样 ， 并且   " 0   <   abs ( a   %   b )   <   abs ( b ) "
库
如果   " A "   被 定义 成 一个 承认 ` ` b ` `   的   " __ add __ ( ) " ， 一切 都 没有 问题
这是 一个   " PyTypeObject "   实例 ， 其 表示 Python 的   " code "   类型
在   3.1   版 更改 :   在 之前 版本 中 ， 某些 整数 格式 包装 了 超范围 的 值 并 会 引发   " DeprecationWarning "   而 不是   " struct . error "
RPM   " . spec "   文件 配置 或 选项   Distutils 安装 脚本 选项   名称   " name "   摘要 （ 在 序言 中 ）   " description "   版本   " version "   供应商   " author "   和   " author _ email " ,   或   &   " maintainer "   和   " maintainer _ email "   版权   " license "   Url   " url "   % d 描述 （ 部分 ）   " long _ description "
3.6   新版 功能 .
" platform "   获取 底层 平台 的 标识 数据
数据压缩
在   3.7   版 更改 :   UTC   时差 不再 限制 为 一个 整数 分钟 值
示例 :
返回 一个   " Process "   实例
" result . append ( a ) "   语句 调用 了 列表 对象   " result "   的 方法
其他 进程 可以 通过 代理 访问 这些 共享 对象
不像 我们 的   " spam "   例子 ，   " xxmodule "   使用 了 多 阶段 初始化   ( Python3.5   开始 引入 ) ，   " PyInit _ spam "   会 返回 一个   PyModuleDef   结构 体 ， 然后 创建 的 模块 放到 导入 机制
在 根 日志 记录器 上 记录 一条   " WARNING "   级别 的 消息
现在   " subprocess . Popen "   在 某些 情况 下会 使用   " os . posix _ spawn ( ) "   以 获得 更好 的 性能
它 接受 一个   URL   作为 参数
库
function   应当 返回 字符串 或 包含 两到 三个 元素 的 元组
最晚 的 可 表示   " datetime " ， " datetime ( MAXYEAR ,   12 ,   31 ,   23 ,   59 ,   59 ,   999999 ,   tzinfo   None ) "
在 C 中 调用 Python 函数
自   Python   3.8   开始 ， 你 能 做到 的 ！
内置   " staticmethod ( ) "   的 子类 ， 指明 一个 抽象 静态方法
重启 Shell   重新启动 shell   以 清理 环境
PEP   241   Metadata   for   Python   Software   Packages   由   A . M
Executor   对象
请 注意 ， 这种 行为 并 不是 lambda 所 特有 的 ， 但 也 适用 于 常规 函数
输入输出
返回 调用 返回 的 值
窗口 和 面板
这 在 使用   "   o "   参数 时 十分 有用 ， 这样 就 可以 将 整个   Python   源码 包 完整 地 转换 到 另 一个 目录
如果   key   匹配 上   p   的 某 一项 ，   则 返回   " 1 "   ， 否则 返回   " 0 "
如果   p   是   " NULL " ,   那么 什么 操作 也 不会 进行
例如   ：
如果 目标 列表 包含 一个 带有 星号 前缀 的 目标 ， 这 称为 “ 加星 ” 目标 ： 则 该 对象 至少 必须 为 与 目标 列表 项数 减一 相同 项数 的 可 迭代 对象
当 您 编写 一个包 并 希望 在   Python   包 索引 中使 它 可用 时 ， 请 参考 分发   Python   模块 指南
工具 / 示例
通常 的   f   字符串 格式 说明符 允许 更 细致 地 控制 所 要 显示 的 表达式 结果 :
如果 模块 具有   " __ file __ "   属性 ， 这会 被 用作 模块   repr   的 一部分
这能 确保 赋给 目标 列表 的 名称 不会 “ 泄露 ” 到 外层 的 作用域
显示 帮助 消息
用   " ' ( ' " ， " ' ) ' "   表示 的 组 也 捕获 它们 匹配 的 文本 的 起始 和 结束 索引 ； 这 可以 通过 将 参数传递 给   " group ( ) " 、 " start ( ) " 、 " end ( ) "   以及   " span ( ) "
如果 通过 一个   unlocked   锁 调用 则 会 引发   " RuntimeError "
" try "   语句
在   3.7   版 更改 :   The   function   now   always   returns   " UTF   8 "   on   Android   or   if   the   UTF   8   mode   is   enabled .
" Py _ FatalError ( ) "   函数 会 被 一个 自动记录 当前 函数 名称 的 宏所 替代 ， 除非 已 定义 了   " Py _ LIMITED _ API "   宏
调用函数 ， 继续
当   " import "   语句 尝试 加载 模块 遇到 麻烦 时 将 被 引发
asyncio   具有 下列 基本 同步 原语 :
如果 失败 ， 返回   " NULL "
（ 要 创建 一个 空 元组 ， 应 使用 一对 内容 为空 的 圆括号 :   " ( ) " 。 ）
以下 是 有效 的   IPv4   地址 ：
迭代 持续 到 耗光 最长 的 可 迭代 对象
在 格式化 字符串 字 面值 或 在 使用   " str . format ( ) "   方法 时 是 无法 使用 花 括号 字 面值   ( " " { " "   or   " " } " " )   作为   fill   字符 的
如果 列表 为空 ， 则 返回 空 字符串   ( " ' ' " )
PEP   3116   新   I / O   PEP   written   by   Daniel   Stutzbach ,   Mike   Verdone ,   and   Guido   van   Rossum
将 与   " co _ names [ namei ] "   相关联 的 值 推入 栈顶
安全
由   PEP   492   引入
传输 可以 接收数据 ( TCP 和 Unix 链接 ， 管道 等 )
结构 体 和 联合
width   是 一个 定义 最小 总字段 宽度 的 十进制 整数 ， 包括 任何 前缀 、 分隔符 和 其他 格式化 字符
移植 到 Python   2.6
" None "   对象
在 Windows 系统 上 ， 没有 “ 可 执行 模式 ” 的 概念
现在 很 容易 排除 另 一个 文件 扩展名 ； 只 需 在 断言 中 添加 它 作为 替代
当 某个 对象 的 最后 一个 引用 被 移除 后 不久 就 会 释放 其所 占用 的 内存
关于 再现 性 的 说明
库
示例 :
它 必须 定义 名为   " load _ module ( ) "   的 方法
例如 ， 在 大多数 系统 上 ， 对于   " SIGQUIT "   的 默认 操作 是 转储 核心 并 退出 ， 而 对于   " SIGCHLD "   的 默认 操作 是 简单 地 忽略 它
" xdrlib "   编码 与 解码   XDR   数据
例如 ，   " help ( ) "   通常 把 输出 写 到   sys . stdout
反之   (   block   是   " False "   时 ) ， 仅 当 有 可用 缓冲 槽 时 才 放入 对象 ， 否则 抛出   " queue . Full "   异常   ( 在 这种 情形 下   timeout   参数 会 被 忽略 )
然后 ：
解包 并 （ 以 列表 形式 ） 返回 由 同质 条目 构成 的 固定 长度 数组
手动 上下文 管理
自   Python   3.7   起   GIL   会 由   " Py _ Initialize ( ) "   初始化
元组 应当 或是 一个 空 元组 ， 或是 一个 包含 密钥 文件名 的 单值 元组 ， 或是 一个 包含 密钥 文件 和 证书 文件 的   2   值 元组
解码   Base16   编码 过 的   bytes   like   object   或   ASCII   字符串   s   并 返回 解码 过 的   " bytes "
它 还 可能 显示   ' Checked '   表示 该   OS   版本 使用 了 调试 代码 ， 即 检测 参数 、 范围 等 的 代码
3   失败   引擎 尝试 匹配   " b "   ， 但是 当前 位置 位   于 字符串 结束 ， 所以 匹配 失败
所有 等待 事件 被 设置 的 任务 将 被 立即 唤醒
核心 与 内置
请 查看   Python   标准 库 的 目录 以 了解 所有 可用 的 内容
" ContextVar . set ( ) "   方法 返回   Token   对象
在 FreeBSD 和 OpenBSD 上
在   action   的 描述 中 查看 案例
" curses . ascii "   用于   ASCII   字符 的 工具
在   3.6   版 更改 :   增加 了   tzinfo   参数
入门
操作 已 在 进行
在   3.6   版 更改 :   Python 中 启用 了 对长 路径 的 支持
该 语句 在 Python   2.6   中 始终 启用
添加 了 新 的   " functools . cached _ property ( ) "   装饰 器 ， 用于 在 实例 生命周期 内 缓存 的 已 计算 特征 属性
一个 归档 成员 （ 被 保存 文件 ） 是 由 一个 标头块 加 多个 数据 块 组成 的
控制   writer   何时 生成 引号 ， 以及   reader   何时 识别 引号
然后 你 需要 给 你 的 类加 一个 方法   " __ conform __ ( self ,   protocol ) " ， 它 必须 返回 转换 后 的 值
例如 ， 别人 可以 传入   " __ import __ ( ' os ' ) . system ( " rm   rf   $ HOME " ) "   这 将 删除 你 的 家 目录
" email . iterators " :   迭代 器
它 的 实用性 有限 ， 因为 这种 消息 只有 在 其 只 含有 ASCII 文字 ， 或者   " utf8 "   被 设置 为   " True "   且 没有 二进制 格式 的 附件 的 时候 ， 才 会 有效
参见 :
参数   name   指定 了 以 绝对 或 相对 导入 方式 导入 什么 模块   (   比如 要么 像 这样   " pkg . mod "   或者 这样   " .. mod " )
注解 :
此外 ， asyncio   的 子 进程   API   提供 了 一种 启动 进程 并 从 事件 循环 与其 通信 的 办法
非必要 的 内建 对象 类型 和 内建函数 、 模块 的 语义 描述 在   Python   标准 库中
例如 ， " 0.05954861408025609 "   就 不是   2 ⁻ ⁵ ³   的 整数倍
注意 在   Windows   上 ， 子 进程 只会 继承 父 进程   logger   的 日志 级别 对于   logger 的 其他 自定义 项 不会 继承
此 页面 仅 包含   API   参考 信息
特殊 的 值
协议 错误
本 开发者 可能 会 误读 标准 ， 这种 情况 下 它们 将 无法 与 相应 标准 互操作
有关   Python   开发 流程 的 更 多 信息 ， 请参阅   Python   开发者 指南
字符串 的   format ( )   方法
[   脚注   ]
state   必须 为   " getstate ( ) "   所 返回 的 一个 编码器 状态
强烈建议 你 不要 将   " NullHandler "   以外 的 任何 处理程序 添加 到库 的 记录器 中
Windows 改进 ：
示例 输出 信息 如下 :
例如 ， 如果 你 希望 仅 在 行 的 开头 匹配 单词   " From " ， 则 要 使用 的 正则   " ^ From "
这是 Python 最 强大 的 功能 之一
值   处置   " " default " "   为 发出 警告 的 每个 位置 （ 模块   行号 ） 打印 第一个 匹   配 警告   " " error " "   将 匹配 警告 转换 为 异常   " " ignore " "   从不 打印 匹配 的 警告   " " always " "   总是 打印 匹配 的 警告   " " module " "   为 发出 警告 的 每个 模块 打印 第一次 匹配 警告 （ 无论 行   号 如何 ）   " " once " "   无论 位置 如何 ， 仅 打印 第一次 出现 的 匹配 警告
以下 是 隐式 创建   " __ hash __ ( ) "   方法 的 规则
它们 将 在 当 某个 选项 未 在 别处 定义 时 被 用于 插值
" Py _ INCREF ( ) "   和   " Py _ DECREF ( ) "   等宏 不会 检测   " NULL "   指针 但是 ， 它们 的 变种   " Py _ XINCREF ( ) "   和   " Py _ XDECREF ( ) "   则 会 检测
" base64 "   Base16 ,   Base32 ,   Base64 ,   Base85   数据编码
使用 一个套 接字
与   " gettempprefix ( ) "   相同 ， 但 返回值 为 字节 类型
（ 如果 引发 了 任何 其他 异常 ， 则 等同于   " in "   引发 了 该 异常 ）
测试
参见 :
当 同时 使用 由 同一个   " tee ( ) "   调用 所 返回 的 迭代 器时 可能 引发   " RuntimeError " ， 即使 原本 的   iterable   是 线程 安全 的
bpo   33421 :   为 ` ` typing . AsyncContextManager ` ` 添加 缺失 的 文档
" choice ( ) "   使用 的 算法 默认 为 重复 选择 的 整数 运算 ， 以 避免 因 舍入 误差 引起 的 小 偏差
该 方法 会 一直 阻塞 直到 接收 到 对象
此类 对象 包括 内置 的   " bytes "   和   " bytearray "   以及 一些 如   " array . array "   这样 的 扩展 类型
示例
检索   " m . group ( ' zonem ' ) "   显然 要 容易 得 多 ， 而 不必 记住 检索 第   9   组
设置 一个 计数 为 0 不会 从 计数器 中移 去 一个 元素
第二个 参数 是 供 模块 搜索 使用 的 路径 条目
以上 列表 的 后半部 分为 增强 赋值 操作符 ， 在 词法 中 作为 分隔符 ， 但 也 起到 运算 作用
3.2   新版 功能 .
虽然 被 称为 函数 ， 但   " tuple "   实际上 是 一个 不可 变 的 序列 类型 ， 参见 在 元组 与 序列 类型   list ,   tuple ,   range   中 的 文档 说明
有 两种 操作 方式 ：
幂函数 与 对数函数
返回   resource   的 文件系统 路径
按照 定义 ， 不可 变 对象 例如 数字 、 字符串 、 元组 和   " None "   因为 不可 变 所以 是 安全 的
" email . errors " :   异常 和 缺陷 类
还 需要 注意 的 一点 是 解析器 层级 的   " get ( ) "   方法 提供 了 自定义 的 更 复杂 接口 ，   它 被 维护 用于 向下兼容
编解码器 试图 要 编码 或 解码 的 对象
从 多个 进程 记录 至 单个 文件
例如   " Py _ STRINGIFY ( 123 ) "   返回   " " 123 " "
可写 的 属性 同样 可以 用   " del "   语句 删除
注册 可 调用 的 适配器
表示   context   variable   类型 的 类型 对象
让 我们 举 一个 例子 ： " \ w "   匹配 任何 字母 数字 字符
文档
如果 可 调用 对象 引发 一个   " BaseException "   子类 ， 这个 行为 没有 定义
对于   nargs   等于   " ? "   或   "   "   的 位置 参数 ，   " default "   值 在 没有 命令行 参数 出现 时 使用
返回 一个 实现   " AbstractChildWatcher "   接口 的 监视器 对象
第一个 知道 如何 定位 内置 模块 ， 第二个 知道 如何 定位 冻结 模块
" ' extend ' "   这会 存储 一个 列表 ， 并 将 每个 参数值 加入 到 列表 中
（ 由   Michael   Foord   贡献 ）
如果 给出 ，   startupinfo   将 是 一个 将 被 传递 给 底层 的   " CreateProcess "   函数 的   " STARTUPINFO "   对象
默认 为 模块 层级 的 函数   " IS _ CHARACTER _ JUNK ( ) " ， 它会 过滤 掉 空白 字符 （ 空格符 或 制表符 ； 但 包含 换行符 可不是 个 好 主意 ！ ）
" ModuleFinder "   的 示例 用法
启用 自动 垃圾 回收
3.4   新版 功能 :   keyword   only   实参   default
由于   GIL   的 存在 ，   asyncio . to _ thread ( )   通常 只能 被 用来 将   IO   密集型 函数 变为 非 阻塞 的
源代码 ：   Lib / importlib / abc . py
返回 包含 来自 总体 的 元素 的 新 列表 ， 同时 保持 原始 总体 不变
断开连接
它们 同样 可以 用 与 追踪 最近 的 交换 和 其他 数据 池 活动
不过 ， 除了 最 左边   " for "   子句 中 的 可 迭代 表达式 ， 推导 式 是 在 另 一个 隐式 嵌套 的 作用域 内 执行 的
这个 实例 演示 了 如何 使用   difflib   来 创建 一个 类似 于   " diff "   的 工具
适配器 的 格式 还 与 实验性 的   SQLite   date / time   函数 兼容
库
返回 指定 时钟   clk _ id   的 分辨率 （ 精度 ）
如果 参数 为 显式   NaN ， 则 返回   " True " ， 否则 返回   " False "
这 不会 调用   " curses . doupdate ( ) " ， 因此 你 不必 自己 执行 此 操作
你 应当 几乎 永远 不 使用   REALTIME _ PRIORITY _ CLASS ， 因为 这会 中断 管理 鼠标 输入 、 键盘输入 以及 后台 磁盘 刷新 的 系统 线程
审计 事件 表
设置 角度 的 度量 单位 为 弧度
原子 的 句法 为 :
如果   object   是 不可 调用 的 （ 因而 不是 一个 有效 的 构造 器 ） 则 会 引发   " TypeError "
那么 整除 就 必须 向下 取整
generator   iterator   生成器 迭代 器   generator   函数 所 创建 的 对象
命名 组 很 有用 ， 因为 它们 允许 你 使用 容易 记住 的 名称 ， 而 不必 记住 数字
如果 失败 ， 返回   " NULL "
设置 与 特殊 方法   " mode ( ) "   模式   " colormode ( ) "   颜色 模式   " getcanvas ( ) "   获取 画布   " getshapes ( ) "   获取 形状   " register _ shape ( ) "   |   " addshape ( ) "   添加 形状   " turtles ( ) "   所有 海龟   " window _ height ( ) "   窗口 高度   " window _ width ( ) "   窗口 宽度
如果 给出 的 位数 为   " ' ' " ， 则 会 使用   " sizeof ( pointer ) "   ( 或者 当   Python   版本   <   1.5 . 2   时为   " sizeof ( long ) " )   作为 所 支持 的 指针 大小 的 提示
‘ È ’   和   ‘ Í ’   也 一样
使用 事件
隐式 拼接 的 行 之间 不会 有   NEWLINE   形符
我 尝试 使用   __ spam   ， 但是 得到 一个 关于   _ SomeClassName __ spam   的 错误信息
在 回收 完成 后 打印 统计 信息
消息 是 在 内部 线程 中 从 队列 接收 并 在 同一 线程 上 传递 到 一个 或 多个 处理程序 进行 处理 的
返回 的 字节 数据 可以 与 传入 的 字节 数据 相同 （ 例如 在 只 执行 验证 的 时候 ） ， 或者 也 可以 完全 不同 （ 例如 在 可能 执行 了 解密 的 时候 ）
macOS   上 的 IDLE
核心 与 内置
它们 通过 新 的 子 属性 来 访问
与   " time "   模块 不同 的 是 ，   " datetime "   模块 不 支持 闰秒
以下 语句 :
如果 有 多个 进程 同时 将 对象 放入 队列 ， 那么 在 队列 的 另一端 接受 到 的 对象 可能 是 无序 的
本 节 列出 了 先前 描述 的 更改 以及 可能 需要 更改 代码 的 其他 错误 修正 .
弹 出 一个 对话框 窗口 用来 输入 一个 字符串
同步 原语
在 类   Unix   系统 中 编译 和 链接
format   处理器 使用 的 指定 格式 字符串
asyncio   原语 不是 线程 安全 的 ， 因此 它们 不应 被 用于   OS   线程 同步   ( 而 应当 使用   " threading " ) ；
而   " errno "   属性 将 是 该 原生 错误码 在   POSIX   平台 下 的 近似 转换 形式
Jan ,   Feb ,   ... ,   Dec   ( 1 )   ( en _ US ) ;   Jan ,   Feb ,   ... ,   Dez   ( de _ DE )   " % B "   本地化 的 月份 全名
不 应该 直接 调用 阻塞 (   CPU   绑定 ) 代码
网络   /   Internet   编程
如果 未指定 其中 一个 ， 则 将 使用   ' ％ '
" "   " "   的 权 标值
" BufferedReader "   在 继承 自   " BufferedIOBase "   和   " IOBase "   的 成员 以外 还 提供 或 重载 了 下列 方法 :
这个 类 方法 没有 在   " Counter "   中 实现
bpo   31202 :   " pathlib . WindowsPath . glob ( ) "   的 结果 现在 与 文本 部分 的 式样 匹配
模块   " logging "   日志 记录 模块 的   API   参考
bpo   27883 :   在 Windows 上将 sqlite 更新 到 3.14 . 1.0
核心 与 内置
" readline "   GNU   readline   接口
在   Mac   OS   X   上 开始 使用   Python   的 最佳 方法 是 通过   IDLE   集成 开发 环境 ， 参见   IDE   部分 ， 并 在   IDE   运行 时 使用 “ 帮助 ” 菜单
当前工作 目录 由 一个 空 字符串 表示 的 处理 方式 与   " sys . path "   中 的 其他 条目 略有不同
返回 以 浮点数 表示 的 从   epoch   开始 的 秒数 的 时间 值
" PyArg _ ParseTuple "   现在 接受   " c "   格式 的   " bytearray "   ( bpo   12380 )
警告 :
返回值 的 参考点 未定义 ， 因此 只有 同一 线程 中 连续 调用 结果 之间 的 差异 才 有效
当 指定 时 ，   separators   应当 是 一个   " ( item _ separator ,   key _ separator ) "   元组
name   为 一个   gif   文件 的 文件名 ，   shape   为   " None " :   安装 相应 的 图像 形状
可选 的   charset   和   language   如果 给出 ， 则 为 指明 要 使用 的 字符集 名称 和 语言 名称
此外 ， 改变 视图 将 透明 地 更新 缓冲区 内容 :
随机 哈希
创建 解析器
该类 具有 一个 属性 :
在   3.3   版 更改 :   实现   " io . BufferedIOBase . read1 ( ) "   方法
不同 的 大小 调整 模式 的 效果 如下 :
在 此 调用 之后 ， 在 任何 其他 时刻 都 不要 使用 该 子类 来 直接 实例 化 日志 记录器 ： 请 继续 使用   " logging . getLogger ( ) "   API   来 获取 你 的 日志 记录器
这样 即使 你 的 模块 不 在 一个包 中 也 有效 ； 你 可以 直接 令   Distutils   来 从 根 包来 处理 模块 ， 并且 这样 对 任何 其他 包 也 有效 （ 除非 你 不 需要   " __ init __. py "   文件 ）
如果 选择 将 安装 目录 将 添加 到   " PATH "
这 通过 使用 函数   " PyLong _ FromLong ( ) "   来 实现
实例 可 通过 处理器 被 接收 ， 并 可 携带 有关 异常 条件 的 附加 信息
不是 每个 标识符 都 会 被 导出 到 查找 表
（ 由 Benjamin   Peterson   和   Antoine   Pitrou   贡献 。 ）
该 对象 不是 线程 安全 的
3.4   新版 功能 .
在   3.6   版 更改 :   接受 一个 类 路径 对象
值   含义   " ' replace ' "   使用 适当 的 替换 标记 进行 替换 ； Python   内置 编解码器   将 在 解码 时 使用 官方   " U   FFFD "   替换 字符 ， 而 在 编码   时 使用   ' ? '
封存
被 跳 过 的 模组 的   " setUpModule ( ) "   和   " tearDownModule ( ) "   不会 被 运行
这个 文件 定义 了 三件 事 ：
偏移   长度   内容   0   4   区块 ID   4   4   大 端 字节 顺序 的 块 大小 ， 不 包括 头   8   n   数据 字节 ， 其中   n   是 前 一字 段 中   给出 的 大小   8   n   0   或   1   如果   n   为 奇数 且 使用 块 对齐 ， 则   需要 填充 字节
嵌套 参数 以及 更 复杂 的 示例 :
当 一个 子 进程 上 的 操作 失败 时 将 被 引发
如果 返回   " NotImplemented " ， 子类 检查 会 按照 正常 机制 继续执行
在   3.4   版 更改 :   The   class   now   supports   hostname   check   with   " ssl . SSLContext . check _ hostname "   and   Server   Name   Indication   ( see   " ssl . HAS _ SNI " ) .
包装 起来
... 为 我 的 项目选择 一个 名字 ？
基于   frame   对象 创建 并 返回 一个 新 的 生成器 对象
典型 应用 包括 对 创建 开销 较大 的 对象 进行 缓存 :
文件名 过长
除了   " tools "   目录 外 ， 还有 一个   " build \ native "   目录
要 使用   " inspect . isawaitable ( ) "   来 检测 他们
在   " $ "   字符 之后 的 第一个 非 标识符 字符 将 表明 占位 符 的 终结
" match ( ) "   在 这种 情况 下应 返回   " None " ，   这 将 导致 解释器 不 打印输出
性能 优化
另 请参阅   " PYTHONDEBUG "
导入 机制 自   Python   诞生 之初 至今 已 发生 了 很大 的 变化
当 数据 点 总数 为 奇数 时 ， 将 返回 中间 值
如为   " False " ， 则   " seek ( ) " ,   " tell ( ) "   和   " truncate ( ) "   将 引发   " OSError "
请参阅 错误处理 方案 了解 下层 的 流式 编解码器 可 支持 的 标准 错误处理 方案
如果 找 不到 有效 的 值 ， 则 会 引发   " EOFError " ,   " ValueError "   或   " TypeError "
由于 第   " 2 "   代是 最 老代 ， 这 一代 的 对象 在 一次 垃圾 回收 后 仍会 保留 原样
（ 由   Daniel   Stutzbach   在   bpo   9213   中 贡献 ， 由   Alexander   Belopolsky   在   bpo   2690   中 贡献 ， 由   Nick   Coghlan   在   bpo   10889   中 贡献 。 ）
在 非 交互 模式 下 ， 会 对 全部 输入 先 解析 再 执行
如果   " shape "   是   " NULL " ， 因为 结果 为   " PyBUF _ SIMPLE "   或   " PyBUF _ WRITABLE "   请求 ， 则 使用者 必须 忽略   " itemsize " ， 并 假设   " itemsize   1 "
示例 :
Python   for   . NET   此 实现 实际上 使用 了   CPython   实现 ， 但是 属于   . NET   托管 应用 并且 可以 引入   . NET   类库
请 注意 ， 散列 或 磅 字符   " ' # ' "   在 Python 中 代表 注释 开始
Python   2.0   有 什么 新 变化
返回 表示 当前 全局 符号表 的 字典
3.2   新版 功能 .
" Z "   ( " str "   或   " None " )   [ const   Py _ UNICODE   ]   与   " u "   类似 ， 但   Python   对象 也 可能 为   " None " ， 在 这种 情况 下   " Py _ UNICODE "   指针 设置 为   " NULL "
警告 控制
可以 为 每个 命令 提供 任意 数量 的 选项 ， 并且 可以 在 文件 中 包括 任意 数量 的 命令 组
你 必须 在 退出 程序 之前 调用   " close ( ) "   否则 将 不会 写入 关键 记录 数据
对象 实现 支持
有效 使用   " sqlite3 "
之前 的 上限 为 五个
当 序列 抽取 超出范围 时 将 被 引发
选项 菜单 （ 命令行 和 编辑器 ）
请参阅   Using   a   rotator   and   namer   to   customize   log   rotation   processing   获取 具体 示例
子包 参考
在   3.6   版 更改 :   返回 的 行 现在 的 类型 是   " OrderedDict "
通过 提升 精度 来 解决 舍入 错误
在   Python   3.2   中 ，   " functools . cmp _ to _ key ( ) "   函数 被 添加 到 标准 库中 的   " functools "   模块 中
因为 无法 检测 外来 线程 的 终结 ， 它们 永远 不会 被 删除
子 命令
3.7   新版 功能 .
" add _ subparsers ( ) "   方法 通常 不带 参数 地 调用 并 返回 一个 特殊 的 动作 对象
3.2   新版 功能 .
被 折叠 的 输出 可 通过 双击 按钮 来 展开 ， 或是 通过 右击 按钮 来 放入 剪贴板 或是 单独 的 窗口
控制字符 会 表示 为 一个 变换 符加 相应 的 字符 ， 例如   " b ' ^ C ' "
Kuchling   和   Moshe   Zadka
用户名
这 与   Python   关系不大 ，   而 与 底层 平台 如何 处理 浮点 数字 关系 更大
有关 继承 的 可选 输入 参数   address   和   authkey   以及 他们 如何 用于 从 进程 连接 已经 存在 的   " SharedMemoryManager "   服务 ， 参见   " multiprocessing . managers . BaseManager "
其它
多个 线程 可以 赋予 相同 的 名称
" distutils "   构建 和 安装   Python   模块
第三方 软件包 应该 由 应用程序 与 嵌入式 发行版 一起 安装
与   " Any "   相似 ， 所有 的 类型 都 是   " object "   的 子 类型
填充
3.2   新版 功能 .
不幸 的 是 ， 没有 什么 办法 能够 自动检测 一个 归档 的 编码 格式
PEP   414   显式 的 Unicode 文本   PEP   由   Armin   Ronacher   撰写
node _ depth   :   节点 深度   ( 0   至   255 ， 对于 叶子 或 在 连续 模式 下则 为   0 )
使用 快捷方式
元型 通过 一个 根据 下面 的 切片 列表 来 构造 的 键 进行 索引   （ 与 普通 抽取 一样 使用   " __ getitem __ ( ) "   方法 ）
示例 ：
这 是 由   UDP   中 的 套 接字 选项   " SO _ REUSEADDR "   的 行为 导致 的
XML   RPC 类型   Python 数据类型   " boolean "   " bool "   " int " ,   " i1 " ,   " i2 " ,   " int "   的 范围 从   2147483648   到   2147483647
常数
将   Content   Type   头字 段 的   " boundary "   参数设置 为   boundary
在   3.3   版 更改 :   添加 了   " fileno ( ) " ,   " readable ( ) " ,   " seekable ( ) " ,   " writable ( ) " ,   " read1 ( ) "   和   " readinto ( ) "   方法
它 是   " Exception "   的 一个 子类
这些 函数 必须 分别 提供 由 基类   " StreamWriter "   和   " StreamReader "   所 定义 的 接口
要 配置 树 的 列 ， 则 调用 此 方法 并 附带 参数   column   " # 0 "
将   bytes   like   object   转换 为 一个 值
"   . pyd "   文件 和   DLL   文件 相同 吗 ？
特殊 类型 原语
HTTPRedirectHandler   对象
输出 ：
这个 方法 的 另 一个 名字 是   Randal   L
顺便 说明 一下 ， 我 把 任何 跟 在 一个点 号 之后 的 名称 都 称为 属性 例如 ， 在 表达式   " z . real "   中 ， " real "   是 对象   " z "   的 一个 属性
__ slots __   一种 写 在 类 内部 的 声明 ， 通过 预先 声明 实例 属性 等 对象 并 移除 实例 字典 来 节省 内存
这个 格式 描述 器 不 支持 一致性 检查 ， 并且 要求 你 必须 指定 一个 自定义 的 过滤器 链 （ 用于 压缩 和 解压缩 ）
要 包含 头文件 ， 请 将 两个 目录 （ 如果 不同 ） 都 放到 你 所用 编译器 的 包含 搜索 路径 中
注意 ， 进程 池 对象 的 方法 只有 创建 它 的 进程 能够 调用
注解 :
它们 分别 是   " tobytes ( ) "   和   " frombytes ( ) "   的 别名 ， 自   Python   3.2   起 已 被 弃用
此外 ， 由于 系统 中 其他 活动 的 安排   ， 暂停 时间 可能 比 请求 的 时间 长 任意 量
在   3.3   版 更改 :   移 除了   strict   参数
你 实际上 不 需要 子 类化   " Filter " :   你 可以 将 传入 任何 包含   " filter "   方法 的 具有 相同 语义 的 的 实例
带有 输出 形参 的 函数 如果 输出 形参 存在 单一 值则 会 自动 返回 该值 ， 或是 当 输出 形参 存在 多个 值时 返回 包含 这些 值 的 元组 ， 因此 当   GetWindowRect   被 调用 时 现在 将 返回 一个   RECT   实例
如果   stdout   参数 是   " PIPE " ， 此 属性 是 一个 类似   " open ( ) "   返回 的 可 读流
Python   是 一种 对 编程 初学者 友好 的 语言 吗 ？
反射
PEP   3118 :   新 的 内存 视图 实现 和 缓冲 协议 文档
shape   可以 是 任何 内置 形状 ， 即 :   arrow ,   turtle   等
类   " TextIOWrapper "   继承 了   " TextIOBase "   ， 是 原始 缓冲 流 （   " BufferedIOBase "   ） 的 缓冲 文本 接口
（ 由   Dwayne   Bailey   在   bpo   1581073   中 贡献 。 ）
此 行为 仅 在 直接 或 通过 别名 来 构造   " OSError "   时 发生 ， 并且 在子 类化 时 不会 被 继承
在   3.3   版 更改 :   timeout   被 添加
这是 函数   " datetime . isocalendar ( ) "   的 逆 操作
" secrets "   生成 安全 随机 数字 用于 管理 密码
" pip "   有 更 多 选择
当 文件 存在 时 ， 将 忽略 所有 注册表 和 环境变量 ， 启用 隔离 模式 ， 并且 ： 除非 文件 中 的 一行 指定   " import   site "   ， 否则 不会 导入   " site "
鼓励 模块 作者 使用   distutils   方式 来 构建 扩展 模块 ， 而 不 使用 本节 所 描述 的 方式
使用 高层 级 的   " asyncio . create _ task ( ) "   函数 来 创建   Task   对象 ， 也 可用 低 层级 的   " loop . create _ task ( ) "   或   " ensure _ future ( ) "   函数
[   调度 回调 函数   ]
移除 列表 中 第一个 值为   x   的 元素
隐藏 面板
键和值 总是 被 存储 为 字节 串
构建
注解 :
3.2   新版 功能 .
以下 示例 显示 如何 计算 包含 多行 的 表达式
3.7   新版 功能 .
将 大端序 采样 转换 为 小端序 采样 ， 反之亦然
如果   func   之前 没有 被 注册 ， " unregister ( ) "   会 静默 地 不 做 任何 操作
尽管 Python 的 目标 是 在 所有 平台 中 都 可移植 ， 但是 Windows 有 一些 独特 的 特性
作者 :   A . M
这 在 Web 应用程序 中 很 常见 ， 当然 也 会 在 其他 场景 中 出现
Python   的   " Ellipsis "   对象
度量 单位 设置
背景
3.1   新版 功能 .
API   与 特性 的 移除
注释 前缀 是 配置文件 中 用于 标示 一条 有效 注释 的 开头 的 字符串
已 中断 系统 调用 需要 重启
如果 输入 的 可 迭代 对象 的 长度 已知   ( 即 输入 对象 实现 了   " __ len __ " ) ， " list "   构造 器 不会 过度 分配 内部 项 缓冲区
即使 线程 退出 后 ， 仍 可 得到 标识符
在   3.7   版 更改 :   格式 字符串 参数 现在 是 仅限 位置 参数
其次 ， 记录器 对象 根据 严重性 （ 默认 过滤 工具   ） 或 过滤器 对象 确定 要 处理 的 日志 消息
有如 如 上 例子 函数   " setup ( ) "   的   " ext _ modules "   参数 是 一列 扩展 模块 ， 每个 是 一个   " Extension "   类 的 实例
请参阅   BSD   或   Mac   OS   系统 的 指南 页   chflags ( 2 )   了解 详情
没有 公共 构造函数
列表 的 顺序 与 归档 中 成员 的 顺序 一致
要 将 形参 标记 为 仅限 关键字   ， 即 指明 该 形参 必须 以 关键字 参数 的 形式 传入 ，   应 在 参数 列表 的 第一个 仅限 关键 字形 参 之前 放置 一个   "   "
由于 没有 进行 过滤 ， 因此 该 例程 的 实用性 尚存 疑
用于 容器 对象 的 遍历 函数
C   名称   Python   名称   注释   " PyExc _ BaseException "   " BaseException "   ( 1 )   " PyExc _ Exception "   " Exception "   ( 1 )   " PyExc _ ArithmeticError "   " ArithmeticError "   ( 1 )   " PyExc _ AssertionError "   " AssertionError "   " PyExc _ AttributeError "   " AttributeError "   " PyExc _ BlockingIOError "   " BlockingIOError "   " PyExc _ BrokenPipeError "   " BrokenPipeError "   " PyExc _ BufferError "   " BufferError "   " PyExc _ ChildProcessError "   " ChildProcessError "   " PyExc _ ConnectionAbortedError "   " ConnectionAbortedError "   " PyExc _ ConnectionError "   " ConnectionError "   " PyExc _ ConnectionRefusedError "   " ConnectionRefusedError "   " PyExc _ ConnectionResetError "   " ConnectionResetError "   " PyExc _ EOFError "   " EOFError "   " PyExc _ FileExistsError "   " FileExistsError "   " PyExc _ FileNotFoundError "   " FileNotFoundError "   " PyExc _ FloatingPointError "   " FloatingPointError "   " PyExc _ GeneratorExit "   " GeneratorExit "   " PyExc _ ImportError "   " ImportError "   " PyExc _ IndentationError "   " IndentationError "   " PyExc _ IndexError "   " IndexError "   " PyExc _ InterruptedError "   " InterruptedError "   " PyExc _ IsADirectoryError "   " IsADirectoryError "   " PyExc _ KeyError "   " KeyError "   " PyExc _ KeyboardInterrupt "   " KeyboardInterrupt "   " PyExc _ LookupError "   " LookupError "   ( 1 )   " PyExc _ MemoryError "   " MemoryError "   " PyExc _ ModuleNotFoundError "   " ModuleNotFoundError "   " PyExc _ NameError "   " NameError "   " PyExc _ NotADirectoryError "   " NotADirectoryError "   " PyExc _ NotImplementedError "   " NotImplementedError "   " PyExc _ OSError "   " OSError "   ( 1 )   " PyExc _ OverflowError "   " OverflowError "   " PyExc _ PermissionError "   " PermissionError "   " PyExc _ ProcessLookupError "   " ProcessLookupError "   " PyExc _ RecursionError "   " RecursionError "   " PyExc _ ReferenceError "   " ReferenceError "   ( 2 )   " PyExc _ RuntimeError "   " RuntimeError "   " PyExc _ StopAsyncIteration "   " StopAsyncIteration "   " PyExc _ StopIteration "   " StopIteration "   " PyExc _ SyntaxError "   " SyntaxError "   " PyExc _ SystemError "   " SystemError "   " PyExc _ SystemExit "   " SystemExit "   " PyExc _ TabError "   " TabError "   " PyExc _ TimeoutError "   " TimeoutError "   " PyExc _ TypeError "   " TypeError "   " PyExc _ UnboundLocalError "   " UnboundLocalError "   " PyExc _ UnicodeDecodeError "   " UnicodeDecodeError "   " PyExc _ UnicodeEncodeError "   " UnicodeEncodeError "   " PyExc _ UnicodeError "   " UnicodeError "   " PyExc _ UnicodeTranslateError "   " UnicodeTranslateError "   " PyExc _ ValueError "   " ValueError "   " PyExc _ ZeroDivisionError "   " ZeroDivisionError "
全局变量 、 类 属性 和 函数 的 类型 提示 可以 使用   " typing . get _ type _ hints ( ) "   来 访问 ， 但 局部变量 则 不 可以
（ 每个 子 解析器 命令 一条 帮助 消息 ， 但是 ， 也 可以 像 上面 那样 通过 提供   " help   "   参数 给   " add _ parser ( ) "   来 给出 。 ）
" WinError "   接收 一个 可选 的 错误码 作为 参数 ， 如果 没有 的话 ， 它 将 调用   " GetLastError ( ) "   获取 错误码
3.4   新版 功能 .
3.8   新版 功能 .
为了 演示   " pprint ( ) "   函数 及其 形参 的 几种 用法 ， 让 我们 从   PyPI   获取 关于 某个 项目 的 信息 :
此 实现 会 在 实例 化 时 注册 一个   " SIGCHLD "   信号处理 程序
警告 :
添加 了 新 的   " threading . get _ native _ id ( ) "   函数 以及   " threading . Thread "   类 的   " native _ id "   属性
在   MandatoryRelases   还 没有 发布 时 ，   MandatoryRelease   表示 该 特性 会 变成 语言 的 一部分 的 预测 时间
例如 ， " +   "   会 原地 改变 列表 ， 但 不会 改变 元组 或 整数   ( " a _ list   +   [ 1 ,   2 ,   3 ] "   与   " a _ list . extend ( [ 1 ,   2 ,   3 ] ) "   一样 都 会 改变   " a _ list " ， 而   " some _ tuple   +   ( 1 ,   2 ,   3 ) "   和   " some _ int   +   1 "   则 会 创建 新 的 对象 )
此 操作 不 受 上下文 影响 且 静默 ： 不 更改 任何 标志 且 不 执行 舍入
在   Windows   上 构建   C   和   C++   扩展
这种   Python   常用 代码 编写 风格 会 假定 所 需 的 键 或 属性 存在 ， 并 在 假定 错误 时 捕获 异常
如果 需要 在   HTML   中 显示 可能 包含 此类 字符 的 文本 ， 请 使用 此 选项
Python   解释器 内置 了 很多 函数 和 类型 ， 您 可以 在 任何 时候 使用 它们
可以 提供   IPv4   或   IPv6   网址 ； 小于   2   32   的 整数 默认 被 视为   IPv4
请 注意 它 将 为 具有   " __ getitem __ ( ) "   方法 的   Python   类 返回   " 1 " ， 因为 在 一般 情况 下 无法 确定 它 所 支持 的 键 类型
" binascii "   模块 定义 了 以下 函数 ：
空白行
extension   module   扩展 模块 以   C   或   C++   编写 的 模块 ， 使用   Python   的   C   API   来 与 语言 核心 以及 用户 代码 进行 交互
这些 语句 用于 初始化 模块
返回   " a   /   b "   例如   2 / 3   将 等于   . 66   而 不是   0
对于   " import "   子句 中 指定 的 每个 标识符 ：
用于 此 目的 的 最 常见 类型 为   " bytes "   和   " bytearray " ， 但 许多 其他 可 被 视为 字节 数组 的 类型 也 实现 了 缓冲 协议 ， 因此 它们 无需 额外 从   " bytes "   对象 复制 即可 被 读取 或 填充
要 获取 格式 指令 的 完整 列表 ， 请参阅   strftime ( )   和   strptime ( )   的 行为
在 模块 开头 ， 在 此行 后 :
当   timeout   参数 不 存在 或者 是   " None "   ， 这个 操作 会 阻塞 直到 线程 终结
（ 有关 文档 字符串 的 更 多 信息 ， 请参阅 文档 字符串 部分 ） 有些 工具 使用 文档 字符串 自动 生成 在线 或 印刷 文档 ， 或者 让 用户 以 交互式 的 形式 浏览 代码 ； 在 你 编写 的 代码 中 包含 文档 字符串 是 一种 很 好 的 做法 ， 所以 要 养成 习惯
一对 花 括号 可以 创建 一个 空 字典 ： " { } "
" operator "   标准 运算符 替代 函数
示例
有序 词典 就 像 常规 词典 一样 ， 但 有 一些 与 排序 操作 相关 的 额外 功能
" finally "   子句 将 被 执行
控件 状态
核心 与 内置
某些 操作   ( 例如   " y . append ( 10 ) "   和   " y . sort ( ) " )   是 改变 原 对象 ， 而 看上去 相似 的 另 一些 操作   ( 例如   " y   y   +   [ 10 ] "   和   " sorted ( y ) " )   则 是 创建 新 对象
这样 做 的 主要 好处 是 ， 单个 启动 程序 可以 同时 支持 多个 Python 版本 ， 具体 取决于 第一行 的 内容
处理程序 所 对应 格式化 器 的   ID
如果 根本 未 设置 此 环境变量 ， 则 解释器 默认 使用 当前 区域 设置 ，   除非 当前 区域 被 标识 为 基于   ASCII   的 旧式 区域 设置 （ 如   " PYTHONCOERCECLOCALE "   所述 ） ， 并且 区域 强制 转换 被 禁用 或 失败
文件类型   安装 目录   模块   "   prefix   \ Lib \ site   packages "   脚本   "   prefix   \ Scripts "   数据   "   prefix   "   C   头文件   "   prefix   \ Include { distname } "
要 启用 此 特性 ， 只 需 简单 地 将 此 代码 添加 到 你 的   CGI   脚本 的 最 顶端 :
目录
在 这种 情况 下 ，   str   [   size   1 ]   的 值 是   " ' \ 0 ' "
如果   o   中 的 某 一项 等于   value   ， 则 返回   " 1 " ， 否则 返回   " 0 "
数字 的 层次结构 的 基础
3.9   版后 已 移除 :   Deprecated   in   favor   of   " status " .
应该 使用   " PyTuple _ Pack ( ) "
Sun   音频 硬件 等 使用 该 编码
方法
需要 注意 的 是 ， ' 应用程序 '   代码 并 不 关心 是否 有 多个 日志 处理器
转义 所有 特殊字符   ( " ' ? ' " ,   " '   ' "   和   " ' [ ' " )
所 发布 的 每个 页面 顶端 都 带有 导航 栏 ， 你 可以 点击   Get   获取 特定 条 目的 帮助 ， 点击   Search   在 所有 模块 的 提要 行中 搜索 特定 关键词 ， 或是 点击   Module   index   ,   Topics   和   Keywords   前往 相应 的 页面
（ 而 在 不同 进程 中 使用 相同 的 代理 对象 却 没有 问题 。 ）
（ 由   Joannah   Nanjekye   在   bpo   26978   中 贡献 。 ）
在   3.4   版 更改 :   添加 了 对   int   和   float   派生 的 枚举 类 的 支持
" operator "   标准 运算符 替代 函数
尝试 删除 默认值 将会 引发   " KeyError "
PEP   328 :   多行 导入
以 字符串 形式 返回 一条 从 连接 对象 另一端 发送 过来 的 字节 数据
浮点数 在 计算机硬件 中 表示 为 以   2   为 基数 （ 二进制 ） 的 小数
它 具有 一个 属性   " data " ， 可 被 用来 提取   UID   的   int   值
3.2   新版 功能 .
实际上 ， " setup . cfg "   ( 以及 目标 系统 上 的 其他 任何   Distutils   配置文件 )   是 在 配置 脚本 之后 、 命令行 之前 被 处理
隐式 拼接 的 行 也 可以 出现 于 三 引号 字符串 中   ( 见 下 ) ； 此 情况 下 这些 行 不 允许 带有 注释
返回 保存 在   capsule   中 的 当前 析 构器
在 表层 之 处 ， 以上 增强 赋值 语句 所 做 的 大致 是 这样 :
" parser . clear ( ) "   会 保留 其 原状 ，
在   3.5   版 更改 :   " read ( ) "   方法 现在 接受   " None "   作为 参数
使用   " ' not   compressed ' "   代替   " ' NONE ' "
如果 底层 进程 仍 在 运行 ， 则 会 引发   " ValueError "
浏览器 控制器 提供 三个 与 模块 级 便捷 函数 相同 的 方法 ：
调和 均值 , 也 叫次 相反 均值 ， 所有 数据 的 倒数 的 算术 平均数   " mean ( ) "   的 倒数
zlib   库 的 项目 主页 是   https : / / www . zlib . net
映射 协议 访问
" SocketHandler "   的 工厂 方法 会 在 此 被 重载 以 创建 一个   UDP   套 接字   ( " socket . SOCK _ DGRAM " )
对于 该类 中 的 任一 方法 ，   resource   参数 的 值 都 需要 是 一个 在 概念 上 表示 文件名称 的   path   like   object
" pipes "   终端 管道 接口
请 注意 子 进程 获得   pid   0   而   fd   为   invalid
工具 / 示例
引用 计数 对   Python   代码 来说 通常 是 不 可见 的 ， 但 它 是   CPython   实现 的 一个 关键 元素
API   与 特性 的 移除
迭代 器
该 函数 返回 一个 定义 了   " __ next __ ( ) "   方法 的 迭代 器 对象 ， 此 方法 将 逐一 访问 容器 中 的 元素
这会 阻塞 调用 该 方法 的 线程 ， 直到 被 调用   " join ( ) "   方法 的 线程 终结
默认值 为   " " rb " "
一个 已 连接 并且 可读 的   " socket . socket "   对象 ； 或者
每 一行 包含 了 最 多   width   个 月 ( 默认 为 3 )
在 这种 情况 下 :
在 方法 被 调用 时   func   将 作为 函数 被 调用
核心 与 内置
替换 ...   打开 查找 并 替换 对话框
保留 所有 权利
P _ WAIT   示例 :
如果 没有 文档 字符串 ， " pydoc "   会 尝试 从类 、 函数 或 方法 定义 上方 ， 或是 模块 顶部 的 注释 行 段落 获取   ( 参见   " inspect . getcomments ( ) " ) .
ProcessingInstruction   对象
返回值 是 以下 十个 字符串 中 的 一个
add _ argument ( )   方法
PEP   587 :   Python   初始化 配置
" operator "   标准 运算符 替代 函数
下列 （ 简要 的 ） 例子 显示 了 这 一点 :
Python   3.5 . 2   正式版
在   3.3   版 更改 :   参考 上文
请参阅   ModuleFinder   的 示例 用法
typecode _ or _ type   指明 了 返回 的 对象 类型 :   它 可能 是 一个   ctypes   类型 或者   " array "   模块 中 每个 类型 对应 的 单 字符 长度 的 字符串
" audioop "   模块 包含 针对 声音 片段 的 一些 有用 操作
原始 锁 是 一个 在 锁定 时 不 属于 特定 线程 的 同步 基元 组件
ipaddress 模块 介绍
文档
源代码 ：   Lib / argparse . py
与   C   不同 ， Python   中 所有 比较 运算 的 优先级 相同 ， 低于 任何 算术 、 移位 或位 运算
转义序列   意义   注释   " \ newline "   反 斜杠 加 换行 全 被 忽略   " \ \ "   反 斜杠   ( " \ " )   " \ ' "   单引号   ( " ' " )   " \ " "   双引号   ( " " " )   " \ a "   ASCII   响铃   ( BEL )   " \ b "   ASCII   退格   ( BS )   " \ f "   ASCII   进纸   ( FF )   " \ n "   ASCII   换行   ( LF )   " \ r "   ASCII   回车   ( CR )   " \ t "   ASCII   水平 制表   ( TAB )   " \ v "   ASCII   垂直 制表   ( VT )   " \ ooo "   八进制 数   ooo   码位 的 字符   ( 1 , 3 )   " \ xhh "   十六进制 数   hh   码位 的 字符   ( 2 , 3 )
这 等价 于 :
如果   ob   是 一个 生成器 对象 则 返回 真值 ；   ob   必须 不 为   " NULL "
NamedNodeMap   对象
PEP   3119 :   抽象 基类
以下 示例 扩展 了   " code . InteractiveConsole "   类以 支持 历史 保存 / 恢复
这 对   Web   应用程序 以及 其他 服务 于 客户端 的 线程 需要 尽可能 快地 响应 的 服务 应用程序 来说 很 重要 ， 任何 潜在 的 慢速 操作   （ 例如 通过   " SMTPHandler "   发送 邮件 ） 都 要 在 单独 的 线程 上 完成
返回 一个 转换 为   " TYPE   "   的 指针
要 获取 一个   ZIP   归档 中 的 文件 列表 ， 请 使用   "   l "   选项 :
触碰 已 在 上级 窗口 上 被 触 碰 的 每个 位置
BLAKE2b   ， 针对   64   位 平台 进行 优化 ， 并会 生成 长度 介于   1   和   64   字节 之间 任意 大小 的 摘要
返回 发现 的 不可 达 对象 的 数目
如果 配置 字典 是 使用   Python   代码 构造 的 ， 这会 很 直观 ， 但是 当 配置 是 通过 文本文件 （ 例如   JSON ,   YAML ） 提供 的 时候 就 会 引发 问题
（ 请参阅 原型 一节 了解 最后 三种 符号 的 句法 定义 。 ）
根据 定义 ， 它 在 整个 进程 范围 中
引发   " ValueError "   并且 返回   "   1.0 "   如果 字符串 不是 浮点数 的 有效 的 表达方式
在   3.4   版 更改 :   向   " open ( ) "   所 返回 的 对象 添加 了 上下文 管理 协议 的 原生 支持
然后 ， 它 将 将 编码 的 数据 复制到 缓冲区 ， 并 终止 它
idlelib   与   IDLE
运行 时 配置   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
选择   " notify ( ) "   还是   " notify _ all ( ) "   ， 取决于 一次 状态 改变 是 只能 被 一个 还是 能 被 多个 等待 线程 所用
安全
如果 在 执行   " try "   子句 期间 发生 了 异常 ， 该 异常 可 由 一个   " except "   子句 进行 处理
为了 防止 被 垃圾 回收 掉 ， 否则   " SpamError "   随时 会 成为 野 指针
此 信息 适用 于 当   curses   程序 需要 对 屏幕 外观 进行 完全 控制 的 情况
如果 该 参数 省略 ， 则 使用   " file . mode "   的 值 （ 如果 有 ） ， 否则 使用   " ' rb ' "
执行 会 完全 委托 给 加载 器 ， 由 加载 器 决定 要 填充 的 内容 和 方式
后 两种 情况 将 分别 返回   " False "   或   " True "
如果 创建 栅栏 对象 时 在 构造函数 中 提供 了   action   参数 ， 它 将 在 其中 一个 线程 释放 前 被 调用
注解 :
此文 于   1988   年   7   月 发表 于   Dr
" cmath "   关于 复数 的 数学 函数
如果 操作系统 调用 返回 字节数 少于   size   则 此 方法 也 可能 返回 少于   size   个 字节
Python 中 的 局部变量 和 全局变量 有 哪些 规则 ？
处理程序 的 级别 作为 过滤器 ， 其 方式 与 记录器 级别 相同
命名 组 仍然 是 给定 的 数字 ， 因此 你 可以 通过 两种 方式 检索 有关 组 的 信息 :
Unix   syslog   库 例程
当 没有 引发 任何 异常 时 它 就 相当于   " ALL _ COMPLETED "
下列 方法 提供 了 与 同名 函数 相对 应 的 实现
这里 ，   " Base . meth "   是 一个 未 绑定 的 方法 ， 因此 您 需要 提供   " self "   参数
" tarfile . open ( ) "   将 返回 一个 将 其 数据 作为 数据 块 流来 处理 的   " TarFile "   对象
两个 方法 被 弃用 ：
进入   cbreak   模式
这是   " SyntaxError "   的 一个 子类
这 允许   " ScrolledText "   控件 可以 直接 用于 实现 大多数 正常 的 布局 管理 行为
重置 屏幕 上 的 所有 海龟 为 其 初始状态
为了 说明 它 是 如何 工作 的 ， 我们 可以 在 上面 添加 以下 代码 块 :
" open ( ) "   和   " io . open ( ) " ;
流
（ 由   Steve   Dower   在   bpo   36085   中 贡献 。 ）
shebang   lines   的 参数
由   " Tcl ( ) "   对象 创建 的 对象 可以 通过 调用 其   " loadtk ( ) "   方法 来 创建 顶层 窗口 （ 并 初始化   Tk   子系统 ）
（ 由   Yury   Selivanov   和   Kyle   Stanley   在   bpo   34790   中 贡献
例如 ， 要 使用 DSU 方法 按   grade   对 学生 数据 进行 排序 ：
返回 一个 新 的 等价 的 管道 模板
载入 动态 连接 库
返回 一个 新 的   " dict "   ， 它 将 字段名 称 映射 到 它们 对应 的 值 ：
测试
iterables   是 立即 执行 而 不是 延迟 执行 的 ；
在 内部 ， 相对 权重 在 进行 选择 之前 会 转换 为 累积 权重 ， 因此 提供 累积 权重 可以 节省 工作量
调用 该 方法 有 “ 等待 ” 已经 结束 的 进程 的 副作用
这 避免 了   C   程序 中 常见 的 一种 问题 ： 想要 在 表达式 中写   "   "   时 却 写成 了   "   "
在   Windows ， 如果   close _ fds   为 真 ，   则 子 进程 不会 继承 任何 句柄 ， 除非 在   " STARTUPINFO . IpAttributeList "   的   " handle _ list "   的 键 中 显式 传递 ，   或者 通过 标准 句柄 重定向 传递
一个   " ChainMap "   类 是 为了 将 多个 映射 快速 的 链接 到 一起 ， 这样 它们 就 可以 作为 一个 单元 处理
首先 ， 更 明显 的 显示 出 ， 使用 的 是 方法 或 实例 属性 而 不是 局部变量
在 这种 情况 下 ， 应用程序 将 显示 为   Python 而 不是 其 实际 名称 ， 并且 用户 可能 无法 将 其 与 其他 正在 运行 的 Python 进程 或 文件 关联 区分 开来
在   3.5   版 更改 :   现在 支持 可写 的 字节 类 对象
此 方法 通常 是 通过   " async   for "   循环 隐式 地 调用
typedef   参数 类型   返回 类型   " allocfunc "   " PyTypeObject "   Py _ ssize _ t   " PyObject "   " destructor "   void   void   " freefunc "   void   void   " traverseproc "   void   " visitproc "   void   整型   " newfunc "   " PyObject "   " PyObject "   " PyObject "   " PyObject "   " initproc "   " PyObject "   " PyObject "   整型   " PyObject "   " reprfunc "   " PyObject "   " PyObject "   " getattrfunc "   " PyObject "   const   char   " PyObject "   " setattrfunc "   " PyObject "   const   char   整型   " PyObject "   " getattrofunc "   " PyObject "   " PyObject "   " PyObject "   " setattrofunc "   " PyObject "   " PyObject "   整型   " PyObject "   " descrgetfunc "   " PyObject "   " PyObject "   " PyObject "   " PyObject "   " descrsetfunc "   " PyObject "   " PyObject "   整型   " PyObject "   " hashfunc "   " PyObject "   Py _ hash _ t   " richcmpfunc "   " PyObject "   " PyObject "   整   " PyObject "   型   " getiterfunc "   " PyObject "   " PyObject "   " iternextfunc "   " PyObject "   " PyObject "   " lenfunc "   " PyObject "   Py _ ssize _ t   " getbufferproc "   " PyObject "   " Py _ buffer "   整   整型   型   " releasebufferproc "   " PyObject "   " Py _ buffer "   void   " inquiry "   void   整型   " unaryfunc "   " PyObject "   " PyObject "   " binaryfunc "   " PyObject "   " PyObject "   " PyObject "   " ternaryfunc "   " PyObject "   " PyObject "   " PyObject "   " PyObject "   " ssizeargfunc "   " PyObject "   Py _ ssize _ t   " PyObject "   " ssizeobjargproc "   " PyObject "   Py _ ssize _ t   整型   " objobjproc "   " PyObject "   " PyObject "   整型   " objobjargproc "   " PyObject "   " PyObject "   整型   " PyObject "
" Z # "   ( " str "   或   " None " )   [ const   Py _ UNICODE   ,   int   或   " Py _ ssize _ t " ]   与   " u # "   类似 ， 但   Python   对象 也 可能 为   " None " ， 在 这种 情况 下   " Py _ UNICODE "   指针 设置 为   " NULL "
" ' X ' "   十六进制 格式
如果   SSL   伪 随机数 生成器 已 使用 ‘ 足够 的 ’ 随机性 作为 种子 则 返回   " True " ，   否则 返回   " False "
" urllib . parse "   用于 解析   URL
（ 由   Victor   Stinner   在   bpo   36763   中 贡献 。 ）
" int ( string ,   base ) "   接受 第二个 可 选 参数 指定 转换 的 基数 ， 例如   " int (   ' 0x144 ' ,   16 )   324 "
在   3.6   版 更改 :   允许 下划线 进行 分组 ， 就 像 代码 中 的 整数 和 浮点 文字 一样
bpo   23248 :   从 最新 的 OpenSSL   git   master 更新 SSL 错误代码
它们 将 不再 直接 访问   " PyTypeObject . tp _ basicsize "   成员
3.3   新版 功能 .
" functools "   高阶 函数 和 可 调用 对象 上 的 操作
当 执行   " reload ( ) "   的 时候 ：
新增 和 改进 的 模块
将 在 指定   section   中 的   option   强制 转换 为 浮点数 的 便捷 方法
加入   OK   和   Cancel   按钮 的 默认 行为
" json "   JSON   编码 和 解码器
RFC ， 准许   JSON   反 序列化 器 忽略 它们 输入 中 的 初始   BOM   标记 ， 但 不 要求
当 处理 大量 子 进程 时 也 不 存在 显著 的 开销   ( 每个 子 进程 结束 时为   O ( 1 )   )   ，   但 当 每个 进程 启动 线程 时则 需要 额外 的 内存
例子 中新 的 元组 创建 用于 参数 列表 ， 并且 在   " PyObject _ CallObject ( ) "   之后 立即 使用 了   " Py _ DECREF ( ) "
" global "   语句 是 作用 于 整个 当前 代码 块 的 声明
如果 没有 增长 空间 则 会 引发   " MemoryError "
这个 变量 可以 修改 ； 这样 做会 影响 将来 对 包中 包含 的 模块 和子 包 的 搜索
库中 的 函数 使用 标准   C   调用 约定 ， 并 假定 返回   " int "
构建
返回 队列 用 的 元素 数量
" plistlib "   生成 与 解析   Apple   " . plist "   文件
安全
但是 ， 如果 标头 中 指定 的 文件 已 存在 ， 则 会 引发   " uu . Error "
序列化 器中 ，   allow _ nan   参数 可 用于 替代 这个 行为
使用 反 斜杠 转义 符   ( " \ x " ,   " \ u "   和   " \ U " )   替换   unicode   编码 错误
有关 参数 的 更 全面 描述 ， 请参阅   " io . open ( ) "   函数 的 文档
如果 你 使用 一个 字符串 ， 则 会 使用 标准   SMTP   端口
" __ hash __ ( ) "   由 内置 的   " hash ( ) "   使用 ， 当 对象 被 添加 到 散列 集合 （ 如 字典 和 集合 ） 时
bpo   41182 :   选择器 ： 使用 基于   DefaultSelector   的 实现
核心 与 内置
用法 :
在   " f   methodcaller ( ' name ' ,   ' foo ' ,   bar   1 ) "   之后 ， 调用   " f ( b ) "   将 返回   " b . name ( ' foo ' ,   bar   1 ) "
W3C   C14N   测试 套件
组合   " Flag "   的 成员
与 标准   C   memmove   库函数 相同 ： 将   count   个 字节 从   src   拷贝到   dst
将 文本 插入 行 缓冲区 的 当前 游标位置
XML 树 和 元素
当 请求 对 一个 非 目录 对象 执行 目录 操作   ( 例如   " os . listdir ( ) " )   时 将 被 引发
参考 引用
3.3   新版 功能 .
模式 中 的 后 向 引用 允许 你 指定 还 必须 在 字符串 中 的 当前 位置 找到 先前 捕获 组 的 内容
将 打开 指定 的 文件 并 将 其 用作 日志 记录 流
它 只是 遍历 单独 的 路径 条目 ，   将 它们 各自 关联 到 某个 知道 如何 处理 特定 类型 路径 的 路径 条目 查找 器
所 获取 页面 的   URL   未必 就是 所 请求 的   URL
发布 日期 :   2016   06   12
如果 该字段 当中 没有 此参数 ， 该 方法 会退 而 寻找   Content   Type   字 段 当中 的   " name "   参数值
在 压缩 或 解压缩 过程 中 发生 错误 时 的 异常
来自 其他 线程 的 日程安排
其他   offset   值 都 会 产生 未定义 的 行为
为什么   join ( ) 是 一个 字符串 方法 而 不是 列表 或 元组 方法 ？
和   " compilest ( st ,   filename ) "   相同 .
当 处于 非 阻塞 模式 时 ， 如果 缓冲区 需要 被 写入 但 原始 流 发生 阻塞 则 将 引发   " BlockingIOError "
当 附带 参数 列表 调用 方法 对象 时 ， 将 基于 实例 对象 和 参数 列表 构建 一个 新 的 参数 列表 ， 并 使用 这个 新 参数 列表 调用 相应 的 函数 对象
示例 :
Pillai   在   bpo   3488   中 贡献 ， 由 Antoine   Pitrou ,   Nir   Aides   和   Brian   Curtin   在   bpo   9962 ， bpo   1675951   ， bpo   7471   和   bpo   2846   中 贡献   。 ）
模块   " time "   时间 的 访问 和 转换
文件 头 的 字节 偏移量
" ctypes "   不 支持 带 位域 的 结构 体 、 联合 以值 的 方式 传给 函数
致谢
以下 代码 ：
切片 可 被 用作 表达式 以及 赋值 或   " del "   语句 的 目标
核心 与 内置
安排 回调
表示 性 错误
将 已 清空 的   TurtleScreen   重置 为 初始状态 :   白色 背景 ， 无 背景 片 ， 无 事件 绑定 并 启用 追踪
这个 模块 定义 了 以下 函数 ：
bpo   33503 :   修复 错误 的 pypi 链接
请 参见   " PYTHONUTF8 "   了解 如何 启用   UTF   8   模式 ， 并 参见 附录 ： 设置 环境变量 了解 如何 修改 环境变量
" nuget . exe "   命令行 工具 可以 直接 从   " https : / / aka . ms / nugetclidl "   下载 ， 例如 ， 使用 curl 或 PowerShell
由此 构造 器 创建 的 对象 在 被 解封 时 也 会 绕过 反 序列化 进程 的 缓存
目前 ， 预计 核心 开发 团队 将 继续 支持 Python   2.7 （ 接收 安全更新 和 其他 错误 修复 ） ， 直到 至少   2020 年 （ 首次 发布 后 10 年 ， 相比之下 ， 通常 的 支持 期为 18   24 个 月 ）
注意   PyMODINIT _ FUNC   声明 了 函数 作为   " PyObject   "   返回 类型 ， 声明 任何 平台 的 链接 生命 ， 以及 给 C++ 生命 函数 的   " extern   " C " "
此 代码 由   Lance   Ellinghouse   贡献 ， 并 由   Jack   Jansen   修改
最高 层级 组件
此 模块 提供 了 一个 类 、 一个 实例 和 一个 函数 ：
这 确保 了 对 缓冲区 的 本地 修改 在 内存 映射 中 可用
当 一个 C 函数 被 Python 调用 时 ， 会 从 调用 方 传来 的 参数 借用 引用
示例
命令行 选项
具有 绝对 跳转 目标 的 字节 码 序列
设置 断点 在 当前 行 设置 断点
这 对于 你 想 动态 生成 值 （ 而 字典 中 的 值 往往 是 常量 ） 将 很 有 帮助
同样 也 支持 使用   Decimal   和   Fraction   值 ：
命名 空间 包 没有   " parent / __ init __. py "   文件
新 的 语法 特性 ：
测试
代表   C   " signed   char "   数据类型 ， 并 将 值 解读 为 一个 小 整数
" traceback "   打印 或 检索 堆栈 回溯
如果   " INSERT "   或   " REPLACE "   语句 操作 失败 则 将 返回 上 一次 成功 操作 的   rowid
使用   base _ dir   的 归档 程序 示例
charjunk   :   此 函数 接受 一个 字符 （ 长度 为   1   的 字符串 ) ， 如果 其为 垃圾 字符 则 返回 真值 ， 否则 返回 假值
为什么 没有 goto ？
3.9   新版 功能 .
这是 来自   " imaplib "   模块 的 示例 正则
一个 更 简单 的 参数 提取 方式 ， 它 不 使用 格式 字符串 来 指定 参数 类型
这 可 被 用来 高效 地 计算 共享 相同 初始 子串 的 数据 的 摘要
如果 在 此类 的 实例 上 调用   " str ( ) " ， 则 会 返回 实例 的 参数 表示 ， 或者 当 没有 参数 时 返回 空 字符串
如果 该 异步 生成器 函数 正常 退出 、 关闭 或 引发   " GeneratorExit "   ( 由于 未 捕获 该 异常 )   则 返回 的 可 等待 对象 将 引发   " StopIteration "   异常
3.8   新版 功能 :   " ast . PyCF _ ALLOW _ TOP _ LEVEL _ AWAIT "   现在 可 在 旗标 中 传入 以 启用 对 最高 层级   " await " ,   " async   for "   和   " async   with "   的 支持
参考 引用
默认值 为   " FORMAT _ AUTO " ， 它 可以 解压缩   " . xz "   和   " . lzma "   文件
位置 和 关键字 参数 可以 任意 组合 :
传入   " SERVER _ AUTH "   作为   purpose   会 把   " verify _ mode "   设 为   " CERT _ REQUIRED "   并且 加载 指定   CA   证书 （ 当 给出   cafile   ,   capath   和   cadata   中 的 至少 一个 ） 或者 使用   " SSLContext . load _ default _ certs ( ) "   来 加载 默认   CA   证书
请参阅   " Task . cancel ( ) "
新增 模块
例如 ：
此   TurtleScreen   方法 作为 全局 函数 时 只有 一个 名字   " resetscreen "
返回 默认 的 内容 类型
在 这个 例子 里 ， 我们 想要 查看 一个 不同 的 目录 ， " pypy "
其他 关键字 选项 （ 如果 指定 了   font   ， 则 忽略 ） ：
如果   value   被 赋予 小于 0 的 值 ， 将会 引发   " ValueError "   异常
类
SMTPChannel   对象
例如 ， 长度 为 2080 的 序列 是 可以 在   Mersenne   Twister   随机数 生成器 的 周期 内 拟合 的 最大 序列
或者 ：
比如说 ， 路径   " example . zip / lib / "   将 只会 从 档案 中 的   " lib / "   子目录 导入
difflib   的 命令行 接口
如果   name   不是 已 注册 的 变种 名称 ， 则 抛出   " Error "   异常
在   asyncio   中 需要   Future   对象 以便 允许 通过   async / await   使用 基于 回调 的 代码
CPython   implementation   detail :   某些 实现 可能 提供 位置 参数 没有 名称 的 内置 函数 ， 即使 它们 在 文档 说明 的 场合 下 有 “ 命名 ” ， 因此 不能 以 关键字 形式 提供 参数
适用 于 检测 屏幕 大小 的 手动 调整
Python   2.5   有 什么 新 变化
将 单行   uu   编码数据 转换成 二进制 数据 并 返回
要 避免 发生 这种 情况 的 风险 ， 请 在   " listen ( ) "   中 使用   " verify "   参数 来 防止 未经 认可 的 配置 被 应用
Tue   Aug   16   21 : 30 : 00   1988   ( 1 )   ( en _ US ) ;   Di   16   Aug   21 : 30 : 00   1988   ( de _ DE )   " % x "   本地化 的 适当 日期 表示
如果 出现 于 字符串 字 面值 和 注释 之外 将 无条件 地 引发 错误 :
带有 多个 基类 的 类 定义 语句 如下 所示 :
maintype   也 是 可选项 ； 它 的 默认值 为   text
为了 安全 考虑 ， 默认值 为   " False "
文档
More   information   in   section   使 对象 类型 支持 循环 垃圾 回收
PEP   3116 :   新   I / O   库
比如 ， 允许 返回 子目录 名字 ， 目的 是 当 得知 包 和 资源 存储 在 文件系统 上面 的 时候 ， 能够 直接 使用 子目录 的 名字
已 安装 的 补全 函数 将 由 传递 给 底层 库中   " rl _ completion _ matches ( ) "   的   entry _ func   回调 函数 来 发起 调用
通常 ， Python   在   Windows   上 启动 得 很快 ， 但 偶尔 会 有 错误报告 说   Python   突然 需要 很 长时间 才能 启动
参数 :   cmode   数值   1.0   或   255   其中 之一
最 简分数 形式 的 分子
此 函数 可 返回 任何   SQLite   所 支持 的 类型 :   bytes ,   str ,   int ,   float   和   " None "
bpo   33231 :   修复   " normalizestring ( ) "   中 潜在 的 内存 泄漏
这会 使得   " NULL "   返回 码 有些 歧义   ； 请 使用   " PyCapsule _ IsValid ( ) "   或   " PyErr _ Occurred ( ) "   来 消除 歧义
示例 :
传递 指针 （ 或 以 引用 方式 传递 形参 ）
see   上下文 管理器 类型 ) :
出错 时 返回   "   1 "   并 设置 一个   " TypeError "
在   3.4   版 更改 :   在 之前 的   Python   版本 中 ， 查找 器会 直接 返回 加载 器   ， 现在 它们 则 返回 模块 规格 说明 ， 其中 包含 加载 器
如果 返回   0   个 字节 而   size   不为 零   0 ， 这 表明 到达 文件 末尾
源代码 :   Lib / dbm / dumb . py
迭代 器 对象
" venv "   创建 虚拟环境
协程 对象 是 使用   " async "   关键字 声明 的 函数 返回 的
命令行 界面
大部分 情况 下 ， 调用   " unittest . main ( ) "   即可 ， 并且 它会 为 你 集合 所有 模块 的 测试用例 并 执行
Python 字典 类型 表示 为   " PyTypeObject "   的 实例
将 继续 使用 旧版本 的 导入 对象
在   3.4   版 更改 :   在 早于   3.4   的   Python   版本 中 ， 此 函数 也 可 传入 一个 文本 级别 名称 ， 并 将 返回 对应 的 级别 数字 值
它 可以 被 替换   ( 通过 导入   " builtins "   模块 并 赋值 给   " builtins .__ import __ " )   以便 修改   " import "   语句 的 语义 ， 但是 强烈 不 建议 这样 做 ， 因为 使用 导入 钩子   ( 参见   PEP   302   )   通常 更 容易 实现 同样 的 目标 ， 并且 不会 导致 代码 问题 ， 因为 许多 代码 都 会 假定 所用 的 是 默认 实现
改用   " PyDict _ GetItemWithError ( ) "   获得 错误报告
为   " InterpolationError "   的 子类
当 使用 缓冲 以 二进制 模式 打开 文件 时 ， 返回 的 类 是   " io . BufferedIOBase "   的 一个 子类
在   3.7   版 更改 :   添加 了   text   形参 ,   作为   universal _ newlines   的 一个 更好 理解 的 别名
args   形 参会 被 设为   " vformat ( ) "   的 位置 参数 列表 ， 而   kwargs   形 参会 被 设为 由 关键字 参数 组成 的 字典
写入 音频 数据 但 不 更新   nframes
PEP   384 :   定义 稳定 的 ABI
回退 值
（ 由   Dong   hee   Na   在   bpo   39259   中 贡献   。 ）
3.2 . 3   新版 功能 :   增加 了   "   W "   选项
当 一个 共享内存 块 不 被 任何 进程 使用 的 时候 ， 应该 调用   " unlink ( ) "   方法 以 保证 必要 的 清理
这是 使用 文件 重命名 来 将 最终 编译 后 字节 码 文件 放置 到位 以 防止 并发 文件 写入 问题 的 导入 操作 的 附带 效果
创建 一个 颜色 选择 对话框
这些 对象 可 独立 于   ZipFile   进行 操作
注意 此 特性 是 在 句法 层面 定义 的 ， 但是 在 编译 时 实现
格式 说明符 会 被 传入 表达式 或 转换 结果 的   " __ format __ ( ) "   方法
关于   "   kwargs "   ， 日志 记录 方法 只 关注   " exc _ info "   的 关键字 ， 并用 它 来 确定 是否 记录 异常 信息
新 的 特性
本 机 字节 序 的 联合 所 对应 的 抽象 基类
要 得到 一个 感知 型   " datetime "   对象 ， 应 调用   " fromtimestamp ( ) " :
例如 :
嵌入 Python
示例 :
API   与 特性 的 移除
比较 运算
" pprint "   数据 美化 输出
如果   loop   为   " None " ， 则 会 使用   " get _ running _ loop ( ) "   获取 当前 事件 循环
如果 包含 了   mode   形参 ， 则 它 必须 为   " ' r ' "   ( 默认值 )   或   " ' w ' "
注解 :
CPython   目前 定义 了 下列 可用 的 值 ：
如未 被 陷阱 捕获 则 返回   " NaN "
如果 两个 比较 方都 是 感知 型 ， 且 具有 相同 的   " tzinfo "   属性 ， 则 相同 的   " tzinfo "   属性 会 被 忽略 并 对 基本 日期 时间 值 进行 比较
当 文件 无法 被 解析 时 二进制 格式 的 解析器 将 引发   " InvalidFileException "
创建 任务
如果 两个 形符 彼此 相连 会 被 解析 为 一个 不同 的 形符 ， 则 需要 使用 空白 来 分隔   ( 例如   ab   是 一个 形符 ， 而   a   b   是 两个 形符 )
每 一天 使用   " datetime . date "   对象
3.4   新版 功能 .
或者 ， 如果 给出   cum _ weights   序列 ， 则 根据 累积 权重 （ 可能 使用   " itertools . accumulate ( ) "   计算 ） 进行 选择
类 属性 ：
注意   " start ( ) "   、   " join ( ) "   、   " is _ alive ( ) "   、   " terminate ( ) "   和   " exitcode "   方法 只能 由 创建 进程 对象 的 进程 调用
使用   " subprocess "   模块 替换 旧 函数
下表 提供 了   " strftime ( ) "   与   " strptime ( ) "   的 高层 级 比较 ：
如果   encoding   或   errors   参数 被 指定 或者   universal _ newlines   参数 为   " True " ， 此流 为 文本 流 ， 否则 为 字节 流
通过 网络 发送 和 接收 日志
元类
为了 获得 有 意义 的 结果 ，   data   中 数据 点 的 数量 应当 大于   n
" mkdtemp ( ) "   返回 新 目录 的 绝对路径
虽然 这 在 编程 指导 中有 描述 ， 但 还是 需要 提前 说明 一下
软件包 和 文档 可 从   https : / / www . wxpython . org   获得
在   3.5   版 更改 :   " SMTPNotSupportedError "   may   be   raised ,   and   the   initial _ response _ ok   parameter   was   added .
参数 是 通过 循环 的 次数 ， 默认 为 一百万
动作 子类 可定义   " format _ usage "   方法 ， 该 方法 不带 参数 ， 所 返回 的 字符串 将 被 用于 打印 程序 的 用法说明
例如 ，   " erf ( x ) "   是 在 统计 中 的 便捷 转换 ， 但 并 不 直接 依赖于 特定 的 数据 集
准确 估量
21 : 30 : 00   ( en _ US ) ;   ( 1 )   21 : 30 : 00   ( de _ DE )   " %% "   字面 的   " ' % ' "   字符
在   " WeakValueDictionary "   的 实现 中 就 使用 了 这种 方式 来 减少 映射 中 每个 条 目的 内存 开销
" SSLError "   的 子类 ， 当 尝试 读取 或 写入 且   SSL   连接 已 被 完全 关闭 时会 被 引发
比如说 想 把 日志 等级 为 DEBUG 或 更 高 的 消息 记录 于 文件 中 ， 而 把 那些 等级 为 INFO 或 更 高 的 消息 输出 在 控制台
例如 ：
若 两个 文件 都 存在 则 首先 读取 主目录 中 的 文件 ， 且 本地 文件 可以 覆盖 其中 定义 的 别名
" filecmp "   文件 及 目录 的 比较
请参阅   PEP   590   了解 详情
一个 简短 的 用法 示例 :
如果 缓冲区 无效 则 会 引发   " HeaderError "
互联网协议 和 支持
path   如果 给出 则 为 添加 到   " sys . path "   开头 的 目录 路径 序列 ， 它会 被 用于 定位 模块 的 源代码
当   " TarFile "   被 关闭 时 ，   fileobj   不会 被 关闭
ctypes   教程
错误信息
假设 您 安装 了 Python   2.6 ， 请 尝试 将 第一行 更 改为   " # !   python2.6 "   ， 你 会 发现 打印 的 2.6 版本信息
调用   " syslog ( ) "   并 附带 未 在   maskpri   中 设置 的 优先级 将会 被 忽略
保留 所有 权利
" Py _ TRACE _ REFS "   宏 添加 了   " sys . getobjects ( ) "   函数 和   " PYTHONDUMPREFS "   环境变量 ， 它 可以 使用 新 的   " . / configure   with   trace   refs "   构建 选项 来 设置
为 对象 销毁 进行 准备
新 的 内置 特性 ：
需要 注意 的 是 ， 将   " Any "   类型 的 值 赋值 给 另 一个 更 具体 的 类型 时 ， Python 不会 执行 类型 检查
PEP   615   在 标准 库中 支持   IANA   时 区 数据库   PEP   由   Paul   Ganssle   撰写 并 实现
注意   " [   v   |   q ] " ， 它 的 意思 是 说 我们 可以 使用   "   v "   或   "   q " ， 但 不能 同时 使用 两者 ：
在 未来 版本 的   Python   中 ， 它们 将 成为 仅限 位置 参数
例如 ， 在 配置 完成 后 ， 一个 特定 的 日志 记录器 关联 到 了 一个 特定 的 处理程序
例如 ， 文件 输入输出 ， 系统 调用 ， 套 接字 ， 甚至 图形界面 接口 工作 包 比如   Tk
在   C++   术语 中 ， 通常 类 成员 （ 包括 数据 成员 ） 是   public   ( 例外 见下文 私有 变量 ) ， 所有 成员 函数 都 是   virtual
在   3.6   版 更改 :   The   number   of   bytes   written   is   now   returned .
外部 文件属性
3.8   版后 已 移除 :   " __ int __ ( ) "   已 被 弃用
它 必须 后 跟 函数 名称 和 带 括号 的 形式参数 列表
可用性   ：   Unix （ 有关 详细信息 ， 请 参见   pthread _ getcpuclockid ( 3 )   的 手册 页 ）
PEP   593   ， 灵活 的 函数 和 变量 标注 ；
当   " add _ argument ( ) "   通过 选项 （ 例如   "   f "   或   "   foo " ） 调用 并且   " nargs   ' ? ' "   时
对于 带有 表达式 的   except   子句 ， 该 表达式 会 被 求值 ， 如果 结果 对象 与 发生 的 异常 “ 兼容 ” 则 该 子句 将 匹配 该 异常
在   3.2   版 更改 :   仅 接受   bytestring   或   bytearray   对象 作为 输入
如果 你 使用   Python   可 调用 对象 来 执行 导入 ， 并且 你 希望 在 类 层级 而 不是 在 实例 层级 上 定义 它 ， 则 你 需要 用   " staticmethod ( ) "   来 装饰 它
有关 模块 的 更 多 信息
构建
" multiprocessing "   基于 进程 的 并行
因此 可以 将 以下 Python 类型 发送到 SQLite 而 不会 出现 任何 问题 ：
命令   " python3.1 "   和   " python2.7 "   根本 不会 查阅 任何 选项 ， 因为 版本 已 完全 指定
Python 支持 静态数据 和 静态方法 （ 在 C   ++ 或 Java 的 意义 上 ）
实现   " ' replace ' "   错误处理 方案   ( 仅 用于 文本 编码   ) ： 编码 错误 替换 为   " ' ? ' "   ( 并 由 编解码器 编码 ) ， 解码 错误 替换 为   " ' \ ufffd ' "   ( Unicode   替换 字符 )
charset   和   language   都 应当 字符串
( 默认 :   " True " )   如果 为 真值 ， 将 根据 英语 的 惯例 首选 在 空白符 和 复合词 的 连 字符 之后 自动 换行
上下文 变量
一个 函数 定义 可以 被 一个 或 多个   decorator   表达式 所 包装
在 失败 时 设置 一个 异常 并 返回   " NULL "
" inspect "   检查 对象
3.2   新版 功能 .
核心 与 内置
ipadx   和   ipady   A   distance   designating   internal   padding   on   each   side   of   the   slave   widget .
" asyncore "   异步 socket 处理器
此 函数 主要 用作 将   Python   2   程序转换 至 新版 的 转换 工具 ， 以 保持 对 比较 函数 的 兼容
将 日志 记录 级别 名称 映射 到   syslog   优先级 名称
compresslevel   形参 控制 在 将 文件 写入 归档 时要 使用 的 压缩 等级
此 模块 同样 允许   " sys . path "   的 一项 成为 命名   ZIP   文件 档案 的 字符串
在   3.3   版 更改 :   The   term   " Python "   is   replaced   with   implementation   specific   term   like   " CPython " ,   " Jython "   etc .
将 一个   " concurrent . futures . Future "   对象 封装 到   " asyncio . Future "   对象 中
这个 子 小节 描述 了 异步 生成器 迭代 器 的 方法 ， 它们 可 被 用于 控制 生成器 函数 的 执行
需要 块 设备
也 不 支持   " policy . set _ child _ watcher ( ) "   函数 ， " ProactorEventLoop "   有 不同 的 机制 来 监视 子 进程
显然 ， 使用 这个 将 违反 命名 空间 实现 的 抽象 ， 应当 仅 被 用于 事后 调试器 之类 的 场合
以 使用 字母   ' e '   来 标示 指数 的 科学 计数法 打印 数字
If   you   need   to   parse   untrusted   or   unauthenticated   data   see   XML   漏洞 .
为 方便 起 见 ， 如果 传给   " collapse _ rfc2231 _ value ( ) "   的   value   不是 一个 元组 ， 则 应为 一个 字符串 并会 将 其 原样 返回
此 函数 总是 会 成功 执行
在   3.5   版 更改 :   现在 支持 可写 的 字节 类 对象
以下 指令 可以 嵌入   format   字符串 中
) $ "   相匹配 的 前缀 ， 如果 识别 出 了   " prefix " ， 则   " suffix "   会以 与 前缀 相对 应 的 方式 来 处理 并且 处理 的 结果 将 替代 原 字符串 值
有关 完整 的 规范 ， 请参阅   PEP   484
例如 ， 给定 如下 配置 :
最 简单 的 设置 是 将 某个 特定 操作 无条件 地 应用 于 进程 所 发出 所有 警告   ( 即使 是 在 默认 情况 下会 忽略 的 那些 警告 ) :
如果   mode   来自 一个 字符 特殊 设备 文件 则 返回 非零值
这个 只读 属性 会 返回 当前 关联 到 弱 引用 的 回调
在 这种 情况 下 ， 不可 提供   encoding   ,   errors   和   newline   参数
如果   set   不是   " set "   或 其子 类型 的 实例 则 会 引发   " PyExc _ SystemError "
Mn   非 空白 标识
在 任何 一种 情况 下 ， 调度 程序 都 将 保持一致 状态 并 传播 异常
基本 实现 使用   " get ( ) "
" fractions "   分数
请参阅 编解码器 基类 了解 有关 编解码器 错误处理 的 更 多 信息
现在   " ProcessPoolExecutor "   中 的 工作 进程 仅会 在 没有 可 重用 的 空闲 工作 进程 时 按 需 产生
在   3.6   版 更改 :   Added   policy   keyword   only   parameter .
库
它 另 一个 显著 区别 于 内置   " list "   类型 的 地方 在于 它 的 长度 无法 修改 （ 比如 ， 没有   append ,   insert   等 操作 ） 且 不 支持 通过 切片 操作 动态创建 新 的   " ShareableList "   实例
" callback "   " pipe _ data _ received ( ) "   子 进程 向   stdout   或   stderr   管道 写入 数据 时 被 调用
这个 教程 只 介绍   Python   中 最 值得注意 的 功能 ， 也 会 让 你 体会 到 这个 语言 的 风格 特色
模块 设计 以 三个 概念 为 中心 ： 十进制 数 ， 算术 上下文 和 信号
并且 ，   现在   " open ( ) "   方法 也 具有 可选 的   timeout   形参 提供 同样 的 修改
将 面板 移至 屏幕 坐标   " ( y ,   x ) "
如果 传入 的 对象 是   " NULL "   指针 ， 则 假定 这是 由于 生成 参数 的 调用 发现错误 并 设置 异常 而 引起 的
此 例程 从 共享 库 加载 SQLite 扩展
" pkgutil "   包 扩展 工具
" pyclbr "   Python   模块 浏览器 支持
如果 类 已 定义   " __ eq __ ( ) "   ， 则 忽略 此参数
之前 版本 则 将 立即 引发   " asyncio . TimeoutError "
对于 内置 对象 ， 有 两种 类型 的 对象 支持 抽取 操作 :
构建 和   C   API   的 改变
函数 定义
The   " tarfile "   module   now   supports   a   simple   命令行 界面   when   called   as   a   script   directly   or   via   "   m "
引发 一个 审计 事件   " shutil . copyfile "   附带 参数   " src " ,   " dst "
PEP   342   通过 增强型 生成器 实现 协 程增强 生成器   API   和 语法 的 提议 ， 使 其 可以 被 用作 简单 的 协程
" Pool "   类 表示 一个 工作 进程 池
注解 :
对于 几乎 所有 应用程序 都 更 推荐 使用   " os . urandom ( ) "
" shutil "   高阶 文件 操作
钩 方法 当   " cmdloop ( ) "   被 调用 时 执行 一次
请 注意   " metavar "   仅 改变 显示 的 名称   " parse _ args ( ) "   对象 的 属性 名称 仍然 会 由   dest   值 确定
在   3.2   版 更改 :   在   3.2   版 之前 ，   errors   参数 会 被 忽略 ； 总是 会 使用   " ' replace ' "   进行 编码 ， 并 使用   " ' ignore ' "   进行 解码
异常
基准 测试 脚本 显示 时间 以 纳秒 为 单位
示例
更改 显示 消息 的 格式
path   entry   finder   的 一个 抽象 基类
PEP   529 :   将 Windows 文件系统 编码 更 改为 UTF   8
所有 方法 的 执行 都 是 原子 性 的
3.8   版后 已 移除 :   Support   for   " sequence   protocol "   is   deprecated .
RawConfigParser   对象
将 SQLite   值 转换 为 自定义 Python   类型
Type   对象
" gettext "   多语种 国际化 服务
然而 ， 你 应该 避免 这种 情况 ， 因为 所有 从 更长 的 迭代 器中 取出 的 元素 都 会 被 丢弃
这 意味着 如果 远程 监听器 在 处理程序 被 使用 之后 启动 ， 你 可能 会 丢失 消息 （ 因为 处理程序 在 延迟 结束 之前 甚至 不会 尝试 连接 ， 而 在 延迟 期间 静默 地 丢弃 消息 ）
PEP   3137   不变 字节 和 可变 缓冲区   PEP   written   by   Guido   van   Rossum
即以 北美 东部 时间 表示 当天 夏令时 结束 时 的 形式 为   5 : MM   UTC   的 时间
params   是 一个 包含   " ( content   type ,   string   value ) "   形式 的 元素 的   2   元组 的 序列
XML 是 一种 固有 的 分层 数据格式 ， 最 自然 的 表示 方法 是 使用 树
例如 :
返回 被 任意 一个 参数 中 的 对象 直接 引用 的 对象 的 列表
" walk "   会 遍历 所有   " is _ multipart ( ) "   方法 返回   " True "   的 部分 之子 部分 ， 哪怕   " msg . get _ content _ maintype ( )   ' multipart ' "   返回 的 是   " False "
" dataclasses "   数据 类
POSIX 系统 3.0 之前 ， 以及 所有 版本 的 Windows 系统 中 ， 如果   block   是   true   并且   timeout   是   " None "   ，   这个 操作 将 进入 基础 锁 的 不间断 等待
在 遍历 中 返回   key   之后 的 的 下 一个 键
这个 方法 唤醒 最 多   n   个 正在 等待 这个 条件 变量 的 线程 ； 如果 没有 线程 在 等待 ， 这是 一个 空 操作
如果   " s "   表示 一个 太大而 不能 存储 在 一个 浮点数 中 的 值 （ 比方说 ，   " " 1e500 " "   在 许多 平台 上 是 一个 字符串 ） 然后 如果   " overflow _ exception "   是   " NULL "   返回   " Py _ HUGE _ VAL "   （ 用 适当 的 符号 ） 并且 不 设置 任何 异常
调试模式 的 输出 :
这 将 导致 数据库 的 更改 立即 写入 文件
示例
（ 由   Antoine   Pitrou   在   bpo   10272   中 贡献 。 ）
默认 工厂 函数
当 这个 方法 有 一个 默认 的 实现 的 时候 ， 出于 性能 方面 的 考虑 ， 如果 有 可能 的话 ， 建议 覆盖 它
上面 列出 的 选项 也 可以 在 一个 名为   " unattend . xml "   的 文件 中 与 可执行文件 一起 提供
" ' seconds ' " :   以   " HH : MM : SS "   格式 包含   " hour " ,   " minute "   和   " second "
一个样 例 ， 用   1   号 颜色 对 显示 一行 文本 ：
请参阅   PSF   许可 页 以 查看 进一步 的 说明 以及 许可 的 完整 文本 内容 的 链接
调用函数 ， 继续
name   是 线程 名称
注释
用于 存储   marshal   数据 的 文件 必须 以 二进制 模式 打开
也 可以 传入 一个 已 加载 的 动态链接库 作为   " handler "   参数 ， 其他 情况 会 调用 系统 底层 的   " dlopen "   或   " LoadLibrary "   函数 将库 加载 到 进程 ， 并 获取 其 句柄
这 显然 会 是 树 中 条目 总数 的 对数
最高 层级 格式 说明符 可以 包含 有 嵌套 的 替换 字 段
格式 规格 迷你 语言
文件 输入
参见 :
" stringprep "   因特网 字符串 预备
例如 ， 我们 可以 这样 做 ：
Fault   对象
Operator   模块 函数
直接   API   函数
网络 对象 不能 设置 任何 主机 位
如果 在   " sys . modules "   中 存在 指定 名称 的 模块 对象 ， 导入 操作 会 已经 将 其 返回
它 应当 返回 下 一个 以   text   开头 的 候选 补全 内容
例如 :
下 一个 语句 使用 UNIX 系统 函数   " system ( ) "   ， 传递 给 他 的 参数 是 刚才 从   " PyArg _ ParseTuple ( ) "   取出 的 :
例如 ， 以下 正则 检测 字符串 中 的 双字
将 缓冲区 中 保存 的 字节 数据 强制 放入 原始 流
3.2   新版 功能 .
以   " ＃ "   开头 的 空白 路径 和 行将 被 忽略
在   3.5   版 更改 :   添加 可 选 参数   globals
" socket . if _ nameindex ( ) " ,   " socket . if _ nametoindex ( ) "   和   " socket . if _ indextoname ( ) "   函数 已经 在   Windows   上 实现
人们 可以 认为 这是 通过 实现 对象 比较 间接 地 定义 了 对象 值
新 的 特性
编码器 :
Python   3.5 . 2   正式版
使用   Ttk
replacement   也 可以 是 一个 函数 ， 它 可以 为 你 提供 更 多 控制
分叉 服务器 进程 是 单线程 的 ， 因此 使用   " os . fork ( ) "   是 安全 的
任何 已 完成 或 正在 运行 的   Future   将 不会 被 取消 ， 无论   cancel _ futures   的 值 是 什么 ？
用于 指明 将 创建 一个 新 的 进程 组 的   " Popen "   " creationflags "   形参
清空 缓存
" KeyError "   的 引发 则 针对 一般 映射 错误 例如 指定 了 不 正确 的 键
如果 相应 的 压缩 模块 不可 用 也 会 引发 错误
子目录 里面 是 一个 包含 Python 安装 的   " tools "   目录 :
这个 库有 它 自己 的 文档 ， 在 这里 我们 就 不 重复 说明 了
如果 选择 “ Install   Now （ 立即 安装 ） ” ：
它 不 包含 已 终结 的 线程 和 尚未 开始 的 线程
任何 尚未 设置 格   式 描述符 的 处理程序 将 被 设置 为 在 此 函数 中 创建 的   默认 格式 描述符
如果 为 假值 ， 则 只有 空白符 会 被 视为 合适 的 潜在 断行 位置 ， 但 如果 你 确实 不 希望 出现 分开 的 单词 则 你 必须 将   " break _ long _ words "   设为 假值
发布 日期 :   2019   12   18
请   _ 不要 _   直接 在 你 的   . exe   文件 中 内置   Python
任何 其它 值 都 会 强制 启用 纯 文本 输出
其他 值 可 导致 输出 看起来 有些 怪异 ， ， 但 可 使得 嵌套 结构 更 易 区分
" pty "   模块 定义 了 下列 函数 :
Python   3.6 . 6   正式版
如果 信号量 被 释放 的 次数 过多 ， 则 表明 出现 了 错误
num _ params   为 该 函数 所 接受 的 形参 个数 （ 如果   num _ params   为   1 ，   则 该 函数 可 接受 任意 数量 的 参数 ） ，   func   是 一个   Python   可 调用 对象   ， 它 将 作为   SQL   函数 被 调用
由于   " IntFlag "   成员 同时 也 是   " int "   的 子类 ， 因此 它们 可以 相互 组合 :
主机 接口
在 所 提供 的 函数 、 方法 、 源代码 字符串 或 代码 对象 中 的 指令 上 返回 一个 迭代 器
根据   " root "   zipfile   ( 它 可以 是 一个   " ZipFile "   实例 或 适合 传给   " ZipFile "   构造 器 的   " file " )   构造 一个   Path   对象
迭代 器 的 元素 为 一个 由年 ， 月 ， 日 组成 的 元组
Itertool 函数
TCP   客户端 样例 .
管理器 类 定义 在   " multiprocessing . managers "   模块 :
将 这个 指针 的   contents   属性 赋值 为 另 一个   " c _ int "   实例 将会 导致 该 指针 指向 该 实例 的 内存地址 :
key   是 所 连接 到 的 预定 义 句柄
参数 :   delay   正 整型 数
通过 迭代 所有 条目 ， 你 将 得到 一个   O ( n   log   n )   复杂度 的 排序
给   " None "   赋值 是 非法 的 并 会 引发   " SyntaxError "
这 意味着 ：
用户 定义 的 泛型 类型
在   3.8   版 更改 :   文件名 形参 支持   path   like   object
3.3   版后 已 移除 :   在 有 了   " path _ stats ( ) "   的 情况 下 ， 这个 方法 被弃 用 了
在 数据结构 章节 中 ， 我们 将 讨论   " list ( ) "   的 更 多 细节
3.3   新版 功能 .
而 无需 显式 地 关闭   " page "
GPL   兼容 并 不 意味着   Python   在   GPL   下 发布
源代码 :   Lib / filecmp . py
" array "   模块 提供 了 一种   " array ( ) "   对象 ， 它 类似 于 列表 ， 但 只能 存储 类型 一致 的 数据 且 存储 密集 更高
函数 式 编程 指引
" socket "   类 的 方法 :   " accept ( ) " ,   " connect ( ) "   （ 除了 非 阻塞 套 接字 ） ,   " recv ( ) " ,   " recvfrom ( ) " ,   " recvmsg ( ) " ,   " send ( ) " ,   " sendall ( ) " ,   " sendmsg ( ) " ,   " sendto ( ) " ;
" qsort ( ) "   必须 接收 的 参数 ， 一个 指向 待 排序 数据 的 指针 ， 元素 个数 ， 每个 元素 的 大小 ， 以及 一个 指向 排序 函数 的 指针 ， 即 回调 函数
其他   CPython   实现 的 改变
如果   shell   设 为   " True " , ， 则 使用   shell   执行 指定 的 指令
实例 对象
Python   API   的 变化
在   2.7 . 1   和   3.2   之前 的   Python   版本 中 ， 如果 此 函数 从 多个 线程 被 调用 ， 一个 处理程序 （ 在 极少 的 情况 下 ） 有 可能 被 多次 加入 根 日志 记录器 ， 导致 非 预期 的 结果 例如 日志 中 的 消息 出现 重复
Jython   的 版本 接口
在 这种 情况 下 ， 甚至 可能 无法 导入 文件 顶部 的 所有 模块
相同 的 方法 适用 于 所有 方法 定义
对于 地址 ， 提供 了 一个 自动 确定 正确 IP 版本 的 工厂 函数 :
渲染 对话 窗口 .
比如
但是 为什么 呢 ?   这是   " rc . a ,   rc . b   rc . b ,   rc . a "   这 行 代码 展开 后 的 步骤 :
这是 一个 关于 上下文 管理器 的 简单 例子 ， 它 允许 你 在 上下文 管理器 的 作用域 内 更改 日志 等级 以及 增加 日志 句柄 ：
Python   3.6 . 3   正式版
macOS   上 的 IDLE
" operator "   模块 提供 了 一套 与 Python 的 内置 运算符 对应 的 高效率 函数
不幸 的 是 ， 删除 第一个 错误 会 导致 第二个 错误 来源
Python   解释器 与 早期 版本 的 相比 ， 向前 迈进 了 一大步 ； 无论怎样 ， 还 有些 希望 的 功能 ： 如果 能 在 编辑 连续 行时 建议 缩进 （ 解析器 知道 接下来 是否 需要 缩进 符号   ） ， 那 将 很棒
新 语法
修改 的 语法
包含   " ' f ' "   或   " ' F ' "   前缀 的 字符串 字 面值 称为 格式化 字符串 字 面值   ； 参见 格式化 字符串 字 面值
如果 元素 各自 不同   ， 那么 每个 组合 中 没有 重复 元素
这 包含 以下 定义 样式 :
3.5   新版 功能 .
返回 从 一个 非空 序列 中 随机 选取 的 元素
为了 支持 访问 这些 额外 细节 的 用例 ， 各个 类 构造函数 实际上 引发 了   " ValueError "   子类   " ipaddress . AddressValueError "   和   " ipaddress . NetmaskValueError "   以 准确 指示 定义 的 哪 一部分 无法 正确 解析
任何 其他   offset   值 都 将 导致 未定义 的 行为
该 可 调用 对象 将 接收 要 创建 文件 的   base _ name   ， 再 加上 要 归档 内容 的   base _ dir   ( 其 默认值 为   " os . curdir " )
当 提供 了   timeout   参数 且 不是   " None "   时 ， 它 应该 是 一个 浮点数 ， 代表 操作 的 超时 时间 ， 以 秒 为 单位 （ 可以 为 小数 ）
Windows   常数
据信 克服 这种 性能 问题 的 措施 将 导致 实现 变得 更 复杂 ， 从而 更 难以 维护
参数 解释 同   " debug ( ) "
重新 将
" Py _ UNICODE _ strcpy " ,   " Py _ UNICODE _ strncpy " ,   " Py _ UNICODE _ COPY " :   使用   " PyUnicode _ CopyCharacters ( ) "   或   " PyUnicode _ Substring ( ) "
概述
如果 此形 参 不 存在 或 不适 用于 指定 的   useragent   或者 此形 参 的   " robots . txt "   条目 存在 语法错误 ， 则 返回   " None "
RFC   禁止 添加 字符 顺序 标记 （   BOM   ） 在   JSON   文本 的 开头 ， 这个 模块 的 序列化 器 不 添加   BOM   标记 在 它 的 输出 上
只有 当 需要 解决 诸如 避免 循环 导入 或 试图 减少 模块 初始化 时间 的 问题 时 ， 才 可以 将 导入 移动 到 本地 范围 ， 例如 在 函数 定义 中
如果 没有 给出 该 形参 ， 则 由   cursor   的   arraysize   决定 要 获取 的 行数
可以 通过 将 自定义   " TreeBuilder "   实例 传递 给   " XMLParser "   构造函数 来 访问 文档 类型 声明
包含 请求 路径
所有   " PYTHON   "   环境变量 也 会 被 忽略
" parser "   访问   Python   解析 树
移植 到   Python   2.3
3.4   新版 功能 :   加载 器 的   " create _ module ( ) "   方法
进程 间 共享 状态
当 一个 异步 生成器 函数 通过   " __ anext __ ( ) "   方法 恢复 执行 时 ， 当前 的   yield   表达式 所 返回 的 可 等待 对象 总是 取值 为   " None " ， 它 在 运行 时 将 继续执行 到 下 一个   yield   表达式
将 记录 添加 到 缓冲区
" os . fsdecode ( ) "   和   " os . fsencode ( ) "   会 使用   UTF   8   编码
（ 由   C . A . M
扩展 模块 作者 可以 在 初始化 内部 数据结构 时 给出 警告
Python   标准 库
要 实现 具体 的 行为 ， 请 使用   " HTMLParser "   的 子类 并 重载 其 方法
内存 中 的 流
查找 给定 编码 的 编解码器 并 返回 其 增量 式 解码器 类 或 工厂 函数
默认 情况 下 ， 结构 体 和 联合 的 字 段 与   C   的 字节 对齐 是 一样 的
如果 你 不能 满足 这些 限制 ， 字典 和 其他 基于   hash   的 结构 将会 出错
如果   " readline "   模块 要 配合 自定义 的 补全 函数 来 使用 ， 则 需要 设置 不同 的 单词 分隔符
通常 你 可以 像 这样 使用 转换器 :
" copy "   浅层   ( shallow )   和 深层   ( deep )   复制 操作
所以 ， 让 我们 来 告诉   " argparse "   来 把 这 一 输入 视为 整数 ：
为了 保持 向下 兼容性 ， 它们 在   Python   3.9   版 的 这个 模块 中 仍然 存在
那么 你 依然 需要 指定 根包 ， 但是 你 还 需要 告诉   Distutils   根包 中 的 源文件 在 哪   ：
更 漂亮 的 输出 格式
模块 的 规格 说明会 作为 模块 对象 的   " __ spec __ "   属性 对外 公开
3.3   新版 功能 .
" time "   对象
请 注意 ， 当 指定   " import   site "   时 ，   " . pth "   文件 （ 没有 前导 下划线 ） 将 由   " site "   模块 正常 处理
等价 于   Python   语句   " o1   < <   o2 "
当 代码 块 执行   " return "   语句 时 ， 由 其 指定 函数调用 的 返回值
如果   dklen   为   " None "   则 会 使用 哈希 算法   hash _ name   的 摘要 大小 ， 例如   SHA   512   为   64
工具 / 示例
" fileinput "   迭代 来自 多个 输入 流 的 行
lambda   表达式
" tkinter . colorchooser "   模块 提供 了   " Chooser "   类 作为 原生 颜色 选择 对话框 的 接口
在   3.6   版 更改 :   增加   newline   形参
如果 执行 I / O 操作 花费 的 时间 太 长 ， 则 记录 I / O 选择器 的 执行 时间
从 这 一 时刻 起该   cursor   将 不再 可用 ， 如果 再 尝试 用该   cursor   执行 任何 操作 将 引发   " ProgrammingError "   异常
标准 编码
参考
把 颜色 从 RGB 值 转为 YIQ 值
所有 示例 可 通过   Examples   菜单 打开
timeout   参数 被 设置 为   "   1 "   时 将 无限 等待
XXX   增加 更 多 有关   " __ main __ "   怪异 / 坑人 特性 的 信息   ( 例如 直接 从   PEP   395   复制 )
password _ mgr   ,   if   given ,   should   be   something   that   is   compatible   with   " HTTPPasswordMgr " ;   refer   to   section   HTTPPasswordMgr   对象   for   information   on   the   interface   that   must   be   supported
上述 例子 接受 任何 整数 值 作为   "   verbosity "   的 参数 ， 但 对于 我们 的 简单 程序 而言 ， 只有 两个 值有 实际意义 ： " True "   或者   " False "
加载 结果 将 被 缓存 ， 因此 重复 的 属性 访问 每次 都 会 返回 相同 的 库
还 可以 以 常规 方式 指定 返回值 并 设置 所 需 的 属性
Python 应用程序 通常 会 使用 不 在 标准 库内 的 软件包 和 模块
比较 两个 操作数 使用 它们 的 抽象 表示 而 不是 它们 的 值 ， 如   " compare _ total ( ) " ， 但 忽略 每个 操作数 的 符号
那么 现在 可以 让 ` ` py ` ` 命令 执行 你 的 脚本 ， 只 需要 输入 ` ` py ` `   和 脚本 路径 :
注解 :
上述   " KabulTz "   的 用法 :
在   3.4   版 更改 :   The   method   now   supports   hostname   check   with   " ssl . SSLContext . check _ hostname "   and   Server   Name   Indication   ( see   " ssl . HAS _ SNI " ) .
赋值 表达式 （ 有时 又 被 叫做 “ 命名 表达式 ” 或 “ 海象 表达式 ” ） 将 一个   " expression "   赋值 给 一个   " identifier " ， 同时 还 返回   " expression "   的 值
需要 对值 进行 递归 格式化 的 类型 专属 方法 应当 调用   " self . repr1 ( subobj ,   level   1 ) "
" TarInfo "   对象 还 提供 了 一些 便捷 查询方法 :
作用 方式 为 无损 地 将 所有 输入   ( 除   n   之外 )   转换 为 字符串 ， 并 调用   " dfunc ( a ,   b ,   fromfile ,   tofile ,   fromfiledate ,   tofiledate ,   n ,   lineterm ) "
" runcall ( ) "   返回 的 是 所 调用函数 的 返回值
（ 见   bpo   10518   ）
如果   " sys . path _ hooks "   迭代 结束 时 没有 返回   path   entry   finder   ， 则 基于 路径 的 查找 器   " find _ spec ( ) "   方法 将 在   " sys . path _ importer _ cache "   中 存入   " None "   ( 表示 此 路径 条目 没有 对应 的 查找 器 )   并 返回   " None " ， 表示 此   meta   path   finder   无法 找到 该 模块
第一个 参数 是 要 插入 的 元素 的 索引 ， 所以   " a . insert ( 0 ,   x ) "   插入 列表 头部 ，   " a . insert ( len ( a ) ,   x ) "   等同于   " a . append ( x ) "
在   " ' exec ' "   模式 不再 需要 以 换行符 结尾
设置 将   " Future "   关联 工作 的 结果 给   result
Enum   的 成员 还有 一个 包含 其 条目 名称 的 特征 属性 :
PKZIP   Application   Note   包含 一些 保存 于 该   " bytes "   对象 中 的 内部结构 的 注释
支持 的   " __ dunder __ "   名称
在 啰嗦 模式 下 运行 以上 测试 例子 时 ， 程序 输出 如下 ：
返回   o1   除以   o2   的 一个 合理 的 近似值 ， 如果 失败 ， 返回   " NULL "
一些 用来 从   datetime   对象 中 提取 字段 的 宏
其他 核心 变化
在 苹果 系统 上 使用   Python
如果   address   不是 有效 的   IPv4   或   IPv6   地址 ， 则 会 抛出   " ValueError "
算术 转换
通道 数 表示 音频 是 单声道 ， 双声道 还是 四 声道
如果 指定 此项 ， 则 可以 使用 该 形参 名称 来 调用 外部 函数
如果   tz   不 为   " None " ， 它 必须 是   " tzinfo "   子类 的 一个 实例 ， 并且 时间 戳 将 被 转换 到   tz   指定 的 时区
堆 最 有趣 的 特性 在于   " a [ 0 ] "   总是 其中 最小 的 元素
在   3.6   版 更改 :   增加 了   flushOnClose   形参
这 意味着 长于 此 的 路径 将 无法 解决 并 导致 错误
" curses . textpad "   用于   curses   程序 的 文本 输入 控件
返回 的 函数 原型 会 创建 使用 标准   C   调用 约定 的 函数
设置 指定 域 的 内存 块 分配器
缓冲区 的 字节 大小 必须 等于   " size "
如果 被 设为 一个 以 逗号 分隔 的 字符串 ， 它 就 相当于 多次 指定   "   W " ， 列表 中后 出现 的 过滤器 优先级 会 高于 列表 中先 出现 的
元素 对象
固定 字符串 包含 在 引号 内
例如 ：
输出 :
在 默认 情况 下 他 会 输出 当前 文件夹 包含 的 文件 和 文件夹
" copyreg "   模块 提供 了 可 在 封存 特定 对象 时 使用 的 一种 定义 函数 方式
3.4   版后 已 移除 :   The   " imp "   module   is   deprecated   in   favor   of   " importlib " .
所有 生成 的 方法 都 将 使用 这种 组合 的 ， 计算 的 有序 字 段 映射
添加 一个 元素 进 队列
被 解释器 的 顶层 调用 执行 的 语句 ， 从 一个 脚本 文件 读取 或 交互式 地 读取 ， 被 认为 是   " __ main __ "   模块 调用 的 一部分 ， 因此 它们 拥有 自己 的 全局 命名 空间
它们 允许 你 在 字符串 内 包含 未经 转义 的 单引号 和 双引号 ， 并且 可以 跨越 多行 而 无需 使用 连接符 ， 在 编写 文档 字符串 时 特别 好用
例如 ， 在 上面 的 例子 中 数字   1   总是 会 在   2 ,   3 ,   4   或   5   前面
模块 级别 函数
这 允许   " OrderedDict "   替换 为 任何 字典 可以 使用 的 场所
使用   decimal   的 通常 方式 是 创建   " Decimal "   实例 然后 对 其 应用 算术 运算 , 这些 运算 发生 在 活动 线程 的 当前 上下文 中
模块 的 文档 字符串 （ 如果 存在 ） ，
我该 如何 ... ？
另一方面 ， 如果 （ 假设   ） 日志 记录 消息 每 五分钟 才 输出 一次 ， 那么 文件 时间 将会 存在 对应 于 没有 输出 （ 因而 没有 轮换 ） 的 缺失
PEP   528   和   PEP   529 ,   将 Windows 文件系统 和 控制台 的 编码 更 改为 UTF   8
有 非 零 数位 在 舍入 期间 被 丢弃 的 信号
准确 估量
errors   可以 为   " NULL "   表示 使用 为 编码器 所 定义 的 默认 方法
在 文件 末尾 ， 栈中 剩余 的 每个 大于 零 的 数值 生成 一个   DEDENT   形符
" Fraction "   类 继承 自 抽象 基类   " numbers . Rational " ， 并 实现 了 该类 的 所有 方法 和 操作
对 一个 字典 执行   " list ( d ) "   将 返回 包含 该 字典 中 所有 键 的 列表 ， 按 插入 次序 排列   ( 如需 其他 排序 ， 则 要 使用   " sorted ( d ) " )
此 函数 所 返回 的 对象 将会 由 外部 函数调用 返回 ， 但 它 还 可以 在 外部 函数调用 失败 时 检查 结果 并 引发 异常
如果 执行 成功 ，   " PyArg _ ParseTupleAndKeywords ( ) "   会 返回 真值 ， 否则 返回 假值 并 引发 一个 适当 的 异常
（ 由   Victor   Stinner   在   bpo   23404   中 贡献 。 ）
3.4   新版 功能 .
" enum . IntEnum "   的 子类 ， 它 定义 了 组   HTTP   状态 码 ， 原理 短语 以及 用 英语 书写 的 长 描述 文本
凭据 应当 使用 多少 个 字节 ？
以下 函数 适用 于   Python   的 运行 时 动态 嵌入 :   " Py _ IncRef ( PyObject   o ) " ,   " Py _ DecRef ( PyObject   o ) "
如果   " loader "   是   " None "   并且   " portion "   是 一个 空 列表 ， 那么 命名 空间 包中 无 加载 器 或者 文件系统 位置 可 查找 到 （ 即 在 那个 模块 中 未能 找到 任何 东西 ）
自动 决定 调用 多少 次   " timeit ( ) "
弃用 的 构建 选项
被 折叠 的 输出 可 通过 双击 按钮 来 展开 ， 或是 通过 右击 按钮 来 放入 剪贴板 或是 单独 的 窗口
3.7   新版 功能 .
这 代表 着 ,   如果 在 函数   " argtypes "   中 或者 结构 体 定义 成员 中有   " POINTER ( c _ int ) "   类型 ， 只有 相同 类型 的 实例 才 会 被 接受
除非 指定 了   " QUOTE _ NONNUMERIC "   格式 选项 （ 在 这种 情况 下 ， 未 加 引号 的 字 段 会 转换 为 浮点数 ） ， 否则 不会 执行 自动 数据 类型转换
否则 ， 将会 实例 化 一个   " Configparser " ， 并且 它会 从 作为   " fname "   传入 的 对象 中 读取 配置
这是 两种 标准 信号处理 选项 之一 ； 它 只会 执行 信号 的 默认 函数
此 数据库 中 包含 的 数据 编译 自   UCD   版本   13.0 . 0
否则 的话 它 应该 不 造成 影响
注解 :
这 对应 于   Unicode   字符   " U + FEFF "
这一 特性 能够 被 用于 实现 自定义 解码器 （ 如   JSON   RPC   的 类型 提示 )
out _ file   和   mode   的 默认值 会 从   uuencode   标头 中 提取
state   必须 为   " getstate ( ) "   所 返回 的 一个 解码器 状态
这 和 Python 表达式 ` ` callable ( arg1 ,   arg2 ,   ... ) ` ` 是 一样 的
最晚 的 可 表示   " time " ,   " time ( 23 ,   59 ,   59 ,   999999 ) "
传入 空 字符串 可以 屏蔽 退出 消息
[ 1 ]   就是说 如果 我们 忽略 相对论 效应 的话
如果 发生 溢出 ， 采样 将 被 截断
它 旨在 用于 可 选 上下文 管理器 的 一种 替代 ， 例如 ：
将来 的 发行 版本 或许 会 更改 优化 的 效果
" argparse "   命令行 选项 、 参数 和子 命令 解析器
例子 :
3.2   新版 功能 .
被 推入 栈 的 层级 数值 从底 至 顶 持续 增加
还 可以 借用   [ 2 ]   一个 对象 的 引用
表达式   " lambda   parameters :   expression "   会 产生 一个 函数 对象
它 也 是 一个 顺手 的 桌面 计算器
新增 ， 改进 和 弃 用 的 模块
相当于   " list [ low : high ] "
如果   mode   为   " ' r ' "   则 文件 类 对象   ( " ZipExtFile " )   将 为 只读 并且 提供 下列 方法 :   " read ( ) " ,   " readline ( ) " ,   " readlines ( ) " ,   " seek ( ) " ,   " tell ( ) " ,   " __ iter __ ( ) " ,   " __ next __ ( ) "
对于 列表 也 有 类似 的 函数   " PyListSize ( ) "   和   " PyList _ GetItem ( ) "
对于 大多数 典型 的 用例 ， 许多 参数 可以 被 安全 地留 以 它们 的 默认值
如果 内存 块 未 被 跟踪 则 不 执行 任何 操作
也 允许 用 其他 任意 表达式 代替 基类 名称 所在 的 位置
由   PEP   448   发起 最初 提议
保存 如果 文件 已经 存在 ， 则 将 当前 窗口 保存 至 对应 的 文件
named   这个 组 匹配 不带 花 括号 的 占位 符 名称 ； 它 不 应当 包含 捕获 组中 的 分隔符
安全
复杂 数组
在   3.3   版 更改 :   Added   the   msg   keyword   argument   when   used   as   a   context   manager .
核心 与 内置
如果 没有 实参 ， 则 返回   " 0.0 "
例如 ， " ' [ ? ] ' "   将 匹配 字符   " ' ? ' "
此 段落 详细 讲 了 这个 模块 符合   RFC   的 级别
bpo   38319 :   修复 套 接字 和   shutil   模块 中 使用 的 sendfile ( )   在   32   bit   架构 上 会 产生   OverflowError   for   files   >   2GiB
它 将 在 所 引发 的 异常 上 被 设置 为   " __ cause __ "
在   " tkinter . Canvas "   类中 添加 了 方法   " moveto ( ) "
上下文 创建
请 注意   lambda   只是 简单 函数 定义 的 一种 简化 写法 ； 在   " " def " "   语句 中 定义 的 函数 也 可以 像 用   lambda   表达式 定义 的 函数 一样 被 传递 或 赋值 给 其他 名称
不过 ， 它们 仍然 不可 与 标准   " Enum "   枚举 进行 比较 :
例如 :
将 解码器 重置 为 初始状态
可能 是 一个 列表 或 字符串 .
Locator   对象
它 作为   " types . FunctionType "   向   Python   程序员 公开
在   POSIX   上 ， 该 函数 检查   path   的 父 目录   "   path   / .. "   是否 在 与   path   不同 的 设备 上 ， 或者   "   path   / .. "   和   path   是否 指向 同一 设备 上 的 同一   inode （ 这一 检测 挂载 点 的 方法 适用 于 所有   Unix   和   POSIX   变体 ）
这篇 教程 旨在 作为   " argparse "   的 入门 介绍 ， 此 模块 是   Python   标准 库中 推荐 的 命令行 解析 模块
推荐 的 调用 子 进程 的 方式 是 在 任何 它 支持 的 用例 中 使用   " run ( ) "   函数
错误处理
参见   PEP   492   和   PEP   525
但是 ， 注意   Python   自己 也 实现 了 许多 类似   shell   的 特性 （ 例如   " glob " ,   " fnmatch " ,   " os . walk ( ) " ,   " os . path . expandvars ( ) " ,   " os . path . expanduser ( ) "   和   " shutil " ）
此 模块 打算 代替 一些 老旧 的 模块 与 功能 ：
在   3.5   版 更改 :   如果   max _ workers   为   " None "   或 没有 指定 ， 将 默认 为 机器 处理器 的 个数 ， 假如   " ThreadPoolExecutor "   则 重于   I / O   操作 而 不是   CPU   运算 ， 那么 可以 乘以   " 5 " ， 同时 工作 线程 的 数量 可以 比   " ProcessPoolExecutor "   的 数量 高
help   一个 此 选项 作用 的 简单 描述
请 注意 ， " . "   需要 特别 处理 ， 因为 它 是 元字符 ， 所以 它 在 字符 类中 只能 匹配 特定 字符
你 可以 在 Python 命令 中 使用   "   O "   或者   "   OO "   开关 ，   以 减小 编译 后 模块 的 大小
（   " next "   和   " step "   之间 的 区别 在于 ， " step "   进入 被 调用函数 内部 并 停止 ， 而   " next "   （ 几乎 ） 全速 运行 被 调用函数 ， 仅 在 当前 函数 的 下 一行 停止 。 ）
特定 Unix 平台 的 配置 选项 和 注意事项 通常 记录 在 Python 源代码 的 根目录 下 的   README . rst   文件 中
" IncrementalDecoder "   可以 通过 提供   errors   关键字 参数 来 实现 不同 的 错误处理 方案
那个 参数 必须 是 一个 模块 对象 ， 所以 它 之前 必须 已经 成功 导入 了
有时 你 会 被 诱惑 继续 使用   " re . match ( ) "   ， 只 需 在 你 的 正则 前面 添加   "
代表   C   " PyObject   "   数据类型
命令行 选项
" fill ( ) "   是 以下 语句 的 快捷方式
但是 内存 不会 以 任何 方式 被 初始化
在   3.8   版 更改 :   现在 会 通过 返回 所 遇到 的 第一个 众数 来 处理 多模 数据 集
回到 例子
3.2   新版 功能 .
" list . append ( ) "   操作 添加 值到 这个 新 的 列表 里
子 例程 可以 在 某 一点 进入 并 在 另 一点 退出
在 下面 的 描述 中 ， 双引号 的 表达式 使 格式 单元 ； 圆括号   ( )   内 的 是 格式 单元 将要 返回 的   Python   对象 类型 ； 方括号   [ ]   内 的 是 传递 的   C   变量 ( 变量 集 ) 的 类型
" collections . abc . KeysView "   的 泛型 版本
命令行 界面
如果   encoding   不 为   " None " ， 则 会 将 其 用作 打开 文件 的 编码 格式
" s "   ( " str "   或   " None " )   [ const   char   ]   使用   " ' utf   8 ' "   编码 将空 终止 的   C   字符串 转换 为   Python   " str "   对象
方法 名   Deprecated   alias   Deprecated   alias   " assertEqual ( ) "   failUnlessEqual   assertEquals   " assertNotEqual ( ) "   failIfEqual   assertNotEquals   " assertTrue ( ) "   failUnless   assert _   " assertFalse ( ) "   failIf   " assertRaises ( ) "   failUnlessRaises   " assertAlmostEqual ( ) "   failUnlessAlmostEqual   assertAlmostEquals   " assertNotAlmostEqual ( ) "   failIfAlmostEqual   assertNotAlmostEquals   " assertRegex ( ) "   assertRegexpMatches   " assertNotRegex ( ) "   assertNotRegexpMatches   " assertRaisesRegex ( ) "   assertRaisesRegexp
然而 ， 获得 静态方法 效果 的 更 直接 的 方法 是 通过 一个 简单 的 模块 级 函数 ：
非法 字节 序列
内置 异常
文档
下面 第一个 列表 推导 式 语法错误 ， 第二个 则 是 正确 的 :
泛型 属性 管理
可以 通过 传入 一个 可 调用 对象 作为   opener   来 使用 自定义 文件 打开 器
示例
3.4   新版 功能 .
字符串 在 系统 内部 存储 为   " 0x0 "   " 0x10FFFF "   范围 内 的 码位 序列
工具 / 示例
在   fragment   中 搜索 所有 长度 为   length   的 采样 切片 （ 不是 字节 ！ ） 中   ， 能量 最大 的 那 一个 切片 ， 即 返回   i   使得   " rms ( fragment [ i   2 : ( i + length )   2 ] ) "   最大
例如 ：
DateTime   对象
当前 帧 中 的 当前 行用   "   > "   标记
如果 进行 了 足够 的 测量 ， 那么   " 误差 "   将 趋于 平均
通过   level   参数 获得 你 将 传递 给   " basicConfig ( ) "   的 值
" __ import __ ( ) "   和   " importlib . util . resolve _ name ( ) "   现在 会 引发   " ImportError "   取代 之前 所 引发 的   " ValueError "
这些 对象 在 调用   " is _ multipart ( ) "   的 时候 会 返回   " False "   ， 调用   " iter _ parts ( ) "   的 时候 会 产生 一个 空 列表
指明 以 字节 为 单位 的 音频 采样 大小
" asyncio "   异步   I / O
举个 例子 ， 在   Python   里 ， 调用函数   " print ( ) "   或者   " time . sleep ( ) "   并 不会 返回 有用 的 结果 ； 它们 的 用途 只 在于 副作用 ， 向 屏幕 发送 一段 文字 或 暂停 一秒钟
行 结构
只读 传输
疑问 消息 框
默认 情况 下 ， 当 你 要 执行   CLI   时 ， 默认 压缩 等级 为   6
参数 :   fun   一个 无 参数 的 函数 或   " None "
" collections "   是 该代 被 回收 的 次数 ；
如果 此 变量 未 设置 或 设为   " random " ， 将 使用 一个 随机 值 作为   str   和   bytes   对象 哈希 运算 的 种子
请 注意 不同 的   " datetime "   实例 仅 通过   " fold "   属性 值来 加以 区分 ， 它们 在 比较 时会 被 视为 相等
当前 模块 也 提供 了 一些 对   logging   的 支持
（ 由   Franz   Glasner ,   É ric   Araujo   和   Cheryl   Sabella   在   bpo   2504   中 贡献 。 ）
使用 空行 分隔 函数 和 类 ， 以及 函数 内 的 较大 的 代码 块
另外 也 会 将 原有 的   " dict . items ( ) " ， " dict . keys ( ) "   和   " dict . values ( ) "   方法 调用 用   " list "   包装 一层
结果 对象 会 被 推入 栈顶 ， 以便 由 后续 的   " STORE _ FAST "   指令 来 保存
调用   " dict . update ( TOS1 [   i ] ,   TOS ) "
Python   也 可 用于 可 定制 化 软件 中 的 扩展 程序语言
当 附带   " ssl . SSLSocket "   套 接字 调用 不 兼容 的 方法 时   " asyncio "   现在 会 引发   " TyperError "
只 写 传输
客户端 应当 谨慎 地 使用 数据 属性 客户端 可能 通过 直接 操作 数据 属性 的 方式 破坏 由 方法 所 维护 的 固定 变量
因此   " a . x "   的 两次 出现 不 一定 指向 相同 的 属性 ： 如果 右侧 表达式 指向 一个 类 属性 ， 则 左侧 会 创建 一个 新 的 实例 属性 作为 赋值 的 目标 :
还有 另外 一组 编码 格式 （ 所谓 的 字符 映射 编码 ） 会 选择 全部   Unicode   码位 的 不同 子集 并 设定 如何 将 这些 码位 映射 为 字节 值   " 0x0 "   " 0xff "
类似 的 行为 也 会 对 晚于   2107   12   31   的 文件 发生 ， 时间 戳 也 会 被 设为 该 上 限值
Python 将 始终 在 Microsoft   Store 上 免费 提供
" collections . abc . ValuesView "   的 泛型 版本
a   LAW   是 一种 音频 编码 格式 ， 仅 使用   8   位 采样 即可 获得 大约   13   位 的 动态 范围
请求   形状   步幅   子 偏移量   邻接   只读   格式   PyBUF _ FULL   是   是   如果 需要的话   U   0   是   PyBUF _ FULL _ RO   是   是   如果 需要的话   U   1   或   0   是   PyBUF _ RECORDS   是   是   NULL   U   0   是   PyBUF _ RECORDS _ RO   是   是   NULL   U   1   或   0   是   PyBUF _ STRIDED   是   是   NULL   U   0   NULL   PyBUF _ STRIDED _ RO   是   是   NULL   U   1   或   0   NULL   PyBUF _ CONTIG   是   NULL   NULL   C   0   NULL   PyBUF _ CONTIG _ RO   是   NULL   NULL   C   1   或   0   NULL
启动 一个 交互式 解释器 （ 使用   " code "   模块 ） ， 它 的 全局 命名 空间 将 包含 当前 作用域 中 的 所有 （ 全局 和 局部 ） 名称
仅 在 目录   b   中 的 文件 和 子目录
特性   可 选 版本   强制 加入 版本   效果   nested _ scopes   2.1 . 0b1   2.2   PEP   227   :   Statically   Nested   Scopes   generators   2.2 . 0a1   2.3   PEP   255   :   Simple   Generators   division   2.2 . 0a2   3.0   PEP   238   :   Changing   the   Division   Operator   absolute _ import   2.5 . 0a1   3.0   PEP   328   :   Imports :   Multi   Line   and   Absolute / Relative   with _ statement   2.5 . 0a1   2.6   PEP   343   :   The   " with "   Statement   print _ function   2.6 . 0a2   3.0   PEP   3105   :   Make   print   a   function   unicode _ literals   2.6 . 0a2   3.0   PEP   3112   :   Bytes   literals   in   Python   3000   generator _ stop   3.5 . 0b1   3.7   PEP   479   :   StopIteration   handling   inside   generators   annotations   3.7 . 0b1   3.10   PEP   563   :   Postponed   evaluation   of   annotations
这些 参数 也 全都 是   Python   对象 要 在 我们 的   C   函数 中 使用 它们 就 需要 先 将 其 转换 为   C   值
返回 全部 可用 映射 的 列表
在   3.3   版 更改 :   管理器 对象 支持 上下文 管理 协议 查看 上下文 管理器 类型
它 只有   " False "   和   " True "   两个 实例 （   参见 布尔值 ）
每个 被 返回 的 选项 与 值 对 的 第一个 元素 是 选项 ， 短 选项 前缀 一个 连 字符   (   例如   " '   x ' " ) ， 长 选项 则 前缀 两个 连 字符   ( 例如   " '   long   option ' " ) ， 第二个 元素 是 选项 参数 ， 如果 选项 不带 参数 则 为 空 字符串
然而 ，   多重 的 新 行会 被 替换成 一行
在 Linux 中
如果 未 提供 日志 记录 配置 ， 则 可能 出现 需要 输出 日志 记录 事件 但 无法 找到 输出 事件 的 处理程序 的 情况
3.1   版后 已 移除 .
可选 的   timeval   如果 给出 ， 则 是 一个 可 被   " time . gmtime ( ) "   和   " time . localtime ( ) "   接受 的 浮点数 时间 值 ， 否则 会 使得 当前 时间
这 适用 于 形参 名称 没有 实际意义 ， 以及 当 你 希望 强制 规定 调用 时 的 参数 顺序 ， 或是 需要 同时 收受 一些 位置 形参 和 任意 关键 字形 参等 情况
命令行 参数 ， 环境变量 和 文件名 会 使用   UTF   8   编码 来 解码 为 文本
写入 音频 数据 并 更新   nframes
" collections . abc . Sequence "   的 泛型 版本
如果 消息 头 的   Content   Type   字段 所 指定 的 类型 是 无效 的 ，   RFC   2045   令其 默认 类型 为   text / plain   。 ）
此 函数 被 用作   " ndiff ( ) "   中   charjunk   形参 的 默认值
有关 该 主题 的 更 多 信息 请 参见 专门 的 文档 章节
返回 表示 当前   UTC   时间 的   date   和   time ， 其中   " tzinfo "   为   " None "
Python   允许 你 划分 程序模块 ， 在 其他 的   Python   程序 中 重用
等待 命令 完成
最 简分数 形式 的 分母
此 风格 与   EAFP   方式 恰成 对比 ， 其 特点 是 大量 使用   " if "   语句
可用 的 值 请参阅 错误处理 方案
成功 时 返回   capsule   的 内部 指针
class :   date   用法 示例
这些 模式 还 可以 分别 以   " " rb " " ,   " " wb " " ,   " " xb " "   和   " " ab " "   的 等价 形式 给出
此 异常 的 参数 是 一个 指明 错误 原因 的 字符串
表示 复数 的 Python 对象
以下 异常 属于 经常 被 引发 的 异常
在   3.8   版 更改 :   Added   max _ num _ fields   parameter .
第一个 参数 是 包含 文件名 的 字符串
对于   Python   3.9 ， 你 可以 使用   python   或者   pythonw
同样 也 不 建议 直接 使用   " __ import __ ( ) "   而 应该 用   " importlib . import _ module ( ) "
如果   object   的 表示 形式 公开 了 一个 递归 条目 ， 该 递归 引用 会 被 表示 为   " < Recursion   on   typename   with   id   number > "
方法   " addch ( ) "   接受 一个 字符 ， 可以 是 长度 为   1   的 字符串 ， 长度 为   1   的 字节 串 或者 一个 整数
安全
在   3.3   版 更改 :   支持 了   " with "   语句
返回 可以 用来 格式化 的 指定 年 月 的 数据
在   " with "   语句 中 使用   " SharedMemoryManager "   对象 的 时候 ， 使用 这个 管理器 创建 的 共享内存 块 会 在   " with "   语句 代码 块 结束 后 被 释放
在   3.6   版 更改 :   Added   policy   keyword   only   parameter .
库
[   脚注   ]
显式 级别 为   " 0 "   （ 没有 优化 ； " __ debug __ "   为 真 ） 、 " 1 "   （ 断言 被 删除 ，   " __ debug __ "   为 假 ） 或   " 2 "   （ 文档 字符串 也 被 删除 ）
格式 段落 在 注释 块 或 多行 字符串 或 字符串 中 的 选定 行中 ， 重新 格式化 当前 以 空行 分隔 的 段落
3.2   新版 功能 .
Reedy   在   bpo   37765   中 贡献   。 ）
这些 是 对应 于 “ 外部 线程 ” 的 线程 对象 ， 它们 是 在线 程 模块 外部 启动 的 控制线 程 ， 例如 直接 来自 C 代码
无法 识别 的 格式 字符 会 导致 将 格式 字符串 的 其余 所有 内容 原样 复制到 结果 对象 ， 并 丢弃 所有 多余 的 参数
定义 清理 操作
DocTest   对象
（ 由   Zackery   Spytz   在   bpo   25451   中 贡献 。 ）
steps   一个 整型 数   ( 或   " None " )
将 ( 旧式 的 ) 比较 函数 转换 为 新式 的   key   function
对于 不可 变 的 目标 例如 字符串 、 数字 和 元组 ， 更新 的 值会 被 计算 ， 但 不会 被 再 被 赋值 给 输入 变量 ：
在   3.9   版 更改 :   The   function   does   not   call   " Py _ FatalError ( ) "   anymore   if   the   string   is   not   ready .
打开 一个   AIFF   或   AIFF   C   文件 并 返回 一个 对象 实例 ， 该 实例 具有 下方 描述 的 方法
参见   " get ( ) "   获取 对于   raw   ,   vars   和   fallback   的 解释
另 请参阅   " PYTHONINSPECT "
Unpacker   对象
迭代 器中 的 元素 为 一个 由 日期 和 代表 星期 几 的 数字 组成 的 的 元组
项目 的 结构
参见 :
对于 两个 维度 中 的 每 一个 ， 会 分别 检查 环境变量   " COLUMNS "   和   " LINES "
如果   func   是 函数 、 类 或 实例 对象 ， 则 返回 它 的 名称 ， 否则 返回   func   的 类型 的 名称
但是 ， 在 阻塞   tenths   个 十分之一 秒 之后 ， 如果 还 未 输入 任何 内容 则 将 引发 异常
" PyUnicode _ GET _ DATA _ SIZE " :   使用   " PyUnicode _ GET _ LENGTH ( str )   PyUnicode _ KIND ( str ) "   ( 仅 适用 于 现成 的 字符串 )
展示 了 如何 将 时间 格式化 为 本地 时间 和 UTC 两种 形式 ， 其中 每种 形式 对应 一个 日志 处理器
" StreamWriter "   和   " StreamReader "   类 提供 了 一些 泛用 工作 接口 ， 可 被 用来 非常 方便 地 实现 新 的 编码 格式 子 模块
对于 每个 这样 的 变量 ， 一个   “ Cell ” 对象 为了 存储 该值 而 被 创建 ； 引用 该值 的 每个 堆栈 框架 的 局部变量 包含 同样 使用 该 变量 的 对外部 作用域 的 “ Cell ” 引用
该 对象 没有 任何 方法
连接 字节 数组   a   和   b   并 返回 一个 带有 结果 的 新 的 字节 数组
前面 的 函数 都 早已 不宜 使用
当 这样 设置 时   ， 监听器 会 比较 每条 消息 的 等级 和 日志 处理器 中 设置 的 等级 ， 只 把 需要 传递 的 消息 传给 对应 的 日志 处理器
异步 编程 与 传统 的 “ 顺序 ” 编程 不同
name   是 所 请求 的 共享内存 的 唯一 名称 ， 与   " SharedMemory "   的 定义 中 所 描述 的 一致
3.5   新版 功能 .
这 等价 于   " list . sort ( ) "
Packer   对象
方法 是 “ 属于 ” 一个 对象 的 函数 ， 它 被 命名 为   " obj . methodname "   ， 其中   " obj "   是 某个 对象 （ 也 可能 是 一个 表达式 ） ，   " methodname "   是 由 对象 类型 中 定义 的 方法 的 名称
对应 于   " errno "   " ECONNRESET "
这 一段落 演示 了 这些 工具 的 一小部分 ， 但 也 足以 满足 大部分 用户 的 需求
在 Windows 上 编译 Python
注意 ： 如果 你 需要 支持   RFC   2045   ， 那么 使用   " email "   模块 可能 更加 合适
测试
优化
为了 可 导入 ， 共享 库 必须 在   " PYTHONPATH "   中 有效 ， 且 必须 命名 遵循 模块 名字 ，   通过 适当 的 扩展
参见   " PyObject _ GetItem ( ) " 、 " PyObject _ SetItem ( ) "   与   " PyObject _ DelItem ( ) "
这些 函数 接受 整数 或单 字符 字符串 ； 当 参数 为 字符串 时 ， 会先 使用 内置 函数   " ord ( ) "   进行 转换
判断   Unicode   字符串   unistr   是否 为 正规 形式   form
它 必须 适用 于   Python   的   " print ( ) "   函数
[ 1 ]   " % li "   长 整型   相当于   " printf ( " % li " ) "
如果 可 迭代 对象 为空 ， 并且 没有 给   default   ， 则 会 触发   " ValueError "
默认值 为   " sys . getfilesystemencoding ( ) "   或是 回退 选项   " ' ascii ' "
具体 的 对象 层
另 一个 值得 介绍 的 用例 出现 于 列表 推导 式 中 ， 在 筛选 条件 中 计算 一个 值 ， 而 同一个 值 又 在 表达式 中 需要 被 使用 :
某些 格式 需要 只读 的   bytes   like   object   ， 并 设置 指针 而 不是 缓冲区 结构
它 已 被   PEP   393   所弃 用 ， 并 自   Python   3.3   起 不再 可用
当 检测 到 一个 不 归属于 任何 其他 类别 的 错误 时 将 被 引发
也就是说 ， 在 创建 类 实例 时 没有 为   " x "   指定 值 的 类   " D "   的 两个 实例 将 共享 相同 的   " x "   副本
以下 是 与 上述 相同 配置 的 示例 ， 采用   YAML   格式 ， 用于 新 的 基于 字典 的 方法 ：
3.7   新版 功能 .
工具 / 示例
但是 ， 有些 数据 类 功能 需要 额外 的 每字段 信息
它 将 引发   " ValueError "   表示 无效 的 值
命令行 选项
rmtree   示例
例如 ， 要 使用   BLAKE2b   来 替代   SHA   1   而 不 改变 输出 大小 ， 我们 可以 让   BLAKE2b   产生   20   个 字节 的 摘要 :
bpo   38535 :   修复 了 装饰 器中 不带 参数 调用 的 AST 节点 的 行号 和 列 偏移量
基于 文件 头 推测 存储 在 文件 中 的 声音 数据类型
当 一个 不能 被   " tarfile "   模块 处理 或者 因 某种原因 而 无效 的   tar   归档 被 打开 时 将 被 引发
IEEE   754   binary16   " 半 精度 "   类型 是 在   IEEE   754   标准 的   2008   修订版 中 引入 的
注解 :
pydoc   的 参数 可以 为 函数 、 模块 、 包 ， 或 带点 号 的 对 模块 中 的 类 、 方法 或 函数 以及 包中 的 模块 的 引用
你 可以 使用 你 自己 的 适当 实现 来 替换   " dictConfigClass "   的 值
如果 它们 完全 被 初始化 的话 ， 它们 不是 从源 对象 复制 的 ， 而是 在   " __ post _ init __ ( ) "   中 初始化
3.7   新版 功能 .
bpo   33363 :   在 异步 函数 外 使用 ` ` async   with ` `   和   " async   for "   时 抛出   SyntaxError 异常
在 词法 定义 中   ( 如 上述 示例 ) ， 还 额外 使用 了 两个 约定 :   由 三个 点 号 分隔 的 两个 字符 字 面值 表示 在 指定   ( 闭 )   区间 范围 内 的 任意 单个   ASCII   字符
所有   " PYTHON   "   环境变量 也 会 被 忽略
示例 :
asyncio 附带 下列 内置 策略 :
根据 格式 解析 表示 时间 的 字符串
[ 1 ]   " % zi "   Py _ ssize _ t   相当于   " printf ( " % zi " ) "
这 三个 返回 匹配 部分 占 字符 总数 的 比率 的 方法 可能 由于 不同 的 近似 级别 而 给出 不 一样 的 结果 ， 但是   " quick _ ratio ( ) "   和   " real _ quick _ ratio ( ) "   总是 会 至少 与   " ratio ( ) "   一样 大 ：
" 类 对象 "   被 当作 模板 来 创建 实例 对象 ， 实例 对象 包含 了 特定 于 数据类型 的 数据 （ 属性 ） 和 代码 （ 方法 ）
记录 消息 被 编码 为   " LogRecord "   类 的 实例
使用 cgi 模块
每个 归档 成员 都 由 一个   " TarInfo "   对象 来 代表 ， 详情 参见   TarInfo   对象
列表 推导 式
3.7   新版 功能 .
在   3.5   版 更改 .
被 取代 的 模块
一旦 所有 缓冲区 中 的 数据 被 写入 管道 之后 ， 后台 的 线程 会 退出
如果   str   开头 和 结尾 均 是 双引号 ，   则 这 对 双引号 被 去除
核心 与 内置
此 模块 定义 了 下列 异常 和 函数 ：
形参   digestmod   可以 为 某种 哈希 算法 的 名称
模块   " locale "   国际化 服务
在 这种 情况 下   ， 很 可能 将 专门 的   " Formatter "   与 特定 的   " Handler "   一起 使用
以下 函数 允许 读取 并 恢复 存储 为   marshal   格式 的 值
" SequenceMatcher "   计算 并 缓存 有关 第二个 序列 的 详细信息 ， 这样 如果 你 想要 将 一个 序列 与 多个 序列 进行 比较 ， 可 使用   " set _ seq2 ( ) "   一次性 地 设置 该 常用 序列 并 重复 地 对 每个 其他 序列 各 调用 一次   " set _ seq1 ( ) "
[   脚注   ]
在   Python   3   中 ， 文件 和 流 使用 新 的   " io "   模块 ， 该 模块 在 操作系统 的 低 层级 无 缓冲   I / O   之上 定义 了 几个 层
设置   Python   内存 分配器 和 / 或 安装 调试 钩子
" PyTypeObject "   的 实例 代表 一个   Python   字节 类型 ， 在   Python   层面 它 与   " bytes "   是 相同 的 对象
库
该 字符串 必须 是 对象 的 某个 属性
应用程序 使用   " Queue "   对象 进行 线程 间通信 和 协调 ， 更 易于 设计 ， 更 易读 ， 更 可靠
使用 适配器 将 额外 的   Python   类型 保存 在   SQLite   数据库 中
如果 你 没有 指定   isolation _ level   ， 将 使用 基本 的   " BEGIN " ， 它 等价 于 指定   " DEFERRED "
和   " issuite ( st ) "   相同
3.8   版后 已 移除 :   对   " __ getitem __ ( ) "   方法 的 支持 已弃 用
如果 指定 的 检查 不 受 支持 ， 则 会 引发   " LZMAError "
和   " isexpr ( st ) "   相同
Python   3.1   有 什么 新 变化
这 在 你 要 转换 异常 时 很 有用
计数器 主要 是 为了 表达 运行 的 正 的 计数 而 设计 ； 但是 ， 小心 不要 预先 排除 负数 或者 其他 类型
搜索 查询 底层 映射 ， 直到 一个 键 被 找到
字典 的 键 的 数目 在 将来 可能 发生 改变 ， 目前 每个 字典 包含 以下内容 ：
另一方面 ， 在 写入 数据 之后 再 改变 编码 格式 则 是 可以 的
注意 数字 字 面值 并 不 包含 正负号 ； "   1 "   这样 的 负数 实际上 是 由 单目 运算符   ' "   " '   和 字 面值   " 1 "   合成 的
作为 不 包含   IANA   数据库 的 平台 的 一个 回退 数据源 ， 还 以 第一 方 软件包 的 形式 发布 了   " tzdata "   模块 通过   PyPI   发行 并 由   CPython   核心 团队 维护
默认 适配器 和 转换器
" fileinput "   迭代 来自 多个 输入 流 的 行
编解码器 注册 与 支持 功能
参见 :
由 Pablo   Galindo 修正
实例 属性 （ 只读 ） ：
本 文档 未 涉及 优化 ， 因为 它 要求 你 充分 了解 匹配 引擎 的 内部结构
“ 编译 过 的 ” Python 文件
那么 从   i   到   j   的 切片 就 包括 了 标有   i   和   j   的 位置 之间 的 所有 字符
给 整个 解释器 加锁 使得 解释器 多线程 运行 更 方便 ， 其 代价 则 是 牺牲 了 在 多处理器 上 的 并行性
有趣 的 是 ， 有 许多 不同 的 十进制 数 共享 相同 的 最 接近 的 近似 二进制 小数
分配   n   个 字节 并 返回 一个 指向 分配 的 内存 的   " void   "   类型 指针 ， 如果 请求 失败 则 返回   " NULL "
3.7   新版 功能 .
由   Screen   类 使用 ， 使 其 能够 自动 提供 一个   ScrolledCanvas   作为 海龟 的 绘图 场所
修复器
可以 用作   stdin   ,   stdout   或   stderr   参数 来 处理 创建 函数 的 特殊 值
示例
把 注释 去掉
作为 指导 ：
你 当然 也 可以 用 列表 推导 式 达到 同样 的 效果
参见 :
由   " MARK "   操作码 指明 的 每个 连续 级别 将会 缩进   indentlevel   个 空格
数据 类 没有 通用 的 方法 来 检测 这种 情况
itertools   模块
新 关键字
模块   " curses . ascii "   在   ASCII   字符 上 工作 的 工具 ， 无论 你 的 区域 设置 是 什么
改进 的 模块
此 原型 必须 求值 为 一个 支持 抽取 操作 的 对象 （ 例如 列表 或 字典 ）
由于 这是 一个 精确 的 比值 ， 它 可以 被 用来 无损 地 重建 原始 值 :
与   " IntFlag "   类似 ， 如果   " Flag "   成员 的 某种 组合 导致 没有 设置 任何 旗标 ， 则 其 布尔值 为   " False " :
" Enum "   成员 类型
" symbol "   与   Python   解析 树 一起 使用 的 常量
" ' s ' "   同步 模式
结构 序列 对象
注解 :
源代码 ：   Lib / tracemalloc . py
检查 缓存 有效性
非本机 字节 序 的 结构 体 不能 包含 指针 类型 字 段 ， 或 任何 其他 包含 指针 类型 字段 的 数据类型
在   3.3   版 更改 :   Headers   are   stored   to   an   internal   buffer   and   " end _ headers ( ) "   needs   to   be   called   explicitly .
从块 堆栈 中 删除 一个 块
弃用
参数 :   source   源 文件名
当且 仅 当 内部 标识 为   true   时 返回   " True "
obj _ or _ type   必须 为 一个   ctypes   类型 或 实例
在 下面 的 列表 中 ， 当前 平台 上 没有 使用 的 符号 没有 被 本 模块 定义
成员 的 文件 信息 会 尽可能 精确 地被 提取
请 注意 其中 有 许多 在 现今 已经 没有 实际 作用
在 根 日志 记录器 上 记录 一条   " ERROR "   级别 的 消息
在   3.5   版 更改 :   Always   allow   a   server _ hostname   to   be   passed ,   even   if   OpenSSL   does   not   have   SNI .
" parser "   访问   Python   解析 树
可以 使用   " find _ spec ( ) "   来 提供 功能
增加 了   " ' namereplace ' "   错误处理 接口
它 可以 是   " Dialect "   类 的 子类 的 实例   ， 也 可以 是   " list _ dialects ( ) "   函数 返回 的 字符串 之一
将 标签 转换 为   Unicode ， 规则 定义 见   RFC   3490
" Include / internal /   . h "   应为   CPython   特别 专属 的 私有 内部   C   API
特别 是 包含 如下 语句 的 模块
应当 在 发送 一个 请求 从 服务器 获取 响应 时 被 调用
当 逆向 循环 一个 序列 时 ， 先 正向 定位 序列 ， 然后 调用   " reversed ( ) "   函数
一种 日益 流行 的 技术 是 面向 测试 的 开发 ， 它 要求 在 编写 任何 实际 代码 之前 首先 编写 测试 套件 的 各个 部分
参数 :   type _   字符串   " polygon " ,   " image " ,   " compound "   其中 之一
将 一个   Python   对象   value   以   marshal   格式 写入   file
返回 当前 上下文 中   " Context "   对象 的 拷贝
名称 是 以 句点 分隔 的 层次结构
Gay 的 同名 文件 派生 而 来 ， 该 文件 当前 可 从 http : / / www . netlib . org / fp /   下载
否则 （ 如   TOS   为 真值 ） ， TOS   会 被 弹出
如果 指定 了   sep   ， 它 必须 为单 字符   str   或   bytes   对象
安装 路径
Shell   菜单 （ 仅   window   编辑器 ）
它 是 头文件   " float . h "   的 一个 简单 包装
（ 由   Serhiy   Storchaka   在   bpo   39648   中 贡献 。 ）
[ 1 ]   现在 不 推荐 使用   " % Z "   ， 但是 所有   ANSI   C   库 都 不 支持 扩展 为 首选 小时 / 分钟 偏移量 的 ` ` % z ` ` 转义 符
PEP   3118 :   新 的 内存 视图 实现 和 缓冲 协议 文档
继续 运行 ， 直到 运行 到 当前 函数 的 下 一行 ， 或 当前 函数 返回 为止
PEP   451   导入 系统 的 一个 模块 规范 类型
Tk 图形用户界面 ( GUI )
在   3.5   版 更改 :   " ' backslashreplace ' "   错误处理 方案 现在 适用 于 解码 和 转换
定义 扩展 类型 ： 已 分类 主题
如果 目标 已 存在 但 不是 目录 ， 它 可能 会 被 覆盖 ， 具体 取决于   " os . rename ( ) "   的 语义
对象 可以 为   " NULL " ， 在 此 情况 下该 宏 不 产生 任何 效果 ； 在 其他 情况 下 其 效果 与   " Py _ DECREF ( ) "   相同 ， 并会 应用 同样 的 警告
核心 与 内置
启用 跟踪 且 带有   skip   参数 的 调用 示范 :
动画 控制
某个   IBM   PC   编码 页 ， 通常 会 兼容   ASCII
类似 于   " ' g ' " ， 不同之处 在于 当 数值 非常 大 时会 切换   为   " ' E ' "
在   epoll   对象 中 注册 一个 文件 描述符
3.7   新版 功能 .
在   3.7   版 更改 :   递归 排序 目录 条目
弃用
3.2   新版 功能 .
但是 ， 立即 调用 一个 方法 并 不是 必须 的 :   " x . f "   是 一个 方法 对象 ， 它 可以 被 保存起来 以后 再 调用
作用域 和 命名 空间 示例
反 斜杠 灾难
（ 比 整数 更 复杂 的 状态 表示 可以 通过 编组 / 选择 状态 并 将 结果 字符串 的 字节 数据编码 为 整数 来 转换 为 一个整 数值 ）
wxPython   是   wxWidgets   的   Python   适配
这会 编译   " demo . c "   ， 然后 产生 一个 扩展 模块 叫做   " demo "   在 目录   " build "   里
如果 给出 一个 此 范围 以外 的 参数 ， 则 会 引发   " ValueError "
构建
这 必须 为 一个二元 组 ， 第一项 必须 是 包含 尚未 解码 的 输入 的 缓冲区
实现 限制
返回 此   Task   对象 的 栈 框架 列表
将   domain   绑定 到 本地 目录   localedir
例如 :
打印   expression   的 类型
将 此 处理器 的   " Formatter "   设置 为   fmt
在 发布 该包 的 新 版本 时 ， 包 作者 可以 决定 是否 让 此 列表 保持 更新
3.2   新版 功能 .
在 转写 过程 中 发生 与   Unicode   相关 的 错误 时 将 被 引发
指示   " writer "   对象 仅为 包含 特殊字符 （ 例如 定界符   、   引号 字符 或行 结束符 中 的 任何 字符 ） 的 字 段 加上 引号
这些 属性 将来 下 一 小节 细说
赋值 是 根据 目标 （ 列表 ） 的 格式 递归 地 定义 的
在   3.6   版 更改 :   " open ( ) "   现在 可以 被 用来 配合   " mode   ' w ' "   选项 来 将 文件 写入 归档
例如 ， 以下 是 某个 照片 浏览器 的 批量 重命名 功能 ， 采用 了 百分号 作为 日期 、 照片 序号 和 照片 格式 的 占位 符 :
同样 ， 这 也 会 加载 子 模块   " echo " ， 但 这会 使 其 函数   " echofilter ( ) "   直接 可用 :
默认 情况 下 ， 文件 会 无限 增长
索引   域   Resource   " 0 "   " ru _ utime "   time   in   user   mode   ( float   seconds )   " 1 "   " ru _ stime "   time   in   system   mode   ( float   seconds )   " 2 "   " ru _ maxrss "   maximum   resident   set   size   " 3 "   " ru _ ixrss "   shared   memory   size   " 4 "   " ru _ idrss "   unshared   memory   size   " 5 "   " ru _ isrss "   unshared   stack   size   " 6 "   " ru _ minflt "   page   faults   not   requiring   I / O   " 7 "   " ru _ majflt "   page   faults   requiring   I / O   " 8 "   " ru _ nswap "   number   of   swap   outs   " 9 "   " ru _ inblock "   block   input   operations   " 10 "   " ru _ oublock "   block   output   operations   " 11 "   " ru _ msgsnd "   messages   sent   " 12 "   " ru _ msgrcv "   messages   received   " 13 "   " ru _ nsignals "   signals   received   " 14 "   " ru _ nvcsw "   voluntary   context   switches   " 15 "   " ru _ nivcsw "   involuntary   context   switches
布尔 运算符   " and "   和   " or "   也 被 称为 短路 运算符 ： 它们 的 参数 从 左 至 右 解析 ， 一旦 可以 确定 结果 解析 就 会 停止
" venv "   激活 脚本 不再 将   " __ VENV _ PROMPT __ "   被 设为   " " " "   的 情况 作为 特例 处理
值   间隔 类型   如果 / 如何 使用   atTime   " ' S ' "   秒   忽略   " ' M ' "   分钟   忽略   " ' H ' "   小时   忽略   " ' D ' "   天   忽略   " ' W0 '   ' W6 ' "   工作日 ( 0   星期一 )   用于 计算 初始 轮换 时间   " ' midnight ' "   如果 未指定   atTime   则 在 午夜   用于 计算 初始 轮换 时间   执行 轮换 ， 否则 将 使用   atTime
在   3.8   版 更改 :   " yield "   和   " yield   from "   在 隐式 嵌套 的 作用域 中 已 被 禁用
" decimal "   十进制 定点 和 浮点运算
这 通过 向 用户 提供 示例 来 改进 文档 ， 并且 它 允许 doctest 模块 确保 代码 保持 对 文档 的 真实 :
由于 主 模块 的 名称 总是   " " __ main __ " "   ， 因此 用作 Python 应用程序 主 模块 的 模块 必须 始终 使用 绝对 导入
当   " try "   子句 中 没有 发生 异常 时   ， 没有 异常 处理器 会 被 执行
" collections . abc . AsyncIterator "   的 泛型 版本
展开 或 压缩 地址 :
根据   string   及其 长度   len   创建 一个 新 的   bytearray   对象
请 注意 只能 给出   " ' r ' " ,   " ' w ' "   中 的 一个
在   3.3   版 更改 :   添加 了   follow _ symlinks   参数 ， 还会 尝试 拷贝 扩展 文件系统 属性 （ 目前 仅限   Linux ）
如果 所 提供 的 值 为 一个 字符串 ， 将 通过   " pwd . getpwnam ( ) "   来 查找 它 ， 并 将 使用   " pw _ uid "   中 的 值
对于   Python   3.0 之前 的 版本 ， 您 可能 正在 使用 经典 类 ： 对于 诸如   " class   Derived ( Base ) :   ... "   之类 的 类 定义 ， 可以 将 在   " Base "   ( 或   " Base "   中 的 一个 的 基类 ） 中 定义 的 方法   " meth ( ) "   调用 为   " Base . meth ( self ,   arguments ... ) "
要 配置 的 对象 是 由 字典 描述 的 ， 其中 包含 它们 的 配置 详情
对 对象 的 弱 引用 不能 保证 对象 存活 ： 当对 像 的 引用 只 剩弱 引用 时 ，   garbage   collection   可以 销毁 引用 并 将 其 内存 重 用于 其他 内容
下面 的 示例 定义 了   " Negator "   类 ， 其中 包含 绑定 到 类 的   " neg "   方法 :
创建 发布 （ 在   " dist / "   目录 中 的 文件 ） 的 命令 需要 将   " ( command ,   filename ) "   二元 组 添加 到   " self . distribution . dist _ files "   以便   upload   可以 将 其 上 传到   PyPI
在   " XMLParser "   的 子类 中 定义 的   " doctype ( ) "   方法 将 不会 再 被 调用 ， 并 将 导致 发出   " RuntimeWarning "   而 不是   " DeprecationWarning "
当 你 的 数据 是 离散 的 ， 并且 你 希望 中位数 是 一个 实际 数据 点 而 非 插值 结果 时 可以 使用 低 中位数
" aifc "   读写   AIFF   和   AIFC   文件
默认 的 计时器 ， 总是   " time . perf _ counter ( ) "
调试器 是 可 扩展 的 — — 调试器 实际 被 定义 为   " Pdb "   类
创建 一个 共享 的   " dict "   对象 并 返回 它 的 代理
" getpass "   模块 提供 了 两个 函数 ：
这是 一个 大小 为   length   的 字节 串 对象 ， 字节 串中 可 包含   0   to   255   的 完整 取值 范围
该 接口 能够 使用 不同 的 协议 获取   URL
如果 最终用户 想要 封存 通过 文件 构造 的   " ZoneInfo " ， 则 推荐 他们 使用 包装 类型 或 自定义 序列化 函数 ： 或者 基于 键 序列化 ， 或者 存储 文件 对象 的 内容 并 将 其 序列化
这 意味着 异常 必须 赋值 给 一个 不同 的 名称 才能 在   except   子句 之后 引用 它
（ 由   Raymond   Hettinger   贡献 。 ）
该 变量 的 值 是 保存 于 跟踪 的 回溯 信息 中 的 最大 帧 数
代表   C   " double "   数据类型
可读 的   " Connection "   对象 ；
显示 / 隐藏 代码 上下文 （ 仅   window   编辑器 ）   Open   a   pane   at   the   top   of   the   edit   window   which   shows   the   block   context   of   the   code   which   has   scrolled   above   the   top   of   the   window
当 一个 方法 被 调用 时 到底 发生 了 什么 ？   你 可能 已经 注意 到 上面 调用   " x . f ( ) "   时 并 没有 带 参数 ， 虽然   " f ( ) "   的 函数 定义 指定 了 一个 参数
注解 :
因为   " join ( ) "   总是 返回   " None "   ， 所以 你 一定 要 在   " join ( ) "   后 调用   " is _ alive ( ) "   才能 判断 是否 发生 超时 如果 线程 仍然 存活 ， 则   " join ( ) "   超时
这 相当于   Python   语句   " del   o [ key ] "
使用   " loop . create _ connection ( ) "   去 链接 socket .
创建 后 ， 就 可以 断言 调用 了 哪些 方法 / 属性 及其 参数
这个 例子 演示 了 如何 包装   Windows   的   " MessageBoxW "   函数 以使 其 支持 默认 形参 和 已 命名 参数
" email . encoders " :   编码器
在 字节 串字 面值 中 ， 十六进制 数 和 八进制 数 转义 码以 相应 数值 代表 每个 字节
如果   skipkeys   是   true   （ 默认 为   " False " ） ， 那么 那些 不是 基本 对象 （   包括   " str " ,   " int " 、 " float " 、 " bool " 、 " None " ） 的 字典 的 键会 被 跳 过 ； 否则 引发 一个   " TypeError "
如果 你 想要 不同 的 行为 请 重载 此 方法
PEP   587 :   Python   初始化 配置
依据 解析器 的 具体 模式 ， 空白行 可能 被 视为 多行 值 的 组成部分 也 可能 被 忽略
元组
Mc   含 空白 标识
3.9   新版 功能 .
所有 错误信息 都 会 被 写入 标准 错误 流 ； 而 命令 的 正常 输出 则 被 写入 标准 输出 流
其中 之一 是 实例 化 以下 类 的 其中 一个 :
例如 ，   一个 反 斜杠 加 两个 换行符 之后 可以 跟随 任何 无 意义 的 符号
警告 :
返回 一个   " Server "   对象 ， 它 是 管理器 在 后台 控制 的 真实 的 服务
3.4   版后 已 移除 :   The   import   machinery   now   directly   performs   all   the   functionality   provided   by   this   function .
设置 此 处理程序 的 目标 处理程序
Python 中 的 静态方法 与 Java 或 C   ++ 中 的 静态方法 类似
dest   将 被 用于 保存 子 命令 名称 的 属性 名 ； 默认 为   " None "   即 不 保存 任何 值
解码   Ascii85   编码 过 的   bytes   like   object   或   ASCII   字符串   s   并 返回 解码 过 的   " bytes "
对于 支持   " round ( ) "   的 内置 类型 ， 值会 被 舍入 到 最 接近 的   10   的 负   ndigits   次 幂 的 倍数 ； 如果 与 两个 倍数 的 距离 相等 ， 则 选择 偶数   ( 因此 ，   " round ( 0.5 ) "   和   " round (   0.5 ) "   均 为   " 0 "   而   " round ( 1.5 ) "   为   " 2 " )
list   可以 是 迭代 对象 ， 比如 一个 Python 列表 ， 或者 一个   " UserList "   对象
ZIP   标志 位
编写 安装 脚本
变 长 数据类型
安装 路径
如果 该 信息 的 负载 是 一个 子   " EmailMessage "   对象 列表 ， 返回   " True "   ；   否则 返回   " False "
字符串 表示
子 类化   Repr   对象
" dbm . dumb "   便携式   DBM   实现
" " : " "   的 权 标值
函数   " bind _ textdomain _ codeset ( ) " ， 方法   " output _ charset ( ) "   和   " set _ output _ charset ( ) " ， 以及 函数   " translation ( ) "   和   " install ( ) "   的   codeset   形参 也 已 被 弃用 ， 因为 它们 仅 适用 于   " l   gettext ( ) "   函数
Screen   和   Turtle   类 的 公用 方法 以 文档 字符串 提供 了 详细 的 文档
将 SQLite   值 转换 为 自定义 Python   类型
" itertools "   为 高效 循环 而 创建 迭代 器 的 函数
用户 自定义 异常
以 字节 表示 的 大小
一个 提供 对 可 写 、 不可 查找 的   " RawIOBase "   原始 二进制 流 的 高层 级 访问 的 缓冲 二进制 流
文件 必须 为 可 写 的   binary   file
PEP   327 :   十进制 数据类型
它 将 直接 被 传递 给   " Popen " .
3.3   新版 功能 .
（ 由   Inada   Naoki   在   bpo   34538   中 贡献 。 ）
标准 警告 类别
泛型 编解码器 基本 编码   API
工厂 函数 必须 使用 函数 所 需要 的 结果 类型 和 参数 类型 来 调用 ， 并 可 被 用作 装饰 器 工厂 函数 ， 在 此 情况 下 可以 通过   " @ wrapper "   语法 应用 于 函数
文件 必须 为 可读 的   binary   file
对 Python   语言 核心 进行 的 小 改动 ：
PEP   506   Secrets 模块 被 加入 Python 标准 库   PEP   由   Steven   D ' Aprano   撰写 并 实现
其余 的   Future   会 被 取消
性能
返回 一个 没有 特征 的 新 对象
该 函数 通过   " site "   模块 加入 到 内置 命名 空间
测试
在   3.3   版 更改 :   命令行 选项   "   g "   已经 移除
一个   loader   的 抽象 基类 ， 它 实现 了 可选 的   PEP   302   协议 用于 从 存储 后 端 加载 任意 资源
Python   3.6 . 3   正式版
DefaultCookiePolicy   对象
指明 要 写入 到 音频文件 的 帧 数
该类 实现 了   " random "   模块 所用 的 默认 伪 随机数 生成器
请 注意 在 此 情况 下   " j1   j2 "
在 第一个 星期日 之前 的 新年 中   的 所有 日子 都 被 认为 是 在 第 0 周
异常
如果 对象 有 一个 名为   " __ dir __ ( ) "   的 方法 ， 那么 该 方法 将 被 调用 ， 并且 必须 返回 一个 属性 列表
另 参见   argument   术语表 条目 、 参数 与 形参 的 区别 中 的 常见问题 、   " inspect . Parameter "   类 、 函数 定义 一节 以及   PEP   362
PEP   352 :   异常 作为 新型 的 类
当 程序 无法 工作 的 时候 ， 每个 函数 都 是 一个 可以 检查数据 是否 正确 的 接入点
改变 屏幕 的 显示 以 反映 行 缓冲区 的 当前 内容
示例 :
注释 :
对于 自身 可变 或者 包含 可变 项 的 集合 对象 ， 开发者 有时 会 需要 生成 其 副本 用于 改变 操作 ， 进而 避免 改变 原 对象
封存 类 实例
和   " st2tuple ( st ,   line _ info ,   col _ info ) "   相同
" runpy . run _ module ( ) "   Python   代码 可以 直接 使用 的 等效 功能
对应 的 模块 头文件 提供 了 宏来 管理 导入 模块 和 获取 C   API 指针 ； 客户端 模块 只 需要 在 访问 C   API 前 调用 这个 宏 即可
构建
交互 模式
相关 特性
" del "   语句 的 目标 也 被 视作 一种 绑定 （ 虽然 其 实际 语义 为 解除 名称 绑定 ）
不 包括 标记 为 从   repr   中 排除 的 字 段
您 不 需要 成为 管理员 （ 除非 需要 对 C 运行库 进行 系统 更新 ， 或者 为 所有 用户 安装 适用 于 Windows 的 Python 启动器   ）
在   3.1   版 更改 :   返回 一个   " OrderedDict "   而 不是   " dict "
请参阅   complex   arrays   来 了解 如何 从 这样 一个 数组 中 访问 元素
" sndhdr "   推测 声音文件 的 类型
写入 是否 要 立即 传给 下层 的 二进制 缓冲
" collections . abc . MutableMapping "   的 泛型 版本
该 警告 会 建议 用户 改用 相等 性 检测   ( "   "   and   " !   " )
用于 访问 库 的 系统 句柄
这个 方法 只 可以 被 调用 一次 并且 不能 在 调用   " Future . set _ result ( ) "   或   " Future . set _ exception ( ) "   之后 再 调用
这些 参数 作为 列表 存储 在   " sys "   模块 的   argv   属性 中
由于 有些 代码 在   Linux ， Windows   或   Mac   OS   X   下 的 表现 不同 ， 这些 代码 会 在   doctest   中 包含 相关 的 指令 注解
参见 :
_ class   和   policy   参数 与   " Parser "   类 的 构造函数 的 参数 含义 一致
path   指定 一个 要 提取 到 的 不同 目录
对象 具有 个性 ， 多个 名称 （ 在 多个 作用域 内 ） 可以 绑定 到 同一个 对象
这个 示例 就是 上面 所 描述 的   " copytree ( ) "   函数 的 实现 ， 其中 省略 了 文档 字符串
" x   <   y "   和   " y   >   x "
如果 之后 生成器 函数 正常 退出 、 关闭 或 引发   " GeneratorExit "   ( 由于 未 捕获 该 异常 )   则 关闭 并 返回 其 调用者
返回 当前 上下文 中此 上下文 变量 的 值
如果 此 窗口 没有 父 窗口 则 返回   " (   1 ,   1 ) "
注解 :
直接 执行 此 操作 效率   （ 稍微 ） 高 一些
" object "   中 无效 数据 的 末尾 位置 索引 （ 不 含 ）
3.7   新版 功能 .
PIL   风格 ： 形状 ， 步幅 和子 偏移量
模式 对 测试 加载 器 导入 的 测试方法 全名 进行 匹配
效果 就 像 这样 ：
ctypes   参考手册
3.4   新版 功能 :   short _ empty _ elements   形参
支持 以下 关键字 参数
最 外面 的 作用域 （ 最后 搜索 ） 是 包含 内置 名称 的 命名 空间
如果 你 的 类 在 逻辑 上 是 不可 变 的 但 实际 仍然 可变 ，   则 可能 就是 这种 情况
对 枚举 成员 及其 属性 的 程序化 访问
当 尝试 解析 一个 不带节 标头 的 文件 时 引发 的 异常
概述
使用 pip 管理 包
在   Unix   上 ， 开头 的   " ~ "   会 被 环境变量   " HOME "   代替 ， 如果 变量 未 设置 ， 则 通过 内置 模块   " pwd "   在   password   目录 中 查找 当前 用户 的 主目录
一旦 创建 ， 应该 及时 调用   " start ( ) "   或者   " get _ server ( ) . serve _ forever ( ) "   以 确保 管理器 对象 对应 的 管理 进程 已经 启动
3.5   新版 功能 .
如果 在 进入 时 内部 计数器 的 值 为 零 ， 则 将 会 阻塞 直到 被 对   " release ( ) "   的 调用 唤醒
就 像是 Python 列表 类型 ， 拥有 C   API 允许 扩展 模块 来 创建 和 维护 列表 ， 这个 新 的 集合 类型 可以 有 一堆 C 函数 用于 给 其他 扩展 模块 直接 使用
首先 ， 我们 将 定义 一个 转换器 函数 ， 它 接受 这样 的 字符串 作为 形参 并 根据 该 参数 构造 一个   " Point "   对象
它 是 不带 参数 调用   Python   可 调用 对象 最 有效率 的 方式
它 可以 用于 检查   、 绕过 缓存 ， 或 使用 不同 的 缓存 再次 装饰 原始 函数
从   " TarFile "   对象   tarfile   读取 下 一个 成员 并 将 其 作为   " TarInfo "   对象 返回
StreamReader   对象   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
首先 ， 这 不是 C 标准 特性 ， 因此 不能 移植
操作 完成 后   " date2   date1   timedelta . days "
如果 指定 了 一个 对象 但 它 没有   " __ dict __ "   属性 （ 例如 ， 当 它 所属 的 类 定义 了   " __ slots __ "   属性 时 ） 则 会 引发   " TypeError "   异常
在   3.3   版 更改 :   新 的 接口 提供 的 解码 函数 现在 已经 支持 只 包含   ASCII   的   Unicode   字符串
参见 :
或 直接 从 字符串 中 解析 ：
其他 语言 特性 修改
( 默认 :   " None " )   如果 不 为   " None " ， 则 输出 内容 将 最 多 包含   max _ lines   行 ， 并 使   placeholder   出现 在 输出 内容 的 末尾
3.6   新版 功能 .
这 类似 于   " sorted ( iterable ) " ， 但 与   " sorted ( ) "   不同 的 是 这个 实现 是 不 稳定 的
记录器 对象
保留 给   Jython   使用
基类
返回 当前 设置 的 每星期 的 第一天 的 数值
" Py _ UCS1 " ,   " Py _ UCS2 " ,   " Py _ UCS4 "   类型
仅当 计时器 仍 处于 等待 状态 时 有效
为 SIGINT 和 SIGTERM 设置 信号处理器
Macro   name   C 数据类型   T _ SHORT   short   T _ INT   int   T _ LONG   长 整型   T _ FLOAT   float   T _ DOUBLE   double   T _ STRING   const   char   T _ OBJECT   PyObject   T _ OBJECT _ EX   PyObject   T _ CHAR   char   T _ BYTE   char   T _ UBYTE   unsigned   char   T _ UINT   无 符号 整型   T _ USHORT   unsigned   short   T _ ULONG   无 符号长 整型   T _ BOOL   char   T _ LONGLONG   long   long   T _ ULONGLONG   无 符号   long   long   T _ PYSSIZET   Py _ ssize _ t
序列 协议
这 与   Dershowitz   和   Reingold   的 书   " 历法 计算 "   中 所有 计算 的 基本 日历   " proleptic   Gregorian "   日历 的 定义 相符合
使用   " time "   对象 的 例子 :
等价 于
ZIP 文件格式 不 支持 1980 年 以前 的 时间 戳
恰好 返回   10 ， 因为 这是   Decimal   对象   : )
添加 了   " os . pidfd _ open ( ) "   以 允许 不带 竞争 和 信号 的 进程 管理
3.5   新版 功能 :   拆包 到 字典 显示 ， 最初 由   PEP   448   提出
准确 来说 ， 此 方法 返回 的 是   " get _ content _ type ( ) "   方法 所 返回 的 形如   maintype / subtype   的 字符串 当中 的   subtype   部分
表示 性 错误
[   脚注   ]
" queue "   一个 同步 的 队列 类
请求 零 字节 可能 返回 一个 独特 的 非   " NULL "   指针 ， 就 像 调用 了   " PyMem _ RawCalloc ( 1 ,   1 ) "   一样
PEP   3147   PYC   仓库 目录
添加 了 新 的   coroutine   " asyncio . to _ thread ( ) "
它 可以 用来 高效 压缩 一系列 拥有 相同 前缀 的 数据
有些 内置 类型 属于 具名 元组 ， 包括   " time . localtime ( ) "   和   " os . stat ( ) "   的 返回值
有关 教程 ， 请参阅
如果 没有 立即 可用 的 空闲 槽 ， 引发   " QueueFull "   异常
这 允许 快速 体验 具有 最高 层级   " await "   的 代码
最后 ， 末尾 行使 得   " Foo "   成为   " MyIterable "   的 一个 虚 子类 ， 即使 它 没有 定义   " __ iter __ ( ) "   方法 （ 它 使用 了 以   " __ len __ ( ) "   和   " __ getitem __ ( ) "   术语 定义 的 旧式 可 迭代 对象 协议 ）
其他 系统 信息
这个 规格 说明 总是 包含 “ 加载 器 ” 集合 （ 但 有 一个 例外 ）
其中 还 包含 支持   xz   工具 所 使用 的   " . xz "   和 旧式   " . lzma "   文件格式 的 文件 接口 ， 以及 相应 的 原始 压缩 数据流
Writer   对象
关联 到   pgen   的 头文件 和 函数 在 其 被 纯   Python   实现 取代 后 已 被 移除
在 第二个 调用 中 ，   object   参数 将 为   " NULL " ; 因此 ， 该 参数 将 为   " NULL " ;   因此 ， 该 参数 将 为   " NULL " ， 因此 ， 该 参数 将 为   " NULL ` ` （ 如果 值 ） 为   ` ` NULL "   address   的 值 与 原始 呼叫 中 的 值 相同
这是 其他 标准 警告 类别 的 基类
返回 片段 中 所有 采样 值 的 平均 峰峰 值
如果   object _ hook   也 被 定义 ，   object _ pairs _ hook   优先
注解 :
" set _ defaults ( ) "   则 允许 加入 一些 无须 任何 命令行 检查 的 额外 属性 :
设置 或 返回 以 毫秒 数 表示 的 延迟 值   delay
Esc   键 现在 会 关闭   IDLE   补全 提示 窗口
最大 密钥 长度
在 加载 器 执行 模块 代码 之前 ， 该 模块 将 存在 于   " sys . modules "   中
回调 函数
成功 时 返回 一个 以 字符串   v   的 副本 为值 且 长度 为   len   的 新 字节 串 对象   ， 失败 时 返回   " NULL "
读取   " robots . txt "   URL   并 将 其 输入 解析器
3.9   版后 已 移除 :   " collections . abc . Awaitable "   now   supports   " [ ] "
该值 将 由   " len ( ) "   返回
方法
它 的 基本 用法 包括 成员 检测 和 消除 重复 元素
3.4   新版 功能 .
新增 模块
移植 到   Python   2.4
指针 对象 也 可以 通过 整数 下标 进行 访问 :
不 保证 不会 在 Python 版本 之间 添加 、 删除 或 更改 字节 码
使用 定制 的 启动器 ， 没有 明显 的 迹象 表明 程序 是 在 Python 上 运行 的 ： 图标 可以 定制 ， 公司 和 版本信息 可以 指定 ， 文件 关联 可以 正常 运行
关联 的 值 是 一个 字符串 ， 指明 是 哪种 （ 内部 ） 操作 耗尽 了 内存
源代码 :   Lib / tkinter / ttk . py
此 生成器 函数 使用 代码 对象   code   的   " co _ firstlineno "   和   " co _ lnotab "   属性 来 查找 源代码 中行 开头 的 偏移量
计时器 已 到期
两个 字符串 相除 所 引发 的   " TypeError "   不会 由   " except "   子句 处理 ， 因此 会 在   " finally "   子句 执行 后 被 重新 引发
例如 ，   " getpass "   模块 在 实现   " getpass ( ) "   函数 时 使用 了 这些 函数
注解 :
如果 表达式 为 真置   " 1 " ， 假则 置   " 0 "
如果 这些 属性 有 零 或 多个 （ 用 星号 标记 ） ， 对应 值会用 Python 的 列表 来 表示
" normal " :   6   正常
Poll   对象
仅 在   " cProfile "   可用
如果 未 发现 加载 器 ， 则 返回   " None "
_ name   是 字段名 ，   _ value   是 字 段 主值
3.1   新版 功能 .
否则 会 将   " NULL "   和 属性 查找 所 返回 的 对象 推入 栈顶
可选 的   mode   参数 是 文件 的   Unix   模式 ， 仅 在 要 创建 数据库 时才 会 被 使用
在 C / C++ 语言 中 ， 程序员 负责 动态分配 和 回收 堆 ( heap ) 当中 的 内存
参见 :   Documentation   for   the   " weakref "   module .
不过 也 可能 产生 某些 副作用 ， 例如 导入 父包 和 更新 各种 缓存   ( 包括   " sys . modules " ) ， 只有   " import "   语句 会 执行 名称 绑定 操作
如果 消息 为 非   " multipart "   或   " multipart / related " ，   则 先 调用   " make _ alternative ( ) "   然后 再 继续 上述 步骤
这一 默认值 几乎 总是 可取 的 ， 因为 它 将 使 帮助 消息 与 从 命令行 调用 此 程序 的 方式 相匹配
在   3.5   版 更改 :   输出 现在 将 与 输入 顺序 保持一致
请参阅 配置 库 的 日志 记录 了解 有关 如何 使用   " NullHandler "   的 更 多 信息
结构 序列 对象 是 等价 于   " namedtuple ( ) "   的   C   对象 ， 即 一个 序列 ， 其中 的 条目 也 可以 通过 属性 访问
结果 可能 如下 所示 ：
该 函数 几乎 与   " strncmp ( ) "   的 工作 方式 相同 ， 只是 它 忽略 了 大小写
假设 一辆车 在   40   km / hr   的 速度 下 行驶 了   10   km   ， 然后 又 以   60   km / hr   的 速度 行驶 了   10   km
在 第一行 被 读取 之前 ， 返回   " 0 "
结构 体 / 联合 字 段 对齐 及 字节 顺序
可执行文件 的 名字
0.30   版 :   添加 了 有关   " functional "   模块 的 小节 ， 由   Collin   Winter   撰写 ； 添加 了 有关   operator   模块 的 简短 小节 ； 其他 少量 修改
空行 ， 以及
示例
提供 了   " __ hash __ ( ) "   方法 的 抽象 基类
文件 压缩 和 解压
其他 运算 ， 例如 相除 和 非 整数 相乘 则 将 会 改变 小数位 数 ， 需要 再 加上   " quantize ( ) "   处理 步骤 ：
MultiCall   对象
" ' namereplace ' "   （ 也 只 在 编写 时 支持 ） 用   " \ N { ... } "   转义序列 替换 不 支持 的 字符
剩余 参数 是 各个 变量 的 地址 ， 类型 要 与 格式 字符串 对应
bpo   41468 :   改进 IDIE 运行 错误信息   ( 也许 用户 永远 都 看不到 ) .
注解 :
类似 于   " CHECKED _ HASH " ， " . pyc "   文件 包括 源文件 内容 的 哈希 值
data   形参 将 包含 整个 处理 指令
如果   line _ buffering   为   " True " ， 则 当 一个 写入 调用 包含 换行符 或 回车 时 将 会 应用   " flush ( ) "
AbstractDigestAuthHandler   对象
会 向   master _ read   回调 传入 伪 终端 的 主 文件 描述符 以 从子 进程 读取 输出 ，   而 向   stdin _ read   传入 文件 描述符   0   以 从父 进程 的 标准 输入 读取数据
以 元组 形式 存放 的 UUID 的 6 个 整数 域 ， 有 六个 单独 的 属性 和 两个 派生 属性 ：
波浪 号 扩展 不会 生效 ， 但   "   " ,   " ? "   以及 表示 为   " [ ] "   的 字符 范围 将 被 正确 地 匹配
例如 ， 以下 输出 来自 在 命令行 运行   " python   demo . py   one   two   three "
" dis "   模块 还 定义 了 以下 分析 函数 ， 它们 将 输入 直接 转换 为 所 需 的 输出
如果 你 有 一个 枚举 成员 并且 需要 它 的   " name "   或   " value " :
模块   " binhex "   支持 在   Macintosh   上 使用 的   binhex   格式
If   you   need   to   parse   untrusted   or   unauthenticated   data   see   XML   漏洞 .
对空 的   " Queue "   对象 ， 调用 非 阻塞 的   " get ( ) "   ( or   " get _ nowait ( ) " )   时 ，   引发 的 异常
可以 动态 地 在 对象 中 添加 或 删除 成员 属性
帮助 和 偏好
[ 1 ]   当 一个 函数调用 另外 一个 函数 时 ， 将会 为 该 调用 创建 一个 新 的 本地 符号表
当 这 两个 数 使用 不同 的 扩展 模块 时 ， 这 其中 的 差异 是 很 微妙 的
描述 日志 记录 配置 需要 列出 要 创建 的 不同 对象 及 它们 之间 的 连接 ； 例如 ， 你 可以 创建 一个 名为   ' console '   的 处理程序 ， 然后 名为   ' startup '   的 日志 记录器 将 可以 把 它 的 消息 发送给   ' console '   处理程序
如果 一个 模块 使用   " from "   ...   " import "   ...   导入 的 对象 来自 另外 一个 模块   ， 给 其它 模块 调用   " reload ( ) "   不会 重新 定义 来自 这个 模块 的 对象   — —   解决 这个 问题 的 一种 方式 是 重新 执行   " from "   语句 ， 另 一种 方式 是 使用   " import "   和 限定 名称 (   module . name   ) 来 代替
已弃 用 的   Python   行为
如果 超时 到期 ， 子 进程 不会 被 杀死 ， 所以 为了 正确 清理 一个 行为 良好 的 应用程序 应该 杀死 子 进程 并 完成 通讯
32 位   64 位   " MAX _ PREC "   " 425000000 "   " 999999999999999999 "   " MAX _ EMAX "   " 425000000 "   " 999999999999999999 "   " MIN _ EMIN "   "   425000000 "   "   999999999999999999 "
编辑 窗口
在 着手 编写   Python   实现 的 时候 ， Guido   van   Rossum   同时 还 阅读 了 刚 出版 的   " Monty   Python   的 飞行 马戏团 "   剧本 ， 这是 一部 自   1970   年代 开始 播出 的   BBC   系列 喜剧
（ 由   Serhiy   Storchaka   在   bpo   23867 ,   bpo   35582   和   bpo   36127   中 贡献 。 ）
在   3.3   版 更改 :   添加 了 对   " lzma "   压缩 的 支持
如果 给定 的 脚本 名是   " '   ' "   ( 表示 标准 输入 ) ， " sys . argv [ 0 ] "   就是   " '   ' "
运算符   " not   in "   被 定义 为 具有 与   " in "   相反 的 逻辑值
将 运算符 映射 到 函数
创建 一个 空   Shape   对象 ， 类型 为   " compound "
在   " struct "   模块 样式 语法 中   NUL   字符串 ， 描述 单个 项 的 内容
在   3.6   版 更改 :   接受 一个 类 路径 对象
函数 和 异常
例如 ， 混合 数值 类型 是 通过 他们 的 数值 进行 比较 的 ， 所以   0   等于   0.0 ， 等等
ZIP   文件格式 规范 包括 自   2001   年 以来 对   bzip2   压缩 的 支持 ， 以及 自   2006   年 以来 对   LZMA   压缩 的 支持
帮助 源
ElementTree   对象
返回 按 名称 排序 的 归档 成员 列表
( 这 是因为 它会 假设 过滤 级别 总是 在 队列 的 另一侧 去 设置 的 。 )   从   Python   3.5   开始 ， 可以 通过 在 监听器 构造函数 中 添加 一个 参数   " respect _ handler _ level   True "   改变 这种 情况
协程 工具 函数
由于   command   参数 必须 是 标识符 ， 因此 要 获取   " ! "   的 帮助 必须 输入   " help   exec "
" eq "   ： 如果 为 true （ 默认值 ） ， 将 生成   " __ eq __ ( ) "   方法
3.6 . 1   新版 功能 .
自定义 默认 的 Python 版本   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
注释 :
若   " Request "   使用 代理 ， 选择器 将会 是 传给 代理 的 完整   URL
打印   a   与   b   及 共同 直接 子目录 的 比较 结果
成功 则 返回 ` ` 0 ` `   ， 失败 则 返回 ` `   1 ` `
元组 和 序列
bpo   41910 :   记录   " object .__ eq __ "   的 默认 实现
推送   ch   以便 让 下 一个   " get _ wch ( ) "   返回 该 字符
警告 :
errors   是 一个 可选 的 字符串 ， 它 指明 编码 格式 和 编码 格式 错误 的 处理 方式
此 模块 支持 定义 在   RFC   3548   中 的 所有   base   64   字母表   （ 普通 的 、   URL   安全 的 和 文件系统 安全 的 ）
在   3.6   版 更改 :   允许 在 字 面值 中 使用 下划线 进行 分组
用于 查找 双字 的 正则表达式 ，   " \ b ( \ w + ) \ s + \ 1 \ b "   也 可以 写为   " \ b ( ? P < word > \ w + ) \ s + ( ? P   word ) \ b " :
在 下面 的 示例 中 ， 使用 未 舍入 的 输入 意味着 在 总和 中 添加 零会 改变 结果 ：
更 详细 地 输出 结果
有关 完整 的 详细信息 和 当前 状态 ， 请参阅   PEP   275
最 简单 的 类 定义 看起来 像 这样 :
" UseSTD3ASCIIRules "   预设 为 假值
（ 由   Pablo   Galindo ,   Tim   Peters   和   Larry   Hastings   在   bpo   17005   中 贡献 。 ）
如果   iterable   的 任一 元素 为 真值 则 返回   " True "
在   Windows   上将 参数 列表 转换 为 一个 字符串
限制 全局变量
这个 方法 会 将 可 迭代 对象 分割 为 许多块 ， 然后 提交 给 进程 池
" ' r : gz ' "   打开 和 读取 使用 gzip   压缩
这是 完整 的 模块   API   参考 — 若 要 查看 概述 ， 请 见   ipaddress 模块 介绍 .
打印消息 对象 结构 的 内容 类型 的 缩进 表示 形式
3.7   新版 功能 .
在 更 大 的 应用程序 中 嵌入   CPython   运行 时
这 可以 通过 将   recursive   设 为   " False "   来 避免
此 行为 可 通过 三种 方式 来 配置 :
这篇 文档 只有 在   https : / / setuptools . readthedocs . io / en / latest / setuptools . html   上 的   " setuptools "   文档 独立 涵盖 此处 包含 的 所有 相关 信息 之前 ， 才 会 单独 保留
将 输出 ：
在   kwargs   中 会 检查 四个 关键字 参数 ：   exc _ info   ，   stack _ info   ，   stacklevel   和   extra
也就是说 ， 这 三种   " dataclass ( ) "   用法 是 等价 的 :
此 函数 的 形参 将 被 继续 传递 给   " FileInput "   类 的 构造 器
如果 协程 被 一个 异常 终止 ， 这 将 返回 回溯 框架 列表
进程 管理
是否 有能 帮助 寻找 漏洞 或 执行 静态 分析 的 工具 ？
如果   p   是   " NULL " ,   那么 什么 操作 也 不会 进行
每次 访问 对象 的 内容 都 会 构造 一个 新 的   Python   对象
使用 二进制 数据 记录 格式
由于 使用   " open ( ) "   来 读取   CSV   文件 ， 因此 默认 情况 下 ， 将 使用 系统 默认 编码 来 解码 文件 并 转换 为   unicode （ 请参阅   " locale . getpreferredencoding ( ) " ）
3.7   新版 功能 .
如果 该 对象 不 为   " bytearray "   对象 则 会 引发   " TypeError "
弹出 并 返回   heap   中 最小 的 一项 ， 同时 推入 新 的   item
如何 找到 对象 的 方法 或 属性 ？
" NormalDist "   适合 用来 解决 经典 概率 问题
移植 到   Python   3.3
它 可以 为   " None " ,   " ' ' " ,   " ' \ n ' " ,   " ' \ r ' "   和   " ' \ r \ n ' "
源代码 ：   Lib / enum . py
有关 此类 调用 的 完整 描述 ， 请参阅   termios ( 3 )   Unix   指南 页
" BlockingIOError "   会 在 下层 原始 流 不 处于 阻塞 模式 ， 并且 当前 没有 可用 数据 时 被 引发
即使 语句 或 表达式 在 语法 上 是 正确 的 ， 但 在 尝试 执行 时 ， 它 仍 可能 会 引发 错误
对于 需要 精确 十进制 表示 的 使用 场景 ， 请 尝试 使用   " decimal "   模块 ， 该 模块 实现 了 适合 会计 应用 和 高精度 应用 的 十进制 运算
条 目的 典型 模式 是 一个 以下 形式 的 元组 ：   " ( priority _ number ,   data ) "
得到 该 数字 的 虚数 部分
调度 可 调用 对象   fn   ， 以   " fn (   args   kwargs ) "   方式 执行 并 返回   " Future "   对象 代表 可 调用 对象 的 执行
[   脚注   ]
通过 下列 常量 可 获取 模块 所 使用 的   zlib   库 的 版本信息 ：
或者 在 一个 类 实例 中 捆绑 值 :
详情
目前 可用 的 模式 如下 :
标准 异常
Dispatch   表
除   " SystemExit "   （ 允许 传播 ） 以外 的 所有 异常 都 会 被 捕获
因此 ，   " logging . getLogger ( ' abc ' ) . getChild ( ' def . ghi ' ) "   与   " logging . getLogger ( ' abc . def . ghi ' ) "   将 返回 相同 的 记录器
它们 执行 操作 ， 并 将 结果 放 回 堆栈
" http "   是 一个包 ， 它 收集 了 多个 用于 处理 超文本 传输 协议 的 模块 :
3.3   版后 已 移除 :   3.11 " Py _ UNICODE "   is   deprecated   since   Python   3.3
type   alias   类型 别名 一个 类型 的 同义词 ， 创建 方式 是 把 类型 赋值 给 特定 的 标识符
菜谱 式 说明
解包 双 精度 浮点数 ， 类似 于   " unpack _ float ( ) "
它们 的 尾数 取值 来自   2 ⁵ ²   ≤   尾数   <   2 ⁵ ³   范围 内 整数 的 均匀分布
所得 的 对象 必须 拼接 在 上 一次 调用   " compress ( ) "   方法 所得 数据 的 后面
分组
某些 系统 ， 重要 的 一点 是   Windows   系统 也 包括 在内 ， 并 没有 可用 的   IANA   数据库 ， 因此 对于 要 保证 获取 时 区 信息 的 跨平台 兼容性 的 项目 ， 推荐 对   tzdata   声明 依赖
杂项
因此 ， 每个 Python 版本 都 需要 重新 编译 扩展 模块 （ 即使 在 未 使用 任何 受 影响 的 接口 的 情况 下 ， Unix 上 也 可能 会 出现异常 ）
当   o1   支持 时 ， 这个 运算 直接 使用 它 储存 结果
序列 对象
此 选项 仅 对 整数 、 浮点 、 复数 和   Decimal   类型 有效
工具 / 示例
" code "   解释器 基类
如果 服务器 反馈 了 一个 我们 不 理解 的   HTTP   状态 码 就 会 被 引发
如果   master _ read   发出   EOF   信号 则 会 有 相同 的 行为 结果 （ 至少 是 在   Linux   上 ）
当 在 未 锁定 的 锁上 发起 调用 时 ， 会 引发   " RuntimeError "
当可选 的   unixfrom   为 真值 时 ， 返回 的 字符串 会 包含 信封 标头
" ContextVar "   类 用于 声明 上下文 变量 并 与其 一起 使用
库
字节 对象
在 一般 情况 下 ， 总 运行 时间 是 总 字符串 长度 的 二次方
可 选 参数   a   和   b   为 要 比较 的 序列 ； 两者 默认 为空 字符串
它 通过   " loop . create _ connection ( ) " ,   " loop . create _ unix _ connection ( ) " ,   " loop . connect _ write _ pipe ( ) "   等 方法 返回
这 等同于 Python 表达式   " key   in   p "
停止 监听器
构建 和   C   API   的 改变
Python 程序员 可以 通过   " tkinter "   包 和 它 的 扩展 ，   " tkinter . tix "   模块 和   " tkinter . ttk "   模块 ， 来 使用 这套 鲁棒 的 、 平台 无关 的 窗口 工具集
成功 时 返回 结果 ， 在 失败 时 抛出 一个 异常 并 返回   NULL
在   3.6   版 更改 :   由   " offset   timedelta ( 0 ) "   生成 的 名称 现在 为 简单 的   ' UTC '   而 不再 是   " ' UTC + 00 : 00 ' "
offeset   必须 是   " ALLOCATIONGRANULARITY "   的 倍数
Python   3.7 . 2   中 的 重要 变化
如果   rename   为 真 ，   无效 字段名 会 自动 转换成 位置 名
因此 ， " Py _ BuildValue ( ) "   将 返回   " NULL " ， 但 不会 引发 异常
" turtle "   海龟 绘图
构建
" imghdr "   推测 图像 类型
配置 数据源
" shutil . copytree ( ) "   现在 接受 新 的   " dirs _ exist _ ok "   关键字 参数
如果 提供 了   msg   ， 将会 调用   " update ( msg ) "   方法
新 的 函数   " typing . get _ origin ( ) "   和   " typing . get _ args ( ) "
" weakref "   弱 引用
"   3 "   创建 了 对 长度 为 二 的 同一 列表 的   3   个 引用
在   3.9   版 更改 :   The   timeout   parameter   was   added .
对 标注 返回 类型 比较 有用
当 变量 有值 时 ， 为什么 会 出现 UnboundLocalError ？
内存 接口
Python   的 一个 特殊 规定 是 这样 的 如果 不 存在 生效 的   " global "   或   " nonlocal "   语句 则 对 名称 的 赋值 总是 会 进入 最 内层 作用域
核心 与 内置
进阶 教程
扩展 / 嵌入 更改
Turtle   方法
注解 :
表达式
要 查看 平台 支持 的 完整 格式 代码 集 ， 请参阅   strftime ( 3 )   文档
数据 属性 可以 被 方法 以及 一个 对象 的 普通用户 （ “ 客户端 ” ） 所 引用
如上所述 ， 与 早期 的 2 . x 版本 相比 ， 2.7 版本 的 维护 时间 更长
在 上述 的 类 之外 ， 还有 一些 模块 层级 的 函数
在 打包 时 将 会 使用 参数 对象 的 逻辑值
在   Python   的 字符串 文字 中   ， " \ b "   是 退格 字符 ， ASCII   值为 8
注解 :
3.9   版后 已 移除 :   在 将来 ，   seed   必须 是 下列 类型 之一 :   " NoneType " ,   " int " ,   " float " ,   " str " ,   " bytes "   或   " bytearray "
演示 脚本 清单 如下 :
https : / / en . opensuse . org / Portal : Packaging   对于 OpenSuse 用户
对   list   中 的 条目 进行 原地 反转
失败 时 引发   " OSError "
epilogue   属性 的 作用 方式 与   preamble   相同 ， 区别 在于 它 包含 在 最后 一个 分界 及 消息 结尾 之间 出现 的 文本
返回 一个 绝对路径 ， 这个 路径 指向 的 文件 在 调用 本 方法 时 不 存在
" time "   时间 的 访问 和 转换
这是 一个   C   预处理 宏 ，   p   总是 被 重新 赋值
可 选 参数   globals   和   locals   指定 代码执行 环境 ， 默认 时 使用   " __ main __ "   模块 的 字典
字节   位数 （ 大 端 字节 序 ）   意义   " 1 "   " 1   8 "   " PY _ MAJOR _ VERSION "   （ " 3.4 . 1a2 "   中 的   " 3 "   ）   " 2 "   " 9   16 "   " PY _ MINOR _ VERSION "   （ " 3.4 . 1a2 "   中 的   " 4 "   ）   " 3 "   " 17   24 "   " PY _ MICRO _ VERSION "   （ " 3.4 . 1a2 "   中 的   " 1 "   ）   " 4 "   " 25   28 "   " PY _ RELEASE _ LEVEL "   ( " 0xA "   是   alpha 版本 ,   " 0xB "   是   beta 版本 ,   " 0xC "   发布 的 候选 版本 并且   " 0xF "   是 最终   版本 ) ， 在 这个 例子 中 这个 版本 是 alpha 版本
这些 字符 将 可 被 显示 或 是从 剪贴板 复制 和 粘贴
只读 且 可变 的 序列   sequences   的 抽象 基类
如果 你 在 某处 运行 了 一个 熵 收集 守护 程序 （ EGD ） ， 且   path   是 向 其 打开 的 套 接字 连接 路径名 ， 此 函数 将 从 该 套 接字 读取   256   个 字节 的 随机性 数据 ， 并 将 其 添加 到   SSL   伪 随机数 生成器 以 增加 所 生成 密钥 的 安全性
无此 设备
如果   n   不是   Python   中 的 整数   int   类型 ， 就 先 通过   " PyNumber _ Index ( ) "   将 它 转换成 整数 类型
为 异步 生成器 类 提供 的 抽象 基类 ， 这些 类 实现 了 定义 在   PEP   525   和   PEP   492   里 的 协议
之前 使用   " RTLD _ LOCAL "   已经 不 可能 加载 未 链接 到   " libpython "   的   C   扩展 了 ， 例如 通过   " Modules / Setup "   的   "   shared   "   部分 构建 的 标准 库   C   扩展
构建
在   3.3   版 更改 :   以前 是 引发   " WindowsError "
此 行为 的 目的 是 使得   " tzinfo "   方法 将   dt   解读 为 本地 时间 ， 而 不 需要 担心 其他 时区 的 相关 对象
正常 情况 下 ， 当 你 向   " ArgumentParser "   的   " parse _ args ( ) "   方法 传入 一个 无效 的 参数 列表 时 ， 它 将 会 退出 并 发出 错误信息
将   " ' ( ) ' "   用作 特殊 键 是因为 它 不是 一个 有效 的 关键 字形 参 名称 ， 这样 就 不会 与 调用 中 使用 的 关键字 参数 发生冲突
从文件 载入 快照
在 运行 时 ， 任意 值均 可 作为   " Literal [ ... ] "   的 类型 参数 ， 但 类型 检查 器 可以 施加 额外 限制
" logging . handlers "   日志 处理程序
如何 将 可选 参数 或 关键字 参数 从 一个 函数 传递 到 另 一个 函数 ？
该 函数调用 时会 传入   anything   ( 应 与   " void   "   兼容 )   作为 参数 并且 应当 返回 一个 “ 新 的 ” Python   对象 ， 或者 当 发生 错误 时 返回   " NULL "
使用   key   作为 键 将   val   插入 字典   p
如果 省略 了   filename   ， 它会 检查 缓存 中 的 所有 条目
从 某种意义 上 说 ， 对象 的 属性 集合 也 是 一种 命名 空间 的 形式
此外 ， 模块 还 提供 了 三种 预设 的 上下文 :
由于   arg _ name   不 使用 引号 分隔 ， 因此 无法 在 格式 字符串 中 指定 任意 的 字典 键   ( 例如 字符串   " ' 10 ' "   或   " ' :   ] ' " )
请参阅 维基百科 页面   half   precision   floating   point   format   了解 详情
" $ arg3 "   :   " int "   行号
" copyreg "   注册 配合   " pickle "   模块 使用 的 函数
在   3.4   版 更改 :   Added   signature   introspection   on   specced   and   autospecced   mock   objects .
在   3.7   版 更改 :   加入 键值 类形 参   context
Windows   下 ， 有些   dll   导出 的 函数 没有 函数 名 ， 而是 通过 其 顺序号 调用
第三个 形参   excinfo   将 是 由   " sys . exc _ info ( ) "   所 返回 的 异常 信息
返回 一个 新 的 窗口 ， 其 左上角 位于   " ( begin _ y ,   begin _ x ) " ， 并且 其 高度 / 宽度 为   nlines   /   ncols
当 Python 托管 在 另 一个 . exe （ 不同 的 目录 ， 通过 COM 嵌入 等 ） 时 ， 将 不会 推断出 “ Python   Home ” ， 因此 使用 了 来自 注册表 的 核心 路径
性能 优化
函数   " PyArg _ ParseTupleAndKeywords ( ) "   声明 如下 ：
在   3.8   版 更改 :   在   Windows   上 ，   path   现在 可以 是 一个 文件 或 目录
否则 ， 它们 会 在 执行 函数 定义 时 被 求值
文本文件 忙
这样 ， 将来 调用   " poll ( ) "   方法 时 将 检查 文件 描述符 是否 有 未 处理 的   I / O   事件
如果   globals   字典 存在 且 不 包含 以   " __ builtins __ "   为键 的 值 ，   则 会 在 解析   expression   之前 插入 以此 为键 的 对 内置 模块   " builtins "   的 引用
从 Python   3.8 开始 不 推荐 使用   bdist _ wininst
命令行 选项
如何 从 列表 中 删除 多个 项 ？
二进制 序列 类型   " bytes " ,   " bytearray " ,   " memoryview "
可 选 关键 字形 参   linejunk   和   charjunk   均 为 过滤 函数   ( 或 为   " None " )   ：
Smith   撰写 并 实现
通过 名称 而 不是 索引 访问 索引
现在 我们 已经 看 了 一些 简单 的 正则表达式 ， 我们 如何 在   Python   中 实际 使用 它们   ？   " re "   模块 提供 了 正则表达式 引擎 的 接口 ， 允许 你 将 正则 编译 为 对象 ， 然后 用 它们 进行 匹配
然而 ， 在 大多数 这 类 情况 下 ， 使用   " enumerate ( ) "   函数 比较 方便 ， 请 参见 循环 的 技巧
创建 当前 线程 上下文 的 浅 拷贝
3.2   新版 功能 .
在 多线程 环境 中以 安全 的 方式 任意 改变 对象 图 也许 会 导致 问题 ； 虽然 并非 不 可能 ， 但 这样 做 的 好处 不足以 抵销 其所 增加 的 实现 复杂度
新 的 接口 提供 ：
如果   delay   为 真值 ， 则 文件 打开 会 被 推迟 至 第一次 调用   " emit ( ) "
在 进程 之间 交换 对象
标志 是 粘性 的 ， 因此 用户 需要 在 监控 计算 之前 重置 它们
如果   Future   的 结果 还 不可 用 ， 此 方法 会 引发 一个   " InvalidStateError "   异常
设置 声道 数
详情 参见   bpo   13936
使用   " datetime . strptime ( date _ string ,   format ) "   等价 于 :
读取 并 返回 以   " bytes "   对象 表示 的 最 多   n   帧 音频
将   " __ aexit __ "   和   " __ aenter __ ( ) "   的 结果 推入 堆栈
可 选 参数值 默认 为   "   1 " ， 因此 默认 将 移除 并 返回 末尾 项
选项
私有 函数 :   " _ PyObject _ GC _ TRACK ( ) " ,   " _ PyObject _ GC _ UNTRACK ( ) " ,   " _ Py _ Dealloc ( ) "
十进制 浮点 对象 与 其他 内置 数值 类型 共享 许多 属性 ， 例如   " float "   和   " int "
考虑 到 从 一个 字符串 或 一个 文件 对象 中 创建 一个 消息 对象 是 非常 常见 的 任务 ， 我们 提供 了 四个 方便 的 函数
输出 以   16   为 基数 的 数字 ， 使用 大写字母 表示   9   以上 的 数码
省略值
输出 将 与 之前 相同 ， 但 不再 追加 进 日志 文件 ， 因此 早期 运行 的 消息 将 丢失
对应 于   " errno "   " EACCES "   和   " EPERM "
如果 对象 是 类型 或类 对象 ， 则 列表 包含 它们 的 属性 名称 ， 并且 递归 查找 所有 基类 的 属性
第三方 库 可以 以此 来 提供 动态创建 的 冻结 模块 集合
这个 微小 的   API   扩展 使得   " numerator ,   denominator   x . as _ integer _ ratio ( ) "   这样 的 写法 在 多种 数字 类型 上 通用 成为 可能
如果 任一 维度 的 尺寸 大于 当前 值 ， 则 窗口 的 数据 将 以 具有 合并 了 当前 背景 渲染 （ 由   " bkgdset ( ) "   设置 ） 的 空白 来 填充
基于   " os . stat ( ) "   的 结果 或者 现有 文件 的 相同 数据 创建 一个   " TarInfo "
" Unpacker "   是 用于 相应 地 从 字符串 缓冲区 解包   XDR   数据 值 的 类
" wait ( ) "   方法 释放 锁 ， 然后 阻塞 直到 其它 线程 调用   " notify ( ) "   方法 或   " notify _ all ( ) "   方法 唤醒 它
这个 方法 的 返回值 就是 本 模块 所有 函数 的   dir   参数 的 默认值
将   x   改写 为 最简 形式
加载 器 通常 由 一个   finder   返回
在   3.5   版 更改 :   The   default   ssl _ version   is   changed   from   " PROTOCOL _ SSLv3 "   to   " PROTOCOL _ TLS "   for   maximum   compatibility   with   modern   servers .
我们 的 类型 的 名称
字符串 有 几种 方法 可以 使用 固定 字符串 执行 操作 ， 它们 通常 要 快得多 ， 因为 实现 是 一个 针对 此 目的 而 优化 的 单个 小   C   循环 ， 而 不是 大型 、 更 通用 的 正则表达式 引擎
数组 元素 可 使用 标准 的 抽取 和 切片 方式 来 读写 ； 对于 切片 读取 ， 结果 对象 本身 并非 一个   " Array "
PEP   389 :   Argparse   命令行 解析 模块
发布 日期 :   2016   12   23
当 应用程序 需要 类似   shell 的 路径 扩展 时 ， 可以 显式 调用 诸如   " expanduser ( ) "   和   " expandvars ( ) "   之类 的 函数
格式 码 必须 是 以下 其中 之一 ,   " ' e ' " ,   " ' E ' " ,   " ' f ' " ,   " ' F ' " ,   " ' g ' " ,   " ' G ' "   或者   " ' r ' "
但是 ， 它们 比 使用 共享内存 慢
统计
参见   " ast "   模块 的 文档 了解 如何 使用   AST   对象
" wave "   读写 WAV 格式文件
忽略 0 和 负数 计数
舍入 到 最 接近 的 数 ， 同样 接近 则 舍入 到 最 接近 的 偶数
此 模块 提供 用于 比较 序列 的 类 和 函数
为了 确保 可读性 和 运行 效率 ， 限制 允许 的 参数传递 形式 是 有 意义 的 ， 这样 开发者 只 需 查看 函数 定义 即可 确定 参数 项是 仅 按 位置 、 按 位置 也 按 关键字 ， 还是 仅 按 关键字 传递
如果   Python   没有 处理   " signal . SIGINT "   ( 将 它 设为   " signal . SIG _ DFL "   或   " signal . SIG _ IGN " ) ， 此 函数 将 不 做 任何 事
" weakref "   模块 提供 的 工具 可以 不必 创建 引用 就 能 跟踪 对象
弃用 的 功能
新增 模块
在 一个 异步 生成器 函数 中 ， 一个 空 的   " return "   语句 表示 异步 生成器 已 完成 并 将 导致   " StopAsyncIteration "   被 引发
增加 了   " tracemalloc . reset _ peak ( ) "   用于 将 跟踪 的 内存 块 峰值 大小 设 为 当前 大小 ， 以 测量 特定 代码段 的 峰值
方括号 （ 下标 ） 标记 在 内部 使用   " slice "   对象
尽可能 模拟 交互式   Python   解释器 的 行为
在   Python   中 ， 有 两种 方式 可以 生成 对象 的 文本 表示 :   " repr ( ) "   函数 和   " str ( ) "   函数
队列 在 被 关闭 后 就 不可 再 被 使用
一般 情况 下 ， 主线 程是 Python 解释器 开始 时 创建 的 线程
解包 的 字 段 可 通过 将 它们 赋值 给 变量 或 将 结果 包装 为 一个 具名 元组 来 命名 :
它 包含 一系列 对应 于   Python   操作符 的 函数
这 可以 是 一个 整数 形式 的 文件 描述符 ， 例如   " sys . stdin . fileno ( ) "   所 返回 的 对象 ， 或是 一个   file   object   ， 例如   " sys . stdin "   本身
（ 由   Guido   van   Rossum   贡献 。 ）
增加   "   "   说明符 用于   f   string
在 将 字符串 连线 传输 之前 ， 它们 会先 使用 预备 过程 进行 处理 ， 之后 它们 将 具有 特定 的 标准 形式
一个 用于 处理   HTTP   Cookies   的 类
3.4   新版 功能 .
用于 标题 行中 的 工作日 名称 的   CSS   类 列表
根据 传入 的 标记   id   返回 元组 ， 元组 与   " getmarkers ( ) "   中 描述 的 一致
总体 数据 里 处于   m   个 已 排序 数据 点中 第   i   个 以下 的 部分 会以   " ( i   1 )   /   ( m   1 ) "   来 计算
默认 前缀 是   " gettempprefix ( ) "   或   " gettempprefixb ( ) "   函数 的 返回值 （ 自动 调用 合适 的 函数 ）
模块   " quopri "   支持 在   MIME   版本 电子邮件 中 使用 引号 可 打印 编码
为什么 简单 的 算术 运算 得到 奇怪 的 结果 ？
由 被 视为 可 打印 符号 的   ASCII   字符 组成 的 字符串
单个 字符 并 没有 特殊 的 类型 ， 只是 一个 长度 为 一 的 字符串 :
当 对象   o   是 一个 字节 数组 对象 ， 但 不是 一个 字节 数组 类型 的 子 类型 实例 时   ， 返回 真
开始 使用   Ttk ,   导入 模块 :
将 采样 转换 为   4   位   Intel / DVI   ADPCM   编码
在   OS   X   上 ，   " find _ library ( ) "   会 尝试 几种 预定 义 的 命名 方案 和 路径 来 查找 库   ， 如果 成功 ， 则 返回 完整 的 路径名 :
返回 对 对象 的 弱 引用
这 也 使得   " T "   作为 类 体内 的 一个 类型 有效
甚至 包括 共享 列表 和 字典
（ 由   Raymond   Hettinger   在   bpo   9826   和   bpo   9840   中 贡献 。 ）
所以 在 这里   BOM   的 作用 并 不是 帮助 确定 生成 字节 序列 所 使用 的 字节 顺序 ， 而是 作为 帮助 猜测 编码 格式 的 记号
" ' ^ ' "   强制 字段 在 可用 空间 内 居中
" xml . dom . pulldom " ： 支持 构建 部分   DOM   树
作为   CPython   的 实现 细节 ， 优化 的   C   实现 仅当   digest   为 字符串 并且 是 一个   OpenSSL   所 支持 的 摘要 算法 的 名称 时才 会 被 使用
示例
如果   o   支持 单段 可读 缓冲 接口 则 返回   " 1 "
（ 由   Filip   Gruszczy ń ski   在   bpo   13521   中 贡献 。 ）
需要 更 多 信息 ， 请 查看   bpo   5155 ,   bpo   5313   以及   bpo   5331
表达式
返回 一个 包含   value   的   marshal   表示 形式 的 字节 串 对象
信号
如果 访问   mock   的 属性 或 方法 不 在   spec   中 ， 会 报   " AttributeError "   错误
如果 是 一个   string   ， 您 必须 提供   encoding   参数 （   errors   参数 仍 是 可选 的 ） ； " bytearray ( ) "   会 使用   " str . encode ( ) "   方法 来 将   string   转变成   bytes
有关 模块 的 更 多 信息
" Queue "   类 是 一个 近似   " queue . Queue "   的 克隆
" ctypes "   模块 的 文档
将   list   当中   low   与   high   之间 的 切片 设 为   itemlist   的 内容
返回 由 输出 行 组成 的 列表 ， 行尾 不带 换行符
库
在   3.3   版 更改 :   " None "   is   inserted   into   " sys . path _ importer _ cache "   instead   of   an   instance   of   " NullImporter " .
数组
3.6   新版 功能 .
不 改变 海龟 的 朝向   ( 移动 方向 )
对象 展示
请参阅   Functional   API   小节 了解 另 一种 替代性 的 构建 语法
如果 文件 已经 关闭 ， 则 此 方法 无效
发布 日期 e :   2018   02   04
对 数据 字符串 中 的   " ' & ' " ,   " ' < ' "   和   " ' > ' "   进行 转义
Microsoft   Store 包是 一个 易于 安装 的 Python 解释器 ， 主要 用于 交互式 使用 ， 例如 ， 学生
" asyncio . Condition "   和   " asyncio . Semaphore "   也 同样 如此
" f "   ( " float " )   [ float ]   将 一个   Python   浮点数 转化成 一个   C   " float "   浮点数
3.6   版后 已 移除 :   Use   " send ( ) "   instead   of   " write ( ) " .
" collected " （ 已 回收 的   ） :   当   phase   为   " stop "   时 ， 被 成功 回收 的 对象 的 数目
它 可以 是 以下 一种 :   " ' AF _ INET ' "   (   TCP   套 接字 类型 ) ,   " ' AF _ UNIX ' "   (   Unix   域套 接字 )   或者   " ' AF _ PIPE ' "   (   Windows   命名 管道 )
如果   exitmsg   未 给出 或 为   " None " ， 则 将 打印 默认 消息
你 还 可以 通过   Git   访问   Python   的 开发 版
类型转换
包 相对 导入
矛盾 的 选项
解释器 需要 关闭 的 主要 原因 有   " __ main __ "   模块 或 所 运行 的 脚本 已 完成 执行
" KEY _ Fn "   功能键   n   的 值   " KEY _ DL "   删除 行   " KEY _ IL "   插入 行   " KEY _ DC "   删除 字符   " KEY _ IC "   插入 字符 或 进入 插入 模式   " KEY _ EIC "   退出 插入 字符 模式   " KEY _ CLEAR "   清空 屏幕   " KEY _ EOS "   清空 至 屏幕 底部   " KEY _ EOL "   清空 至 行尾   " KEY _ SF "   向前 滚动   1   行   " KEY _ SR "   向 后 滚动   1   行   ( 反转 )   " KEY _ NPAGE "   下 一页   " KEY _ PPAGE "   上 一页   " KEY _ STAB "   设置 制表符   " KEY _ CTAB "   清除 制表符   " KEY _ CATAB "   清除 所有 制表符   " KEY _ ENTER "   回车 或 发送   ( 不 可靠 )   " KEY _ SRESET "   软   ( 部分 )   重置   ( 不 可靠 )   " KEY _ RESET "   重置 或 硬 重置   ( 不 可靠 )   " KEY _ PRINT "   打印   " KEY _ LL "   Home   向下 或 到底   ( 左 下 )   " KEY _ A1 "   键盘 的 左上角   " KEY _ A3 "   键盘 的 右上角   " KEY _ B2 "   键盘 的 中心   " KEY _ C1 "   键盘 左下方   " KEY _ C3 "   键盘 右下方   " KEY _ BTAB "   回退 制表符   " KEY _ BEG "   Beg   ( 开始 )   " KEY _ CANCEL "   取消   " KEY _ CLOSE "   关闭   " KEY _ COMMAND "   Cmd   ( 命令行 )   " KEY _ COPY "   复制   " KEY _ CREATE "   创建   " KEY _ END "   End   " KEY _ EXIT "   退出   " KEY _ FIND "   查找   " KEY _ HELP "   帮助   " KEY _ MARK "   标记   " KEY _ MESSAGE "   消息   " KEY _ MOVE "   移动   " KEY _ NEXT "   下 一个   " KEY _ OPEN "   打开   " KEY _ OPTIONS "   选项   " KEY _ PREVIOUS "   Prev   ( 上 一个 )   " KEY _ REDO "   重做   " KEY _ REFERENCE "   Ref   ( 引用 )   " KEY _ REFRESH "   刷新   " KEY _ REPLACE "   替换   " KEY _ RESTART "   重启   " KEY _ RESUME "   恢复   " KEY _ SAVE "   保存   " KEY _ SBEG "   Shift   Beg   ( 开始 )   " KEY _ SCANCEL "   Shift   Cancel   " KEY _ SCOMMAND "   Shift   Command   " KEY _ SCOPY "   Shift   Copy   " KEY _ SCREATE "   Shift   Create   " KEY _ SDC "   Shift   删除 字符   " KEY _ SDL "   Shift   删除 行   " KEY _ SELECT "   选择   " KEY _ SEND "   Shift   End   " KEY _ SEOL "   Shift   清 空行   " KEY _ SEXIT "   Shift   退出   " KEY _ SFIND "   Shift   查找   " KEY _ SHELP "   Shift   帮助   " KEY _ SHOME "   Shift   Home   " KEY _ SIC "   Shift   输入   " KEY _ SLEFT "   Shift   向 左 箭头   " KEY _ SMESSAGE "   Shift   消息   " KEY _ SMOVE "   Shift   移动   " KEY _ SNEXT "   Shift   下 一个   " KEY _ SOPTIONS "   Shift   选项   " KEY _ SPREVIOUS "   Shift   上 一个   " KEY _ SPRINT "   Shift   打印   " KEY _ SREDO "   Shift   重做   " KEY _ SREPLACE "   Shift   替换   " KEY _ SRIGHT "   Shift   向 右 箭头   " KEY _ SRSUME "   Shift   恢复   " KEY _ SSAVE "   Shift   保存   " KEY _ SSUSPEND "   Shift   挂 起   " KEY _ SUNDO "   Shift   撤销   " KEY _ SUSPEND "   挂 起   " KEY _ UNDO "   撤销 操作   " KEY _ MOUSE "   鼠标 事件 已 发生   " KEY _ RESIZE "   终端 大小 改变 事件   " KEY _ MAX "   最大 键值
3.3   新版 功能 .
导 入库 基本上 仅 用于 让 链接 器能 确保 特定 标识符 是 合法 的 ， 并且 将 在   DLL   被 加载 时 出现 于 程序 中
PEP   3333 :   Python   Web 服务器 网关 接口 v1.0 . 1
在   LIFO   ( last   in ,   first   out )   队列 中 ， 最近 被 添加 的 条目 先 取回 ( 操作 类似 一个 堆栈 )
" tarfile "   读写 tar 归档文件
对于 之前 从未 接触 过 编程 的 学生 来说 ， 使用 静态 类型 语言 会 感觉 不够 自然
PEP   539 :   用于 线程 局部 存储 的 新   C   API
在 许多 终端 上 ， “ 正常 可见 ” 模式 为 下划线 光标 而 “ 高度 可见 ” 模式 为 方块 形 光标
watcher   必须 实现   " AbstractChildWatcher "   基类 定义 的 方法
如果 存在   " seek ( ) "   和   " tell ( ) "   方法 并且 没有 引发 异常 ， 它们 也 会 被 使用
另 一种 形式 是 直接 导入 所 需 的 函数 或 变量 :
将   preferred   设置 为   " True "   使得 这个 浏览器 成为   " get ( ) "   不带 参数 调用 的 首选 结果
解码 二进制   input   文件 的 内容 并 将 结果 二进制 数据 写入   output   文件
但是 要 注意   timeout   的 其中 一些 行为 和   " threading . RLock . acquire ( ) "   中 实现 的 行为 是 不同 的
该 构造 器 接受 一个 可选 的 整数 初始化 器
注解 :
如果   " with "   语句 中 包含 一个 目标 ， 来自   " __ enter __ ( ) "   的 返回值 将 被 赋值 给 它
参考 引用
此 函数 一定 不会 失败
例如 字典 具有   " copy ( ) "   方法 :
一个 要求 从文件 加载 初始值 的 应用 应当 在 调用   " read ( ) "   来 获取 任何 可 选 文件 之前 使用   " read _ file ( ) "   来 加载 所 要求 的 一个 或 多个 文件 :
如果 设置 了   " __ file __ " ， 则 也 可以 再 设置   " __ cached __ "   属性 ， 后者 取值 为 编译 版本 代码 （ 例如 字节 码 文件 ） 所在 的 路径
如果 可 选 参数   bigendian   为 假值 ， 分块 大小 应当 为 小端序
PEP   380   委托 给子 生成器 的 语法 引入   " yield _ from "   语法 以 方便 地 委托 给子 生成器 的 提议
bpo   34679 :   asynci . ProactorEventLoop . close ( )   现在 仅 调用 主线 程中 的   signal . set _ wakeup _ fd ( )
Python   允许 你 使用 称为   JSON   ( JavaScript   Object   Notation )   的 流行 数据交换 格式 ， 而 不是 让 用户 不断 的 编写 和 调试 代码 以 将 复杂 的 数据类型 保存 到 文件 中
下面 的 服务 代码 创建 了 一个 使用   " ' secret   password ' "   作为 认证 密码 的 监听器
用于 编码方法 参数 （ Unicode   字符串 和 字符 ） 的 编码 格式
"   help "   选项 ， 也 可 缩写 为   "   h " ， 是 唯一 一个 可以 直接 使用 的 选项 （ 即 不 需要 指定 该 选项 的 内容 ）
" unicodedata "   Unicode   数据库
从 队列 移出 一条 记录 并 将 其 返回 ， 可以 选择 阻塞
" asynchat "   异步   socket   指令 / 响应 处理器
默认设置 下 ， 为 保证 性能 ，   errors   参数 只会 在 第一次 发生 编码 / 解码 错误 时 被 检查 ， 并且 对于 空 字符串   encoding   参数 有时 会 被 忽略
模块   " stringprep "   仅 公开 了 来自   RFC   3454   的 表格
注解 :
你 可以 通过   " PyErr _ Occurred ( ) "   在 不 造成 破坏 的 情况 下 检测 是否 设置 了 异常
（ 由   Guido   van   Rossum ,   Pablo   Galindo   和   Lysandros   Nikolaou   在   bpo   40334   中 贡献 。 ）
下面 是 一些 术语 和 惯例 的 解释 .
当 发起 调用 时 将   blocking   参数 设为 假值 ， 则 不 进行 阻塞
在 一个 新 的 进程 中 执行 子程序
" Process "   和 异常
安全 改进 ：
" loop . set _ debug ( ) "   开启 或 禁用 调试模式
PEP   249   DB   API   2.0   规范   Marc   Andr é   Lemburg   写 的   PEP
使用 管道
当   skipkeys   为 假值 （ 默认 ） 时该 函数 将 在 字典 的 键 不 为 字符串 时 引发   " TypeError " ， 否则 将 跳 过 这样 的 键
" Differ "   对象 是 通过 一个 单独 方法 来 使用 （ 生成 增量 ） 的 ：
将 准备   LogRecord   的 结果 排入 队列
打包 双 精度 浮点数   value
选项
轮询 已 注册 的 文件 描述符 的 集合 ， 并 返回 一个 列表 ， 列表 可能 为空 ， 也 可能 有 多个   " ( fd ,   event ) "   二元 组 ， 其中 包含 了 要 报告 事件 或 错误 的 描述符
For   details ,   see   the   " contentmanager "   documentation   and   the   email :   示例
strtod   和   dtoa
在 布尔运算 中 ， " timedelta "   对象 当且 仅 当 其 不 等于   " timedelta ( 0 ) "   时则 会 被 视为 真值
其会 存储 所有 C   API 指针 ( 例子 里 只有 一个 ) 在   " void "   指针 的 数组 里 ， 并 使 其值 变为 Capsule
当 打开 一个 文件 用于 读取 时 ，   format   和   filters   参数 具有 与   " LZMADecompressor "   的 参数 相同 的 含义
statement   语句 语句 是 程序段 （ 一个 代码 “ 块 ” ） 的 组成 单位
3.4   新版 功能 .
除了 文字 模式 的 要求 外 ， 这个 方法 跟   " BytesParser . parse ( ) "   的 运行 方式 一致
发布 版本 :   2.04
启动 和 代码执行
因此   " 3.4 . 1a2 "   的 16 进制 版本号 是   " 0x030401a2 "
随同   OpenSSL   提供 了 一个 快速 的   pbkdf2 _ hmac   实现
返回   " a   b "
已弃 用 的   Python   模块 、 函数 和 方法
先进 ， 先出 （ FIFO ） 队列
解码   base85   编码 过 的   bytes   like   object   或   ASCII   字符串   b   并 返回 解码 过 的   " bytes "
在   3.5   版 更改 :   添加 了   stdout   和   stderr   属性
3.2   新版 功能 .
平均值 以及 对 中心 位置 的 评估
在   ssl   模块 未来 的 版本 中 ， 最低 需要   OpenSSL   1.0 . 2   或   1.1 . 0
警告 :
在   3.4   版 更改 :   添加   file   形参
清理
高级 调试器 支持
在   3.8   版 更改 :   Added   " __ iter __ ( ) "   to   implementation   so   that   iteration   ( such   as   in   for   loops )   correctly   consumes   read _ data   .
返回 的 数字   " time ( ) "   可以 通过 将 其 传递 给   " gmtime ( ) "   函数 或 转换 为 UTC 中 更 常见 的 时间 格式 （ 即 年 、 月 、 日 、 小时 等 ） 或 通过 将 它 传递 给   " localtime ( ) "   函数 获得 本地 时间
参见 :
如果 插入 符 出现 在 字符 类 的 其他 位置 ， 则 它 没有 特殊 含义
其 参数 的 含义 与   " dump ( ) "   中 的 相同
" contextlib "   为   " with " 语句 上下文 提供 的 工具
使用   " ProactorEventLoop "   事件 循环 实现 的 另 一种 事件 循环 策略
如果 文档 字符串 中有 更 多行 ， 则 第二行 应为 空白 ， 从而 在 视觉 上将 摘要 与 其余 描述 分开
[   访问 策略   ]
该字段 默认 会 被 忽略 ， 当且 仅 当   " PyCF _ ONLY _ AST "   在   cf _ flags   中 设置 旗标 时才 会 被 使用
在   " get _ wch ( ) "   被 调用 之前 只能 推送 一个   ch
（ 由   Carl   Meyer   在   bpo   40360   中 贡献 。 ）
估计   " init   False "   字 段 很少 能 被 正确 地 使用
换句话说 ， 以上 对   " Animal "   的 赋值 就 等价 于 :
还 可以 在 不禁 用 UI 的 情况 下 设置 这些 选项 ， 以 更改 一些 默认值
当 构造函数 中 没有 给定 名称 时 ， 这是 文件 的 文件 描述符
在   Python   3.7   之前 ， 可以 改用 低 层级 的   " asyncio . ensure _ future ( ) "   函数
这 等价 于   " ~ obj "
信号 代表 在 计算 期间 引发 的 条件
处理程序
" tracemalloc "   跟踪 内存 分配
分析   pathname   文件 的 内容 ， 该 文件 必须 包含   Python   代码
class :   timedelta   用法 示例
应用 匹配
如果   cfile   所 表示 （ 显式 指定 或 计算 得出 ） 的 路径 为 符号 链接 或 非常规 文件 ， 则 将 引发   " FileExistsError "
3.2   新版 功能 :   " PyExc _ ResourceWarning " .
PEP   615   ， IANA   时 区 数据库 现在 已 包含 于 标准 库 的   " zoneinfo "   模块 ；
处理 目录 、 正常 文件 、 硬 链接 、 符号 链接 、 fifo   管道 、 字符 设备 和 块 设备 ，   并且 能够 获取 和 恢复 文件 信息 例如 时间 戳 、 访问 权限 和 所有者 等
pdb   模块 是 一个 简单 但是 够用 的 控制台 模式   Python   调试器
3.5   新版 功能 .
成功 时 返回 新 的 冻结 集合 ， 失败 时 返回   " NULL "
工具 / 示例
此 标志 允许 你 编写 更 易读 的 正则表达式 ， 方法 是 为 您 提供 更 灵活 的 格式化 方式
当未 指明 时 ， 查找 将 只 在   " distutils . command "   包中 进行
在   3.7   版 更改 :   repeat   的 默认值 由   3   更 改为   5
还原论 者 的 读者 可能 会 注意 到 其他 三个 限定符 都 可以 用 这种 表示法 表达
在   3.2   版 更改 :   " IGNORE _ EXCEPTION _ DETAIL "   now   also   ignores   any   information   relating   to   the   module   containing   the   exception   under   test .
一个 简单 的 方式 是 通过 附加 一个   " SocketHandler "   的 实例 在 发送 端的 根 日志 处理器 中 :
实现 交互 模式 的 表达式 语句
发布 日期 :   2015   02   08
抽象 倾向 于 创造 间接性 并 迫使 翻译 更多地 工作
名称 的 绑定
关键字   ' " elif " '   是   ' else   if '   的 缩写 ， 适合 用于 避免 过多 的 缩进
例如   " complex ( ' 1 + 2j ' ) "   是 合法 的 ， 但   " complex ( ' 1   +   2j ' ) "   会 触发   " ValueError "   异常
出于 这个 原因   ，   " profile "   提供 了 一种 针对 指定 平台 的 自我 校准 方法 ， 以便 可以 在 很大 程度 上 （ 平均 地 ） 消除 此 误差
" http . cookies "   模块 包含 以下 声明 :
" popen2 . Popen3 "   和   " popen2 . Popen4 "   基本上 类似 于   " subprocess . Popen " ， 不同之处 在于 :
这个 例子 将 打印 当前目录 下 带有 扩展名   " . txt "   的 所有 文件名 :
关联 的 值 是 一个 指明 究竟 发生 了 什么 问题 的 字符串
基本 实例
key   应当 为   " const   char   "
" object .__ reduce __ ( ) "   方法 现在 可 返回 长度 为二至 六个 元素 的 元组
事件 循环 策略
与 Python 中 的 所有 的 其它 对象 一样 ， 旧 的 对象 只有 在 引用 计数 为 0 之后 才 会 被 回收
XXX   是否 要 增加 关于 初始化   " __ main __ "   的 不同 方式 的 更 多 解释 ？
唯一 合理 的 用法 :   作为 一个 函数 来 返回   " 匿名 海龟 " :
无 UI   安装
如果 不是 这样的话 ， 你 就是 应该 这样 编码 ：
该 属性 默认 为   " None " ， 表示 禁用 转义
这 类 关系 没有 定义 完全 排序 （ 例如   " { 1 , 2 } "   和   " { 2 , 3 } "   两个 集合 不 相等 ， 即 不 为 彼此 的 子集 ， 也 不 为 彼此 的 超集
( 这 约等于 连续 两次 画布 刷新 的 间隔时间 。 )   绘图 延迟 越长 ， 动画 速度 越慢
类 和 实例 变量
与 Python 相关 的 路径 和 文件
格式化 字符串 字 面值 可以 拼接 ， 但是 一个 替换 字 段 不能 拆分 到 多个 字 面值
也许 最 重要 的 元字符 是 反 斜杠 ， " \ "
数码 会 从 中间 被 丢弃
此 函数 可以 安全 地 在   " Py _ Initialize ( ) "   之前 调用
" html . parser "   简单 的   HTML   和   XHTML   解析器
模块 内容
命令 参考
核心 与 内置
工具 / 示例
参见 :
请 注意 这 将 不会 使   " get _ iterator "   成为   " Foo "   的 一个 可用 方法 ， 它 是 被 另外 提供 的
参见   PEP   343
模块 函数 和 常量
最后 ， 之前 提到 的   " loop . run _ in _ executor ( ) "   方法 也 可 配合   " concurrent . futures . ProcessPoolExecutor "   使用 以 在 另 一个 进程 中 执行 代码
模块 方法 表 和 初始化 函数
要 卸载   MacPython   ， 你 可以 简单 地 移除 这 三个 项目
在 写入 时 ， 还 可以 使用   " ' xmlcharrefreplace ' "   ( 替换 为 适当 的   XML   字符 引用 )   或   " ' namereplace ' "   ( 替换 为   " \ N { ... } "   转义序列   )
这样 可以 避免 在 对 不同 类型 的 数字 进行 相等 比较 时 混淆 结果
timeout   可以 为   int   或   float   类型
其他 元 数据 ， 例如 文件 的 创建 和 修改 时间 不会 被 保留
更 多 建议
返回 当前 文件 中 的 行号
需要 注意 的 是 第一个 参数 名 与   " threading . Lock . acquire ( ) "   的 不同
此 限制 不适 用于 仅 添加 方法 而 未指定 另 一 数据类型 的 混合 类
返回 一个 表示 指定 年 月 的 周 列表
没有 这样 的 对应物
警告 :
" ImproperConnectionState "   的 一个 子类
" locale "   国际化 服务
" quopri "   编码 与 解码 经过   MIME   转码 的 可 打印 数据
对字 面值 求值 将 返回 一个 该值 所 对应 类型 的 对象 （ 字符串 、 字节 串 、 整数 、 浮点数 、 复数 ）
3.5 . 2   新版 功能 .
日期 :   十一月   13 ,   2020
" unittest . mock .__ version __ "   上 的 错误 版本 已经 被 移除
可以 指定   errors   来 定义 错误处理 方案
命令行 界面
其他 流程 控制 工具
" ' # ' "   选项 可以 让 “ 替代 形式 ” 被 用于 转换
从 二进制 的 类 文件 对象   fp   中 读取 全部 数据 、 解析 其 字节 内容 、 并 返回 消息 对象
可用性 :   Windows
" Py _ DEPRECATED ( ) "   宏 已经 针对   MSVC   实现
返回 以   year ,   week   和   day   值 指明 的   ISO   历法 日期 所 对应 的   " datetime "
在   Windows   上 ， " SIGTERM "   是   " terminate ( ) "   的 别名
如果   line   为 空行 或 只 包含 单个   " ' # ' "   则   line   行 就是 可 忽略 的 ， 否则 就是 不可 忽略 的
比如说 :
默认 的   format _ spec   是 一个 空 字符串 ， 它 通常 和 调用   " str ( value ) "   的 结果 相同
PEP   378 :   千位 分隔符 的 格式 说明符
由于 绑定 方法 是 临时性 的 ， 标准 弱 引用 无法 保持 它
" locale "   国际化 服务
如果 在 要求 新 的 未 解压缩 输入 之前   " decompress ( ) "   方法 可以 提供 更 多 的 解压缩 数据 则 为   " False "
例如 :
" ctypes "   定义 了 一些 和 C 兼容 的 基本 数据类型 ：
改进 的 模块
与   " thread _ time ( ) "   相似 ， 但 返回 纳秒 时间
文件名 （ " 字符串 " ）
使用 描述性 字符串
进阶 教程
作为   multipart / digest   容器 内 子 部分 的 信息 除外 ，   它们 的 默认 内容 类型 是   message / rfc822
可用性 :   Unix ,   Windows
slice   切片 通常 只 包含 了 特定   sequence   的 一部分 的 对象
委托 是 通过   " __ getattr __ "   方法 来 完成 的 ； 请参阅 语言 参考 了解 有关 控制 属性 访问 的 更 多 信息
默认 情况 下 ，   " sys . breakpointhook ( ) "   调用   " pdb . set _ trace ( ) "   且 没有 参数
PEP   584   ， 为   " dict "   增加 合并 运算符 ；
注意 切片 的 开始 总是 被 包括 在 结果 中 ， 而 结束 不 被 包括
转换 一个 字典 到 命名 元组 ， 使用 两星 操作符   ( 所述 如 解包 参数 列表 ) :
" argparse "   模块 是 非常 强大 的 ， 在 结束 篇 教程 之前 我们 将 再 探索 更 多一些 内容
如果 您 只 想 按 名称 导入 模块 （ 可能 在 包中 ） ， 请 使用   " importlib . import _ module ( ) "
这会 捕获 拼写错误 和 大小写 敏感 相关 的 错误 ， 例如 一个 字典 可能 包含 两个 键 分别 代表 同一个 大小写 不 敏感 的 配置 键
在 未找到 任何 解包 器 的 情况 下 ， 将 引发   " ValueError "
于   " EmailMessage "   对象 而言 ，   requote   参数 已 被 弃用
级别   2   已 停止
在   3.8   版 更改 :   如果 可用 将 使用   " __ index __ ( ) "
类似 于 列表 推导 式 ， 集合 也 支持 推导 式 形式
" ' w '   or   ' w : ' "   打开 用于 未 压缩 的 写入
迭代 器 对象
它 提供 了 比 自   Python   3.0   起 可用 的   Protocol   3   更好 的 性能 和 更 小 的 数据 尺寸
（ 由   Marcel   Plch   和   Petr   Viktorin   在   bpo   38787   中 贡献   。 ）
物理 行是 以 一个 行 终止 序列 结束 的 字符 序列
例如 ， " [ \ s , . ] "   是 一个 匹配 任何 空格 字符 的 字符 类 或者   " ' , ' "   ， 或   " ' . ' "
" C   d "   删除 下 一个 字符
与   " pickle "   和   " marshal "   不同 ， JSON   不是 一个 具有 框架 的 协议 ， 所以 尝试 多次 使用 同一个   fp   调用   " dump ( ) "   来 序列化 多个 对象 会 产生 一个 不 合规 的   JSON   文件
字符串 不 区分 大小写
Mock   会 保存 调用 记录 ， 可以 通过 断言 获悉 代码 的 调用
（ 由   Steve   Dower   在   bpo   37834   中 贡献 。 ）
依赖于 具体 平台 的 高效 拷贝 操作
具有 单独 线程 上下文 意味着 线程 可以 修改 上下文   ( 例如   " getcontext ( ) . prec   10 " )   而 不 影响 其他 线程
第二个 使用 可 调用 对象 和 一个   sentinel   值 ， 为 序列 中 的 每个 项 调用 可 调用 对象 ， 并 在 返回   sentinel   值时 结束 迭代
返回 索引 号   b   上 的 值   a
Bernstein   所 设计 的   ChaCha   加密
字符 会 随着 语言 或者 上下文 的 变化 而 变化
注意 整型 数 部分 和 指数 部分 在 解析 时 总是 以   10   为 基数
[ 1 ]   ( 当 文件 被 当作 脚本 运行 时 ， 它们 也 会 执行 。 )
返回 当前 已 传给   " update ( ) "   方法 的 字节 串 数据 的 摘要
共享内存 块 的 唯一 标识 ， 只读 属性
代表   C   " ssize _ t "   数据类型
为此 ， 上下文 管理器 是 实现 保存 和 恢复 日志 上下文 的 最 明显 的 方式
适当 的 测试 规程 可以 帮助 在 Python 中 构建 大型 的 、 复杂 的 应用程序 以及 接口 规范
当有 一个 以上 的 协程 在   " acquire ( ) "   中 被 阻塞 则 会 等待 解锁 ， 最终 只有 一个 协程会 被 执行
Python   解析器 不会 从   Python   中 删除 多行 字符串 文字 的 缩进 ， 因此 处理 文档 的 工具 必须 在 需要 时 删除 缩进
新 的 语法 特性 ：
返回 系统 默认 的   NIS   域
工具 / 示例
仅限   Windows ： 返回 错误码   code   的 文本 描述
将 音频 片段 中 的 采样 值 转换 为   a   LAW   编码 ， 并 将 其 作为 字节 对象 返回
你 可以 用 以下 代码 去掉 一个 字符串 流中 的 所有 空白 字符 :
所有 自动 换行 选项 均 获取 自   " TextWrapper "   实例 的 实例 属性
删除 进程 PID 与   pid   相等 的 进程 的 处理函数
测试
3.2   新版 功能 .
" transport . get _ returncode ( ) "   返回 子 进程 的 返回 代号
报告 显示 内容 包括 每个 层级 的 源代码 摘录 ， 还有 当前 正在 运行 的 函数 的 参数 和 局部变量 值 ， 以 帮助 你 调试 问题
参见 :
（ 由   Victor   Stinner   在   bpo   39413   中 贡献 。 ）
本 方法 的 返回值 就是 底层 文件 对象   write   方法 的 返回值
数据结构
如果   " PYTHONMALLOC "   环境变量 被 用来 强制 开启   C   库 的   " malloc ( ) "   分配器   ， 或者 如果   Python   的 配置 不 支持   " pymalloc " ， 则 此 变量 将 被 忽略
文件格式
3.7   新版 功能 :   filenames   形参 接受 一个   " bytes "   对象
命令行 与 环境   CPython   command   line   details
如果 用作 表达式 目标 的 右手边 不 存在 ， 则 解释器 会 对 目标 求值 ， 但 最后 的   " __ setitem __ ( ) "   或   " __ setattr __ ( ) "   调用 除外
引发 一个 审计 事件   " msvcrt . open _ osfhandle " ， 附带 参数   " handle " ,   " flags "
退出 方法
获取 网络 掩码 （ 即 对应 于 网络 前缀 的 设置 位 ） 或 主机 掩码 （ 不 属于 网络 掩码 的 任何 位 ） ：
字符串 具有   nbytes   个 随机 字节 ， 每个 字节 转换 为 两个 十六进制 数码
注 :   ( 1 )   对于 大多数 应用 来说 有 意义 的   preferencelist   组合 仅 有   " ( ' plain ' , ) " ,   " ( ' html ' ,   ' plain ' ) "   以及 默认 的   " ( ' related ' ,   ' html ' ,   ' plain ' ) "
2 、 8 、 16   进制 的 数字 可以 在 代码 中 用   " 0b " / " 0B "   、   " 0o " / " 0O "   、   " 0x " / " 0X "   前缀 来 表示
会 被 设为 在 创建 此 令牌 的   " ContextVar . set ( ) "   方法 调用 之前 该 变量 所 具有 的 值
可用性 注释
3.4   新版 功能 .
记录 消息 通过 使用   handlers   进行 调度 机制 ， 它们 是   " Handler "   类 的 子类 的 实例
格式 示例
" types "   动态 类型 创建 和 内置 类型 名称
在 典型 情况 下 ， 最低值 给出 了 机器运行 给定 代码段 的 速度 的 下限 ； 结果 向量 中较 高 的 值 通常 不是 由 Python 的 速度 变化 引起 的 ， 而是 由于 其他 过程 干扰 你 的 计时 准确性
如果 调用   " Future . set _ exception ( ) "   ， 但 不 等待   Future   对象 ， 将 异常 传播 到 用户 代码
请 注意 ， 第一次 加载 模块 可能 会 因为 模块 的 一次 初始化 而 代价 高昂 ， 但 多次 加载 模块 实际上 是 免费 的 ， 只 需 进行 几次 字典 查找
以下 旗标 还 可以   " os . chmod ( ) "   的 在   mode   参数 中 使用 ：
HTTPDigestAuthHandler   对象
特别 是 ， 通常 将   JSON   数字 反 序列化 为   IEEE   754   双 精度 数字 ， 从而 受到 该 表示 方式 的 范围 和 精度 限制
构建
在   3.2   版 更改 :   在 之前 版本 中 ， 如果 一个 名称 作为 被 嵌套 代码 块 中 的 自由 变量 出现 ， 则 将 其 从 局部 命名 空间 中 删除 是 非法 的
如果 原型 为 一个 映射 对象 （ 例如 字典 ） ， 抽取 必须 具有 与 该 映射 的 键 类型 相 兼容 的 类型 ， 然后 映射 中 会 创建 一个 将 抽取 映射 到 被 赋值 对象 的 键 / 值 对
3.8   新版 功能 .
成功 时 返回   " 0 " ， 失败 时 返回   "   1 "
为了 支持 这种 用法 ， curses   允许 你 为 屏幕 上 的 每个 单元 指定 一个 属性 值
一般 情况 下 ， 它们 负责 将   " LogRecord "   转换 为 可 由 人 或 外部 系统 解释 的 字符串
注解 :
从   stdin   运行
每个 事件 循环 都 有 一个 默认 策略 ， 可以 使用 策略 API 更改 和 定制 该 策略
如果   " run ( ) "   方法 引发 了 异常 ， 则 会 调用   " threading . excepthook ( ) "   来 处理 它
同时 也 添加 了 当   cfile   为 符号 链接 或 非常规 文件 时 引发   " FileExistsError "   的 预警 设置
如果 此堆 的 不 变量 始终 受到 保护 ， 则 序号   0   显然 是 最后 的 赢家
通常 应该 这样 调用 它 ： " next ( reader ) "
注解 :
注解 :
（ 由   Yash   Aggarwal ,   Keller   Fuchs ,   Serhiy   Storchaka   和   Raymond   Hettinger   在   bpo   37128 ,   bpo   37178   和   bpo   35431   中 贡献 。 ）
日志
" tty "   模块 定义 了 以下 函数 ：
另 一个 例子 是   " sys . float _ info " :
除非 格式 中 包含 秒 以下 的 部分 或 时区 差值 信息 ， 它们 在   " datetime . strptime "   中受 支持 但会 被   " time . strptime "   所 丢弃
在   3.5   版 更改 :   The   " io . BufferedIOBase "   interface   is   now   implemented   and   all   of   its   reader   operations   are   supported .
目前 ， 一个   " Decimal "   实例 的 编码 始终 是 规范 的   ， 因此 该 操作 返回 其 参数 不变
来自   " importlib _ metadata "   1.6 . 1   版 的 已 更新   " importlib . metadata "
条目 会 被 存储 为 字典 列表 ， 但 并不需要 了解 此 表示 形式 的 细节
x   是 负数 则 返回   " True " ； 否则 返回   " False "
key   为 某个 已经 打开 的 键 ， 或者 预定 义 的   HKEY _   常量 之一
如果 模块 为 包 （ 不论是 正规 包 还是 命名 空间 包 ） ， 则 必须 设置 模块 对象 的   " __ path __ "   属性
Attr   对象
在   Windows   上 ， 大部分 用于 处理 重 解析 点 , （ 包括 符号 链接 和 目录 连接 ） 的 手动 逻辑 已 被 委托 给 操作系统
例如   ， 如果   " x "   是 上面 创建 的   " MyClass "   的 实例 ， 则 以下 代码段 将 打印 数值   " 16 "   ， 且 不 保留 任何 追踪 信息 :
使用 自定义 的   " __ new __ ( ) "
" abc "   抽象 基类
可选 的   usegmt   是 一个 旗标 ， 当为   " True "   时 ， 将会 输出 一个 日期 字符串   ， 其中 时 区 表示 为   ascii   字符串   " GMT "   而 非 数字 形式 的   "   0000 "
例如 :
这个 类型 可以 如下 使用 :
一个 遗留 方法 ， 在 实现 时 计算 并 返回 给定 模块 的   repr ， 作为 字符串
用于   alpha   版本 的 后缀 是 带有 一个 小 数字   N   的 “ aN ” ， beta   版本 的 后缀 是 带有 一个 小 数字   N   的 “ bN ” ， 而   release   candidate   版本 的 后缀 是 带有 一个 小 数字   N   的 “ rcN ”
注解 :
来自   " popen2 "   模块 的 替代 函数
如果   " default _ factory "   属性 为   " None " ， 则 调用 本 方法 会 抛出   " KeyError "   异常 ， 附带 参数   key
参见 :
返回 名称 为   var   的   " ContextVar "   变量
如果 必须 更改 某个 特性 ， 则 应该 提供 渐进式 的 升级 路径
如果 Python 没有 预先 安装 并且 不 在 发行版 提供 的 库 中 ， 您 可以 轻松 地为 自己 使用 的 发行版 创建 包
3.7 . 2   新版 功能 .
它 是 几乎 无 限制 的 最 灵活 格式
DateTime   对象
注解 :
对于 属于 语句 集合 （ 适用 于 所有 语句 节点 ） 的 节点 ， 访问者 还 可以 返回 节点 列表 而 不仅仅 是 单个 节点
对于 更大 的 值 ， 使用   " sorted ( ) "   函数 会 更 有效率
例如 :
Provides   Expression   解释   " mypkg "   Provide   " mypkg " ,   using   the   distribution   version   " mypkg   ( 1.1 ) "   Provide   " mypkg "   version   1.1 ,   regardless   of   the   distribution   version
在 只 需 将   " LogRecord "   的 某个 子集 发送至   Web   服务器 ， 或者 需要 对 发送至 服务器 的 内容 进行 更 多 定制 时 可以 重载 此 方法
Python   包 索引 （ PyPI ）
PEP   372   将 有序 词典 添加 到 集合 中   PEP   由   Armin   Ronacher   和   Raymond   Hettinger   撰写 ， 由   Raymond   Hettinger   实现
" IncrementalEncoder "   实例 的 构造 器
在 文件 描述符   fd   上 丢弃 队列 数据
减少 了 传递 给 许多 内置 函数 和 方法 的 参数 转换 的 开销
设置 要 比较 的 第一个 序列
添加 了 新 的 替代 构造 器   " datetime . date . fromisocalendar ( ) "   和   " datetime . datetime . fromisocalendar ( ) " ， 它们 分别 基于   ISO   年份 、 周 序号 和 周内 日 序号 来 构造   " date "   和   " datetime "   对象 ； 这 两者 分别 是 其 所 对应 类中   " isocalendar "   方法 的 逆 操作
一个 将 模块 名称 映射 到 模块 的 字典
用于 无 重复 的 随机抽样
这会 导致 ：
你 指定 的 对象 会 在 测试 过程 中 替换成   mock   （ 或者 其他 对象 ） ， 测试 结束 后 恢复
" YYYY   MM   DDTHH : MM : SS " ， 如果   " microsecond "   为   0
比如 ， 你 可以 传递 兼容 的 数组 实例 给 指针 类型
3.2   新版 功能 .
在 内存 中 压缩 和 解压缩 数据
" array "   高效 的 数值 数组
事件 对象
例如 ， " reduce ( lambda   x ,   y :   x + y ,   [ 1 ,   2 ,   3 ,   4 ,   5 ] ) "   是 计算   " ( ( ( ( 1 + 2 ) + 3 ) + 4 ) + 5 ) "   的 值
mode   是 一个 可 选 字符串 ， 用于 指定 打开 文件 的 模式
该   API   的 主义 类似 于   " namedtuple "
已 定义 的 类型 码 如下 ：
请 注意 元组 并 不是 由 圆括号 构建 ， 实际 起 作用 的 是 逗号 操作符
获取 和 设置 策略
别名 可以 有 参数 ， 使得 调试器 对 被 检查 的 上下文 有 一定 程度 的 适应性
[   脚注   ]
尽管 这 可能 很 烦人 ， 但此 功能 旨在 用于 特殊 情况 ， 例如 在 多个 上下文 中 执行 相同 代码 的 多线程 服务器 ， 并且 出现 的 有趣 条件 取决于 此 上下文 （ 例如 在 上面 的 示例 中 就是 远程 客户端 IP地址 和 已 验证 用户名 ）
这样 ， 给定 以下 代码段 :
创建   type   的 实例 ， 该 实例 必须 使用   " PyStructSequence _ NewType ( ) "   创建
这 给 你 一个 包含 5 个 lambdas 的 列表 ， 它们 计算   " x   2 "
阻塞 至 队列 中 所有 的 元素 都 被 接收 和 处理完毕
通过 调用 流 的   " flush ( ) "   方法 来 刷新 它
" dbm . dumb "   模块 的 目的 是 在 更 健壮 的 模块 不可 用时 作为   " dbm "   模块 的 最终 回退 项
3.2   新版 功能 .
线程 可以 使用 这个 函数 来 中断 主线 程
encoding   指定 文件 所 要 使用 的 编码 格式
opener   必须 返回 一个 打开 的 文件 描述符 （ 使用   " os . open "   as   opener   时 与 传递   " None "   的 效果 相同 ）
这 意味着 永远 不 应 重复 零 宽度 断言 ， 因为 如果 它们 在 给定 位置 匹配 一次 ， 它们 显然 可以 无限 次 匹配
返回 一个   " time . struct _ time " ， 即   " time . localtime ( ) "   所 返回 的 类型
将   line   添加 到 历史 缓冲区 ， 相当于 是 最近 输入 的 一行
如果 设置 ， 此 属性 的 值 必须 为 字符串
实际上 ， 你 可能 已经 猜到 了 答案 ： 方法 的 特殊 之处 就 在于 实例 对象 会 作为 函数 的 第一个 参数 被 传入
调用   " strptime ( ) "   时 传入 不 完整 或 有 歧义 的   ISO   8601   指令 将 引发   " ValueError "
Fault   对象
在 运行 脚本 的 时候 ， 有时 可能 也 会 需要 在 运行 后 进入 交互 模式
枚举 可以 被 封存 与 解封 :
请 注意 应当 只有 堆 类型 可 访问   " tp _ traverse "   中 的 类型
Differ   示例
然后 当前 进程 / 线程 会 持有 这 把 锁 （ 在 锁 没有 其他 持有者 的 情况 下 ） ， 锁内 的 递归 等级 加一 ， 并 返回   " True "
PEP   520 :   保留 类 属性 定义 顺序
本章 中 的 函数 特定 于 某些   Python   对象 类型
API 参考 引用
有 几个 方式 可以 定义 此种 类型 的 简单 枚举 ：
返回 一个 面板 对象 ， 将 其 与 给定 的 窗口   win   相关联
当 直接 与 可执行文件 相邻 时 ， 添加   " pythonXX . zip "   作为 潜在 的   landmark
以下 是 模式 组合 的 完整 列表 :
参见 :   PEP   596   Python   3.9   发布 计划
" UserList "   对象
（ 另外 ， " io . IOBase . read ( ) "   和   " io . IOBase . readline ( ) "   方法 在 遇到   EOF   则 将 返回 一个 空 字符串 。 ）
注释 :
对象 必须 是 一个 迭代 器 （ 这应 由 调用者 来 判断   ）
在   3.3   版 更改 :   " float "   参数 在 设置   " FloatOperation "   陷阱 时 引发 异常
你 可以 手动 编写 自己 的 类来 达到 生成器 的 效果 ， 把 生成器 的 所有 局部变量 作为 实例 的 成员 变量 存储 起来
" Context "   类型
3.2   版后 已 移除 :   " PyModule _ GetFilename ( ) "   raises   " UnicodeEncodeError "   on   unencodable   filenames ,   use   " PyModule _ GetFilenameObject ( ) "   instead .
这 意味着 记录器 名称 跟踪 包 或 模块 的 层次结构 ， 并且 直观 地 从 记录器 名称 显示 记录 事件 的 位置
如果 文件   " . pdbrc "   存在 于 用户 主目录 或 当前目录 中 ， 则 将 其 读入 并 执行 ， 等同于 在 调试器 提示符 下 键入 该 文件
PEP   485   — —   用于 测试 近似 相等 的 函数   PEP   由   Christopher   Barker   撰写 ， 由   Chris   Barker   和   Tal   Einat   实现
性能 优化
如果 某 一行 中 的 字 段 多于 字段名 ， 则 剩余 数据 会 被 放入 一个 列表 ， 并 与   restkey   所 指定 的 字段名   ( 默认 为   " None " )   一起 保存
PEP   229   Using   Distutils   to   Build   Python   由   A . M
与 其他 语言 中 添加 功能 的 lambda 表单 不同 ， Python 的   lambdas 只是 一种 速记 符号 ， 如果 您 懒得 定义 函数 的话
如果 设置 成功 则 将 返回   " 0 "
https : / / csrc . nist . gov / csrc / media / publications / fips / 180 / 2 / archive / 20   02   08   01 / documents / fips180   2 . pdf   有关 安全 哈希 算法 的   FIPS   180   2   出版物
静态 类型 检查 器会 将 新 类型 视为 它 是 原始 类型 的 子类
有时候 需要 让 日志 处理程序 在 不 阻塞 当前 正在 记录 线程 的 情况 下 完成 工作
一个 用于 处理 重定向 的 类
使用   " finalize "   的 主要 好处 在于 它 能 更 简便 地 注册 回调 函数 ， 而无须 保留 所 返回 的 终结 器 对象
源代码 :   Lib / functools . py
返回 一个 新 的 锁 对象
如果   v   为   " NULL " ， 元素 将 被 删除 ， 但是 此 特性 已 被 弃用 ， 应当 改用   " PySequence _ DelItem ( ) "
字符串 从   Tcl   到   Python   的 来回 转换 现在 不会 再 发生 失败
日志 记录 操作手册
基于 路径 的 查找 器 还 提供 了 额外 的 钩子 和 协议 以便 能 扩展 和 定制 可 搜索 路径 条 目的 类型
核心 与 内置
需要 额外 的 形 参来 指定 所 涉及 到 的 是 面板 和 屏幕 的 哪 一部分
可选 的   fallback _ charset   指定 当   RFC   2231   标头 中 的 字符集 无法 被   Python   识别 时要 使用 的 字符集 ； 它 的 默认值 为   " ' us   ascii ' "
以下 部分 描述 了 各个 单独 的 子 模块
阻塞   delay   指定 的 秒数
语句 解释 及 变量 编译
如果   epoll   对象 已 关闭 ， 则 返回   " True "
解压缩 给定 的 文件
在   3.2   版 更改 :   现在   " get ( ) "   和   " setdefault ( ) "   在 所有 数据库 模块 中均 可用
获取   " Statistic "   信息 列表 ， 按   key _ type   分组 排序 ：
从 Python   1.6 开始 ， 字符串 变得 更 像 其他 标准 类型 ， 当 添加 方法 时 ， 这些 方法 提供 的 功能 与 始终 使用 String 模块 的 函数 时 提供 的 功能 相同
executable   路径 包含 一个 目录
抽象 的
" format _ datetime ( ) "   的 逆 操作
这 可 被 用于 启用 单 字符 模式 的 行 编辑 而 不 触及 屏幕 的 其余部分
命令行 参数
这 产生 了 正确 的 结果 :
该 解决方案 与   " MultiLoopChildWatcher "   同样 安全 并 同样 具有   O ( N )   复杂度 ， 但 需要 主线 程有 正在 运行 的 事件 循环 才能 工作
优先 队列 是 堆 的 常用 场合 ， 并且 它 的 实现 包含 了 多个 挑战 ：
配置
底层 映射 被 存储 在 一个 列表 中
虽然 添加 了 足够 的 填充 数据 以 执行 解码 ， 但 作为 结果 的 已 解码 字节 串 可能 无效
2000   年 五月 ， Guido   和   Python   核心 开发 团队 转 到   BeOpen . com   并 组建 了   BeOpen   PythonLabs   团队
一个   " memoryview "   对象 C 级别 的 缓冲区 接口 暴露 为 一个 可以 像 任何 其他 对象 一样 传递 的   Python   对象
" zoneinfo "   IANA   时 区 支持
非常感谢 ：
当然 它会 打印 :
增加 一个   pkg   config   " python   3.8   embed "   模块 用来 将   Python   嵌入 到 一个 应用 中 :   " pkg   config   python   3.8   embed   libs "   包含   "   lpython3.8 "
切片 对象
返回   o1   除以   o2   的 向下 取整 后 的 结果 ， 如果 失败 ， 返回   " NULL "
定义
新增 和 改进 的 模块
" Py _ UNICODE _ COPY " ,   " Py _ UNICODE _ FILL " ,   " PyUnicode _ WSTR _ LENGTH " ,   " PyUnicode _ FromUnicode ( ) " ,   " PyUnicode _ AsUnicode ( ) " ,   " _ PyUnicode _ AsUnicode "   以及   " PyUnicode _ AsUnicodeAndSize ( ) "   在   C   中 被 标记 为 已弃 用
如何 编写 带 输出 参数 的 函数 （ 通过 引用 调用 ） ？
在   3.7   版 更改 :   已经 不再 支持 从   " __ aiter __ "   返回 可 等待 对象
PEP   3105 :   " print "   改为 函数
请 注意 如果 两个 序列 完全相同 则 该值 为   " 1.0 " ， 如果 两者 完全 不同 则 为   " 0.0 "
" PyModule _ Create ( ) "   返回 一个 指向 它 所 创建 的 模块 对象 的 指针
二进制码 序列   ( " bytes "   或   " bytearray "   的 实例 )   可 进行 类型 内部 和 跨 类型 的 比较
使用   " functools . cmp _ to _ key ( ) "   可 将 老式 的   cmp   函数 转换 为   key   函数
值 还 可以 跨越 多行 ， 只要 其他 行 带有 比值 的 第一行 更深 的 缩进
（ 由   Yury   Selivanov   在   bpo   37027   中 贡献 。 ）
如果 需要 一个 不同 的 字符串 ， 应当 新建 一个 :
你 也 可以 将 不 相关 的 具体 类 （ 包括 内建类 ） 和 抽象 基类 注册 为 “ 抽象 子类   ”   — —   这些 类 以及 它们 的 子类 会 被 内建函数   " issubclass ( ) "   识别 为 对应 的 抽象 基类 的 子类 ， 但是 该 抽象 基类 不会 出现 在 其   MRO （ Method   Resolution   Order ， 方法 解析 顺序 ） 中 ， 抽象 基类 中 实现 的 方法 也 不可 调用 （ 即使 通过   " super ( ) "   调用 也 不行 ）
" key _ func ( elem ) "   是 一个 可以 对 迭代 器 返回 的 每个 元素 计算 键值 的 函数
结果 是 近似 的 ， 因为 二进制 浮点数 是 一个 近似值 ， 不 可能 以 2 为 基数 来 表示 出 所有 实数
添加 了 新 的   " functools . singledispatchmethod ( ) "   装饰 器 可 使用   single   dispatch   将 方法 转换 为泛 型函数   :
此 方法 会 将   obj   适配 为 一个   ctypes   类型
这 适用 于 处理 特殊   HTTP   错误 例如 作为 认证 请求 的 时候
PEP   302   新 导入 钩   PEP   添加 导入 钩 来 有助于 模块 运作
默认值 为   " None " ， 意味着 没有 任何 字符 会 被 视为 垃圾 字符
http : / / www . pysqlite . org   pysqlite   的 主页
错误报告 编写 指南 关于 写 一份 好 的 错误报告
被 包装 的 函数 配有 一个   " cache _ parameters ( ) "   函数 ， 该 函数 返回 一个 新 的   " dict "   用来 显示   maxsize   和   typed   的 值
这 可以 替代   " print ( ) "   函数 在 交互式 解释器 中 使用 以 查看 值 （ 你 甚至 可以 执行 重新 赋值   " print   pprint . pprint "   以 在 特定 作用域 中 使用 ）
最后 ，   调用   " __ enter __ ( ) "   方法 的 结果 被 压入 堆栈
（ 由   Serhiy   Storchaka   在   bpo   36793   中 贡献 。 ）
In   particular ,   " re "   module   has   an   extensive   section ,   正则表达式 例子
目录 和 文件 操作
参见 :
常量   " MINYEAR "   是   " 1 "
所有 这些 使 生成器 函数 与 协程 非常 相似 ； 它们   yield   多次 ， 它们 具有 多个 入口 点 ， 并且 它们 的 执行 可以 被 挂 起
一些 只 对 IPv6   地址 有 意义 的 属性 也 在   " IPv4Address "   对象 实现 ， 以便 更 容易 编写 正确处理 两种   IP   版本 的 代码
虽然   curses   在   Unix   环境 中 使用 最为 广泛 ， 但 也 有 适用 于   Windows ， DOS   以及 其他 可能 的 系统 的 版本
Python   标准 库 提供 了 同一 分析 接口 的 两种 不同 实现 ：
设置 窗口 的 背景
现在 此 路径 在 当前目录 通过   " os . chdir ( ) "   被 改变 后 仍 将 保持 有效
方法 对应 函数 的 文档 字符串 的 形式 会 有 一些 修改 :
模拟 一个 字典 类
下面 的 数字 是   k   而 不是   " a [ k ] " :
查找 给定 编码 的 编解码器 并 返回 其 编码器 函数
文件格式   描述   注释   " zip "   zip   文件   ( " . zip " )   ( 1 ) , ( 3 )   " gztar "   gzip ' ed   tar   文件   ( 2 )   ( " . tar . gz " )   " bztar "   bzip2 ' ed   tar   文件   ( " . tar . bz2 " )   " xztar "   xz ' ed   tar   文件   ( " . tar . xz " )   " ztar "   压缩   tar   文件   ( " . tar . Z " )   ( 4 )   " tar "   tar   文件   ( " . tar " )
方法   /   属性   目的   " group ( ) "   返回 正则 匹配 的 字符串   " start ( ) "   返回 匹配 的 开始 位置   " end ( ) "   返回 匹配 的 结束 位置   " span ( ) "   返回 包含 匹配   ( start ,   end )   位置 的 元组
例如 ， 2004   年 的 第一天 是 星期四 ， 因此   ISO   2004   年 的 第一个 星期 开始 于   2003   年   12   月   29   日 星期一 ， 结束 于   2004   年   1   月   4   日 星期日 :
结构
PEP   465   用于 矩阵 乘法 的 专用 中缀 运算符   PEP   由   Nathaniel   J
如果   object   是 一个 类 或   constructor   是 不可 调用 的 则 将 引发   " TypeError "
使用 显式 的   " self . var "   很 好地解决 了 这个 问题
源代码 ：   Lib / bz2 . py
在 其余 的 情况 下   " __ main __.__ spec __ "   会 被 设为   " None " ， 因为 用于 填充   " __ main __ "   的 代码 不 直接 与 可 导入 的 模块 相对 应 :
( " print ( ) "   函数 会 直接 调用   " str ( ) " 。 )   这些 处理程序 都 是 可选 的
根据   str   字符串 值 返回 一个 新 的   " PyLongObject "   ，   base   指定 基数
栅栏 对象
HTTPResponse   对象
（ 由   Florent   Xicluna   和   Fredrik   Lundh   在   bpo   6472   中 贡献 。 ）
[   脚注   ]
注解 :
定义 选项
whence   的   0   值 表示 从文件 开头 起 算 ， 1   表示 使用 当前 文件 位置 ， 2   表示 使用 文件 末尾 作为 参考点
特殊 海龟 方法   " begin _ poly ( ) "   开始 记录 多边形   " end _ poly ( ) "   结束 记录 多边形   " get _ poly ( ) "   获取 多边形   " clone ( ) "   克隆   " getturtle ( ) "   |   " getpen ( ) "   获取 海龟 画笔   " getscreen ( ) "   获取 屏幕   " setundobuffer ( ) "   设置 撤消 缓冲区   " undobufferentries ( ) "   撤消 缓冲区 条目 数
在 处理 文件 对象 时 ， 最好 使用   " with "   关键字
如果   " sys . modules "   中 存在 指定 名称 的 模块 对象 ， 加载 器 必须 使用 已 存在 的 模块
" date "   对象
分析 和 跟踪
解包 单精度 浮点数
将   " KEY _ MOUSE "   事件 推送 到 输入 队列 ， 将 其 与 给定 的 状态 数据 进行 关联
跨 设备 链接
（ 由   Zackery   Spytz   在   bpo   4603   中 贡献 。 ）
在   " PYTHONTZPATH "   中 指定 的 相对路径 部分 将 不会 被 使用 ， 但 在 其他 情况 下当 指定 相对路径 时 的 行为 该 实现 是 有 定义 的 ； CPython   将 引发   " InvalidTZPathWarning " ， 而 其他 实现 可 自由 地 忽略 错误 部分 或是 引发 异常
在   3.5   版 更改 :   将 结果 从 元组 改为 命名 元组
国际化
include _ default   如果 为 真值 ， 则 会 同时 打印 默认 类型
请 不要 在 家里 尝试 ， 骚年 ！
当   indent   为   " None "   时 ， 默认值 取   " ( ' ,   ' ,   ' :   ' ) " ， 否则 取   " ( ' , ' ,   ' :   ' ) "
加载 一个 共享 库到 进程 中 并 将 其 返回
在   3.6   版 更改 :   在   POSIX   上   cwd   形参 接受 一个   path   like   object
弃用
使用   Python   编程 由   Mark   Lutz   所著 的 书籍 ， 对   Tkinter   进行 了 完美 的 介绍
源代码 ：   Lib / html / parser . py
特别 地 ， 此 函数 支持 以下 格式 的 字符串 ：
返回 当前 已 传给   " update ( ) "   方法 的 数据 摘要
如果 遇到 匹配 上述 样式 的 模块 ， 调试器 将 不会 进入 来自 该 模块 的 堆栈 帧
3.8   新版 功能 .
小 函数 和   lambda   表达式
文档
" d "   ( " float " )   [ double ]   将 一个   C   " double "   双 精度 浮点数 转化 为   Python   浮点数 类型 数字
共享   " ctypes "   对象
参数 :   master   可 容纳   ScrolledCanvas   的   Tkinter   部件 ， 即 添加 了 滚动条 的   Tkinter   canvas
PEP   370 :   分 用户 的   site   packages   目录 .
文档 指明 该 结构 的 任何 字段 都 不是 公有 的 ， 因此 我们 希望 没人 在 使用 它们
3.8   新版 功能 .
写入   bytes   like   object   b   并 返回 写入 的 字节数
此 操作 不 受 上下文 影响 并且 是 静默 的 ： 没有 更改 标志 且 不 执行 舍入
Python   3.5 . 3   正式版
PEP   314 :   Python 软件包 的 元 数据   v1.1
数字 和 字符串
将   value   以   plist   格式 字节 串 对象 的 形式 返回
argc   是 位置 参数 的 数量
请 注意 ， 如果 两个 进程 （ 或 线程 ） 同时 尝试 读取 或 写入 管道 的 同 一端 ， 则 管道 中 的 数据 可能 会 损坏
文档
" turtle "   海龟 绘图
注解 :
所有   " Cmd "   的 子类 继承 一个 预定 义   " do _ help ( ) "
例如 :
抛出 异常
https : / / www . chem . gla . ac . uk / ~ louis / software / faq / q1 . html   设置 环境变量 （ For   Windows   2000 / NT ） ， Louis   J
reverse   为 一个 布尔值
class :   timedelta   用法 示例
请参阅 编解码器 基类 了解 有关 编解码器 错误处理 的 更 多 信息
发生 异常 时 ， 它 可能 具有 关联 值 ， 也 称为 异常 参数
可用 的 预制 库 加载 器有 如下 这些 :
文档
参见 :
" ' store _ const ' "   存储 被   const   命名 参数 指定 的 值
许多 是 在 靠近 它们 被 使用 的 地方 定义 的   （ 例如   " Py _ RETURN _ NONE " ）
注解 :
这个 模块 将 在 初始化 时 被 自动 导入
如果 要 在 长时间 运行 的 操作 期间 从 SQLite 调用 （ 例如 更新 用户界面 ） ， 这 非常 有用
其中   key   和   reverse   参数 会 传递 给 所 创建 列表 的   " sort ( ) "   方法
要 根据 一个样 本来 估算 方差 ， 通常   " variance ( ) "   函数 是 更好 的 选择
字符串 的 项 是 字符
这个 函数 返回   func   对象 ， 可以 把 它 当作 装饰 器 使用
下 标值 的 语法 必须 恰为 两个 值 ： 参数 列表 和 返回 类型
这个 列表 看起来 有 四个 元素 ， 但 实际上 包含 三个   :   " fee " ,   " fiefoo "   和   " fum "
新增 模块
ctypes   参考手册
递归 操作 会 按 排序 顺序 添加 条目
从栈 中弹 出 一个 可选 的   fmt _ spec   ， 然后 是 一个 必须 的   value
例如 :
队列 不 要求 具有 任务 跟踪   API ，   这 意味着 你 可以 为   queue   使用   " SimpleQueue "   实例
如果   empty ( )   返回   " False "   ， 不 保证 后续 调用 的   get ( )   不 被 阻塞
在   o1   支持 的 前提 下该 操作 将 原地 执行
以下 是 使用 缓存 通过 动态 规划 计算 斐波 那契 数列 的 例子
从 函数 返回   " Py _ False "   时 ， 需要 增加 它 的 引用 计数
它 是 一个 有用 的 基础 类 ， 对于 你 想 自定义 的 类似 列表 的 类 ， 可以 继承 和 覆盖 现有 的 方法 ， 也 可以 添加 新 的 方法
如果 你 的 C 函数 没有 有用 的 返回值 ( 返回   " void "   的 函数 ) ， 则 必须 返回   " None "
此 模块 中 的 所有 函数 均 接受 一个 文件 描述符   fd   作为 第一个 参数
在 此 记录器 上 记录   " CRITICAL "   级别 的 消息
撤销 库 的 初始化 ， 使 终端 返回 正常 状态
除了 启用 调试模式 外 ， 还要 考虑 :
当 提供 的 缓冲区 对象 太小 而 无法 读取 消息 时 ，   " Connection . recv _ bytes _ into ( ) "   引发 的 异常
无论 何种 情况 ， 当 启用 调试 时 它们 都 将 被 显示 为 调试 输出 的 错误 消息
当 文件 被 合并 到 程序 中 时 ， 对 在 文件 代码 中 这些 函数 和 数据 的 全部 引用 都 会 被 改为 指向 程序 中 函数 和 数据 在 内存 中 所 放置 的 实际 位置
从   " optparse "   到   " argparse "   的 部分 升级 路径 :
将   " except   X ,   T "   转换 为   " except   X   as   T "
参数 解释 同   " debug ( ) "
只有 在 类 或 模块 体 静态 地 包含   variable   annotations   时才 会 发出 此 操作码
代理
请 注意   " super ( ) "   是 作为 显式 加点 属性 查找 的 绑定 过程 的 一部分 来 实现 的 ，   例如   " super ( ) .__ getitem __ ( name ) "
运行 当前 行 ， 在 第一个 可以 停止 的 位置 （ 在 被 调用 的 函数 内部 或 在 当前 函数 的 下 一行 ） 停下
PEP   593   引入 了 一种   " typing . Annotated "   类型 以 使用 上下文 专属 的 元 数据 来 装饰 现有 类型 ， 并 将 新 的   " include _ extras "   形参 添加 到   " typing . get _ type _ hints ( ) "   以 在 运行 时 访问 元 数据
bpo   26930 :   更新 OS   X   10.5 + （ 仅 32 位 ） 安装程序 以 构建 并 链接 OpenSSL   1.0 . 2h
提取 扩展 函数 的 参数
3.2   新版 功能 .
由   Matthias   Bussonnier   在   bpo   36952   中 贡献 。 ）
但 要 令 它 真正 有用   ， 我们 需要 实现 从   Python   到   SQLite   再 回到   Python   的 双向 转换
背景
因为 注释 是 用来 阐明 代码 的 ， 不会 被   Python   解释 ， 所以 在 键入 这些 例子 时 ， 注释 是 可以 被 忽略 的
对于 基数   2 ， 8 ， 或   16   ， 返回 的 字符串 将 分别 加上 基数 标识   " ' 0b ' " ,   " ' 0o ' " ,   or   " ' 0x ' "
参见 :
[ 图片 ：   Explanation   of   tree   mode   parameters . ] [ 图片 ]
可用性 :   对于   LibreSSL   和   OpenSSL   >   1.1 . 0   不可 用
" \ g < name > "   将 使用 名为   " name "   的 组 匹配 的 子 字符串 ， " \ g < number > "   使用 相应 的 组号
当 达到 这个 大小 的 时候 ， 插入 操作 将 阻塞 至 队列 中 的 项目 被 消费 掉
以 新建 模式 打开 时 如果 文件 已 存在 则 将 引发   " FileExistsError "
请 注意 即使 在 传递 给   " exec ( ) "   函数 的 代码 的 上下文 中 ，   " return "   和   " yield "   语句 也 不能 在 函数 定义 之外 使用
根据   real   和   imag   返回 一个 新 的 C 类型   " PyComplexObject "   对象
如果 最后 一位 朝零 的 方向 舍入 后 为   0   或   5   则 舍入 到 零 的 反 方向 ； 否则 舍入 方向 为 零
信号量 对象
3.4   新版 功能 .
" xml . dom . pulldom . DOMEventStream " ,   " wsgiref . util . FileWrapper "   和   " fileinput . FileInput "   的   " __ getitem __ ( ) "   方法 已 被 弃用
此 模块 提供 了 非类 对象 构造 器 的 相关 配置 信息
根据   RFC   2231   解码 参数 列表
你 可以 实例 化 自己 的   " Random "   类 实例 以 获取 不 共享 状态 的 生成器
如果   " proxy "   是 一个 代理 且 其 指涉 的 是   " obj "   ,   那么 下面 的 表达式 :
Python   解释器 及 丰富 的 标准 库 ， 提供 了 适用 于 各个 主要 系统 平台 的 源码 或 机器码 ， 这些 可以 到   Python   官网   https : / / www . python . org /   免费 获取 ， 并 可 自由 地 分发
你 可以 创建 一个 异常 并 同时 使用   " with _ traceback ( ) "   异常 方法 （ 该 方法 将 返回 同一 异常 实例 ， 并 将 回溯 对象 设为 其 参数 ） 设置 自己 的 回溯 ， 就 像 这样 :
‘ 标准 大小 ’ 列是 指当 使用 标准 大 小时 以 字节 表示 的 已 打包 值 大小 ； 也 就是 当 格式 字符串 以   " ' < ' " ,   " ' > ' " ,   " ' ! ' "   或   " '   ' "   之一 开头 的 情况
使用 列表 作为 键时 进行 复制
新 迭代 器会 无限 重复 这些 元素
然后 对象 的   ID   可以 在 其它 数据结构 中 使用 ， 而无须 强制 对象 保持 存活 ， 但 处于 存活 状态 的 对象 也 仍然 可以 通过   ID   来 提取
实时 递减 间隔 计时器 ， 并 在 到期 时 发送   " SIGALRM "
对于 每个 这样 的 实体 ， 都 有 单独 的 小节 来 标识 实体 的 配置 方式
（ 请参阅   PEP   383   了解 详   情 。 ）
（ 有关 旧版本 的 信息 ， 请参阅 HISTORY 文件 。 )
此 模块 与   " dbm "   模块 很 相似 ， 但是 改用   GNU   库   " gdbm "   来 提供 某些 附加 功能
参数 :   picname   一个 字符串 ,   gif   文件名 ,   " " nopic " " ,   或   " None "
如果 等待 被 取消 ， 则   aw   指定 的 对象 也 会 被 取消
名称 的 重新 定义 会 覆盖 旧 的 定义 ， 所以 通常 来说 这 不是 问题
在   3.5   版 更改 :   The   etype   argument   is   ignored   and   inferred   from   the   type   of   value   .
除了 标准 的 数字 属性 ， 十进制 浮点 对象 还有 许多 专门 的 方法 ：
默认 情况 下 ， 一个   help   动作 会 被 自动 加入 解析器
在   3.4   版 更改 :   Set   " __ loader __ "   if   set   to   " None " ,   as   if   the   attribute   does   not   exist .
bpo   34170 :   X   dev :   即使 启用 了 开发 模式 ， 现在 也 可以 使用 PYTHONMALLOC 重载 内存 分配器
关键 函数
它 的 构造 器 需要 一个   " tkinter . Canvas "   或   " ScrolledCanvas "   作为 参数
bpo   24618 :   修复 了 当 创建 代码 对象 时 使用 的 变量名 元组 太小 或 参数 太 多 导致 读取 无效 内存 的 问题
对应 于 可选 参数 的 变量 不会 由   args   给出 的 值 填充 ； 它们 将 由 调用者 来 初始化
元组 和 序列
" unittest . TestCase . addCleanup ( ) "   中 的   function
" transport . sendto ( ) "   发送数据 到 远程 链接 端
就 地 实现   " TOS   TOS1   < <   TOS "
这 并 不能 保证 私密性 ： 外部 用户 仍然 可以 访问   " _ classname __ spam "   属性 ， 私有 变量值 也 在 对象 的   " __ dict __ "   中 可见
二进制 存储 （ 如 文件 ） 上 的 文本   I / O   比 同一 存储 上 的 二进制   I / O   慢得 多 ， 因为 它 需要 使用 字符 编解码器 在 Unicode 和 二进制 数据 之间 进行 转换
返回 当前 线程 的   “ 线程 标识符 ”
安全
对 元素 使用 函数
如果 文件 扩展名 不是   " ' . gz ' "   或   " ' . bz2 ' " ， 文件 会以 正常 方式 打开 （ 即 使用   " open ( ) "   并且 不带 任何 解压 操作 ）
通过 它们 返回 的 任何 引用 都 是 暂借 的
源代码 ：   Lib / cgi . py
该类 实现 有 界 信号量
有关 更 多 信息 ， 请参阅 配置 库 的 日志 记录
" namedtuple ( ) "   命名 元组 的 工厂 函数
每条 规则 的 开头 是 一个 名称   ( 即该 规则 所 定义 的 名称 )   加上   " : :   "
（ 在 某些 情况 下 ， 当 模块 确实 能够 通过 调用 其它   " PyErr _   ( ) "   函数 给出 更加 详细 的 错误 消息 ， 并且 在 这些 情况 是 可以 这样 做 的
这个 位有 几种 特殊 用途
如果 不带 参数 执行 ， 将 列出 所有 中断 ， 包括 每个 断点 、 命中 该 断点 的 次数 、   当前 的 忽略 次数 以及 关联 的 条件 （ 如果 有 ）
静态方法 是 可行 的 ：
从 Python   3.2 开始 ， 受限 API 可用 的 函数 集 记录 在   PEP   384
PEP   3129 :   类 装饰 器 .
它 通常 不 直接 使用 模块   " urllib . request "   用 它 来 处理 使用   HTTP   和   HTTPS   的   URL
新 模块 既 可以 是 百分百 的 纯   Python ， 也 可以 是 用   C   写 的 扩展 模块 ， 或者 可以 是 一组 包含 了 同时 用   Python   和   C   编码 的   Python   包
一个 具体 的   " datetime . tzinfo "   子类 ， 它 代表 一个 由 字符串   " key "   所 指定 的   IANA   时 区
然而 ， 有些 寄信人 不 严格遵守 这一 格式 ， 所以 这种 情况 下   " parsedate ( ) "   会 尝试 猜测 其 形式
原地 运算符
这里 演示 了 如何 定义 类似 的 派生 枚举 ； 例如 一个 混合 了   " str "   而 不是   " int "   的   " StrEnum "
默认 实现 由   " ConfigParser "   来 使用
" HH : MM : SS . ffffff + HH : MM [ : SS [ . ffffff ] ] " ， 如果   " utcoffset ( ) "   不 返回   " None "
last _ node   :   一个 布尔值 ， 指明 所 处理 的 节点 是否 为 最后 一个   ( 连续 模式 下则 为   False   )
在   3.6   版 更改 :   Use   " Py _ FileSystemDefaultEncodeErrors "   error   handler .
重置 栅栏 为 默认 的 初始 态
返回 列表 的 顺序 要 看 是 返回 一个 栈 还是 一个 回溯 ： 栈 返回 最新 的 框架 ， 回溯 返回 最旧 的 框架
" html "   超文本 标记 语言 支持
仅限 位置 形参
" Generic "   基类 定义 了   " __ class _ getitem __ ( ) "   ， 使得   " LoggedVar [ t ] "   作为 类型 有效 ：
交互 模式
构建
必须 指定   " stdin   PIPE "   和   " stdout   PIPE "
可用性 注释
调试 一个   curses   应用程序 时常 会 发生 ， 一个 应用程序 还 未能 还原 终端 到 原本 的 状态 就 意外 退出 了 ， 这会 搅乱 你 的 终端
3.7   新版 功能 .
在 使用 了 某个 数据库 不 支持 的 方法 或 数据库   API   时 引发 的 异常 ， 例如 在 一个 不 支持 事务 或 禁用 了 事务 的 连接 上 调用   " rollback ( ) "   方法 等
这 是因为 处理程序 的 配置 是 使用 你 的 库 的 应用程序 开发人员 的 权利
默认 下 ， 模块 对 这样 的 序列 接受 和 输出 （ 当 在 原始   " str "   存在 时 ） 代码 点
函数   " math . factorial ( ) "   不再 接受 非 整数 类 参数
对于 非 检查 型   " . pyc "   文件 ， 只要 其 存在   Python   就 会 直接 认定 缓存 文件 有效
如何 配置   Screen   和   Turtle
如果 缓存 中 的 文件 在 磁盘 上 发生 了 改变 ， 而 你 需要 更新 后 的 版本 即可 使用 此 函数
bpo   42214 ： 修正 了 PEG 解析器 在 检查   " barry _ as _ flufl "   规则 中 的   “ !   ”   标记 时 可能 的 崩溃
Python   3.5 . 5   正式版
以下 是 该 代码 的 运行 结果 ：
当 使用   " asyncio . Task "   的 实例 时 ， 函数   " asyncio . wait _ for ( ) "   现在 会 正确 地 等待 撤销
文本   I / O
3.7   新版 功能 .
超过   N   行 （ 默认值 为   50 ） 的 输出 将 被 折叠为 一个 按钮
迭代 器 在 两者 较 短 的 长度 处 停止
" code "   解释器 基类
当 直接 应用 于   " multipart / alternative "   或非   " multipart "   时 ， 将 返回 一个 空 迭代 器
访问   dll   的 导出 变量
如果   timeout   是 个 正数 ， 将 最 多 阻塞   timeout   秒 ， 如果 在 这 段时间 内 项目 不能 得到 ， 将 引发   " Empty "   异常
另 一种 替代 创建 方法 的 描述 见   Functional   API
一个   " tzinfo "   的 实体 子类 可能 需要 实现 以下 方法
" sqlite3 "   SQLite   数据库   DB   API   2.0   接口 模块
从 队列 中 移除 并 返回 一个 项目
见   [ 1 ] .
一个   " Counter "   是 一个   " dict "   的 子类 ， 用于 计数 可 哈希 对象
MailmanProxy   对象
考虑 这个 函数
如果 你 希望 每次 运行 重新 开始 ， 而 不是 记住 先前 运行 的 消息 ， 则 可以 通过 将 上例 中 的 调用 更 改为 来 指定   filemode   参数 :
代表   C   16   位   " signed   int "   数据类型
类似 于   " PyCode _ New ( ) " ， 但 带有 一个 额外 的   " posonlyargcount "   用于 仅限 位置 参数
如何 读取 一个   gzip   压缩 的   tar   归档 并 显示 一些 成员 信息 :
默认 将   " [ section ] "   匹配 到 名称   " " section " "
因此 ， 如果   " f "   是 一个   text   file   对象 ， 我们 可以 这样 做 :
开发工具
教程
空 列表 表示 调用 超时 ， 没有 任何 文件 描述符 报告 事件
海龟 移动 到 一个 绝对 坐标
n   为 期望 的 缓冲区 内 列表 元素 数量
多线程 注意事项 ： 当 两个 线程 同时 调用 此 方法 时 ， 它们 有 可能 将 获得 相同 的 返回值
等价 于 :
注意 ， 0   和   NaN   都 可 带有 符号
一个 等价 的 检测 是   " y . find ( x )   !   1 "
示例
xlist   ： 等待 “ 异常情况 ” （ 请参阅 当前 系统 的 手册 ， 以 获取 哪些 情况 称为 异常情况 ）
已知 某些 配置文件 会 包括 不带值 的 设置 ， 但 其 在 其他 方面 均 符合   " configparser "   所 支持 的 语法
" secrets "   模块 提供 了 一些 生成 安全 凭据 的 函数 ， 适用 于 诸如 密码 重置 、 难以 猜测 的   URL   之类 的 应用 场景
如果 存在   " "   identifier " "   这样 的 形式 ， 它会 被 初始化 为 一个 元组 来 接收 任何 额外 的 位置 参数 ， 默认 为空 元组
3.5   新版 功能 .
Deprecated   since   version   3.3 ,   will   be   removed   in   version   3.10 :   已 将 容器 抽象 基类 移至   " collections . abc "   模块
在 那 之后 ， Python   又 增加 了 两种 格式化 方法 :   " string . Template "   ( 在   Python   2.4   中 新增 )   和   " str . format ( ) "   ( 在   Python   2.6   中 新增 )
2to3   一个 将   Python   2 . x   代码 转换 为   Python   3 . x   代码 的 工具 ， 能够 处理 大部分 通过 解析 源码 并 遍历 解析 树可 检测 到 的 不 兼容问题
因此 我们 在 这里 使用 了 局部 旗标   " a "
此 方法 应该 仅 在 低 层级 的 基于 回调 的 代码 中 使用
如果 没有 给出 时间 ， 则 默认值 为 02 : 00 : 00
之前 只 支持 位置 参数
如果   DST   未 启用 则 返回   " timedelta ( 0 ) "
注解 :
它会 继续执行 最近 的 外层 循环 的 下 一个 轮次
在   3.3   版 更改 :   get _ method   now   looks   at   the   value   of   " Request . method " .
3.4   新版 功能 .
isolation _ level   参数 ， 请 查看   " Connection "   对象 的   " isolation _ level "   属性
某些   " TextIOBase "   的 实现 ， 例如   " StringIO "   可能 并 无 下层 缓冲区 的 概念 ， 因此 调用 此 方法 将 引发   " UnsupportedOperation "
" for "   语句 用于 对 序列 （ 例如 字符串 、 元组 或 列表 ） 或 其他 可 迭代 对象 中 的 元素 进行 迭代 :
3.2   新版 功能 :   添加 了 对 上下文 管理器 协议 的 支持
绝不 要 未经 预先 检验 就 从不 可靠 的 源 中 提取 归档文件
创建 一个 解析器
在 其他 情况 下 返回   default
以下 简单 例子 演示 了 一个 模块 在 被 导入 时 如何 从文件 初始化 一个 计数器 ， 并 在 程序 终结 时 自动 保存 计数器 的 更新 值 ， 此 操作 不 依赖于 应用 在 终结 时 对此 模块 进行 显式 调用
默认 是   " None " ， 表示 不 需要 调用 任何 方法
errors   参数 所 允许 的 值 集合 可以 使用   " register _ error ( ) "   来 扩展
3.4   新版 功能 .
"   X   pycache _ prefix   PATH "   允许 将   " . pyc "   文件 写入 以 给定 目录 为根 的 并行 树 ， 而 不是 代码 树
电子邮箱 :   distutils   sig @ python . org
Tk   接口 位于 一个 名字   " _ tkinter "   的 二进制 模块 当中
Python   堆 内存 的 管理 是 由 解释器 来 执行 ， 用户 对 它 没有 控制权 ， 即使 他们 经常 操作 指向 堆内 内存 块 的 对象 指针 ， 理解 这 一点 十分 重要
每个 测试 的 关键 是 ： 调用   " assertEqual ( ) "   来 检查 预期 的 输出 ；   调用   " assertTrue ( ) "   或   " assertFalse ( ) "   来 验证 一个 条件 ； 调用   " assertRaises ( ) "   来 验证 抛出 了 一个 特定 的 异常
典型 使用 :
多线程 可以 提高 应用 的 响应 效率 ， 当 接收 用户 输入 的 同时 ， 保持 其他 任务 在 后台 运行
源文件 的 字符 编码
格式化 程序
参数 :   filename   一个 字符串 ， 表示 文件名
" __ file __ "   是 可选项
因此 ，   在 具有 严格 相等 不 变量 的 会计 应用程序 中 ，   decimal   是 首选
有关   " TarFile "   对象 以及 所 允许 的 关键字 参数 的 详细信息 请参阅   TarFile   对象
BaseHandler   对象
多媒体 服务
UUencode   与   UUdecode   函数
3.2   新版 功能 .
ignore   是 需要 忽略 的 文件名 列表 ， 且 默认 为   " filecmp . DEFAULT _ IGNORES "
匹配 对象 实例 也 有 几个 方法 和 属性 ； 最 重要 的 是 ：
参见 :
Python   3.6 . 5   中 的 重要 变化
有用 的 处理程序
此 模式 会 在 输入 时 将 回车 转换 为 换行符 ， 并 在 输出 时 将 换行符 转换 为 回车 加 换行
引发 一个 审计 事件   " winreg . DeleteKey " ， 附带 参数   " key " ,   " sub _ key " ,   " access "
fromlist   给出 了 应该 从 由   name   指定 的 模块 导入 对象 或子 模块 的 名称
目录   a
itemlist   可以 为   " NULL " ， 表示 赋值 为 一个 空 列表 （ 删除 切片 ）
如果 你 要 序列化 和 反 序列化   Python   对象 ， 请 改用   " pickle "   模块 其 执行 效率 相当 ，   版本 独立性 有 保证 ， 并且   pickle   还 支持 比   marshal   更 多样 的 对象 类型
所有 其他 参数 （ 包括 关键字 参数 ） 都 相当于 传递 给   " dict "   的 构造函数
在 这 两种 情况 下 ， 当 不再 需要 缓冲区 时 必须 调用   " PyBuffer _ Release ( ) "
如果 库 用户 配置 应用程序 使用 的 日志 记录 ， 可能 是 配置 将 添加 一些 处理程序 ， 如果 级别 已 适当 配置   ， 则 在 库 代码 中 进行 的 日志 记录 调用 将 正常 地 将 输出 发送给 这些 处理程序
指定 自定义 的 过滤器 链
当 于   " strptime ( ) "   方法 一起 使用 时 ， 前导 的 零 在 格式   " % d " ,   " % m " ,   " % H " ,   " % I " ,   " % M " ,   " % S " ,   " % J " ,   " % U " ,   " % W "   和   " % V "   中是 可选 的
这种 方式 不是 线程 安全 的 ， 而且 也 不受 推荐
参数   shell   （ 默认 为   " False " ） 指定 是否 使用   shell   执行程序
3.6   新版 功能 .
上下文 对象 管理 函数 :
文件名 、 函数 名 和 行号 作为 位置 参数 提供 给 跟踪 脚本 ， 必须 使用   " $ arg1 " ,   " $ arg2 " ,   " $ arg3 "   访问 ：
3.5 . 4   新版 功能 .
Docutils   reStructuredText   的 基础 解析器 和 工具集
已 缓存 字节 码 的 失效
压缩   data   并 返回   bytes   对象 ， 这个 对象 含有   data   的 部分 或 全部内容 的 已 压缩 数据
如果 你 有 任何   Python   3.7 +   应用 仍然 依赖于 传统 的 系统 编码 格式 ， 则 推荐 设置 临时 环境变量 或 使用   "   X   utf8 "   命令行 选项
并会 在   " gmtime ( ) "   出错 时 引发   " OSError "   而 不是   " ValueError "
尝试 寻找 一个 库 并 返回 路径 名称
GNU   tar   格式
仅限   Windows ： 返回 调用 线程 中 系统   " LastError "   变量 的   ctypes   私有 副本 的 当前 值
在   3.4   版 更改 :   A   default   value   can   now   be   set   in   subclasses ;   previously   it   could   only   be   set   via   the   constructor   argument .
示例   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
在 这个 例子 中 ， "   l "   被 称为 可 选 参数
模块   " tkinter . commondialog "   Tkinter   标准 对话框 模块
如果 存在   " readline ( ) "   方法 ， 则 它 会 被 当作 一个 文件 类 对象 并 使用   " read _ file ( ) "   来 读取 ； 在 其它 情况 下 ， 它会 被 当作 一个 文件名 并 传递 给   " read ( ) "
值 将 由   " _ generate _ next _ value _ ( ) "   来 选择 ， 该 函数 可以 被 重载 :
" selectors "   高级   I / O   复用 库
如果 未找到 模块 则 引发   " ZipImportError "   错误
它 替代 了 原先 的 调用   " PyMethod _ New ( func ,   NULL ,   class ) "
模块 级 属性
非 线程 安全
必须 同时 禁用 这两项 特性 以 强制 解释器 使用   " ASCII "   而 不是   " UTF   8 "   作为 系统 接口
最 基础 的 用法 是 通过 它 抽象 出来 的 高级 API 来 操作 socket 或者 Windows 命名 管道
这会 在 十进制 位 的 左边 保留 至多   3   个 数码 ， 并 可能 要求 添加 一至 两个 末尾 零
操作系统 接口
Python   也 提供 了 一些 工具 ， 可以 在 你 真的 想要 知道 一个 浮点数 精确 值 的 少数 情况 下 提供 帮助
" UserDict "   对象
以下 部分 描述 这些 参数 如何 使用
捕获 同步 错误 是 没有 意义 的 ， 例如   " SIGFPE "   或   " SIGSEGV "   ， 它们 是 由   C   代码 中 的 无效 操作 引起 的
返回 小时 ， 从 0 到 23 的 整数
与 许多 其他 语言 不同 ， 并非 所有 语言 构件 都 是 表达式
它们 自   Python   3.2   起 已 被 弃用
注意 ： 循环 有 可能 是   " None "
其他 平台
" ctypes . util "   模块 提供 了 一个 函数 ， 可以 帮助 确定 需要 加载 的 库
" ctime ( secs ) "   等价 于   " asctime ( localtime ( secs ) ) "
载入 一个   readline   历史 文件 ， 并 将 其 添加 到 历史 列表
此 行为 已不受 支持 并 可能 导致 内部 错误
当   " parse _ args ( ) "   被 调用 ， 选项 会以   "   "   前缀 识别 ， 剩下 的 参数 则 会 被 假定 为 位置 参数 :
ob   不能 为   " NULL "
" ProactorEventLoop "   有 下列 限制 :
bpo   35623 :   修复 了 在 排序 超长 列表 时 崩溃 的 问题
3.2   新版 功能 .
相当于   " self . date ( ) . isoweekday ( ) "
在 某些 平台 上 这样 的 码位 会不加 修改 地 原样 输出 ， 而 在 其他 平台 上   " strftime "   则 可能 引发   " UnicodeError "   或 只 返回 一个 空 字符串
参见 :
3.3   新版 功能 .
" html . parser "   简单 的   HTML   和   XHTML   解析器
某些 时候 对 派生类 的 重载 很 有用
这里 是 辅助 模块 :
其中 两个 最 简单 的   " urllib . request "   用于 从 URL 检索 数据 ， 以及   " smtplib "   用于 发送 邮件 :
iterable   的 项 通常 为 数字 ， 而   start   值则 不 允许 为 字符串
最后 一个 模块 用于 为 完整 程序 的 执行 提供 局部 和 全局 命名 空间
Deprecated   since   version   3.8 ,   will   be   removed   in   version   3.10 :   loop   形参
创建 类 对象
如果 有 关键字 参数 ， 它们 必须 被 设为 和 给定 值 同名 的 属性
generic   type   泛型 类型 可以 被形 参化 的   type   ； 通常 为 容器 类型 例如   " list "
3.9   版后 已 移除 :   " builtins . type "   now   supports   " [ ] "
下面 的   nlines   行会 被 清空
在 一个 复杂 的 计算 中 ， 我 怎样才能 保证 不会 得到 由 精度 不足 和 舍入 异常 所 导致 的 虚假 结果
假设   " a "   是 整数 ， 会 发生 什么 ？ 如果 有 一个 名为   " x "   的 全局变量 ， 它 是否 会 在 with 块 中 使用 ？ 如 您 所见 ， Python 的 动态 特性 使得 这样 的 选择 更加 困难
如果   delete   为   true （   默认值 ） ， 则 文件 会 在 关闭 后 立即 被 删除
它们 应该 只 在 你 手工 校准 分析器 的 情况 下 才 会 出现 ， 实际上 结果 比 没有 校准 的 情况 要 好
如果   " tzinfo "   为   " None " ， 则 返回   " None " ， 否则 返回   " self . tzinfo . utcoffset ( None ) " ， 并且 在 后者 不 返回   " None "   或 一个 幅度 小于 一天 的   a   " timedelta "   对象 时 将 引发 异常
在   args   中 （ 或者 当   args   为   " None "   时则 是 在 命令行 中 ） 指定 的 文件 会 被 编译 并 将 结果 字节 码以 正常 方式 来 缓存
当且 仅 当 内部 旗标 在 等待 调用 之前 或者 等待 开始 之后 被 设为 真值 时此 方法 将 返回   " True " ， 也就是说 ， 它 将 总是 返回   " True "   除非 设定 了 超时 且 操作 发生 了 超时
如果 你 想要 一个 用 列表 索引 的 字典 ， 只 需先 将 列表 转换 为 元组 ； 用 函数   " tuple ( L ) "   创建 一个 元组 ， 其 条目 与 列表   " L "   相同
写入 前 ，   所有 非 字符串 数据 都 先用   " str ( ) "   转化 为 字符串 再 写入
" with "   语句
可以 使用   " waitstatus _ to _ exitcode ( ) "   来 将 退出 状态 转换 为 退出 码
解析 参数
这个 异常 与 内置   " TimeoutError "   异常 不同
负面 前向 消除 了 所有 这些 困扰 ：
此 方法 也 可用 来 绘制 正多边形
" email . utils "   模块 提供 如下 几个 工具
如果 使用 此 功能 ， 则 允许 通过 过滤器 发送到 指定 记录器 及其 子项 的 消息 ， 并 丢弃 所有 消息
在 实际 应用程序 中 ， " finally "   子句 对于 释放 外部 资源 （ 例如 文件 或者 网络连接   ） 非常 有用 ， 无论 是否 成功 使用 资源
代码 块 在 执行 帧 中 被 执行
PEP   205   弱 引用 由   Fred   L
当 内存 缓存 区 的 数据 以 参数 形式 传递 用来 构建 对象 时 ， 如   " s "   和   " s # "   格式 单元 ， 会 拷贝 需要 的 数据
（ 由   Benjamin   Peterson   在   bpo   20188   中 贡献 。 ）
返回 分隔 这些 区间 的   " n   1 "   个 分隔 点 的 列表
如果   encode _ chunked   为   " False " ， HTTPConnection   对象 会 假定 所有 的 编码 都 由 调用 代码 处理
对于 给定 的 种子 ， 具有 相等 加权 的   " choices ( ) "   函数 通常 产生 与 重复 调用   " choice ( ) "   不同 的 序列
3.9   新版 功能 .
" __ cause __ "   中 的 显式 串连 异常 如果 存在 将 总是 显示
对此 文件 将 不能 执行 随机 查找
例如 ， 在   Windows   上 :
例如 ， 由于 过滤器 和 格式化 器 这样 的 对象 是 匿名 的 ， 一旦 完成 配置 ， 在 增加 配置 时 就 不 可能 引用 这些 匿名 对象
警告 :
func   参数 有 几种 用法
Kqueue   对象
（ 由   Giampaolo   Rodol à   在   bpo   6706   中 贡献 。 ）
在   3.8   版 更改 :   vars   中 的 条目 将 不 在 结果 中 出现
" del "   语句
全局 函数   " clear "   所 对应 的 是   Turtle   方法   " clear "
注解 :
要 导入 的 对象 将 从此 对象 中 提取 并 赋值 给 它们 对应 的 名称
为了 方便使用 ， " section : "   部分 可 被 省略 ， 插值 会 默认 作用 于 当前 小节 （ 可能 会 从 特殊 小节 获取 默认值 ）
操作系统 实用程序
在 当前 语言 环境 下 表示 星期 几 的 数组
PEP   314   Python 软件包 的 元 数据   v1.1   PEP   由   A . M
PEP   277   Unicode   file   name   support   for   Windows   NT   由   Neil   Hodgson   撰写   ;   由   Neil   Hodgson ,   Martin   von   L ö wis   和   Mark   Hammond   实现
使用 两个   Dummy   参数 以便 能够 传递   " listen ( ) "   给   onclick   方法
3.8   新版 功能 .
返回 一个 整数 代表 星期 几 ， 星期一 为 1 ， 星期天 为 7
返回 指针 所 指向 的 对象
如果 文件 不 存   在 ， 则 创建 该 文件
摘要 发布 重点
解析 命令行 选项 与 形参 列表
如果   value   是   " float "   ， 则 二进制 浮点 值 无损 地 转换 为 其 精确 的 十进制 等效值
[   参考 引用   ]
如果 未指定 本 参数 ， 默认 将会 检查 所有   3   种 类型 的 事件
del   语句 不 一定 调用   " __ del __ ( ) "   — —   它 只是 减少 对象 的 引用 计数 ， 如果 （ 引用 计数 ） 达到 零 ， 才 会 调用   " __ del __ ( ) "
互联网 访问
" concurrent . futures "   启动 并行任务
但是 ， 这篇 教程 的 目的 是 介绍 更加 复杂 的 用法 ， 大多数 以 HTTP 举例
这 极大 地 简化 了 需要 接受 任意 关键字 参数 的 函数 和 方法 的 实现
正态分布
不 添加 这一 选项 时 程序 没有 提示 任何 错误 而 退出 ， 表明 这一 选项 确实 是 可选 的
返回值 是 一个 标志 ， 指示 解释器 对 命令 的 解释 是否 应该 停止
如果 此 变量 在 运行 解释器 之前 被 设置 ， 它会 覆盖 通过   " encodingname : errorhandler "   语法 设置 的   stdin / stdout / stderr   所用 编码
AU _ read   对象
常见问题
第   5   和   6   行 对应   " Screen . screensize ( ) "   方法 的 参数
返回 的 函数 原型 会 创建 使用   Python   调用 约定 的 函数
返回 当前 行号 和 偏移 值
此 异常 会 在   " urlretrieve ( ) "   函数 检测 到 已 下载 的 数据量 小于 期待 的 数据量   （ 由   Content   Length   头 给定 ） 时 被 引发
在 末尾 添加 一个 新 的 动作
要 特别 注意   "   "   和   " + "   之间 的 区别 ； "   "   匹配 零次 或 更 多次 ， 因此 重复 的 任何 东西 都 可能 根本 不 存在   ， 而   " + "   至少 需要 一次
它 可 用于 构建 Python 包 或 运行 脚本 ， 但 不可 更新 且 没有 用户界面 工具
源代码 :   Lib / subprocess . py
这里 有 一个   " generate _ ints ( ) "   生成器 的 示例 :
" await "   " loop . sendfile ( ) "   通过 传输 通道 发送 一个 文件
" z "   ( " str "   or   " None " )   [ const   char   ]   和   " s "   一样
要 回复 到 先前 的 非 验证 行为 ， 可以 将   " ssl ._ create _ unverified _ context ( ) "   传递 给   context   参数
" html . entities "   HTML   一般 实体 的 定义
它 并 不 应该 直接 实例 化
Kevent   的 低级 接口
在   3.2   版 更改 :   增加 了   cafile   与   capath
请 考虑 使用 第三方 替代 例如   LibCST   或   parso
后 一种 技术 传统 上 涉及 较少 的 开销 （ 因为 代码 不 需要 检测 ） ， 但 只 提供 了 时间 花 在 哪里 的 相对 指示
参见 日志 级别 级别 列表
如果 解释器 使用   "   O "   选项 启动 ， 这个 例子 会 打印   " c _ long ( 1 ) "   ，   如果 使用   "   OO "   启动 ， 则 会 打印   " c _ long ( 2 ) "
模板 字符串 提供 了 由   PEP   292   所 描述 的 更 简便 的 字符串 替换 方式
子包 参考
从 队列 中 删除 并 返回 一个 元素
在   3.3   版 更改 :   " EnvironmentError " ,   " IOError " ,   " WindowsError " ,   " socket . error " ,   " select . error "   与   " mmap . error "   已 被 合并 到   " OSError "   ， 构造 器 可能 返回 其中 一个 子类
除了 普通 目录 之外 ， 单个   " PYTHONPATH "   条目 可以 引用 包含 纯 Python 模块 的   zip 文件 （ 源代码 或 编译 形式 ）
请参阅   " struct _ time "   以 获取 这些 对象 的 描述
如果   delay   为 零 ， 则 会 使用 非 阻塞 读取 ， 并且 当 没有 输入 在 等待 时   " getch ( ) "   将 返回   "   1 "
If   you   need   to   parse   untrusted   or   unauthenticated   data   see   XML   漏洞 .
意味着   " get ( ) "   会 像 正常 的   dict   那样 返回   " None " ， 而 不是 使用   " default _ factory "
别名 允许 嵌套 并 可 包含 能 在   pdb   提示符 下 合法 输入 的 任何 内容
在   3.4   版 更改 :   现在 在   Unix   平台 上 使用   " ' spawn ' "   启动 方法 时 支持 调用 该 方法
数量 较 少 但是 超长 的 行 可以 通过 在 输出 上 右击 来 折叠
在   3.6   版 更改 :   接受 一个 类 路径 对象
这些 模块 支持 标记 化 、 解析   、 语法分析 、 字节 码 反汇编 以及 各种 其他 工具
" logging "   Python   的 日志 记录 工具
如果 成功 将 返回   " 0 " ； 如果 不 成功 则 返回   "   1 "   并 设置 一个 异常
正则表达式 语言 相对 较小且 受限制 ， 因此 并非 所有 可能 的 字符串 处理 任务 都 可以 使用 正则表达式 完成
3.4   新版 功能 .
（ 由   Andrew   Svetlov   在   bpo   32972   中 贡献 。 ）
构建
在   3.4   版 更改 :   " filename "   属性 现在 将 是 传给 函数 的 原始 文件名 ， 而 不是 经过 编码 或 基于 文件系统 编码 进行 解码 之后 的 名称
在   3.2   版 更改 :   增加 了   style   参数
如果 指定 了   size   ， 将 至多 读取   size   个 字节
在   3.9   版 更改 :   Added   stripdir   ,   prependdir   ,   limit _ sl _ dest   and   hardlink _ dupes   arguments .
若 要 完全 覆盖   " sys . path "   ， 请 创建 与 DLL ( " python37 ._ pth " ) 或 可执行文件   ( “ python ._ pth ` ” ) 同名 的   " ._ pth "   文件 ， 并 为 要 添加 的 每个 路径 指定 一行   " sys . path "
增加 一个   pkg   config   " python   3.8   embed "   模块 用来 将   Python   嵌入 到 一个 应用 中 :   " pkg   config   python   3.8   embed   libs "   包含   "   lpython3.8 "
常数
在 函数调用 中 ， 关键字 参数 必须 跟随 在 位置 参数 的 后面
运行 阻塞 的 代码
返回 标准 的   " Logger "   类 ， 或是 最近 传给   " setLoggerClass ( ) "   的 类
默认 情况 下 ， 子目录 的 名称 与 包 的 名称 相同 ， 如果 没有   "   ExcludeVersion "   选项 ， 则 此 名称 将 包含 已 安装 的 特定 版本
指定 的 文件 会 被 打开 并 用作 日志 记录 的 流
交换 最后 两行 可以 修复 这个 问题 （ 或者 直接 删掉   " p . join ( ) " ）
而 一个   " lc _ letter "   则 是 任意 单个   " ' a ' "   至   " ' z ' "   字符
这 可以 防止 简单 循环 中 的 多余 消耗 ， 在 每次 迭代 中 可以 创建 和 销毁 全新 的 空位
Unpacker   对象
与   " min ( ) "   方法 相似 ， 但是 操作数 使用 绝对值 完成 比较
当 指定 名称 的 模块 在   " sys . modules "   中 找 不到 时 ， Python   会 接着 搜索   " sys . meta _ path " ， 其中 包含 元 路径 查找 器 对象 列表
paramflags   必须 为 一个 与   " argtypes "   长度 相同 的 元组
派生 的 枚举
"   o "   将 profile   结果 写入 文件 而 不是 标准 输出
注解 :
它会 被 设定 为 处在 位置   0
在   3.2   版 更改 :   restore _ signals   被 加入
详情 参见 指定 自定义 的 过滤器 链
引发 一个 审计 事件   " ctypes . string _ at " ， 附带 参数   " address " ,   " size "
如果 找 不到 库 ， 则 返回   " None "
返回 的 值 是 一个   " os . terminal _ size "   类型 的 具名 元组
" global "   语句
它会 在 解释器 检测 发现 超过 最大 递归 深度   ( 参见   " sys . getrecursionlimit ( ) " )   时 被 引发
range   对象
例如 ， 一个 电子表格 类 可以 通过   " Cell ( ' b10 ' ) . value "   授予 对 单元格 值 的 访问 权限
[   脚注   ]
使用 任意 对象 作为 消息
传递 给   " eval ( ) "   的 字符串 参数 必须 具有 以下 形式 :
在 之前 的 版本 中 ， 如果 管理器 服务 进程 没有 启动 ，   " __ enter __ ( ) "   不会 负责 启动 它
如果   dereference   为   " False " ， 则 会 将 符号 链接 和 硬 链接 添加 到 归档 中
" group ( ) "   返回 正则 匹配 的 子 字符串
原始 字符串 的 设计 是 为了 方便 想要 执行 自己 的 反 斜杠 转义 处理 的 处理器 ( 主要 是 正则表达式 引擎 ) 创建 输入
配置 字典 架构
DebuggingServer   对象
存储 了 值 的   " SharedMemory "   实例
并 支持 迭代 和   " with "   语句
与 在   Modula   3   中 一样 ， 没有 用于 从 其 方法 引用 对象 成员 的 简写 ： 方法 函数 使用 表示 对象 的 显式 第一个 参数 声明 ， 该 参数 由 调用 隐式 提供
最后 一行 又 用 了 一次 多重 赋值 ,   这 体现 出 了 右手边 的 表达式 ， 在 任何 赋值 发生 之前 就 被 求值 了
也 提供 以下 方法 ：
一个 继承 自   " InspectLoader "   的 抽象 基类 ， 当 被 实现 时 ， 帮助 一个 模块 作为 脚本 来 执行
" import "   语句 使用 下面 的 规范 ： 如果 一个包 的   " __ init __. py "   代码 定义 了 一个 名为   " __ all __ "   的 列表 ，   它会 被 视为 在 遇到   " from   package   import   "   时 应该 导入 的 模块 名 列表
将   domain   绑定 到   codeset   ， 修改   " lgettext ( ) " ,   " ldgettext ( ) " ,   " lngettext ( ) "   和   " ldngettext ( ) "   函数 返回 的 字节 串 的 字符 编码
在 终端 提示符 下 将 通过   " sys "   模块 显示 文档 内容 ， 其 样式 类似 于   Unix   man   命令 所 显示 的 指南 页面
目前 使用 的 为 第   4   版
如果 由   fullname   指定 的 模块 是 一个包 则 返回   " True "
上面 的 结构 体   " Bar "   的   " value "   字 段 接收   " POINTER ( c _ int ) "   指针 或者   " c _ int "   数组 ， 但是 不能 接受 其他 类型 的 实例 :
一些 程序 喜欢 在   description   参数 后 显示 额外 的 对 程序 的 描述
改进 文档 给 有 兴趣 为   Python   文档 做出 贡献 的 人
type _   data   " polygon "   一个 多边形 元组 ， 即 由 坐标值 对 构成 的 元组   " image "   一个 图片   ( 此 形式 仅限 内部 使用 ! )   " compound "   " None "   ( 复合 形状 必须 使用   " addcomponent ( ) "   方法 来 构建 )
在 解析 语义 的 时候 请 注意 ：
参见 :
将   " AssertionError "   推入 栈顶
3.4   新版 功能 .
参见 :
迭代 器   实参   结果   " product ( ) "   p ,   q ,   ...   [ repeat   1 ]   笛卡尔 积 ， 相当于 嵌套 的 for 循环   " permutations ( ) "   p [ ,   r ]   长度 r 元组 ， 所有 可能 的 排列 ， 无 重复 元素   " combinations ( ) "   p ,   r   长度 r 元组 ， 有序 ， 无 重复 元素   " combinations _ with _ replacement ( ) "   p ,   r   长度 r 元组 ， 有序 ， 元素 可 重复
当 在 现有 键 集合 中 找 不到 指定 的 映射 （ 字典 ） 键时 将 被 引发
默认 目录 是从 一个 列表 中 选择 出来 的 ， 这个 列表 不同 平台 不 一样 ，   但是 用户 可以 设置   TMPDIR   、   TEMP   或   TMP   环境变量 来 设置 目录 的 位置
bpo   36425 :   新增 的 文档 翻译 :   简体中文 .
通过 调用   " con . cursor ( ) "   创建 的   " Cursor "   对象 所 包含 的   " connection "   属性 将 指向   con   :
将 记录 以经   URL   编码 的 形式 发送至   Web   服务器
返回 采样 字节 长度
然后 可以 将   " requirements . txt "   提交 给 版本控制 并 作为 应用程序 的 一部分 提供
JSON   格式 由   RFC   7159   和   ECMA   404   指定
当   Python   附加   "   m "   选项 启动 时 ， " __ spec __ "   会 被 设为 相应 模块 或 包 的 模块 规格 说明
从 定义 缓冲区 接口 的 对象 创建 一个   memoryview   对象   contiguous   内存 块   （ 在   ' C '   或   ' F ' ortran   order   中 ）
在   3.8   版 更改 :   preexec _ fn   形参在子 解释器 中 已 不再 受 支持
一个 可选 的 小 整数 ， 它 允许 覆盖 实体 中 结构 体字 段 的 对齐 方式
确认 对象 ：   " is _ ( ) " ， " is _ not ( ) "
数学 运算 结果 无法 表示
3.1   新版 功能 .
如果   numeric _ owner   为   " True " ， 则 将 使用 来自   tarfile   的   uid   和   gid   数值 来 设置 被 提取 文件 的 所有者 / 用户组
当 调用 时 附带   "   m   module   name "   时 ， 会 在   Python   模块 路径 中 查找 指定 的 模块 ， 并 将 其 作为 脚本 程序执行
第三个 格式 器 的   ID   为   " custom " ， 对应 配置 子 字典 为 :
以下 是 有关 文档 字符串 的 内容 和 格式 的 一些 约定
本章 的 结构 类似 于   Python   对象 类型 的 “ 家族 树 ”
将 此 变量 设 为 字符串   " 0 "   会 导致   " sys . breakpointhook ( ) "   的 默认 实现 不 做 任何 事 而 直接 返回
在 这个 北美 东部 时间 的 示例 中 ， 形式 为   5 : MM   和   6 : MM   的   UTC   时间 在 转换 为 北美 东部 时间 时 都 将 被 映射 到   1 : MM ， 但前 一个 时间 会 将   " fold "   属性 设 为   0   而后 一个 时间 会 将 其设 为   1
有时候 你 拥有 一个 不 兼容 的 类型
如果   flag   为   " False " ， 转义序列 将 保持 在 输入 流中 的 原样
在   3.8   版 更改 :   On   Unix ,   C   extensions   are   no   longer   linked   to   libpython   except   on   Android   and   Cygwin .
将   seq2   中 的 键值 对 更新 或 合并 到 字典   a
这向 Linux 发行版 维护者 提供 了 一个 将 Python 项目 转换 为 发行版 软件包 的 标准 方法 ， 以及 向 系统管理员 们 提供 了 直接 将 这些 软件包 安装 到 目标 系统 的 标准 方法
列表 推导 式 和 生成器 表达 时 （ 简写 ： " listcomps "   和   " genexps " ） 让 这些 操作 更加 简明 ， 这个 形式 借鉴 自 函数 式 程序语言   Haskell （ https : / / www . haskell . org /   ）
你 应该 在 你 的 代码 中 检查   DeprecationWarning .
可选 的   errors   会 被 传递 给   " str "   的   " encode ( ) "   方法 的   errors   参数 ； 它 的 默认值 为   " ' replace ' "
这 相当于   Python   语句   " del   o [ i1 : i2 ] "
可能 是 这台 电脑 的 其他 用户 因想 学习 编程 而 安装 了 它 ， 你 得 琢磨 一下 谁 用 过 这台 电脑 并 安装 了   Python
如果 在 配置 期间 遇到 错误 ， 此 函数 将 引发   " ValueError " ,   " TypeError " ,   " AttributeError "   或   " ImportError "   并 附带 适当 的 描述性 消息
第二个 操作数 的 绝对值 给出 要 移动 的 位数
打印   a   与   b   及 共同 子目录 比较 结果 （ 递归 地 ）
" colorsys "   颜色 系统 间 的 转换
3.3   新版 功能 .
3.2   新版 功能 .
返回   o   的 负值 ， 如果 失败 ， 返回   " NULL "
不会 检查 这个 唯一性 ， 但 当 名称 出现 重复 时 将 只有 一个 字段 可 被 访问
" codecs "   编解码器 注册 和 相关 基类
可选 的   predicate   参数 可用 来 控制 哪些 行要 缩进
注解 :
将 字符串   message   发送到 系统日志 记录器
" f . readline ( ) "   从文件 中 读取 一行 ； 换行符 （ " \ n " ） 留在 字符串 的 末尾 ， 如果 文件 不 以 换行符 结尾 ， 则 在 文件 的 最后 一行 省略
如果 某 一项 （ 在 第一项 之后 ） 的 重复 次数 超过 序列 长度 的   1%   并且 序列 长度 至少 有   200   项 ， 该项 会 被 标记 为 “ 热门 ” 并 被 视为 序列 匹配 中 的 垃圾
PEP   3151 :   重写   OS   和   IO   异常 的 层次结构
在   3.5   版 更改 :   The   decode _ data   and   enable _ SMTPUTF8   parameters   were   added .
3.1   新版 功能 :   Added   under   the   name   " assertRaisesRegexp " .
虽然 从 长远 来看 ， 学习 和 使用 一种 静态 类型 语言 是 很 重要 的 ， 但 这 并 不是 最 适宜 在 学生 的 第一次 编程 课上 就 进行 探讨 的 主题
FTPHandler   对象
在   3.8   版 更改 :   如果 队列 已经 关闭 ， 会 抛出   " ValueError "   而 不是   " AssertionError "
返回 对应 于   POSIX   时间 戳 的   UTC   " datetime " ， 其中   " tzinfo "   值为   " None "
以 感知 型   datetime   对象 返回 当地 时间
" optparse "   解析器 的 命令行 选项
将 扩展 模块 移植 到   Python   3
在   “ 类型 （ Type ）   ” 栏 ， 选择 您 的 问题 的 类型 ； 同样 地 ， 选择   bug   相对 应 的 “ 组件 （ Component ） ”   和 “ 版本 （ Versions ） ”
special   method   特殊 方法 一种 由   Python   隐式 调用 的 方法 ， 用来 对 某个 类型 执行 特定 操作 例如 相加 等等
" marshal "   内部   Python   对象 序列化
注解 :
只 执行 前 一部分 ：
Python   自带 许多 内置 的   ABC   用于 实现 数据结构 （ 在   " collections . abc "   模块 中 ） 、 数字 （ 在   " numbers "   模块 中 ） 、 流 （ 在   " io "   模块 中 ） 、 导入 查找 器 和 加载 器 （ 在   " importlib . abc "   模块 中 ）
Python 程序员 可以 轻松 实现 委托
BLAKE2   支持   keyed   mode   ( HMAC   的 更 快速 更 简单 的 替代 ) ,   salted   hashing   ,   personalization   和   tree   hashing   .
解压缩 的 障碍
其他 函数
" pathlib "   面向对象 的 文件系统 路径
仅 初始化 变量
3.6   新版 功能 :   " _ missing _ " ,   " _ order _ " ,   " _ generate _ next _ value _ "
模式   动作   " ' r   ' "   打开   tar   块 的 流以 进行 透明 压缩 读取
" __ all __ "   应当 包括 整个 公有   API
更 多 细节 请参阅   " loop . create _ datagram _ endpoint ( ) "   的 文档
而 在 另一方面 ， 如果 你 正在 使用   Python   并且 想 了解 有关 该 语言 特定 领域 的 精确 规则 ， 你 应该 能够 在 这里 找到 它们
我们 将 使用 以下 XML 文档 作为 本节 的 示例 数据 ：
在 这个 例子 里 ， 判断 条件 是 一个 简单 的 比较
内置 的   " dir ( ) "   和   " help ( ) "   函数 可 用作 交互式 辅助工具 ， 用于 处理 大型 模块   ， 如   " os " :
" Decimal "   类型
在 失败 初次 发生 时 ， 处理程序 将 丢弃 它 正 尝试 发送 的 消息
解包 并 返回 固定 长度 字符串
操作码 名称 ，
Unicode   数据库 已 更新 到   13.0 . 0   版
模块 可以 包含 可 执行 的 语句 以及 函数 定义
pymalloc   是   " PYMEM _ DOMAIN _ MEM "   ( 例如 :   " PyMem _ Malloc ( ) " )   和   " PYMEM _ DOMAIN _ OBJ "   ( 例如 :   " PyObject _ Malloc ( ) " )   域 的 默认 分配器
已知 的 问题
" int " ,   " float "   和   " complex "   的 构造 器 现在 会 使用   " __ index __ ( ) "   特殊 方法 ， 如果 该 方法 可用 而 对应 的 方法   method   " __ int __ ( ) " ,   " __ float __ ( ) "   或   " __ complex __ ( ) "   方法 不可 用 的话
" None "   对象
确保您 选择 的 应用程序 由   Python   Software   Foundation   发布 并 安装
OutputChecker   对象
编解码器
在   POSIX   系统 中此 方法 会 发送   " SIGKILL "   给子 进程
3.1   新版 功能 .
此 方法 返回 的 对象 会 被 排入 队列
尝试 编译   source   ， 这 应当 是 一个   Python   代码 字符串 ， 并且 在   source   是 有效 的   Python   代码 时 返回 一个 代码 对象
韩语 :   cp949 ,   euc   kr ,   johab ,   iso   2022   kr
有效 的 类型
当   len   大于 零时 ， 被 返回 的 列表 对象 项目 被 设成   " NULL "
将 虚拟 屏幕 光标 设置 到   y   ,   x
出于 相同 的 原因 ， 对于 包含 当前 区域 设置 字符集 所 无法 表示 的   Unicode   码位 的 格式 字符串 的 处理 方式 也 取决于 具体 平台
结果 :
如果 字符串 短于   " count   1 " ， 则 会 填充 空 字节 以 使得 恰好 使用 了   count   个 字节
当 一个 系统 函数 发生 系统 级 超时 的 情况 下 将 被 引发
3.3   新版 功能 .
那么 ， Python 正好 能 满足 你 的 需要
图 的 拓扑 排序 实现 现在 已 由 新 的   " graphlib "   模块 提供
一些 与   " dict "   的 不同 仍然 存在 ：
删除 轮询 对象 正在 跟踪 的 某个 文件 描述符
使用   " object "   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
类 与 函数
它们 还 将 编译 对象 存储 在 缓存 中 ， 因此 使用 相同 的 未来 调用 将 不 需要 一次 又 一次 地 解析 该 模式
一个 函数 的 本地 命名 空间 在 这个 函数 被 调用 时 创建 ， 并 在 函数 返回 或 抛出 一个 不 在 函数 内部 处理 的 错误 时 被 删除
或者 你 还 可以 使用 提供 矩阵 类型 的 扩展 包 ； 其中 最 著名 的 是   NumPy
两个 语句 都 默认 为   " ' pass ' "   ； 计时器 函数 与 平台 有关 （ 请参阅 模块 文档 字符串 ）
安全
" py _ compile "   编译   Python   源文件
将 解码器 的 状态 设 为   state
Debug   模式
有关 排序 示例 和 简要 排序 教程 ， 请参阅 排序 指南
在 调用 本 函数 的 堆栈 帧 处 进入 调试器
对 某些 用例 来说 ， 存在   " sum ( ) "   的 更好 替代
例如 ： " [ 5 ^ ] "   将 匹配   " ' 5 ' "   或   " ' ^ ' "
将 带有 属性   attr   的 字符   ch   绘制 到   " ( y ,   x ) " ， 将 该行 从 位置   x   开始 右移 一个 字符
参见 :   PEP   442   解释 了 新 的 终结 方案
IDLE   与   idlelib
此 模块 提供 表示 解析 树 （ 终端 令牌 ） 的 叶 节点 的 数值 的 常量
当 一个 模块 首次 被 导入 时 （ 或 自 当前 已 编译 文件创建 后 源文件 被 修改 时 ） ， 将会 在 对应   " . py "   文件 所在 目录 的   " __ pycache __ "   子目录 下 创建 一个 包含 已 编译 代码 的   " . pyc "   文件
" { 0 , } "   与   "   "   相同 ，   " { 1 , } "   相当于   " + "   ，   " { 0 , 1 } "   和   " ? "   相同
tuple   应该 是   " ( nchannels ,   sampwidth ,   framerate ,   nframes ,   comptype ,   compname ) " ， 每项 的 值 应 可 用于   " set   ( ) "   方法
在   3.1   版 更改 :   Added   dictionary   interface .
（ 由   Guo   Ci   Teo   在   bpo   34898   中 贡献 。 ）
我们 把 它 设置 为   " 0 "   来 让 它 可以 与 其他 整数 值 相互 比较
您 可以 将 此 属性 更 改为 可 接受 游标 和 原始 行 作为 元组 的 可 调用 对象 ， 并 将 返回 实际 结果 行
减少 对象   o   的 引用 计数
设置 主 窗口 的 大小 和 位置
如果 要 显式 设置 当前 连接 可以 缓存 的 语句 数 ， 可以 设置   cached _ statements   参数
返回   " x "   的   " y "   次方 ， 如果 给出 了 模数   " modulo "   则 取 其余 数
这 没有 用 的 ， 因为 作为 可变 对象 的 列表 可以 包含 对 自身 的 引用 ， 然后 复制 代码 将 进入 无限 循环
命令行 界面
" gzip "   模块 提供   " GzipFile "   类 和   " open ( ) " 、 " compress ( ) " 、 " decompress ( ) "   几个 便利 的 函数
3.3   新版 功能 .
标准 输入 流   ( " StreamWriter " )   或者 如果 进程 创建 时 设置 了   " stdin   None "   则 为   " None "
冻结 的 实例
在 使用 这些 函数 时 ， 必须 持有 全局 解释器 锁 （ GIL ）
此外 ，   " os "   还 提供 了 一些 附加 功能 ， 例如 在   " os . environ "   中 的 某个 条目 被 修改 时会 自动 调用   " putenv ( ) "
生成器 表达式 总是 写 在 圆括号 里面 ， 不过 也 可以 算上 调用函数 时用 的 括号
该 架构 描述 了 一组 日志 记录 对象   — —   日志 记录器 、 处理程序 、 格式化 器 、 过滤器   — —   它们 在 对象 图中 彼此 连接
此 算法 没有 加密 强度 ， 不 应用 于 身份验证 和 数字签名
如果 自减 后 ， 递归 等级 仍然 不是 零 ， 则 锁 保持 锁定 ，   仍 由 调用 线程 拥有
当 进程 退出 时 返回 其 代号
其中 大部分 内容 将 在 本节 中 介绍
这个 例子 演示 了 如何 在   Windows   上 删除 一个 目录 树 ， 其中 部分 文件 设置 了 只读 属性 位
通过 至多 一次 对下 层流 的   " read ( ) "   ( 或   " readinto ( ) " )   方法 的 调用 读取 并 返回 至多   size   个 字节
其他 模块 支持 两个 或 多个 进程 可 用于 跨 机器 通信 的 网络协议
或者 你 也 可以 提供 一组 关键字 参数 ， 其中 的 关键字 即 对应 占位 符
3.6   新版 功能 .
3.3   新版 功能 .
如果 没有 定义 名称 ， 则 返回   default   ， 如果 没有 给出 ， 则   " ValueError "   被 引发
行 对象
" mf " :   要 使用 的 匹配 查找 器   " MF _ HC3 " ,   " MF _ HC4 " ,   " MF _ BT2 " ,   " MF _ BT3 "   或   " MF _ BT4 "
用于 将流 的 字节 串 解码 为 字符串 以及 将 字符串 编码 为 字节 串 的 编码 格式 名称
抽象 的
" string "   常见 的 字符串 操作
此 属性 可 从 更新 的 子目录 中 获取 ， 仅 保留 用于 向下兼容
表达式 中 的 后 向 引用 语法 ， 例如   " ( ... ) \ 1 " ， 指 的 是 组 的 编号
公共 类
如果   x   是 次 标准 数则 返回   " True " ； 否则 返回   " False "
通用 选项
" codecs "   编解码器 注册 和 相关 基类
仅限   Mac   OS   X   平台
在 某些 系统 上 （ 例如   Unix ） 是 元 数据 的 最后 修改 时间 ， 而 在 其他 系统 上 （ 例如   Windows ） 则 是 创建 时间 （ 请参阅 系统 平台 的 文档 了解 相关 细节 ）
" dircmp "   类 提供 了 一些 有趣 的 属性 ， 用以 得到 关于 参与 比较 的 目录 树 的 各种 信息
引发 此 异常 以 跳 过 一个 测试
常见 的 安装 问题
这 意味着 它 可以 像 这样 索引 它们 :
PEP   405 :   虚拟环境
可以 给出 多个   "   W "   选项 ； 当 某个 警告 能 与 多个 选项 匹配 时 ， 将 执行 最后 一个 匹配 选项 的 操作
它 并 不 包括 对 全局 或 内置 作用域 的 引用 ）
删除 逻辑 使用 间隔时间 来 确定 要 删除 的 文件 ， 因此 改变 间隔时间 可能 导致 旧 文件 被 继续 保留
在   3.2   版 更改 :   可以 被 用作 上下文 管理器
arguments   是 一个 包含 最初 传递 给 函数调用 的 形参 的 元组 ， 这样 就 允许 对 所用 参数 的 行为 进行 特别 处理
构建
如果 没有 传递 一个 数据 类 或 实例 将 引发   " TypeError "
它会 向 消息 对象 的   " defects "   属性 中 写入 它 从 消息 中 找到 的 问题 列表
上述 修改 已 被 反向 移植 到   3.8   维护 发行版 中
" collections . abc . Iterable "   的 泛型 版本
你 可以 通过 以下 方式 匹配   complementing   设置 的 字符 类中 未 列出 的 字符
缓冲 流
调试模式 的 输出 :
08 / 16 / 88   ( None ) ;   ( 1 )   08 / 16 / 1988   ( en _ US ) ;   16.08 . 1988   ( de _ DE )   " % X "   本地化 的 适当 时间 表示
出于 效率 的 考虑 ， 每个 模块 在 每个 解释器 会话 中 只 被 导入 一次
另外 还有 一个   maps   属性 ( attribute ) ， 一个 创建 子 上下文 的 方法 ( method ) ，   一个 存取 它们 首个 映射 的 属性 ( property ) :
接受 一个 必需 的 参数 （ " voltage " ） 和 三个 可选 的 参数 （ " state " ,   " action " ， 和   " type " ）
库
这些 动作 可以 做 与 它们 相关联 的 命令行 参数 的 任何 事 ， 尽管 大多数 动作 只是 简单 的 向   " parse _ args ( ) "   返回 的 对象 上 添加 属性
标记 一个 类 或 函数 在 运行 时内 不可 用 的 装饰 器
方法 对象
如果 给出 了 可选 的   timeout   参数 ， 则 阻塞 操作 （ 例如 连接 尝试 ） 将 在 指定 的 秒数 之后 超时 （ 如果 未 给出 ， 则 使用 全局 默认 超时 设置 ）
请参阅   PEP   585   了解 详情
将 记录 的 属性 字典 封存 为 带有 长度 前缀 的 二进制 格式 ， 并 将 其 返回 以 准备 通过 套 接字 进行 传输
启动 进程 活动
" object "   是 所有 类 的 基类
在   POSIX   操作系统 上 ， 此 函数 会 发送   SIGKILL   给子 进程
将   " optparse . Values "   替换 为   " Namespace "   并 将   " optparse . OptionError "   和   " optparse . OptionValueError "   替换 为   " ArgumentError "
head   末尾 的 斜杠 会 被 去掉 ， 除非 它 是 根目录 （ 即 它 仅 包含 一个 或 多个 斜杠 ）
类似 地 ， 对于 使用 实例 变量 ， 必须 编写   " self . var "   意味着 对 方法 内部 的 非 限定 名称 的 引用 不必 搜索 实例 的 目录
在   3.6   版 更改 :   接受 一个 类 路径 对象
在 非正式 上下文 中 ， 码位 和 字符 的 差异 有时 会 被 忽略
bpo   38731 :   修复 了   " py _ compile "   模块 命令行 界面 下 的   " NameError "
测试
在   3.4   版 更改 :   添加 了 对 不可 搜索 文件 的 支持
基于 生成器 的 协程
3.3   新版 功能 .
" range ( ) "   函数
这 包括   " __ init __. py "   定义 的 任何 名称 （ 以及 显式 加载 的 子 模块 ）
参数 :   factory   用来 实例 化 日志 记录 的 工厂 可 调用 对象
索引   属性   意义   0   " sp _ namp "   登录名   1   " sp _ pwdp "   Encrypted   password   2   " sp _ lstchg "   Date   of   last   change   3   " sp _ min "   Minimal   number   of   days   between   changes   4   " sp _ max "   Maximum   number   of   days   between   changes   5   " sp _ warn "   Number   of   days   before   password   expires   to   warn   user   about   it   6   " sp _ inact "   Number   of   days   after   password   expires   until   account   is   disabled   7   " sp _ expire "   Number   of   days   since   1970   01   01   when   account   expires   8   " sp _ flag "   Reserved
如果   shell   被 明确 地 调用 ， 通过   " shell   True "   设置 ， 则 确保 所有 空白 字符 和 元字符 被 恰当 地 包裹 在 引号 内以 避免   shell   注入 漏洞 就 由 应用程序 负责 了
传入 一个 字典 也 是 可 接受 的 :
在   3.7   版 更改 :   Entries   of   " None "   in   " sys . path _ importer _ cache "   are   deleted .
测试
另外 ， 当前 没有 至少 一个 命令行 参数 时会 产生 一个 错误信息
" % Y "   十进制 数 表示 的 带 世纪 的 年份
使用   " subprocess "   模块
实现   " ' xmlcharrefreplace ' "   错误处理 方案   ( 仅 用于 文本 编码 的 编码 过程 ) ： 不可 编码 的 字符 将 以 适当 的   XML   字符 引用 进行 替换
此种 更改 并 不会 随意 进行 仅 在   API   被 加入 之前 未 考虑 到 的 严重 基础性 缺陷 被 发现 时才 可能 会 这样 做
" weakref "   弱 引用
参数 :   title   字符串
PEP   552   确定性 的   pyc   文件
3.8   新版 功能 .
关闭 归档文件
更 依赖 序列化
异步 套 接字 服务
列举 某个 已经 打开 注册表 键 的 子项 ， 并 返回 一个 字符串
如果 只 执行 单个 操作 ， 它们 可能 很 有用 ， 因此 中间 分析 对象 没用 ：
这 是 该   API   的 典型 用法 示例 :
它 使用 格式 字符串 作为   C   结构 布局 的 精简 描述 以及 与   Python   值 的 双向 转换
要 创建 一个 自定义 的 管理器 ， 需要 新建 一个   " BaseManager "   的 子类 ， 然后 使用 这个 管理器 类上 的   " register ( ) "   类 方法 将 新 类型 或者 可 调用 方法 注册 上去
例如 ，   " append ( ) "   方法 将 向 一些 内部 列表 的 末尾 添加 新元素 ； 接口 规范 不能 测试 您 的   " append ( ) "   实现 是否 能够 正确 执行 此 操作 ， 但是 在 测试 套件 中 检查 这个 属性 是 很 简单 的
常数   描述   " FIRST _ COMPLETED "   函数 将 在 任意 可 等待 对象 结束 或 取消 时 返回
( 总的说来 ， 键 的 类型 应该 为   hashable   ， 这 就 把 所有 可变 对象 都 排除 在外 。 )   重复 键 之间 的 冲突 不会 被 检测 ； 指定 键 所 保存 的 最后 一个 数据   ( 即 在 显示 中排 最 右边 的 文本 )   为 最终 有效 数据
像   Java   一样 ，   Python   拥有 一个 庞大 的 标准 库 ， 因此 可以 在 课程 非常 早期 的 阶段 就 给 学生 布置 一些 实用 的 编程 项目
通过 使用   XPath   ， 可以 更 精确 地 指定 要 查找 的 元素
大多数 信息 都 是 所有 模块 通用 的
可以 使用   " setfirstweekday ( ) "   方法 设置 一周 的 第一天 为 星期天   ( 6 )   或者 其它 任意 一天
src   和   dst   均 为 路径 类 对象 或 字符串 形式 的 路径名
调用 每个 窗口 的   " noutrefresh ( ) "   方法 来 更新 一个 表达 屏幕 期望 状态 的 底层 的 数据结构
并会 在   " localtime ( ) "   或   " gmtime ( ) "   出错 时 引发   " OSError "   而 不是   " ValueError "
所有 派生类 都 应 重载 此 方法 以 提供 必要 的 正确 输出 处理
" sys . getfilesystemencoding ( ) "   将 返回   " ' UTF   8 ' "   ( 本地 编码 会 被 忽略 )
如果 函数 失败 ， 则 引发 一个   " OSError "   异常
这个 方法 会 释放 下层 的 锁 ， 然后 保持 阻塞 直到 被   " notify ( ) "   或   " notify _ all ( ) "   调用 所 唤醒
在   3.5   版 更改 :   开始 支持 任意 类型 的 迭代 器
3.9   版后 已 移除 :   " collections . ChainMap "   now   supports   " [ ] "
在 许多 系统 上 ， 缓冲区 的 长度 通常 为 4096 或 8192 字节
处理程序 的 级别 设置 为 “ 警告 ” ， 因此 将 输出 此 级别 和 更 高级 别的 所有 事件
请 注意 ， 出于 同样 的 原因 ， 使用 模块 也 是 实现 Singleton 设计模式 的 基础
Python   3.4   有 什么 新 变化
因此 它 不 支持 字节 到 字节 的 编码器 ， 例如   " base64 _ codec "
显式 的 通过 列名
如果 消息 准备 者 能够 找到 加密 哈希 函数 的 碰撞 现象 （ 即 两条 消息 产生 相同 的 哈希 值 ） ， 则 他们 就 可以 准备 将 产生 相同 哈希 值 和 数字签名 但 却 具有 不同 结果 的 有 意义 的 消息 版本 （ 例如 向 某个 账户 转入   $ 1 , 000 , 000   而 不是   $ 10 ）
缓冲 日志 消息 并 有 条件 地 输出 它们
（ 由   Pablo   Galindo   在   bpo   37221   中 贡献 。 ）
" zlib "   与   gzip   兼容 的 压缩
如何 使用 Py _ BuildValue ( ) 创建 任意 长度 的 元组 ？
在 任何 时候 你 都 可以 使用   " digest ( ) "   或   " hexdigest ( ) "   方法 获得 到 目前为止 输入 这个 对象 的 拼接 数据 的   digest
" TurtleScreen "   类 定义 图形 窗口 作为 绘图 海龟 的 运动场
此 模块 提供 了 对 基于   C   标准 和   POSIX   标准 （ 一种 稍加 修改 的   Unix   接口 ） 进行 标准化 的 系统 功能 的 访问
在 调试器 控制 范围 内 执行   statement   （ 以 字符串 或 代码 对象 的 形式 提供 ）
开发人员
如果   " __ all __ "   没有 被 定义 ， 则 公有 名称 的 集合 将 包含 在 模块 的 命名 空间 中 找到 的 所有 不 以 下划线 字符   ( " ' _ ' " )   打头 的 名称
" yield "   变成 了 一个 表达式 ， 返回 一个 可以 赋给 变量 或 执行 操作 的 值 :
根据 已 打开 文件   fd   的 文件 描述符 创建 一个   Python   文件 对象
改为 :
本手册 描述 了 希望 编写 扩展 模块 并 将   Python   解释器 嵌入 其 应用程序 中 的   C   和   C++   程序员 可用 的   API
构造 任意 值
参数 :   fun   一个 无 参数 的 函数
在   3.7   版 更改 :   defaults   参数 会 通过   " read _ dict ( ) "   来 读取 ， 提供 全 解析器 范围 内 一致 的 行为 ： 非 字符串 类型 的 键 和 值会 被 隐式 地 转换 为 字符串
一个 小小的 不同 在于 ， 它 的   " acquire "   方法 的 第一个 参数 名是 和   " Lock . acquire ( ) "   一样 的   block
从 解释器 关闭 前要 运行 的 函数 列表 中 移除   func
从流 中 读取 输入 时 ， 如果   newline   为   " None " ， 则 启用 通用 换行 模式
构建
" enable ( ) "   函数 的 选项 可以 控制 是 将 报告 显示 在 浏览器 中 ， 还是 将 报告 记录 到 文件 供 以后 进行 分析
一些 格式化 字符串 字 面值 的 示例 :
如果 队列 是 满 的 ， 返回   " True "   ， 反之 返回   " False "
在 Python 中 ， 仅 在 函数 内 引用 的 变量 是 隐式 全局变量
移除
测试
先前 的 版本 并 没有 明确 这 一点 ， 所以 不同 的 实现 可能 不 一致
" L "   ( " int " )   [ long   long ]   将 一个   C   " long   long "   长长 整形 转化成   Python   整形 对象
positional   or   keyword   ： 位置 或 关键字 ， 指定 一个 可以 作为 位置 参数 传入 也 可以 作为 关键字 参数 传入 的 实参
注解 :
二进制 数据服务
" lc " :   字 面值 上下文 的 比特 数
它 并 不会 在 内存 创建 一个 列表 并 因此 在 返回 前 而 耗尽 输入 的 迭代 器 ； 相反 ， 只有 在 被 请求 的 时候 元组 才 会 创建 并 返回
如果 一个 部分 具有   Content   Disposition   标头 ， 则 当标 头值 为   " inline "   时 将 只 考虑 将 该 部分 作为 候选 匹配
元组 在 最后 总是 会 增长 或 缩小
对象
" ClassVar "   本身 并 不是 一个 类 ， 并且 不应 与   " isinstance ( ) "   or   " issubclass ( ) "   一起 使用
返回 一个 可 从 操作数 中 获取   attr   的 可 调用 对象
事先 不 可能 知道 在 运行 时 引用 哪个 属性
另 请参阅   PEP   530
例如   " a   <   b   c "   会 校验 是否   " a "   小于   " b "   并且   " b "   等于   " c "
要 从 终端 窗口 运行 脚本 ， 必须 确保 : file :   / usr / local / bin   位于   shell   搜索 路径 中
Codec   查找 API
如果 无法 创建 新 对象 ， 对   bytes   的 旧 引用 仍 将 被 丢弃 且   bytes   的 值 将 被 设为   " NULL " ； 并 将 设置 适当 的 异常
字典 推导 式 与 列表 和 集合 推导 式 有所不同 ， 它 需要 以 冒号 分隔 的 两个 表达式 ， 后面 带上 标准 的   " for "   和   " if "   子句
future   语句 所 启用 的 所有 历史 特性 仍然 为   Python   3   所 认可
它 是   C   或   Python   表达式 ， 有 一个 自变量   n   ，   该 表达式 计算 的 是 所 需 复数 形式 在 编目 中 的 索引 号
" TextIOWrapper "   在 继承 自   " TextIOBase "   和   " IOBase "   的 现有 成员 以外 还 提供 了 以下 数据 属性 和 方法 :
级别 值会 在   " logging "   包 命名 空间 的 上下文 中 通过   " eval ( ) "   来 得出
在   3.3   版 更改 :   添加 了 对   " bzip2 "   和   " lzma "   压缩 的 支持
开始 进行 搜索 的 目录 ( 默认值 为 当前目录   " . "   )
如果   " os . chflags   in   os . supports _ follow _ symlinks "   为   " True " ， 则   " copystat ( ) "   可以 修改 符号 链接 的 旗标
在 本节 中 ， ' C '   是 指   Windows   和   Unix   上 的   " Control "   键 ， 以及   macOS   上 的   " Command "   键
在此之后 点击 并 拖动 海龟 可 在 屏幕 上 手绘 线条   ( 如果 画笔 为 落下 )
请参阅 问题   # 28524   了解 此项 改变 的 更 多 细节
返回 包含 对应 于 所 请求 颜色 对 的 颜色 的 元组   " ( fg ,   bg ) "
[ 5 ]   " % "   运算符 也 被 用于 字符串 格式化 ； 在 此 场合 下会 使用 同样 的 优先级
由   Victor   Stinner   在   bpo   26146   中 贡献
注解 :
参见 :
" UserString "   提供 了 以下 属性 作为 字符串 方法 和 操作 的 额外 支持 ：
在   3.3   版 更改 :   ASCII   only   unicode   strings   are   now   accepted   by   the   " a2b _   "   functions .
这一 变动 也 可以 使用   "   p "   旗标 手动 开启
源码 ：   Lib / token . py
如果 其中 一个 可 迭代 对象 有 无限 长度 ， " zip _ longest ( ) "   函数 应 封装 在 限制 调用 次数 的 场景 中 （ 例如   " islice ( ) "   或   " takewhile ( ) " ）
ZipFile   对象
受 支持 的   tar   格式
如果 它们 都 不 返回 假值   ， 则 记录 将 被 处理 （ 传递 给 处理器 ）
序列 类型   " list " ,   " tuple " ,   " range "
在   3.3   版 更改 :   Added   the   msg   keyword   argument   when   used   as   a   context   manager .
（ 由   Christian   Heimes   在   bpo   17239   中 贡献 。 ）
3.7 . 2   新版 功能 .
函数
从   s   中 解码 出   JSON   文档 （ 以   JSON   文档 开头 的 一个   " str "   对象 ） 并 返回 一个   Python   表示 形式 为   2   元组 以及 指明 该 文档 在   s   中 结束 位置 的 序号
" timezone "   对象
注解 :
请 改用   " is _ alive ( ) "
在 失败 时 设置 一个 异常 并 返回   " NULL "
在   3.3   版 更改 :   增加 了   flush   关键字 参数
PEP   602   ， CPython   采用 年度 发布 周期
某些 包含 在   Python   中 的 软件 是 基于 不同 的 许可
教程
1 小时 会 转换成 3600 秒
在 未来 的   Python   版本 中将 总是 默认 打开 用于 读取
要 控制 默认值 以便 每个 线程 在 应用 运行 期间 都 使用 相同 的 值 ， 可以 直接 修改   DefaultContext   对象
返回 一个 包含 关于 指定 路径 的 元 数据 的   " dict "   的 可选 的 抽象 方法
3.4   新版 功能 .
这个 实例 的 内容 被 保存 为 一个 正常 列表 ， 通过   " UserList "   的   " data "   属性 存取
在   3.6   版 更改 :   接受 一个 类 路径 对象
请 注意 ， 如果 档案 中 只 包含   " . py "   文件 ，   Python 不会 尝试 通过 添加 对应 的   " . pyc "   文件 修改 档案 ， 意思 是 如果   ZIP   档案 不 包含   " . pyc "   文件 ， 导入 或许 会 变慢
修复   " isinstance ( ) "   函数 第二个 实参 中 重复 的 类型
" i "   ( " int " )   [ int ]   将 一个   Python   整型 转化成 一个   C   " int "   整型
最后 加上 毫秒 数
已 将 下列 函数 和 定义 移至 内部   C   API :
否则 返回值 与   number   的 类型 相同
这个 类 与   " BytesParser "   一样 ， 但是 处理 字符串 输入
3.1   新版 功能 .
在   3.6   版 更改 :   maxheaderlen   没有 被 指定 时 的 默认 行为 从 默认 为 0 修改 为 默认 为 策略 的   max _ line _ length   值
" optparse "   解析器 的 命令行 选项
例如 ，   " errno . errorcode [ errno . EPERM ] "   映射 为   " ' EPERM ' "
可以 通过 给   " cmdloop ( ) "   方法 一个 参数 来 覆盖 它
" pickletools "   pickle   开发者 工具集
例如 ， 使用   use   " sha256 ( ) "   创建 一个   SHA   256   hash   对象
设置   " PY _ PYTHON   3.1 "   等同于 包含 以下内容 的 INI 文件 ：
ProxyBasicAuthHandler   对象
借用 者 必须 确保 不能 持有 对象 超过 拥有者 借出 的 时间
Python   3.6 . 4   正式版
在   POSIX   操作系统 上 ， 此 方法 会 发送   SIGTERM   给子 进程
全选 选择 当前 窗口 的 全部内容
这个 标记 存储 在   " _ Feature "   类 实例 的   " compiler _ flag "   属性 中
( NIST   SP   800   106   " 数字签名 的 随机 哈希 " )
模块 命名 空间 中 的 名称 重新 指向 任何 新 的 或 更改 后 的 对象
提供 该 方法 是 为了 让 子类 能够 重载 它
" site "   — —   指定 域 的 配置 钩子
Cursor   对象
初始化 了 所有 可能 包含 其他 容器 的 引用 的 字 段 后 ， 它 必须 调用   " PyObject _ GC _ Track ( ) "
" Filter "   的 实例 是 被 允许 修改 传入 的   " LogRecords " ， 包括 添加 其他 的 属性 ， 然后 可以 使用 合适 的 格式化 字符串 输出 ， 或者 可以 使用 一个 自定义 的 类   " Formatter "
请 注意 ， 如果 进程 终止 或 方法 超时 ， 则 该 方法 返回   " None "
由   Ashwin   Ramaswami   贡献 补丁
通常 是 指 生成器 函数 ， 但 在 某些 情况 下 也 可能 是 指 生成器 迭代 器
移位 运算
在 任何 情况 下   ， 被 执行 的 代码 都 需要 和 文件 输入 一样 是 有效 的 （ 见 参考手册 中 关于 文件 输入 的 章节 ）
" RawIOBase "   在   " IOBase "   的 现有 成员 以外 还 提供 了 下列 方法 :
" itertools . repeat ( elem ,   [ n ] ) "   返回   n   次 所 提供 的 元素 ， 当   n   不 存在 时   ， 返回 无数次 所 提供 的 元素
要 实现   " deque "   切片 ，   使用 一个 类似 的 方法 ， 应用   " rotate ( ) "   将 目标 元素 放到 左边
function   annotation   函数 标注 即 针对 函数 形参 或 返回值 的   annotation
对于 文本 编码 格式 和 字节 到 字节 编解码器 ，   input   必须 为 一个 字节 串 对象 或 提供 了 只读 缓冲区 接口 的 对象 例如 ， 缓冲区 对象 和 映射 到 内存 的 文件
expression   参数 会 作为 一个   Python   表达式 （ 从技术上 说 是 一个 条件 列表   ） 被 解析 并 求值 ， 并 使用   globals   和   locals   字典 作为 全局 和 局部 命名 空间
使用   cmp   参数 的 旧 方法
引发 一个 审计 事件   " winreg . OpenKey / result " ， 附带 参数   " key "
" hash "   ： 这 可以 是 布尔值 或   " None "
典型 用法 为 :
...   在   Python   3.4   之前 的   Python   版本 中 安装   " pip "   ？
使用 事件
然后 格式化 结果 会 包含 在 整个 字符串 最终 的 值 当中
默认值   " None "   具有 相同 的 效果
将 字符串   " s "   转换 为   " double "   类型 ， 失败 时 引发 Python 异常
在   3.4   版 更改 :   现在 可 接受 任意   bytes   like   object
在 到达 数据流 末尾 之后 再 尝试 解压缩 数据 会 引发   EOFError
" sunau "   模拟 提供 了 一个 处理   Sun   AU   声音 格式 的 便利 接口
优先级 队列 中 ， 条目 将 保持 排序 (   使用   " heapq "   模块   )   并且 最小值 的 条目 第一个 返回
函数   " platform . popen ( ) "   已 被 移除 ， 它 自   Python   3.3   起 就 已 被 弃用 ： 请 改用   " os . popen ( ) "
Python   允许 您 在 列表 ， 元组 和 字典 的 末尾 添加 一个 尾随 逗号 :
参见 :
[ 1 ]   " % ld "   长 整型   相当于   " printf ( " % ld " ) "
其他 旧 对象 的 引用 （ 例如 那个 模块 的 外部 名称 ） 不会 被 重新 绑定 到 引用 的 新 对象 的 ， 并且 如果 有 需要 ， 必须 在 出现 的 每个 命名 空间 中 进行 更新
生成器 表达式
如果   new   为   1 ， 则 尽可能 打开 新 的 浏览器 窗口
" finditer ( ) "   找到 正则 匹配 的 所有 子 字符串 ， 并 将 它们 返回 为 一个   iterator
详细描述 的 最大 长度 为   128   个字符
清除 了 已 定义 但 未 实现 的 接口 的 头文件
测试
返回 分配 给 字符   chr   的 名称 作为 字符串
标注 赋值 就是 在 单个 语句 中将 变量 或 属性 标注 和 可选 的 赋值 语句 合为一体 :
这个 数据 并行 的 基本 例子 使用 了   " Pool "   ，
许多 运算 都 有 “ 原地 ” 版本
模块 中 的   " Queue "   类 实现 了 所有 所 需 的 锁定 语义
所有 参数值 默认 为   " 0 " ， 只有   tzinfo   默认 为   " None "
POSIX.1   1988   ( ustar )   格式
我 必须 喜欢   " Monty   Python   的 飞行 马戏团 "   吗 ？
映射 类型   " dict "
为   macOS   10.12   添加 了 新 的 时钟   " CLOCK _ UPTIME _ RAW "
如果   " PyZipFile "   的   optimize   形参未 给定 或 为   "   1 " ， 则 相应 的 文件 为   "   . pyc "   文件 ， 并 在 必要 时 进行 编译
在   3.7   版 更改 :   增加 了   " " default " "   分配器
如果 有 设置 ， 则 会 将 跟踪 打印 到   " sys . stderr "
你 不能 写成   " Union [ X ] [ Y ] "
个性化 协议 中 所 使用 的 每个 哈希 函数 将 有效 地 阻止 这种 类型 的 攻击
如果 启动 方法 已经 固定 ， 并且   allow _ none   被 设置 成   False   ， 那么 启动 方法 将 被 固定 为 默认 的 启动 方法 ， 并且 返回 其 方法 名
3.7   新版 功能 .
如果 可能 ， 在 此 控制器 处理 的 浏览器 的 新窗口 中 打开   url   ， 否则 ， 在 唯一 的 浏览器 窗口 中 打开   url
值 :   将 被 新   Enum   类 将 记录 为 其 名称 的 数据
在 调用   func   之前 ， " wrapper ( ) "   会 启用   cbreak   模式 ， 关闭 回显 ， 启用 终端 键盘 ， 并 在 终端 具有 颜色 支持 的 情况 下 初始化 颜色
这是 为了 一致性 而 刻意 设计 出 的 行为 ， 不过 我们 随时 可能 会 突然 觉得 “ 还是 在 这种 情况 下 自动 把 旧 字 段 删除 比较 好 吧 ”   而 把 这个 行为 改掉 ， 所以 不要 以为 这是 特性 而 依赖 这个 行为
3.3   新版 功能 .
将 可 调用 对象 封装 为 异步 执行
实参 的 合法 范围 是   0   到   1 , 114 , 111 （ 16   进制 表示 是   0x10FFFF ）
还要 注意 的 是 在 这种 情形 下分 号 的 绑定 比 冒号 更 紧密 ， 因此 在 以下 示例 中 ， 所有   " print ( ) "   调用 或者 都 不 执行 ， 或者 都 执行 :
第一个 理由 是 为了 特定 目的 而 编写 扩展 模块   ； 它们 是 扩展   Python   解释器 功能 的   C   模块
注解 :
基于 路径 的 查找 器 使用   " ImportError "   来 表示 钩子 无法 找到 与   path   entry   相对 应 的   path   entry   finder
https : / / www . microsoft . com / en   us / wdsi / help / folder   variables   Windows   NT   的 环境变量
该 装饰 器 也 提供 了 一个 用于 清理 / 使 缓存 失效 的 函数   " cache _ clear ( ) "
返回   data   的 样本 算术 平均数 ， 形式 为 序列 或 迭代 器
子 包名 与 其父 包名 以点 号 分隔 ， 与   Python   的 标准 属性 访问 语法 致
其他 语言 特性 修改
可用性 :   Windows
lly   一个 数值 ,   画布 左下角 的   y   坐标
使用   " auto "
它 应该 返回 该 对象 的 一个 可以 被   JSON   编码 的 版本 或者 引发 一个   " TypeError "
除了 格式 字符串 （ 应用 于 批处理 中 的 每个 消息 ） 之外 ， 还 提供 了 标题 和 尾部 格式 字符串
如果 你 不 记得 你 曾 主动 安装 过   Python ， 但 它 却 出现 在 了 你 的 电脑 上 ， 这里 有 一些 可能 的 原因
使用   " acquire ( ) "   来 释放 线程 锁
3.4   新版 功能 .
" sqlite3 "   SQLite   数据库   DB   API   2.0   接口 模块
参数 默认值
使用 给定 的 转换 类型 （ 来自   " parse ( ) "   方法 所 返回 的 元组 ） 来 转换 （ 由   " get _ field ( ) "   所 返回 的 ） 值
对于   AIFF   文件 ， 返回值 为   " b ' not   compressed ' "
计数   " 0 "   指定 字节 值   " 0x90 "
将   threshold0   设为 零会 禁用 回收
现在 我们 已经 了解 了 一般 的 扩展 语法 ， 我们 可以 回到 简化 复杂 正则 中组 处理 的 功能
以   " ' rb ' "   模式 打开 提供 的 文件
IDLE   改进
3.8   新版 功能 .
" dbm . ndbm "   基于   ndbm   的 接口
如果   start _ new _ session   为   true ， 则   setsid ( )   系统 调用 将 在 子 进程 执行 之前 被 执行
在 元组 之下 是 与 元组 顺序 相对 应 的 关键字 参数值
你 可以 将   Python 的   i / o   重定向 到 支持 读写 的   _ 任意 _   对象 ， 因此 你 只 需要 一个 包含   read ( )   和   write ( )   方法 的   Python   对象 （ 在 扩展 模块 中 定义 ）
此 对象 可 被 用来 执行 增量 数据压缩
判断 调用 是否 已经 完成 并且 未 引发 异常
库
以下 代码 序列 包含 两处 错误 ， 其中 一个 被 标记 为   fatal   因为 它 混合 了 两种 在 不同 堆 上 操作 的 不同 分配器
因此 ， 多次 调用 单个 函数 或 调用 多个 函数 通常 会 累积 此 错误
gid 是 整数 ， 名称 和 密码 是 字符串 ， 成员 列表 是 字符串 列表
例如 ， 我们 可以 编写 斐波 那契 数列 的 初始 子 序列 ， 如下 所示 :
此 模块 包含 了 低 层级 的   Tk   接口 ， 它 不 应该 被 应用 程序员 所 直接 使用
Python   2.2   有 什么 新 变化
协议
以 毫秒 为 单位 设置 能够 被 识别 为 点击 的 按 下 和 释放 事件 之间 可以 间隔 的 最长 时间 ， 并 返回 之前 的 间隔 值
其他 语言 特性 修改
所有 参数 表达式 将 在 尝试 调用 前 被 求值
在   3.9   版 更改 :   旧   API   已 被 移除
诊断
最大 的 问题 依旧 ： 何时 使用   " Py _ INCREF ( x ) "   和   " Py _ DECREF ( x ) "   ？ 我们 首先 引入 一些 概念
如果 你 要 使用   " signal "   模块 来 实现 异步 信号处理 程序 ， 则 可能 无法 在 这些 处理程序 中 使用   logging
子 进程 的 退出 状态 码
要 指定 此 行为 ， 已 增加 了 两个 新 的 形参 :   happy _ eyeballs _ delay   和   interleave
" json "   提供 了 与 标准 库   " marshal "   和   " pickle "   相似 的 API 接口
现在 进入 Python 解释器 ， 并用 以下 命令 导入 该 模块 :
构建 XML 文档
" zoneinfo "   模块 不 直接 提供 时 区 数据 ， 而是 在 可能 的 情况 下 从 系统 时 区 数据库 或   PyPI   上 的 第一 方包   tzdata   获取 时 区 信息
（ 由   Victor   Stinner   在   bpo   36707   中 贡献 。 ）
" Chunk "   对象 支持 下列 方法 ：
（ 由   Raymond   Hettinger   在   bpo   35864   中 贡献 。 ）
对于 使用 等 宽 字体 的 文本 来说 通常 都 需要 这样
3.6   新版 功能 .
互联网 数据处理
创建 所 传入 的   ctx   上下文 对象 的 浅 拷贝
" xdrlib "   模块 为 外部 数据表示 标准 提供 支持 ， 该 标准 的 描述 见   RFC   1014   ，   由   Sun   Microsystems ,   Inc
3.2   新版 功能 .
它 支持 一些 额外 方法 例如   " getpeercert ( ) " ， 该 方法 可 从 连接 的 另一端 获取 证书 ， 还有   " cipher ( ) " ， 该 方法 可 获取 安全 连接 所 使用 的 密码
Cookie   管理
垃圾 回收 器 把 所有 对象 分类 为 三代 ， 其 依据 是 对象 在 多少 次 垃圾 回收 后 幸存
安全
stacklevel   参数 用于 调用   " debug ( ) "   和 其他   API
请参阅 子 进程   APIs   相关 文档 .
与 省略号 文字 字面   “ " ... " ”   相同
静态 SystemTap 标记
在 其他 用途 中 ， 这 允许 初始化 依赖于 一个 或 多个 其他 字段 的 字 段值
获取 海龟 的 状态
如果 发生 超时 ， 任务 将 取消 并 引发   " asyncio . TimeoutError " .
" raise "   唯一 的 参数 就是 要 抛出 的 异常
3.4   新版 功能 .
" bz2 "   模块 包含 ：
安全
此 模块 是 实验性 的 且 在 为   Tk   DND   所 替代 后 将 被 弃用
一旦   " foo . bar "   完成 导入 ， 最后 一次 遍历 将 调用   " mpf . find _ spec ( " foo . bar . baz " ,   foo . bar .__ path __ ,   None ) "
( Unix   版本 )   映射 文件 描述符   fileno   指定 的 文件 的   length   个 字节 ， 并 返回 一个   mmap   对象
但是 ， 最 左侧   " for "   子句 内 的 可 迭代 对象 是 会 被 立即 求值 的 ， 因此 它 所 造成 的 错误 会 在 生成器 表达式 被 定义 时 被 检测 到 ， 而 不是 在 获取 第一个 值时 才 出错
将会 使用   VT100 / IBM   PC   形式 的 字符 在 可用 的 终端 上 （ 包括   xterm   和 大多数 其他软件 终端 模拟器 ） 绘制 矩形
返回   o   的 第   i   个 元素 或 在 失败 时 返回   " NULL "
处理程序 只 处理 相应 的   try   子句 中 发生 的 异常 ， 而 不 处理 同一   " try "   语句 内 其他 处理程序 中 的 异常
dst   必须 是 完整 的 目标 文件名 ； 对于 接受 目标目录 路径 的 拷贝 请 参见   " copy ( ) "
相对 于 使用   fork   或者   forkserver   ， 使用 这个 方法 启动 进程 相当 慢
0 年 指 公元前 1 年 ，   1 年 指 公元前 2 年 ， 依此类推
压缩 单个 数据 块 的 更 便捷 方式 请参阅   " compress ( ) "
警告 ： 这种 技术 不是 100 ％ 万无一失
" 1 "   该 标志 应 位于 值 和 货币 符号 之前
并且 如果 目录 的 权限 不 允许 写入 ， 提取 文件 到 目录 的 操作 将 失败
嵌套 的 列表 推导 式
函数
下面 是 提供 的 编码 函数 ：
如果   ob   的 类型 是   " PyDateTime _ TimeType "   或是   " PyDateTime _ TimeType "   的 子 类型 则 返回 真值
返回 一个   2   元组 ； 其中 第一个 元素 是 包含 所 要 执行命令 的 字符串   ( 它 可 被 传递 给   " os . system ( ) " ) ， 第二个 元素 是 对应 于 给定   MIME   类型 的   mailcap   条目
此 错误 消息 不 包含 缺失   DLL   的 名称 ， 因为   Windows   API   并 不会 返回 此类 信息 ，   这 使得 此 错误 难以 诊断
输入 的 文件 结束符 被 作为 字符串 传回   " ' EOF ' "
" collections . deque "   的 泛型 版本
选定 条 目的 简短 说明 :
在   " 设置   > 主页   > 应用 和 功能 "   页面 中 ， 点选   " 管理 可 选 功能 "   ， 选择 与 每个 命令 关联 的 python 版本
在   Python   2.7   仍受 支持 的 时候 ， 有 许多 旧 功能 在   Python   3   中 被 保留 以 维持 对   Python   2.7   的 向下兼容
Python   2.7   有 什么 新 变化
如果 没有 编码 声明 ， 则 默认 编码 为   UTF   8
除了 这里 显示 的 内容 ， " argparse "   模块 还 提供 了 更 多功能
带有 一个 反 斜杠 前缀 的 双引号 会 被 解读 为 双引号 字 面值
它们 会 被 全部 弹出 并 将 返回值 推入 栈顶
更 具体 一些 ， 让 我们 看看 前 向 是 有用 的 情况
The   useful   mapping   keys   in   a   " LogRecord "   are   given   in   the   section   on   LogRecord   属性 .
注册 一个 新 的 子 处理 回调 函数
锦标赛 模式 是 达成 此 目标 的 好 办法
可 用于   " map ( ) "   函数 中 的 参数 ， 被 调用函数 可 得到 一个 不变 参数
命令行 中 的   " N "   个 参数 会 被 聚集 到 一个 列表 中
要 更改 这样 的 默认 行为 ， 可以 使用   " prog   "   参数 为   " ArgumentParser "   提供 另 一个 值 ：
文档
" fnmatch "   Unix   文件名 模式匹配
即使 在 原始 字 面值 中 ， 引号 也 可以 加上 反 斜杠 转义 符 ， 但 反 斜杠 会 保留 在 输出 结果 中 ； 例如   " r " \ " " "   是 一个 有效 的 字符串 字 面值 ， 包含 两个 字符 :   一个 反 斜杠 和 一个 双引号 ； 而   " r " \ " "   不是 一个 有效 的 字符串 字 面值   ( 即便 是 原始 字符串 也 不能 以 奇数 个 反 斜杠 结束 )
Action   类
但 需要 让 管理员 激活 “ 启用   Win32   长 路径 ” 组策略 ， 或 在 注册表 键   " HKEY _ LOCAL _ MACHINE \ SYSTEM \ CurrentControlSet \ Control \ FileSystem "   中 设置   " LongPathsEnabled "   为   " 1 "
如果 你 希望 在 处理程序 退出 后 还 能 继续 输出 ， 就 像 没有 发生 过 中断 一样 ， 你 可能 会 想要 在 信号处理 程序 中 调用   " noqiflush ( ) "
能够 判断 一行 输入 是否 完成 了 一个 Python 语句 ： 简而言之 ， 告诉 我们 是否 要 打印 ' " > > > " ' 或 ' " ... " '
期望 特定 签名 的 回调 函数 的 框架 可以 将 类型 标注 为   " Callable [ [ Arg1Type ,   Arg2Type ] ,   ReturnType ] "
为了 将 其 拓展 至 识别 其他 对象 ， 需要 子 类化 并 实现   " default ( ) "   方法 于 另 一种 返回   " o "   的 可 序列化 对象 的 方法 如果 可行 ， 否则 它 应该 调用 超类 实现 （ 来 引发   " TypeError "   ）
初始化 函数 的 声明 如下 ：
Python   3.0   有 什么 新 变化
如果 表达式 是 一个 元组 （ 例如 上面 的   " ( x ,   y ) " ） ， 那么 就 必须 加上 括号
" ZoneInfo "   类
基于 字符串 缓冲区   buf   创建 并 返回 一个   " TarInfo "   对象
编辑 菜单 （ 命令行 和 编辑器 ）
返回 一个 包含 字典 中 所有 键值 项 的   " PyListObject "
让 我们 再 介绍 第三个 方法   " add _ mutually _ exclusive _ group ( ) "
命名 空间 包是 由 多个 部分 构成 的 ， 每个 部分 为 父包 增加 一个 子包
返回 :   旧 的 流 ， 如果 流已 被 改变 的话 ， 如果 未 被 改变 则 为   None
新 的 配置 选项   " command _ packages "   ( 命令行 选项 为   "   command   packages " )   可用 来 指定 附加 包 ， 以 在 其中 查找 实现 新增 命令 的 模块
一个 特别 有效 的 处理 子 命令 的 方式 是 将   " add _ subparsers ( ) "   方法 与 对   " set _ defaults ( ) "   的 调用 结合 起来 使用 ， 这样 每个 子 解析器 就 能 知道 应当 执行 哪个   Python   函数
" " append _ const " "   将 常量 值 附加 到 列表
" inspect "   检查 对象
整数 除法 运算符   " / / "   的 行为 类似 ， 返回 真商 的 整数 部分 （ 截断 为 零 ） 而 不是 它 的 向下 取整 ， 以便 保留 通常 的 标识   " x   ( x   / /   y )   y   +   x   %   y " :
面板 可以 在 需要 使用 大 窗口 时 使用 ， 并且 每次 只 需 将 窗口 的 一部分 放在 屏幕 上
fp   必须 同时 支持 文件 类 对象 上 的   " readline ( ) "   和   " read ( ) "   方法
模块   " xdrlib "   打包 和解 包   XDR   数据
返回 对应   o   的 内容 的 指针
使用 不 活动 的 当前 子 监视器 生成 子 进程 将 引发   " RuntimeError "
到 目前为止 ， 你 可能 已经 注意 到 正则表达式 是 一种 非常 紧凑 的 表示法 ， 但 它们 并 不是 非常 易读
将 传入 的   trace _ callback   设 为   " None "   将 禁用 跟踪 回调
值   意义   " ' r ' "   以 只读 方式 打开 现有 数据库 （ 默认 ）   " ' w ' "   以 读写 方式 打开 现有 数据库   " ' c ' "   以 读写 方式 打开 数据库 ， 如果 不 存在 则 创建 它   " ' n ' "   始终 创建 一个 新 的 空 数据库 ， 以 读写 方式 打开
3.2   新版 功能 .
文件系统 限制
如果 您 希望 迁移 扩展 模块 而 不是 纯   Python   代码 ， 请参阅 将 扩展 模块 移植 到   Python   3
安装   Python   模块 最新 的 模块 安装 文档
删除 全部 或前 / 后   n   个 海龟 印章
确定   code   是否 属于   tableC.8   ( 改变 显示 属性 或 已弃 用 )
要 匹配 字面   " ' | ' " ， 请 使用   " \ | " ， 或 将 其括 在 字符 类中 ， 如   " [ | ] "
description   由   " get _ archive _ formats ( ) "   使用 ， 它 将 返回 归档 器 的 列表
请 注意 当 一条 消息 有 此 缺陷 时 ， 其   " is _ multipart ( ) "   方法 可能 返回   " False " ， 即使 其 内容 类型 宣称 为   multipart
如果 您 没有 账号 ， 请 点击 “ 注册 （ Register ） ” 链接 ， 或者 在 侧边 栏中 选择 任何 一个   OpenID   登录 方式
它 应当 在 不再 需要 异常 时 被 显式 地 清空 以 打破 引用 循环
监听器 对象 拥有 下列 只读 属性 :
当 单个 选项 在 从 单个 文件 、 字符串 或 字典 读取 时 出现 两次 时 引发 的 异常
移 去 并且 返回 一个 元素 ， deque   最 右侧 的 那 一个
隐藏 窗口
上次 修改 的 时间
二进制 转换
可 用作 其他   color / pencolor / fillcolor   调用 的 输入
增加 了   " calloc "   函数
" py _ compile "   模块 提供 了 用来 从 源文件 生成 字节 码 的 函数 和 另 一个 用于 当 模块 源文件 作为 脚本 被 调用 时 的 函数
删除 信息 头 当中 字段名 匹配   name   的 所有 字 段
" http . server "   HTTP   服务器
因此 ， 建议 使用   " make   altinstall "   而 不是   " make   install "   ， 因为 后者 只 安装 了   "   exec _ prefix   / bin / python   version   "
但是 ， 如果 你 想要 一个 可以 原地 修改   Unicode   数据 的 对象 ， 可 尝试 使用   " io . StringIO "   对象 或   " array "   模块 :
在   3.8   版 更改 :   The   function   now   uses   the   UTF   8   encoding   on   Windows   if   " Py _ LegacyWindowsFSEncodingFlag "   is   zero ;
新增 了   policy   关键字
包装 起来
此外 ， " socket "   模块 可 透明 地 将   Unicode   主机名 转换 为   ACE ， 以便 应用 在 将 它们 传给   socket   模块 时 无须 自行 转换 主机名
致谢
在 上面 的 示例 中 ， 空行 产生 了 两个 键 ， " key "   和   " this "
前向 断言
文档
实现   " TOS   TOS1   TOS "
示例
其它 实用工具
这些 参数 会 被 包含 在 一个 元组 里 （ 参见 元组 和 序列   ）
Valid   values   are :   text :   只 显示 文本   image :   只 显示 图片   top ,   bottom ,   left ,   right :   分别 显示 图片 的 上 , 下 , 左 , 右 的 文本
将 网络 视为 列表 有时 很 有用
Smith   贡献 ）
在 调用 接受 仅限 位置 形参 的 函数 时 ， 参数 只会 基于 它们 的 位置 被 映射 到 形参
当 达到 这个 大小 的 时候 ， 插入 操作 将 阻塞 至 队列 中 的 项目 被 消费 掉
返回值 是 转换 后 的 行 数据 ， 如果   newline   为 true ， 则 返回值 包括 换行符
这个 模块 定义 了 以下 函数 ：
转换 和 比较 都 是 完全 精确 的
flags   条目 显示 对   " Pi "   的 有理 逼近 被 舍入 （ 超出 上下文 精度 的 数字 被 抛弃 ）   并且 结果 是 不 精确 的 （ 一些 丢弃 的 数字 不为 零 ）
比较 以下 调用 :
由于 文件 本身
在   3.8   版 更改 :   如果   " __ complex __ ( ) "   和   " __ float __ ( ) "   未定义 则 回退 至   " __ index __ ( ) "
Numerical   Python   文档   Numeric   Python   扩展   ( NumPy )   定义 了 另 一种 数组 类型 ； 请 访问   http : / / www . numpy . org /   了解 有关   Numerical   Python   的 更 多 信息
wrapcol   控制 了 输出 是否 包含 换行符   ( " b ' \ n ' " )
但是 ， 其他 实现 ( 如   Jython   或   PyPy   ) ， ) 可以 依赖 不同 的 机制 ， 如 完全 的 垃圾 回收 器
一个 条件 变量 对象 允许 一个 或 多个 线程 在 被 其它 线程 所 通知 之前 进行 等待
" contextmanager ( ) "   使用   " ContextDecorator "   因此 它 创建 的 上下文 管理器 不仅 可以 用 在   " with "   语句 中 ， 还 可以 用作 一个 装饰 器
可以 改用   " PyUnicode _ Tailmatch ( ) "   函数
这里 有 一个 很小 但 很 现实 的 例子 :
通常 ， 您 不 需要 将 一个 处理器 附加 到 一个 以上 的 记录器 上   — —   如果 您 将 它 附加 到 记录器 层次结构 中 最高 的 适当 记录器 上 ， 则 它 将 看到 所有 后代 记录器 记录 的 所有 事件 ， 前提 是 它们 的 传播 设置 保留 为   " True "
用于 表示   " contextvars . Context "   对象 的   C   结构 体
当 你 调用 一个   " LoggerAdapter "   实例 的 方法 时 ， 它会 把 调用 委托 给 内部 的   " Logger "   的 实例 ， 并 为 其 整理 相关 的 上下文 信息
3.8   版后 已 移除 :   " __ int __ ( ) "   已 被 弃用
" combinations _ with _ replacement ( ) "   的 代码 可 被 改写 为   " production ( ) "   过滤 后 的 子 序列 ， （ 相对 于 元素 在 输入 中 的 位置 ） 元素 不是 有序 的
（ 由   Lorenzo   M
当 使用 来自   " io "   模块 的 带 缓冲   I / O   类时 此 属性 可用
" TextIOBase "   在 来自   " IOBase "   的 成员 以外 还 提供 或 重载 了 以下 数据 属性 和 方法 :
" parser "   访问   Python   解析 树
第二个 操作数 的 绝对值 给出 要 轮转 的 位数
return _ when   指定 此 函数 应 在 何时 返回
with   语句 上下文 管理器
" enumerate ( ) "   常常 用于 遍历 列表 并 记录 达到 特定条件 时 的 下标 :
根据   desc   中 的 数据 创建 一个 新 的 结构 序列 类型 ， 如下 所述
此 方法 首先 检查 由   " logging . disable ( level ) "   设置 的 模块 级 的 级别 ， 然后 检查 由   " getEffectiveLevel ( ) "   确定 的 记录器 的 有效 级别
发生 错误 时 返回   "   1 "
" cmd "   支持 面向 行 的 命令 解释器
测试用例
它 从来 没有 任何 作用 并 在   Python   3.4   中 已 被 弃用
将 一个 切片 对象 推入 栈顶
这会 将 列表 转换 为 集合 ， 从而 删除 重复 项 ， 然后 返回 到 列表 中
当   " with "   块 执行 完毕 ， 将 调用   " close ( ) "   方法
函数 示例   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
如果 这个 类 实例 的 引用 计数 是 1 ， 那么 处置 动作 就 会 调用   " __ del __ ( ) "   方法
curses   库会 保留 两个 数据结构 ， 一个 代表 当前 物理 屏幕 的 内容 以及 一个 虚拟 屏幕 代表 需要 的 后续 状态
它 接受 编辑 按键 直到 键入 了 一个 终止 按键
返回 一个 表示 指定 年 月 的 周 列表
此 方法 简单 地 循环 遍历 处理程序 ， 向 它们 提供 要 处理 的 记录
返回 指定 年 、 月 、 日 的   " datetime . date "   对象
Exception   类
额外 检查 将 添加 到 对象 分配器
模块
当   Turtle   类 的 方法 对应 函数 被 调用 时会 自动 创建 一个   ( 匿名 的 )   Turtle   对象
它 也 不会 添加 或 更改 现有 的 明确 定义 的   " __ hash __ ( ) "   方法
然而   Unicode   软件 仍然 必须 能够 处理   " U + FEFF "   的 两个 含义 ： 作为   BOM   它 被 用来 确定 已 编码 字节 的 存储 布局 ， 并 在 字节 序列 被 解码 为 字符串 后 将 其 去除 ； 作为   " ZERO   WIDTH   NO   BREAK   SPACE "   它 是 一个 普通 字符 ， 将 像 其他 字符 一样 被 解码
要 指定 一个 八进制 数码 ， 则 在 八进制 值 之前 加 一个零 和 一个 小写 或 大写字母   " o "   作为 前缀
库
模式匹配 ： 格式 塔 方法   John   W
如果   quiet   为   0   或   1 ， 并且   doraise   为 假值 ， 则 会 启用 默认 行为 ： 写入 错误信息 到   " sys . stderr " ， 并且 函数 将 返回   " None "   而 非 一个 路径
在   C   中有 许多 不同 的 放置 花 括号 的 方式
在 这种 情况 下 ， 如果 第二个 模块 仅 用于 一个 函数 ， 则 可以 轻松 地 将 模块 导入 语句 移动 到 该 函数 中
" tp _ clear "   处理程序 必须 为   " inquiry "   类型 ， 如果 对象 不可 变则 为   " NULL "
这个 实现 可 在 重载 它 的 类 上 通过   " super ( ) "   机制 来 调用
参见 :
如果 你 只 想 确认 参数   x   是不是 数字 而 不 关心 其 类型 ， 则 使用 ` ` isinstance ( x ,   Number ) ` `
我们 将 stderr 标准 错误 传输 到 / dev / null ， 我 再次 运行 生成 的 脚步 ， 唯一 被 写入   stdout 标准 输出 的 消息 ， 即 我们 所 能 看见 的 消息 ， 如下 ：
一旦 你 有 一个 表示 编译 正则表达式 的 对象 ， 你 用 它 做 什么 ？   模式 对象 有 几种 方法 和 属性
安全
递归 控制
将 代码 块 限制 为 一行 是 一种 有意 采取 的 措施 ， 不 鼓励 在 此处 放置 更 复杂 的 内容
bpo   22085 :   在   Tkinter   中 删除 了 对   TK   8.3   的 支持
如果 发生 错误 则 返回   " NULL "
如果 你 更 喜欢 类似 字典 的 属性 视图 ， 你 可以 使用 标准   Python   中 惯常 的   " vars ( ) " :
Python   使用 它 作为 文本文件 默认 的 编码 格式   ( 即   " locale . getpreferredencoding ( ) " )
注释 :
此 限制 使得 非   Python   实现 的 模块 无法 使用 此 模块 ， 包括 所有 标准 和 可选 的 扩展 模块
[ . ] ( ? ! bat $ ) [ ^ . ]   $ "   负 向前 向 意味着 ： 如果 表达式   " bat "   此时 不 匹配 ， 请 尝试 其余 的 模式 ； 如果   " bat $ "   匹配 ， 整个 模式 将 失败
需要 捕获   stdout   或   stderr   的 代码 应当 改用   " run ( ) " :
套 接字 创建
另 一个 例子 ： 特定 的 命令 会 接受 许多 在 多次 运行 中 都 不 发生变化 的 选项 ； 例如 ，   bdist _ rpm   需要 知道 为 创建   RPM   发布 包 生成   " spec "   文件 所 要求 的 所有 信息
[ 2 ]   术语 " 借用 " 一个 引用 是 不 完全正确 的 ： 拥有者 仍然 有 引用 的 拷贝
对应 于   " errno "   " ECHILD "
错误处理 方案
用于 字节 数据 的 函数
这是   logging . conf   文件 ：
作者 :   Nick   Coghlan
在 写入 模式 下 ， 会 向 归档 添加 两个 表示 结束 的 零 数据 块
如果 未 给出 ， 则 会 使用   " < dict > "
这 意味着 你 可以 交互 输入 Python 语句 或 表达式 ，   并 在 等待 时 执行 或 评估 它们
这个 函数 只 定位 支持 垃圾 回收 的 容器 ； 引用 了 其它 对象 但 不 支持 垃圾 回收 的 扩展 类型 不会 被 找到
配置 变量
在 某些 情况 下 参数 列表 是 由 Python 程序 提供 的 ， 通过 接口 再 传到 回调 函数
如此 一直 到 程序 结束 ， 这时候 在 程序 的 输出 上 ， 不 变量 应该 会 与 期望 的 状态 一致
特殊 值 主要 与 用户 定义 的 容器 数据类型 的 扩展 切片 语法 结合 使用
它 主要 用于 这些 工具 的 创建者 ， 而 不是 建议 你 创建 自己 的   C   扩展 的 方法
所有 的   " Coroutine "   实例 都 必须 是   " Awaitable "   实例
3.2   新版 功能 .
选项   意义   " ' < ' "   强制 字段 在 可用 空间 内 左 对齐 （ 这是 大多数 对象 的 默认值 ）
性能 优化
为   curses   窗口 重新分配 存储空间 以 将 其 尺寸 调整 为 指定 的 值
这 不算 是 程序 错误 ： 这一 结果 是 由于 大多数 十进制 小数 实际上 都 不能 以 浮点数 精确 地 表示
它们 接受 下列 可 选 通用 形参 :
性能 优化
如果 您 是   Python   的 新手   ， 你 应该 开始 阅读 该 文档 中 的 教程 介绍
虽然 该 参数 位置 靠 后 ， 但 它 却是 必须 的
object   对象 任何 具有 状态 （ 属性 或值 ） 以及 预定 义 行为 （ 方法 ） 的 数据
现在 ， 考虑 使 更 复杂 一点 的 问题 ； 如果 你 想 匹配 扩展名 不是   " bat "   的 文件名 怎么办 ？   一些 错误 的 尝试 ：
此 函数 会 调用 底层 库中 的   " rl _ parse _ and _ bind ( ) "
Python   的   " curses "   模块 添加 了 一个 基本 的 文本 输入 控件
（ 由   Mefistotelis   在   bpo   39011   中 贡献 。 ）
组合 框
将 当前 回收 计数 以形 为   " ( count0 ,   count1 ,   count2 ) "   的 元组 返回
请参阅 相应 处理程序 的 构造 器 说明 或者 下面 的 示例 ， 以 了解 典型 的 条目 是 如何 构造 的
下列 方法 支持 打包 数组 和 列表 :
序列 比较 是 按 字典 序对 相应 元素 进行 逐个 比较
条件 对象
"   s "   ， "   p "   和   "   t "   选项 可以 按 顺序 作为 位置 参数 传入
工具 函数
对应 于   " errno "   " EPIPE "   和   " ESHUTDOWN "
http : / / www . defmacro . org / ramblings / fp . html :   一个 使用   Java   示例 的 函数 式 编程 的 总体 介绍 ， 有 很长 的 历史 说明
关闭   AIFF   文件
" sys "   包含 标准 IO 流 :   " sys . stdin " ,   " sys . stdout "   和   " sys . stderr "
更 多 细节 ， 详见   " mtime "   属性
bpo   35401 :   将 Windows 内部 版本 更新 到 OpenSSL   1.1 . 0j
当协程 函数 被 调用 而 不是 被 等待 时   ( 即 执行   " coro ( ) "   而 不是   " await   coro ( ) " )   或者 协程 没有 通过   " asyncio . create _ task ( ) "   被 排入 计划 日程 ， asyncio   将会 发出 一条   " RuntimeWarning " :
本章 将 解释   Python   中 组成 表达式 的 各种 元素 的 的 含义
" pydoc "   文档 生成器 和 在线 帮助 系统
返回 一个   " namedtuple ( ) "   " ( nchannels ,   sampwidth ,   framerate ,   nframes ,   comptype ,   compname ) " ， 与   " get   ( ) "   方法 的 输出 相同
每个 映射 项 被 会 加入 新 的 字典
这些 编码器 实际上 由   " MIMEAudio "   和   " MIMEImage "   类 构造 器所 使用 以 提供 默认 编码 格式
如果 应用程序 引发 了 异常 ， 此 函数 将 在 重新 引发 异常 并 生成 回溯 信息 之前 将 终端 恢复 到 正常 状态
相当于   " get ( False ) "
如果 它 是 一个 名称 ， 则 日期 和 时间 会 被 设为 当前 日期 和 时间
" position "   谓词 前 必须 有 标签 名称
示例
一般来说 ， 通常 情况 下 请 尝试   " copy . copy ( ) "   或   " copy . deepcopy ( ) "
默认 适配器 和 转换器
func   发起 调用 日志 记录 调用 的 函数 或 方法 名称
I / O   基类
反射
下面 的 示例 有 一个 位置 参数 ， 一个 关键字 参数 以及 返回值 带有 相应 标注 :
关于 错误 和 异常
线程 本地 数据 是 特定 线程 的 数据
如果 你 需要 知道 一个 类 是否是 一个 数据 类 的 实例 （ 而 不是 一个 数据 类 本身 ）   ， 那么 再 添加 一个   " not   isinstance ( obj ,   type ) "   检查 :
弃用
" SequenceMatcher "   在 最坏 情况 下 为 平方 时间 而 在 一般 情况 下 的 行为 受到 序列 中有 多少 相同 元素 这一 因素 的 微妙 影响 ； 在 最佳 情况 下则 为 线性 时间
允许 传入   " NULL "   可能 导致 内存 访问 冲突 和 解释器 的 立即 终止
概述
使用   DTrace   和   SystemTap   检测 CPython
大致 相当于 ：
PEP   3101 :   高级 字符串 格式
减少 缩进 将 选定 的 行向 左 移动 缩进 宽度 （ 默认 为 4 个 空格 ）
PEP   526   变量 标注 的 语法 变量 声明 的 类型 提示 功能 ， 包括 类 变量 和 实例 变量
我 建议 你 在 处理   " yield "   表达式 返回值 的 时候 ，   总是 两边 写 上 括号 ， 就 像 上面 的 例子 一样
检查 已 崩溃 程序 的 典型 用法 是 :
属性   索引   值   值 （ 如果 不 存在 ）   " scheme "   0   URL 方案 说明符   scheme   parameter   " netloc "   1   网络 位置 部分   空 字符串   " path "   2   分层 路径   空 字符串   " params "   3   最后 路径 元素 的 参数   空 字符串   " query "   4   查询 组件   空 字符串   " fragment "   5   片段 识别   空 字符串   " username "   用户名   " None "   " password "   密码   " None "   " hostname "   主机名 （ 小写 ）   " None "   " port "   端口号 为 整数 （ 如果 存在 ）   " None "
若 需要 使用 探索性 测试 ， 所有 的 测试 文件 必须 是   modules   或   packages   （ 包括   namespace   packages   ) 并 可 从 项目 根目录 导入   （ 即 它们 的 文件名 必须 是 有效 的   identifiers   ）
将 它们 合并 到 元组 的 迭代 器中 ， 对 结果 列表 进行 排序 ， 然后 选择 所 需 的 元素
注意 ： 在 本 教程 中 的 示例 代码 使用   " doctest "   进行 过 测试 ， 保证 其 正确 运行
通过 调用   iterator   的   " __ next __ ( ) "   方法 获取 下 一个 元素
模块 对象 有 一个 秘密 的 只读 属性   " __ dict __ " ， 它 返回 用于 实现 模块 命名 空间 的 字典 ； " __ dict __ "   是 属性 但 不是 全局 名称
如果 不能 处理 该 路径   ， 则 会 引发   " OSError "
是 的
它 调用 时会 在 当该 类型 存在 于 外部 函数 的   " argtypes "   元组 时 传入 外部 函数调用 所 使用 的 实际 对象   ； 它 必须 返回 一个 可 被 用作 函数调用 参数 的 对象
自定义
命令行
它 是 唯一   " n   0 "   的 三元组
表达式   " t2   t3 "   通常 与   " t2   +   (   t3 ) "   是 等价 的 ， 除非   t3   等于   " timedelta . max " ;   在 这种 情况 下 前者 会 返回 结果 ， 而 后者 则 会 溢出
有 的
自动 重启 会 保留   pdb   的 状态 （ 如 断点 ） ， 在 大多数 情况 下 ， 这比 在 退出 程序 的 同时 退出 调试器 更加 实用
如果 未找到 匹配 块 ， 此 方法 将 返回   " ( alo ,   blo ,   0 ) "
让 我们 修复 一下 ：
内存 会 被 初始化 为 零
data   可以 是 序列 或 可 迭代 对象
重复
从 任意 一个 提供 了 类似 于 字典 的   " items ( ) "   方法 的 对象 加载 配置
如果 设置 了   " PAGER "   环境变量 ，   pydoc   将 使用 该 变量值 作为 分页 程序
" 0x01 "   一个 默认值 的 元组 ， 用于 按 位置 排序 的 仅限 位置 形参 以及 位置 或 关键 字形 参
例如
指数 取值 则 来自 几何 分布 ， 其中 小于   53   的 指数 的 出现 频率 为 下 一个 较大 指数 的 一半
在   3.5   版 更改 :   支持 使用   " "   " "   的 递归   glob
在   3.9   版 更改 :   加入 默认 参数
实例 属性 可 通过   " self . name   value "   在 方法 中 设定
级别   3   已 停止
文档
库
当 引入 不 兼容 的 修改 时 ， 可以 记录 其 引入 的 时间 以及 强制 使用 的 时间
返回 包含 对值 的 弱 引用 的 可 迭代 对象
在   3.3   版 更改 :   加入   daemon   参数
构建
这 可能 引发   " OverflowError " ， 如果 时间 戳 数值 超出 所在 平台   C   " localtime ( ) "   函数 的 支持 范围 的话 ， 并且 会 在   " localtime ( ) "   出错 时 引发   " OSError "
这会 调入 所有 非以 下划线 （ " _ " ） 开头 的 名称
" execute ( ) "   将 只 执行 一条 单独 的   SQL   语句
注释 对象
重置 日志 模块 值 并且 调用 系统 库   " closelog ( ) " .
换句话说 ， 下列 表达式 应该 有 相同 的 结果 :
高层 级   API   索引
当 你 想 保存 诸如 嵌套 列表 和 字典 这样 更 复杂 的 数据类型 时 ， 手动 解析 和 序列化 会 变得复杂
创建 一个 使用 了 来自 栈 的   count   个项 的 元组 ， 并 将 结果 元组 推入 栈顶
在 Unix 上 ， 这是 使用   " SIGTERM "   信号 完成 的 ； 在 Windows 上 使用   " TerminateProcess ( ) "
如果 在 函数 体内 的 任何 位置 为 变量 赋值 ， 则 除非 明确 声明 为 全局 ， 否则 将 其 视为 局部 值
映射 类型   " dict "
" PyUnicode _ AsUnicodeCopy ( ) " :   使用   " PyUnicode _ AsUCS4Copy ( ) "   或   " PyUnicode _ AsWideCharString ( ) "
" Py _ UNICODE _ strchr " ,   " Py _ UNICODE _ strrchr " :   使用   " PyUnicode _ FindChar ( ) "
title   输出 帮助 的 子 解析器 分组 的 标题 ； 如果 提供 了 描述 则 默认 为   " subcommands " ， 否则 使用 位置 参数 的 标题
因此 ， 当 将 这些 格式 转换 为   8   位 宽 采样 时 ， 还 需使 结果 加上   128 :
在 这种 情况 下 ， 您 必须 在 格式 器 完成 格式化 后 清除 缓存 的 值 ， 以便 下 一个 处理事件 的 格式 器 不 使用 缓存 的 值 ，   而是 重新 计算 它
3.6   版后 已 移除 :   从   Python   3.6   开始 ， 弃用 对   " getgrgid ( ) "   中 的   float   或   string   等 非   integer   参数 的 支持
它 的 构造 器 需要 一个   Canvas ,   ScrolledCanvas   或   TurtleScreen   作为 参数 ， 以 指定   RawTurtle   对象 在 哪里 绘图
返回 队列 的 大致 大小
Mac   上 的 图形界面 编程
由于 被 装饰 的 函数 必须 能够 被 多次 调用 ， 因此 对应 的 上下文 管理器 必须 支持 在 多个   " with "   语句 中 使用
此 复制 是非 破坏性 的 ， 这 意味着 当前 背景 字符 不会 覆盖 掉   destwin   的 旧 内容
可选 的   flag   参数 可以 是 ：
在   3.8   版 更改 :   添加 了 上下文 管理器 支持
如果   strict   为   false   （ 默认 为   " True "   ） ， 那么 控制字符 将 被 允许 在 字符串 内
用于 小 代码 片段 的 计数 执行 速度 的 类
构建
成功 时 返回   o1   和   o2   " 按位 或 "   的 结果 ， 失败 时 返回   " NULL "
有时候 ， dlls 的 导出 的 函数 名 不 符合   Python   的 标识符 规范 ， 比如   " " ? ? 2 @ YAPAXI @ Z " "
但 有 的 则 必须 作为   bdist _ rpm   的 选项 提供 ， 每次 运行 时 都 在 命令行 中 完成 将会 非常 繁琐
记录器 的 名字 分级 类似   Python   包 的 层级 ， 如果 您 使用 建议 的 结构   " logging . getLogger ( __ name __ ) "   在 每个 模块 的 基础 上 组织 记录器 ， 则 与 之 完全相同
引发 一个 审计 事件   " winreg . SetValue " ， 附带 参数   " key " ,   " sub _ key " ,   " type " ,   " value "
检测   ASCII   空白 字符 ； 包括 空格 ， 换行 ， 回车 ， 进纸 ， 水平 制表 和 垂直 制表
（ 由   Antoine   Pitrou   贡献 。 ）
注释
下面 是 使用   urllib . request   最 简单 的 方式 ：
如果 信息 内 不 存在 匹配 的 字 段 ， 返回   failobj   （ 其 默认值 为   " None "   ）
" builtins "   内 建 对象
构建 和   C   API   的 改变
The   python   command   and   most   stdlib   scripts   ( as   well   as   " argparse " )   now   output   "   version "   information   to   " stdout "   instead   of   " stderr "   ( for   issue   list   see   其他 改进   above ) .
另 请 参见   " timetz ( ) "   方法
由于 在 许多 平台 上   " datetime "   支持 的 范围 比   " mktime ( ) "   更广 ， 对于 极其 遥远 的 过去 或 未来 此 方法 可能 引发   " OverflowError "
如果 表达式 的 值 发生 改变 则 显示 它 的 值 ， 每次 将 停止 执行 当前 帧
请 注意 ， 进程 的 后代 进程 将 不会 被 终止   — —   它们 将 简单 地 变成 孤立 的
修改 给定   path   的 所有者   user   和 / 或   group
" ' w : gz ' "   打开 用于   gzip   压缩 的 写入
input   和   output   必须 为 文件 对象
Python   的 标准 实现   CPython   使用 引用 计数 来 检测 不可 访问 的 对象 ， 并 使用 另 一种 机制 来 收集 引用 循环 ， 定期 执行 循环 检测 算法 来 查找 不可 访问 的 循环 并 删除 所 涉及 的 对象
部分 更 复杂 的 操作 仅 接受   16   位 采样 ， 而 其他 操作 始终 需要 采样 大小 （ 以 字节 为 单位 ） 作为 该 操作 的 参数
如果   ignore _ errors   为 真值 ， 删除 失败 导致 的 错误 将 被 忽略   ； 如果 为 假值 或是 省略 ， 此类 错误 将 通过 调用 由   onerror   所 指定 的 处理程序 来 处理 ， 或者 如果 此参数 被 省略 则 将 引发 一个 异常
如果 可能 ， 将会 包括 已 导入 基类 的 描述 器
Operator   模块 函数
发布 日期 :   2015   07   26
使用   " None "   表示   " void " ， 即 不 返回 任何 结果 的 函数
这样 就 允许 直接 控制 特定 对象 的 状态 更新
选项
当 此 行为 发生 时 缓冲区 也 将 被 清空
Unpacker   对象
文档 更改
例如 在 Unix 上 ， 结果 是 如下 编译 命令
在   Windows   上 ， 除了   " $ name "   和   " $ { name } "   外 ， 还 可以 展开   " % name% "
在 上面 的 例子 中 ， 调用 将 预期 返回   ID   为   " custom "   的 格式化 器 :
返回 一个 对应 于   date _ string   ， 根据   format   进行 解析 得到 的   " datetime "   对象
添加   " ._ pth "   文件 支持 并 从   " pyvenv . cfg "   中 删除   " applocal "   选项
简而言之 ， 要 匹配 文字 反 斜杠 ， 必须 将   " ' \ \ \ \ ' "   写为 正则 字符串 ， 因为 正则表达式 必须 是   " \ \ " ， 并且 每个 反 斜杠 必须 表示 为   " \ \ "   在 常规 Python 字符串 字面 中
" functools . reduce ( ) "   接受 迭代 器 返回 的 前 两个 元素   A   和   B   并 计算   " func ( A ,   B ) "
将流 位置 修改 到 给定 的 字节   offset
具体来说 ， 如果 如果 调用   " listen ( ) "   的 进程 在 用户 无法 彼此 信任 的 多用户 机器 上 运行 ， 则 恶意 用户 就 能 简单 地 通过 连接 到 受害者 的   " listen ( ) "   套 接字 并 发送 运行 攻击者 想 在 受害者 的 进程 上 执行 的 任何 代码 的 配置 的 方式 ， 安排 运行 几乎 任意 的 代码
在   3.3   版 更改 :   添加 了 对   filename   使用   file   object   而 非 实际 文件名 的 支持
" email "   包在 其   " encoders "   模块 中 提供 了 一些 方便 的 编码器
更 多 绘图 控制   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
method   用于 计算 分位 值 ， 它会 由于   data   是 包含 还是 排除 总体 的 最低 和 最高 可能 值 而 有所不同
这个 例子 引入 了 几个 新 的 特点
运行 时 可能 已经 预先 安装 在 用户 的 系统 上 或 通过 Windows   Update 自动 安装 ， 并且 可以 通过 在 系统目录 中 找到   " ucrtbase . dll "   来 检测
可以 通过   " tokenize . tokenize ( ) "   返回 的   named   tuple   对象 的   " exact _ type "   属性 来 获得 确切 的 标记 类型
如果 设置 了 环境变量   " PYTHONHOME "   ， 则 将 其 假定 为   “ Python   主目录 ”
" lib2to3 "   API   并 不 稳定 ， 并 可能 在 未来 大幅 修改
筛选 器 操作
与   " PyBytes _ FromFormat ( ) "   完全相同 ， 除了 它 需要 两个 参数
Zen   of   Python   Python   之禅 列出   Python   设计 的 原则 与 哲学 ， 有助于 理解 与 使用 这种 语言
纯   C   中 实现 的 长时间 运行 的 计算 （ 例如 在 大量 文本 上 的 正则表达式 匹配 ） 可以 在 任意 时间 内 不间断 地 运行 ， 而 不管 接收 到 任何 信号
在   dry   run   模式 下 ， 二元 组 仍然 应当 被 添加 以 表示 必须 创建 的 内容
对于 封存 操作 的 特殊要求 ： 一个   " tzinfo "   子类 必须 具有 可不 带 参数 调用 的   " __ init __ ( ) "   方法 ， 否则 它 虽然 可以 被 封存 ， 但 可能 无法 再次 解封
执行 结束 播放 函数
[ 1 ]   请 注意 时 区 时差 的 符号 与 同一时 区 的   " time . timezone "   变量 的 符号 相反 ；   后者 遵循   POSIX   标准 而此 模块 遵循   RFC   2822
因此 ， 如果 某一 属性 在   " DerivedClassName "   中 未找到 ， 则 会 到   " Base1 "   中 搜索 它 ， 然后 （ 递归 地 ） 到   " Base1 "   的 基类 中 搜索 ， 如果 在 那里 未找到 ， 再 到   " Base2 "   中 搜索 ， 依此类推
Cmd   例子
例如 ， :
如果   ensure _ ascii   是   true   （ 即 默认值 ） ， 输出 保证 将 所有 输入 的 非   ASCII   字符 转义
" PyArg _ Parse   ( ) "   函数 :
库
更改 某个 颜色 的 定义 ， 接受 要 更改 的 颜色 编号 以及 三个   RGB   值 （ 表示 红绿蓝 三 分量 的 强度 ）
对   list   中 的 条目 进行 原地 排序
当 语句 包含 多个 子句 （ 由 逗号 分隔 ） 时 这 两个 步骤 将 对 每个 子句 分别 执行 ， 如同 这些 子句 被 分成 独立 的   import   语句 一样
3.4   新版 功能 .
" __ future __ "   Future   语句 定义
这些 运算 被 用于 转换 和 缩放
继承   " unittest . TestCase "   就 创建 了 一个 测试 样例
有关 该 语言 的 非正式 介绍 ， 请参阅   Python   教程
数据类型
使用   " load ( ) "   重载 快照
Reedy   在   bpo   37765   中 贡献   。 ）
类型
使用   " multiprocessing "   时 ， 应 遵循 一些 指导 原则 和 习惯用法
3.8   新版 功能 .
这种 情况 出现 在 模块 被 创建 之后 且 模块 被 执行   ( " Py _ mod _ exec "   函数 )   之前 的 时刻
虚拟 屏幕 可以 通过 在 写入 操作 例如 在 一个 窗口 上 执行   " addstr ( ) "   之后 调用   " noutrefresh ( ) "   来 刷新
文档 更改   ~ ~ ~ ~ ~ ~ ~ ~
使用 此 构造 器 可以 会以 令人 惊讶 的 方式 改变 日期 时间 对象 的 语义 ， 只有 在 你 确定 你 的 需求 时才 使用 它
在 支持 大 文件 的   Linux   系统 中 ， 可以 这样 做 :
这 和 默认 的 元素 本身 是 不同 的
所有 其他 按键 将 被 视为 插入 给定 字符 并 右移 的 命令 （ 带有 自动 折行 ）
返回   " a   b "
在   3.6   版 更改 :   Errors   from   finalization   no   longer   ignored .
注解 :
在   3.2   版 更改 :   The   file   object   really   is   a   binary   file ;   previously   it   was   incorrectly   returned   in   text   mode
必须 调用 这个 方法 以 确保 相关 资源 会 被 清理
不 应当 使用 的 选项
空 字符串 总是 被 视为 任何 其他 字符串 的 子串 ， 因此   " " "   in   " abc " "   将 返回   " True "
例如 ，   " product ( A ,   B ) "   和   " ( ( x , y )   for   x   in   A   for   y   in   B ) "   返回 结果 一样
这 在 使列 对齐 时 很 有用
如果 可以 访问 到 加密 的 密码 ， 就 需要 使用   " spwd "   模块 了
示例
当 函数 返回 时 ， 线程 会 静默 地 退出
" Py _ UNICODE _ strncmp " :   使用   " PyUnicode _ Tailmatch ( ) "
" HTMLParser "   方法
根据 经验 ， " ratio ( ) "   值 超过   0.6   就 意味着 两个 序列 是 近似 匹配 的 ：
你 可以 提供 一个 元组 而 不是 单个 类来 检查 某个 对象 是否 为 任意 多个 类 当中 某 一个 类 的 实例 ， 例如   " isinstance ( obj ,   ( class1 ,   class2 ,   ... ) ) " ， 也 可以 检查 某个 对象 是否 为   Python   内置 类型 当中 某 一个 类型 的 对象 ， 例如   " isinstance ( obj ,   str ) "   或   " isinstance ( obj ,   ( int ,   float ,   complex ) ) "
条目 计数 可用 来 打破 平局 ， 这样 具有 相同 优先级 的 任务 将 按 它们 的 添加 顺序 返回
大多数 字母 和 字符 只会 匹配 自己
" gettext "   多语种 国际化 服务
" html . entities "   HTML   一般 实体 的 定义
内置 命名 空间 和 受限 的 执行
更 多 关于 在   MacPython   中 安装   Python   包 的 信息 ， 参阅 安装 额外 的   Python   包 部分
" posix "   最 常见 的   POSIX   系统 调用
但 使用   " / "   ( 仅限 位置 参数 )   就 可能 做到 ， 因为 它 允许   " name "   作为 位置 参数 ，   也 允许   " ' name ' "   作为 关键字 参数 的 关键字 名称 :
3.3   新版 功能 .
足够 复杂 或是 巨大 的 字符串 可能 导致 Python 解释器 的 崩溃 ， 因为 Python 的   AST 编译器 是 有 栈 深 限制 的
比如 可 迭代 对象   " [ ( 1 , 2 ) ,   ( 3 ,   4 ) ] "   会 转化 为 等价 于   " [ func ( 1 , 2 ) ,   func ( 3 , 4 ) ] "   的 调用
在 接下来 的 一年 里 ， 虽然 我 仍然 主要 用 我 的 业余时间 来 做 这件 事 ， 但   Python   在   Amoeba   项目 中 的 使用 获得 了 很大 的 成功 ， 来自 同事 的 反馈 让 我 得以 增加 了 许多 早期 的 改进
如果 没有 其他 命令 来 打印 一些 信息 ， 则 看不到 已 达到 断点 的 迹象
" UserList "   提供 了 以下 属性 作为 可变 序列 的 方法 和 操作 的 扩展 :
3.4   新版 功能 .
原型
" codeop "   编译 Python 代码
完成
该 例程 随后 将 使用 该 数据 创建 并 初始化 一个 新窗口 ， 并 返回 该 新窗口 对象
路径 条目 查找 器
You   may   recall   ( from   使用 任意 对象 作为 消息 )   that   when   logging   you   can   use   an   arbitrary   object   as   a   message   format   string ,   and   that   the   logging   package   will   call   " str ( ) "   on   that   object   to   get   the   actual   format   string
PEP   314 :   Python 软件包 的 元 数据   v1.1
对于 后 一种 方法 ， 包 应该 与 Python 可执行文件 一起 作为 目录 安装 ， 以 确保 它们 在 路径 上 可用
用于 匹配 测试 文件 的 模式 （ 默认 为   " test   . py "   ）
" datetime "   基本 的 日期 和 时间 类型
作者 要 感谢 以下 人员 为 本文 的 各种 草案 提供 建议 ， 更正 和 帮助 ：   Nick   Coghlan ,   Philip   Jenvey ,   Ryan   Lovett ,   R
返回 表示 为 下列   ISO   8601   格式 之一 的 时间 字符串 ：
源 字符集 是 由 编码 声明 定义 的 ； 如果 源文件 中 没有 编码 声明 则 默认 为   UTF   8 ； 参见 编码 声明
3.4   新版 功能 .
它 操作 的 声音 片段 由   8 、 16   、 24   或   32   位 宽 的 有 符号 整型 采样 值 组成 ， 存储 在 类 字节 串 对象 中
stretch :   " True " / " False "   指明 列 宽度 是否 应该 在 部件 大小 被 改变 时 进行 相应 的 调整
PEP   487   自定义 类 创建   PEP   由   Martin   Teichmann   撰写 并 实现
在   3.3   版 更改 :   Updated   to   be   based   directly   on   " importlib "   rather   than   relying   on   the   package   internal   PEP   302   import   emulation .
" hashlib "   安全 哈希 与 消息 摘要
HTTPBasicAuthHandler   对象
" bytes "   是   " bytearray "   的 不可 变 版本 它 有 其中 不 改变 序列 的 方法 和 相同 的 索引 、 切片 操作
在   Windows   上 ， 遇到 绝对路径 部分 （ 例如   " r ' \ foo ' " ） 时 ， 不会 重置 盘符
将   " email "   包中 内置 的 语法分析 程序 和   " EmailMessage "   类 连接起来 的 所有 逻辑 代码 都 包含 在   " policy "   类 当中 ， 所以 如 有 必要 ， 自定义 的 语法分析 程序 可以 通过 实现 自定义 的 对应   " policy "   方法 来 创建 对应 的 消息 对象 树
Python   2.7 系列 的 预期 完整 生命周期 在   PEP   373   中有 详细 介绍
允许 你 比较 编码 未知 或 不 一致 的 数据
使用   __ slots __   的 注意事项
3.7   版后 已 移除 :   The   option   is   deprecated   since   OpenSSL   1.1 . 0 ,   use   the   new   " SSLContext . minimum _ version "   and   " SSLContext . maximum _ version "   instead .
在   3.2   版 更改 :   在   Unix   上 ， 键和值 为   bytes   类型
不是 所有 对象 都 可以 复制 ， 但 多数 都 是 可以 的
常见 的 绊脚石
实例 拥有 一个 属性 :
要 屏蔽   stdout   或   stderr ， 可 提供   " DEVNULL "   这个 值
也 可以 使用 形 如   " kwarg   value "   的 关键字 参数 来 调用函数
限在   Windows   中 可用
随机 生成
" logging . config "   日志 记录 配置
在 做 任何 事情 之前 ， curses   必须 先 被 初始化
载入 动态 连接 库
CPython   implementation   detail :   其他 内置 类型 例如   " tuple "   和   " int "   不 支持 弱 引用 ， 即使 通过 子 类化 也 不 支持
如果 不 为   " NULL " ， 则 名称 的 存在 期 必须 比   capsule   更长
源代码   Lib / sndhdr . py
致谢
新 的   PEP   3118   相关 功能 ：
从 堆栈 中弹 出 一个 列表 并 推入 一个 包含 相同 值 的 元组
PEP   305 :   逗号 分隔 文件
更为重要 的 是 ， 当值 在 小节 代理 上 被 修改 时 ， 它们 其实 是 在 原始 解析器 中 发生 了 改变
See   section   结构化 解析 结果   for   more   information   on   the   result   object .
完整 的 语法 规范
做到 这 一点 的 最 简单 方式 是 使用   " io . StringIO "   类 ：
应用程序 开发人员 了解 他们 的 目标 受众 以及 哪些 处理程序 最 适合 他们 的 应用程序 ： 如果 你 在 “ 底层 ” 添加 处理程序 ， 则 可能 会 干扰 他们 执行 单元测试 和 提供 符合 其 要求 的 日志 的 能力
3.3   新版 功能 .
" NotImplementedError "   和   " NotImplemented "   不可 互换 ， 即使 它们 有 相似 的 名称 和 用途
核心 与 内置
上面 显示 的 参数 只是 常见 的 一些
以下 是 热门 版本 及其 主要 功能 的 列表 ：
只有 在 函数 不 需要 任何 参数 调用 时 才能 工作 .
示例
可以 这样 提高 可读性 :
参见 :
HMAC   对象 具有 下列 方法 :
本节 将 简述 用于 协程 与 任务 的 高层 级   API
family   是 套 接字 ( 或者 命名 管道 ) 使用 的 类型
返回 一个 新 的   " frozenset " ， 其中 包含   iterable   所 返回 的 对象
新增 模块
一个 用法 示例 :
如果   " PYTHONHASHSEED "   被 设为 一个整 数值 ， 它 将 被 作为 固定 的 种子数 用来 生成 哈希 随机化 所 涵盖 的 类型 的   hash ( )   结果
否则 结果 为   tz   时区 的 本地 时间 ， 代表 的   UTC   时间 与   self   相同 ： 在   " astz   dt . astimezone ( tz ) "   之后 ， " astz   astz . utcoffset ( ) "   将 具有 与   " dt   dt . utcoffset ( ) "   相同 的 日期 和 时间 数据
值 的 插值
使用者 应该 数以百万计 ， 但 很 难 获得 一个 精确 的 数字
Python   文档 访问 本地 Python 文档 （ 如果 已 安装 ） ， 或 启动 Web 浏览器 并 打开   docs . python . org 显示 最新 的 Python 文档
如果 它 被 设置 为 一个 空 字符串 则 将 没有 任何 效果
" copy "   浅层   ( shallow )   和 深层   ( deep )   复制 操作
更改 的 Python   API
Python   3.5 . 4   的 显著 变化
新 开发 流程
如果   processes   为   " None " ， 则 使用   " os . cpu _ count ( ) "   返回 的 值
数组 必须 是 类型 为   " ' u ' "   的 数组 ； 否则 将 引发   " ValueError "
包含   "   "   的 参数
在   1989   年 的 圣诞 假期 中 ， 我 手头 的 时间 非常 充裕 ， 因此 我 决定 开始 尝试 一下
如果 为   " 2 " ， 则 所有   non   fatal   错误 也 会 被 作为   " TarError "   异常 被 引发
如果   r   未指定 或 为   " None "   ，   r   默认设置 为   iterable   的 长度 ， 这种 情况 下 ， 生成 所有 全长 排列
适用 于 一个 完整   Python   程序 的 语法 即 下节 所 描述 的 文件 输入
跳过 测试 与 预计 的 失败
记录器 对象
如要 为 全部 用户 安装 ， 应 选择 “ 自定义 安装 ”
数组 与 指针
如果   ob   为   " PyDateTime _ DateType "   类型 或   " PyDateTime _ DateType "   的 某个 子 类型 则 返回 真值
参见   " PyConfig . dev _ mode " .
3.8   新版 功能 .
" d . timetuple ( ) "   等价 于 :
对象 可以 为   " NULL " ， 在 此 情况 下该 宏 不 产生 任何 效果
当 所有 参数 处理完毕 时 ， 尚未 填充 的 空位 将 用 来自 函数 定义 的 相应 默认值 来 填充
从 文本 模式 的 文件 类 对象   fp   读取 所有 数据 ， 解析 所 读取 的 文本 ， 并 返回 根 消息 对象
等价 于   Python   中 的 表达式   " pow ( o1 ,   o2 ,   o3 ) " ， 其中   o3   是 可选 的
这 意味着 （ 默认 情况 下 ） 当 一个多 进程 程序 的 所有 进程 在 彼此之间 建立 连接 的 时候 ， 会 共享 同一个 认证 密钥
返回 可用 节 的 列表 ；   default   section   不 包括 在 该 列表 中
解析器 会 输出 出现 语法错误 的 那 一行 ， 并 显示 一个 “ 箭头 ” ， 指向 这 行 里面 检测 到 的 第一个 错误
不 需要 预先 定义 变量 或 参数
它 包含 一个 MSBuild 属性 文件   " python . props "   ， 可以 在 C++ 项目 中 使用 该 文件 来 引用 Python 安装
选项
用于 指明 一个 新 进程 将 具有 实时 优先级 的   " Popen "   " creationflags "   形参
Python   3.0   有 什么 新 变化
库
" tempfile "   生成 临时文件 和 目录
核心 与 内置
（ 由   Leon   Weber   在   bpo   20480   中 贡献 。 ）
对于 抽象 基类 ， 参见   " abc "   模块 和   PEP   3119
文档
常用 于   " Popen . communicate ( ) " .
转换 代码 的 每 一个 步骤 都 封装 在 修复器 中
digestmod   为   HMAC   对象 所用 的 摘要 名称 、 摘要 构造 器 或 模块
最佳 的 分辨率 是   0.5   毫秒
调用 指涉 对象 的 方法 并 返回 结果
“ docs @ ” 是 一个 由 志愿者 运作 的 邮件 列表 ； 您 的 请求 会 得到 关注 ， 但 可能 需要 一些 时间 才 会 被 处理
加密 服务
你 还 需要 注意 ， 用 关键字 参数 调用   " PyObject _ Call ( ) "   ， 需要 支持 普通 参数 和 关键字 参数
处理程序 负责 确保 记录 的 消息 （ 以   " LogRecord "   的 形式 ） 最终 位于 特定 位置 （ 或 一组 位置 ） ， 这 对 该 消息 的 目标 受众 （ 例如 最终用户 、   支持 服务台 员工 、 系统管理员 、 开发人员 ）
构建 和   C   API   的 改变
在   3.7   版 更改 :   在 之前 版本 中 ， 此 函数 返回 一个 列表 或 元组
例如 ， 用   " fractions . Fraction "   实现   " hash ( ) "   如下 :
如果 可 选 参数   quotetabs   存在 且 为 真值 ， 则 对 所有 制表符 和 空格 进行 编码
附带 参数 运行 命令 并 返回 其 输出
如果 你 尝试 查找 旧值 ， 也 不会 找到 它 ， 因为 在 该 哈希 表中 找到 的 对象 的 值会 有所不同
一般 情况 下 ， 参数 默认 会 通过 设置 一个 默认 到   " add _ argument ( ) "   或者 调用 带 一组 指定 键值 对 的   " ArgumentParser . set _ defaults ( ) "   方法
如果 连接 对象 被 对 端 关闭 或者 没有 数据 可 读取 ， 将 抛出   " EOFError "   异常
修改 一个 已 注册 的 文件 描述符
Python   Tkinter   资源   The   Python   Tkinter   Topic   Guide   提供 了 在   Python   中 使用   Tk   的 很多 信息 ，   同时 包含 了 Tk 其他 信息 的 链接
与   " register ( ) "   方法 类似 ，   fd   可以 是 整数 ， 也 可以 是 带有   " fileno ( ) "   方法 的 对象 （ 该 方法 返回 一个 整数 ）
使用   " Connection "   对象 的 非标准   " execute ( ) " ,   " executemany ( ) "   和   " executescript ( ) "   方法 ， 可以 更 简洁 地 编写 代码 ， 因为 不必 显式 创建 （ 通常 是 多余 的 ）   " Cursor "   对象
第二个 可 选 关键字 参数 是   stack _ info   ， 默认 为   " False "
静态 分配 类型 将 不受 影响
" string "   常见 的 字符串 操作
更好 的 做法 是 使用   Python   3   中 返回   Unicode   字符串 的 操作 作为 替代
等待 进程 终结
当   " with "   阻塞 结束 时 ，   " Wave _ read . close ( ) "   或   " Wave _ write . close ( ) "   方法 会 被 调用
这里 只 介绍 最 重要 的 内容 ； 请参阅   " re "   文档 获取 完整 列表
INI 文件 中 的 部分 称为   " [ defaults ] "   ， 键 名称 将 与 没有 前导   " PY _ "   前缀 的 环境变量 相同 （ 并 注意 INI 文件 中 的 键名 不 区分 大小写 ）   。 ） 环境变量 的 内容 将 覆盖 INI 文件 中 指定 的 内容
所以 ， 我们 可以 把 它 改造 得 更 有用 ：
此外 ，   " asyncio . run ( ) "   已 被 更新 以 使用 新 的   coroutine
选择   PythonLauncher   作为 通过   finder   Info   窗口 打开 脚本 （ 或 任何   . py   脚本 ） 的 默认 应用程序 ， 然后 双击 脚本
如果 队 列为 空 ， 返回   " True "   ， 否则 返回   " False "
如果   o   是 一个 整数 类型 的 解释 型 ， 返回   o   转换成 一个   Py _ ssize _ t   值项 后 的 结果
性能
" ' f ' "   定点 表示
类似 于   " read ( ) " ， 可能 对 下层 原始 流 发起 多次 读取 ， 除非 后者 为 交互式
这 可以 使 很长 的 格式化 字符串 具有 更好 的 可读性
数据类型
数据 和 非 数据 描述 器 的 不同之处 在于 ， 如何 计算 实例 字典 中 条 目的 替代 值
旧式 的   Shell   发起 函数
2.3   版后 已 移除 :   使用   " mkstemp ( ) "   来 代替
此类 表示 一个 操作 应该 在 等待 一定 的 时间 之后 运行 相当于 一个 定时器
XPath 支持
" await "   " loop . connect _ accepted _ socket ( ) "   将   " socket "   包装 成   " ( transport ,   protocol ) "   对
3.5   新版 功能 .
" smtpd "   SMTP   服务器
如果 你 进行 了 大量 删除 操作 并且 想要 缩减   " gdbm "   文件 所 使用 的 空间 ， 此 例程 将 可 重新 组织 数据库
基本 实例
对于 无效 的   timespec   参数 将 引发   " ValueError " :
调用   " reset _ tzpath "   将 不会 使   " ZoneInfo "   缓存 失效 ， 因而 在 缓存 未 命中 的 情况 下 对主   " ZoneInfo "   构造 器 的 调用 将 只 使用 新 的   " TZPATH "
文件 对象
请 注意 并 不 要求 迭代 器 返回 的 所有 名称 都 是 实际 的 资源 ， 例如 返回   " is _ resource ( ) "   为 假值 的 名称 也 是 可 接受 的
这个 迭代 器 返回 当月 的 所有 日期   (   " datetime . date "   对象 ) ， 日期 包含 了 本月 头尾 用于 组成 完整 一周 的 日期
在   3.9   版 更改 :   增加 了   " msg "   形参
你 仍然 可以 通过   " mbcs "   编解码器 来 使用 系统 的 编码 格式
AbstractBasicAuthHandler   对象
可选 的   header   可以 让 你 指定   Content   Type   之外 的 另 一个 字 段
如果 子 进程 向 管道 生成 了 足以 填满   OS   管理 缓冲区 的 输出 而 管道 还 未 被 读取 时 它 将 会 阻塞
而且 ， 在 类 中 定义 的   " partial "   对象 的 行为 类似 于 静态方法 ， 并且 不会 在 实例 属性 查找 期间 转换 为 绑定 方法
您 可以 独立 于   exc _ info   来 指定   stack _ info   ， 例如 ， 即使 在 未 引发 任何 异常 的 情况 下 ， 也 可以 显示 如何 到达 代码 中 的 特定 点
这 一点 取决于 用户 终端 的 能力 ， 所以 最 稳妥 的 方式 是 只 采用 最 常见 的 有效 属性 ， 见 下表
这是 一个 使用   " xml . etree . ElementTree "   （ 简称   " ET "   ） 的 简短 教程
有趣 的 示例
asyncio   任务 现在 可以 被 命名 ， 或者 是 通过 将   " name "   关键字 参数 传给   " asyncio . create _ task ( ) "   或   " create _ task ( ) "   事件 循环 方法 ， 或者 是 通过 在 任务 对象 上 调用   " set _ name ( ) "   方法
安全
类 与 函数
1   至   12 （ 含 ）
" Custom "   type   的 行为 ： 这是   " CustomType "   结构 体 ， 其 定义 了 一堆 标识 和 函数指针 ， 会 指向 解释器 里 请求 的 操作
如果 值设 为   " 0 " ， 将 导致 主   Python   命令行 应用 跳过 将 传统 的 基于   ASCII   的   C   与   POSIX   区域 设置 强制 转换 为 更 强大 的 基于   UTF   8   的 替代 方案
请参阅   RFC   1524   获取 这些 字段 的 完整 列表
实现   " ' backslashreplace ' "   错误处理 方案   ( 仅 用于 文本 编码   ) ： 错误 格式 的 数据 将 以 带 反 斜杠 的 转义序列 进行 替换
你 可以 控制   " sqlite3 "   隐式 执行 的   " BEGIN "   语句 的 种类 ， 具体做法 是 通过 将   isolation _ level   形参 传给   " connect ( ) "   调用 ， 或者 通过 指定 连接 的   " isolation _ level "   属性
模式   动作   " ' r '   or   ' r :   ' "   打开 和 读取 使用 透明 压缩 （ 推荐 ）
文档
标准 输出 流   ( " StreamReader " )   或者 如果 进程 创建 时 设置 了   " stdout   None "   则 为   " None "
当 使用 默认设置   " None "   时 ， 将 不会 进行 重定向 ， 子 进程 的 文件 流将 继承 自父 进程
现在   " PurePath "   的 拆分 处理 当 传入   " str "   或   " PurePath "   的 实例 以外 的 对象 时会 返回   " NotImplemented "   而 不是 引发   " TypeError "
负值   N   表示 子 进程 被 信号   N   终止
库
在   3.3   版 更改 :   The   use _ builtin _ types   flag   was   added .
Python   以 多种 方式 支持 这种 转换 :   " idna "   编解码器 执行   Unicode   和   ACE   之间 的 转换 ， 基于 在   section   3.1   of   RFC   3490   中 定义 的 分隔 字符 将 输入 字符串 拆 分为 标签 ， 再 根据 需要 将 每个 标签 转换 为   ACE ， 相反 地 又 会 基于   " . "   分隔符 将 输入 字节 串 拆 分为 标签 ， 再 将 找到 的 任何   ACE   标签 转换 为   Unicode
注解 :
" x   !   y "   和   " y   !   x "
参见 :
舍入 错误 的 影响 可能 因 接近 相互 抵销 的 加减 运算 被 放大 从而 导致 丢失 有效 位
在   3.2   版 更改 :   Added   " __ cached __ "   global   variable   ( see   PEP   3147   ) .
（ 由   Antoine   Pitrou   贡献 。 ）
宏 访问 UTC 单例 :
为 指定 的 断点 编号 设置 忽略 次数
http : / / www . wsgi . org   WSGI 相关 资源 的 核心 网站
如果 目标 为 一个 切片 ： 引用 中 的 原型 表达式 会 被 求值
有些 模块 是 用   C   编写 并 内 置于   Python   解释器 中 ； 另 一些 模块 则 是 用   Python   编写 并 以 源码 形式 导入
例如 :
如果 要 清除 以前 安装 的 任何 进度 处理程序 ， 调用 该 方法 时请 将   handler   参数设置 为   " None "
" ModuleFinder "   的 示例 用法
参数   strategy   用于 调节 压缩算法
3.7   新版 功能 :   text   作为   universal _ newlines   的 一个 更具 可读性 的 别名 被 添加
耗时 :   基本   Ratcliff   Obershelp   算法 在 最坏 情况 下 为 立方 时间 而 在 一般 情况 下 为 平方 时间
并发 执行
在 下面 的 段落 中 ， 你 可以 找到 关于   " subprocess "   模块 如何 代替 这些 模块 和 功能 的 相关 信息
如果 显示 命令 已 执行 或 不 合法   ， 缓冲区 将 被 重置 ； 否则 ， 则 命令 尚未 结束 ， 缓冲区 将 在 添加 行后 保持 原样
3.4   新版 功能 .
成功 时 返回   " 0 " ， 失败 时 返回   "   1 "
你 可以 通过 配置 ， 指定 返回值 或者 限制 可 访问 属性 ， 然后 断言 他们 如何 被 调用 ：
在   3.6   版 更改 :   verbose   和   rename   参数 成为 仅限 关键字 参数 .
在   3.2   版 更改 :   之前   slice   形参 的 形参 类型 是   " PySliceObject   "
反复 发出 提示 ， 接受 输入 ， 从 收到 的 输入 中 解析 出 一个 初始 前缀 ， 并 分派 给 操作方法 ， 将 其余 的 行 作为 参数传递 给 它们
可用 的 CPU 数量 可以 由   " len ( os . sched _ getaffinity ( 0 ) ) "   方法 获得
domain   参数 可 允许 重载 用于 查找 的   NIS   域
所有 的 切片 操作 都 返回 一个 包含 所 请求 元素 的 新 列表
枚举 成员 （ 即 实例 ）
readrc   参数 默认 为   true ， 它 控制   Pdb   是否 从 文件系统 加载   . pdbrc   文件
中位数 是 衡量 中间 位置 的 可靠 方式 ， 并且 较 少 受到 极端 值 的 影响
同样 ， 你 可以 写出   " for   i   in   generate _ ints ( 5 ) " ， 或者   " a ,   b ,   c   generate _ ints ( 3 ) "
渲染 对话 和 启动 事件 循环 ,
注意 这里 抛出 的 异常 类型 和   " threading . RLock . release ( ) "   中 实现 的 行为 不 一样
在   3.3   版 更改 :   当   symlinks   为 假值 时 拷贝 元 数据
下面 的 例子 演示 了 如何 实现 此 重载 :
HTTPPasswordMgrWithPriorAuth   对象
文件 通配符
文档 字符串
bpo   33824 :   修复 " LC _ ALL   C   python3.7   V " ： 在 读取 Python 配置 后 编码 发生 更改 时 ， 正确 重置 命令行 解析器
当 执行 轮换 时 ， 轮换 当前 日志
add _ help   为 解析器 添加 一个   "   h /   help "   选项 （ 默认值 ：   " True " ）
返回 一个 元组   " ( buildno ,   builddate ) " ， 以 字符串 表示 的   Python   编译 代码 和 日期
该 模块 最初 最初 是 在 3.7 b1 中 添加 的
更 多 信息 请参阅   complex   arrays
" tp   槽 "
指明 压缩 类型
d   "   一年 中   m   月 的 第   n   周 （ 1   <   n   <   5   ， 1   <   m   <   12   ， 第   5   周 表示   “ 可能 在   m   月 第   4   周 或 第   5   周 出现 的 最后 第   d   日 ” ）   的 第   d   天 （ 0   <   d   <   6 ）
左侧 目标   " a . x "   将 总是 设定 为 实例 属性 ， 并 在 必要 时 创建 该 实例 属性
在   3.2   版 更改 :   非 字符串 的 节 名称 将 引发   " TypeError "
有 一些 预定 义 编解码器 是   Python   专属 的 ， 因此 它们 在   Python   之外 没有 意义
例如 :
如果   context   中 含有 名称 为   var   的 变量 ， 返回   " True "   ，   否则 返回   " False "
" ast . NodeVisitor "   的 方法   " visit _ Num ( ) " ,   " visit _ Str ( ) " ,   " visit _ Bytes ( ) " ,   " visit _ NameConstant ( ) "   和   " visit _ Ellipsis ( ) "   现在 已 被 弃用 ， 并且 在 未来 的   Python   版本 中将 不再 被 调用
选项
基于 类似 于   " PyArg _ Parse   ( ) "   函数 系列 和 一系列 值 的 格式 字符串 创建 新值
操作 正在 进行
如果 你 直接 在 命令行 里 运行   " example . py "   ，   " doctest "   将 发挥 他 的 作用
uu   编码 每行 的 数据 通常 包含   45   个 （ 二进制 ） 字节 ， 最后 一行 除外
在 这个 示例 中 ， 我们 创建 了 一个   gzip   压缩 的   tar   归档文件 ， 其中 包含 用户 的   " . ssh "   目录 下 的 所有 文件 :
要 编译成   Java ， 可以 考虑   VOC
位置 位置
在 到达 数据流 末尾 之后 再 尝试 解压缩 数据 会 引发   EOFError
构造 任意 值
基础 协议
在   3.8   版 更改 :   Added   support   for   the   " samesite "   attribute .
标识符 （ 名称 ）
此外 ， 还会 确保 实现   " seek ( ) "   和   " tell ( ) "
如果   " PY _ PYTHON   3.1   32 "   ， 命令   " python "   将 使用 3.1 的 32 位 实现 ， 而 命令   " python3 "   将 使用 最新 安装 的 Python （ PY _ PYTHON 根本 没有 被 视为 指定 了 主要 版本 。 ）
如果 该 字符串 是 对象 的 属性 之一 ， 则 返回 该 属性 的 值
由   Joannah   Nanjekye   提供 补丁
确定 对象 的 格式化 表示 是否 “ 可 读 ” ， 或者 是否 可 使用   " eval ( ) "   重建 对象 值
file   like   object   文件 类 对象   file   object   的 同义词
一个   " ChainMap "   将 多个 字典 或者 其他 映射 组合 在 一起 ， 创建 一个 单独 的 可 更新 的 视图
另 请参阅   " now ( ) "
由   " basicConfig ( ) "   设置 的 消息 默认 格式 为 ：
fromdesc   和   todesc   会 被 当作 未 转义 的   HTML   来 解读 ， 当 接收 不可 信 来源 的 输入 时 应该 适当 地 进行 转义
如果 你 想要 定义 自己 的 级别 ， 并且 需要 它们 具有 相对 于 预定 义 级别 的 特定 值 ， 那么 这些 内容 可能 是 你 感兴趣 的
优先级 级别   ( 高到 低 ) :   " LOG _ EMERG " ,   " LOG _ ALERT " ,   " LOG _ CRIT " ,   " LOG _ ERR " ,   " LOG _ WARNING " ,   " LOG _ NOTICE " ,   " LOG _ INFO " ,   " LOG _ DEBUG " .
这 在 特殊 情况 下 甚至 会 很 有用 ， 例如 在 调试器 中
" HTMLParser "   方法
简单 语句
新 关键字
测试
根 日志 记录器 必须 指定 一个 级别 和 一个 处理程序 列表
文档
返回 当前 执行 帧 中 全局变量 的 字典 ， 如果 没有 当前 执行 的 帧 则 返回   " NULL "
所有   Python   对象 （ 甚至   Python   整数 ） 都 有 一个   type   和 一个   reference   count
由于   " warn "   已 被 弃用 ， 请 不要 使用 它   — —   改为 使用   " warning "
如果 没有   cmd   会 被 调用 则 返回   " None "
在   " namereplace _ errors ( ) "   中 实现
与 警告 模块 集成
给定 一个 声明 一个 或 多个 全 比较 排序 方法 的 类 ， 这个 类 装饰 器 实现 剩余 的 方法
" pass "   语句
这里 显示 的 版本 省略 了 有关 代码生成 和 错误 恢复 的 细节
打印 的 信息 包含 事件 的 级别 以及 在 日志 调用 中 的 对于 事件 的 描述 ， 例如 “ Watch   out ! ”
如果 有 实参 ， 它会 尝试 返回 该 对象 的 有效 属性 列表
fork   父 进程 使用   " os . fork ( ) "   来 产生   Python   解释器 分叉
PEP   3129 :   类 装饰 器
一个 布尔值 ， 指明 是否 已 到达 压缩 数据流 的 末尾
仅限 位置 参数
对象 协议
这些 信息 有 的 来自 安装 脚本 ， 有 的 由   Distutils   自动 生成 （ 例如 已 安装文件 列表 ）
当 成功 时 ，   bytes   将 存放 改变 大小 后 的 字节 串 对象 并 返回   " 0 " ；   bytes   中 的 地址 可能 与其 输入 值 不同
格式 规格 迷你 语言
在 默认 情况 下 ， " threading . excepthook ( ) "   会 静默 地 忽略   " SystemExit "
" nis "   模块 定义 了 以下 函数 ：
msg   是 消息 格式 字符串 ， 而   args   是 用于 字符串 格式化 操作 合并 到   msg   的 参数
一种 解决方案 是 分成 两 部分 去 处理
移植 到   Python   2.7
之前 只 允许 使用   str
将 记录 输出 到 文件 ， 但 如果 文件 已 更改 则 会 先 调用   " reopenIfNeeded ( ) "   来 重新 打开 它
Pull   API 进行 非 阻塞 解析
根据 归档 是 被 读取 还是 被 写入 ， 元 数据 必须 被 解码 或 编码
如果 在 安装 时未 启用 此 选项 ， 则 始终 可以 重新 运行 安装程序 ， 选择 “ 修改 ” 并 启用 它
" weakref "   模块 提供 的   " WeakKeyDictionary "   和   " WeakValueDictionary "   类 可以 替代 Python 字典 ， 使用 弱 引用 来 构造 映射 ， 这些 映射 不会 仅仅 因为 它们 出现 在 映射 对象 中 而 使 对象 保持 存活
文件 对象 的 方法
参见 :
如果 该 参数 省略 或 为   " None "   ( 默认值 ) ， 则 会 自动 进行 均值 的 计算
多线程
性能 测量
和 :
Structure   and   Interpretation   of   Computer   Programs   ,   Harold   Abelson ,   Gerald   Jay   Sussman   和   Julie   Sussman   著
数组 必须 是 类型 为   " ' u ' "   的 数组 ； 否则 将 引发   " ValueError "
扩展 的 工具 提供 了 与 底层 工具集 相同 的 高性能
返回 与 格式 字符串   format   相对 应 的 结构 的 大小 （ 亦 即   " pack ( format ,   ... ) "   所 产生 的 字节 串 对象 的 大小 ）
PEP   279   内置 函数   enumerate ( )   由   Raymond   D
这 也 意味着 当 一个 配置文件 被 写入 时 ， 所有 键 都 将 为 小写 形式
替代   shell   管道
每条 赋值 或 导入 语句 均 发生 于类 或 函数 内部 定义 的 代码 块 中 ， 或是 发生 于 模块 层级 （ 即 最高 层级 的 代码 块 ）
state   是 一个 表示 转换器 状态 的 元组
并 使得 为 优化 等级 多次 指定 选项 成为 可能
示例
分析 示例 文本 （ 假定 为   CSV   格式 ） ， 如果 第一行 很 可能 是 一系列 列 标题   ， 则 返回   " True "
内置   " classmethod ( ) "   的 子类 ， 指明 一个 抽象类 方法
使用 线程
如果 获得 了 锁 则 返回 真值
以下 参数 作为 关键字 参数传递 的 方式 已 被 弃用 ：
使用 多个 日志 处理器 和 多种 格式化
测试
运算符
有关   " stat ( ) " ,   " fstat ( ) "   和   " lstat ( ) "   调用 的 完整 细节 ， 请参阅 你 的 系统 文档
在 执行 期间 的 任何时刻   ， 会 有   3   或   4   个 命名 空间 可 被 直接 访问 的 嵌套 作用域 :
XMLPullParser 对象
该 模块 提供 用于 编写 异步 套 接字 服务 客户端 与 服务端 的 基础 构件
示例
如果 当前 上下文 中此 变量 没有 值 ， 则 此 方法 会 :
Kuchling   撰写 并 实现
在历史上 ， Python   提示符 和 内置 的   " repr ( ) "   函数 会 选择 具有   17   位 有效数字 的 来 显示 ， 即   " 0.10000000000000001 "
如果   cwd   不 为   " None " ， 此 函数 在 执行 子 进程 前会 将 当前工作 目录 改为   cwd
如果 您 的 机器 有 一个 PC 键盘 ， 可以 安全 地 使用 箭头键 和 十二个 功能键 （ 旧 的 PC 键盘 可能 只有 十个 功能键 ） ; 此外 ， 以下 键盘 映射 是 标准 的 ：
这 意味着 值 可以 在 被   " get ( ) "   调用 返回 之前 进行 预处理
（ 详情 参见   bpo   10945 。 ）
设置 此时 钟 需要 适当 的 权限
供 了解   Tkinter   的   Canvas   对象 内部 机理 的 人士 使用
从 字符串 表示 中 重建 数据 称为   deserializing
请 注意 未来 还 将 向   " dictConfig ( ) "   添加 对 配置 功能 的 强化 ， 因此 值得 考虑 在 方便 的 时候 转换 到 这个 新   API
唯一 的 例外 是 调用   " interrupt ( ) "   方法 ， 该 方法 仅 在 从 其他 线程 进行 调用 时才 有 意义
和 之前 一样 ， 你 也 可以 在 这种 式子 里 使用 圆括号
（ " raiseExceptions "   的 默认值 是   " True " ， 因为 这 在 开发 过程 中是 比较 有用 的 ）
hash   对象 具有 以下 属性 ：
将   " reload ( ) "   转换 为   " importlib . reload ( ) "
sminrow   和   smincol   是 源 窗口 的 左上角 坐标 ， 而 其他 变量 则 在 目标 窗口 中 标记 出 一个 矩形
此 操作 将 应用 上下文 精度 和 舍入 ， 因此 它 不是 标识 运算
该 实现 会 使用 主线 程中 的 活动 事件 循环 来 处理   " SIGCHLD "   信号
同步 原语
核心 与 内置
没 必要 去 实现 它 了 ， 但是 为了 兼容性 ， 它 依然 处于 可用 状态
示例 :
相关 细节 请参阅 受 支持 的   tar   格式 小节
示例
" ElementTree "   提供 了 一种 构建 XML 文档 并 将 其 写入 文件 的 简单 方法
格式 字符串 语法
使用   " PyErr _ Occurred ( ) "   来消 歧义
Python   是 一种 解释 型 、 交互式 、 面向对象 的 编程语言
所 提供 的 控制字符 常量 如下 :
最 简单 的 ， 一个 用 单个 C 源文件 写 的 单 扩展 模块 是 ：
如果 要 为 可 写 的 缓冲 文件创建 内存 映射 ， 则 应当 首先   " flush ( ) "   该 文件
Executor   对象
如果 字符串   " S "   表示 多行 ， 且 末尾 有 几个 空行 ， 则 将 删除 所有 空行 的 换行符 ：
一个 字节 序列 ,   或者 一个 字符串 ,   如果   " run ( ) "   是 设置 了 参数   encoding   ,   errors   或者   " text   True "   运行 的
限定 长度 deque 提供 类似 Unix   filter   " tail "   的 功能
PEP   218 :   内置 集合 对象
term   描述   string   Will   call   " found _ terminator ( ) "   when   the   string   is   found   in   the   input   stream   integer   Will   call   " found _ terminator ( ) "   when   the   indicated   number   of   characters   have   been   received   " None "   The   channel   continues   to   collect   data   forever
操作系统 实用程序
" asyncore "   异步 socket 处理器
args   参数传递 给   " Popen "   一个 程序 参数 的 序列 或者 一个 简单 字符串
width   默认 为   " 70 "
请参阅   " PYTHONUTF8 "   了解 详情
" textwrap "   文本 自动 换行 与 填充
以此 方式 构造 的 日期 时间 对象 可 兼容 日期 时间 运算 并 可 在 无需 进一步 干预 的 情况 下 处理 夏令时 转换 :
工具 / 示例
对于 删除 重复 项 ， 一种 可能 的 做法 是 设置 删除 条件 显式 地 进行 反向 迭代
MailmanProxy   对象
启动 钩子
新创建 的 文件 是 不可 继承 的
它 在 大多数 平台 上 等于   " " lib " "
原地 运算符
当然 在 这 两种 情况 下 ， 都 应当 将   " attrname "   替换 为 你 想要 使用 的 实际 属性 名称
参见 :
ZipFile   对象
参数 必须 不 为   " NULL "
在   3.3   版 更改 :   从 工厂 函数 变为 类
这个 列表 是 按照 第一次 搜索 到 最后 一次 搜索 的 顺序 组织 的
会 使用 当前 区域 设置 的 编码 格式 ； 请参阅 常用 参数 中 的 说明 来 了解 详情
该 列表 包含 守护 线程 ，   " current _ thread ( ) "   创建 的 虚拟 线程 对象 和 主线 程
cwd   可以 是 一个 字符串 、 字节 串 或 路径 类 对象
类型 在 对象 创建 时 使用 单个 字符 的 类型 码来 指定
PEP   530 :   异步 推导
测试
在   3.4   版 更改 :   The   types   of   name   and   format   were   changed   from   " char   " .
未 压缩文件 的 大小
解析 一个 传递 给   " exec ( ) "   函数 的 字符串 时 ；
ctypes   参考手册
返回 计算机 的 网络 名称 （ 可能 不是 完整 限定 名称 ！ ）
这 一节 描述 了 用于 配置   logging   模块 的   API
See   在 Windows   上 使用   Python   for   more   information .
在   3.7   版 更改 :   Attributes   " key " ,   " value "   and   " coded _ value "   are   read   only
未 绑定 方法 （ 绑定 到 一个 类 的 方法 ） 已 不再 可用
在   3.5   版 更改 :   string   usernames   and   passwords   are   now   encoded   to   " utf   8 "   instead   of   being   limited   to   ASCII .
" curses "   模块 定义 了 以下 数据 成员 :
你 应当 小心 使用   " get _ position ( ) "   和   " set _ position ( ) "
某些 内置 异常   ( 例如   " OSError " )   接受 特定 数量 的 参数 并 赋予 此 元组 中 的 元素 特殊 的 含义 ， 而 其他 异常 通常 只 接受 一个 给出 错误信息 的 单独 字符串
" ' E ' "   指数 表示
已弃 用 的   Python   模块 、 函数 和 方法
返回值 是 所 开打 键 的 句柄
HTTPHandler   对象
如果 没有 参数 ， " dir ( ) "   会 列出 你 当前 定义 的 名称 :
主 配置 解析器
示例 :
因此 ， 它们 不 应 在线 程中 使用 ， 在   Python   2.7 . 1   和   3.2   之前 的 版本 中 ， 除非 线程 启动 之前 已向根 日志 记录器 添加 了 至少 一个 处理程序 方可 使用
标识符 和 关键字
这是 默认 的 动作
如果 命令 完整 且 有效 则 返回 一个 代码 对象   ( 等价 于   " compile ( source ,   filename ,   symbol ) " ) ； 如果 命令 不 完整 则 返回   " None " ； 如果 命令 完整 但 包含 语法错误 则 会 引发   " SyntaxError "   或   " OverflowError "   而 如果 命令 包含 无效 字 面值 则 将 引发   " ValueError "
[   脚注   ]
这 对于 处理 未知 编码 的 文件 很 有用
compresslevel   和   mtime   的 含义 与 上 文中   " GzipFile "   构造 器 的 相同
格式化 器 和 过滤器 的   ID   可以 是 任意 字符串 值   ( 例如 上面 的   " brief " ,   " precise " )   并且 它们 是 瞬态 的 ， 因为 它们 仅 对 处理 配置 字典 有 意义 并会 被 用来 确定 对象 之间 的 连接 ， 而 当 配置 调用 完成 时 不会 在 任何 地方 保留
工具
打开 统一 资源 定位 地址   url   ， 可以 是 一个 字符串 或 一个   " Request "   对象
日志 基础教程
该 错误 追踪 系统 提供 了 一个 可以 输入 并 提交 相关 信息 给 开发者 的 网页 表单
使用 配置 字典 中 的 值 可 让 配置 以 封存 字典 对象 的 形式 通过 线路 传送 给 套 接字 监听器
然后 ， 在 重新 获取 锁时 ， 使用 另 一个 内部 接口 来 恢复 递归 级别
致谢
文档 更改   ~ ~ ~ ~ ~ ~ ~ ~
返回   o1   左移   o2   个 比特 后 的 结果 ， 如果 失败 ， 返回   " NULL "
当 同时 在 两个 或 更 多 序列 中 循环 时 ， 可以 用   " zip ( ) "   函数 将 其内 元素 一一 匹配
将 扩展 模块 移植 到   Python   3
注解 :
bpo   31392 :   更新   macOS   安装程序 以 使用 OpenSSL   1.0 . 2m
返回 一个 新 的 命名 元组 实例 ， 并 将 指定 域 替换 为 新 的 值
一定 要 使用   " import   os "   而 不是   " from   os   import   "
bufsize   为 输出 缓冲区 的 起始 大小
" bytearray "   类 是 一个 可变 序列 ， 包含 范围 为   0   <   x   <   256   的 整数
" Turtle . tracer ( ) " ,   " Turtle . window _ width ( ) "   和   " Turtle . window _ height ( ) "   方法 已 被 去除
注解 :
在 打印 之前 将 整数 转换 为 相应 的 unicode 字符
与 大多数   Python   不同 ， 这些 常量 使用 小写 字符 名称
定义 扩展 类型 ： 已 分类 主题
此 函数 仅 是 出于 历史 原因 而 被 包括 的 ， 因为 所有 现代 软件 终端 模拟器 都 具有 这些 功能
单个 扩展 模块
通常 你 的   SQL   操作 需要 使用 一些   Python   变量 的 值
协程 函数 定义
将   HTML   实体 名称 映射 到   Unicode   代码 点 的 字典
如果 你 想要 一个 支持 附加 一些 特殊 功能 到   Python   语言 的   Python   解释器 ， 你 应该 看看   " code "   模块
对 基于 生成器 的 协程 的 支持 已弃 用 并 计划 在   Python   3.10   中 移除
3.3   新版 功能 .
目前 它 仅 在 平台 支持 基于   fd   的 目录 访问 函数 时才 返回 真值
" f . tell ( ) "   返回 一个 整数 ， 给出 文件 对象 在 文件 中 的 当前 位置 ， 表示 为 二进制 模式 下时 从文件 开始 的 字节数 ， 以及 文本 模式 下 的 意义 不明 的 数字
解码 和 转换 的 做法 很 相似 ， 不同之处 在于 将 把   " UnicodeDecodeError "   或   " UnicodeTranslateError "   传给 处理程序 ， 并且 来自 错误 处理程序 的 替换 对象 将 被 直接 放入 输出
single   dispatch   单 分派 一种   generic   function   分派 形式 ， 其 实现 是 基于 单个 参数 的 类型 来 选择 的
创建   ST   对象
参见 :
第一行 显示 监听 了 197 个 调用
" retryFactor "   ( 倍数 ， 默认 为   2.0 )
" BufferedRWPair "   不会 尝试 同步 访问 其 下层 的 原始 流
支持 的   " _ sunder _ "   名称   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
" tkinter . messagebox "   模块 提供 了 一个 模板 基类 以及 多个 常用 配置 的 便捷 方法
" PyEval _ CallObject ( ) "   的 返回值 总是 “ 新 ” 的 ： 要么 是 一个 新建 的 对象 ； 要么 是 已有 对象 ， 但 增加 了 引用 计数
相反 ， 它 将 写入 私人 副本
实现   " TOS   get _ awaitable ( TOS ) "   ， 其中   " get _ awaitable ( o ) "   返回   " o "   如果   " o "   是 一个 有   CO _ ITERABLE _ COROUTINE   标志 的 协程 对象 或 生成器 对象   ， 否则 解析   " o .__ await __ "
历史 列表
源代码 ：   Lib / aifc . py
示例
返回 已 排序 值 的   iterator
哈希 算法
对象 本身 也 需要 在 这里 释放
在   Linux   的 系统   Python   版本 上 安装
在   3.6   版 更改 :   Added   policy   keyword   only   parameter .
属性 引用
列表 对象
" ast "   抽象 语法 树
3.5   新版 功能 .
一个 类 的 实例 也 可以 有 改变 自己 状态 的 （ 定义 在 类 中 的 ） 方法
该 工具 给 已有 的 将 输出 硬 编码 写 到   stdout   的 函数 或类 提供 了 额外 的 灵活性
在 以下 几行 中 ， 表达式 将 按 其 后缀 的 算术 优先 顺序 被 求值
如果   self   为 存活 状态 则 将 其 标记 为 已 死亡 ， 并 返回 调用   " func (   args ,   kwargs ) "   的 结果
如果 类 已 定义 了   " __ next __ ( ) " ， 则   " __ iter __ ( ) "   可以 简单 地 返回   " self " :
当   func   是 一个 非 描述 器类 可 调用 对象 时 ， 则 会 动态创建 一个 适当 的 绑定 方法
如果   src   和   dst   指定 了 同一个 文件 ， 则 将 引发   " SameFileError "
通配符 形式 的 导入   " from   module   import   "   仅 在 模块 层级 上 被 允许
字典 值 是 带有 一些 附加 方法 的 字符串
对于 所有 在   " threading "   存在 的 同步 原语 ， " multiprocessing "   中 都 有 类似 的 等价物
第二个 的   ID   为   " default " ， 具有 更长 的 格式 同时 还 显式 地 定义 了 时间 格式 ， 并 将 最终 实例 化 一个 带有 这 两个 格式 字符串 的   " logging . Formatter "
Decimal   可以 模拟 手工 运算 来 避免 当 二进制 浮点数 无法 精确 表示 十进制 数 时会 导致 的 问题
如果 设置 了   " DEBUG _ SAVEALL "   ， 则 所有 不可 访问 对象 将 被 添加 至该 列表 而 不会 被 释放
Window   菜单 （ 命令行 和 编辑器 ）
了解 Python   2   和   3 之间 的 区别
Differ   对象
只有   days   ,   seconds   和   microseconds   会 存储 在 内部
函数 原型
如果 需要 这样 的 代码 来 调用 低级 异步 API ， 应该 使用   " loop . call _ soon _ threadsafe ( ) "   方法 ， 例如 :
" array "   模块 还 提供 了 创建 具有 紧凑 表示 的 固定 类型 的 数组 的 方法 ， 但 它 的 索引 速度 比 列表 慢
3.2   版后 已 移除 .
请 尽量 将 海象 运算符 的 使用 限制 在 清晰 的 场合 中 ， 以 降低 复杂性 并 提升 可读性
添加 具有 给定   id   ( 大于   0 ) ， 以及 在 给定 位置 上 给定 名称 的 标记
命令行 界面
生成器 表达式 和 列表 推导 式
注意 ， 预期 的 输出 显示 代码段 的 运行 时间 比 之前 快 了   1   秒 :
返回 的 时间 值 序列 的 类型 为   " gmtime ( ) "   、   " localtime ( ) "   和   " strptime ( ) "
属性 值 是 一个 整数 ， 它 的 每 一个 二进制位 代表 一个 不同 的 属性
3.7   新版 功能 :   添加 了   text   形参 作为   universal _ newlines   的 别名
删除 一个 完整 的 目录 树 ；   path   必须 指向 一个 目录 （ 但 不能 是 一个 目录 的 符号 链接 ）
" functools . lru _ cache ( ) "   现在 可 直接 作为 装饰 器 而 不是 作为 返回 装饰 器 的 函数
解包 一个 归档文件
（ 由   Serhiy   Storchaka   在   bpo   33710   中 贡献 。 ）
读取   path   作为 二进制 文件 并且 返回 来自 它 的 字节 数据
如果 所 定义 的 任何 软 关键字 仅 在 特定   " __ future __ "   语句 生效 时 被 激活 ， 它们 也 将 被 包含 在内
成功 时 返回   " 0 " ， 出错 时 返回   "   1 "
在 内存 中 压缩文件 :
警告 :
对于 启动 程序 的 32 位 和 64 位 实现 都 是 如此 这 对于 启动 程序 32 位 和 64 位 都 是 正确 的 如果 可用 ， 32 位 启动 程序 将 倾向 于 执行 指定 版本 的   64 位 Python 安装
值   意义   " ' r ' "   以 只读 方式 打开 现有 数据库 （ 默认 ）   " ' w ' "   以 读写 方式 打开 现有 数据库   " ' c ' "   以 读写 方式 打开 数据库 ， 如果 不 存在 则 创建 它   " ' n ' "   始终 创建 一个 新 的 空 数据库 ， 以 读写 方式 打开
3.6   版后 已 移除 :   OpenSSL   已弃 用 了   " ssl . RAND _ pseudo _ bytes ( ) " ， 请 改用   " ssl . RAND _ bytes ( ) "
创建 一个 共享 的   " queue . Queue "   对象 并 返回 它 的 代理
这样 你 需要 修改 的 内容 就 都 是 赋 给 该 别名 的 值
如果 您 的 系统 上 有 多个 版本 的   Python ， 您 可以 通过 运行   " python3 "   或 您 想要 的 任何 版本 来 选择 特定 的 Python 版本
唯一 需要 使用   future   语句 的 特性 是   " 标注 "   ( 参见   PEP   563   )
返回 某年 （   " 1970 "   ... ） ， 某月 （   " 1 "   " 12 "   ） ， 某日 （   " 1 "   " 31 "   ） 是 星期 几 （   " 0 "   是 星期一 ）
本章 中 描述 的 模块 列表 是 ：
当 在 字典 中 循环 时 ， 用   " items ( ) "   方法 可 将 关键字 和 对应 的 值 同时 取出
PEP   371 :   多任务处理 包
选择 元素
3.3   版后 已 移除 :   Use   the   constants   defined   on   " importlib . machinery "   instead .
小 插曲 ： 编码 风格
如果 为   " True " ， 则 会 将 目标 文件 的 内容 添加 到 归档 中
编程 接口
如何 从 列表 中 删除 重复 项 ？
因此 ，   你 不得不 调用   " PyBuffer _ Release ( ) "   在 你 结束 数据 的 处理 时 ( 或者 在 之前 任何 中断 事件 中 )
如果   " FloatOperation "   信号 被 捕获 ， 构造函数 中 的 小数 和 浮点数 的 意外 混合 或 排序 比较 会 引发 异常
在 其他 方面 ，   " overflow _ exception "   必须 指向 一个   Python   异常 对象 ； 引发 异常 并 返回   "   1.0 "
3.4   新版 功能 .
返回 带有   k   位 随机 的 Python 整数
使用   " frozen   True "   时会 有 很小 的 性能 损失 ：   " __   init __ ( ) "   不能 使用 简单 的 赋值 来 初始化 字 段 ， 并 必须 使用   " object .__   setattr __ ( ) "
将 与   terminfo   功能 名称   capname   相对 应 的 数字 功能 值以 整数 形式 返回
普通 的 函数 计算 并 返回 一个 值 ， 而 生成器 返回 一个 能 返回 数据流 的 迭代 器
context   形参 可以 设 为 一个   " ssl . SSLContext "   实例 以 配置 用于   HTTPS   连接 的   SSL   设置
例如 :
几乎 没有 任何 适当 理由 将 问题 如此 复杂化
如果 设置 了 格式 器则 用 其 对 记录 进行 格式化
此 行为 特意 被 设计 为 与 作为 脚本 参数传递 给 解释器 的 目录 和   zip   文件 的 处理 方式 类似
如果 要求 认证 但是 没有 指定 认证 密钥 ， 则 会 使用   " current _ process ( ) . authkey "   的 返回值   ( 参见   " Process "   )
描述 器 使用指南
Python   有 什么 新 变化 ？
用于 构建 字典
3.9   新版 功能 :   The   base _ url   and   max _ depth   parameters .
Python   搜索 标准 目录 列表 ， 以 找到 调用者 可以 在 其中 创建 文件 的 目录
P _ NOWAIT   示例 :
Tkinter   模块
它 在   POSIX   平台 中 由   C   函数   " perror ( ) "   来 格式化 ， 在   Windows   中则 是 由   " FormatMessage ( ) "
" Process "   一些 方法 的 示例 用法 ：
hashlib   包
复用 已有 的 测试代码
第   2   版本 会 对 浮点数 使用 二进制 格式
如果 不 使用 任何 层叠 样式表 ， 可以 使用   " None "
寻找 动态链接库
Deque 队列 是 由 栈 或者 queue 队列 生成 的 （ 发音 是   “ deck ” ， ” double   ended   queue ” 的 简称 ）
编译器 现在 会 发出 显式 指令 来 调整 值 堆栈 并 为   " break " ,   " continue "   和   " return "   调用 清除 代码
logtype   为   " ' Application ' " ,   " ' System ' "   或   " ' Security ' "   之一 ， 且 默认值 为   " ' Application ' "
在   3.8   版 更改 :   Added   cf _ feature _ version   field .
示例
将 面板 推至栈 顶部
返回 一个   " datetime . timezone "   对象 ， 该 对象 具有 以   offset   参数 表示 的 固定 时差 和 时区 名称   name
这个 协程 函数 主要 是 用于 执行 在 其他 情况 下会 阻塞 事件 循环 的   IO   密集型 函数 / 方法
它 支持 带有 超时 和 回调 的 异步 结果 ， 以及 一个 并行 的   map   实现
结果 状态   " MHMessage "   状态   " unseen "   标签   " unseen "   序列   " answered "   标签   " replied "   序列
关键字   " def "   引入 一个 函数 定义
与 模糊 的 运行 时 行为 相关 的 警告 的 基类
字典 的 键 和 值 必须 为 字符串 ； 每个 键 将 被 替换 为 其 所 对应 的 值
根据 格式 字符串   format   和 变量 参数 列表   va   ， 不能 输出 超过   size   字节 到   str
" Pool "   的   maxtasksperchild   参数 给 用户 提供 了 这种 能力
version   参数 指明   " dump "   应当 使用 的 数据格式 （ 见下文 ）
成功 时 返回 结果 ， 在 失败 时 抛出 一个 异常 并 返回   NULL
字符   阶段   " \ section "   被 匹配 的 字符串   " \ \ section "   为   " re . compile ( ) "   转义 的 反 斜杠   " " \ \ \ \ section " "   为 字符串 字面 转义 的 反 斜杠
在   POSIX   兼容 的 平台 上 ， 它 等价 于 以下 表达式 :
线程 安全
在   3.5   版 更改 :   The   optimization   parameter   was   added   and   the   debug _ override   parameter   was   deprecated .
" pass "   语句
此 函数 的 参数 是 是 格式 字符串 中 实际 引用 的 所有 参数 键 的 集合 （ 整数 表示 位置 参数 ， 字符串 表示 名称 参数   ） ， 以及 被 传给   vformat   的   args   和   kwargs   的 引用
以下 两个 方法 都 使用 指针 ， 具体 实现 由 其 底层 决定
谓词 （ 方括号 内 的 表达式 ） 之前 必须 带有 标签 名称 ， 星号 或 其他 谓词
第一种 就是 简单 的 引用 对象 ， 第二种 尽可能 地 作用 为 一个 原 对象 的 代理
参见 :
bpo   20844 :   修复 了 含有 经 编码 的   cookie   和 换行符 的 脚本 位于   Windows   平台 可能 运行 失败 的 问题
注解 :
事后 调试 之后 （ 或 程序 正常 退出 之后 ） ， pdb   将 重新启动 程序
PEP   3148 :   " concurrent . futures "   模块
返回 一个 上下文 管理器 ， 它 将 在 进入   with   语句 时 将 活动 线程 的 当前 上下文 设 为   ctx   的 一个 副本 并 在 退出   with   语句 时 恢复 之前 的 上下文
upload   命令 现在 会 创建   SHA2   256   和   Blake2b   256   哈希 摘要
" builtins "   内 建 对象
返回 具有 指定   name   的 日志 记录器 ， 或者 当   name   为   " None "   时 返回 层级 结构 中 作为 根 日志 记录器 的 日志 记录器
由   " loop . create _ datagram _ endpoint ( ) "   返回 的 传输 :
如 有 必要 会 添加 末尾 换行符
3.5   新版 功能 .
现在   " lib2to3 "   模块 将 发出   " PendingDeprecationWarning "
构建 和   C   API   的 改变
将 当前 解包 数据 缓冲区 以 字符串 的 形式 返回
这 方法 语 有效 是因为 元组 按 字典 顺序 进行 比较 ， 先 比较 第一项 ； 如果 它们 相同 则 比较 第二个 项目 ， 依此类推
此外 ， 模块 实现 了 一个   " 简单 的 "   FIFO   ( first   in ,   first   out )   队列 类型 ，   " SimpleQueue "   ， 这个 特殊 实现 为 小 功能 在 交换 中 提供 额外 的 保障
常数   意义   " KQ _ EV _ ADD "   添加 或 修改 事件   " KQ _ EV _ DELETE "   从 队列 中 删除 事件   " KQ _ EV _ ENABLE "   Permitscontrol ( )   返回 事件   " KQ _ EV _ DISABLE "   禁用 事件   " KQ _ EV _ ONESHOT "   在 第一次 发生 后 删除 事件   " KQ _ EV _ CLEAR "   检索 事件 后 重置 状态   " KQ _ EV _ SYSFLAGS "   内部 事件   " KQ _ EV _ FLAG1 "   内部 事件   " KQ _ EV _ EOF "   筛选 特定 EOF 条件   " KQ _ EV _ ERROR "   请参阅 返回值
默认值
" itertools "   为 高效 循环 而 创建 迭代 器 的 函数
这个 只读 变量 在   ctypes   数据 实例 自身 已 分配 了 内存 块 时 为 真值 ， 否则 为 假值
此字 段 由   " PyBUF _ WRITABLE "   标志 控制
fileobj   的 使用 将 从 位置   0   开始
考虑 下面 这个   3x4 的 矩阵 ， 它 由 3 个 长度 为 4 的 列表 组成
如果 搜索 到达 根 记录器 ， 并且 其 级别 为   NOTSET ， 则 将 处理 所有 消息
使用   " os . set _ inheritable ( ) "   来 让 文件 描述符 可 继承
" find _ spec ( ) "   返回 模块 的 完全 填充 好 的 规格 说明
（ 由   Victor   Stinner   在   bpo   36348   中 贡献 。 ）
如果 流是 交互式 的 （ 即 连接 到 终端 / tty 设备 ） ， 则 返回   " True "
处理程序 在 以下内容 中有 更 详细 的 介绍 处理程序
" while   1 "   转换成   " while   True "
考虑 以下 代码 :
深入 条件 控制
调用   print _ error   或者 只是 允许 标准 回溯 机制 生效
Economics   Simulation   Peter   Norvig   编写 的 市场 模拟 ， 显示 了 该 模块 提供 的 许多 工具 和 分布 的 有效 使用 （ 高斯 、 均匀 、 样本 、 beta 变量 、 选择 、 三角 和 随机 范围 等 ）
Borland   提示 ： 首先 使用   Coff2Omf . exe   将   " python   NN   . lib "   转换 为   OMF   格式
列表 作为 栈 使用
如果   ndigits   被 省略 或 为   " None "   则 返回值 将 为 整数
可以 是 参数 化   SQL   语句 （ 即 ， 在   SQL   语句 中 使用 占位 符   ）
如果 标准 流 被 重定向 （ 到 文件 或 管道 ） 而 不是 指向 控制台 缓冲区 则 该 变量 会 被 忽略
因此 举例来说 ， 字 段 表达式   ' 0 . name '   将 导致 调用   " get _ value ( ) "   时 附带   key   参数值   0
参见 :
将   item   放入 队列
Z _ DEFAULT _ COMPRESSION   是 速度 和 压缩率 之间 的 平衡   ( 一般 相当于 设 压缩 等级 为   6 )
参见 :
返回 文件 模式 中 可 由   " os . chmod ( ) "   进行 设置 的 部分 即 文件 的   permission   位 ， 加上   sticky   位 、 set   group   id   以及   set   user   id   位 （ 在 支持 这些 部分 的 系统 上 ）
核心 与 内置
它 表示 在 下层 网络连接 之上 叠加 的 高层 级 加密 和 验证 层 存在 某种 问题
注解 :
" chunk "   读取   IFF   分块 数据
如果 程序 由 一个 信号 终止 ， 这 将 会 被 设为 一个 负 的 信 号码
3.5 . 2   新版 功能 .
开发 高质量 软件 的 一种 方法 是 在 开发 过程 中为 每个 函数 编写 测试 ， 并 在 开发 过程 中 经常 运行 这些 测试
此 方法 会 就 地 地 修改 函数
非 捕获 和 命名 组
值 将 获得   " i4 " ,   " i8 "   或者   " < int > "   标志
为了 能 向下兼容 ， 如果 传入 了 三个 参数 ， 则   " args "   属性 将 仅 包含 由前 两个 构造 器 参数 组成 的   2   元组
例如
但是 实例 的 名称 则 无法 确定 地 说 是   a   或是   b ， 因为 有 两个 名称 被 绑定 到 了 同一个 值
对于 增量 解压缩 ， 请 改用   " BZ2Decompressor "
当 栅栏 中 所有 线程 都 已经 调用 了 这个 函数 ， 它们 将 同时 被 释放
将   " reduce ( ) "   转换 为   " functools . reduce ( ) "
注意 ， 该 函数 可能 需要 相当 大 的 辅助 空间 （ 取决于   iterable   的 长度 ）
Python   的 应用 编程 接口 （ API ） 使得   C   和   C++   程序员 可以 在 多个 层级 上 访问   Python   解释器
集合 对象 也 支持 像 联合 ， 交集 ， 差集 ， 对称 差分 等 数学 运算
" pwd "   用户 密码 数据库
在   3.6   版 更改 :   " SSLContext . verify _ mode "   returns   " VerifyMode "   enum :
增加 了   " math . nextafter ( ) " :   返回 从   x   往   y   方向 的 下 一个 浮点 数值
reserved   是 一个 保留 的 证书 ， 必须 是 零
在 根 日志 记录器 上 记录 一条   " DEBUG "   级别 的 消息
在 列表 的 末尾 添加 一个 元素
More   information   about   Python ' s   garbage   collection   scheme   can   be   found   in   section   使 对象 类型 支持 循环 垃圾 回收 .
基础
测试
创建 一个 名为   " cls _ name "   的 新 数据 类 ， 字段 为   " fields "   中 定义 的 字 段 ，   基类 为   " bases "   中 给出 的 基类 ， 并 使用   " namespace "   中 给出 的 命名 空间 进行 初始化
设置 大小 调整 模式 为 以下 值 之一 :   " auto " ,   " user " ,   " noresize "
任意 的 参数 列表
如果 两个   " Row "   对象 具有 完全相同 的 列 并且 其 成员 均 相等 ， 则 它们 的 比较 结果 为 相等
与 连接 相关 问题 的 基类
仅   Windows :   此类 的 实例 即 加载 好 的 动态链接库 ， 其中 的 函数 使用   " stdcall "   调用 约定 ， 并 假定 默认 返回   " int "
PEP   493 ： 适用 于 Python   2.7   的   HTTPS   验证 迁移 工具
当 调用   " partial "   对象 时 将要 提供 的 关键字 参数
返回 指定   year ,   week   和   day   所 对应   ISO   历法 日期 的   " date "
这个 名称 通常 会令 该 目录 在 你 的 终端 中 保持 隐藏 ， 从而 避免 需要 对 所在 目录 进行 额外 解释 的 一般 名称
默认 情况 下 ，   使用   " time . localtime ( ) " ； 要 为 特定 格式化 程序 实例 更改 此项 ， 请 将 实例 的   " converter "   属性 设 为 具有 与   " time . localtime ( ) "   或   " time . gmtime ( ) "   相同 签名 的 函数
attribute   属性 关联 到 一个 对象 的 值 ， 可以 使用 点 号 表达式 通过 其 名称 来 引用
搜索 的 结果 会 缓存 起来 ， 参见 下面   " tempdir "   的 描述
进程 间 同步
舍入 模式
你 可能 希望 只 保留 一定 数量 的 日志 文件 ， 当 不断 的 创建 文件 到达 该 数量 时   ， 又 覆盖 掉 最 开始 的 文件 形成 循环
关于 整个   Python / C   API   的 详细 介绍 ， 请参阅 独立 的   Python / C   API   参考手册
在 上面 的 例子 中 ， Python 的 字符串 文字 的 自动 连接 已 被 用于 将 正则 分解 为 更 小 的 部分 ， 但 它 仍然 比 以下 使用   " re . VERBOSE "   版本 更难 理解
如果 无法 确定 库 名称 ， 则 返回   " None "
参见 :
" Enum "   类 和 成员 的 布尔值
Python   接口
摘要
成功 时 返回 结果 ， 在 失败 时 抛出 一个 异常 并 返回   NULL
这个 模块 对 有 序列表 提供 了 支持 ， 使得 他们 可以 在 插入 新 数据 仍然 保持 有序
在   3.7   版 更改 :   Add   " cr _ origin "   attribute   to   coroutines .
" partial ( ) "   会 被 “ 冻结 了 ” 一部分 函数参数 和 / 或 关键字 的 部分 函数 应用 所 使用 ， 从而 得到 一个 具有 简化 签名 的 新 对象
它会 定期 进行 更新 以 反映 各 政治 实体 对 时区 边界 、 UTC   差值 和 夏令时 规则 的 更改
IncrementalDecoder   对象
这些 同步 原语 的 方法 不 接受   timeout   参数 ； 请 使用   " asyncio . wait _ for ( ) "   函数 来 执行 带有 超时 的 操作
当 使用 非本机 大小 和 对齐 方式 即   ' < ' ,   ' > ' ,   '   ' ,   and   ' ! '   时 不会 添加 任何 填充
quadratic   blowup   entity   expansion （ 二次 爆炸 实体 扩展 ）   二次 爆炸 攻击 类似 于   Billion   Laughs   攻击 ， 它 也 滥用 实体 扩展
如果 堆为 空 ， 抛出   " IndexError "
Python   默认 的   UTF   8   或者 纯   ASCII   在 任何 情况 下 都 能 有 最好 的 表现
模块 函数
例如 ， 可以 编写 新 命令 以 支持 新 的 特定 于 平台 的 包 格式 ， 但是 可以 修改 现有 命令 的 替换 ， 以 修改 命令 在 包上 的 操作 细节
一个   dialect   是 一个   " Dialect "   类 的 子类 ， 它 具有 一组 特定 的 方法 和 一个   " validate ( ) "   方法
旧 的 字符串 格式化 方法
通过 对此 属性 赋值 就 可以 在   " IncrementalDecoder "   对象 的 生命 期内 在 不同 的 错误处理 策略 之间 进行 切换
" collections . abc . AsyncIterable "   的 泛型 版本
通常 是 在   " lambda "   中 嵌套   " lambda "   来 实现 的
这些 共享 对象 将 是 进程 和 线程 安全 的
会 被 默认 警告 过滤器 忽略
移植 到   Python   3.8
字节 码 分析
原子
数字 类型   " int " ,   " float " ,   " complex "
一个 长度 为   4   的 封装 在   " bytes "   对象 中 的 整数 ( 高位 优先 )
如果 此 归档 成员 是 一个 目录 则 返回   " True "
这个 模块 定义 了 标准   Python   编解码器 （ 编码器 和 解码器 ） 的 基类 ， 并 提供 接口 用来 访问 内部 的   Python   编解码器 注册表 ， 该 注册表 负责管理 编解码器 和 错误处理 的 查找 过程
代码 库
簿记 功能
库
" asyncio . set _ event _ loop _ policy ( ) "   设置 一个 新 的 进程 域 策略
" hmac "   基于 密钥 的 消息 验证
包含 文件
在   " f   attrgetter ( ' name ' ,   ' date ' ) "   之后 ， 调用   " f ( b ) "   将 返回   " ( b . name ,   b . date ) "
由于 存在 很多 不同 的 声音 文件格式 （ 通常 由 它们 的 扩展名 来 识别 ， 例如 ： " . wav "   ，   " . aiff " ，   " . au " ） ， 因此 为了 不同 文件格式 间 的 转换 ， 你 可能 需要 创建 和 维护 一个 不断 增长 的 模块 集合
你 会 在   Python   参考 库中 经常 看到 这种 表示 方法 )
如果 你 想要 定义 自己 的 级别 ， 并且 需要 它们 具有 相对 于 预定 义 级别 的 特定 值 ， 那么 这些 内容 可能 是 你 感兴趣 的
name   字符串 即类 名 并且 会 成为   " __ name __ "   属性 ；   bases   元组 列出 基类 并且 会 成为   " __ bases __ "   属性 ； 而   dict   字典 为 包含 类 主体 定义 的 命名 空间 并且 会 被 复制到 一个 标准 字典 成为   " __ dict __ "   属性
改变 特定 配置 解析器 行为 的 最 常见 方式 是 使用   " __ init __ ( ) "   选项 :
" multiprocessing . dummy "   模块
新 的 内置 特性 ：
进入   traceback   对象 的 事后 调试
参数 :   n   一个 整型 数   ( 或   " None " )
检测   tarfile   是否 有效
这是 一个 简化 的   " Queue "   类 的 实现 ， 很 像 带锁 的   " Pipe "
请 注意 ， 进程 池 的 方法 只能 由 创建 它 的 进程 使用
库
这部分 很 容易 理解 ， 这是 为了 跟上 一章 能 对 接上
将 快照 写入 文件
Array   子类 构造 器 可 接受 位置 参数 ， 用来 按 顺序 初始化 元素
如果 想要 其中 最小 或 最大 的 一个 ， 请 使用   " min ( multimode ( data ) ) "   或   " max ( multimode ( data ) ) "
拥有 以下 附加 属性 的   " ValueError "   的 子类 ：
参考
" audioop "   处理 原始 音频 数据
这样 当仅 需 使用   Screen   和   Turtle   对象 时 不 需要 再 额外 导入   " mainloop ( ) "
在 调用 时 ， 泛 型函数 会 根据 第一个 参数 的 类型 进行 分派 :
如果   ob   为   " PyDateTime _ TZInfoType "   类型 或   " PyDateTime _ TZInfoType "   的 某个 子 类型 则 返回 真值
引用 的 拥有 关系 可以 被 传递
InputSource   对象
在   3.2   版 更改 :   添加 了   copy _ function   参数 以 允许 提供 定制 的 拷贝 函数
第二个 操作数 必须 为   precision   至   precision   范围 内 的 整数
在   3.7   版 更改 :   现在 可以 处理 协程 和 异步 生成器 对象
核心 与 内置
format _ spec   字 段 包含 值应 如何 呈现 的 规格 描述 ， 例如 字 段 宽度 、 对齐 、 填充   、 小数 精度 等 细节 信息
尝试 选择 一个 好 名字 ， 对于 诊断 很 有 帮助
往 一个 文件 路径 写入 指定 字节 的 的 可选 的 抽象 方法
System   V   执行 文件 锁定
URL   解析
" { items } "   ( " dict " )   [   相关 的 元素   ]   将 一个 C 变量 序列 转换成   Python   字典
如果 未有 捕获 ,   则 为   " None " .
但是 你 必须 小心谨慎   ， 因为 函数 是从 类中 通过 描述 器 方式 来 访问 的
受限   C   API   中 的 改变 （ 如果 定义 了   " Py _ LIMITED _ API "   宏 ） :
" select . epoll . unregister ( ) "   方法 不会 再 忽略   " EBADF "   错误
更新 物理 屏幕
使用 标准 库提 提供 的   logging   API   最 主要 的 好处 是 ， 所有 的   Python   模块 都 可能 参与 日志 输出 ， 包括 你 自己 的 日志 消息 和 第三方 模块 的 日志 消息
3.9   版后 已 移除 :   " collections . abc . KeysView "   now   supports   " [ ] "
SSL / TLS   Strong   Encryption :   An   Introduction   Apache   HTTP   Server 文档 介绍
你 应该 定位 到 相应 的 代码 并 对 其 进行 修改 ， 以使 其 兼容   Python   3 . x
以 字节 表示 的 结果 哈希 对象 的 大小
链接 过多
在   3.9   版 更改 :   Heap   allocated   types   are   expected   to   visit   " Py _ TYPE ( self ) "   in   " tp _ traverse "
它 可以 是 以下 值 之一 ：
Python   常见问题
PEP   343   " with "   语句   Python   " with "   语句 的 规范 描述 、 背景 和 示例
返回   p   所 指向 的 元组 的 切片 ， 在   low   和   high   之间 ， 或者 在 失败 时 返回   " NULL "
例如 ， 一个 扩展 模块 可以 实现 一个 类型   " collection "   看起来 是 没有 顺序 的
配置 日志 记录
多 服务器 队列 的 到达 时间 和 服务 交付 模拟 :
此 限制 用于 控制 在   " Repr "   对象 上 没有 特定 的 格式化 方法 可用 的 对象 类型 的 大小
" tkinter . simpledialog "   标准   Tkinter   输入 对话框
函数
默认 实现 会 调用 处理程序 的   ' namer '   属性 ， 如果 它 是 可 调用 对象 的话 ，   并 传给 它 默认 的 名称
usage   描述 程序 用途 的 字符串 （ 默认值 ： 从 添加 到 解析器 的 参数 生成 ）
如果 给出   " rounding "   形参则 由 其 确定 舍入 模式   ， 否则 由 给定 的   " context "   来 确定
添加 了   policy   关键字
mode   可以 为   " ' r ' " ,   " ' w ' " ,   " ' x ' "   或   " ' a ' "   分别 表示 读取 （ 默认 模式 ）   、 写入 、 独占 新建 或 添加
" NEWLINE "   标记 表示   Python   代码 逻辑 行 的 结束 ； 当 在 多条 物理 线路 上 继续执行 逻辑 代码 行时 ， 会 生成   " NL "   标记
从那时起 ， 每当 需要 一个 新 进程 时 ， 父 进程 就 会 连接 到 服务器 并 请求 它 分叉 一个 新 进程
" trace "   跟踪 Python 语句 执行
I / O   流 被 安排 为 按类 的 层次结构 实现
数据类型
库
请 检查 你 系统 安装 的 杀毒 扫描 程序 的 配置 ， 确保 两台 机 它们 是 同样 的 配置
功能性   API
在 本质 上 ， Condition   对象 合并 了   " Event "   和   " Lock "   的 功能
C   变量 也 可 被 声明 为   " PyObject   "
" LZMAFile "   可以 包装 在 一个 已 打开 的   file   object   中 ， 或者 是 在 给定 名称 的 文件 上 直接 操作
DTD   retrieval   Python   的 一些   XML   库   " xml . dom . pulldom "   从 远程 或 本地 位置 检索 文档 类型定义
第一个 参数   callable   可以 是 任何 可以 在 没有 参数 的 情况 下 调用 的   Python   可 调用 对象 ； 每次 调用 都 应该 返回 迭代 中 的 下 一个 项目
如果 新 行 层级 较 低 ， 则 应当 是 栈 中 的 层级 数值 之一 ； 栈中 高于 该 层级 的 所有 数值 都 将 被 弹出 ， 每弹 出 一级 数值 生成 一个   DEDENT   形符
在   POSIX   平台 上 ， 它 返回 的 对象 是 真实 的 文件 对象
大致 相当于 ：
文件 描述符 的 继承
在 最 简单 的 情况 下 ， 日志 消息 被 发送到 文件 或   " sys . stderr "
与 嵌套 函数 定义 一样 ， lambda 函数 可以 引用 所 包含 域 的 变量 :
当 遇到 这种 错误 时 ， 它 将 退出 并打印 出 错误 文本 同时 附带 用法 消息 :
如果 你 熟悉 其他   Unix   平台 上 的   Python   ， 那么 你 应该 阅读 有关 从   Unix   shell   运行   Python   脚本 的 部分
这是 为了 防止 一个 已 提交 的   Task / Future   被 取消 导致 其他   Tasks / Future   也 被 取消
使用   cmp   参数 的 旧 方法
构建
将   XHTML   1.0   实体 定义 映射 到   ISO   Latin   1   中 的 替换 文本 的 字典
控件 状态
" netrc "   类 解析 并 封装 了   Unix   的   ftp   程序 和 其他   FTP   客户端 所 使用 的   netrc   文件格式
3.9   版后 已 移除 :   " collections . abc . ByteString "   now   supports   " [ ] "
如果 未指定   ， 这些 字符串 默认 为空
如果 未 实现 ， 则 当   " datetime "   对象 与 不同 类型 比较 时 将 会 引发   " TypeError " ， 除非 是   "   "   或   " !   "   比较
3.3   新版 功能 .
此外 ， 通过 继承 一个 特殊 的 类   " Protocol "   ， 用户 能够 定义新 的 自定义 协议 来 充分 享受 结构 化子 类型 （ 后 文中 有 例子 ）
框架   " / Library / Frameworks / Python . framework "   ， 包括   Python   可执行文件 和 库
（ 由   Steven   Bethard   和   Raymond   Hettinger   贡献 。 ）
第   0   版为 历史 格式 ， 第   1   版为 共享 固化 的 字符串   ， 第   2   版 对 浮点数 使用 二进制 格式
pip   freeze `   将 生成 一个 类似 的 已 安装包 列表 ， 但 输出 使用   " pip   install "   期望 的 格式
引发   " TypeError "   如果   " instance "   不是 数据 类 实例
如果 通过 使用   "   enable   universalsdk   "   或   "   isysroot "   明确 地 配置 了   macOS   SDK ， 则 只会 搜索   SDK   本身
返回 一个 可 等待 对象 ， 它 在 运行 时会 开始 执行 该 异步 生成器 或 是从 上次 执行 的   yield   表达式 位置 恢复 执行
3.5   新版 功能 .
在   3.7   版 更改 :   The   method   returns   on   instance   of   " SSLContext . sslobject _ class "   instead   of   hard   coded   " SSLObject " .
这个 旗标 对于 在子 进程 上 使用   " os . kill ( ) "   来说 是 必须 的
要求 必须 为 八个 十六进制 数码
右移   n   位 被 定义 为 被   " pow ( 2 , n ) "   整除
默认 情况 下 ， Python   通过 在 所 写入 缓存 文件 中 保存 源文件 的 最新 修改 时间 戳 和 大小 来 实现 这 一点
进程 的 身份验证 密钥 （ 字节 字符串 ）
（ 由   Ed   Maste ,   Conrad   Meyer ,   Kyle   Evans ,   Kubilay   Kocak   和   Victor   Stinner   在   bpo   38061   中 贡献 。 ）
将   " filter ( ) "   函数 用   " list "   包装 一层
" typing "   类型 标注 支持
测试
在   3.3   版 更改 :   加入 了 对 别名   [ 1 ]   的 支持
这 一章 将 给出 在 这些 情况 下 所用 的 语法
格式 字符 具有 以下 含义 ； C   和   Python   值 之间 的 按 其 指定 类型 的 转换 应当 是 相当 明显 的
如 这个 例子 所示 ， 如果 一个 选项 被 标记 为   " required " ， 则 当该 选项 未 在 命令行 中 出现 时 ， " parse _ args ( ) "   将会 报告 一个 错误
数据类型
" open ( ) " ,   " read ( ) "   和   " extract ( ) "   方法 可 接受 文件名 或   " ZipInfo "   对象
" threading "   模块 基于 该 模块 提供 了 更 易用 的 高级 多线程   API
在   3.9   版 更改 :   关键字 参数   encoding   已 被 移除
（ 由   Raymond   Hettinger   在   bpo   36018   中 贡献 。 ）
文件 输入
这 被称作 编写 脚本
如果 动态 导入 一个 自从 解释器 开始 执行 以来 被 创建 的 模块 （ 即 创建 了 一个   Python   源代码 文件 ） ， 为了 让 导入 系统 知道 这个 新 模块 ， 可能 需要 调用   " invalidate _ caches ( ) "
类似 于   " erase ( ) " ， 但 还 会 导致 在 下次 调用   " refresh ( ) "   时 整个 窗口 被 重新 绘制
管理器
发布 版本 :   0.32
要 实现 更 通用 的   " AutoNumber " ， 请 添加   "   args "   到 签名 中 :
如果 你 希望 指定 你 自己 的 类别 就要 重载 此 方法
脚注
提供 一个 参数 序列 通常 更好 ， 它 可以 更 小心 地 使用 参数 中 的 转义字符 以及 引用 （   例如 允许 文件名 中 的 空格 ）
线程 对象
" contextlib "   为   " with " 语句 上下文 提供 的 工具
很 显然 ， 如果 迭代 器是 无限 的 ， 这么 做 你 就 会 遇到 问题 ； " max ( ) "   和   " min ( ) "   永远 也 不会 返回 ； 如果 元素   X   也 不 出现 在 数据流 中 ， " " in " "   和   " " not   in " "   操作 同样 也 永远 不会 返回
" random "   生成 伪 随机数
记录器 层次结构 的 根 称为 根 记录器
" LZMAFile "   支持   " io . BufferedIOBase "   所 指定 的 所有 成员 ， 但   " detach ( ) "   和   " truncate ( ) "   除外
Server   对象
可 哈希 性 使得 对象 能够 作为 字典 键 或 集合 成员 使用 ， 因为 这些 数据结构 要 在 内部 使用 哈希 值
netrc   对象
如   PEP   11   中 所述 ， Python   仅 支持 微软 产品 支持 生命周期 内 的 Windows   版本
如果 希望   Pdb   不要 修改   SIGINT   处理程序 ， 请 将   nosigint   设置 为   true
例如 ， 考虑   " logging . handlers . MemoryHandler " ， 它 接受 一个   " target "   参数 即 其 所 委托 的 另 一个 处理程序
" ' milliseconds ' " :   包含 完整 时间 ， 但 将 秒 值 的 小数 部分 截断 至 微秒
一次性 压缩 或 解压缩
这样 的 类型 需要 定制 自己 的 比较 行为 ， 实际上 ， 许多 内置 类型 都 是 这样 做 的
发布 不可 变 模块 对象 的 导入 加载 器 除了 发布 单独 模块 以外 现在 也 可以 发布 不可 变包
计算   CRC   32   ， 从   value   的 初始   CRC   开始 计算   data   的 32 位 校验 和
字符串   " ' 0123456789abcdefABCDEF ' "
子 命令
文档
当 每次   key   函数 产生 的 键值 改变 时 ， 迭代 器会 分组 或 生成 一个 新组 （ 这 就是 为什么 通常 需要 使用 同一个 键值 函数 先对 数据 进行 排序 ）
引发 一个 审计 事件   " builtins . id " ， 附带 参数   " id "
返回 字段名 为   name   的 所有 字 段值 的 列表
如果   " endwin ( ) "   已经 被 调用 （ 即   curses   库 已经 被 撤销 初始化 则 返回   " True "
所有 这 三个 命令 也 可以 使用 版本号 后缀 ， 例如 ，   " python3 . exe "   和   " python3 . x . exe "   以及   " python . exe "   （ 其中   " 3 . x "   是 您 要 启动 的 特定 版本 ，   例如   3.9   ）
当 从 帮助 器 / 包装 器 代码 调用 日志 记录   API   时 ， 这 通常 很 有用 ， 以便 事件 日志 中 的 信息 不是 来自 帮助 器 / 包装 器 代码 ， 而是 来自 调用 它 的 代码
例如 ， 使用 十进制 浮点 和 二进制 浮点数 计算 70 美分 手机 和 5 ％ 税 的 总费用 ， 会 产生 的 不同 结果
当前 的 实现 已 在   Linux   和   macOS   上 进行 了 测试
最好 使用   "   "   ，   " + "   或   " ? "   ， 只要 因为 它们 更 短 更 容易 阅读
这个   " PyObject "   的 子 类型 表示 一个   Python   字节 数组 对象
version   参数 指明   " dumps "   应当 使用 的 数据类型 （ 见下文 ）
返回 一个 纯   ctypes   数组 ,   或者 在 此 之上 经过 同步器 包装 过 的 进程 安全 的 对象 ， 这 取决于   lock   参数 的 值 ， 除此之外 ， 和   " RawArray ( ) "   一样
将会 以   C   函数 返回 的 整数 对象 作为 参数 调用 这个 可 调用 对象 ， 执行 后 的 结果 作为 最终 函数 返回值
选项   描述   exportselection   Boolean   value
" break "   和   " continue "   语句 ， 以及 循环 中 的   " else "   子句
以 匹配 字面   " ' $ ' " ， 使用   " \ $ "   或者 将 其 包裹 在 一个 字符 类中 ， 例如   " [ $ ] "
（ 由   Victor   Stinner   在   bpo   35713   中 贡献 。 ）
不幸 的 是 ，   对于 一个 不可 信 的 数据源 发来 的 数据 ， 反 序列化 是 存在 安全 风险 的
就 相当于
如果   args   是 字符串 ， 则 其 解读 依赖于 具体 平台 ， 如下 所述
两个 参数 或者 必须 都 为 数字 ， 或者 一个 参数 必须 为 整数 而 另 一个 参数 必须 为 序列
所有 接触 到 该 结构 的 代码 都 应当 被 重写
" logging . config "   模块 日志 记录 模块 的 配置   API
如果   ob   为   " PyDateTime _ DeltaType "   类型 则 返回 真值
幂 运算符 的 绑定 比 在 其 左侧 的 一元 运算符 更 紧密 ； 但 绑定 紧密 程度 不及 在 其 右侧 的 一元 运算符
这个 例子 中 调用   " PyArg _ UnpackTuple ( ) "   完全 等价 于 调用   " PyArg _ ParseTuple ( ) " :
参数   path   应该 是 源代码 来源 的 路径 ， 这 可能 是 一个 抽象概念 （ 例如 位于 一个   zip   文件 中 ）
默认 精度 与 表示 给定 值 所 需 的 精度 一样
如何 配置   Screen   和   Turtle
（ 由   Alexandre   Vassalotti ,   Antoine   Pitrou   和   Unladen   Swallow   团队 在   bpo   9410   和   bpo   3873   中 贡献 。 ）
是否 有 与 Perl   的 chomp ( )   等效 的 方法 ， 用于 从 字符串 中 删除 尾随 换行符 ？
如何 在 Python 中 指定 和 实施 接口 规范 ？
等价 于   Python   表达式   " divmod ( o1 ,   o2 ) "
PyObjC   是 一个   Python   到   Apple   的   Objective   C / Cocoa   框架 的 绑定 ， 这是 大多数 现代   Mac   开发 的 基础
在   3.8   版 更改 :   添加 了   user _ function   选项
Deprecated   since   version   3.8 ,   will   be   removed   in   version   3.10 :   请 改用   " async   def "
请 注意 在 你 的 应用程序 退出 之前 如果 你 没有 调用 此 方法 ， 则 可能 会 有 一些 记录 在 留在 队列 中 ，   它们 将 不会 被 处理
如果 未定义 DST 时区 ， 则 不应 使用 第二个 字符串
" Logger . setLevel ( ) "   指定 记录器 将 处理 的 最低 严重性 日志 消息 ， 其中   debug   是 最低 内置 严重性 级别 ，   critical   是 最高 内置 严重性 级别
它们 都 具有 相同 的 接口 ：
另 一个 工具 是   Anthony   Tuininga   的   cx _ Freeze
他们 的 资源 （ 例如 已经 打开 的 文档 ， 数据库 事务 等等 ） 可能 没有 被 正确 释放
套 接字
注解 :
设置 角度 的 度量 单位 ， 即 设置 一个 圆周 为 多少   " 度 "
以上 就是 全部
非 数据 消息
dictionary   comprehension   字典 推导 式 处理 一个 可 迭代 对象 中 的 所有 或 部分 元素 并 返回 结果 字典 的 一种 紧凑 写法
" ipaddress "   提供 了 创建 、 处理 和 操作   IPv4   和   IPv6   地址 和 网络 的 功能
在 上面 的 树 中 ， 每个   k   单元 都 位于   " 2   k + 1 "   和   " 2   k + 2 "   之上
创建 新 的 迭代 器
而且 使用   " with "   相比 等效 的   " try "   " finally "   代码 块 要 简短 得 多 :
返回   o1   右移   o2   个 比特 后 的 结果 ， 如果 失败 ， 返回   " NULL "
class   类 用来 创建 用户 定义 对象 的 模板
在 之前 版本 中 ， 它 只 支持 两个 参数
查看   " create _ task ( ) "   函数 ， 它 是 创建 新 任务 的 首选 途径
引发 错误 异常
" curses . ascii "   用于   ASCII   字符 的 工具
可选 的   kwargs   参数 指定 一个 关键字 参数 字典
如果 获取 不到 指定 的 行数 ， 则 可能 返回 较少 的 行
通常 ， 需要 使用 引用 对象 的 应用 代码 应当 遵循 这样 的 模式 :
等价 于   Python   表达式   " float ( o ) "
3.9   版后 已 移除 :   " collections . abc . Collection "   now   supports   " [ ] "
改为 :
该 方法 将 返回 解包 后 的 对象
如果 栅栏 中 仍 有 线程 等待 释放 ， 这些 线程 将会 收到   " BrokenBarrierError "   异常
为什么 字典 key 必须 是 不可 变 的 ？
一般来说 ， 实例 变量 用于 每个 实例 的 唯一 数据 ， 而类 变量 用于 类 的 所有 实例 共享 的 属性 和 方法 :
如果 以 写入 或 添加 模式 打开 的 文件 不 存在 将 自动 新建 ； 当以 写入 模式 打开 时 文件 将 先 清空
内存 管理
一元 操作
使用   Condition   的 推荐 方式 是 通过   " async   with "   语句 :
相等 的 对象 应该 或者 具有 相同 的 哈希 值 ， 或者 标记 为 不可 哈希
缓冲区 将 在 满足 某些 条件 的 情况 下 被 写 到 下层 的   " RawIOBase "   对象 ， 包括 :
大多数 语言 都 能 以 不同 的 风格 被 编写 （ 或 更 准确 地说 ， 被 格式化 ） ； 有些 比 其他 的 更 具有 可读性
现在   tar   归档 通常 用于 文件 分发 和 在 网络 上 交换 归档
工具 / 示例
" es # "   ( " str " )   [ const   char   encoding ,   char   buffer ,   int   或   " Py _ ssize _ t "   buffer _ length ]   " s # "   的 变式 ， 它 将 已 编码 的   Unicode   字符 存入 字符 缓冲区
对于   " PYMEM _ DOMAIN _ RAW "   域 ， 分配器 必须 是 线程 安全 的 ： 当 分配器 被 调用 时 ， 不 持有 全局 解释器 锁
新增 模块
第一个 子句 体中 的   " continue "   语句 在 执行 时 将 跳 过 子句 体中 的 剩余 部分 并 转往 下 一项 继续执行 ， 或者 在 没有 下 一项 时 转往   " else "   子句 执行
generator   生成器 返回 一个   generator   iterator   的 函数
注解 :
" " def " "   形式 实际上 更为 强大 ， 因为 它 允许 执行 多条 语句 和 使用 标注
简单 轻量级 未 绑定 函数 缓存
这 不仅 是 在 同一个 模块 中 ， 在 其他 模块 调用 也 是 如此 ， 只要 是 在 同一个   Python   解释器 进程 中
如果 栅栏 已损坏 则 最好 将 其 废弃 并 新建 一个
移植 到   Python   3.1
示例
使用 来自 给定   Unicode   字符串 的 数组 扩展 数组
PSF   的 使命 是 推进 与   Python   编程语言 相关 的 开源 技术 ， 并 推广   Python   的 使用
（ 由   Gregory   Petrosyan   提供 建议 ， 之后 由   Georg   Brandl   贡献 。 ）
返回 一个 片段 ， 该 片段 由 原始 片段 中 的 每个 采样 值 加上 偏差 组成
现在   " PyGC _ Head "   结构 是 不 透明 的
3.2   新版 功能 .
[ 1 ]   " % u "   无 符号 整型   相当于   " printf ( " % u " ) "
将 此 模块 中 定义 的 常量 的 数值 映射 回 名称 字符串 的 字典 ， 允许 生成 更加 人类 可读 的 解析 树 表示
formatter _ class   用于 自定义 帮助 文档 输出 格式 的 类
3.7   新版 功能 .
这 两个 id 属于 之前 创建 的 不同 整数 对象 ， 并 在 执行   " id ( ) "   调用 后 立即 删除
resolution   ：   以 秒 为 单位 的 时钟 分辨率 （   " float "   ）
对于 这些 对象 ， 应 改用   " file . write ( ... ) "
由于 它 使用   " tkinter "   实现 基本 图形界面 ， 因此 需要 安装 了   Tk   支持 的   Python   版本
对于   Python ， 接口 规范 的 许多 好处 可以 通过 组件 的 适当 测试 规程 来 获得
一点 提示 :   ptype   在 单个 处理器 的   NT   机器 上 为   " ' Uniprocessor   Free ' "   而 在 多个 处理器 的 机器 上 为   " ' Multiprocessor   Free ' "
函数   " DeleteKeyEx ( ) "   通过   RegDeleteKeyEx   这个   Windows   API   函数 实现 ， 该 函数 为   Windows   的 64 位 版本 专属
除了 使用 自动 创建 的 Python 解释器 的 开始 菜单项 之外 ， 您 可能 还 想 在 命令提示符 下 启动 Python
Deprecated   since   version   3.8 ,   will   be   removed   in   version   3.10 :   loop   形参
不过 这个 库 主要 是 由 一系列 的 模块 组成
在   1 / 10   这个 例子 中 ， 相应 的 二进制 分数 是   " 3602879701896397   /   2   55 "   ， 它 很 接近   1 / 10   ， 但 并 不是   1 / 10
decompression   bomb   Decompression   bombs （ 解压 炸弹 ， 又名   ZIP   bomb ） 适用 于 所有 可以 解析 压缩   XML   流 （ 例如   gzip   压缩 的   HTTP   流 或   LZMA   压缩 的 文件 ） 的   XML   库
这 等价 于   Python   表达式   " callable (   args ) "
为了 允许 Python 脚本 中 的 shebang 行在 Unix 和 Windows 之间 移植 ， 该 启动器 支持 许多 “ 虚拟 ” 命令 来 指定 要 使用 的 解释器
这 跟 Python 层面 的   " dict . setdefault ( ) "   一样
此 旗标 指明 是否 只 打印 包含 空格 相关 问题 文件 的 文件名
" while "   语句
这个 私有 堆 的 管理 由 内部 的   Python   内存 管理器 （ Python   memory   manager ）   保证
如果   member   是 一个 常规 文件 或 链接 ， 则 会 返回 一个   " io . BufferedReader "   对象
进程 间通信
对于 感应 区域 设置 的 分隔符 ， 请 改用   " ' n ' "   整数 表示 类型
通常 这 意味着 单一 项目 （ 非 列表 ） 消耗 单一 命令行 参数
当   ZIP   文件 需要   ZIP64   功能 但是 未 启用 时会 抛出 此 错误
" Comment "   注释 对象   源 文档 中 注释 的 表示 形式
此 模块 提供 了 将 二进制 数据编码 为 可 打印 的   ASCII   字符 以及 将 这些 编码 解码 回 二进制 数据 的 函数
例如 你 可能 看到 一个 名为   " sys "   的 模块 以及 一个 名为   " email "   的 包 ， 这个 包中 又 有 一个 名为   " email . mime "   的 子 包 和 该子 包中 的 名为   " email . mime . text "   的 子 包
如果   predicate   是   " None " ， 返回 真值 测试 为 false 的 元素
" sys . getcounts ( ) "   函数 ， "   X   showalloccount "   命令行 选项 以及   C   结构 体   " PyConfig "   的   " show _ alloc _ count "   字段 已 被 移除
竖线   ( " | " )   被 用来 分隔 可选项 ； 它 是 此 标注 中 最 灵活 的 操作符
bpo   38117 :   将 绑定 的 OpenSSL 更新 到 1.1 . 1d
这些 模块 用于 实现   " os . path "   模块 ， 除此之外 没有 文档
使用   " asyncio "   模块 进行 异步 等待 ：   参阅   " asyncio . create _ subprocess _ exec "
本 指南 仅 介绍 了 作为 此   CPython   版本 的 一部分 提供 的 创建 扩展 的 基本 工具
如果 按下 的 键 是 一个 特殊 功能键 ， 此 函数 将 返回   " ' \ 000 ' "   或   " ' \ xe0 ' "   ； 下 一次 调用 将 返回 键 代码
在   3.3   版 更改 :   The   policy   keyword   argument   was   added .
" for "   语句
共享内存 块 的 字节 大小 ， 只读 属性
此时 所有 线程 将 被 同时 释放
请参阅 你 的 运行 时 专属 的 文档 了解 实际 引发 的 事件
如果 一个 名称 在 函数 作用域 内 被 标注 ， 则 该 名称 为 该 作用域 的 局部变量
handle _ list   将 被 继承 的 句柄 的 序列
当 样本量 较大 并且 成功 试验 的 可能性 接近   50%   时 ， 正态分布 可以 被 用来 模拟 二项分布
逗号 运算符 的 优先级 是 什么 ？
函数   " PyCapsule _ New ( ) "   接受 一个 名称 形参   ( " const   char   " ) ； 允许 你 传入 一个   " NULL "   作为 名称 ， 但 我们 强烈建议 你 指定 一个 名称
在 某些 情况 下 ，   " isEnabledFor ( ) "   本身 可能 比 你 想要 的 更 消耗 资源 （ 例如 ，   对于 深度 嵌套 的 记录器 ， 其中 显式 级别 仅 在 记录器 层次结构 中 设置 为 高 ）
使用   " nodelay ( ) "   窗口 方法 可以 做到 不 等待 用户
在 验证 例程 运行 期间 将   " digest ( ) "   的 输出 与 外部 提供 的 摘要 进行 比较 时   ， 建议 使用   " compare _ digest ( ) "   函数 而 不是   "   "   运算符 以 减少 定时 攻击 防御力 的 不足
但 实际 情况 并非如此
过程 控制
设置 或 返回 当前 的 剪切 因子
编码器 和 解码器
尽管 这 可能 很 烦人 ， 但此 功能 旨在 用于 特殊 情况 ， 例如 在 多个 上下文 中 执行 相同 代码 的 多线程 服务器 ， 并且 出现 的 有趣 条件 取决于 此 上下文 （ 例如 在 上面 的 示例 中 就是 远程 客户端 IP地址 和 已 验证 用户名 ）
该 地址 会 被 用于 打开 套 接字
Deque   支持 线程 安全 ， 内存 高效 添加 ( append ) 和 弹出 ( pop )   ， 从 两端 都 可以 ， 两个 方向 的 大概 开销 都 是   O ( 1 )   复杂度
控制台   I / O   包括 标准   I / O   ( 详情 见   PEP   528   )
如果 一个 对象 在 一次 垃圾 回收 后 幸存 ， 它会 被 移入 下 一个 较 老代
另外 ，   迭代 对象 应该 是 序列 元素 ， 而 不是 一个   " ( key ,   value ) "   对
换句话说 ， 包含 符号 链接 的 目录 并 没有 被 添加 到 模块 的 搜索 路径 上
" logging "   模块 提供 功能齐全 且 灵活 的 日志 记录 系统
这个 函数 “ 窃取 ” 了 指向   o   的 一个 引用
要 写入 和 解析   plist   文件 ， 请 使用   " dump ( ) "   和   " load ( ) "   函数
如果 没有 调用   " freeze _ support ( ) "   在 尝试 运行 被 冻结 的 可执行文件 时会 抛出   " RuntimeError "   异常
运行   cmd   shell   命令
shebang   lines   还 可以 指定 要 传递 给 Python 解释器 的 其他 选项
该 操作 已 被 取消
如果   stderr   参数 非   " PIPE " ， 此 属性 为   " None "
逻辑 操作数 是 指数 位 与 符号 位均 为 零 的   " Decimal "   实例 ， 并且 其 数字 位均 为   " 0 "   或   " 1 "
这里 展示 的 方法 是 定义   static   扩展 类型 的 传统 方法
概述
例如 ， 下面 的 代码 将 依次 打印   B ,   C ,   D
导入 机制 会 在 加载 期间 会 根据 模块 的 规格 说明 填充 每个 模块 对象 的 这些 属性 ， 并 在 加载 器 执行 模块 之前 完成
也 可 用于   " frozenset "   实例 （ 类似 于   " PyTuple _ SetItem ( ) " ， 它 可 被 用来 为 全新 冻结 集合 在 公开 给 其他 代码 之前 填充 全新 的 值 ）
这个 方法 与   " __ setitem __ ( ) "   类似 ， 不过 你 可以 使用 关键字 参数 为 字 段 提供 附加 参数
这 将 仅 在 提供 了 验证 凭据 时 才能 被 使用
非常 稳定
带 圆括号 的 形式
在 性能 很 重要 的 情况 下 ， 仅仅 为了 排序 而 复制 一份 列表 将 是 一种 浪费
使用 给定 的   mode   打开 已 编码 的 文件 并 返回 一个   " StreamReaderWriter "   的 实例 ， 提供 透明 的 编码 / 解码
每种 操作 都 可以 接受 带符号 的 计数 ，   但是 输出 会 忽略 掉 结果 为 零 或者 小于 零 的 计数
库
DateTime   对象
" bisect "   数组 二分 查找 算法
可变 的 默认值
函数 定义 所在 的 文件名称
基本 实现 会 格式化 记录 以 合并 消息 、 参数 以及 可能 存在 的 异常 信息
在   3.3   版 更改 :   移 除了   strict   参数
在   3.6   版 更改 :   max _ length   可 用作 关键字 参数
" _ random "   模块 包含 基于   http : / / www . math . sci . hiroshima   u . ac . jp / ~ m   mat / MT / MT2002 / emt19937ar . html   下载 的 代码
用于 函数 的   C   结构 体
另 请 注意 ， KDE   2 的   konqueror   命令 ， 会 使用 名称   “ kfm ”   此 实现 选择 运行 的   Konqueror   的 最佳 策略
互联网 访问
3.3   新版 功能 :   This   error   used   to   be   a   subtype   of   " IOError " ,   which   is   now   an   alias   of   " OSError " .
自 相交 多边形 或 多个 形状 间 的 重叠 区域 是否 填充 取决于 操作系统 的 图形 引擎   、 重叠 的 类型 以及 重叠 的 层数
关联 值 通常 会 作为 参数 被 传递 给 异常 类 的 构造 器
在 尝试 优化 任何 代码 前   ， 应 始终 找到 程序 中 的 热点 （ 请参阅   " profile "   模块 ）
忽略 所有   " PYTHON   "   环境变量 ， 例如 可能 已 设置 的   " PYTHONPATH "   和   " PYTHONHOME "
" UserDict "   对象
字典 是 如何 在 CPython 中 实现 的 ？
在   3.6   版 更改 :   接受 一个 类 路径 对象
格式化 程序 对象 配置 日志 消息 的 最终 顺序 、 结构 和 内容
RFC   3548   编码 的 目的 是 使得 二进制 数据 可以 作为 电子邮件 的 内容 正确 地 发送 ， 用作   URL   的 一部分 ， 或者 作为   HTTP   POST   请求 的 一部分
源码 :   Lib / concurrent / futures / thread . py   和   Lib / concurrent / futures / process . py
文本框 的 编辑 光标 在 初始 时 位于 包含 窗口 的 左上角 ，   坐标值 为   " ( 0 ,   0 ) "
这是 一个 非标准 的 快捷 方法 ， 它会 调用   " cursor ( ) "   方法 来 创建 一个 游标 对象 ， 并 使用 给定 的   parameters   参数 来 调用 游标 对象 的   " execute ( ) "   方法 ， 最后 返回 这个 游标 对象
sminrow   ,   smincol   ,   smaxrow   和   smaxcol   指定 要 在 屏幕 中 显示 的 矩形 的 边
自定义 管理器
结构 体 和 联合 中是 可以 包含 位域 字 段 的
3.3   新版 功能 .
名称   意义   POSITIONAL _ ONLY   Value   must   be   supplied   as   a   positional   argument
如果 你 对   logging   不太熟悉 的话 ，   掌握 它 最好 的 方式 就是 查看 它 对应 的 教程 （ 详见 右侧 的 链接 ）
屏蔽 取消 操作
3.9   新版 功能 .
十进制 对象 通常 不能 与 浮点数 或   " fractions . Fraction "   实例 在 算术 运算 中 结合 使用 ： 例如 , 尝试 将   " Decimal "   加 到   " float "   ， 将 引发   " TypeError "
例程
一致性
在   3.7   版 更改 :   x   现在 只能 作为 位置 参数
因为 新 的   " cell   类 "   在   class   语句 结束 之前 还 没有 完成 定义
该 实现 目前 基于 查询 字符串 ， 因此   " AllowUnassigned "   为 真值
处理 日志 处理器 的 阻塞
减少 对象   o   的 引用 计数
示例 :
源代码 :   Lib / linecache . py
返回 两个 复数 的 和 ， 用   C   类型   " Py _ complex "   表示
如果 未指定 ， 则 会 在 默认   NIS   域 中 查找
在   3.4 . 2   版 更改 :   为了 与   " is _ multipart ( ) "   方法 一致 ， is _ attachment   现在 是 一个 方法 ， 不再 是 属性 了
使用 屏幕 事件
如果   Unicode   缓冲区 指针 为   " NULL " ， 则 长度 将 被 忽略   ， 并 返回   " None "
同时 可以 参阅 扩展 和 嵌入   Python   解释器   ， 其中 描述 了 扩展 编写 的 一般 原则 ， 但 没有 详细描述   API   函数
Clock   ID   常量
" xml . etree . ElementTree "   不会 扩展 外部 实体 并 在 实体 发生 时 引发   " ParserError "
3.5   新版 功能 .
文本   Specifies   a   text   to   be   displayed   in   the   tab
应用程序 需要 为   " OSError "   异常 做好 准备
在   POSIX   系统 中此 方法 会 发送   " signal . SIGTERM "   给子 进程
In   addition   to   the   examples   below ,   more   examples   are   given   in   HOWTO   使用   urllib   包 获取 网络资源 .
如果   p   是 一个   " set "   对象 、 " frozenset "   对象 或者 是 其子 类型 的 实例 则 返回 真值
将 当前 策略 的 子 监视器 设置 为   watcher
失败 时 返回 非零值 并 设置 一个 异常
（   由   Zackery   Spytz   在   bpo   33262   中 贡献 。 ）
必须 由 一个   asynchronous   iterator   对象 的   " __ anext __ ( ) "   方法 来 引发 以 停止 迭代 操作
相反 ，   " Handler "   类 是 一个 基类 ， 它 定义 了 所有 处理程序 应该 具有 的 接口 ， 并 建立 了 子类 可以 使用   （ 或 覆盖 ） 的 一些 默认 行为
对于 无法 在 （ 二进制 ） plist   文件 中 表示 的 整数 值 ， 将会 引发   " OverflowError "
测试
" statistics "   数学 统计 函数
对于 给定 的 精度   " p   >   1 " ， 这会 将 数值 舍入 到   " p "   位 有效数字   ， 再 将 结果 以 定点 格式 或 科学 计数法 进行 格式化 ， 具   体 取决于 其值 的 大小
bpo   28791 :   更新   Windows   构建 以 使用   SQLite   3.21 . 0 .
当   " multiprocessing "   初始化 时 ， 主 进程 使用   " os . urandom ( ) "   分配 一个 随机 字符串
" ArgumentParser "   通过   " parse _ args ( ) "   方法 解析 参数
3.4 . 3   的 变化
现在 此 方法 会 与   " " " . replace ( " " ,   s ) "   保持一致
让   " utcoffset ( None ) "   返回 标准   UTC   时差 也许 会 更 有 用处 ， 因为 并 没有 其他 可 用于 发现 标准 时差 的 约定 惯例
在   3.0   版 更改 :   校验 结果 始终 是 无 符号 类型 的
data   中 的 最小值 会 被 作为 第   0   个 百分位 而 最大值 会 被 作为 第   100   个 百分位
该 上下文 管理器 是   reentrant
当 执行命令 行 解析 时   ， 参数值 将 被 检查 ， 如果 参数 不是 可 接受 的 值 之一 就 将 显示 错误 消息 :
这些   type   的 值 表示 数据 的 类型   ， 会 是 以下 字符串 之一 ：   " ' aifc ' " ,   " ' aiff ' " ,   " ' au ' " ,   " ' hcom ' " ,   " ' sndr ' " ,   " ' sndt ' " ,   " ' voc ' " ,   " ' wav ' " ,   " ' 8svx ' " ,   " ' sb ' " ,   " ' ub ' " ,   or   " ' ul ' "
只 定义 了 一个 异常 ：
3.8   新版 功能 .
无限 和   NaN   数值 是 被 接受 并 输出 ；
正如 你 所 看到 的 ， " finally "   子句 在 任何 情况 下 都 会 被 执行
按照 默认 的 一致性 比较 行为 ， 具有 不同 标识号 的 实例 总是 不 相等 ， 这 可能 不 适合 某些 对象 值 需要 有 合理 定义 并 有 基于 值 的 一致性 的 类型
该 属性 的 默认值 为   1 ， 表示 每次 调用 将 获取 单独 一行
请 注意 ， 每个 断点 都 分配 有 一个 编号 ， 其他 所有 断点 命令 都 引用 该 编号
互联网协议 和 支持
个性化 字符串 长度 （ 构造 器所 接受 的 最大 长度 ）
使用 事件   " onclick ( ) "   当鼠标 点击   " onrelease ( ) "   当鼠标 释放   " ondrag ( ) "   当鼠标 拖动
等价 于 :
时 区 常量
此 方法 对于 显式 附件   (   Content   Disposition :   attachment   )   和   " inline "   附件   (   Content   Disposition :   inline   )   均 可 使用 ， 只须 向   " content _ manager "   传入 适当 的 选项 即可
PEP   341 :   统一   try / except / finally
salt   应当 为 适当 来源 例如   " os . urandom ( ) "   的 大约   16   个 或 更 多 的 字节 串 数据
" lambda "   接受 一组 参数 以及 组合 这些 参数 的 表达式 ， 它会 创建 一个 返回 表达式 值 的 匿名 函数 :
不同 位置 的 元素 是 不同 的 ， 即使 它们 的 值 相同
包含 四个 字 段 ：
Python   专属 的 编码 格式
实际上 捕获 异常 是 昂贵 的
这是   " KeyError "   的 一个 子类
代理 对象 使用 了 一个 弱 引用 回调 函数 ， 当 它 被 垃圾 回收 时 ， 会 将 自己 从 拥有 此 指涉 对象 的 管理器 上 反 注册 ，
3.8   新版 功能 .
弹 出 一个 对话框 窗口 用来 输入 一个 数值
传入 超过 这个 值 的   timeout   会 抛出   " OverflowError "   异常
搜索 和 替换
name   是   COM   方法 的 名称
当 程序 退出 时 ， 它会 调用 所有   " atexit "   为 真值 的 剩余 存活 终结 器
3.4   新版 功能 .
非法 查找
tottime   在 指定 函数 中 消耗 的 总 时间 （ 不 包括 调用 子函数 的 时间 ）
Python   3.5 . 4   正式版
填充 解析器
如果 这个 调用 熬出 了 异常 ， 则 这个 异常 会 被   " _ callmethod ( ) "   透传 出来
" ImproperConnectionState "   的 一个 子类
3.3   新版 功能 .
发布 日期 :   2016   10   10
库
添加 了   policy   关键字
" % c "   本地化 的 适当 日期 和 时间 表示
3.4   新版 功能 :   keyword   only   实参   default
Mock 支持   Python   魔术 方法
有 哪些 Python 的 GUI 工具 是 某个 平台 专用 的 ？
[ 1 ]   可 选 参数   dialect   是 用于 不同 的   CSV   变种 的 特定 参数 组
注解 :
其他 模块 级 更改
" imghdr "   推测 图像 类型
解释器 的 改进 :
在   3.4   版 更改 :   添加 了   " ' x ' "   ( 单独 创建 )   模式
3.2   新版 功能 :   此 函数 与   " getLogRecordFactory ( ) "   一起 提供 ， 以便 允许 开发者 对 如何 构造 表示 日志 记录 事件 的   " LogRecord "   有 更好 的 控制
已弃 用 的   C   API   函数 和 类型
进程 池
对于 符号 链接 ， 则 将 在   dst   之下 或 以 其 本身 为 名称 创建 一个 指向   src   目标 的 新 符号 链接 ， 并且   src   将 被 移除
API   和   ABI   版本 管理
成功 返回   " 0 "   失败 返回   "   1 " ； 将 设定 相应 的 异常
（ 由   Pablo   Galindo   在   bpo   33083   中 贡献 。 ）
实际上 ， Python   中 的 任何 序列 类型 ， 比如 字符串 ， 都 自动 支持 创建 迭代 器
运行 ...   定制 与 运行 模块 相同 ， 但 使用 自定义 设置 运行 该 模块
要 在 面板 中 显示 的 矩形 的 右下角 是 根据 屏幕 坐标 计算出来 的 ， 由于 矩形 的 大小 必须 相同
PEP   371 :   多任务处理 包
为 表达 一个 同 类型 元素 的 变长 元组 ， 使用 省略号 字面 量 ， 如   " Tuple [ int ,   ... ] "
字符串 的 方法
相当于   " get ( False ) "
引发 一个 审计 事件   " import "   附带 参数   " module " ,   " filename " ,   " sys . path " ,   " sys . meta _ path " ,   " sys . path _ hooks "
参见 :
根 日志 小节 的 例子 如下 所示
对于 时间 对象   t   ,   " str ( t ) "   等价 于   " t . isoformat ( ) "
此 函数 总是 会 成功 执行
如果   incremental   为   " True "   则 该 省会 被 忽略
Python   中 的   " for "   语句 并 不 总是 对 算术 递增 的 数值 进行 迭代 （ 如同   Pascal ） ， 或是 给予 用户 定义 迭代 步骤 和 暂停 条件 的 能力 （ 如同   C ） ， 而是 对 任意 序列 进行 迭代 （   例如 列表 或 字符串 ） ， 条 目的 迭代 顺序 与 它们 在 序列 中 出现 的 顺序 一致
numlines   默认 为   " 5 "
正则表达式 编译器 对 正则 进行 一些 分析 ， 以 加快 寻找 匹配 的 过程
当 一个 任务 在 事件 循环 中 运行 时 ， 没有 其他 任务 可以 在 同一个 线程 中 运行
它 由   The   Qt   Company   发布 ， 旨在 提供 一个 完整 的 用于   Qt   5   的   PySide   移植版
参考 指南
这些 方法 具有 与 它们 在   " Logger "   中 的 对应 方法 相同 的 签名   ， 因此 你 可以 互换 使用 这 两种 类型 的 实例
Windows   专属 的 改变
某些 标识符 类   ( 除了 关键字 )   具有 特殊 的 含义
为什么 Python 对 某些 功能 （ 例如 list . index ( ) ） 使用 方法 来 实现 ， 而 其他 功能 （ 例如 len ( List ) ） 使用 函数 实现 ？
[ 1 ]   " % i "   整型   相当于   " printf ( " % i " ) "
用户 定义 的 对象 可 通过 定义   " __ getitem __ ( ) "   方法 来 支持 抽取 操作
如果 函数 定义 中 没有   " / " ， 则 表示 没有 仅限 位置 形参
" Element . findall ( ) "   仅 查找 当前 元素 的 直接 子 元素 中 带有 指定 标签 的 元素
从 命令行 运行 此 模块 将 生成 以下 输出 ：
否则 ， 使用 模块 的 默认 格式 器
如果   self   为 存活 状态 则 将 其 标记 为 已 死亡 ， 并 返回 元组   " ( obj ,   func ,   args ,   kwargs ) "
未 写入 文档 的   " sys . callstats ( ) "   函数 已 被 移除
（ 由   Antoine   Pitrou   在   bpo   32388   中 贡献 。 ）
参数   value   是 校验 时 的 起始值 ， 其 默认值 为   0
发布 日期 :   2017   03   04
如果 指定 ，   env   必须 提供 所有 被子 进程 需求 的 变量
将   " PyFrame _ GetLineNumber ( ) "   添加 到 受限 的   C   API
将 关联 到 窗口 的 所有 数据 写入 到 所 提供 的 文件 对象
其他 函数
源代码 ：   Lib / base64 . py
（ 由   Raymond   Hettinger   贡献 。 ）
statistical   bootstrapping   的 示例 ， 使用 重新 采样 和 替换 来 估计 一个 样本 的 均值 的 置信区间 :
有关   Unicode   字符串 模式 的 序列 和 扩展 类 定义 的 完整 列表 ， 请参阅 标准 库 参考 中 的 最后 一部分 正则表达式 语法
发布 版未受 影响
结果 是 近似 的 ， 因为 二进制 浮点数 是 一个 近似值 ， 不 可能 以 2 为 基数 来 表示 出 所有 实数
而 它 等价 于
虽然 这种 技巧 很 流行 ， 但 想要 用 好 却 并 不 容易 ， 最好 是 只 保留 在 少数 情况 下 采用 ， 例如 极耗 内存 的 应用程序 ， 并且 其中 包含 大量 实例
这会 使得   " NULL "   返回 码 有些 歧义   ； 请 使用   " PyCapsule _ IsValid ( ) "   或   " PyErr _ Occurred ( ) "   来 消除 歧义
元素 从 一个   iterable   被 计数 或 从 其他 的   mapping   ( or   counter ) 初始化   ：
要 实现 一个 新 的 事件 循环 策略 ， 建议 子 类化   " DefaultEventLoopPolicy "   并 重写 需要 定制 行为 的 方法 ， 例如 :
SWIG 将 为 你 处理 所有 蹩脚 的 细节
否则 返回   " 0 "
实例 将 使用 整个 消息 的 格式 字符串 以及 消息 的 日期 / 时间 部分 的 格式 字符串 进行 初始化
" site "   — —   指定 域 的 配置 钩子
DTDHandler   对象
成功 时 返回   o   转换 为   Python   int   类型 后 的 结果 ， 失败 时 返回   " NULL "   并 引发   " TypeError "   异常
参见 上下文 管理器 类型 的 定义
（ 已知 在   Unix   上 可行 但 在   Windows   上 不 可行 。 ）   可选 的   timeout   参数 以 一个 浮点数 表示 超时 秒数
这个 探针 点 是   " python . function . return "   的 反义 操作 ， 表示 一个   Python   函数 的 执行 已经 结束 （ 或是 通过   " return " ， 或是 通过 异常 ）
此 模块 提供 用于 表示 解析 树 内部 节点 数值 的 常量
代表   C   " float "   数据类型
新 的 文件 描述符 现在 是 不可 继承 的
如果 未 提供   t   ， 则 会 使用   " localtime ( ) "   所 返回 的 当前 时间
" "   Zero " "   ， 指示 该 运算 数是 负零
此外 ， 我们 还 提供 了 以下 宏集 用于 直接 调用   Python   内存 分配器 ， 而 不 涉及 上面 列出 的   C   API   函数
参数 :   name   用于 记录 由此   LogRecord   所 表示 的 事件 的 日志 记录器 名称
如果 该 字符 设置 了 元 比特 位   ( 0x80 ) ， 元 比特 位会 被 去除 ， 应用 以上 规则 后 将 在 结果 之前 添加   " ' ! ' "
当 没有 引发 任何 异常 时 它 就 相当于   " ALL _ COMPLETED "
该 函数 未 被 写入 文档 ， 自   Python   3.3   起 就 已弃 用
核心 与 内置
它们 在 下次 自定义 运行 时会 再次 显示 在 窗体 中
这 与 使用 类   " C "   的 原始 示例 具有 相同 的 问题
返回 的 列表 保证 是 一个 新 对象
在实践中 ， 显式 地 告诉   curses   来 重绘 一个 窗口 并 不会 太 复杂化   curses   编程
解码   input   文件 的 内容 并 将 已 解码 二进制 数据 结果 写入   output   文件
Java   的   Thread   类 的 静态方法 在 实现 时会 映射 为 模块 级 函数
定制 模块
命令行 与 环境
默认 情况 下   ， " copy2 ( ) "   将 被 使用 ， 但 任何 支持 同样 签名 （ 与   " copy ( ) "   一致 ） 都 可以 使用
在 某些 平台 上 ， 可选 的 字 段 宽度 和 精度 规范 可以 按照 以下 顺序 紧跟 在 指令 的 初始   " ' % ' "   之后 ； 这 也 不可 移植
语法错误 将 作为 异常 被 报告
这个 方法 只 可以 由   " Executor "   实现 和 单元测试 使用
请参阅   PEP   614   了解 详情
3.9   新版 功能 .
这令 使用   " property ( ) "   作为   decorator   来 创建 只读 的 特征 属性 可以 很 容易 地 实现 :
周 列表 由 七个   " datetime . date "   对象 组成
核心 与 内置
Cmd   例子
" __ path __ "   必须 是 由 字符串 组成 的 可 迭代 对象 ， 但 它 也 可以 为空
弹出 的 栈顶 元素 包含 一个 由键 构成 的 元组   ， 然后 从   " TOS1 "   开始 从 构建 字典 的 值 中弹 出   count   个值
这 使得 索引 列表   " a [ i ] "   的 操作 成本 与 列表 的 大小 或 索引 的 值 无关
[   脚注   ]
" Process "   和   " threading . Thread "   API   相同
对   " __ spec __ "   的 正确 设定 将 同时 作用 于 解释器 启动 期间 初始化 的 模块
重置 实例
借助 参数   value   可 为 分段 的 输入 计算 校验 值
向 指定 事件 循环 提交 一个 协程
此 函数 用于 打开 和 关闭 日志 系统对 警告 的 捕获
3.5   新版 功能 .
如果 生成器 函数 没有 捕获 传入 的 异常 ， 或 引发 了 另 一个 异常 ， 则 当 可 等待 对象 运行 时该 异常 会 被 传播 给 可 等待 对象 的 调用者
为什么 有 两个   " setLevel ( ) "   方法 ？ 记录器 中 设置 的 级别 确定 将 传递 给 其 处理程序 的 消息 的 严重性
LogRecord   具有 许多 属性 ， 它们 大多数 来自 于 传递 给 构造 器 的 形参
概念
Shell 中 的 用户 输出
一个 字节 序列 ,   或 一个 字符串 ,   如果   " run ( ) "   是 设置 了   encoding   ,   errors   或者   " text   True "   来 运行 的
" grp "   组 数据库
对于   list ,   tuple ,   set ,   frozenset ,   dict   或   collections . deque   这样 的 容器 类型 ， 表达式   " x   in   y "   等价 于   " any ( x   is   e   or   x   e   for   e   in   y ) "
查询 输出 终端 的 尺寸
代理 对象
现在 则 可以 使用 一个 类 层级 属性 来 设置 它 ， 该 属性 默认 为   " " " "   表示 保留 现有 行为 ， 但 可 在   " SysLogHandler "   实例 上 重载 以便 让 实例 不会 为 所 处理 的 每条 消息 添加 标识
初始化 文件
PEP   391   基于 字典 的 日志 配置   PEP   由   Vinay   Sajip   撰写
Mailcap   文件 可用 来 配置 支持   MIME   的 应用 例如 邮件 阅读器 和   Web   浏览器 如何 响应 具有 不同   MIME   类型 的 文件
性能 优化
参见 :
在 其他 情况 下则 只 考虑   " multipart / related "   的 第一个 （ 默认 的 根 ） 部分
如果   preexec _ fn   被 设为 一个 可 调用 对象 ， 此 对象 将 在 子 进程 刚 创建 时 被 调用
增量 式 的 编码器 和 解码器 类 或 工厂 函数
随着 对   Python   2   支持 的 结束 ， 这些 向下兼容 层 已经 被 移除 或 即将 被 移除
正则表达式 语法
不要 直接 调用   " __ del __ ( ) "   — —   应该 由   " __ del __ ( ) "   调用   " close ( ) " ，   并且   " close ( ) "   能 确保 可以 被 同一 对象 多次 地 调用
这个 模块 定义 了 以下 常量 和 函数 ：
当 超时 时间 已到 且 没有 文件 描述符 就绪 时 ， 返回 三个 空 列表
在   3.8   版 更改 :   默认 的   dict _ type   为   " dict " ， 因为 它 现在 会 保留 插入 顺序
如果   seq   为空 ， 则 引发   " IndexError "
返回 指定 模块 的 源代码
“ 编译 过 的 ” Python 文件
对   " freeze _ support ( ) "   的 调用 在 非   Windows   平台 上 是 无效 的
一个 是 Thomas   Heller 的 py2exe （ 仅限 Windows ）
不 在 花 括号 之内 的 内容 被 视为 字面 文本 ， 会不加 修改 地 复制到 输出 中
Serwy   在   bpo   5150   中 贡献 。 ）
（ 由   Victor   Stinner   在   bpo   33725   中 贡献 。 ）
读取 元 数据
如果 你 对   curses   函数 的 细节 行为 有 疑问 ， 请 查看 你 的   curses   实现 版本 的 说明 页面 ， 不论 它 是   ncurses   还是 特定   Unix   厂商 的 版本
如果 所 封包 的 协程 正常 返回 则 该 方法 将 返回   " None "
在   cbreak   模式 （ 有时 也 称为 “ 稀有 ” 模式 ） 通常 的   tty   行 缓冲 会 被 关闭 并且 字符 可以 被 一个 一个 地 读取
" deque "   用法
创建 一个 数组 并 返回 它 的 代理
安装 步骤
3.2   新版 功能 .
引发 一个 审计 事件   " shutil . copyfile "   附带 参数   " src " ,   " dst "
传入 参数
构造 器 的   allow _ no _ value   形参 可 用于 指明 应当 接受 这样 的 值 :
3.9   新版 功能 .
有关 正则表达式 （ 确定性 和 非 确定性 有限 自动机 ） 的 计算机科学 的 详细 解释 ， 你 可以 参考 几乎 所有 有关 编写 编译器 的 教科书
每个 实例 都 有 自己 关联 的   Tcl   解释器
作为 例外 ， 如果 无法 准确 转换 第二个 操作数 ， 则 C 版本 可能 会 引发   InvalidOperation
它 只 在 类 上 可用
要 将 配置 发送到 套 接字 ， 请 读取 配置文件 并 将 其 作为 字节 序列 发送到 套 接字   ， 字节 序列 要 以 使用   " struct . pack ( ' > L ' ,   n ) "   打包 为 二进制 格式 的 四 字节 长度 的 字符串 打头
在   3.6   版 更改 :   在 使用   " ' r ' "   模式 创建 的   ZipFile   或 已 关闭 的   ZipFile   上 调用   " write ( ) "   将 引发   " ValueError "
" msg "   和   " opt "   属性 会 给出 错误 消息 和 关联 的 选项 ； 如果 没有 关联 到 异常 的 特定 选项 ， 则   " opt "   将 为 空 字符串
如果   timeout   是   " None "   ， 则 会 允许 阻塞 的 事件 没有 限制
第三方 工具 ， 如   Cython   、   cffi   、   SWIG   和   Numba   提供 了 更 简单 和 更 复杂 的 方法 来 为   Python   创建   C   和   C   ++   扩展
您 仍然 可以 对   " UserId "   类型 的 变量 执行 所有 的   " int "   支持 的 操作 ， 但 结果 将 始终 为   " int "   类型
虽然   2 . x   也 仍然 被 广泛 使用 ， 但是 它 已经 停止 维护
本 机 大小 和 对齐 方式 是 使用   C   编译器 的   " sizeof "   表达式 来 确定 的
一个 只读 特征 属性 ， 表示 特定 正态分布 的 众数
改变 分类 间隔 自然 会 改变 插件 结果 ：
如果 给定 了   size   ， 则 将 其 作为   size   参数传递 给 流 的   " read ( ) "   方法
datetime   和   time
实例 属性 （ 只读 ） ：
可以 用于 调整 元组 的 大小
你 的 应用程序 能够 查明 屏幕 的 尺寸 ， " curses . LINES "   和   " curses . COLS "   分别 代表 了   y   和   x   方向 上 的 尺寸
此类 的 实例 会 由   " ZipFile "   对象 的   " getinfo ( ) "   和   " infolist ( ) "   方法 返回
针对 特殊 的 目的 ， 还 存在 第二种   mode   格式 :   " ' filemode | [ compression ] ' "
增强 赋值 语句
附加 模块
为 指定 的   useragent   从   " robots . txt "   返回   " Crawl   delay "   形参
如果 没有 可用 的 源 （ 例如 ， 一个 内置 模块 ） ， 则 返回   " None "
bpo   28791 :   更新   OS   X   安装程序 以 使用   SQLite   3.21 . 0 .
例如   " float . as _ integer _ ratio ( ) "   方法 会 将 浮点数 表示 为 一个 分数 :
digestmod   形参 现在 是 必须 的
此 函数 的 运行 速度 比   " mean ( ) "   函数 快 并且 它 总是 返回 一个   " float "
一直 等待 直到   object _ list   中 某个 对象 处于 就绪 状态
当 使用 基于 星期 的 轮换 时 ， 星期一 为   ' W0 ' ， 星期二 为   ' W1 ' ， 以此类推 直至 星期日 为   ' W6 '
" Cursor "   游标 实例 具有 以下 属性 和 方法
这是 一个 便捷 方法 ， 当 使用 如   " __ name __ "   而 不是 字符串 字 面值 命名 父 记录器 时 很 有用
表达式
Python   bytearray   类型 表示 为   " PyTypeObject "   的 实例 ； 这 与 Python 层面 的   " bytearray "   是 相同 的 对象
它 的 作用 方式 很 类似   " parse _ args ( ) "   但 区别 在于 当 存在 额外 参数 时 它 不会 产生 错误
Python   提供 了 两个 通用 迭代 器 对象
异常
如果   object   可 哈希 ， 则 弱 引用 也 为   hashable
lambda   表达式
一次性 设置 上述 所有 参数
参见 :
它 类似 于   " compressobj ( ) "   的 形参 ， 但 可 接受 更大 范围 的 值   ：
（ 由   C . A . M
在   3.9   版 更改 :   If   the   timeout   parameter   is   set   to   be   zero ,   it   will   raise   a   " ValueError "   to   prevent   the   creation   of   a   non   blocking   socket
对   " format ( ) "   方法 的 递归 调用 应当 将 容器 的 附加 条目 添加 到 此 字典 中
但是 ， 这种 方式 不 被 支持 也 不可 移植
如 未指定 模式 则 返回 当前 的 模式
Environment   示例 :
没有 可用 的 记录 锁
工程 标注 法 的 指数 是   3   的 倍数
请参阅   changelog   以 获取 完整 的 更改 列表
原生 加载 / 保存 对话框 .
路径 浏览 在 树状 结构 中 展示   sys . path   目录 、 模块 、 函数 、 类 和 方法
如果   name   不是 已 注册 的 变种 名称 ， 则 抛出   " Error "   异常
任何 在   " as _ completed ( ) "   被 调用 之前 完成 的   future   对象 将 优先 被 生成
" tp _ repr "   处理程序 应该 返回 一个 字符串 对象 ， 其中 包含 调用 它 的 实例 的 表示 形式
与 脚本 相同 ， 调试器 将 暂停 在 待 执行 模块 第一行 前
对于 输入 来说 其 好处 是 “ 所 输入 即 所得 ”
等 号   ( "   " )   用于 给 一个 变量 赋值
如果 列表 的 所有 元素 都 可以 用作 设置 键 （ 即 ： 它们 都 是   hashable   ） ， 这 通常 会 更 快 :
如果 未 被 陷阱 捕获 ， 则 结果 将 取决于 舍入 模式 ， 或者 向下 舍入 为 最大 的 可 表示 有限 数 ， 或者 向上 舍入 为   " Infinity "
当 你 启动 了 这样 一个 窗口 后 ， 就 可以 开始运行 Python 程序 了
全局变量
接受 的 字符串 的 集合 对应 于 被   Python   的   " float ( ) "   构造函数 接受 的 字符串 的 集合 ， 除了   " s "   必须 没有 前导 或 尾随 空格
由于 所有   asyncio   子 进程 函数 都 是 异步 的 并且   asyncio   提供 了 许多 工具 用来 配合 这些 函数 使用 ， 因此 并行 地 执行 和 监视 多个 子 进程 十分 容易
在 支持 必要 的 基于   fd   的 函数 的 平台 上 ， 默认 会 使用   " rmtree ( ) "   的 可 防御 符号 链接 攻击 的 版本
使 查找 器 存储 在   " sys . meta _ path "   中 的 内部 缓存 无效
3.8   新版 功能 .
请 在   Tk   文档 中 查找   focus   指令
源代码 :   Lib / quopri . py
bpo   41425 :   让   tkinter   文档 示例 可 运行
在 参数 前 指定   "   w "   旗标 将 把   HTML   文档 写入 到 当前目录 下 的 一个 文件 中 ， 而 不是 在 控制台 中 显示 文本
当 一个   generator   或   coroutine   函数 返回 时 ， 将 引发 一个 新 的   " StopIteration "   实例 ， 函数 返回 的 值 将 被 用作 异常 构造 器 的   " value "   形参
这是 一个 以   " os . pathsep "   分隔 的 字符串 ， 其中 包含 要 使用 的 时区 搜索 路径
这 应该 很 容易 理解
开发 过程 的 变化
它 的 工作 原理 是 递归 扫描 源代码 以 获取 import 语句 （ 两种 形式 ） ， 并 在 标准   Python 路径 和 源目录 （ 用于 内置 模块 ） 中 查找 模块
这一 特性 有时 会 很 有 用处
具体来说 ， 有 两种 直接 实现 弱 引用 的 对象
包是 一种 通过 用 “ 带点 号 的 模块 名 ” 来 构造   Python   模块 命名 空间 的 方法
" plistlib "   生成 与 解析   Apple   " . plist "   文件
3.1   新版 功能 .
但是 终结 器 最 多 只能 对 回调 函数 发起 一次 调用
否则 ， 将 参数值 放入 空位 进行 填充 （   即使 表达式 为   " None "   也 会 填充 空位 ）
变量名   " None " ， " False " ， " True "   和   " __   debug __ "   无法 重新 赋值 （ 赋值 给 它们 ， 即使 是 属性 名 ， 将 引发   " SyntaxError "   ） ， 所以 它们 可以 被 认为 是 “ 真正 的 ” 常数
外部 函数
parse _ constant   ， 如果 指定 ， 将要 与 以下 字符串 中 的 一个 一同 调用 ：   " '   Infinity ' "   ，   " ' Infinity ' "   ，   " ' NaN ' "
赋值 表达式
库
例如 ， 作用 于   zipfile   库 的 解压缩 炸弹   ( 即   ZIP   bomb )   就 可能 造成 磁盘空间 耗尽
一个 共享内存 块 可能 同时 被 多个 进程 使用 ， 当 一个 进程 不再 需要 访问 这个 共享内存 块 的 时候 ， 应该 调用   " close ( ) "   方法
future   语句 必须 在 靠近 模块 开头 的 位置 出现
" ' , ' "   选项 表示 使用 逗号 作为 千位 分隔符
有关 模块 规格 的 详细 内容 请参阅   " ModuleSpec "
实例 方法 对象 也 具有 属性 :   " m .__ self __ "   就是 带有   " m ( ) "   方法 的 实例 对象 ， 而   " m .__ func __ "   则 是 该 方法 所 对应 的 函数 对象
在 它 之下 则 是 位置 参数 ， 其中 最 右边 的 参数 在 最 顶端
" collections . abc . MutableSet "   的 泛型 版本
这是 多线程 编程 所 固有 的 问题
这是 一个 特殊 的 用例 ， 应该 仔细 考虑
group   应该 始终 是   " None "   ； 它 仅 用于 兼容   " threading . Thread "
如果 在 进入 时 内部 计数器 的 值 大于 零 ， 则 将 其减 一并 立即 返回   " True " .
对于 文件 描述符   fd   返回 一个 包含   tty   属性 的 列表 ， 形式 如下 :   " [ iflag ,   oflag ,   cflag ,   lflag ,   ispeed ,   ospeed ,   cc ] " ， 其中   cc   为 一个 包含   tty   特殊字符 的 列表 （ 每一项 都 是 长度 为   1   的 字符串 ， 索引 号 为   " VMIN "   和   " VTIME "   的 项 除外 ， 这些 字段 如有 定义 则 应为 整数 ）
如果 你 想 用 其它 类型 ， 你 必须 自己 添加 相应 的 支持
文档
ArgumentParser   对象 通常 关联 一个 单独 的 命令行 参数 到 一个 单独 的 被 执行 的 动作
虽然 调用   " peek ( ) "   不会 改变   " BZ2File "   的 文件 位置 ， 但 它 可能 改变 下层 文件 对象 的 位置 （ 举例来说 如果   " BZ2File "   是 通过 传入 一个 文件 对象 作为   filename   的话 ）
C   API   的 变化
如果 重复 给出 ， 则 打印 有关 构建 的 更 多 信息 ， 例如 :
当   FileIO   对象 被 关闭 时此   fd   也 将 被 关闭 ， 除非   closefd   设 为   " False "
客户端 代码 不 应 假定   "   p "   的 结果 值 将 与 调用 此 函数 之前 的 值 相同
它 在   Python   2.7   及 之前 的 版本 中 被 用来 将 对象 打印 到 文件
通过 这个   logger   打印 的 消息 不会 传递 到 根   logger
打印 堆栈 回溯 ， 最新 一帧 在 底部
有关 排序 示例 和 简要 排序 教程 ， 请参阅 排序 指南
如果   " world "   模式 已 激活 ， 则 所有 图形 将 根据 新 的 坐标系 重绘
预期 的 输出 :
密钥 哈希 可 被 用于 身份验证 ， 作为 基于 哈希 的 消息 验证 代码   ( HMAC )   的 一种 更 快速 更 简单 的 替代
执行   Python   信号处理 程序
以下 复合 表达式 会为 外层 函数 生成 一系列 值 :
在   3.7   版 更改 :   " DeprecationWarning "   is   once   again   shown   by   default   when   triggered   directly   by   code   in   " __ main __ " .
如何 调试 扩展 ？
非 线程 安全
如果 该值 无法 确定 则 会 返回 一个 空 字符串
改进 了   " typing "   模块 的 帮助 信息
模块化
当 添加 或 插入 项时 ， 将 调整 引用 数组 的 大小
库
RFC   2045   定义 信息 的 默认 类型 为   text / plain   或   message / rfc822   ， 其中 后者 仅 出现 在 消息 头 位于 一个   multipart / digest   容器 中 的 场合 中
返回 颜色 值   color _ number   中红 、 绿 和 蓝 （ RGB ） 分量 的 强度 ， 此 强度 值 必须 介于   " 0 "   和   " COLORS "   之间
For   more   on   format   units   please   see   语句 解释 及 变量 编译 . )
作者 感谢 以下 人员 对 本文 各种 草稿 给予 的 建议 ， 更正 和 协助 ：   Georg   Brandl ,   Nick   Coghlan ,   Phillip   J
请 注意 通过   " argparse "   模块 可以 使用 更少 的 代码 并 附带 更 详细 的 帮助 与 错误 消息 生成 等价 的 命令行 接口 :
找出 网络 中有 多少 独立 地址 :
例如   mock   可以 通过 设置   spec   参数 来 从 一个 对象 中 获取 其 规格 ( specification )
指定   " 0 "   作为 端口号 将会 任意 选择 一个 未 使用 的 端口
将 最近 一次 获取   " robots . txt "   文件 的 时间 设置 为 当前 时间
第一个 集合 名称 为   " done " ，   包含 在 等待 完成 之前 已 完成 的 期程 （ 包括 正常 结束 或 被 取消 的   future   对象   ）
与 生成器 的   " send ( ) "   方法 一样 ， 此 方法 会 “ 发送 ” 一个 值 给 异步 生成器 函数 ， 其   value   参数 会 成为 当前   yield   表达式 的 结果 值
在 之前 版本 中 ， 相关 语法 则 更为 严格
列表 是   mutable   （ 可变 的   ） ， 并且 列表 中 的 元素 一般 是 同种 类型 的 ， 并且 通过 迭代 访问
参见 :   PEP   370   分 用户 的   site   packages   目录
绝不 要 未经 预先 检验 就 从不 可靠 的 源 中 提取 归档文件
可 选 参数   languages   是 多条 字符串 的 列表 ， 其中 每条 字符串 都 是 一种 语言 代码
3.5   新版 功能 .
流式 编解码器 可以 保持 状态
教程 的 其他 部分 将 通过 示例 介绍 Python 语言 和 系统 中 的 不同 功能 ， 开始 是 比较简单 的 表达式 、 语句 和 数据类型 ， 然后 是 函数 和 模块 ， 最终 接触 一些 高级 概念 ， 比如 异常 、 用户 定义 的 类
" option _ string "   被 用来 发起 调用 此 动作 的 选项 字符串
模块 内容
Refer   to   协程 对象   for   new   types ,   structures   and   functions .
访问 该值 时 ， 将 使用 “ Cell ” 中 包含 的 值 而 不是 单元格 对象 本身
" gettext "   模块 为   Python   模块 和 应用程序 提供 国际化   ( Internationalization ,   I18N )   和 本地化   ( Localization ,   L10N )   服务
在   CPython   里 ， 基于 生成器 的 协程 （ 使用   " types . coroutine ( ) "   或   " asyncio . coroutine ( ) "   包装 的 生成器 ） 都 是 可 等待 对象   ， 即使 他们 不 含有   " __ await __ ( ) "   方法
如果   timeout   没有 指定 或 为   " None " ， 那么 等待时间 就 没有 限制
不应 将 此 模块 的 伪 随机 生成器 用于 安全 目的
更 简单 的 方法 是 提供 批处理 文件 或 生成 的 快捷方式 ， 使用 所 需 的 命令行 参数 直接 调用   " python . exe "   或   " pythonw . exe "
应该 通过 下面 的 方法 使用   " if   __ name __   ' __ main __ ' : "   ， 从而 保护 程序 "   入口 点 " :
发生 错误 时 返回   "   1 "
列表 、 集合 与 字典 的 显示
（ 由于 缺乏 关于 类 的 公认 术语 ， 我会 偶尔 使用   Smalltalk   和   C++   的 用 辞
Cookie   管理
" Process "   类
这个 库 也 包含 了 内置 函数 和 异常 不 需要   " import "   语句 就 可以 在 所有   Python 代码 中 使用 的 对象
" posixpath "   用于 Unix   样式 的 路径
有时 也 可能 需要 限制 允许 的 标识 为 仅 由 “ 可 打印 ” 字符 组成
Python   2.7   是   2 . x   系列 中 的 最后 一个 主 版本 ， 因为 Python   维护 人员 已 将 新 功能 开发 工作 的 重点 转移 到 了   Python   3 . x   系列 中
其他 对象
实际 的 指针 类型 是 通过 调用   " POINTER ( ) "   并 附带 其 将 指向 的 类型 来 创建 的 ；   这会 由   " pointer ( ) "   自动 完成
" tkinter . scrolledtext "   滚动 文字 控件
（ 由   Batuhan   Taskaya   在   bpo   40208   中 贡献 。 ）
例如 ， 如果 想 获取 字节 串   " b ' Nobody   inspects   the   spammish   repetition ' "   的 摘要 :
" PyArg _ ParseTuple ( ) "   会 分配 一个 足够 大小 的 缓冲区 ， 将 编码 后 的 数据 拷贝 进 这个 缓冲区 并且 设置   buffer   引用 这个 新 分配 的 内存空间
请 记住 在 模块 层级 上 ， globals   和   locals   是 同一个 字典
在 支持 符号 链接 的 文件系统 上 ， 包含 输入 脚本 的 目录 是 在 追加 符号 链接 后 才 计算出来 的
比较
此 基类 用于 派生 当 映射 或 序列 所 使用 的 键 或 索引 无效 时 引发 的 异常 :   " IndexError " ,   " KeyError "
添加 了 一个 检测 脚本 用于 对 访问 变量 的 不同 方式 进行 计时 :   " Tools / scripts / var _ access _ benchmark . py "
注解 :
level   是 供 内部 使用 的
此 监视器 会 默认 被 使用
脚本 只是 使用 了 一个 装饰 器来 装饰   " foo " ， 这个 装饰 器 将 记录 执行 所 需 的 条件
如果 一个 指针 指向 的 是 数组 ， 则 其 元素 可 使用 标准 的 抽取 和 切片 方式 来 读写
3.7 . 1   新版 功能 .
如果 大于   1 ， 则 在 为 日志 记录 事件 创建 的   " LogRecord "   中 计算 行号 和 函数 名时 ， 将 跳 过 相应 数量 的 堆栈 帧
在   Python   的 早期 版本 要 单独 使用   " unittest . mock "   ， 在   PyPI   获取   mock
在   3.6   版 更改 :   Added   the   " domain "   attribute .
（ 由   Fredrik   Johansson ,   Victor   Stinner ,   Raymond   Hettinger   和   Mark   Dickinson   在   bpo   3439   中 贡献 。 ）
与   " wait _ for ( ) "   不同 ， " wait ( ) "   在 超时 发生 时 不会 取消 可 等待 对象
用户 自定义 函数 :   函数 的 代码 块 会 被 执行 ， 并 向 其 传入 参数 列表
当 无法 使用 binhex 格式 编码 某些 内容 时 （ 例如 ， 文件名 太长 而 无法 放入 文件 名字 段 中 ） ， 或者 输入 未 正确 编码 的 binhex 数据 时 ， 会 引发 异常
当 提供 一个 推导 式 时 ， 列表 会 根据 推导 式 所 产生 的 结果 元素 进行 构建
这 给出 了 一个 关于   " count "   动作 的 效果 的 演示
标准 警告 类别
输入 和 输出 都 可以 是 0 或者 负数
格式 字符
如果   lock   为   " True "   ( 默认值 )   则 将 创建 一个 新 的 锁 对象 用于 同步 对值 的 访问
name   为 格式 名称 而   extensions   为 对应 于 该 格式 的 扩展名 列表 ， 例如   Zip   文件 的 扩展 名为   " . zip "
添加   HTTP   状态 码   " 103   EARLY _ HINTS " ,   " 418   IM _ A _ TEAPOT "   和   " 425   TOO _ EARLY "   到   " http . HTTPStatus "
新增 模块
如果 加载 器 不能 找到 请求 的 模块 ， 则 引发   " ImportError "   异常
这是 一个 便利 函数 ， 它 反复 调用   " timeit ( ) "   ， 以便 总 时间   >   0.2   秒 ，   返回 最终 （ 循环 次数 ， 循环 所用 的 时间 ）
它 应该 返回 该 对象 的 一个 可以 被   JSON   编码 的 版本 或者 引发 一个   " TypeError "
当   future   对象 被 取消 或 完成 运行 时 ， 将会 调用   fn   ， 而 这个   future   对象 将 作为 它 唯一 的 参数
Python   3.5 . 0   正式版
" transport . get _ pipe _ transport ( ) "   返回 请求 通信 管道   (   stdin   ,   stdout   ,   或   stderr   )   的 传输
delimiters   ， 默认值 :   " ( '   ' ,   ' : ' ) "
将   x   插入 到 一个 有序 序列   a   里 ， 并 维持 其 有序
在   Unix   上 ， 当   Python   以 调试模式 构建 时 ， 导入 操作 现在 也 会 查找 在 发布 模式 下 编译 的   C   扩展 以及 使用 稳定版   ABI   编译 的   C   扩展
可以 提供   description   来 描述 该 格式 ， 它 将 被   " get _ unpack _ formats ( ) "   返回
bpo   35504 :   修复 了 在 删除 特定 属性 时 的 段 错误 和   " SystemError "   问题
" array ( ' u ' ) "   现在 使用   " wchar _ t "   作为   C   类型 而 不是   " Py _ UNICODE "
这些 导入 使用 前导 点来 指示 相对 导入 中 涉及 的 当前 包和父 包
在   3.8   版 更改 :   如果 在 Windows   上   shell   为   " False "   并且 序列 包含 字节 串 和 路径 类 对象 则   args   形参 可以 接受 一个   path   like   object
如果 减到 零 ， 则 将 锁 重置 为 非 锁定 状态 ( 不 被 任何 线程 拥有 ) ， 并且 ， 如果 其他 线程 正 被 阻塞 着 等待 锁 被 解锁 ， 则 仅 允许 其中 一个 线程 继续
刷新 所有 输入 缓冲区
如果   " utcoffset ( ) "   返回值 不 为   " None " ， 则   " dst ( ) "   也 不应 返回   " None "
如果   " ( i ,   j ,   n ) "   和   " ( i ' ,   j ' ,   n ' ) "   是 在 列表 中 相邻 的 三元组 ， 且 后者 不是 列表 中 的 最后 一个 三元组 ， 则   " i + n   <   i ' "   或   " j + n   <   j ' " ； 换句话说 ， 相邻 的 三元组 总是 描述 非 相邻 的 相等 块
这 是 由 通用 十进制 算术 规范 描述 所 定义 的 标准 上下文
下面 的 代码 连接 到 服务 然后 从 服务器 上 j 接收 一些 数据 :
PEP   273 :   从 ZIP 压缩包 导入 模块
较 老 版本 的   SQLite   在 共享 线程 之间 存在 连接 问题
当未 完成 计数 降到 零 的 时候 ，   " join ( ) "   阻塞 被 解除
返回 一个   iterator   对象
" imaplib . IMAP4 . unselect ( ) "   会 释放 关联 到 选定 邮箱 的 服务器资源 并 将 服务器返回 到 已 认证 状态
表示 整数 的 最大 字符 数量
如果 你 想 使用 自己 设计 的 不同 基础 生成器 ， 类   " Random "   也 可以 作为 子类 ： 在 这种 情况 下 ， 重载   " random ( ) "   、   " seed ( ) "   、   " getstate ( ) "   以及   " setstate ( ) "   方法
它 仅 对 与   " global "   语句 同时 被 解析 的 代码 起 作用
" C "   ( " str "   长度 为   1 )   [ int ]   将 一个   C   " int "   整型 代表 的 字符 转化 为   Python   " str "   长度 为   1   的 字符串 对象
这个 方法 每个 进程 对象 最 多 只能 调用 一次
默认 转换器 使用 的 注册 名称 是 针对   " datetime . date "   的   " date "   和 针对   " datetime . datetime "   的   " timestamp "
如果 回调 不 存在 或弱 引用 的 被 引用 对象 已 不 存在 ， 则 此 属性 的 值 为   " None "
“ 编译 过 的 ” Python 文件
通常 ， 不要 使用   " from   modulename   import   "
如果   ensure _ ascii   是   false ， 这些 字符 会 原样 输出
测试
修改   " itertools . ifilter ( ) " ， " itertools . izip ( ) "   和   " itertools . imap ( ) "   的 调用 为 对应 的 内建 实现
结果 值会 按 从 右 至 左 的 顺序 入栈
TurtleScreen / Screen   方法
可以 给 指针 内容 赋值 为   None   将 其 设置 为   " Null "
不 在 这个 月 的 日子 为 0
（ 如果 可能 ）   " open ( ) "   将 使用 文件 的 blksize （ 由   " os . stat ( ) "   获得 ）
描述 特定 编解码器 错误 的 字符串
strict   ， 默认值 :   " True "
从 某个 注册 键中 删除 一个 命名 值项
适用 于 Windows 的 Python 启动器 将 根据 第一页 底部 的 选项 安装
在 非   Windows   平台 上 ， 创建   " bdist _ wininst "   安装 器 现在 已不受 官方 支持
文本   I / O
parse _ args ( )   方法
对于 需要 从 大量 可能性 中 进行 选择 的 情况 ， 可以 创建 一个 字典 ， 将 case   值 映射 到 要 调用 的 函数
该 例程 返回 解压缩 的 数据 ， 输入 数据 以 孤立 的 重复 指示 符 结束 的 情况 下 ， 将 引发   " Incomplete "   异常
异常 层次结构
这个 修复器 是 可选 的 ， 因为   " memoryview "   API   和   " buffer "   很 相似 ， 但 不 完全 一样
数据 类 不会 使用 它们
例如 ，   " foo / bar . zip / lib "   的   archivepath   将 在   ZIP   文件   " foo / bar . zip "   中 的   " lib "   目录 中 查找 模块   （ 只要 它 存在 ）
一个   bytes   对象 ， 其中 包含 未 被 上 一次   " decompress ( ) "   调用 所 消耗 的 任何 数据
参见 :
类 实例 :   该类 必须 定义 有   " __ call __ ( ) "   方法 ； 作用 效果 将 等价 于 调用 该 方法
与   " redirect _ stdout ( ) "   类似 ， 不过 是 将   " sys . stderr "   重定向 到 一个 文件 或类 文件 对象
模拟 函数调用
请 注意 分派 是 作用 于 第一个 非   self   或非   cls   参数 的 类型 ， 要 相应 地 创建 你 的 函数 :
粘贴 插入 系统 剪贴板 的 内容 至 当前 窗口
当 使用 管道 时请 使用   " communicate ( ) "   方法 来 避免 这种 情况
提供 面向 屏幕 的 方法 例如   " setbg ( ) "   等
配置   名称   PyMem _ RawMalloc   PyMem _ Malloc   PyObject _ Malloc   发布 版本   " " pymalloc " "   " malloc "   " pymalloc "   " pymalloc "   调试 构建   " " pymalloc _ debug " "   " malloc "   debug   " pymalloc "   debug   " pymalloc "   debug   没有   pymalloc   的 发布 版本   " " malloc " "   " malloc "   " malloc "   " malloc "   没有   pymalloc   的 调试 构建   " " malloc _ debug " "   " malloc "   debug   " malloc "   debug   " malloc "   debug
参见 :   " hashlib "   模块 的 文档
默认值 为   " " year " "
Windows   专属 的 改变
功能 和 方法 具有 相同 的 签名
（ 由   Nadeem   Vawda   和   Per   Ø yvind   Karlsen   在   bpo   6715   中 贡献 。 ）
当 初始化   " TZPATH "   时 （ 在 导入 时 或 不带 参数 调用   " reset _ tzpath ( ) "   时 ） ，   " zoneinfo "   模块 将 使用 环境变量   " PYTHONTZPATH " ， 如果 变量 存在 则 会 设置 搜索 路径
由于 有些 程序 可能 依赖于 这些 ， 你 应当 只 在 清楚 自己 在 做 什么 时才 使用 这个 选项
标准 的   Python   GUI   工具包 是   " tkinter "   ， 基于 跨平台 的   Tk   工具包 （   https : / / www . tcl . tk   ）
用于 描述 内存 块 分配器 的 结构 体
比如 某些 情况 下 需要 从类 主体 引用 函数 并且 您 希望 避免 自动 转换 为 实例 方法
如果 你 有 任何 内置 处理程序 类未 满足 的 特殊要求 ，   则 可以 创建 自己 的 日志 目标 类
" html "   包中 的 子 模块 是 ：
在   3.6   版 更改 :   接受 一个 类 路径 对象
例如 :
" __ members __ "   属性 可 被 用于 对 枚举 成员 进行 详细 的 程序化 访问
在   3.3   版 更改 :   已 添加   write _ through   参数
对 完整 格式 代码 集 的 支持 在 不同 平台 上 有所 差异 ， 因为   Python   要 调用 所在 平台 的   C   库 的   " strftime ( ) "   函数 ， 而 不同 平台 的 差异 是 很 常见 的
移植 到 Python   2.5
" a   b "   矢量 减法
3.6   新版 功能 .
从文件 读取 的 参数 在 默认 情况 下 必须 一个 一行 （ 但是 可 参见   " convert _ arg _ line _ to _ args ( ) " ） 并且 它们 被 视为 与 命令行 上 的 原始 文件 引用 参数 位于 同一 位置
如果 是 设置 在 配置文件 中 ， 则 它 可 被 命令行 设置 重载 ； 如果 在 命令行 中将 其设 为 空 字符串 则 将 会 使用 默认值
由于 记录 发送至   Web   服务器 所 需 的 预处理 与 通用 的 格式化 操作 不同 ， 使用   " setFormatter ( ) "   来 指定 一个   " Formatter "   用于   " HTTPHandler "   是 没有 效果 的
disable _ existing _ loggers   是否 要 禁用 任何 现有 的 非根 日志 记录器
混合 解析
负值 意味着 不 限制 历史 文件 的 大小
使用 非 数据 描述 器 ， 纯   Python   版本 的   " staticmethod ( ) "   如下 所示 ：
通常 的 修复 方法 是 等待 协程 或者 调用   " asyncio . create _ task ( ) "   函数 :
coroutine   协程 协程 是 子 例程 的 更 一般 形式
模板 对象 有 以下 方法 :
持久 化 外部 对象
在   3.8   版 更改 :   在   Windows   上将 不会 再 在 移除 连接 之前 删除 目录 连接 中 的 内容
尽管 这种 方式 的 误差 通常 小于 时钟 的 精度 （ 小于 一个 时钟 周期 ） ， 但 它 可以 累积 并 变得 非常 可观
字符串 不 区分 大小写
3.7   新版 功能 .
设置 并 返回   " returncode "   属性
第三 ， 记录器 对象 将 相关 的 日志 消息传递 给 所有 感兴趣 的 日志 处理程序
值 从 当前 迭代 器 的 位置 0 被 取出 并 暂存 ( yield )
栅栏 类 提供 一个 简单 的 同步 原语 ， 用于 应对 固定 数量 的 线程 需要 彼此 相互 等待 的 情况
它 不是   " TextIOBase "   API   的 组成部分 并且 不 存在 于 某些 实现 中
冒号 主要 用于 增强 可读性 ( AB C语言 实验 的 结果 之一 )
加入 更 多 数字 的 ABC
在 此例 中 ， 模块 可以 被 安全 地 导入 ， 而 不会 对 模块 搜索 路径 和 内建 对象 有 自动 的 修改 或 添加
当然 ， 对 每个 要 导出 的 函数 ， 基本 结构 是 相似 的 ， 所以 只 需要 学习 一次
警告
不再 显示 当前 帧 中 的 表达式
警告
最 常见 的 原因 是 ， 那个 绑定 的 控件 没有 “ 键盘 焦点 ”
你 不 需要 子 类化 解析器 来 使用 此 方法 ， 你 也 可以 在 一个 实例 上 设置 它 ， 或 使用 一个 接受 字符串 参数 并 返回 字符串 的 函数
不要 在 多线程 中 同时 使用 一个 代理 对象 ， 除非 你 用 锁 保护 它
参见 :
在   3.9   版 更改 :   现在 会 使用   " math . gcd ( ) "   函数 来 正规化   numerator   和   denominator
替代   " os . system ( ) "
行 对象
在   3.5 . 4   版 更改 .
这样 的 构造 器 可以 是 工厂 函数 或类 实例
在   3.8   版 更改 :   Class   " ast . Constant "   is   now   used   for   all   constants .
函数参数 列表 中 的 斜杠 （ / ） 是 什么 意思 ？
如果 两个 回调 都 发出   EOF   信号 则   spawn   可能 将 永不 返回 ， 除非 在 你 的 平台 上当 传入 三个 空 列表 时   select   会 抛出 一个 错误
（ 注意   const   命名 参数 默认 为   " None " 。 ） ` ` ' append _ const ' ` `   动作 一般 在 多个 参数 需要 在 同一 列表 中 存储 常数 时会 有用
自定义 类 创建
安全
它 是 一个 真正 的   Python   对象 而 不是   " NULL "   指针 ， 如 我们 所 见 ， 后者 在 大多数 上下文 中 都 意味着 “ 错误 ”
输入 几个 表达式 并 看看 结果 ：
如果 设 为   " 1 " ， 则   " Decimal "   实例 的 指数   " e "   的 表示 范围 在 此 上下文 中将 严格 限制 为   " Emin   prec   +   1   <   e   <   Emax   prec   +   1 "
返回 一个 指向 包含 任意 数据 的 只读 内存地址 的 指针
大多数 程序 将 被   args   指定 的 程序 作为 命令 名 对待 ， 这 可以 与 实际 运行 的 程序 不同
概述
method   可以 是   " ' fork ' "   ,   " ' spawn ' "   或者   " ' forkserver ' "
优化 了 多线程 应用 中 的 信号处理
值   The   current   value   of   the   progress   bar
如果 指定 了   " ZIP _ DEFLATED " ,   " ZIP _ BZIP2 "   或   " ZIP _ LZMA "   但 相应 的 模块   ( " zlib " ,   " bz2 "   或   " lzma " )   不可 用 ， 则 会 引发   " RuntimeError "
在   3.8   版 更改 :   增加 了   force   参数
在 窗口 、 子 窗口 或 面板 之外 写入 会 引发   " curses . error "
PEP   545 :   Python   文档 翻译
安全
此 函数 仅当   Python   编译 包 带有 支持 此 功能 的 库 版本 时才 会 存在
编写 设置 脚本 的 配置文件
设置 总帧 数为   n
3.5 . 2   新版 功能 .
它 的 工作 原理 :
函数 标注 语法 的 详解 见 函数 定义 一节
此 模块 的 哈希 对象 遵循 标准 库   " hashlib "   对象 的   API
此 方法 使得 为   " datetime "   对象 指定 以 格式化 字符串 字 面值 表示 的 格式化 字符串 以及 使用   " str . format ( ) "   进行 格式化 成为 可能
复制 复制 选区 至 系统 剪贴板
3.5 . 4   新版 功能 .
示例
这 一行 的 剩下 的 部分 根据 异常 类型 及其 原因 提供 详细信息
" itertools . islice ( iter ,   [ start ] ,   stop ,   [ step ] ) "   返回 一个 所 输入 的 迭代 器 切片 的 数据流
" QueueListener "   类 位于   " logging . handlers "   模块 ， 它 支持 从 一个 队列 接收 日志 记录 消息 ， 例如 在   " queue "   或   " multiprocessing "   模块 中 实现 的 队列
发生 浏览器 控件 错误 时 引发 异常
测试
" types . CodeType "   中 新增 的   " replace ( ) "   方法 可 用于 让 代码 支持   future   特性
从 应用 于 写入 到 当前 窗口 的   " background "   集中 移除 属性   attr
msg   是 消息 格式 字符串 ， 而   args   是 要 使用 字符串 格式化 运算符 合并 到   msg   的 参数
（ 由   Larry   Hastings   在   bpo   5630   中 贡献 。 ）
" profile "   是 一个 纯   Python   模块 （ " cProfile "   就是 模拟 其 接口 的   C   语言 实现 ） ， 但 它 会 显著 增加 配置 程序 的 开销
默认 的 一致性 比较   ( "   "   和   " !   " )   是 基于 对象 的 标识号
" glob "   Unix   风格 路径名 模式 扩展
这么 做 是 为了 因 确保 不 当地 使用   mock   导致 与 生产 代码 相同 的 失败 ：
正则表达式 是 一个 复杂 的 主题
请 注意 你 必须 显式 地 保持 所 返回 的 面板 对象
当 在 函数 或 方法 中 对 某个 局部变量 进行 引用 ， 但 该 变量 并未 绑定 任何 值时 将 被 引发
以下 列出 的 是 提供 对 原地 运算符 相比 通常 语法 更 底层 访问 的 函数 ， 例如   statement   " x   +   y "   相当于   " x   operator . iadd ( x ,   y ) "
这 对 某些 协议 （ 例如   HTTP ） 来说 是 必要 的
示例 :
返回 对象   ob   的 一个 弱 引用 代理 对象
它 解决 了 进程 相互 冲突 导致 文件 描述符 错误 的 根本 问题 ， 但是 对 使用 带 缓冲 的 “ 文件 类 对象 ” 替换   " sys . stdin ( ) "   作为 输出 的 应用程序 造成 了 潜在 的 危险
在   3.5   版 更改 :   Instances   of   " ServerProxy "   support   the   context   manager   protocol   for   closing   the   underlying   transport .
每次 启动   Python ， 在   " . pth "   文件 中 的 可 执行 行都 将 会 被 运行 ， 而 不管 特定 的 模块 实际上 是否 需要 被 使用
" multiprocessing "   基于 进程 的 并行
在   3.3 . 1   版 更改 :   bufsize   现在 默认 为   1   来 启用 缓冲 ， 以 符合 大多数 代码 所 期望 的 行为
代码 对象
[ 2 ]   这 与   Dershowitz   和   Reingold   所著   Calendrical   Calculations   中 “ 预期 格列 高利 ” 历法 的 定义 一致 ， 它 是 适用 于 该书 中 所有 运算 的 基础 历法
（ 由   Neil   Schemenauer   和   Nick   Coghlan   在   bpo   5178   中 贡献 。 ）
按键 绑定
前向 断言 以 正面 和 负面 形式 提供 ， 如下 所示 ：
其他 功能
异常 层次结构
（ 由   Victor   Stinner   在   bpo   35059   中 贡献 。 ）
加载 共享 库 的 类
将 错误 类型 的 对象 传递 给 它们 并 不是 一个 好 主意 ； 如果 您 从   Python   程序 接收 到 一个 对象 ， 但 不 确定 它 是否 具有 正确 的 类型 ， 则 必须 首先 执行 类型 检查 ； 例如 ， 要 检查 对象 是否 为 字典 ， 请 使用   " PyDict _ Check ( ) "
流式 协议
支持 某种 缓冲 的 二进制 流 的 基类
支持 的 XPath 语法
每个 线程 都 有 自己 的 当前 上下文 ， 可 使用   " getcontext ( ) "   和   " setcontext ( ) "   函数 来 读取 或 修改 ：
我们 最初 设置 日志 记录器 的 消息 等级 为   " INFO " ， 因此 消息 # 1 出现 ， 消息 # 2 没有 出现
3.3   新版 功能 .
" pprint "   数据 美化 输出
对于 每次 调用   " get ( ) "   获取 的 任务 ， 执行 完成 后 调用   " task _ done ( ) "   告诉 队列 该 任务 已经 处理 完成
设置 它 意味着   " dis ( ) "   将 针对 指定 的 操作码 显示 “ 当前 指令 ” 标记
在 下列 例子 中 ， 我们 假定 相关 的 函数 都 已 从   " subprocess "   模块 中 导入 了
（ 由   Serhiy   Storchaka   在   bpo   33818   中 贡献 。 ）
创建 一个 定时器 ， 在 经过   interval   秒 的 间隔 事件 后 ， 将会用 参数   args   和 关键字 参数   kwargs   调用   function
对于 第三代 来说 情况 还会 更 复杂 ， 请参阅   Collecting   the   oldest   generation   来 了解 详情
引发 一个 审计 事件   " sqlite3 . connect " ， 附带 参数   " database "
bpo   32593 :   放弃 对   FreeBSD   9   及 更 早 版本 的 支持
Context   实现 了   " collections . abc . Mapping "   接口
Python 运行 时 服务
高阶   API
（ 例如 ， 对于 默认 的 加法 运算 ， 元素 可以 是 任何 可 相加 的 类型 包括   " Decimal "   或   " Fraction " 。 ）
一个 被弃 用 的   " OSError "   的 别名
" pip   uninstall "   后 跟 一个 或 多个 包 名称 将 从 虚拟环境 中 删除 包
此 函数 会 迭代   msg   的 所有 子 部分 中 的 所有 载荷 ， 逐行 返回 字符串 载荷
在   " initscr ( ) "   之后 立即 调用 此 例程 是 一个 很 好 的 做法
生成 的 对象 可以 用作 上下文 管理器 （ 参见 示例 ）
格式 字符串 语法 使用   " str . format ( ) "   进行 字符串 格式化
注解 :
使   " \ w " 、 " \ W " 、 " \ b " 、 " \ B " 、 " \ s "   和   " \ S "   执行 仅   ASCII   匹配 而 不是 完整 匹配   Unicode   匹配
返回 分配 给 字符   chr   的 数值 作为 浮点数
可以 多次 注册 同样 的 函数 及 参数 .
exc _ traceback   :   异常 回溯 ， 可以 是   " None " .
通过 使用 这个 基于 栈 的 模型 ， 那些 通过   " __ init __ "   方法 获取 资源 的 上下文 管理器 （ 如 文件 对象 ） 能够 被 正确处理
3.3   新版 功能 .
" itertools . count ( start ,   step ) "   返回 一个 等 分 的 无限 数据流
安全
若 要 实现 一个 队列 ，   " collections . deque "   被 设计 用于 快速 地 从 两端 操作
生成 凭据
数学
将 与 面板 相关联 的 窗口 改为 窗口   win
" ( flags   &   0x04 )   0x04 " :   从栈 中弹 出   fmt _ spec   并 使用 它 ， 否则 使用 空 的   fmt _ spec
( " ^ "   和   " $ "   还 没有 解释 ； 它们 将 在 以下 部分 介绍 更 多 元字符 。 )
IPv6   作用域 地址 可 使用   " ipaddress . IPv6Address "   来 解析
在 运行 时 拼接 字符串 表达式 必须 使用   ' + '   运算符
因此 :
引发 一个 审计 事件   " winreg . OpenKey " ， 附带 参数   " key " ,   " sub _ key " ,   " access "
例如 ， 如果 一个 图像 对象 是   " WeakValueDictionary "   中 的 值 ， 那么 当对 该 图像 对象 的 剩余 引用 是 弱 映射 对象 所 持有 的 弱 引用 时 ， 垃圾 回收 可以 回收 该 对象 并 将 其 在 弱 映射 对象 中 相应 的 条目 删除
3.2   新版 功能 :   默认 拷贝   " __ annotations __ "   属性
format   是 归档 格式 ： 应为   " zip " ,   " tar " ,   " gztar " ,   " bztar "   或   " xztar "   之一
将 打印
参数 名 不是 规范 的 一部分 ， 只有   " open ( ) "   的 参数 才 用作 关键字 参数
此外 ， 你 可以 通过   " groupdict ( ) "   将 命名 分组 提取 为 一个 字典 :
返回 一个 基于 数字 或 字符串   x   构造 的 整数 对象 ， 或者 在 未 给出 参数 时 返回   " 0 "
新增 模块
计算 出 对应 于   " format "   的 结构 大小 （ 亦 即   " pack ( ) "   方法 所 产生 的 字节 串 对象 的 大小 ）
3.2   新版 功能 :   添加 了 将   " ZipFile "   用作 上下文 管理员 的 功能
HTTP   状态 码
Windows   Popen   助手
对于 与 Python 相关 的 问题 和 问题 报告 ， 您 可以 发布 到 新闻组   comp . lang . python   ， 或者 将 它们 发送到 邮件 列表 python   list @ python . org
不幸 的 是 ， 没有 简单 的 方式 能 检查 原始   errno   编号
类 方法 的 调用 可以 在 类 上 进行   ( 例如   " C . f ( ) " )   也 可以 在 实例 上 进行   ( 例如   " C ( ) . f ( ) " )
行 内容 不 应 带有 末尾 换行符 ； 它 可以 有 内部 换行符
通用 选项
如果 指定 了   function   ， 它 将 被 用作 新 的 钩子 函数 ； 如果 省略 或 为   " None " ， 任何 已 安装 的 函数 将 被 移除
文本   I / O
适合   " iter ( ) "   的 第二种 形式 的 应用 之一 是 构建 块 读取器
" operator "   模块 还 定义 了 一些 用于 常规 属性 和 条目 查找 的 工具
C   参数 必须 对应   items   中 每 一个 独立 的 格式 单元
3.6 . 1   新版 功能 .
在 之前 的 版本 中则 将 引发   " RuntimeError "
https : / / code . activestate . com / recipes / langs / python /   ： Python   Cookbook   是 一个 相当 大 的 代码 示例 集 ， 更 多 的 模块 和 有用 的 脚本
此 函数 应当 仅 从 异常 处理程序 中 调用
性能 优化
在 其他 情况 下 ，   src   将 被 拷贝 至   dst   ， 使用 的 函数 为   copy _ function   ， 然后 目标 会 被 移除
随后 可 调用 对象   func   会 被 传入 主 窗口   ' stdscr '   作为 其 第一个 参数 ， 再 带上 其他 所有 传给   " wrapper ( ) "   的 参数
对于 长 列表 ， 如果 其 包含 元素 的 比较 操作 十分 昂贵 的话 ， 这 可以 是 对 更 常见 方法 的 改进
想要 忽略 由 一个 失败 的 函数调用 所 设置 的 异常 ， 异常 条件 必须 通过 调用   " PyErr _ Clear ( ) "   显式 地被 清除
一个 代表 当前 模块 版本 的 字节 串 对象
基本 对象
bztar   :   bzip2   压缩 的   tar   文件 （ 如果   " bz2 "   模块 可用 ）
编者 :   Raymond   Hettinger
有 一块 堆栈 ， 每帧 用于 表示   " try "   语句 等
这样 做 将 引发   " UnicodeEncodeError " ， 其 形式 类似 下面 这样 （ 不过 详细 的 错误信息 可能 会 有所不同 ） :   " UnicodeEncodeError :   ' latin   1 '   codec   can ' t   encode   character   ' \ u1234 '   in   position   3 :   ordinal   not   in   range ( 256 ) "
检测   ASCII   十进制 数码 ， 即   " ' 0 ' "   至   " ' 9 ' "
PEP   525   异步 生成器 通过 给 协程 函数 加入 生成器 功能 对   PEP   492   进行 扩展 的 提议
加载 动态链接库
PEP   301 :   Distutils 的 软件包 索引 和 元 数据
https : / / en . wikipedia . org / wiki / Cryptographic _ hash _ function # Cryptogra   phic _ hash _ algorithms   包含 关于 哪些 算法 存在 已知 问题 以及 对 其 使用 所 造成 的 影响 的 信息 的   Wikipedia   文章
将 一个 管道 模板 恢复 为 初始状态
这种 杂乱 会 破坏   " global "   声明 用于 识别 副作用 的 有用 性
核心 与 内置
" namedtuple ( ) "   命名 元组 的 工厂 函数
理解 描述 器 的 概念 是 更 深层次 理解   Python   的 关键 ， 因为 这是 许多 重要 特性 的 基础 ， 包括 函数 、 方法 、 属性 、 类 方法 、 静态方法 以及 对 超类 的 引用 等等
泛型 类型 可以 有 任意 数量 的 类型 变量 ， 并且 类型 变量 可能 会 受到限制 :
如果 要 把   " help ( ) "   的 输出 写 到   sys . stderr   ：
子 类型   " Real "   并 加入   " numerator "   和   " denominator "   两种 属性 ， 这 两种 属性 应该 属于 最低 的 级别
这里 提供 的 函数 不应 被 显式 地 调用 ， 因为   " MIMEText "   类会 在 类 实例 化 期间 使用   _ subtype   和   _ charset   值来 设置 内容 类型 和   CTE   标头
用于 已 编译 字节 码 文件 的 并行 文件系统 缓存
构建 和   C   API   的 改变
3.5   新版 功能 .
Task   对象 被 用来 在 事件 循环 中 运行 协程
在 目录   a   和   b   中 类型 不同 的 名字 ， 或者 那些   " os . stat ( ) "   报告 错误 的 名字
它们 还 继承 了 来自 下 层流 的 所有 其他 方法 和 属性
日期 字段 的 长度 为 两个 字符 ， 如果 日期 只有 一个 数字 则 会 以 零 填充 ， 例如 :   " ' Wed   Jun   9   04 : 26 : 40   1993 ' "
用于 将   " sys . stdout "   临时 重定向 到 一个 文件 或类 文件 对象 的 上下文 管理器
解码 之后 ， 字符串 内容 所用 的 语法 如下 :
3.5   新版 功能 :   Formerly   known   as   " tp _ compare "   and   " tp _ reserved " .
其他 参数 的 含义 与   " load ( ) "   中 的 相同
从 一个   " datetime "   减去 一个   " datetime "   仅 对 两个 操作数 均 为 简单 型 或 均 为 感知 型 时 有 定义
如果   key   为 不可 哈希 对象 则 会 引发   " TypeError "
Python   文档 贡献者
" % d "   十进制 数   [ 01 , 31 ]   表示 的 月 中日
可以 用于 对   JSON   浮点数 使用 其它 数据类型 和 语法分析 程序   （ 比如   " decimal . Decimal "   ）
如果 调用 时 不 传入 参数   ( 或 传入   " tz   None " )   则 将 假定 目标 时区 为 系统 的 本地 时 区
但是 ， 还 存在 一类 操作 ， 不同 的 类型 执行 相同 的 操作 会 有 不同 的 行为 ： 那 就是 增强 赋值 运算符
探索性 测试 在   " TestLoader . discover ( ) "   中 实现 ， 但 也 可以 通过 命令行 使用
标准 库 简介   — —   第二 部分
例如
以下 示例 比较 两个 字符串 ， 并 将 空格 视为 “ 垃圾 ” ：
如果 提供 了   locals   ， 则 它 可以 是 任何 映射 对象
这 类似 于 在 命令行 执行 带有   " python   i   file "   的 文件
复合 请求
目的 是 在   " dataclass ( ) "   装饰 器 运行 之后 ， 类 属性 将 包含 字段 的 默认值 ， 就 像 指定 了 默认值 一样
发布 日期 :   2017   09   19
初始化 文件
name   是 共享内存 的 唯一 名称 ， 字符串 类型
要 检测 一个 对象 的 类型 ， 首先 要 确保 它 不 为   " NULL " ， 然后 使用   " PyBytes _ Check ( ) " ,   " PyTuple _ Check ( ) " ,   " PyList _ Check ( ) "   等等
允许 在 支持 此 特性 的 终端 上 使用 默认 的 颜色 值
命令行 界面
这 也 包括 非可选 参数 ， （ 比如   " parrot ( voltage   1000 ) "   也 是 有效 的 ）
源代码 ：   Lib / platform . py
构建
设置 或 移除 补全 函数
源代码 ：   Lib / urllib / error . py
而 使用   "   x "   参数 则 可以 明确 指定 不 使用 的 修复器
一个   " Row "   实例 ， 该 实例 将 作为 用于   " Connection "   对象 的 高度 优化 的   " row _ factory "
此 模块 实现 了 一个 辅助 类 和 一些 函数 用来 快速 编写 访问 标准 输入 或 文件 列表 的 循环
当   DST   开始 时 （ 即   " start "   行 ） ， 本地 时钟 从   1 : 59   跳 到   3 : 00
The   " prefix _ chars   "   参数 默认 使用   " '   ' "
表明 前面 排队 的 任务 已经 完成 ， 即 get 出来 的 元素 相关 操作 已经 完成
另 请 参见   " ConfigParser . write ( ) "   的   space _ around _ delimiters   参数
" multiprocessing . shared _ memory "   可 从 进程 直接 访问 的 共享内存
标注
如果 为 符号 链接 则 返回   " True "
参见 :
命名 空间 对象 没有 公共 方法 ， 但是 拥有 可写 的 属性
模块 加载 器 可以 选择 通过 实现   " create _ module ( ) "   方法 在 加载 期间 创建 模块 对象
协议 不可 用
CacheFTPHandler   对象
将   TOS   存放 到 局部 对象   " co _ varnames [ var _ num ] "
" $ identifier "   为 替换 占位 符 ， 它会 匹配 一个 名为   " " identifier " "   的 映射 键
这一 特性 可 用于 作为 那个 模块 的 优点 ， 如果 它 维护 一个 全局 表 或者 对象 的 缓存   — —   使用   " try "   语句 ， 就 可以 测试 表 的 存在 并且 跳过 它 的 初始化 ， 如果 有 需要的话 :
Tkinter 文档 ：
用于 区分 事件 的 标识 值
这个 正则表达式 匹配   " foo . bar " 、 " autoexec . bat " 、   " sendmail . cf "   和   " printers . conf "
" filecmp "   文件 及 目录 的 比较
可 用作 其他   color / pencolor / fillcolor   调用 的 输入
对于 长 选项 ， 将 一个 参数 传给 不 需要 参数 的 选项 也 将 导致 引发 此 异常
3.6   新版 功能 .
创建 一个 迭代 器 ， 返回   iterable   中 所有 元素 并 保存 一个 副本
BLAKE2   是 在   RFC   7693   中 定义 的 加密 哈希 函数 ， 它 有 两种 形式 :
您 可以 提供 不同 的 版本号 来 获取 该 版本 ， 或者 您 可以 运行   " pip   install   upgrade "   将 软件包 升级 到 最新 版本 ：
如果   new   为   1 ， 则 尽可能 打开 新 的 浏览器 窗口
在   3.6   版 更改 :   接受 一个 类 路径 对象
最后 将会 尝试 旧式 的 迭代 协议 ： 如果 一个 类 定义 了   " __ getitem __ ( ) " ， 则 当且 仅 当 存在 非负 整数 索引 号   i   使得   " x   is   y [ i ]   or   x   y [ i ] "   并且 没有 更 小 的 索引 号 引发   " IndexError "   异常 时   " x   in   y "   为   " True "
在 其他 情况 下 ， 将 执行 一次 原始 流 读取
"   的 贪婪 性质 ，   用于 匹配 单个   HTML   标记 的 简单 模式 不起作用
需要 注意 的 是 ， 时间 间隔 较大 时 ， 这个 方法 的 结果 中 的 微秒 将会 失真 （ 大多数 平台 上 大于 270 年 视为 一个 较大 的 时间 间隔 ）
这些 函数 所 返回 的 描述 器是   Function   和   Class   类 的 实例
其他 流程 控制 工具
当 在 编码 过程 中 发生 与   Unicode   相关 的 错误 时 将 被 引发
" sqlite3 "   SQLite   数据库   DB   API   2.0   接口 模块
在 多数 情况 下 ， Python 程序员 都 不会 使用 这个 功能 ， 因为 它 在 解释器 中 引入 了 一组 未知 的 名称 ， 而 它们 很 可能 会 覆盖 一些 你 已经 定义 过 的 东西
如何 找到 当前 模块 名称 ？
它 还 会 多次 调用 垃圾 回收 器
在   Unix   上 ， C   扩展 不会 再 被 链接 到   libpython ， 但   Android   和   Cygwin   例外
添加 参数
列表 的 更 多 特性
因此 在 原始 字符串 字 面值 中 ， " ' \ U ' "   和   " ' \ u ' "   转义 形式 不会 被 特殊 对待
修复器
对象 值 在   Python   中是 一个 相当 抽象 的 概念 ： 例如 ， 对象 值 并 没有 一个 规范 的 访问 方法
比如 ， 给定 一个 字符串 列表 ， 你 可能 想 去掉 每个 字符串 尾部 的 空白 字符 ， 或是 选出 所有 包含 给定 子串 的 字符串
如果 调用 时 内部 标识 为   true ， 将 立即 返回
设置 与 特殊 方法
" callback "   " connection _ lost ( ) "   链接 丢失 或 关闭 时 被 调用
后续 调用 异步 生成器 所 返回 的 任何 其他 可 等待 对象 将 引发   " StopAsyncIteration "   异常
默认 会 将 名称 转换 为 小写 形式
如果 调用 正常 完成 那么 返回   " None "
如果 未 提供   secs   或 为   " None "   ， 则 使用   " time ( ) "   所 返回 的 当前 时间
此 函数 什么 都 不会 做 ； 它 甚至 不会 设置   Content   Transfer   Encoding   标头
其中 有些 模块 经过 专门 设计 ， 通过 将 特定 平台 功能 抽象化 为 平台 中立 的   API   来 鼓励 和 加强   Python   程序 的 可移植性
" callback "   " get _ buffer ( ) "   调用 后 会 分配 新 的 接收缓冲区
3.3   版后 已 移除 :   现在 可以 让   " staticmethod "   配合   " abstractmethod ( ) "   使用 ， 使得 此 装饰 器 变得 冗余
获得 锁 ， 阻塞 或非 阻塞 的
迭代 器 协议
要 保留 所有 原有 的 元 数据   ， 请 改用   " copy2 ( ) "
异常
此 方式 仅 用于 创建 全新 的 字节 串 对象 ； 如果 字节 串 在 代码 的 其他 部分 已知 则 不可 使用 此 方式
对于 Red   Hat ， 安装 python   devel   RPM 以 获取 必要 的 文件
可 滚动 控件 选项
... 创建 和 分发 二进制 扩展 ？
" csv "   CSV   文件 读写
仅 在 目录   a   中 的 文件 和 子目录
后续 步骤
通过 传递 一个 可变   ( 即可 原地 修改 的 )   对象 :
当 发生 符号 链接 循环 时 ， 返回 的 路径 将 是 该 循环 的 某个 组成部分 ， 但 不能 保证 是 哪个 部分
帮助 和 偏好
在   3.8   版 更改 :   添加 了   errors   参数
正则表达式 （ 称为 RE ， 或 正则 ， 或 正则表达式 模式 ） 本质 上 是 嵌入 在 Python 中 的 一种 微小 的 、 高度 专业化 的 编程语言 ， 可 通过   " re "   模块 获得
子 模块
检测 任意   ASCII   可 打印 字符 ， 包括 空白符
跳过 测试 与 预计 的 失败
它 可 被 重载 以便 控制 如何 处理 未 捕获 的   " threading . Thread . run ( ) "   异常
在 生成器 表达式 中 使用 的 变量 会 在 为 生成器 对象 调用   " __ next __ ( ) "   方法 的 时候 以 惰性 方式 被 求值 （ 即 与 普通 生成器 相同 的 方式 ）
编解码器 注册 与 支持 功能
JSON   ( JavaScript   Object   Notation ) ， 由   RFC   7159   ( which   obsoletes   RFC   4627   )   和   ECMA   404   指定 ， 是 一个 受   JavaScript   的 对象 字面 量 语法 启发 的 轻量级 数据交换 格式 ， 尽管 它 不仅仅 是 一个 严格 意义 上 的   JavaScript   的 字集   [ 1 ]
这样 ， 您 可以 实现 更 高级 的 返回 结果 的 方法 ， 例如 返回 一个 可以 按 名称 访问 列 的 对象
一个 更 容易 的 方式 是 通过 将 其 编码 在 此 发布 包 的 配置文件   " setup . cfg "   中 ， “ 设置 并 忘记 ” 该 选项
" Logger . addHandler ( ) "   和   " Logger . removeHandler ( ) "   从 记录器 对象 中 添加 和 删除 处理程序 对象
SimpleQueue   对象
函数
或者 ， 等价 于
类似 的 行为 也 会 对 晚于   2107   12   31   的 文件 发生 ， 时间 戳 也 会 被 设为 该 上 限值
另 请参阅   " PYTHONVERBOSE "
嵌入 Python
Tab   补全 和 编辑 历史
此时 ，   " prefix _ chars "   的 第一个 字符 将 用作 帮助 选项 的 前缀
通常   " ^ "   只 匹配 字符串 的 开头 ， 而   " $ "   只 匹配 字符串 的 结尾 ， 紧接在 字符串 末尾 的 换行符 （ 如果 有 的话 ） 之前
核心 与 内置
有关 安装 其他 Python 项目 的 指南 ， 请参阅 安装 指南
宏 版本 的   " PyInstanceMethod _ Function ( ) " ， 略去 了 错误 检测
嵌套 结构 体 可以 通过 几种 方式 构造 初始化 :
在 早先 的   Python   版本 中   ， 只有 新式 类 能够 使用   Python   新增 的 更 灵活 特性 ， 例如   " __ slots __ " 、 描述符 、 特征 属性 、 " __ getattribute __ ( ) " 、 类 方法 和 静态方法 等
这里 可能 没有 提到 的 额外 的 检查
最小 的 日期   " date ( MINYEAR ,   1 ,   1 ) "
默认   move   为   " False "
将 终端 恢复 到   " program "   模式 ， 如 之前 由   " def _ prog _ mode ( ) "   所 保存 的 一样
在 多线程 环境 中 ， LBYL   方式 会 导致 “ 查看 ” 和 “ 跳跃 ” 之间 发生 条件 竞争 风险
http : / / www . pyvideo . org   从 会议 和 用户组 会议 中 收集 与 Python 相关 的 视频 的 链接
测试
包含 文件
此外 ， Python   的 解释 特性 往往 会 给 执行 增加 太 多 开销 ， 以至于 在 典型 的 应用程序 中 ， 确定性 分析 往往 只会 增加 很小 的 处理 开销
module   spec   模块 规格 一个 命名 空间 ， 其中 包含 用于 加载 模块 的 相关 导入 信息
namespace   （ 命名 空间 ） 是 一个 从 名字 到 对象 的 映射
这 使用 通过 This   makes   types   created   through   " PyType _ FromSpec ( ) "   所 创建 类型 的 行为 与 管理 代码 中 的 其他 类 保持一致
返回 指定 年份 的 指定 月份 的 第一天 是 星期 几 和 这个 月 的 天数
一个 选项 即使 只是 已知 选项 的 前缀 部分 解析器 也 能 识别 该 选项 ， 不会 将 其 放入 剩余 参数 列表
否则 改变 作为 海龟 绘图 场所 的 画布 大小
创建 哈希 对象
最后 ， 请 考虑 这个 函数 定义 ， 它 的 位置 参数   " name "   和   "   kwds "   之间 由于 存在 关键字 名称   " name "   而 可能 产生 潜在 冲突 :
如果   size _ or _ initializer   是 一个 整数 ， 那 就 会 当做 数组 的 长度 ， 并且 整个 数组 的 内存 会 初始化 为 0
" : "   和   " ; "   相互 排斥
例如 :
ID   为   " file "   的 处理程序 会 被 实例 化为   " logging . handlers . RotatingFileHandler " ， 并 附带 关键字 参数   " filename   ' logconfig . log ' ,   maxBytes   1024 ,   backupCount   3 "
（ 由   Victor   Stinner   在   bpo   36829   中 贡献 。 ）
如果 你 想 自己 编译 CPython ， 首先 要 做 的 是 获取   source
请 注意   ' md5 '   也 在 此 清单 中 ， 虽然 某些 上游 厂商 提供 了 一个 怪异 的 排除 了 此 算法 的   " FIPS   兼容 "   Python   编译 版本
这个 模块 的 版本号 ， 是 一个 由 整数 组成 的 元组
包 支持 另 一个 特殊 属性 ，   " __ path __ "
类
返回 对应 于 预期 格列 高利 历 序号 的   " datetime " ， 其中 公元   1   年   1   月   1   日 的 序号 为   1
它 旨在 被 派生类 重载 ； 基类 实现 中 无 任何 实际操作
在 之前 版本 中 ， 此 语法 则 更为 受限 ， 详情 参见   PEP   614
继承
概述
它们 还 可以 用作 零 拷贝 切片 机制
如果 该子 部分 没有 此头 字 段 ， 或者 没有 此参数 ， 或者 其 主要   MIME   类型 并非   text   ， 那么 列表 中 的 那 一项 即 为   failobj
还有 许多 其他 方面 的 特点 使得   Python   成为 很 好 的 入门 语言
如果 dst 之后 没有 偏移 ， 则 假设 夏令时 比 标准 时间 提前 一 小时
" CPython "   一词 用于 在 必要 时 将 此 实现 与 其他 实现 例如   Jython   或   IronPython   相 区别
模拟 一个   " signal . SIGINT "   信号 到达 主线 程 的 效果
在   3.7   版 更改 :   递归 操作 按 排序 顺序 添加 条目
这样 做 的 好处 是从   " io . IOBase . readlines ( ) "   创建 的 输入 将 得到 适用 于   " io . IOBase . writelines ( ) "   的 差异 信息 ， 因为 输入 和 输出 都 带有 末尾 换行符
Ttk   控件
在   3.8   版 更改 :   添加 了   sep   和   bytes _ per _ sep   形参
这 意味着 符号 应该 必须 通过 其他 导出 方式 来供 其他 扩展 模块 访问
在   Fedora   和   SuSE   上 ， 它 等于   64   位 平台 上 的   " " lib64 " "
例如 ， " [ akm $ ] "   将 匹配   " ' a ' "   ，   " ' k ' "   、   " ' m ' "   或   " ' $ ' "   中 的 任意 字符 ；   " ' $ ' "   通常 是 一个 元字符 ， 但 在 一个 字符 类中 它 被 剥夺 了 特殊性
填充 不 完整 的 块 给   " feed ( ) "   执行 ， " handle _ data ( ) "   可能 会 多次 调用 （ 除非   convert _ charrefs   被 设置 为   " True "   ） :
警告 :
相当于 :
如果 这 无法 做到 或 不合 本意 ， 则 应当 通过 调用   " PyErr _ Clear ( ) "   来 清除 异常
类 和 实例 属性 均 可 通过   " " self . name " "   表示法 来 访问 ， 当 通过 此 方式 访问 时 实例 属性 会 隐藏 同名 的 类 属性
API   与 特性 的 移除
为了 确保 推导 式 得出 的 结果 总是 一个 类型 正确 的 容器 ， 在 隐式 嵌套 作用域 内 禁止 使用   " yield "   和   " yield   from "   表达式
你 可以 为 基类 赋 一个 别名 并 基于 该 别名 进行 派生
In   general ,   you   will   want   to   use   the   " email "   package ' s   features   to   construct   an   email   message ,   which   you   can   then   send   via   " send _ message ( ) " ;   see   email :   示例 .
当 目标 为 一个 可变 对象 （ 属性 引用 、 抽取 或 切片 ） 的 组成部分 时 ， 该 可变 对象 必须 最终 执行 赋值 并 决定 其 有效性 ， 如果 赋值 操作 不可 接受 也 可能 引发 异常
其他 语言 特性 修改
cmd   变量 必须 为 一个 有效 的   bourne   终端 命令
生成器
例如 ， 当 实参 是 一个 类时 ， metaclass   的 属性 不 包含 在 结果 列表 中
Developer   Studio   将 加入 大量 你 并 不 真正 需要 的 导 入库 ， 使 你 的 可执行文件 大小 增加   100K
速度 值 从   1   到   10 ， 画线 和 海龟 转向 的 动画 效果 逐级 加快
在   3.7   版 更改 :   UTC   时差 不再 限制 为 一个 整数 分钟 值
改进 的 模块
name   可以 是 一个   path   like   object
错误信息 的 最后 一行 告诉 我们 程序 遇到 了 什么 类型 的 错误
如果   pyfloat   不是 一个   Python   浮点数 对象 但是 具有   " __ float __ ( ) "   方法 ， 此 方法 将 首先 被 调用 ，   将   pyfloat   转换成 一个 数 点数
它 的 值 可 被 用来 在 整个 系统 中 唯一 地 标识 这个 特定 线程 （ 直到 线程 终结 ， 在 那 之后 该值 可能 会 被   OS   回收 再 利用 ）
argument   参数 在 调用函数 时 传给   function   （ 或   method   ） 的 值
在   3.1   版 更改 :   支持   " with "   语句 ， 构造 器 参数   mtime   和   " mtime "   属性
...   使用 并行 安装 的 多个   Python   版本 ？
可用性 :   Linux
它 提供 了 高效 的 高级 数据结构   ， 还 能 简单 有效 地 面向对象编程
自   Python   3.1   起 被 弃 用 的 别名   " base64 . encodestring ( ) "   和   " base64 . decodestring ( ) "   已 被 移除 ： 请 改用   " base64 . encodebytes ( ) "   和   " base64 . decodebytes ( ) "
跟踪 插入 顺序 是 次要 的
（ 子 进程 可以 调用 队列 的   " Queue . cancel _ join _ thread "   方法 禁止 这种 行为 ）
如果 你 不 导入   " logging . handlers "   和   " logging . config "   ， 它们 将 不会 占用 任何 内存
3.8   新版 功能 .
（ 由   R é mi   Lapeyre   在   bpo   30670   中 贡献 。 ）
在 没有 驱动器 概念 的 系统 上 ，   drive   将 始终 为空 字符串
日志   HOWTO
返回 三组 文件名 列表 ：   match   ,   mismatch   ,   errors
例如 ， 可以 使用   " import   __ hello __ "   尝试 一下 这个 功能
创建 一个 迭代 器 ， 返回   iterable   中 连续 的 键 和 组
核心 与 内置
" yield   from   < expr > "   表达式 如果 在 异步 生成器 函数 中 使用 会 引发 语法错误
抛出 异常
安装 步骤
确定   code   是否 属于   tableC.2   ( 控制字符 ， C.2 . 1   和   C.2 . 2   的 并 集 )
一个 弱 引用 对象 如果 存在 ， 就 允许 通过 调用 它 来 获取 引用 :
" urllib . request "   用于 打开   URL   的 可 扩展 库
你 应该 在 你 的 代码 中 检查   DeprecationWarning .
在   3.5   版 更改 :   " OrderedDict "   的 项 ( item ) ， 键 ( key ) 和 值 ( value )   视图 现在 支持 逆序 迭代 ， 通过   " reversed ( ) "
"   X   tracemalloc "   使用   " tracemalloc "   模块 启动 对   Python   内存 分配 的 跟踪
如果 一个 字段 是 一个   " InitVar "   ， 它 被 认为 是 一个 称为 仅 初始化 字段 的 伪字段
这 可以 通过 编写 与 整个 标题 行 匹配 的 正则表达式 来 处理 ， 并且 具有 与 标题 名称 匹配 的 一个组 ， 以及 与 标题 的 值 匹配 的 另 一个组
None   被 视为 一个 空 的 字典
反 斜杠   " \ "   可以 用来 转义 :
末尾 的 一个 换行符 会 从 输出 中 被 去除
如果 是 整数 ， 它 表示   args   中 位置 参数 的 索引 ； 如果 是 字符串 ， 它 表示   kwargs   中 的 关键字 参数 名
反转   x   中 的 所有 数位
历史 命令
这 可以 通过 简单 地 传递 字典 并 使用 方括号   " ' [ ] ' "   访问 键来 完成
以下 是 一个 应该 如何 捕获 这些 异常 的 示例 :
该 模块 提供 了 下列 函数 ：
如果   lock   为   " False "   则 对 返回 对象 的 访问 将 不会 自动 得到 锁 的 保护 ， 也就是说 它 不是 “ 进程 安全 的 ”
这 表示 线程   ID   ( " TID " )   已 被   OS   ( 内核 )   赋值 给 线程
" ' AF _ PIPE ' "   是 这种 格式 的 字符串   " r ' \ . \ pipe { PipeName } ' "
返回   a   转换 为 整数 的 结果
此 函数 使用 默认设置 处理 异常 （ 即 在 浏览器 中 显示 报告 ， 但 不 记录 到 文件 ）
如果 没有 提供   " default "   ， 那么 将 删除 类 属性
在   3.7   版 更改 :   补充   " COMMENT "   、   " NL "   和   " ENCODING "   标记
编辑 和 导航
将 二进制 数据 转换 为   ASCII   编码 字符 ， 返回值 是 转换 后 的 行 数据 ， 包括 换行符
参见 :
它们 为 现有 的   " dict . update "   和   " {   d1 ,   d2 } "   字典 合并 方法 提供 了 补充
此外 可以 输入   " pip "   或   " idle "   来 使用   pip   和   IDLE
并且 配置 脚本 是 ：
在   " Cursor . description "   中 找到 的 列名 并 不 包括 类型 ， 举例来说 ， 如果 你 在 你 的   SQL   中 使用 了 像   " ' as   " Expiration   date   [ datetime ] " ' "   这样 的 写法 ， 那么 我们 将 解析 出 在 第一个   " ' [ ' "   之前 的 所有 内容 并 去除 前导 空格 作为 列名 ： 即列 名将 为   " Expiration   date "
幂函数 与 对数函数
注解 :
注解 :
" email . parser "   模块 还 提供 了   " Parser "   用来 解析 字符串 ， 以及 只 用来 解析 消息 头 的   " BytesHeaderParser "   和   " HeaderParser " ， 如果 你 只 对 消息 头 感兴趣 就 可以 使用 后 两者
或者 ， 等价 于
TarInfo   对象
" % I "   十进制 数   [ 01 , 12 ]   表示 的 小时 （ 12 小时 制 ）
这里 是 一个 展示 了 你 如何 在 Python 交互式 命令行 中 使用   " message _ from _ bytes ( ) "   的 例子 ：
这是 必需 的 ， 因为   " field ( ) "   调用 本身 会 替换 一般 的 默认值
当 你 编写 函数 式 风格 的 程序 时 ， 你 会 写出 很多 带有 不同 输入 和 输出 的 函数
Cython   可以 利用 编译 （ 和 可选 的 类型 注释 ） 来 使 代码 明显 快 于 解释 运行 时 的 速度
Python 很 容易 使用 ， 但 它 是 一种 真正 的 编程语言 ， 提供 了 很多 数据结构 ， 也 支持 大型 程序 ， 远超 shell 脚本 或 批处理 文件 的 功能
对于   " exec ( ) "   或   " eval ( ) "   生成 的 代码 对象 是 非法 的
将 安装 标准 库 ， 测试 套件 ， 启动器 和 pip
它们 通常 通过 迭代 产生 值 的 函数 来 创建 ， 而 不是 显式 调用   " PyGen _ New ( ) "   或   " PyGen _ NewWithQualName ( ) "
如果 该 文件 不 存在 或 不可 访问 ， 则 抛出   " OSError "   异常
其他 容器 类型 ， 请 参见 内置 的   " list " 、 " set "   和   " tuple "   类 ， 以及   " collections "   模块
为什么 我 的 电脑 上 安装 了   Python   ？
若 达到 了 数据流 末尾 标识符 则 为   " True "
返回   o1   和   o2   “ 按位 异或 ” 的 结果 ， 如果 失败 ， 返回   " NULL "
" BUILD _ MAP "   版本 专用 于 常量 键
此 方法 创建 一个   ctypes   实例 ， 从   source   对象 缓冲区 拷贝 缓冲区 ， 该 对象 必须 是 可读 的
See   构建 C / C++ 扩展   or   Extending   Embedded   Python   for   details .
更好 的 做法 是 仅 在 “ 源头 ” 上 检测   " NULL " ， 即 在 接收 到 一个 可能 为   " NULL "   的 指针 ， 例如 来自   " malloc ( ) "   或是 一个 可能 引发 异常 的 函数 的 时候
如果 没有 提供 长 选项 字符串 ， 则   " dest "   将 通过 接受 第一个 短 选项 字符串 并 去掉 开头 的   "   "   字符 来 获得
如果   fun   值为   " None "   ， 则 移除 现有 的 绑定
注解 :
当 达到 流式   " TarFile "   对象 的 典型 限制 时 将 被 引发
当 属性 引用   ( 参见 属性 引用 )   或 赋值 失败 时 将 被 引发
bpo   21097 :   将 test _ namespace _ pkgs   移至   test _ importlib
对于 整数 ， 可 使用 内置 的   " int ( ) "   类型 构造 器 ， 例如   " int ( ' 144 ' )   144 "
构建 过程 由 常用命令 组成 ：
如果 参数 是 规范 的 ， 则 为 返回   " True " ， 否则 为   " False "
" xmlrpc "   XMLRPC   服务端 与 客户端 模块
Task   对象
二进制 缓冲 对象 （   " BufferedReader "   ，   " BufferedWriter "   ，   " BufferedRandom "   和   " BufferedRWPair "   的 实例 ） 不是 可 重入 的
输出 将 由   " write ( ) "   方法 来 写入
" ' r   bz2 ' "   打开 一个   bzip2   压缩 的   stream   用于 读取
与 同名 的 C 函数 不同 ，   " asctime ( ) "   不 添加 尾随 换行符
在   3.7 . 2   版 更改 :   The   invalidation _ mode   parameter ' s   default   value   is   updated   to   None .
递归 锁 对象
版本 限定符 以主 版本号 开头 ， 可以 选择 后 跟   ( ' . ' )   和 次 版本 说明符
" stat "   解析   " stat ( ) "   结果
" while "   循环 只要 它 的 条件 （ 这里 指 ：   " a   <   10 " ） 保持 为 真 就 会 一直 执行
使用   " object "   的 实例 作为 值
如果 在 对   except   子句 头中 的 表达式 求值 时 引发 了 异常 ， 则 原来 对 处理器 的 搜索 会 被 取消 ， 并 在 周边 代码 和 调用 栈上 启动 对 新 异常 的 搜索 （ 它会 被 视作 是 整个   " try "   语句 所 引发 的 异常 ）
与   " preamble "   类似 ， 如果 没有 附加 文本 ， 则 此 属性 将 为   " None "
在   3.6   版 更改 :   Added   policy   keyword   only   parameter .
可以 使用   " PyStructSequence _ New ( ) "   创建 结果 类型 的 实例
nuget . org 上 的 包 信息 页 是   www . nuget . org / packages / python   对于 64 位 版本 和   www . nuget . org / packages / pythonx86   表示 32 位 版本
返回 对象 命名 属性 的 值
一个 只读 特征 属性 ， 表示 特定 正态分布 的 标准差
在 达到 数据流 末尾 之前 ， 这个 值 将 为   " b " " "
给 扩展 模块 提供 C   API
如果   lock   为 一个   " Lock "   或   " RLock "   对象 则 该 对象 将 被 用于 同步 对值 的 访问
第三个 可 选 关键字 参数 是   extra   ， 它 可 被 用来 传递 一个 字典 ， 该 字典 会 被 用来 填充 为 日志 记录 事件 创建 并 附带 用户 自定义 属性 的   LogRecord   的   __ dict __
算术 对 十进制 对象 和 算术 对 整数 和 浮点数 有 一些 小 的 差别
双星 号   "   "   表示 字典 拆包
针对   " dbm . gnu "   专属 错误 例如   I / O   错误 引发
复制 堆栈 顶部 的 引用
它 允许 脚本 （ 或 命令行 ） 指示 特定 Python 版本 的 首选项 ， 并 将 定位 并 执行 该 版本
" pickle "   和   " copy "   模块 会 在 封存 / 拷贝 特定 对象 时 使用 这些 函数
参见 :
警告 :
被 执行 的 程序 将 被 中止
请参阅 内建 的   " set " 、 " list " 、 " tuple "   和   " dict "   类 ， 以及   " collections "   模块 来 了解 其它 的 容器
参见 依赖于 具体 平台 的 高效 拷贝 操作 一节
在   3.3   版 更改 :   Raise   " NotImplementedError "   when   " sys . implementation . cache _ tag "   is   not   defined .
Python   3.6 于 2016 年 12 月 23 日 发布
构造 器 将 这个 属性 初始化 为   " True "
" concurrent . futures "   启动 并行任务
因此 ， 这些 表格 以 函数 而 非 数据结构 的 形式 公开
在   3.7   版 更改 :   加入 对   " contextvars "   模块 的 支持
3.3   版后 已 移除 .
参见 :
自带 电池
设置   Task   的 名称
原始 文件   I / O
选项
每种   Python   实现 都 带有 一些 内置 和 标准 的 模块
CPython   implementation   detail :   用户 不 应该 接触   " __ builtins __ " ， 严格说来 它 属于 实现 细节
权重 为 负值 的 行为 未有 定义
如果 未 设置 转义 符   ， 则 遇到 任何 需要 转义 的 字符 时 ， writer   都 会 抛出   " Error "   异常
我 怎样 将   Python   嵌入 一个   Windows   程序 ？
返回   x   的 浅层 复制
相对 可能性 的 计算方法 是 用 一个 狭窄 区间 内 某个 样本 出现 的 概率 除以 区间 的 宽度 （ 因此 使用 “ 密度 ” 一词 ）
空 表达式 不 被 允许 ， " lambda "   和 赋值 表达式   " :   "   必须 显式 地 加上 圆括号
组 具有 写入 权限
参数 :   cv   一个   " tkinter . Canvas "   类 对象
目标 列表 中 的 名称 在 循环 结束 时 不会 被 删除 ， 但 如果 序列 为空 ， 则 它们 根本 不会 被 循环 所 赋值
" xml . etree . ElementTree . getchildren ( ) "   被   " list ( elem ) "   替代
日志 级别
一个 常见 用例 是 在 处理 匹配 的 正则表达式 的 时候 :
" numbers "   数字 的 抽象 基类
返回 一个   file   like   object   （ 文件 类 对象 ） 作为 临时 存储 区域
文档
如果 你 希望 捕获 并 将 两个 流 合并 在 一起 ， 使用   " stdout   PIPE "   和   " stderr   STDOUT "   来 代替   capture _ output
结果 为 3 元素 的 元组
模块 搜索 路径
可 接受 的   JSON   文本 大小
这个 标记 与   " function __ entry ( ) "   相反 ， 表示 Python 函数 的 执行 已经 结束   (   通过   " return "   或者 异常 )
代表   C   " unsigned   short "   数据类型
返回 一个 具有 给定 值 的 新 切片 对象
这 可以 通过   Python   接口 实现
Python   API 中 定义 了 一些 函数 来 设置 这些 变量
3.2   新版 功能 .
在   Windows   上   " shutil . copyfile ( ) "   将会 使用 更大 的 默认 缓冲区 （ 1   MiB   而 非   64   KiB ） 并且 会 使用 基于   " memoryview ( ) "   的   " shutil . copyfileobj ( ) "   变种 形式
" typing " :   PEP   484   类型 提示 .
一个   except   子句 可以 将 多个 异常 命名 为 带 括号 的 元组 ， 例如 :
如果   umask   不 为 负值 ， 则   umask ( )   系统 调用 将 在 子 进程 执行 之前 在 下级 进程 中 进行
之后 调用   " wait ( ) "   方法 的 线程 将会 被 阻塞   ， 直到 调用   " set ( ) "   方法 将 内部 标识 再次 设置 为   true
内建函数   " len ( ) "   返回 一个 字符串 的 长度 :
2 . x   系列 继续 提供 迁移 到 3 . x 系列 的 工具
在   3.5   版 更改 :   新 方法   " __ getnewargs __ " ,   " __ rmod __ " ,   " casefold " ,   " format _ map " ,   " isprintable " ,   和   " maketrans "
（ 由   Tal   Einat   在   bpo   1529353   中 贡献 。 ）
" FileInput "   实例 可以 在   " with "   语句 中 被 用作 上下文 管理器
名称 是 通过 名称 绑定 操作 来 引入 的
除此之外 ， 那些 方法 还 可能 引发   " BlockingIOError " ， 如果 下层 的 原始数据 流 处于 非 阻塞 模式 并且 无法 接受 或 给出 足够 数据 的话 ； 不同于 对应 的   " RawIOBase "   方法 ， 它们 将 永远 不会 返回   " None "
根据 定义 ， 它 是 特定 于 线程 的
[ 1 ]   如果 是 代码 对象 ， 它 将 被 直接 执行
返回 一个 字节 串 对象 ， 其中 包含 描述 当前 终端 的   terminfo   长 名称 字 段
限制
此外 ， " abc "   模块 还 提供 了 这些 装饰 器 ：
Python   支持 字符串 和 字节 串字 面值 ， 以及 几种 数字 字 面值 :
如果   pathname   是 文件 ， 则 文件名 必须 以   " . py "   为 后缀 ， 并且 只有   (   相应 的   "   . pyc " )   文件 会 被 添加 到 最高 层级 （ 不带 路径 信息 ）
（ 由   Ned   Deily   在   bpo   34956   中 贡献 。 ）
在   Python   3.9   之后 ， 该 模块 将 限定 其 种子 值为   " None " ,   " int " ,   " float " ,   " str " ,   " bytes "   以及   " bytearray "
返回 一个 由 显式 格式 字符串 所 指明 的 代表 时间 的 字符串
如果   " tzinfo "   为   " None " ， 则 返回   " None " ， 否则 返回   " self . tzinfo . dst ( None ) " ， 并且 在 后者 不 返回   " None "   或者 一个 幅度 小于 一天 的   " timedelta "   对象 时 将 引发 异常
定制 模块
" shutil "   高阶 文件 操作
PEP   454   Add   a   new   tracemalloc   module   to   trace   Python   memory   allocations   PEP   由   Victor   Stinner   撰写 并 实现
与   " monotonic ( ) "   相似 ， 但是 返回 时间 为 纳秒 数
此 字节 码 可 区分 两种 情况 ： 如果   TOS   有 一个 名称 正确 的 方法 ， 字节 码会 将 未 绑定 方法 和   TOS   推入 栈顶
（ 由   Stefan   Tatschner   和   Zackery   Spytz   在   bpo   25780   中 贡献 。 ）
3.8   新版 功能 .
参考 引用
这 是 个 纯 Python 文件 ， 大多数 时候 也 很 简单 ， 看起来 如下 ：
返回 函数 对象   op   的 标注
这使 用户 可以 按   " Ctrl   C "   再次 进入 调试器
该 构造 器 接受 一个 可选 的 整数 初始化 器 ； 不会 执行 溢出检查
" HTTPException "   的 一个 子类
测试
PyZipFile   对象
更 多 说明 以及 实例 可 参考 说明 文档 中 的 扩展 和 嵌入   Python   解释器 小节
零个 参数 的 形式 仅 适用 于类 定义 内部 ， 因为 编译器 需要 填入 必要 的 细节 以 正确 地 检索 到 被 定义 的 类 ， 还 需要 让 普通 方法 访问 当前 实例
额外 的 检查 将 添加 到 解析器 和 编译器 中
" logical _ and ( ) " ,   " logical _ invert ( ) " ,   " logical _ or ( ) "   和   " logical _ xor ( ) "   方法 期望 其 参数 为 逻辑 操作数
发布 日期 :   2017   01   17
抽象 语法 树 可 被 内置 的   " compile ( ) "   函数 编译 为 一个   Python   代码 对象
一个 完整 程序 可 通过 三种 形式 被 传递 给 解释器 ： 使用   "   c "   字符串 命令行 选项 ， 使用 一个 文件 作为 第一个 命令行 参数 ， 或者 使用 标准 输入
如果 一个 进程 在 尝试 使用   " Queue "   期间 被   " Process . terminate ( ) "   或   " os . kill ( ) "   调用 终止 了 ， 那么 队列 中 的 数据 很 可能 被 破坏
注解 :
要 让   SQLite   能 使用 其他   Python   类型 ， 你 必须 将 它们 适配 至   sqlite3   模块 所 支持 的   SQLite   类型 中 的 一种 ： NoneType ,   int ,   float ,   str ,   bytes
例如 ， " home   ? brew "   匹配   " ' homebrew ' "   或   " ' home   brew ' "
通过 在 命令行 中 使用   "   m "   参数 作为 最高 层级 脚本 （ 即   " __ main __ "   模块 ） 运行 的 模块 也 是 代码 块
仅限   Windows ： 返回   Python   以及 扩展 模块 所 使用 的   VC   运行 时库 的 文件名
interactive   交互   Python   带有 一个 交互式 解释器 ， 即 你 可以 在 解释器 提示符 后 输入 语句 和 表达式 ， 立即 执行 并 查看 其 结果
args   被 所有 调用 需要 ， 应当 为 一个 字符串 ， 或者 一个 程序 参数 序列
3.3   新版 功能 .
返回 的 列表 按 字母表 排序
有关 C   ++ 库 ， 请参阅   C 很难 写 ， 有没有 其他 选择 ？
本 文档 假设 你 具备 有关   Python   的 基本知识
" changes "   包含 任何 定义 为   " init   False "   的 字 段 是 错误 的
Window   对象
spawn   和   forkserver   启动 方式
返回 该 印章 的   stamp _ id ， 印章 可以 通过 调用   " clearstamp ( stamp _ id ) "   来 删除
如 上 所示 ， " getcontext ( ) "   函数 访问 当前 上下文 并 允许 更改 设置
为了 展示   " spam _ system ( ) "   如何 被 Python 程序 调用
返回 一个 整数 代表 星期 几 ， 星期一 为   1 ， 星期天 为   7
以下 是 如何 使用 备用 纯 文本 版本 创建   HTML   消息 的 示例
你 可以 加上 条件 语句   " " if " "   来 选取 特定 的 元素 :
默认 情况 下   " pip "   将 从   Python   Package   Index   < https : / / pypi . org >   安装 软件包
在 开始 时 ， 添加 一个 空 条目 ， 该 条目 对应 于 当前目录
有些 具名 元组 是 内置 类型 （ 例如 上面 的 例子 ）
当   o1   支持 时 ， 这个 运算 直接 使用 它 储存 结果
为什么 浮点 计算 不 准确 ？
以下 是 来自 概述 小节 的 示例 ， 经过 重写 以 使   I / O   缓冲区 是 通过 使用 第一个 函数 集从   Python   堆中 分配 的 :
通常 ， 如果 一个 迭代 器 在 另 一个 迭代 器 开始 之前 就要 使用 大部份 或 全部 数据 ， 使用   " list ( ) "   会 比   " tee ( ) "   更 快
PEP   3127 :   整型 文字 支持 和 语法
在   C++   中 嵌入   Python
创建   ST   对象
为了 不让   Python   语法 变得 含糊 ， 如果   " expression "   会 生成元 组 ， 那 这个 元组 必须 要 用 括号 括 起来
3.7   新版 功能 .
在   macOS   上将 会 使用   fcopyfile   来 拷贝 文件 内容 （ 不 含元 数据 ）
复用 已有 的 测试代码
其他 示例
（ 这个 脚本 是 为 bash   shell 编写 的
这个 实例 的 内容 保存 为 一个 正常 字典 ，   可以 通过   " UserDict "   实例 的   " data "   属性 存取
" http . server "   包含 基于   " socketserver "   的 基本   HTTP   服务 类
但是 ，   " sys . breakpointhook ( ) "   可以 设置 为 其他 一些 函数 并 被   " breakpoint ( ) "   自动 调用 ， 以 允许 进入 你 想 用 的 调试器
pymalloc   分配器
[   示例   ]
" http . cookiejar "   提供 了   cookies   的 持久 化
PEP   338   将 模块 作为 脚本 执行   PEP   由   Nick   Coghlan   撰写 并 实现
发生 错误 时 ， 将 设置 适当 的 异常   ( " EOFError " )   并 返回   "   1 "
bpo   28791 :   更新   Windows   版本 以 支持   SQLite   3.21 . 0 .
指针 对象 没有 长度 ， 因此   " len ( ) "   将 引发   " TypeError "
" signal "   设置 异步 事件 处理程序
当 解析 命令 行时 ， 如果 选项 后 没有 参数 ， 则 将 用   " const "   代替
将   obj   放入 队列
上下文 管理器 类型
Python / C   API   参考手册   The   details   of   Python ' s   C   interface   are   given   in   this   manual
fd   是 文件 描述符 ，   event   是 一个 位 掩码 ， 表示 该 描述符 所 报告 的 事件   " POLLIN "   表示 可以 读取 ， " POLLOUT "   表示 该 描述符 可以 写入 ， 依此类推
使用   " del "   来 删除 它 :
如何 区分 “ 输入 不 完整 ” 和 “ 输入 无效 ” ？
Python   类型   SQLite   类型   " None "   " NULL "   " int "   " INTEGER "   " float "   " REAL "   " str "   " TEXT "   " bytes "   " BLOB "
小端 字节 序 的 结构 体所 对应 的 抽象 基类
创建 一个 海龟
处理 有 状态 的 对象
调试器 无法 识别 的 命令 将 被 认为 是   Python   语句 ， 并 在 正在 调试 的 程序 的 上下文 中 执行
示例
如果   waitflag   是   0   的话 ， 不能 指定   timeout
事件 循环 策略 是 各个 进程 的 全局 对象   ， 它 控制 事件 循环 的 管理
3.9   新版 功能 .
Panel   对象
" zlib "   与   gzip   兼容 的 压缩
在   3.3   版 更改 :   添加 了   kwargs   形参
学习 完 这个 教程 ， 你 将 可以 阅读 和 编写   Python   模块 和 程序 ， 也 可以 开始 学习   Python   标准 库
它 可以 这样 调用 :
示例 :
密钥 派生
此 方法 适用 于 不 确定 长度 的 列表 ； 即 其 长度 无法 在 遍历 整个 列表 之前 获知
上下文 和 启动 方法
返回 左上角 坐标 的 元组   " ( y ,   x ) "
但是 ， 有时 也 会 需要 具有 不同 效费 比 的 替代 实现
在   " product ( ) "   运行 之前 ， 它会 完全 耗尽 输入 的 可 迭代 对象 ， 在 内存 中 保留值 的 临时 池以 生成 结果 积
" ctypes "   将 在 结构 体 类型 中 创建 描述 器以 允许 直接 访问 嵌套 字 段 ， 而 无需 创建 对应 的 结构 体 或 联合 字 段
感叹号 可以 被 省略 ，   除非 语句 的 第一个 单词 与 调试器 命令 重名
因此 ， 一帧 由   " nchannels   samplesize "   （ 通道 数 采样 大小 ） 字节 组成 ， 而 一秒钟 的 音频 包含   " nchannels   samplesize   framerate "   （ 通道 数 采样 大小 帧 率 ） 字节
在   3.5   版 更改 :   特征 属性 对象 的 文档 字符串 现在 是 可 写 的
这个 抽象类 是   Finder   的 一个 子类 ， 仅仅 是因为 兼容性 的 原因
" pyfpe . h "   的   " PyFPE _ START _ PROTECT ( ) "   和   " PyFPE _ END _ PROTECT ( ) "   宏已 从 受限 的   C   API   中 被 排除
函数
比如 ， 如果   " setup . py "   脚本 改成 ：
首选项 设置
构建 和   C   API   的 改变
" finalize "   提供 了 注册 一个 对象 被 垃圾 收集 时要 调用 的 清理 函数 的 方式
func   必须 是 一个   descriptor   或 可 调用 对象 （ 同属 两者 的 对象 例如 普通 函数 会 被 当作 描述 器来 处理 ）
关闭   " wave "   打开 的 数据流 并 使 对象 不可 用
Python   2.6   有 什么 新 变化
在 主 提示符 中 输入 文件 结束 字符 （ 在   Unix   系统 中是   " Control   D " ， Windows   系统 中是   " Control   Z " ） 就 退出 解释器 并 返回 退出 状态 为 0
结果 状态   " MaildirMessage "   状态   " unseen "   序列   非   S   标记   " replied "   序列   R   标记   " flagged "   序列   F   标记
从 光标 位置 开始 擦除 直至 窗口 末端 ： 光标 以下 的 所有 行都会 被 删除 ， 然后 会 执行   " clrtoeol ( ) "   的 等效 操作
在   3.5   版 更改 :   The   socket   timeout   is   no   more   reset   each   time   bytes   are   received   or   sent
异常
返回 一个 与 常规 序列 对象 一起 使用 的 迭代 器   seq
要 在 Python 脚本 中 使用 shell 命令 ， 请 查看   " subprocess "   模块
每个   " get ( ) "   被 用于 获取 一个 任务 ，   后续 调用   " task _ done ( ) "   告诉 队列 ， 该 任务 的 处理 已经 完成
要 访问 新 安装 ，   请 使用   " python3 . exe "   或   " python3 . x . exe "
" sunau "   读写   Sun   AU   文件
（ 由   Benjamin   Peterson   贡献 。 ）
这个 模块 定义 了 以下 函数 ：
在   Windows   上 ， 现在 默认 的 事件 循环 为   " ProactorEventLoop "
交集 和 并 集 返回 相应 计数 的 最小 或 最大值
再次 查找 重复 上次 搜索 ， 如果 结果 存在
两个 参数 都 应为 字符串 ，   key   定 长   8   个 比特
对于 增量 压缩 ， 请 改用   " BZ2Compressor "
并且   " spam / __ init __. py "   中有 如下 几行 内容 :
多数 路径 条目 所 指定 的 是 文件系统 中 的 位置 ， 但 它们 并 不必 受限于 此
这 将 覆盖 之前 对 这些 变量 的 所有 赋值 ， 包括 在   for   循环体 中 的 赋值 :
（ 是 的 ， 这是 正确 的 代码
相比   " utcfromtimestamp ( ) "   更 推荐 使用 此 方法
如果 未 识别 出 前缀 ， 则 原 字符串 将 保持 不变
函数 的 返回值 是 由 最后 被 执行 的   " return "   语句 所 决定 的
例如 :
" threading "   基于 线程 的 并行
另外 ， 仅当 一个 枚举 未定义 任何 成员 时才 允许 子 类化 该 枚举
开源 许可 与 协作
如果   check   设 为   True ,   并且 进程 以非 零 状态 码 退出 ,   一个   " CalledProcessError "   异常 将 被 抛出
第二个 参数 是 另 一个 字符串 ， 其中 包含 一些 描述 文件 使用 方式 的 字符
创建 RPM 软件包
其他   CPython   实现 的 改变
通过 INI 文件 自定义
从 对象 中 读取   size   个 字节 并 将 其 返回
对于 大多数 新 代码 ， 强烈推荐 使用   " Enum "   和   " Flag " ， 因为   " IntEnum "   和   " IntFlag "   打破 了 枚举 的 某些 语义 约定 （ 例如 可以 同 整数 进行 比较 ， 并 因而 导致 此 行为 被 传递 给 其他 无关 的 枚举 ）
在   3.6   版 更改 :   现在 默认 的 分配器 是   pymalloc   而 非 系统 的   " malloc ( ) "
除了   " OSError "   已有 的 属性 ， " BlockingIOError "   还有 一个 额外 属性 ：
如果 有 多个 最小 元素 ， 则 此 函数 将 返回 第一个 找到 的
定义 网络
他们 包括 ：
一个   " TestCase "   实例 的 测试代码 必须 是 完全 自含 的 ， 因此 它 可以 独立 运行 ， 或 与 其它 任意 组合 任意 数量 的 测试用例 一起 运行
注解 :
将 功能 和 优先级 编码 为 一个 整数
除了 与 字典 类似 的 方法 ， " gdbm "   对象 还有 以下 方法 ：
这 相当于   Python   语句   " o [ key ]   v "
TarFile   对象
对   buffer   从 位置   offset   开始 根据 格式 字符串   format   进行 解包
在 macOS 上 ， 现在 默认 使用 的 启动 方式 是   spawn   启动 方式
如果   debug   为   " True " ， 事件 循环 将 以 调试模式 运行
文本 最好 在 空白符 位置 自动 换行 ， 包括 带 连 字符 单词 的 连 字符 之后 ； 长 单词 仅 在 必要 时会 被 拆分 ， 除非   " TextWrapper . break _ long _ words "   被 设为 假值
开始 和 结束   curses   应用程序
在   3.9   版 更改 :   Log   the   function   name   automatically .
" imghdr "   模块 推测 文件 或 字节 流中 的 图像 的 类型
以 脚本 的 方式 执行 模块
任何 有效 的 表达式 现在 都 可 被 用作   decorator
其他 序列 则 表示   UTF   8   和   UTF   32   编码 格式 中 的   BOM
" ' append ' "   存储 一个 列表 ， 并且 将 每个 参数值 追加 到 列表 中
对于 所有 其他 现有 成员 ， 则 都 将 返回   " None "
后面 两个 方法 是 为了 和   " aifc "   保持 兼容 ， 实际 不 做 任何 事情
注解 :
它 并 不 对   Python   程序 公开
或者 使用 内置 的   " sum ( ) "   和 一个 生成器 表达式 :
详情 参见 字 面值
要 计算 可 迭代 对象 自身 的 笛卡尔 积 ， 将 可选 参数   repeat   设定 为 要 重复 的 次数
" termios "   POSIX   风格 的   tty   控制
如果 有 多个 最大 元素 ， 则 此 函数 将 返回 第一个 找到 的
文档
" sunau "   读写   Sun   AU   文件
请 注意 ， 当 一个 栈 实例 被 垃圾 回收 时 ， 这些 回调 将 不会 被 隐式 调用
或者 ， 等价 于 ，
如果   n   被 省略 或 为   " None " ， " most _ common ( ) "   将 返回 计数器 中 的 所有 元素
" IPv4Address "   和   " IPv6Address "   对象 有 很多 共同 的 属性
如果 必须 存储 一个 不同 的 值 ， 则 必须 创建 新 的 对象
" keyword "   检验 Python 关键字
如果 第一个 元素 为 假性 值 ， 则 第二个 元素 将 被 原样 返回
有 几种 方法 可以 显示 程序 的 输出 ； 数据 可以 以 人类 可读 的 形式 打印 出来 ， 或者 写入 文件 以供 将来 使用
如果   data   为 空则 将 引发   " StatisticsError "
注意 异常 对象 的 Python 名字 是   " spam . error "
一个 简单 的 示例 集 :
3.2   新版 功能 :   恢复 二进制 转换
如果 给出 此 选项 ， " sys . argv "   的 首个 元素 将 为   " "   c " "   并且 当前目录 将 被 加入   " sys . path "   的 开头 （ 以 允许 该 目录 中 的 模块 作为 最高 层级 模块 被 导入 ）
使用   " eval ( ) "   保证 能 将 字符串 转换 回 具有 相同 类型 和 值 的 数组 ， 只要   " array "   类 已 通过   " from   array   import   array "   被 引入
运行   asyncio   程序
（ 如果 你 熟悉   Perl   的 模式 修饰符 ， 则 单 字母 形式 使用 和 其 相同 的 字母 ； 例如 ，   " re . VERBOSE "   的 缩写 形式 为   " re . X " 。 ） 多个 标志 可以 通过 按位 或 运算 来 指定 它们 ； 例如 ， " re . I   |   re . M "   设置   " I "   和   " M "   标志
二进制   I / O
与   GNU   " getopt ( ) "   不同 ， 在 非 选项 参数 之后 ， 所有 后续 参数 都 会 被 视为 非 选项
在   3.3   版 更改 :   " None "   现在 允许 被 用作   " raise   X   from   Y "   中 的   " Y "
3.1   新版 功能 .
Python   API   的 更改
当 用作 普通 值 而 非 布尔值 时 ， 短路 操作符 的 返回值 通常 是 最后 一个 变量
一个 默认   " fromutc ( ) "   实现 可能 无法 在 所有 情况 下 正确处理 的 例子 是 （ 与   UTC   的 ） 标准 时差 取决于 所 经过 的 特定 日期 和 时间 ， 这种 情况 可能 由于 政治 原因 而 出现
如果 指定 了   function   ， 它 将 被 用作 新 的 钩子 函数 ； 如果 省略 或 为   " None " ， 任何 已 安装 的 函数 将 被 移除
周 列表 的 元素 是 表示 日期 的 数字
与 普通 的 弱 引用 不同 ， 终结 器 将 总是 存活 ， 直到 引用 对象 被 回收 ， 这 极大 地 简化 了 生存期 管理
本 模块 提供 对   a   LAW 、 u   LAW   和   Intel / DVI   ADPCM   编码 的 支持
下 表列出 了 预定 义 的 颜色 ：
这些 字符 继承 自   VT100   终端 ， 在   X   终端 等 软件 模拟器 上 通常 均 为 可用
有关 安全性 或 加密 用途 ， 请参阅   " secrets "   模块
创建 一个 需要   parties   个 线程 的 栅栏 对象
（ 由   Derek   Morr   在   bpo   1655   和   bpo   1664   中 贡献 。 ）
注解 :
这个 模块 的   " timegm ( ) "   是 函数   " gmtime ( ) "   的 反函数
返回 系统 的 发布 版本 ， 例如   " ' 2.2 . 0 ' "   或   " ' NT ' " ， 如果 该值 无法 确定 则 将 返回 一个 空 字符串
从流 中 读取 至多   size   个字符 并 以 单个   " str "   的 形式 返回
形参 必须 不 为   " NULL "
文档
运算符   " | "   对 两个 参数 进行 按位   OR   ( 或 )   运算 ， 两个 参数 必须 为 整数
使用 此 函数 只能 读取   16   位 的 值 ， 无论 本 机   " short "   类型 的 长度 为何
双向 队列 ( deque ) 对象 支持 以下 方法 ：
如果 要 安装 调试 符号 或 二进制 文件 ， 您 需要 使用 此 选项
" ast "   模块 会 使用 新 解析器 并会 生成 与 旧 解析器 一致 的   AST
用   iterable   中 函数   function   返回 真的 那些 元素 ， 构建 一个 新 的 迭代 器
3.9   版后 已 移除 :   在 将来 ，   population   必须 是 一个 序列
打包 由 同质 条目 构成 的   list
例如 :
每个 这些 任务 均 已 在 此 文档 覆盖 .
尝试 取消 调用
函数 定义
相当于   " a [ len ( a ) : ]   iterable "
新增 和 改进 的 模块
返回 表示 当前 地方 时 的   date   和   time   对象
" xmlrpc "   XMLRPC   服务端 与 客户端 模块
当然 ， 你 可以 通过 访问   " value "   属性 来 获取 指针 的 值
" await "   " loop . getnameinfo ( ) "   异步 版 的   " socket . getnameinfo ( ) "
需要 注意 的 是 ， 已经 解除 对   objs   引用 的 对象 ， 但 仍 存在 于 循环 引用 中未 被 回收 时 ， 仍然 会 被 作为 引用 者 出现 在 返回 的 列表 当中
它 支持 多个 其他 实现 所 没有 的 高级 特性 ， 例如 非栈 式 支持 和   JIT   编译器 等
" Loader . exec _ module ( ) "   的 实现
参见 列表 、 集合 与 字典 的 显示
对于 数字   a   和   b   ， 返回   " a   b "
其他 文本文件 使用 上述 策略 用于 二进制 文件
以下 是 对 从   Python   3.4   到   Python   3.9   的 提升 提升 情况 的 总结 :
可选 的   paramflags   形 参会 创建 相比 上述 特性 具有 更 多功能 的 外部 函数 包装 器
列表 推导 式 的 结构 是 由 一对 方括号 所 包含 的 以下内容 ： 一个 表达式 ， 后面 跟 一个   " for "   子句 ， 然后 是 零个 或 多个   " for "   或   " if "   子句
bpo   38243 :   在 将 文档 页 渲染 为   HTML   时会 对   " xmlrpc . server . DocXMLRPCServer "   的 服务器 标题 进行 转义
在   3.7   版 更改 :   Added   the   encoding   and   errors   parameters
" nntplib . NNTP " :   " xpath ( ) "   和   " xgtitle ( ) "   方法 已 被 移除
这 是 个 真实 的 故事
例如 ，   " 1.3   1.2 "   结果 是   " 1.56 "   而   " 1.30   1.20 "   结果 是   " 1.5600 "
C   API   的 改变
类型 别名 的 作用 是 简化 类型 提示
输出 ：
3.7   版后 已 移除 .
或者 ， 根据 下表 ， 格式 字符串 的 第一个 字符 可 用于 指示 打包 数据 的 字节 顺序 ， 大小 和 对齐 方式 ：
如何 修改 字符串 ？
如果 不 一定 需要 前缀 “ 0b ” ， 还 可以 使用 如下 的 方法
其他 可能 的 值 为   " FORMAT _ XZ " ,   " FORMAT _ ALONE "   和   " FORMAT _ RAW "
一元 运算符   "   "   ( 负 )   会 产生 其 数值 参数 的 负值
如果   " sys . stdin "   被 使用 超过 一次 ， 则 第二次 之后 的 使用 将 不 返回 任何 行 ， 除非 是 被 交互式 的 使用 ， 或 都 是 被 显式 地 重置   ( 例如 使用   " sys . stdin . seek ( 0 ) " )
重入 锁 必须 由 获取 它 的 线程 释放
要 了解 更 多 详情 ， 请 先 查看   Python   教程
在 实际操作 中 ， 当 一个 小 版本 最终 发布 后 ， 未 发布 版本号 会 递增 到 下 一个 小 版本号 ， 成为 “ a0 ” 版本 ， 例如 “ 2.4 a0 ”
encoding   为 输出 流 的 编码 格式 ， 它 默认 将 为   " ' iso   8859   1 ' "
它会 返回 一个 可 调用 的 对象 ， 所以 你 能够 直接 调用 这个 结果 以 使用 给定 参数 的   " function "
在   3.8   版 更改 :   添加 了   " name "   形参
在   3.7   版 更改 :   当 配合   C   API   子 解释器 使用 时 ， 已 注册 函数 是 它们 所 注册 解释器 中 的 局部 对象
3.3   版后 已 移除 :   使用   " MetaPathFinder "   或   " PathEntryFinder "   来 代替
Cookie   对象
返回 一个 完整 的   HTML   页面 作为 指定 年份 的 日历
删除 和 弃 用 的 模块
3.3   版后 已 移除 .
当 你 从 可能 会 为了 等待 更 多 输入 而 阻塞 的 数据流 当中 读取 消息 （ 比如 从套 接字 当中 读取 电子邮件 消息 ） 的 时候 ， " FeedParser "   会 更 合适
" tkinter "   也 以 比较 过时 的 外观 为人所知 ， 但 在 Tk   8.5 中 ， 这 一点 得到 了 极大 的 改观
" decimal "   模块 支持 使用 任意 精度 算术 的 十进制 数 的 精确 表示
PEP   563 ： 延迟 的 标注 求值
这 属于 具体 实现 的 特定 行为 ， 不 保证 能 在 其他   Python   实现 中起 作用
如果 被 引用 的 属性 名称 表示 一个 有效 的 类 属性 中 的 函数 对象 ， 会 通过 打包 （ 指向 ） 查找 到 的 实例 对象 和 函数 对象 到 一个 抽象 对象 的 方式 来 创建 方法 对象 ： 这个 抽象 对象 就是 方法 对象
如果 未 提供   " module " ， 且   Enum   无法 确定 是 哪个 模块 ， 新 的   Enum   成员 将 不可 被 解封 ； 为了 让 错误 尽量 靠近 源头 ， 封存 将 被 禁用
Beta   分布
" tkinter . ttk "   Tk 主题 部件
我们 预想 应该 打印   " 3   4   1   2 "
移植 到   Python   3.2
errors   参数 将 被 赋值 给 一个 同名 的 属性
3.8   新版 功能 :   " profile "   添加   "   m "   选项
发布 日期 :   2017   12   05
该 未命名 对象 的 行为 类似 于用 以下 方式 定义 的 函数 :
Qt   4.5   以上 版本 使用   LGPL   进行 许可 ； 此外 ， 商业 许可证 可 从   Qt   公司 那里 获得
将 一个 海龟 形状 加入   TurtleScreen   的 形状 列表
要 为 两者 指定 不同 的 值 ， 请 将   " PYTHONHOME "   设 为   "   prefix   :   exec _ prefix   "
" lzma "   用   LZMA   算法 压缩
"   v "   选项 可以 输出 更 多 转换 程序 的 详细信息
只有 这样 注册 过 的 形状 才能 通过 执行   " shape ( shapename ) "   命令 来 使用
引发 一个 审计 事件   " winreg . SaveKey " ， 附带 参数   " key " ,   " file _ name "
" xml . dom " ： DOM   API   定义
返回 具有 行 缓冲 的 正常   " cooked "   模式
进程 池
在 原生   C   " ctime ( ) "   函数   ( " time . ctime ( ) "   会 发起 调用 该 函数 ， 但   " datetime . ctime ( ) "   则 不会 )   遵循   C   标准 的 平台 上
3.4   新版 功能 .
传递 指针 （ 或 以 引用 方式 传递 形参 ）
参见 :
核心 与 内置
考虑 到 便利性 ， 也 由于 其 在   Python   解释器 中 被 广泛 使用 ， " " Python . h " "   还 包含 了 一些 标准 头文件 :   " < stdio . h > " ，   " < string . h > " ， " < errno . h > "   和   " < stdlib . h > "
配置文件 可以 包含 注释 ， 要 带有 指定 字符 前缀   ( 默认 为   " # "   和   " ; "   [ 1 ] )
解释 该 参数 ， 就 好像 它 是 为 响应 提示 而 键入 的 一样
其他 语言 特性 修改
asyncio   支持
" bz2 "   对   bzip2   压缩算法 的 支持
" await "   " loop . sock _ accept ( ) "   接受 一个   " socket "   链接
核心 与 内置
有关   " KeyboardInterrupt "   的 说明 ， 该 异常 可能 发生 于 此 代码 的 其他 位置 ，   并且 并 不 总能 被 捕获
调用 存活 的 终结 器 将 返回   " func (   arg ,   kwargs ) "   的 求值 结果 ， 而 调用 死亡 的 终结 器 将 返回   " None "
如果 当前 上下文 引用 了 一个 文件 则 返回   " True "
名称 和 对象
参数 :   x   一个 数值 或 数值 对 / 矢量 ， 或 一个 海龟 实例
请 注意   Windows   7   用户 还 需要 确保   Windows   更新包   KB2533623   已 安装   （ 这 一点 也 会 由 安装 器 进行 验证 ）
如果   align   为 假值 ， 则 不 使用 对齐
对于 一般 的   Python   对象   " number " ,   " round "   将 委托 给   " number .__ round __ "
注解 :
对于 序列 ， 存在 随机 元素 的 统一 选择 、 用于 生成 列表 的 随机 排列 的 函数 、 以及 用于 随机抽样 而 无需 替换 的 函数
参见   " extract ( ) "   的 注释
如果 序列 包含 制表符 则 这些 行 可能 会 令人 感到 迷惑
它们 也 可以 用成 对 的 连续 三个 单引号 或 双引号 来 标示 首尾   ( 这 通常 被 称为 三 引号 字符串   )
新 的 特性
原始 项目 不必 具有 可比性 ， 因为 装饰 元组 的 排序 最多 由 前 两项 决定
如果   override   为 真值 ， 则 如果 在   b   中 找到 相同 的 键 则   a   中 已 存在 的 相应 键值 对 将 被 替换 ， 否则 如果 在   a   中 没有 相同 的 键 则 只是 添加 键值 对
此 模块 针对 图形 和 科学 计算器 的 水平
如果 缺少 这些 内容 ， 则 将 不会 记录 该 消息 ， 因为 会 引发 字符串 格式化 异常
使用   " _ structure "   除错 帮助 函数 可以 帮助 我们 在 下面 这个 例子 当中 看清楚 这 一点 ：
代码 对象 的 第一个 源代码 行 （ 如果 可用 ）
" typing . NamedTuple "   类 的   " _ field _ types "   属性 已 被 移除
Python   +   Windows   +   distutils   +   SWIG   +   gcc   MinGW   或   " Creating   Python   extensions   in   C / C++   with   SWIG   and   compiling   them   with   MinGW   gcc   under   Windows "   或   " Installing   Python   extension   with   distutils   and   without   Microsoft   Visual   C++ "   by   S é bastien   Sauvage ,   2003
在   3.3 . 1   版 更改 :   NFS   files   are   ignored .
如果   op   对象 的 类型 实现 了   GC   协议 且   op   已经 被 垃圾 回收 器 终结 则 返回   1 ，   否则 返回   0
这 改善 与 与 子 解释器 的 兼容性 及 它们 在 关闭 进程 时 的 可预测性
这种 比较 的 具体 执行 可能 会 取决于 应用 域 的 不同 ， 例如 是否 要 区分 大小写 等等
赋值 表达式 使用 海象 运算符   :   在 表达式 中为 变量 赋值 :
C 很难 写 ， 有没有 其他 选择 ？
其 参数 为 一个 对象 、 一个 字符串 和 一个 任意 值
Action   类 必须 接受 两个 位置 参数 以及 传给   " ArgumentParser . add _ argument ( ) "   的 任何 关键字 参数 ， 除了   " action "   本身
如果   x   是 无限 的 则 返回   " True " ； 否则 返回   " False "
用于 为   " __ repr __ ( ) "   方法 检测 同一 线程 内部 递归 调用 的 装饰 器
bpo   28791 :   更新   OS   X   安装程序 以 使用   SQLite   3.21 . 0 .
此 行为 相当于   Python   2.6   中不带 参数 的   " fill ( ) "   调用
有 两种 方式 都 可以 做到 这件 事 ：
" ' ignore ' "   忽略 错误
历史 、 中断点 、 动作 和 调试器 选项 将 被 保留
close _ fds   为 假值 ；
如果 你 使用 动态 加载 ， 这 取决于 你 使用 的 操作系统 的 动态 加载 机制 ；   更 多 信息 请 参考 编译 扩展 模块 的 章节 （   构建 C / C++ 扩展 章节 ） ， 以及 在   Windows   上 编译 需要 的 额外 信息 （   在   Windows   上 构建   C   和   C++   扩展 章节 ）
（ 与其 相对 的 是   " program "   模式 ， 即 程序 使用 功能 。 ）   对   " reset _ shell _ mode ( ) "   的 后续 调用 将 恢复 此 模式
" _ fields _ "   是 一个二元 组 列表 ， 二元 组中 包含   field   name   和   field   type
这个 例子 是 使用   " bisect ( ) "   从 一个 给定 的 考试成绩 集合 里 ， 通过 一个 有序 数字 表 ， 查出 其 对应 的 字母 等级 ： 90   分及 以上 是   ' A ' ， 80   到   89   是   ' B ' ， 以此类推
可以 给定   Errors   以 设置 所 需要 的 错误处理 方案
其中 的 列 是 ：
" Sniffer "   类 提供 了 两个 方法 ：
此 模块 提供 的 简单 接口 帮助 用户 压缩 和解 压缩文件 ， 功能 类似 于   GNU   应用程序   gzip   和   gunzip
有时候 ， 你 希望 使用 UTC 来 格式化 时间 ， 这 可以 使用 一个 类来 完成 ， 例如   ` UTCFormatter ` ， 如下 所示 ：
Cell   对象
也 可 使用   " DictReader "   类 和   " DictWriter "   类以 字典 的 形式 读写 数据
3.4   新版 功能 .
在   3.6   版 更改 :   fold   值会 被 复制 给 返回 的   " time "   对象
不 保证 CPython 版本 之间 的 探针 兼容性
" while "   语句
IP   地址
安装 二进制 编译 扩展
定义 清理 操作
纯 路径
我 怎样 在 Windows 下 运行 一个 Python 程序 ？
常数   意义   " KQ _ NOTE _ LINKUP "   链接 已 建立   " KQ _ NOTE _ LINKDOWN "   链接 已 断开   " KQ _ NOTE _ LINKINV "   链接 状态 无效
元组 是   immutable   （ 不可 变 的 ） ， 其 序列 通常 包含 不同 种类 的 元素 ， 并且 通过 解包 （ 这 一节 下面 会 解释 ） 或者 索引 来 访问 （ 如果 是   " namedtuples "   的话 甚至 还 可以 通过 属性 访问 ）
作为 一个 单例 对象 ， 其 所属 的 类 是 不可 被 继承 的
返回 一个 包含 字典 中 所有 键 ( keys ) 的   " PyListObject "
字 面值
是 的 ， 相关 的 书籍 很多 ， 还有 更 多 即将 发行
返回 给定 窗口 的 当前 背景 字符 / 属性 对
（ 由   Victor   Stinner   在   bpo   40421   中 贡献 。 ）
如果 找 不到 名为   filename   的 文件 ， 此 函数 会先 在   module _ globals   中 检查   PEP   302   " __ loader __ "
当 一个 冻结 模块 被 导入 ， 首先 要 在 这个 表中 搜索
" re . compile ( ) "   也 接受 一个 可选 的   flags   参数 ， 用于 启用 各种 特殊 功能 和 语法 变体
" pip   list "   将 显示 虚拟环境 中 安装 的 所有 软件包 ：
它们 在 比较 时 一定 不 相同 （ 除非 是 与 自己 比较 ） ， 它们 的 哈希 值 的 生成 是 基于 它们 的   " id ( ) "
致谢
此 信息 来自 在 系统 中 找到 的 所有   mailcap   文件
ConfigParser   对象
记录 流程
返回 自 打开 数据库 连接 以来 已 修改 ， 插入 或 删除 的 数据库 行 的 总数
随后 记录 会 被 写入 到   " terminator "   之后 的 流中
默认 模式 为   " ' r ' "   ( 打开 用于 读取 文本 ， 与   " ' rt ' "   同义 )
可用性 :   POSIX   和   Windows
Sunday ,   Monday ,   ... ,   ( 1 )   Saturday   ( en _ US ) ;   Sonntag ,   Montag ,   ... ,   Samstag   ( de _ DE )   " % w "   以 十进制 数 显示 的 工作日 ， 其中 0 表   0 ,   1 ,   ... ,   6   示 星期日 ， 6 表示 星期六
当 一个 次 标准 数 结果 通过 舍入 转为 零时 就 会 发出 此 信号
许多   Python   内置 类型 （ range ,   tuple ,   set ,   frozenset ,   list ,   dict ） 现在 通过 使用   PEP   590   vectorcall   获得 了 加速 ；
否则 禁用 调试
列表 的 更 多 特性
例如 ， Python   的 常用 风格 是 使用   " for "   语句 循环 来 遍历 一个 可 迭代 对象 中 的 所有 元素
（ 由   Johnny   Najera   在   bpo   38944   中 贡献 。 ）
因此 ， 一个 位置 参数   " dest   ' bar ' "   的 引用 形式 将 为   " bar "
如果 两 运算 数 不 相等 ， 返回 在 第二个 操作数 的 方向 上 最 接近 第一个 操作数 的 数
返回 当 给定 的   cmd   被 调用 时 将要 运行 的 可执行文件 的 路径
3.9   新版 功能 .
正则 被 处理 为 字符串 ， 因为 正则表达式 不是 核心 Python 语言 的 一部分 ， 并且 没有 创建 用于 表达 它们 的 特殊 语法
根据 格式 字符串   format   从 缓冲区   buffer   解包 （ 假定 是 由   " pack ( format ,   ... ) "   打包 ）
与 它们 密切相关 的   WAVE   音频文件 也 可 使用 此 模块 来 读取
模板 字符串 支持 基于   " $ "   的 替换 ， 使用 以下 规则 ：
如果 可 选 参数   block   是   true   并且   timeout   是   " None "   ( 默认值 ) ， 则 在 必要 时 阻塞 至 项目 可 得到
实现 描述 器
可用   API
C   API   的 改变
当 后续 消息 交由 同一 实例 处理 时 ， 它 将 不会 尝试 连接 直到 经过 一段时间 以后
已弃 用 的   C   API   函数 和 类型
本章 描述 的 模块 实现 了 主要 用于 多媒体 应用 的 各种 算法 或 接口
这里 结果 的   C   字符串 可能 包含 嵌入 的   NUL   字节
类型接口 注释
对于   " ' w : gz ' " ,   " ' r : gz ' " ,   " ' w : bz2 ' " ,   " ' r : bz2 ' " ,   " ' x : gz ' " ,   " ' x : bz2 ' "   等 模式 ， " tarfile . open ( ) "   接受 关键字 参数   compresslevel   ( 默认值 为   " 9 " )   来 指定 文件 的 压缩 等级
返回 一个 对象 列表 ， 包含   list   当中 位于   low   和   high   之间 的 对象
注解 :
如果 我们 运行 生成 的 脚本 ， 结果 如下 ：
简单 型 对象 更 易于 理解 和 使用 ， 代价 则 是 忽略 了 某些 现实性 考量
和 :
参数 以 空白符 分隔 ， 即 空格符 或 制表符
在 这种 情况 下 ， 网络 被 认为 只 包含 由 整数 标识 的 单个地址 ， 因此 网络 前缀 包括 整个 网络地址 :
为什么 原始 字符串 （ r   strings ） 不能 以反 斜杠 结尾 ？
UnknownHandler   对象
模块 实现 了 三种 类型 的 队列 ， 它们 的 区别 仅仅 是 条目 取回 的 顺序
Python   3.6   有 什么 新 变化
DataHandler   对象
返回   " None "
编译 正则表达式
每当 有 相关 的 进展 时 ， 您 都 会 收到 通知
由于   0.1   在 二进制 浮点 中 不能 精确 表示 ， 因此 该值 存储 为 最 接近 的 可 表示 值 ，   即   0x1.999999999999 ap   4
你 还 可能 看到 带有 “ + ” 后缀 的 版本号 ， 例如 “ 2.2 + ”
通过 在 编译 正则表达式 时 提供   " re . ASCII "   标志 ， 可以 在 字符串 模式 中 使用 更为 受限制 的   " \ w "   定义
decl   形参为   " < ! ... > "   标记 中 的 所有 内容 （ 例如 ：   " ' DOCTYPE   html ' "   ）
模块 规格 说明 的 目的 是 基于 每个 模块 来 封装 这些 导入 相关 信息
Python   3.7 . 1   中 的 重要 变化
于 其 相对 的 则 是 所谓   LBYL   风格 ， 常见于   C   等 许多 其他 语言
GTK +   3   可视化 部件 集 就是 此类 函数库 中 的 一个
另 请参阅   " PYTHONOLDPARSER "   和   PEP   617
返回 新 的 文件大小
可以 使用 各种 标准 错误 处理程序 （ 列 在 错误处理 方案   ） ， 但是 使用   " codecs . register _ error ( ) "   注册 的 任何 错误处理 名称 也 是 有效 的
文件 对象   " Popen . stdin "   、   " Popen . stdout "   和   " Popen . stderr "   的 换行符 属性 不会 被   " Popen . communicate ( ) "   方法 更新
除了 这 两种 形式 之外 ， 还有 两种 基于 兼容性 等效 的 其他 常规 形式
如果 流 支持 随机 访问 则 返回   " True "
" epilog "   ( 默认 :   " None " )   A   paragraph   of   help   text   to   print   after   the   option   help .
有效 字符串 参数   有效 枚举 参数   含义   " ' calls ' "   SortKey . CALLS   调用 次数   " ' cumulative ' "   SortKey . CUMULATIVE   累积 时间   " ' cumtime ' "   N / A   累积 时间   " ' file ' "   N / A   文件名   " ' filename ' "   SortKey . FILENAME   文件名   " ' module ' "   N / A   文件名   " ' ncalls ' "   N / A   调用 次数   " ' pcalls ' "   SortKey . PCALLS   原始 调用 计数   " ' line ' "   SortKey . LINE   行号   " ' name ' "   SortKey . NAME   函数 名称   " ' nfl ' "   SortKey . NFL   名称 / 文件 / 行   " ' stdname ' "   SortKey . STDNAME   标准 名称   " ' time ' "   SortKey . TIME   内部 时间   " ' tottime ' "   N / A   内部 时间
而   " j "   为 正值 的 情况 则 非常 多 ， 并且 实际上 在 所有 情况 下 让   " i   %   j "   的 结果 为   " >   0 "   会 更 有 用处
例如 :
文件名
color _ number   值 必须 为   " 0 "   和   " COLORS "   之间 的 数字
将来 可能 会 添加 其他 标记
" date "   类型 的 对象 都 是 简单 型 的
但是 ， 如果   " path "   为   " str "   类型 并且 是 一个 绝对路径 ，   " open _ code ( path ) "   的 行为 应当 总是 与   " open ( path ,   ' rb ' ) "   一致
operator   模块
" ' AF _ INET ' "   地址 是   " ( hostname ,   port ) "   形式 的 元组 类型 ， 其中   hostname   是 一个 字符串 ，   port   是 整数
例如 ，   一个 纯 的 Python   " del   d [ n ] "   实现 依赖于   " rotate ( ) "   来 定位 要弹 出 的 元素
模板 字符串
在 类 中 使用   " create _ autospec ( ) "   时 ， 会 复制   " __ init __ "   方法 的 签名 ， 另外 在 可 调用 对象 上 使用 时 ， 会 复制   " __ call __ "   方法 的 签名
舍入 设 为   " ROUND _ HALF _ UP "
" itertools . ifilterfalse ( ) "   会 替换成   " itertools . filterfalse ( ) "
在 某些 情况 下 ， 你 可能 希望 在 临时 区域 中 记录 日志 消息 ， 并且 只 在 发生 某种 特定 的 情况 下才 输出 它们
调用   < source > . dnd _ end ( target ,   event )   来 表明 拖放 的 结束
关闭 序列
allow _ no _ value   ， 默认值 :   " False "
最后 ， 它 展示 了 如何 编译 和 链接 扩展 模块 ， 以便 它们 可以 动态 地 （ 在 运行 时 ） 加载 到 解释器 中 ， 如果 底层 操作系统 支持 此 特性 的话
此 页面 仅 包含 参考 信息
在   3.2   版 更改 :   添加 了   source _ address
以 不 透明 数字 形式 返回 当前 流 的 位置
3.9   新版 功能 .
" collections . abc "   容器 的 抽象 基类
" parse _ known _ intermixed _ args ( ) "   返回 由 两个 条目 组成 的 元组 ， 其中 包含 带 成员 的 命名 空间 以及 剩余 参数 字符串 列表
" JUMP _ IF _ NOT _ EXC _ MATCH "   用于 检查   ' try   except '   语句 中 的 异常
[ 1 ]   sqlite3   模块 默认 没有 构建 可 加载 扩展 支持 ， 因为 有 一些 平台 带有 不 支持 这个 特性 的   SQLite   库 （ 特别 是   Mac   OS   X ）
在 苹果 系统 上 使用   Python
此 函数 在 大多数 终端 上 都 是 无 操作 的 ； 它 仅会 在   " can _ change _ color ( ) "   返回   " True "   时 生效
可 打印 字符 则 会 保持 原样
Python / C   API   参考手册
不 存在 的 项目 不会 添加 到   " sys . path " ， 并且 不会 检查 项目 指向 的 是 目录 还是 文件
失败 时 返回   "   1 "
" a2b _   "   函数 接受 只 含有   ASCII   码 的 Unicode   字符串
" asyncio "   异步   I / O
这些 改变 的 累积 效应 是 ， 让 生成器 从 单向 的 信息 生产者 变成 了 既 是 生产者 ， 又 是 消费者
" zipfile "   使用 ZIP 存档
PEP   3127 :   整型 文字 支持 和 语法
对于 简单 的 输入 解析 ， 最 方便 的 做法 通常 是 使用 字符串 对象 的   " split ( ) "   方法 将 一行 内容 拆解 为 以 空格 分隔 的 单词 ， 然后 使用   " int ( ) "   或   " float ( ) "   将 表示 十进制 数 的 字符串 转换 为 数值
如果   data   包含 的 值 少于 两个 则 会 引发   " StatisticsError "
数据流 格式
从   3.6 . 4   rc1   到   3.6 . 4   正式版 中 没有 新 的 代码 更改
在 标注 变量 或类 属性 时 ， 还 可 选择 为 其 赋值 :
它 的 值 表示 内部 字典 结构 中 的 偏移量 ，   并且 由于 结构 是 稀疏 的 ， 因此 偏移量 并 不 连续
如果   stop   为   " None " ， 迭代 器耗光 为止 ； 否则 ， 在 指定 的 位置 停止
现在   socket   模块 会 在 支持 的 平台 上 支持   " CAN _ J1939 "   协议
在   3.3   版 更改 :   此 模块 中 过去 会 引发   " IOError "   的 操作 现在 将 引发   " OSError "
这个 模块 定义 了 以下 类型 ：
海龟 形状 自其 当前 的 倾角 转动   angle   指定 的 角度 ， 但 不 改变 海龟 的 朝向   ( 移动 方向 )
要求 参数 的 长 选项 后 应当 带 一个 等 号   ( " '   ' " )
它 用于 归档 需要 一起 执行 的 测试
记住 ， 往 队列 放入 数据 的 进程 会 一直 等待 直到 队列 中 所有 项 被 " feeder "   线程 传给 底层 管道
形式 证明
3.9   新版 功能 .
" linecache "   随机 读写 文本 行
excludes   是 要 从 分析 中 排除 的 模块 名称 列表
" token "   与 Python 解析 树 一起 使用 的 常量
栅栏 对象
杂项 服务
模块 内容
要 使 你 的 自定义   Enum   的 布尔值 取决于 成员 的 值 ， 请 在 你 的 类 中 添加 以下 代码 :
在   Infinity   上 引发   OverflowError   ， 在   NaN   上 引起   ValueError
第二个 目的 是 实现   " import "   的 部分 被 公开 在 这个 包中 ， 使得 用户 更 容易 创建 他们 自己 的 自定义 对象   ( 通常 被 称为   importer   )   来 参与 到 导入 过程 中
相对 于 通常 的 映射 方法 ， 有序 字典 还 另外 提供 了 逆序 迭代 的 支持 ， 通过   " reversed ( ) "
这个 方法 被 用于 处理   " & name ; "   形式 的 命名 字符 引用 （ 例如   " & gt ; " ） ， 其中   name   是 通用 的 实体 引用 （ 例如 ：   " ' gt ' " ）
在   3.4   版 更改 :   新 的 文件 描述符 现在 是 不可 继承 的
如果 所 传入 的 不是 绝对路径 则 将 引发   " ValueError "
除 幂 运算符 以外 只有 两个 优先 级别 ， 一个 作用 于 乘法 型 运算符 ， 另 一个 作用 于 加法 型 运算符 :
除了 方法 查找 之外 ， " super ( ) "   也 可 用于 属性 查找
" StreamReaderWriter "   是 一个 方便 的 类 ， 允许 对 同时 工作 于 读取 和 写入 模式 的 流 进行 包装
如果 给定 的   JSON   文档 无效 则 将 引发   " JSONDecodeError "
请求   形状   步幅   子 偏移量   邻接   PyBUF _ C _ CONTIGUOUS   是   是   NULL   C   PyBUF _ F _ CONTIGUOUS   是   是   NULL   F   PyBUF _ ANY _ CONTIGUOUS   是   是   NULL   C   或   F   " PyBUF _ ND "   是   NULL   NULL   C
请 使用   ! s   和   ! r   格式 代码 来 强制 使用   " Enum "   类 的   " __ str __ ( ) "   和   " __ repr __ ( ) "   方法
3.2   新版 功能 .
并发 运行 任务
这种 标记 形式 的 一个 用例 是 它 允许 纯   Python   函数 完整 模拟 现有 的 用   C   代码 编写 的 函数 的 行为
callable   是 一个 用来 为此 类型 标识符 创建对象 的 可 调用 对象
相当于 :
注解 :
本文 介绍 了 2005 年 3 月 30 日 发布 的   Python   2.4 . 1   的 新 功能
在 窗口 边缘 绘制 边框
安装   Python   模块   The   end   user   guide   for   installing   Python   packages
" copy "   浅层   ( shallow )   和 深层   ( deep )   复制 操作
锁定 指定 的 字节 数据
返回 捕获 生成器 当前 内部 状态 的 对象
在   Perl   语言 中 称为   hash
长 选项 与 短 选项 可以 混用
序列 解包 要求 等 号 左侧 的 变量 数 与 右侧 序列 里 所 含 的 元素 数 相同
用于 创建 和 管理 虚拟环境 的 模块 称为   " venv "
因此 ， 全局变量 和 外层 函数 的 变量 不能 在 函数 内部 直接 赋值 （ 除非 是 在   " global "   语句 中 定义 的 全局变量 ， 或者 是 在   " nonlocal "   语句 中 定义 的 外层 函数 的 变量 ） ， 尽管 它们 可以 被 引用
PEP   530   异步 推导   PEP   由   Yury   Selivanov   撰写 并 实现
它 对应 于 十进制 数值 :
项目 不会 被 添加 到   " sys . path "   超过 一次
构建
因此 ， 如果 一个 外部 函数 的   " restype "   是   " c _ void _ p "   的 一个 子类 ， 你 将 从 函数调用 得到 一个 该 子类 的 实例
如果 给出 了 非   " None "   的   lock   参数 ， 则 它 必须 为   " Lock "   或者   " RLock "   对象 ， 并且 它 将 被 用作 底层 锁
为了 开始 搜索 ， Python   需要 被 导入 模块 （ 或者 包 ， 对于 当前 讨论 来说 两者 没有 差别 ） 的 完整 限定 名称
检查   PEP   11   了解 所有 不 支持 的 平台 的 详细信息
如果   file _ or _ dir   是 目录 而 非 符号 链接 ， 则 递归 地 在 名为   file _ or _ dir   的 目录 树中 下行 ， 沿途 检查 所有   " . py "   文件
它们 具有 下列 属性 :
函数 可以 带有 “ 返回 ” 标注 ， 其 形式 为 在 形参 列表 后 加上   " "   >   expression " "
使用 自定义 过滤器 链 创建 一个 已 压缩文件 :
集合
" Process "   对象 中 的   " sentinel "   属性
（ 有些 应用程序 根本 不 需要 正则 ， 因此 不 需要 通过 包含 它们 来 扩展 语言 规范 。 ）   相反 ， " re "   模块 只是 Python 附带 的 C 扩展 模块 ， 就 类似 于   " socket "   或   " zlib "   模块
在   Mac   上 分发   Python   应用程序
从 命令行   ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
" atexit "   退出 处理器
日志 操作手册
封存
当 请求 零 字节 时 ， 新 的 分配器 必须 返回 一个 独特 的 非   " NULL "   指针
在   3.3   版 更改 :   Previous   versions   of   " run "   did   not   return   the   result
" CookieJar "   实例 在 必要 时 自动 处理 包含   cookie   的 到期 情况
如果 两 操作数 数值 上 相等 ， 返回 将 符号 设置 为 与 第二个 运算 数 相同 的 第一个 运算 数 的 拷贝
是 对 字符串 文本 的 指令 ， 用于 返回 由 给定 分隔符 分隔 的 子 字符串 （ 或 在 默认 情况 下 ， 返回 任意 空格 ）
一个 事件 通过 一些 包含 变量 数据 的 描述 信息 来 描述 （ 比如 ： 每个 事件 发生 时 的 数据 都 是 不同 的 ）
ZipInfo   对象
如果 禁用 了   tracemalloc   则 返回   "   2 "
摘要 发布 重点
部分 输入 数据 可能 会 被 保留 在 内部 缓冲区 以供 后续 处理
派生 的 枚举
打印 由   " month ( ) "   返回 的 一个月 的 日历
可 等待 对象 有 三种 主要 类型 :   协程   ,   任务 和   Future   .
添加 了   " statistics . fmean ( ) "   作为   " statistics . mean ( ) "   的 更 快速 的 浮点数 版 版本
Jim   Roskind 建议 在 每个 模块 中 按 以下 顺序 执行 步骤 ：
注解 :
此外 ， 适用 于 Python 的 Windows 和 Mac   OS   X 安装程序 可能 包括 OpenSSL 库 的 拷贝 ， 所以 在 此处 也 列出 了 OpenSSL 许可证 的 拷贝 :
" import "   语句 结合 了 两个 操作 ； 它 先 搜索 指定 名称 的 模块 ， 然后 将 搜索 结果 绑定 到 当前 作用域 中 的 名称
标记 为 刷新 但 保持 等待
在 大多数 时候 ， " parse _ args ( ) "   所 返回 对象 的 属性 将 完全 通过 检查 命令行 参数 和 参数 动作 来 确定
保留 的 标识符 类
在   3.4   版 更改 :   位置 参数 说明符 对于   " Formatter "   可以 省略
在   Unix   上 ， 它 就是 以 斜杠 开头 ， 而 在   Windows   上 ， 它 可以 是 去掉 驱动器 号 后 以 斜杠 （ 或 反 斜杠 ） 开头
对于 多 分支 产生 式 ( 也 就是 " 和 规则 " ) ， 树 右侧 的 类 是 抽象 的 ； 只有 特定 构造 器 结点 的 实例 能 被 构造
tarinfo   参数 可以 被 用来 将 默认 的   " TarInfo "   类 替换 为 另 一个
从 标准 输入   ( " sys . stdin " )   读取 命令
所有 整数 都 使用 以 任意 大小 的 长 整数 对象 表示
目标 必须 为 一个 可 调用 对象 ， 其 结果 将 被 解读 为 一个 布尔值
浮点 数字 面值 允许 的 范围 依赖于 具体 实现
该 信息 的 最 简单 形式 是 “ 网络地址 / 网络 前缀 ” 对 ，   其中 前缀 定义 了 比较 的 前导 比特 数 ， 以 确定 地址 是否是 网络 的 一部分 ， 并且 网络地址 定义 了 那些 位 的 预期 值
列表 推导 式 可以 使用 复杂 的 表达式 和 嵌套 函数
如果 生成器 函数 没有 捕获 传入 的 异常 ， 或 引发 了 另 一个 异常 ， 则 该 异常 会 被 传播 给 调用者
如果 一个 管理器 实例 将 使用   " connect ( ) "   方法 连接 到 服务器 ， 或者   create _ method   参数 为   " False " ， 那么 这里 可 留下   " None "
文档
重要 :
3.7   新版 功能 .
这 一节 的 剩余 部分 只 适用 于   MSV C++
转换   ST   对象
在 Python 层面 和 类型   " list "   是 同一个 对象
这些 优化 机会 对于   CPython   来说 仅能 通过 一组 有限 的 别名   （ 大小写 不 敏感 ） 来 识别 ： utf   8 ,   utf8 ,   latin   1 ,   latin1 ,   iso   8859   1 ,   iso8859   1 ,   mbcs   ( Windows   专属 ) ,   ascii ,   us   ascii ,   utf   16 ,   utf16 ,   utf   32 ,   utf32 ,   也 包括 使用 下划线 替代 连 字符 的 的 形式
用于 实现 列表 推导 式
模块 内容
[   套 接字   ]
别名   " open _ new ( ) "
" Control   K "   如果 行为 空 ， 则 删除 它 ， 否则 清除 到 行尾
可用性 :   Solaris .
输出 到 命令行
关于 更 多 信息 ， 详见   " email . errors "
[   脚注   ]
在   3.8   版 更改 :   Characters   that   affect   netloc   parsing   under   NFKC   normalization   will   now   raise   " ValueError " .
那么 :
显示 内存 分配 最多 的 10 个 文件 ：
使用 此宏 之后 ，   " tp _ traverse "   处理程序 的 形式 如下 :
锁 中 的 方法 在 后面 描述
用于 加载 一个 模块 的 传统 方法
例如 :
PEP   420   隐式 命名 空间 包   PEP   由   Eric   V
与 模糊 的 语法 相关 的 警告 的 基类
Reader   和   Writer   必须 为 分别 提供 了   " StreamReader "   和   " StreamWriter "   接口 对象 的 工厂 函数 或类
这是 可行 的 ， 是 通过 对   " A "   的 认识 实现 的 ， 因此 这 可以 在 交给   " Complex "   处理 之前 处理 这些 实例
然而 ， " __ del __ ( ) "   方法 的 处理 会 严重 地 受到 具体 实现 的 影响 ， 因为 它 依赖于 解释器 垃圾 回收 实现 方式 的 内部 细节
仅当 缓冲区 是 通过 保证 连续性 的 请求 获取 时 ， 才 访问   " ( ( char   ) buf ) [ 0 ]   up   to   ( ( char   ) buf ) [ len   1 ] "   时才 有效
代表   C   " signed   int "   数据类型
转换 一个 元组 或   " struct _ time "   表示 的 由   " gmtime ( ) "   或   " localtime ( ) "   返回 的 时间 到 由   format   参数 指定 的 字符串
然而 不同于   " Any " ， 反之 并 不 成立 ：   " object "   不是 其他 所有 类型 的 子 类型
文件 描述符 操作
函数   " PyNode _ AddChild ( ) "   和   " PyParser _ AddToken ( ) "   现在 接受 两个 额外 的   " int "   参数   end _ lineno   和   end _ col _ offset
序列   解释   未读   未 读取 ， 但 先前 被 MUA 检测 到   已 回复   回复 给   已 标记   标记 为 重要
在   3.3   版 更改 :   timeout   被 添加
因为 元组 被 认为 是 不可 变 的 ， 所以 只有 在 对象 仅 有 一个 引用 时 ， 才 应该 使用 它
如果 它们 在 小节 中 被 覆盖 ， 删除 将 导致 默认值 重新 变为 可见
bpo   32604 :   删除 _ xxsubinterpreters 模块 （ 用于 测试 ） 和 相关 的 帮助 程序
" Enum "   类 属于 可 调用 对象 ， 它 提供 了 以下 功能性   API :
浮点数 对象
运行 用户 代码
获取 正在 尝试 的 补全 类型
交互 解释器 对象
（ 由   Victor   Stinner   在   bpo   37312   中 贡献 。 ）
如果 文件 已经 存在 ，   则 抛出   " FileExistsError "   异常
NN   是   Python   版本 ， 如 数字 “ 33 ” 代表   Python   3.3
除了 标准 的 CPython 发行版 之外 ， 还有 一些 包含 附加 功能 的 修改 包
如果   " __ float __ ( ) "   未定义 则 将 回退 至   " __ index __ ( ) "
从   " email . feedparser "   模块 导入 的   " BytesFeedParser "   类 提供 了 一个 适合 于 增量 解析 电子邮件 消息 的 API ， 比如说 在 从 一个 可能 会 阻塞 （ 例如 套 接字 ） 的 源 当中 读取 消息 文字 的 场合 中 它 就 会 变得 很 有用
源代码   Lib / importlib / __ init __. py
库
该 文件 会 在 与 交互式 命令 执行 所在 的 同一 命名 空间 中 被 执行 ， 因此 其中 所 定义 或 导入 的 对象 可以 在 交互式 会话 中 无 限制 地 使用
返回   reader   的 可 迭代 对象 的 下 一行 ， 返回值 可能 是 列表 （ 由   " reader ( ) "   返回 的 对象 ） 或 字典 （ 由   " DictReader "   返回 的 对象 ） ， 解析 是 根据 当前 设置 的 变种 进行 的
字符串 的   format ( )   方法
这个 字典 把   HTTP   1.1   状态 码 映射 到   W3C   名称
数学 运算 ：   " add ( ) " ， " sub ( ) " ， " mul ( ) " ， " floordiv ( ) " ， " abs ( ) " ，   ...
先 将 字符串 的 长度 解包 为 无 符号 整数 ， 再用   " unpack _ fstring ( ) "   来 解包 字符串 数据
在 许多 情况 下 ， 查找 器 和 加载 器 可以 是 同一 对象 ； 在 此 情况 下   " find _ spec ( ) "   方法 将 返回 一个 规格 说明 ， 其中 加载 器会 被 设为   " self "
上下文 行数 由   n   设定 ， 默认 为 三行
我 怎么 让   Python   脚本 可 执行 ？
源代码 :   Lib / xml / sax / saxutils . py
发布 进程 的 变化 :
安全
用法 :
将   " print "   语句 转换 为   " print ( ) "   函数
请参阅   Slot   Type   typedefs   里 有 更 多 详细信息
如果 您 不能 使用 前面 的 建议 （ 例如 ， 您 是 一个 允许 人们 直接 运行 ：   file :   python . exe ` 的 分发 版 ） ， 请 确保 安装 目录 中 存在 landmark   文件 （   : file : ` Lib \ os . py   ）
" Counter "   对象
C   API   中 的 改变
注解 :
如果 该 文件 不 存在 或 不可 访问 ， 则 抛出   " OSError "   异常
文字 转换
如果 没有 给定 位置 ， " a . pop ( ) "   将会 删除 并 返回 列表 中 的 最后 一个 元素
由于 可能性 是 相对 于 其他 点 的 ， 它 的 值 可以 大于   1.0
在   C++   中 嵌入   Python
源代码 :   Lib / multiprocessing / shared _ memory . py
它 必须 为 正数 ， 或 为   1   以 使用 默认值
只 给出 必需 的 参数 ： " ask _ ok ( ' Do   you   really   want   to   quit ? ' ) "
事件 对象
ISO   8601   年份 和   ISO   8601   星期 指令 并 不能 与 上面 的 年份 和 星期 序号 指令 相互 替代
Distutils   示例
bpo   33061 :   添加 丢失 的   " NoReturn "   到 typing . py 的   " __ all __ "
像   " None "   一样 的 Python 对象
一个 小小的 不同 在于 ， 它 的   " acquire "   方法 的 第一个 参数 名是 和   " Lock . acquire ( ) "   一样 的   block
每个 方法 都 是 接受 单个 参数 ， 即 要 打包 的 值
修改 过 的 行将 使用   " touchline ( ) "   方法 处理 以便 下次 窗口 刷新 时 内容 会 重新 显示
在   3.6   版 更改 :   接受 一个 类 路径 对象
诊断
如果 帮助 输出 具有 记录 命令 的 段落 ， 则 发出 头文件
在 创建 共享 对象 文件   ( " . so " )   的 链接 阶段 ， 链接 器 可能 会 发现 它 不 知道 某个 标识符 是 在 哪里 定义 的
运行 下面 的 代码 可以 启动 一个 服务 ， 此付 包含 了 一个 共享 队列 ， 允许 远程 客户端 访问 :
配置 函数
所有 后续 的 行 都 会上 移 一行
目录   ^ ^ ^ ^
发布 日期 :   2016   06   26
" finalize "   方法 可以 返回 任何   SQLite   支持 的 类型 ： bytes ， str ， int ，   float   和   " None "
在 OpenSolaris 系统 上
例如 ， 在   Linux   上 通常 为   ' / dev / log '   而 在   OS / X   上 则 为   ' / var / run / syslog '
如果   class   是   classinfo   的   ( 直接 、 间接 或 虚拟   )   子类 则 返回   " True "
在 函数 代码 块 但 不是 类 代码 块 中 调用   " locals ( ) "   时 将 返回 自由 变量
如果   verbose   为   " False " ， 则 将 只 打印 成员 名称
它 应当 产生 一个 可变 序列 对象 （ 例如 列表 ） 或 一个 映射 对象 （ 例如 字典 ）
如果 名称 对应 的 文件 全都 不 存在 ， 则   " ConfigParser "   实例 将 包含 一个 空 数据 集
列表 推导 式
对象 中 的 重复 名称
某个   IBM   EBCDIC   编码 页
choices   可用 的 参数 的 容器
这里 使用   CRC   CCITT   生成 多项式   x   ^ 16   +   x   ^ 12   +   x   ^ 5   +   1   ， 通常 表示 为   0x1021
3.5   新版 功能 .
" ' G ' "   常规 格式
注释 和 缩进 都 会 在 转换 过程 中 保持 不变
参见 :   调用 解释器
在   2.7 . 14   版 更改 .
打开   " GzipFile "   文件 用于 写入 而 不 指定   mode   参数 的 特性 已 被 弃用
标准 的   " run ( ) "   方法 会 对 作为   target   参数传递 给 该 对象 构造 器 的 可 调用 对象 （ 如果 存在 ） 发起 调用   ， 并 附带 从   args   和   kwargs   参数 分别 获取 的 位置 和 关键字 参数
注解 :
性能 优化
安全
" start _ color ( ) "   会 初始化 八种 基本 颜色 （ 黑 、 红 、 绿 、 黄 、 蓝 、 品 、 青和白 ） 以及   " curses "   模块 中 的 两个 全局变量   " COLORS "   和   " COLOR _ PAIRS " ，   其中 包含 终端 可 支持 的 颜色 和 颜色 对 的 最大 数量
大部分   Python   代码 不必 担心 字形 ， 找到 应 被 显示 的 正确 字形 一般来说 是 用户 图形界面 工具箱 或者 终端 的 字体 渲染器 的 工作
此 模块 是 旧版   ( " Compat32 " )   email   API   的 组成部分
作者 :   A . M
IDLE   是 一个 跨平台 的   Python   IDE ， 它 基于   Tkinter   库 ， 使用   Python   语言 编写
如果   anyset   不是   " set " ,   " frozenset "   或 其子 类型 的 实例 则 会 引发   " PyExc _ SystemError "
如果   mode   为   " ' w ' "   或   " ' a ' " ， 则   compresslevel   可以 是   " 1 "   到   " 9 "   之间 的 整数 ， 用于 指定 压缩 等级 :   " 1 "   产生 最低 压缩率 ， 而   " 9 "   ( 默认值 )   产生 最高 压缩率
从 已有 的 迭代 器 创建 新 的 迭代 器 的 函数
该 模块 提供 了 一个 标准接口 来 提取 、 格式化 和 打印   Python   程序 的 堆栈 跟踪 结果
在 下列 函数 中 ，   encoding   字符串 会 被 查找 并 转换 为 小写字母 形式 ， 这 使得 通过 此 机制 查找 编码 格式 实际上 对 大小写 不 敏感
比较 终结 器 与   " __ del __ ( ) "   方法
自定义 对话框 的 基类 .
如果 字典 中 没有   key   ， 则 会 引发   " KeyError "
举例来说 ， 如果 你 以 某 一 用户 来 开发 程序 但 以 另 一 用户 身份 来 运行 程序 时 就 可能 发生 问题 ， 测试   Web   服务器 就 属于 这种 情况
访问 参数 的 属性 :
一个 主要 的 例子 就是   " Pool "   对象 ， 它 提供 了 一种 快捷 的 方法 ， 赋予 函数 并行 化 处理 一系列 输入 值 的 能力 ， 可以 将 输入 数据 分配 给 不同 进程 处理 （ 数据 并行 ）
（ 由   Jonathan   Eunice   和   Serhiy   Storchaka   在   bpo   30688   中 贡献 。 ）
使用 中 的   SQLite   库 的 版本号 ， 是 一个 字符串
注释 可以 被 缩进
" collections . abc . ByteString "   的 泛型 版本
默认 内存 分配器
参数   wbits   取决于   data   的 格式 ， 具体 参见 下边 的 说明
如果 流 支持 写入 则 返回   " True "
核心 与 内置
（ 根据   RFC   2045   所述 ， 信息 永远 都 有 一个 默认 类型 ， 所以   " get _ content _ type ( ) "   一定 会 返回 一个 值
通常 ， 输出 的 元素 数量 与 输入 的 可 迭代 对象 是 一致 的
" loop . remove _ signal _ handler ( ) "   删除   " signal "   的 处理 回调 函数
文件 对象 已经 实现 了   " fileno ( ) " ， 因此 它们 也 可以 用作 参数
路径 通过 去除   ' . py '   、 把 分隔符 转换 为   ' . '   转换 为 模块 名
与   " marshal "   间 的 关系
bpo   28208 :   更新 Windows   构建 和 OS   X   安装程序 以 使用 SQLite   3.14 . 2 .
构造 器 的 第二种 形式 可 设置 如下 所述 的 相应 属性
返回 信息 的 主要 内容 类型
核心 与 内置
工具 / 示例
会 被 默认 警告 过滤器 忽略 ， 在   " __ main __ "   模块 中 的 情况 除外   (   PEP   565   )
本手册 以   " 从 内 到 外 "   的 顺序 组织 ： 首先 描述 内置 函数 、 数据类型 和 异常 ， 最后 是 根据 相关性 进行 分组 的 各种 模块
在 读取 时 ，   escapechar   去 除了 其后 所 跟 字符 的 任何 特殊 含义
以上 这些 还 依赖于 构造 器 或者   " setfirstweekday ( ) "   方法 指定 的 周 的 第一天 是 哪一天
PEP   305 :   逗号 分隔 文件
如果 启动 方法 没有 设定 ， 并且   allow _ none   被 设置 成   True   ， 那么 将 返回   " None "
Dialect   类 支持 以下 属性 ：
" uu "   对   uuencode   文件 进行 编码 与 解码
如果 可 选 参数   block   是   " True "   ( 默认值 )   而且   timeout   是   " None "   ( 默认值 ) ,   将会 阻塞 当前 进程 ， 直到 队列 中 出现 可用 的 对象
（ 由   Raymond   Hettinger   在   bpo   35892   中 贡献 。 ）
（ 由   Kevin   O ' Connor   贡献 。 ）
在   Py2 . x   中 ，   sort   允许 一个 可 选 函数 ， 可以 调用 它 来 进行 比较
请 参数 distutils 的 文档 ， 在 分发   Python   模块 （ 遗留 版本 ）   来 了解 更 多 distutils 的 特性 ； 本 章节 只 解释 构建 扩展 模块 的 部分
如果 为 1 ， 则 表示   只要 可以 查看 窗口 就 应该 接收 输入 焦点
这个 问题 有 （ 至少 ） 三种 可能 的 解决 方法
下面 的 例子 演示 了   " ShareableList "   实例 的 基本 用法 :
" hashlib "   模块 现在 会 在 可能 的 情况 下 使用   OpenSSL   中 的   SHA3   哈希 和   SHAKE   XOF
代表   C   " signed   long "   数据类型
此 方法 永不 阻塞 ， 始终 成功 （ 除了 潜在 的 低级 错误 ，   例如 内存 分配 失败 ）
如果 一个 无 参数 调用 将要 阻塞 ， 则 立即 返回   " False " ； 在 其他 情况 下 ， 执行 与 无 参数 调用 时 一样 的 操作 ， 然后 返回   " True "
枚举 是 使用   " class "   语法 来 创建 的 ， 这 使得 它们 易于 读写
" csv "   CSV   文件 读写
如果 不 想要 这样 的 行为 ， 可以 使用 以下 装饰 器来 确保 每个 值 在 枚举 中 只 被 使用 一次 :
同样 的 ， 当 你 继承   " Process "   时 ， 需要 保证 当 调用   " Process . start "   方法 时 ， 实例 可以 被 序列化
选取 部分 迭代 器 输出 的 函数
IncrementalParser   对象
在   3.2   版 更改 :   在 之前 的 版本 中 ， " strftime ( ) "   方法 只 限于   >   1900   的 年份
词法 分析
如果 给定 的 节 存在 ， 则 将 给定 的 选项 设 为 指定 的 值 ； 在 其他 情况 下 将 引发   " NoSectionError "
运算   语法   函数   加法   " a   b "   " add ( a ,   b ) "   字符串 拼接   " seq1   seq2 "   " concat ( seq1 ,   seq2 ) "   包含 测试   " obj   in   seq "   " contains ( seq ,   obj ) "   除法   " a   /   b "   " truediv ( a ,   b ) "   除法   " a   / /   b "   " floordiv ( a ,   b ) "   按位 与   " a   &   b "   " and _ ( a ,   b ) "   按位 异或   " a   ^   b "   " xor ( a ,   b ) "   按位 取反   " ~   a "   " invert ( a ) "   按位 或   " a   b "   " or _ ( a ,   b ) "   取幂   " a   b "   " pow ( a ,   b ) "   标识   " a   is   b "   " is _ ( a ,   b ) "   标识   " a   is   not   b "   " is _ not ( a ,   b ) "   索引 赋值   " obj [ k ]   v "   " setitem ( obj ,   k ,   v ) "   索引 删除   " del   obj [ k ] "   " delitem ( obj ,   k ) "   索引 取值   " obj [ k ] "   " getitem ( obj ,   k ) "   左移   " a   < <   b "   " lshift ( a ,   b ) "   取模   " a   %   b "   " mod ( a ,   b ) "   乘法   " a   b "   " mul ( a ,   b ) "   矩阵 乘法   " a   @   b "   " matmul ( a ,   b ) "   取反 （ 算术 ）   "   a "   " neg ( a ) "   取反 （ 逻辑 ）   " not   a "   " not _ ( a ) "   正数   "   a "   " pos ( a ) "   右移   " a   > >   b "   " rshift ( a ,   b ) "   切片 赋值   " seq [ i : j ]   values "   " setitem ( seq ,   slice ( i ,   j ) ,   values ) "   切片 删除   " del   seq [ i : j ] "   " delitem ( seq ,   slice ( i ,   j ) ) "   切片 取值   " seq [ i : j ] "   " getitem ( seq ,   slice ( i ,   j ) ) "   字符串 格式化   " s   %   obj "   " mod ( s ,   obj ) "   减法   " a   b "   " sub ( a ,   b ) "   真值 测试   " obj "   " truth ( obj ) "   比较   " a   <   b "   " lt ( a ,   b ) "   比较   " a   <   b "   " le ( a ,   b ) "   相等   " a   b "   " eq ( a ,   b ) "   不 等   " a   !   b "   " ne ( a ,   b ) "   比较   " a   >   b "   " ge ( a ,   b ) "   比较   " a   >   b "   " gt ( a ,   b ) "
将 一个 整数 转变 为 一个 前缀 为 “ 0b ” 的 二进制 字符串
将 光标 移至   " ( new _ y ,   new _ x ) "
创建 或 打开 特定 的 键 ， 返回 一个   handle   对象
或者 更 紧凑 点
稳定 的 应用程序 二进制 接口
抛出   " SystemExit "   异常
我 这么 偏好 的 一个 原因 是 ， " lambda "   能够 定义 的 函数 非常 受限
path   可以 是 一个 文件 或是 一个 目录
移植 到 Python   2.5
3.2   新版 功能 .
其他 语言 特性 修改
如果 没有 为根 日志 记录器 定义 处理程序 则   " debug ( ) " ,   " info ( ) " ,   " warning ( ) " ,   " error ( ) "   和   " critical ( ) "   等 函数 将 自动 调用   " basicConfig ( ) "
这种 对象 在 文档 中常 被 称为 “ 可 读写 字节 类 对象 ”
所以 ， 如果 你 想要 定义新 的 扩展 类型 ， 需要 创建 新 的 类型 对象
" date "   或   " datetime "   对象 允许 最大 的 年份
由 内置 函数   " next ( ) "   和   iterator   的   " __ next __ ( ) "   方法 所 引发 ， 用来 表示 该 迭代 器 不能 产生 下 一项
当 你 想要 定制   " Enum "   成员 的 实际 值时 必须 使用   " __ new __ ( ) "
如果 文件大小 可以 预先确定 ， 则 在 构造   " ZipInfo "   对象 时应 设置   " file _ size " ， 并 将 其 用作   name   形参
如果   mode   不适 用于 打开 特定 （ 压缩 的 ） 文件 用于 读取 ， 则 会 引发   " ReadError "
ob   不能 为   " NULL "
ArgumentParser   对象
通常 ， 接受 对象 引用 作为 参数 的 函数 不 希望 你 传给 它们   " NULL "   指针 ， 并且 当 你 这样 做时 将 会 转储 核心 （ 或 在 以后 导致 核心 转储 ）
将 参数   row   写入   writer   的 文件 对象 ， 并 根据 当前 设置 的 变种 进行 格式化
" Type "   合法 的 参数 仅 有 类 、   " Any "   、 类型 变量 以及 上述 类型 的 联合 类型
注解 :
请 注意 最终 输出 到 日志 的 消息 格式 完全 独立 于 单条 日志 消息 的 构造 方式
" pyclbr "   Python   模块 浏览器 支持
其中   start   和   step   参数 默认 为   " None "
解决方案 是 将 两个 步骤 结合 起来 ， 立即 创建 文件
如果 指定 的 节 确实 存在 则 返回   " True "
该 属性 取代   " __ name __ "   被 用来 为主 模块 计算 显式 相对 导入 ， 相关 定义 见   PEP   366
请 注意 ， " None "   作为 类型 提示 是 一种 特殊 情况 ， 并且 由   " type ( None ) "   取代
布尔 对象
从 字典   p   中 返回 以   key   为键 的 对象
LogRecord   属性
隐式 的 行 拼接
网络 和 进程 间通信
有关   __ main __   的 特殊 事项
strtod   和   dtoa
Python   2.6   之后 的 变化
它们 是 :   0 : black ,   1 : red ,   2 : green ,   3 : yellow ,   4 : blue ,   5 : magenta ,   6 : cyan   和   7 : white
PEP   465 ,   新 的 矩阵 乘法 运算符 :   " a   @   b " .
返回 一个   structseq   实例 ， 其中 包含 有关   float   的 精度 、 最小值 和 最大值 的 信息
3.9   新版 功能 .
块 设备
在   3.8   版 更改 :   key   可以 为   " None "
另见   " dump ( ) " .
为了 与   Python   DB   API   保持 兼容 ， 它会 为 每个 列 返回 一个   7   元组 ， 每个 元组 的 最后 六个 条目 均 为   " None "
" a   ipow ( a ,   b ) "   等价 于   " a   b "
实现   " del   TOS . name " ， 使用   namei   作为   " co _ names "   中 的 索引 号
在 输出 中 插入   ms   毫秒 的 暂停
返回 当前 运行 的   " Task "   实例 ， 如果 没有 正在 运行 的 任务 则 返回   " None "
在   3.8   版 更改 :   增加 了 对 密钥 日志 记录 至   " SSLKEYLOGFILE "   的 支持
返回 缓冲 的 数据 而 不 前移 文件 位置
策略
（ 由   Nick   Coghlan   在   bpo   9147   中 贡献 。 ）
线程 描述符 可能 会 在线 程 退出 ， 新 线程 创建 时 复用
可选 的   banner   参数 指定 要 在 第一次 交互 前 打印 的 条幅 ； 默认 情况 下会 类似 于 标准   Python   解释器 所 打印 的 内容 ，   并 附上 外加 圆括号 的 终端 对象 类名 （ 这样 就 不会 与 真正 的 解释器 混淆   — —   因为 确实 太像 了 ！ ）
这个 方法 被 用来 处理   " &# NNN ; "   和   " &# xNNN ; "   形式 的 十进制 和 十六进制 字符 引用
进阶 日志 教程
这些 方法 在 大多数 情形 下 并 不是 必须 的
" pipes "   定义 了 一个 类 用来 抽象   pipeline   的 概念 将 数据 从 一个 文件 转到 另 一 文件 的 转换器 序列
字符串 字 面值 拼接
如果 循环 探测器 被 禁用 ，   " gc "   模块 就 不可 用 了
若   data   为空 ， 将会 引发   " StatisticsError "
" Enum "   类 总是 会 被 求值 为   " True "
源代码 ：   Lib / __ future __. py
在 解压 的 过程 中 ， 最后 修改 时间 字段 的 值 可能 来自 于 这个 属性 ， 以 整数 的 形式 出现
如果 目标 是 在 当前 文件系统 中 ， 则 会 使用   " os . rename ( ) "
移位 运算
实际 大小 可 通过   " itemsize "   属性 来 获取
" Control   E "   前往 右 边缘 （ stripspaces   关闭 时 ） 或者 行尾 （   stripspaces   启用 时 ）
请参阅   PEP   587   了解 详情
例如 :
将   " long "   重命名 为   " int "
如果 为 非零值 ， 在 每次 达到 断点 ，   且 断点 未 禁用 ， 且 关联 条件 计算 值为   true   的 情况 下 ， 该 忽略 次数 会 递减
在 初始 调用 中 ， 可以 将   " None "   作为   state   传递
注意 文件名 分隔符   ( Unix   上 为   " ' / ' " )   不是 此 模块 所 特有 的
由   Dong   hee   Na   和   Inada   Naoki   补丁 修复
当 对象   o   是 一个 字节 数组 对象 而且 是 一个 字节 数组 类型 的 子 类型 实例 时 ，   返回 真
字符串 和 二进制码 序列 不能 直接 比较
它 的 功能 和   " PyObject _ Init ( ) "   一样 ， 并且 初始化 变量 大小 的 对象 的 长度
" transport . set _ protocol ( ) "   设置 一个 新 协议
返回 当前 线程 的   “ 线程 描述符 ”
源码 :   Lib / tkinter / commondialog . py
data   的 长度 最多为 45
实际上 ， 非 数字 值 就是 一个 不 遵循 这些 规则 的 例子
这样 的 类 可以 手工 编写 ， 或者 使用 工厂 函数   " collections . namedtuple ( ) "   创建
此 方法 将 向 标准 错误 打印 包括   message   的 用法 消息 并 附带 状态 码   2   终结 程序
除非 是 在 逻辑 行 的 开头 或 字符串 内 ， 空格符 、 制表符 和 进纸 符等 空白符 都 同样 可以 用来 分隔 形符
注意 ： Win32   系统 的 动态 库 ， 比如   " kernel32 "   和   " user32 " ， 通常 会 同时 导出 同一个 函数 的   ANSI   版本 和   UNICODE   版本
这是 一个 方便 的 函数 ， 它 反复 调用   " timeit ( ) "   ， 返回 结果 列表
需要 注意 的 是   " RLock "   其实 是 一个 工厂 函数 ， 返回 平台 支持 的 具体 递归 锁类 中 最 有效 的 版本 的 实例
" grp "   组 数据库
以上   " @ property "   装饰 器会 将   " voltage ( ) "   方法 转化 为 一个 具有 相同 名称 的 只读 属性 的   " getter " ， 并 将   voltage   的 文档 字符串 设置 为   " Get   the   current   voltage . "
两个 片段 都 应 包含   2   字节 宽 的 采样
此 模块 还 提供 了 一个 额外 的 数据 对象 :
" % B "   本地化 的 月 完整 名称
在   3.2   版 更改 :   Add   encoding   and   errors   parameters .
fn :   进行 日志 记录 调用 的 文件 的 完整 路径名
请 注意 在 模块 层级 上 ， " locals ( ) "   和   " globals ( ) "   是 同一个 字典
参见 :   The   " Py _ DecodeLocale ( ) "   function .
到达 流 结束 之前 读取 的   " bytes "   字符串
可 与 此 格式 组合 使用 的 有   " sys . stdin " ,   套 接字   file   object   或 磁带设备 等
检测 就 再也 没 异常
更改 被 显示 为 内联 的 样式 （ 而 不是 分开 的 之前 / 之后 文本 块 ）
分发   Python   模块 最新 的 模块 分发 文档
这 意味着 你 可以 写   " val   yield   i " ， 但是 必须 在 操作 的 时候 加上 括号 ， 就 像 ` ` val   ( yield   i )   +   12 ` ` ）
加密 服务
内存 中 二进制 流 也 可以 作为   " BytesIO "   对象 使用 ：
其 参数 是 异常 对象 和   C   字符串
该 示例 中 ， 由于 我们 设置 的 阈值 是   " DEBUG " ， 所有 信息 全部 打印
如果 迭代 器 耗尽 ， 则 返回 给定 的   default   ， 如果 没有 默认值 则 触发   " StopIteration "
在   mailcap   文件 中 ， 可以 指定 可选 的   " test "   字段 来 检测 某些 外部 条件 （ 例如 所 使用 的 机器 架构 或 窗口 系统 ） 来 确定 是否 要 应用   mailcap   行
移植 到   Python   3.9
开源 许可 与 协作
测试
本 节 包含   " str . format ( ) "   语法 的 示例 以及 与 旧式   " % "   格式化 的 比较
返回值 的 参考点 未定义 ， 因此 只有 连续 调用 结果 之间 的 差异 才 有效
如果 此   capsule   将 被 保存 为 一个 模块 的 属性 ， 则   name   应当 被 指定 为   " modulename . attributename "
实例 方法 对象
文档 字符串 翻译 为 不同 的 语言
在 光标 下方 的 字符 之前 插入 一个 字符串 （ 字符 数量 将 与 该行 相匹配 ）
源代码 ：   Lib / optparse . py
引发 一个 审计 事件   " ctypes . get _ last _ error " ， 不 附带 任何 参数
在 最后 一个 文件 的 最后 一行 被 读取 之后 ， 此 函数 将 不再 生效
PEP   3115   Python   3000   中 的 元类 将 元类 声明 修改 为 当前 语法 的 提议 ， 以及 关于 如何 构建 带有 元类 的 类 的 语义 描述
否则 ， 将 层次结构 遍历 到 根 ， 直到 找到 除   " NOTSET "   以外 的 其他 值 ， 然后 返回 该值
总是 输入   " decimal . Decimal ( ' 1234.5 ' ) "   是否 过于 笨拙
如果   step   为   " None "   ， 步长 缺省 为 1
如果 需要 清楚 表达 具体 含义 ， 请 使用 全称 以 避免 歧义
添加 切换 光标 闪烁 停止 的 选项
如果 语句 体 由于 异常 以外 的 任何 原因 退出 ， 则 来自   " __ exit __ ( ) "   的 返回值 会 被 忽略 ， 并会 在 该类 退出 正常 的 发生 位置 继续执行
zipimporter   对象
bpo   24603 :   更新 Windows   构建 和 OS   X   10.5   安装程序 以 使用 OpenSSL   1.0 . 2d .
参见 :
基本 使用
Python 测试 套件 的 输出 示例 ：
例如 ， 以下 代码 会 将 当前   decimal   精度 设 为   42   位 ， 执行 一个 运算 ， 然后 自动 恢复 之前 的 上下文 :
在   Windows   上   " Pdb "   现在 支持   " ~ / . pdbrc "
它们 常常 看起来 相同 ，   但 这 是 两个 有着 不同 含义 的 不同 字符
上下文 变量 在   " asyncio "   中有 原生 的 支持 并且 无需 任何 额外 配置 即可 被 使用
在 BSD 等 类 Unix 系统 上 ， Python 脚本 可以 直接 执行 ， 就 像 shell 脚本 一样 ， 第一行 添加 :
在 决定 进一步 处理 消息 之前 ， 记录器 和 处理程序 都 会 查询 其 所有 过滤器 以 获得 许可
提供 方   API
如果 参数 是   filename : lineno   ， 则 清除 此行 上 的 所有 断点
完整 的 函数 签名 与   " Popen "   构造 器 的 相同   — —   此 函数 会 将 所 提供 的   timeout   之外 的 全部 参数 直接 传递 给 目标 接口
套 接字
返回 文件 描述符 对应 的 数字 ， 该 描述符 用于 控制   epoll   对象
默认值 为   " $ "
为 文件系统 中 的 文件 构造 一个   " ZipInfo "   实例 ， 并 准备 将 其 添加 到 一个   zip   文件
列表 最少 包含 一个 映射
该宏会 “ 偷走 ” 一个 对   item   的 引用 ， 但 与   " PyList _ SetItem ( ) "   不同 的 是 它 不会 丢弃 对 任何 被 替换 条 目的 引用 ； 在   list   的   i   位置 上 的 任何 引用 都 将 被 泄露
以下 方法 支持 打包 字符串 、 字节 串 以及 不 透明 数据
例如 ， 内置 的   " divmod ( ) "   函数 不 接受 关键字 参数 :
3.2   新版 功能 .
默认 警告 过滤器
dlltype   应当 为   " CDLL " ,   " PyDLL " ,   " WinDLL "   或   " OleDLL "   类型 之一
在 使用   " frozen   True "   定义 的 数据 类上 调用 隐式 定义 的   " __ setattr __ ( ) "   或   " __ delattr __ ( ) "   时 引发
如果   " tzinfo "   为   " None " ， 则 返回   " None " ， 否则 返回   " self . tzinfo . tzname ( self ) " ， 如果 后者 不 返回   " None "   或者 一个 字符串 对象 则 将 引发 异常
使用 中 的   SQLite   库 的 版本号 ， 是 一个 整数 组成 的 元组
举例来说 :
当 给定   delimiters   时 ， 它会 被 用作 分隔 键 与 值 的 子 字符串 的 集合
该 模块 定义 了 一些 抽象 基类   ， 它们 可 用于 判断 一个 具体 类 是否 具有 某一 特定 的 接口 ； 例如 ， 这个 类 是否 可 哈希 ， 或 其 是否 为 映射 类
创建 虚拟环境
3.4   新版 功能 .
" dataclasses "   数据 类
创建 一个 默认 信息 消息 框
返回   name   对应 的 变种
移除
工具 / 示例
该 构造 器 接受 一个 可选 的 整数 初始化 器 ； 不会 执行 溢出检查
或者 你 可 反转 比较 的 顺序 ：
改进 的 模块
当 在   " except "   或   " finally "   子句 中 引发 （ 或 重新 引发 ） 异常 时 ，   " __ context __ "   会 被 自动 设为 所 捕获 的 最后 一个 异常 ； 如果 新 的 异常 未 被 处理 ，   则 最终 显示 的 回溯 信息 将 包括 原始 的 异常 和 最后 的 异常
列表 推导 式
如果 指定 了   n   ， " instr ( ) "   将 返回 长度 至多 为   n   个字符 的 字符串 （ 不 包括 末尾 的   NUL ）
3.9   新版 功能 .
示例 :
当 进程 池 对象 呗 垃圾 回收 时   ，   会 立即 调用   " terminate ( ) "
这里   " inc ( ) " ,   " dec ( ) "   和   " reset ( ) "   将 表现 为 共享 同一 计数 变量 的 多个 函数
相关 细节 请参阅   " PyOS _ snprintf ( ) "   " ' # ' "   定义 文档
这是 下面 列出 的 许多 函数 的 便利 包装 ， 最 值得注意 的 是   " get _ instructions ( ) "   ， 迭代 于   " Bytecode "   的 实例 产生 字节 码 操作   " Instruction "   的 实例
3.8   新版 功能 .
查找 编解码器 注册表 所 得到 的 编解码器 细节 信息
参见 :
颜色 对   0   硬 编码 为 黑底白字   ， 不能 改变
如果 你 愿意 ， 可以 从   Python   网站 （   https : / / www . python . org   ） 安装 最新 版本 的   Python   3
提供 一个 可 修改 的 类   list   对象 ， 其中 所有 值 都 存放 在 共享内存 块 中
核心 语言
" modulefinder "   查找 脚本 使用 的 模块
如果 元组 中 的 时区 项为   " None " ， 则 视为 当地 时间
什么 是   self   ？
如 未指定 参数 则 返回 当前 速度
所有 其他 混合 运算 都 将 引发   " FloatOperation "
当 进入 类 定义 时 ， 将 创建 一个 新 的 命名 空间 ， 并 将 其 用作 局部 作用域 因此   ， 所有 对 局部变量 的 赋值 都 是 在 这个 新 命名 空间 之内
请 注意 在 这里   " __ import __ ( ) "   是 如何 返回 顶层 模块 的 ， 因为 这是 通过   " import "   语句 被 绑定 到 特定 名称 的 对象
" ctypes "   并 没有 实现 原始 对象 返回 ， 它 总是 会 构造 一个 新 的 对象
" nonlocal "   语句
参见 :
如果 你 定义 具有 相同 数值 的 级别 ， 它 将 覆盖 预定 义 的 值 ;   预定 义 的 名称 丢失
字符串 的 方法
Python   3.5 . 0   正式版选项
使用   BLAKE2   或 任何 其他 通用 加密 哈希 函数 例如   SHA   256   进行 加盐 哈希   (   或纯 哈希 )   并 不适 用于 哈希 密码
注解 :
用 圆括号 包裹 格式化 字符串 可以 强制 它 返回 一个 大小 为   0   或者   1   的 元组
如果 一个 异常 在 异常 处理器 或   " finally "   clause :   中 被 引发 ， 类似 的 机制 会 隐式 地 发挥作用 ， 之前 的 异常 将 被 关联 到 新 异常 的   " __ context __ "   属性 :
" argparse "   命令行 选项 、 参数 和子 命令 解析器
" html . entities "   HTML   实体 定义
随机 数据 的 压缩率 通常 很差 ， 而 有序 、 重复 的 数据 通常 会 产生 很 高 的 压缩率
除了 索引 ， 字符串 还 支持 切片
读取 并 返回 最 多   size   个 字节
" pickle "   封存 模块
当 出现 第一个 错误 或者 失败 时 ， 停止 运行 测试
可 执行 的 Python 脚本
条目 位置 从零开始
解决   Bug
（ 由   Dong   hee   Na   在   bpo   39259   中 贡献 。 ）
在   Python   2.4   及 之前 的 版本 中 ， 生成器 只 产生 输出
在 关闭 后 调用   " Executor . submit ( ) "   和   " Executor . submit ( ) "   会 触发   " RuntimeError "
库
注意 在 宏   " PyObject _ HEAD "   后 没有 分 号
所用 格式 与 终端 的   " PATH "   相同 ： 一个 或 多个 由   " os . pathsep "   分隔 的 目录 路径 名称 （ 例如   Unix   上用 冒号 而 在   Windows   上用 分号 ）
函数 的 结果 必须 能够 作为 单独 的 表达式 来 计算 ， 这 意味着 你 不能 使用 多路   " if ...   elif ...   else "   比较 ， 或者   " try ...   except "   语句
返回 已 被 读取 的 累计 行号
" FileHandler "   类 位于 核心   " logging "   包 ， 它 可 将 日志 记录 输出 到 磁盘 文件 中
返回 新 的 绝对 位置
" if " ,   " while "   和   " for "   语句 用来 实现 传统 的 控制 流程 构造
可 等待 对象
在   3.2   版 更改 :   添加 了 对 零 填充 和 不可 搜索 文件 的 支持
在 两个 对象 之间 进行 比较 时 ， 保证 排序 例程 使用   " __ lt __ ( ) "
如果   ignore _ zeros   为   " False " ， 则 会 将 空 的 数据 块 当作 归档 的 末尾 来 处理
向 生成器 传递 值
上下文 菜单
在   3.9   版 更改 :   string   parameter   supports   bytes   and   str   objects   ( previously   only   str ) .
3.2   新版 功能 .
对 分散 程度 的 评估
返回 执行 状态 ， 是否 已经 完成
程序 式 地 导入 模块 应该 使用   " import _ module ( ) "   而 不是 这个 函数
例如   " ( 1 + 3j ) . conjugate ( )   ( 1   3j ) "
（ 由   Hugo   van   Kemenade   在   bpo   39586   中 贡献 。 ）
注解 :
默认 情况 下 ， 您 不会 获得 任何 用户 定义 函数 中 的 回溯 消息 ， 比如 聚合 ， 转换器 ， 授权 器 回调 等
[   流 协议   ( TCP ,   Unix   套 接字 ,   管道 )   ]
注解 :
Python   接口
命令行 选项
在   3.5   版 更改 :   The   legacy   parameter   only   writes   out   " . pyc "   files ,   not   " . pyo "   files   no   matter   what   the   value   of   optimize   is .
列表 、 元组 和 字符串 接受   index   或   slice   对象 ：
请参阅   PEP   616   了解 详情
机器 不 在 网络 上
对于   " maxdict "   的 默认值 为   " 4 " ， 对于   " maxarray "   为   " 5 " ， 对于 其他 则 为   " 6 "
当 打印 此 对象 时 ， 会 打印 出 一条 消息 “ Type   license ( )   to   see   the   full   license   text ” ， 当 调用 此 对象 时 ， 将 以 分页 形式 显示 完整 的 许可证 文本 （ 每次 显示 一屏 ）
password   和   salt   会以 字节 串 缓冲区 的 形式 被 解析
RFC   7159   移除 这个 限制 ， 此 模块 没有 并且 从未 在 序列化 器 和 反 序列化 器中 实现 这个 限制
每个 函数 都 有 两个 参数 ： 字节 流 和 类似 开放 文件 的 对象
编辑 窗口
重复 调用 相当于 单次 调用 并 传入 所有 参数 的 拼接 结果 :   " m . update ( a ) ;   m . update ( b ) "   等价 于   " m . update ( a + b ) "
此参数 仅 适用 于 读取 拼接 的 或 损坏 的 归档
PEP   3127 :   整型 文字 支持 和 语法
管理器 维护 一个 用于 管理 共享 对象 的 服务
移除 找到 的 第一个   value
此 方法 通常 是 隐式 地 调用 ， 例如 通过   " for "   循环 或是 内置 的   " next ( ) "   函数
" difflib "   计算 差异 的 辅助工具
" unicodedata "   模块 现在 已 升级 为 使用   Unicode   12.1 . 0   发布 版
注解 :
RFC 允许 ， 尽管 不是 必须 的 ， 这个 模块 的 序列化 默认设置 为   ensure _ ascii   True   ， 这样 消除 输出 以便 结果 字符串 至 容纳   ASCII   字符
如果 请求 失败 ， " PyMem _ RawRealloc ( ) "   返回   " NULL "   ，   p   仍然 是 指向 先前 内存 区域 的 有效 指针
因为   " notify ( ) "   不会 释放 锁 ， 只有 它 的 调用者 应该 这样 做
（ 由   Victor   Stinner   在   bpo   39357   中 贡献 。 ）
后 向 引用 ， 例如   " \ 6 " ， 被 替换 为 正则 中 相应 组 匹配 的 子 字符串
其中   " yday   d . toordinal ( )   date ( d . year ,   1 ,   1 ) . toordinal ( )   +   1 "   是 日期 在 当前 年份 中 的 序号 ， 起始 序号   " 1 "   表示   1   月   1   日
cafile   ,   capath   ,   cadata   代表 用于 进行 证书 核验 的 可 选受 信任   CA   证书 ， 与   " SSLContext . load _ verify _ locations ( ) "   的 一致
（   由   R é mi   Lapeyre   在   bpo   33462   中 贡献 。 ）
不 支持   Subprocesses   ， 也 就是   " loop . subprocess _ exec ( ) "   和   " loop . subprocess _ shell ( ) "   方法 没有 实现
" discover "   有 以下 选项 ：
异常 有 不同 的 类型 ，   而 其 类型 名称 将会 作为 错误信息 的 一部分 中 打印 出来 ： 上述 示例 中 的 异常 类型 依次 是 ： " ZeroDivisionError " ，   " NameError "   和   " TypeError "
" termios "   POSIX   风格 的   tty   控制
参见 已 缓存 字节 码 的 失效
您 可以 对类 的 构造函数 进行 编程 ，   以 通过 保留 每个 实例 的 弱 引用 列表 来 跟踪 所有 实例
简单 示例
bytes   和   bytearray   操作
参见 :
" ChainMap "   例子 和 方法
对于   datetime   模块 中 的   date   和   datetime   类型 已 提供 了 默认 的 适配器
举个 例子 ， 以下 调用 都 是 创建 连接 到 同一 主机 和 端口 的 服务器 的 实例 ：
旧 的   " name "   取值 / 设值   API ； 直接 当做 特征 属性 使用 它
3.9   新版 功能 .
在   3.8   版 更改 :   增加 了   stacklevel   参数
当 一个 实例 的 非 数据 属性 被 引用 时 ， 将 搜索 实例 所属 的 类
有关 类 的 更 多 信息 ， 请 参见 类 章节
可 被 打印 的 层级 数量 由   depth   控制 ； 如果 数据结构 的 层级 被 打印 得 过 深 ， 其所 包含 的 下 一层 级会 被 替换 为   " ... "
style   形参 可以 是   ' % ' ,   ' { '   或   ' $ '   之一 ， 它 决定 格式 字符串 将 如何 与 数据 进行 合并 ： 使用   %   formatting ,   " str . format ( ) "   或是   " string . Template "
这个 模块 还 定义 了 与 此处 所 提供 的 函数 一起 使用 的 所有 必要 的 常量 ； 这些 常量 与 它们 在   C   中 的 对应 常量 同名
多个 第三方 可以 各自 拥有 自己 的 键值 ， 以 用作 元 数据 中 的 命名 空间
用户 自定义 对象 可 通过 提供   " __ bool __ ( ) "   方法 来 定制 其 逻辑值
将 不是   " concurrent . futures . ThreadPoolExecutor "   的 实例 的 对象 传给   " loop . set _ default _ executor ( ) "   已 被 弃用 ， 并 将 在   Python   3.9   中 被 禁止
注册 一个 解包 格式
构建
3.7   新版 功能 .
interpolation   ， 默认值 :   " configparser . BasicInterpolation "
在   3.4   版 更改 :   此 函数 支持   " S _ IFDOOR " ,   " S _ IFPORT "   and   " S _ IFWHT "
返回 整除 所 得到 的 余数
PEP   523   向 CPython   添加 框架 评估 API   PEP   由   Brett   Cannon   和   Dino   Viehland   撰写
迭代 字典   p   中 的 所有 键值 对
如果 所有 可 等待 对象 都 成功 完成 ， 结果 将 是 一个 由 所有 返回值 聚合 而成 的 列表
一个 简单 的 例子
用于 获取 执行 结果
对于 特殊 扩展 字符 有 一些 常量 ， 这些 常量 是 大于   255   的 整数
参见 :
其他 语言 特性 修改
返回 支持 的 归档 格式 列表
该 函数 仅 支持 Unix
Python   版本 的 编号 形式 是 怎样 的 ？
可以 传入 一个 整数 作为 第二个 参数 以 允许 在 不 使用 字节 串 长度 的 情况 下 指定 数组 大小
3.7   新版 功能 .
或者 ， 更 近似 的 ， :
如果 由于 系统 不 支持 查询 ， 或是 由于 我们 未 连接 到 某个 终端 而 导致 查询 终端 尺寸 不 成功 ， 则 会 使用 在   " fallback "   形参中 给出 的 值
" _ missing _ "   当未 发现 某个 值时 所 使用 的 查找 函数 ； 可 被 重载
使用   Python   堆 的 另 一个 原因 是 希望 通知   Python   内存 管理器 关于 扩展 模块 的 内存 需求
Python   3.6 . 2   正式版
因此 ， 你 会 发现 在 正文 里 不 时会 跳 出来 一些 简短 的   " 实现 注释 "
构建
替代   / bin / sh   shell   命令 替换
[ 3 ]   一个 类 对象 随后 会 被 创建 ， 其 基类 使用 给定 的 继承 列表 ， 属性 字典 使用 保存 的 局部 命名 空间
" timezone "   类 是   " tzinfo "   的 子类 ， 它 的 每个 实例 都 代表 一个 以 与   UTC   的 固定 时差 来 定义 的 时区
Drake ,   Jr   撰写 并 实现
（ 由   Victor   Stinner   在   bpo   30966   中 贡献 。 ）
更 多 细节 请参阅   " loop . create _ datagram _ endpoint ( ) "   的 文档
运行 用户 代码
nuget . org   安装包
在   3.4   版 更改 :   当   format _ spec   不是 空 字符串 时 ，   " object ( ) .__ format __ ( format _ spec ) "   会 触发   " TypeError "
" Crow | Servo "   将 匹配   " ' Crow ' "   或   " ' Servo ' " ， 而 不是   " ' Cro ' " 、 " ' w ' "   或   " ' S ' "   和   " ' ervo ' "
" import "   语句
在   3.4   版 更改 :   " __ package __ "   and   " __ loader __ "   are   set   to   " None " .
3.4   新版 功能 .
