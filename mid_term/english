glossary
about these documents
these documents are generated from restructuredtext sources by sphinxa document processor specifically written for the pythondocumentation
development of the documentation and its toolchain is an entirelyvolunteer effort just like python itself
  if you want to contributeplease take a look at the dealing with bugs page for information onhow to do so
  new volunteers are always welcomemany thanks go to fred l
 the creator of the original python documentation  toolset and writer of much of the content the docutils project for creating restructuredtext and the docutils  suite fredrik lundh for his alternative python reference project from  which sphinx got many good ideas
contributors to the python documentation
quopri  encode and decode mime quotedprintable data
source code libquopri
pythis module performs quotedprintable transport encoding and decodingas defined in rfc 1521 mime multipurpose internet mailextensions part one mechanisms for specifying and describing theformat of internet message bodies
 the quotedprintable encoding isdesigned for data where there are relatively few nonprintablecharacters the base64 encoding scheme available via the base64module is more compact if there are many such characters as whensending a graphics file
decodeinput output headerfalse   decode the contents of the input file and write the resulting   decoded binary data to the output file
 input and output must   be binary file objects
  if the optional argument header is   present and true underscore will be decoded as space
 this is used   to decode qencoded headers as described in rfc 1522 mime   multipurpose internet mail extensions part two message header   extensions for nonascii text
encodeinput output quotetabs headerfalse   encode the contents of the input file and write the resulting   quotedprintable data to the output file
 input and output   must be binary file objects
 quotetabs a nonoptional flag   which controls whether to encode embedded spaces and tabs when   true it encodes such embedded whitespace and when false it leaves   them unencoded
 note that spaces and tabs appearing at the end of   lines are always encoded as per rfc 1521
  header is a flag   which controls if spaces are encoded as underscores as per rfc   1522
decodestrings headerfalse   like decode except that it accepts a source bytes and   returns the corresponding decoded bytes
encodestrings quotetabsfalse headerfalse   like encode except that it accepts a source bytes and   returns the corresponding encoded bytes
 by default it sends a   false value to quotetabs parameter of the encode function
see also  module base64     encode and decode mime base64 data
httpserver  http servers
threading  threadbased parallelism
threadlocal data
threadlocal data is data whose values are thread specific
  to managethreadlocal data just create an instance of local or a subclassand store attributes on it   mydata  threading
x  1the instances values will be different for separate threads
local   a class that represents threadlocal data
   for more details and extensive examples see the documentation   string of the threadinglocal module
thread objects
lock objects
a primitive lock is a synchronization primitive that is not owned by aparticular thread when locked
  in python it is currently the lowestlevel synchronization primitive available implemented directly by thethread extension module
a primitive lock is in one of two states locked or unlocked
 itis created in the unlocked state
  it has two basic methodsacquire and release
  when the state is unlocked acquirechanges the state to locked and returns immediately
  when the stateis locked acquire blocks until a call to release in anotherthread changes it to unlocked then the acquire call resets it tolocked and returns
  the release method should only be called inthe locked state it changes the state to unlocked and returnsimmediately
 if an attempt is made to release an unlocked lock aruntimeerror will be raised
locks also support the context management protocol
when more than one thread is blocked in acquire waiting for thestate to turn to unlocked only one thread proceeds when a releasecall resets the state to unlocked which one of the waiting threadsproceeds is not defined and may vary across implementations
all methods are executed atomically
lock   the class implementing primitive lock objects
  once a thread has   acquired a lock subsequent attempts to acquire it block until it   is released any thread may release it
   note that lock is actually a factory function which returns an   instance of the most efficient version of the concrete lock class   that is supported by the platform
   acquireblockingtrue timeout1      acquire a lock blocking or nonblocking
      when invoked with the blocking argument set to true the      default block until the lock is unlocked then set it to      locked and return true
      when invoked with the blocking argument set to false do not      block
 if a call with blocking set to true would block      return false immediately otherwise set the lock to locked      and return true
      when invoked with the floatingpoint timeout argument set to a      positive value block for at most the number of seconds      specified by timeout and as long as the lock cannot be      acquired
  a timeout argument of 1 specifies an unbounded      wait
  it is forbidden to specify a timeout when blocking is      false
      the return value is true if the lock is acquired successfully      false if not for example if the timeout expired
      changed in version 3
2 the timeout parameter is new
      changed in version 3
2 lock acquisition can now be interrupted      by signals on posix if the underlying threading implementation      supports it
   release      release a lock
  this can be called from any thread not only      the thread which has acquired the lock
      when the lock is locked reset it to unlocked and return
  if      any other threads are blocked waiting for the lock to become      unlocked allow exactly one of them to proceed
      when invoked on an unlocked lock a runtimeerror is raised
      there is no return value
   locked      return true if the lock is acquired
rlock objects
a reentrant lock is a synchronization primitive that may be acquiredmultiple times by the same thread
  internally it uses the conceptsof owning thread and recursion level in addition to thelockedunlocked state used by primitive locks
  in the locked statesome thread owns the lock in the unlocked state no thread owns it
to lock the lock a thread calls its acquire method this returnsonce the thread owns the lock
  to unlock the lock a thread calls itsrelease method
 acquirerelease call pairs may be nestedonly the final release the release of the outermost pairresets the lock to unlocked and allows another thread blocked inacquire to proceed
reentrant locks also support the context management protocol
rlock   this class implements reentrant lock objects
  a reentrant lock   must be released by the thread that acquired it
  once a thread has   acquired a reentrant lock the same thread may acquire it again   without blocking the thread must release it once for each time it   has acquired it
   note that rlock is actually a factory function which returns an   instance of the most efficient version of the concrete rlock class   that is supported by the platform
   acquireblockingtrue timeout1      acquire a lock blocking or nonblocking
      when invoked without arguments if this thread already owns the      lock increment the recursion level by one and return      immediately
  otherwise if another thread owns the lock block      until the lock is unlocked
  once the lock is unlocked not      owned by any thread then grab ownership set the recursion      level to one and return
  if more than one thread is blocked      waiting until the lock is unlocked only one at a time will be      able to grab ownership of the lock
 there is no return value in      this case
      when invoked with the blocking argument set to true do the      same thing as when called without arguments and return true
      when invoked with the blocking argument set to false do not      block
  if a call without an argument would block return      false immediately otherwise do the same thing as when called      without arguments and return true
      when invoked with the floatingpoint timeout argument set to a      positive value block for at most the number of seconds      specified by timeout and as long as the lock cannot be      acquired
  return true if the lock has been acquired false if      the timeout has elapsed
      changed in version 3
2 the timeout parameter is new
   release      release a lock decrementing the recursion level
  if after the      decrement it is zero reset the lock to unlocked not owned by      any thread and if any other threads are blocked waiting for      the lock to become unlocked allow exactly one of them to      proceed
  if after the decrement the recursion level is still      nonzero the lock remains locked and owned by the calling      thread
      only call this method when the calling thread owns the lock
 a      runtimeerror is raised if this method is called when the lock      is unlocked
      there is no return value
condition objects
a condition variable is always associated with some kind of lock thiscan be passed in or one will be created by default
  passing one in isuseful when several condition variables must share the same lock
  thelock is part of the condition object you dont have to track itseparately
a condition variable obeys the context management protocol using thewith statement acquires the associated lock for the duration of theenclosed block
  the acquire and release methods also call thecorresponding methods of the associated lock
other methods must be called with the associated lock held
  thewait method releases the lock and then blocks until anotherthread awakens it by calling notify or notifyall
  onceawakened wait reacquires the lock and returns
  it is alsopossible to specify a timeout
note the notify and notifyall methods dont release thelock this means that the thread or threads awakened will not returnfrom their wait call immediately but only when the thread thatcalled notify or notifyall finally relinquishes ownership ofthe lock
the typical programming style using condition variables uses the lockto synchronize access to some shared state threads that areinterested in a particular change of state call wait repeatedlyuntil they see the desired state while threads that modify the statecall notify or notifyall when they change the state in such away that it could possibly be a desired state for one of the waiters
for example the following code is a generic producerconsumersituation with unlimited buffer capacity    consume one item   with cv       while not anitemisavailable           cv
notifythe while loop checking for the applications condition is necessarybecause wait can return after an arbitrary long time and thecondition which prompted the notify call may no longer hold true
this is inherent to multithreaded programming
  the waitformethod can be used to automate the condition checking and eases thecomputation of timeouts    consume an item   with cv       cv
waitforanitemisavailable       getanavailableitemto choose between notify and notifyall consider whether onestate change can be interesting for only one or several waitingthreads
  e
g
 in a typical producerconsumer situation adding oneitem to the buffer only needs to wake up one consumer thread
class threading
conditionlocknone   this class implements condition variable objects
  a condition   variable allows one or more threads to wait until they are notified   by another thread
   if the lock argument is given and not none it must be a lock   or rlock object and it is used as the underlying lock
   otherwise a new rlock object is created and used as the   underlying lock
   changed in version 3
3 changed from a factory function to a class
   acquireargs      acquire the underlying lock
 this method calls the corresponding      method on the underlying lock the return value is whatever that      method returns
   release      release the underlying lock
 this method calls the corresponding      method on the underlying lock there is no return value
   waittimeoutnone      wait until notified or until a timeout occurs
 if the calling      thread has not acquired the lock when this method is called a      runtimeerror is raised
      this method releases the underlying lock and then blocks until      it is awakened by a notify or notifyall call for the      same condition variable in another thread or until the optional      timeout occurs
  once awakened or timed out it reacquires the      lock and returns
      when the timeout argument is present and not none it should      be a floating point number specifying a timeout for the      operation in seconds or fractions thereof
      when the underlying lock is an rlock it is not released using      its release method since this may not actually unlock the      lock when it was acquired multiple times recursively
  instead      an internal interface of the rlock class is used which really      unlocks it even when it has been recursively acquired several      times
 another internal interface is then used to restore the      recursion level when the lock is reacquired
      the return value is true unless a given timeout expired in      which case it is false
      changed in version 3
2 previously the method always returned      none
   waitforpredicate timeoutnone      wait until a condition evaluates to true
  predicate should be      a callable which result will be interpreted as a boolean value
      a timeout may be provided giving the maximum time to wait
      this utility method may call wait repeatedly until the      predicate is satisfied or until a timeout occurs
 the return      value is the last return value of the predicate and will      evaluate to false if the method timed out
      ignoring the timeout feature calling this method is roughly      equivalent to writing         while not predicate             cv
wait      therefore the same rules apply as with wait the lock must      be held when called and is reacquired on return
  the predicate      is evaluated with the lock held
      new in version 3
2
   notifyn1      by default wake up one thread waiting on this condition if      any
  if the calling thread has not acquired the lock when this      method is called a runtimeerror is raised
      this method wakes up at most n of the threads waiting for the      condition variable it is a noop if no threads are waiting
      the current implementation wakes up exactly n threads if at      least n threads are waiting
  however its not safe to rely      on this behavior
 a future optimized implementation may      occasionally wake up more than n threads
      note an awakened thread does not actually return from its      wait call until it can reacquire the lock
  since notify      does not release the lock its caller should
   notifyall      wake up all threads waiting on this condition
  this method acts      like notify but wakes up all waiting threads instead of      one
 if the calling thread has not acquired the lock when this      method is called a runtimeerror is raised
semaphore objects
semaphore example
event objects
this is one of the simplest mechanisms for communication betweenthreads one thread signals an event and other threads wait for it
an event object manages an internal flag that can be set to true withthe set method and reset to false with the clear method
  thewait method blocks until the flag is true
class threading
event   class implementing event objects
  an event manages a flag that can   be set to true with the set method and reset to false with the   clear method
  the wait method blocks until the flag is   true
 the flag is initially false
   changed in version 3
3 changed from a factory function to a class
   isset      return true if and only if the internal flag is true
   set      set the internal flag to true
 all threads waiting for it to      become true are awakened
 threads that call wait once the      flag is true will not block at all
   clear      reset the internal flag to false
 subsequently threads calling      wait will block until set is called to set the internal      flag to true again
   waittimeoutnone      block until the internal flag is true
  if the internal flag is      true on entry return immediately
  otherwise block until      another thread calls set to set the flag to true or until      the optional timeout occurs
      when the timeout argument is present and not none it should      be a floating point number specifying a timeout for the      operation in seconds or fractions thereof
      this method returns true if and only if the internal flag has      been set to true either before the wait call or after the wait      starts so it will always return true except if a timeout is      given and the operation times out
      changed in version 3
1 previously the method always returned      none
timer objects
barrier objects
using locks conditions and semaphores in the with statement
all of the objects provided by this module that have acquire andrelease methods can be used as context managers for a withstatement
  the acquire method will be called when the block isentered and release will be called when the block is exited
hence the following snippet   with somelock        do something
is equivalent to   somelock
releasecurrently lock rlock condition semaphore andboundedsemaphore objects may be used as with statement contextmanagers
ospath  common pathname manipulations
importlib  the implementation of import
new in version 3
1
source code libimportlibinit
introduction
functions
importlibabc  abstract base classes related to import
importlibresources  resources
source code libimportlibresources
pynew in version 3
7
this module leverages pythons import system to provide access toresources within packages
  if you can import a package you canaccess resources within that package
  resources can be opened orread in either binary or text mode
resources are roughly akin to files inside directories though itsimportant to keep in mind that this is just a metaphor
  resources andpackages do not have to exist as physical files and directories onthe file system
note  this module provides functionality similar to pkgresources basic  resource access without the performance overhead of that package
loaders that wish to support resource reading should implement agetresourcereaderfullname method as specified byimportlib
resourcereader
   new in version 3
9
importlibmachinery  importers and path hooks
   new in version 3
3
   new in version 3
3
   deprecated since version 3
5 use bytecodesuffixes instead
   new in version 3
3
   deprecated since version 3
5 use bytecodesuffixes instead
   new in version 3
3
   changed in version 3
5 the value is no longer dependent on   debug
   new in version 3
3
   new in version 3
3
   changed in version 3
5 as part of pep 489 the builtin   importer now implements loader
createmodule and   loader
   changed in version 3
4 gained createmodule and   execmodule methods
   new in version 3
3
   deprecated since version 3
6 use site configuration instead
   future versions of python may not enable this finder by default
      new in version 3
4
      changed in version 3
5 if the current working directory       represented by an empty string  is no longer valid then none      is returned but no value is cached in sys
      deprecated since version 3
4 use findspec instead
      changed in version 3
7 entries of none in      sys
pathimportercache are deleted
   changed in version 3
4 calls objects in sys
pathhooks with the   current working directory for  i
   new in version 3
3
      new in version 3
4
   new in version 3
3
      deprecated since version 3
6 use      importlib
execmodule instead
   new in version 3
3
   deprecated since version 3
6 use   importlib
   new in version 3
3
      new in version 3
5
      new in version 3
5
   getfilenamefullname      returns path
      new in version 3
4
   new in version 3
4
importlibutil  utility code for importers
   new in version 3
4
   new in version 3
4
   changed in version 3
5 the optimization parameter was added and   the debugoverride parameter was deprecated
   changed in version 3
6 accepts a pathlike object
   new in version 3
4
   changed in version 3
6 accepts a pathlike object
   new in version 3
4
   new in version 3
3
   changed in version 3
9 to improve consistency with import   statements raise importerror instead of valueerror for invalid   relative import attempts
   new in version 3
4
   changed in version 3
7 raises modulenotfounderror instead of   attributeerror if package is in fact not a package i
   new in version 3
5
   changed in version 3
3 loader and package are   automatically set when possible
   changed in version 3
4 set name loader package   unconditionally to support reloading
   deprecated since version 3
4 the import machinery now directly   performs all the functionality provided by this function
   changed in version 3
4 set loader if set to none as if   the attribute does not exist
   deprecated since version 3
4 the import machinery takes care of   this automatically
   deprecated since version 3
4 the import machinery takes care of   this automatically
   new in version 3
4
   new in version 3
4
   changed in version 3
6 accepts a pathlike object
   new in version 3
7
   note     for projects where startup time is critical this class allows     for potentially minimizing the cost of loading a module if it is     never used
   new in version 3
5
   changed in version 3
6 began calling createmodule removing   the compatibility warning for importlib
builtinimporter   and importlib
examples
importing programmatically
checking if a module can be imported
importing a source file directly
setting up an importer
approximating importlibimportmodule
random  generate pseudorandom numbers
bookkeeping functions
seedanone version2   initialize the random number generator
   if a is omitted or none the current system time is used
  if   randomness sources are provided by the operating system they are   used instead of the system time see the os
urandom function   for details on availability
   if a is an int it is used directly
   with version 2 the default a str bytes or bytearray   object gets converted to an int and all of its bits are used
   with version 1 provided for reproducing random sequences from   older versions of python the algorithm for str and bytes   generates a narrower range of seeds
   changed in version 3
2 moved to the version 2 scheme which uses   all of the bits in a string seed
   deprecated since version 3
9 in the future the seed must be one   of the following types nonetype int float str bytes   or bytearray
getstate   return an object capturing the current internal state of the   generator
  this object can be passed to setstate to restore   the state
setstatestate   state should have been obtained from a previous call to   getstate and setstate restores the internal state of the   generator to what it was at the time getstate was called
functions for bytes
randbytesn   generate n random bytes
   this method should not be used for generating security tokens
 use   secrets
tokenbytes instead
   new in version 3
9
functions for integers
randrangestart stop step   return a randomly selected element from rangestart stop step
   this is equivalent to choicerangestart stop step but   doesnt actually build a range object
   the positional argument pattern matches that of range
  keyword   arguments should not be used because the function may use them in   unexpected ways
   changed in version 3
2 randrange is more sophisticated about   producing equally distributed values
  formerly it used a style   like intrandomn which could produce slightly uneven   distributions
randinta b   return a random integer n such that a  n  b
  alias for   randrangea b1
getrandbitsk   returns a python integer with k random bits
 this method is   supplied with the mersennetwister generator and some other   generators may also provide it as an optional part of the api
 when   available getrandbits enables randrange to handle   arbitrarily large ranges
   changed in version 3
9 this method now accepts zero for k
functions for sequences
choiceseq   return a random element from the nonempty sequence seq
 if seq   is empty raises indexerror
choicespopulation weightsnone  cumweightsnone k1   return a k sized list of elements chosen from the population   with replacement
 if the population is empty raises   indexerror
   if a weights sequence is specified selections are made according   to the relative weights
  alternatively if a cumweights   sequence is given the selections are made according to the   cumulative weights perhaps computed using   itertools
accumulate
  for example the relative weights 10   5 30 5 are equivalent to the cumulative weights 10 15 45   50
  internally the relative weights are converted to cumulative   weights before making selections so supplying the cumulative   weights saves work
   if neither weights nor cumweights are specified selections   are made with equal probability
  if a weights sequence is   supplied it must be the same length as the population sequence
   it is a typeerror to specify both weights and cumweights
   the weights or cumweights can use any numeric type that   interoperates with the float values returned by random that   includes integers floats and fractions but excludes decimals
   behavior is undefined if any weight is negative
  a valueerror is   raised if all weights are zero
   for a given seed the choices function with equal weighting   typically produces a different sequence than repeated calls to   choice
  the algorithm used by choices uses floating point   arithmetic for internal consistency and speed
  the algorithm used   by choice defaults to integer arithmetic with repeated   selections to avoid small biases from roundoff error
   new in version 3
6
   changed in version 3
9 raises a valueerror if all weights are   zero
shufflex random   shuffle the sequence x in place
   the optional argument random is a 0argument function returning a   random float in 0
0 by default this is the function   random
   to shuffle an immutable sequence and return a new shuffled list   use samplex klenx instead
   note that even for small lenx the total number of permutations   of x can quickly grow larger than the period of most random   number generators
 this implies that most permutations of a long   sequence can never be generated
  for example a sequence of length   2080 is the largest that can fit within the period of the mersenne   twister random number generator
11 the   optional parameter random
samplepopulation k  countsnone   return a k length list of unique elements chosen from the   population sequence or set
 used for random sampling without   replacement
   returns a new list containing elements from the population while   leaving the original population unchanged
  the resulting list is   in selection order so that all subslices will also be valid random   samples
  this allows raffle winners the sample to be partitioned   into grand prize and second place winners the subslices
   members of the population need not be hashable or unique
  if the   population contains repeats then each occurrence is a possible   selection in the sample
   repeated elements can be specified one at a time or with the   optional keywordonly counts parameter
  for example   samplered blue counts4 2 k5 is equivalent to   samplered red red red blue blue k5
   to choose a sample from a range of integers use a range object   as an argument
  this is especially fast and space efficient for   sampling from a large population  samplerange10000000 k60
   if the sample size is larger than the population size a   valueerror is raised
   changed in version 3
9 added the counts parameter
   deprecated since version 3
9 in the future the population must   be a sequence
  instances of set are no longer supported
  the   set must first be converted to a list or tuple preferably in a   deterministic order so that the sample is reproducible
realvalued distributions
the following functions generate specific realvalued distributions
function parameters are named after the corresponding variables in thedistributions equation as used in common mathematical practice mostof these equations can be found in any statistics text
random   return the next random floating point number in the range 0
0   1
0
uniforma b   return a random floating point number n such that a  n  b   for a  b and b  n  a for b  a
   the endpoint value b may or may not be included in the range   depending on floatingpoint rounding in the equation a  ba    random
triangularlow high mode   return a random floating point number n such that low  n    high and with the specified mode between those bounds
  the   low and high bounds default to zero and one
  the mode   argument defaults to the midpoint between the bounds giving a   symmetric distribution
betavariatealpha beta   beta distribution
  conditions on the parameters are alpha  0   and beta  0
 returned values range between 0 and 1
expovariatelambd   exponential distribution
  lambd is 1
0 divided by the desired   mean
  it should be nonzero
  the parameter would be called   lambda but that is a reserved word in python
  returned values   range from 0 to positive infinity if lambd is positive and from   negative infinity to 0 if lambd is negative
random
gammavariatealpha beta   gamma distribution
  not the gamma function  conditions on the   parameters are alpha  0 and beta  0
   the probability distribution function is                x  alpha  1  math
expx  beta      pdfx                     math
gammaalpha  beta  alpharandom
gaussmu sigma   gaussian distribution
  mu is the mean and sigma is the   standard deviation
  this is slightly faster than the   normalvariate function defined below
   multithreading note  when two threads call this function   simultaneously it is possible that they will receive the same   return value
  this can be avoided in three ways
 1 have each   thread use a different instance of the random number generator
 2   put locks around all calls
 3 use the slower but threadsafe   normalvariate function instead
random
lognormvariatemu sigma   log normal distribution
  if you take the natural logarithm of this   distribution youll get a normal distribution with mean mu and   standard deviation sigma
  mu can have any value and sigma   must be greater than zero
random
normalvariatemu sigma   normal distribution
  mu is the mean and sigma is the standard   deviation
random
vonmisesvariatemu kappa   mu is the mean angle expressed in radians between 0 and 2pi   and kappa is the concentration parameter which must be greater   than or equal to zero
  if kappa is equal to zero this   distribution reduces to a uniform random angle over the range 0 to   2pi
paretovariatealpha   pareto distribution
  alpha is the shape parameter
weibullvariatealpha beta   weibull distribution
  alpha is the scale parameter and beta is   the shape parameter
alternative generator
notes on reproducibility
sometimes it is useful to be able to reproduce the sequences given bya pseudorandom number generator
  by reusing a seed value the samesequence should be reproducible from run to run as long as multiplethreads are not running
most of the random modules algorithms and seeding functions aresubject to change across python versions but two aspects areguaranteed not to change if a new seeding method is added then a backward compatible seeder  will be offered
 the generators random method will continue to produce the same  sequence when the compatible seeder is given the same seed
examples
basic examples    random                              random float  0
split    shuffledeck                         shuffle a list    deck   four two ace three    sample10 20 30 40 50 k4     four samples without replacement   40 10 50 30simulations     six roulette wheel spins weighted sampling with replacement    choicesred black green 18 18 2 k6   red green black black red black     deal 20 cards without replacement from a deck     of 52 playing cards and determine the proportion of cards     with a tenvalue  ten jack queen or king
7958example of statistical bootstrapping using resampling with replacementto estimate a confidence interval for the mean of a sample    httpstatistics
1fexample of a resampling permutation test to determine the statisticalsignificance or pvalue of an observed difference between the effectsof a drug versus a placebo    example from statistics is easy by dennis shasha and manda wilson   from statistics import fmean as mean   from random import shuffle   drug  54 73 53 70 73 68 52 65 65   placebo  54 51 58 44 55 52 42 47 58 46   observeddiff  meandrug  meanplacebo   n  10000   count  0   combined  drug  placebo   for i in rangen       shufflecombined       newdiff  meancombinedlendrug  meancombinedlendrug       count  newdiff  observeddiff   printfn label reshufflings produced only count instances with a difference   printfat least as extreme as the observed difference of observeddiff
simulation of arrival times and service deliveries for a multiserverqueue   from heapq import heappush heappop   from random import expovariate gauss   from statistics import mean median stdev   averagearrivalinterval  5
see also  statistics for hackers a video tutorial by jake vanderplas on  statistical analysis using just a few fundamental concepts including  simulation sampling shuffling and crossvalidation
  economics simulation a simulation of a marketplace by peter norvig  that shows effective use of many of the tools and distributions  provided by this module gauss uniform sample betavariate  choice triangular and randrange
  a concrete introduction to probability using python a tutorial by  peter norvig covering the basics of probability theory how to write  simulations and how to perform data analysis using python
recipes
the default random returns multiples of 2⁻⁵³ in the range 0
0 ≤ x 1
0
  all such numbers are evenly spaced and are exactlyrepresentable as python floats
  however many other representablefloats in that interval are not possible selections
  for example0
05954861408025609 isnt an integer multiple of 2⁻⁵³
the following recipe takes a different approach
  all floats in theinterval are possible selections
  the mantissa comes from a uniformdistribution of integers in the range 2⁵² ≤ mantissa  2⁵³
  theexponent comes from a geometric distribution where exponents smallerthan 53 occur half as often as the next larger exponent
bitlength  32           return ldexpmantissa exponentall real valued distributions in the class will use the new method    fr  fullrandom    fr
87925541791544the recipe is conceptually equivalent to an algorithm that choosesfrom all the multiples of 2⁻¹⁰⁷⁴ in the range 0
0
  allsuch numbers are evenly spaced but most have to be rounded down tothe nearest representable python float
  the value 2⁻¹⁰⁷⁴ is thesmallest positive unnormalized float and is equal to math
0
see also  generating pseudorandom floatingpoint values a paper by allen b
  downey describing ways to generate more finegrained floats than  normally generated by random
asyncio  asynchronous io
runmainasyncio is a library to write concurrent code using theasyncawait syntax
asyncio is used as a foundation for multiple python asynchronousframeworks that provide highperformance network and webserversdatabase connection libraries distributed task queues etc
asyncio is often a perfect fit for iobound and highlevelstructured network code
asyncio provides a set of highlevel apis to run python coroutines concurrently and have full control over their  execution perform network io and ipc control subprocesses distribute tasks via queues synchronize concurrent codeadditionally there are lowlevel apis for library and frameworkdevelopers to create and manage event loops which provide asynchronous apis for  networking running subprocesses handling os signals etc implement efficient protocols using transports bridge callbackbased libraries and code with asyncawait syntax
 reference highlevel apis coroutines and tasks streams synchronization primitives subprocesses queues exceptionslowlevel apis event loop futures transports and protocols policies platform supportguides and tutorials highlevel api index lowlevel api index developing with asyncionote  the source code for asyncio can be found in libasyncio
xmlsaxhandler  base classes for sax handlers
contenthandler objects
   note     the earlier sax 1 interface provided by the python xml special     interest group used a more javalike interface for this method
dtdhandler objects
entityresolver objects
errorhandler objects
queue  a synchronized queue class
source code libqueue
pythe queue module implements multiproducer multiconsumer queues
it is especially useful in threaded programming when information mustbe exchanged safely between multiple threads
  the queue class inthis module implements all the required locking semantics
the module implements three types of queue which differ only in theorder in which the entries are retrieved
  in a fifo firstin firstout queue the first tasks added are the first retrieved
 in a lifolastin firstout queue the most recently added entry is the firstretrieved operating like a stack
  with a priority queue theentries are kept sorted using the heapq module and the lowestvalued entry is retrieved first
internally those three types of queues use locks to temporarily blockcompeting threads however they are not designed to handle reentrancywithin a thread
in addition the module implements a simple fifo firstin firstout queue type simplequeue whose specific implementation providesadditional guarantees in exchange for the smaller functionality
the queue module defines the following classes and exceptionsclass queue
lifoqueuemaxsize0   constructor for a lifo lastin firstout queue
  maxsize is an   integer that sets the upperbound limit on the number of items that   can be placed in the queue
  insertion will block once this size   has been reached until queue items are consumed
  if maxsize is   less than or equal to zero the queue size is infinite
priorityqueuemaxsize0   constructor for a priority queue
  maxsize is an integer that   sets the upperbound limit on the number of items that can be placed   in the queue
  insertion will block once this size has been   reached until queue items are consumed
  if maxsize is less than   or equal to zero the queue size is infinite
   the lowest valued entries are retrieved first the lowest valued   entry is the one returned by sortedlistentries0
  a   typical pattern for entries is a tuple in the form   prioritynumber data
   if the data elements are not comparable the data can be wrapped   in a class that ignores the data item and only compares the   priority number      from dataclasses import dataclass field      from typing import any      dataclassordertrue      class prioritizeditem          priority int          item anyfieldcomparefalseclass queue
simplequeue   constructor for an unbounded fifo firstin firstout queue
   simple queues lack advanced functionality such as task tracking
   new in version 3
7
empty   exception raised when nonblocking get or getnowait is   called on a queue object which is empty
full   exception raised when nonblocking put or putnowait is   called on a queue object which is full
queue objects
queue objects queue lifoqueue or priorityqueue provide thepublic methods described below
qsize   return the approximate size of the queue
  note qsize  0   doesnt guarantee that a subsequent get will not block nor will   qsize  maxsize guarantee that put will not block
empty   return true if the queue is empty false otherwise
  if empty   returns true it doesnt guarantee that a subsequent call to put   will not block
  similarly if empty returns false it doesnt   guarantee that a subsequent call to get will not block
full   return true if the queue is full false otherwise
  if full   returns true it doesnt guarantee that a subsequent call to get   will not block
  similarly if full returns false it doesnt   guarantee that a subsequent call to put will not block
putitem blocktrue timeoutnone   put item into the queue
 if optional args block is true and   timeout is none the default block if necessary until a free   slot is available
 if timeout is a positive number it blocks at   most timeout seconds and raises the full exception if no free   slot was available within that time
 otherwise block is false   put an item on the queue if a free slot is immediately available   else raise the full exception timeout is ignored in that   case
putnowaititem   equivalent to putitem false
getblocktrue timeoutnone   remove and return an item from the queue
 if optional args block   is true and timeout is none the default block if necessary   until an item is available
 if timeout is a positive number it   blocks at most timeout seconds and raises the empty exception   if no item was available within that time
 otherwise block is   false return an item if one is immediately available else raise   the empty exception timeout is ignored in that case
   prior to 3
0 on posix systems and for all versions on windows if   block is true and timeout is none this operation goes into   an uninterruptible wait on an underlying lock
 this means that no   exceptions can occur and in particular a sigint will not trigger a   keyboardinterrupt
getnowait   equivalent to getfalse
two methods are offered to support tracking whether enqueued taskshave been fully processed by daemon consumer threads
taskdone   indicate that a formerly enqueued task is complete
  used by queue   consumer threads
  for each get used to fetch a task a   subsequent call to taskdone tells the queue that the   processing on the task is complete
   if a join is currently blocking it will resume when all items   have been processed meaning that a taskdone call was received   for every item that had been put into the queue
   raises a valueerror if called more times than there were items   placed in the queue
join   blocks until all items in the queue have been gotten and processed
   the count of unfinished tasks goes up whenever an item is added to   the queue
 the count goes down whenever a consumer thread calls   taskdone to indicate that the item was retrieved and all work   on it is complete
 when the count of unfinished tasks drops to   zero join unblocks
example of how to wait for enqueued tasks to be completed   import threading queue   q  queue
simplequeue objects
simplequeue objects provide the public methods described below
qsize   return the approximate size of the queue
  note qsize  0   doesnt guarantee that a subsequent get will not block
empty   return true if the queue is empty false otherwise
 if empty   returns false it doesnt guarantee that a subsequent call to   get will not block
putitem blocktrue timeoutnone   put item into the queue
  the method never blocks and always   succeeds except for potential lowlevel errors such as failure to   allocate memory
 the optional args block and timeout are   ignored and only provided for compatibility with queue
put
putnowaititem   equivalent to putitem provided for compatibility with   queue
putnowait
getblocktrue timeoutnone   remove and return an item from the queue
  if optional args block   is true and timeout is none the default block if necessary   until an item is available
 if timeout is a positive number it   blocks at most timeout seconds and raises the empty exception   if no item was available within that time
 otherwise block is   false return an item if one is immediately available else raise   the empty exception timeout is ignored in that case
getnowait   equivalent to getfalse
see also  class multiprocessing
queue     a queue class for use in a multiprocessing rather than multi     threading context
deque is an alternative implementation of unbounded  queues with fast atomic append and popleft operations that  do not require locking and also support indexing
mmap  memorymapped file support
madv constants
   new in version 3
8
struct  interpret bytes as packed binary data
source code libstruct
pythis module performs conversions between python values and c structsrepresented as python bytes objects
  this can be used in handlingbinary data stored in files or from network connections among othersources
  it uses format strings as compact descriptions of the layoutof the c structs and the intended conversion tofrom python values
note  by default the result of packing a given c struct includes pad  bytes in order to maintain proper alignment for the c types  involved similarly alignment is taken into account when unpacking
  this behavior is chosen so that the bytes of a packed struct  correspond exactly to the layout in memory of the corresponding c  struct
  to handle platformindependent data formats or omit  implicit pad bytes use standard size and alignment instead of  native size and alignment see byte order size and alignment for  details
several struct functions and methods of struct take a bufferargument
  this refers to objects that implement the buffer protocoland provide either a readable or readwritable buffer
  the mostcommon types used for that purpose are bytes and bytearray butmany other types that can be viewed as an array of bytes implement thebuffer protocol so that they can be readfilled without additionalcopying from a bytes object
functions and exceptions
format strings
format strings are the mechanism used to specify the expected layoutwhen packing and unpacking data
  they are built up from formatcharacters which specify the type of data being packedunpacked
  inaddition there are special characters for controlling the byte ordersize and alignment
byte order size and alignment
format characters
examples
note  all examples assume a native byte order size and alignment with a  bigendian machine
a basic example of packingunpacking three integers    from struct import     packhhl 1 2 3   bx00x01x00x02x00x00x00x03    unpackhhl bx00x01x00x02x00x00x00x03   1 2 3    calcsizehhl   8unpacked fields can be named by assigning them to variables or bywrapping the result in a named tuple    record  braymond   x32x12x08x01x08    name serialnum school gradelevel  unpack10shhb record    from collections import namedtuple    student  namedtuplestudent name serialnum school gradelevel    student
makeunpack10shhb record   studentnamebraymond    serialnum4658 school264 gradelevel8the ordering of format characters may have an impact on size since thepadding needed to satisfy alignment requirements is different    packci b 0x12131415   bx00x00x00x12x13x14x15    packic 0x12131415 b   bx12x13x14x15    calcsizeci   8    calcsizeic   5the following format llh0l specifies two pad bytes at the endassuming longs are aligned on 4byte boundaries    packllh0l 1 2 3   bx00x00x00x01x00x00x00x02x00x03x00x00this only works when native size and alignment are in effect standardsize and alignment does not enforce any alignment
see also  module array     packed binary storage of homogeneous data
  module xdrlib     packing and unpacking of xdr data
classes
the struct module also defines the following typeclass struct
structformat   return a new struct object which writes and reads binary data   according to the format string format
  creating a struct object   once and calling its methods is more efficient than calling the   struct functions with the same format since the format string   only needs to be compiled once
   note     the compiled versions of the most recent format strings passed to     struct and the modulelevel functions are cached so programs     that use only a few format strings neednt worry about reusing a     single struct instance
   compiled struct objects support the following methods and   attributes   packv1 v2 
      identical to the pack function using the compiled format
      lenresult will equal size
      identical to the packinto function using the compiled      format
   unpackbuffer      identical to the unpack function using the compiled format
      the buffers size in bytes must equal size
   unpackfrombuffer offset0      identical to the unpackfrom function using the compiled      format
 the buffers size in bytes starting at position      offset must be at least size
   iterunpackbuffer      identical to the iterunpack function using the compiled      format
 the buffers size in bytes must be a multiple of size
      new in version 3
4
   format      the format string used to construct this struct object
      changed in version 3
7 the format string type is now str      instead of bytes
   size      the calculated size of the struct and hence of the bytes object      produced by the pack method corresponding to format
netrc  netrc file processing
source code libnetrc
pythe netrc class parses and encapsulates the netrc file format usedby the unix ftp program and other ftp clients
netrcfile   a netrc instance or subclass instance encapsulates data from  a   netrc file
  the initialization argument if present specifies the   file to parse
  if no argument is given the file 
netrc in the   users home directory  as determined by os
expanduser    will be read
  otherwise a filenotfounderror exception will be   raised
 parse errors will raise netrcparseerror with diagnostic   information including the file name line number and terminating   token
 if no argument is specified on a posix system the presence   of passwords in the 
netrc file will raise a netrcparseerror if   the file ownership or permissions are insecure owned by a user   other than the user running the process or accessible for read or   write by any other user
 this implements security behavior   equivalent to that of ftp and other programs that use 
netrc
   changed in version 3
4 added the posix permission check
   changed in version 3
7 os
expanduser is used to find the   location of the 
netrc file when file is not passed as   argument
netrcparseerror   exception raised by the netrc class when syntactical errors are   encountered in source text
  instances of this exception provide   three interesting attributes  msg is a textual explanation of   the error filename is the name of the source file and lineno   gives the line number on which the error was found
netrc objects
a netrc instance has the following methodsnetrc
authenticatorshost   return a 3tuple login account password of authenticators for   host
 if the netrc file did not contain an entry for the given   host return the tuple associated with the default entry
  if   neither matching host nor default entry is available return   none
repr   dump the class data as a string in the format of a netrc file
   this discards comments and may reorder the entries
instances of netrc have public instance variablesnetrc
hosts   dictionary mapping host names to login account password   tuples
  the default entry if any is represented as a pseudo   host by that name
macros   dictionary mapping macro names to string lists
note  passwords are limited to a subset of the ascii character set
  all  ascii punctuation is allowed in passwords however note that  whitespace and nonprintable characters are not allowed in  passwords
  this is a limitation of the way the 
netrc file is  parsed and may be removed in the future
tkintercolorchooser  color choosing dialog
source code libtkintercolorchooser
pythe tkinter
colorchooser module provides the chooser class as aninterface to the native color picker dialog
 chooser implements amodal color choosing dialog window
 the chooser class inherits fromthe dialog class
askcolorcolornone options   create a color choosing dialog
 a call to this method will show the   window wait for the user to make a selection and return the   selected color or none to the caller
see also  module tkinter
commondialog     tkinter standard dialog module
cgi  common gateway interface support
source code libcgi
introduction
using the cgi module
begin by writing import cgi
when you write a new script consider adding these lines   import cgitb   cgitb
changed in version 3
4 the file attribute is automatically closedupon the garbage collection of the creating fieldstorage instance
changed in version 3
5 added support for the context managementprotocol to the fieldstorage class
higher level interface
functions
   changed in version 3
7 added the encoding and errors   parameters
  for nonfile fields the value is now a list of   strings not bytes
caring about security
installing your cgi script on a unix system
testing your cgi script
debugging cgi scripts
common problems and solutions
 footnotes 1 note that some recent versions of the html specification do state    what order the field values should be supplied in but knowing    whether a request was received from a conforming browser or even    from a browser at all is tedious and errorprone
thread  lowlevel threading api
shutil  highlevel file operations
source code libshutil
pythe shutil module offers a number of highlevel operations on filesand collections of files
  in particular functions are providedwhich support file copying and removal
 for operations on individualfiles see also the os module
warning  even the higherlevel file copying functions shutil
copy  shutil
copy2 cannot copy all file metadata
on posix platforms  this means that file owner and group are lost as well as acls
  on  mac os the resource fork and other metadata are not used
 this  means that resources will be lost and file type and creator codes  will not be correct
 on windows file owners acls and alternate  data streams are not copied
directory and files operations
platformdependent efficient copy operations
starting from python 3
8 all functions involving a file copycopyfile copy copy2 copytree and move mayuse platformspecific fastcopy syscalls in order to copy the filemore efficiently see bpo33671
 fastcopy means that the copyingoperation occurs within the kernel avoiding the use of userspacebuffers in python as in outfd
read
on macos fcopyfile is used to copy the file content not metadata
on linux os
sendfile is used
on windows shutil
copyfile uses a bigger default buffer size 1mib instead of 64 kib and a memoryviewbased variant ofshutil
copyfileobj is used
if the fastcopy operation fails and no data was written in thedestination file then shutil will silently fallback on using lessefficient copyfileobj function internally
changed in version 3
8
copytree example
this example is the implementation of the copytree functiondescribed above with the docstring omitted
  it demonstrates many ofthe other functions provided by this module
extendsrc dst strwhy       if errors           raise errorerrorsanother example that uses the ignorepatterns helper   from shutil import copytree ignorepatterns   copytreesource destination ignoreignorepatterns
pyc tmpthis will copy everything except 
pyc files and files or directorieswhose name starts with tmp
another example that uses the ignore argument to add a logging call   from shutil import copytree   import logging   def logpathpath names       logging
rmtree example
this example shows how to remove a directory tree on windows wheresome of the files have their readonly bit set
 it uses the onerrorcallback to clear the readonly bit and reattempt the remove
 anysubsequent failure will propagate
archiving operations
archiving example
in this example we create a gziped tarfile archive containing allfiles found in the 
ssh directory of the user    from shutil import makearchive    import os    archivename  os
gzthe resulting archive contains    tar tzvf userstarekmyarchive
archiving example with basedir
in this example similar to the one above we show how to usemakearchive but this time with the usage of basedir
  we nowhave the following directory structure    tree tmp   tmp   └── root       └── structure           ├── content               └── pleaseadd
txtin the final archive pleaseadd
txt should be included butdonotadd
txt should not
  therefore we use the following    from shutil import makearchive    import os    archivename  os
tarlisting the files in the resulting archive gives us    python m tarfile l userstarekmyarchive
querying the size of the output terminal
getterminalsizefallbackcolumns lines   get the size of the terminal window
   for each of the two dimensions the environment variable columns   and lines respectively is checked
 if the variable is defined   and the value is a positive integer it is used
   when columns or lines is not defined which is the common case   the terminal connected to sys
stdout is queried by invoking   os
getterminalsize
   if the terminal size cannot be successfully queried either because   the system doesnt support querying or because we are not   connected to a terminal the value given in fallback parameter is   used
 fallback defaults to 80 24 which is the default size   used by many terminal emulators
   the value returned is a named tuple of type os
terminalsize
   see also the single unix specification version 2 other   environment variables
   new in version 3
3
poplib  pop3 protocol client
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socket
   changed in version 3
2 context parameter added
   changed in version 3
4 the class now supports hostname check with   ssl
   deprecated since version 3
6 keyfile and certfile are   deprecated in favor of context
 please use   ssl
loadcertchain instead or let   ssl
createdefaultcontext select the systems trusted ca   certificates for you
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socket
see also  module imaplib     the standard python imap module
pop3 objects
   new in version 3
4
   new in version 3
5
   new in version 3
4
pop3 example
zipimport  import modules from zip archives
source code libzipimport
pythis module adds the ability to import python modules 
py
pyc and packages from zipformat archives
 it is usually notneeded to use the zipimport module explicitly it is automaticallyused by the builtin import mechanism for sys
path items that arepaths to zip archives
typically sys
path is a list of directory names as strings
  thismodule also allows an item of sys
path to be a string naming a zipfile archive
 the zip archive can contain a subdirectory structure tosupport package imports and a path within the archive can bespecified to only import from a subdirectory
  for example the pathexample
ziplib would only import from the lib subdirectorywithin the archive
any files may be present in the zip archive but only files 
py and
pyc are available for import
  zip import of dynamic modules
pyd 
so is disallowed
 note that if an archive only contains
py files python will not attempt to modify the archive by addingthe corresponding 
pyc file meaning that if a zip archive doesntcontain 
pyc files importing may be rather slow
changed in version 3
8 previously zip archives with an archivecomment were not supported
see also  pkzip application note     documentation on the zip file format by phil katz the creator of     the format and algorithms used
  pep 273  import modules from zip archives     written by james c
 ahlstrom who also provided an     implementation
3 follows the specification in pep     273 but uses an implementation written by just van rossum that     uses the import hooks described in pep 302
  pep 302  new import hooks     the pep to add the import hooks that help this module work
this module defines an exceptionexception zipimport
zipimporterror   exception raised by zipimporter objects
 its a subclass of   importerror so it can be caught as importerror too
zipimporter objects
zipimporter is the class for importing zip files
zipimporterarchivepath   create a new zipimporter instance
 archivepath must be a path to   a zip file or to a specific path within a zip file
  for example   an archivepath of foobar
ziplib will look for modules in the   lib directory inside the zip file foobar
zip provided that it   exists
   zipimporterror is raised if archivepath doesnt point to a   valid zip archive
   findmodulefullname path      search for a module specified by fullname
 fullname must be      the fully qualified dotted module name
 it returns the      zipimporter instance itself if the module was found or none      if it wasnt
 the optional path argument is ignoredits      there for compatibility with the importer protocol
   getcodefullname      return the code object for the specified module
 raise      zipimporterror if the module couldnt be found
   getdatapathname      return the data associated with pathname
 raise oserror if      the file wasnt found
      changed in version 3
3 ioerror used to be raised instead of      oserror
   getfilenamefullname      return the value file would be set to if the specified      module was imported
 raise zipimporterror if the module      couldnt be found
      new in version 3
1
   getsourcefullname      return the source code for the specified module
 raise      zipimporterror if the module couldnt be found return none      if the archive does contain the module but has no source for      it
   ispackagefullname      return true if the module specified by fullname is a      package
 raise zipimporterror if the module couldnt be found
   loadmodulefullname      load the module specified by fullname
 fullname must be the      fully qualified dotted module name
 it returns the imported      module or raises zipimporterror if it wasnt found
   archive      the file name of the importers associated zip file without a      possible subpath
   prefix      the subpath within the zip file where modules are searched
      this is the empty string for zipimporter objects which point to      the root of the zip file
   the archive and prefix attributes when combined with a slash   equal the original archivepath argument given to the   zipimporter constructor
examples
here is an example that imports a module from a zip archive  notethat the zipimport module is not explicitly used
heapq  heap queue algorithm
source code libheapq
pythis module provides an implementation of the heap queue algorithmalso known as the priority queue algorithm
heaps are binary trees for which every parent node has a value lessthan or equal to any of its children
  this implementation uses arraysfor which heapk  heap2k1 and heapk  heap2k2 forall k counting elements from zero
  for the sake of comparisonnonexisting elements are considered to be infinite
  the interestingproperty of a heap is that its smallest element is always the rootheap0
the api below differs from textbook heap algorithms in two aspectsa we use zerobased indexing
  this makes the relationship betweenthe index for a node and the indexes for its children slightly lessobvious but is more suitable since python uses zerobased indexing
b our pop method returns the smallest item not the largest calleda min heap in textbooks a max heap is more common in textsbecause of its suitability for inplace sorting
these two make it possible to view the heap as a regular python listwithout surprises heap0 is the smallest item and heap
sortmaintains the heap invariantto create a heap use a list initialized to  or you can transforma populated list into a heap via function heapify
the following functions are providedheapq
heappushheap item   push the value item onto the heap maintaining the heap   invariant
heappopheap   pop and return the smallest item from the heap maintaining the   heap invariant
  if the heap is empty indexerror is raised
  to   access the smallest item without popping it use heap0
heappushpopheap item   push item on the heap then pop and return the smallest item from   the heap
  the combined action runs more efficiently than   heappush followed by a separate call to heappop
heapifyx   transform list x into a heap inplace in linear time
heapreplaceheap item   pop and return the smallest item from the heap and also push the   new item
 the heap size doesnt change
 if the heap is empty   indexerror is raised
   this one step operation is more efficient than a heappop   followed by heappush and can be more appropriate when using a   fixedsize heap
 the poppush combination always returns an element   from the heap and replaces it with item
   the value returned may be larger than the item added
  if that   isnt desired consider using heappushpop instead
  its   pushpop combination returns the smaller of the two values leaving   the larger value on the heap
the module also offers three general purpose functions based on heaps
mergeiterables keynone reversefalse   merge multiple sorted inputs into a single sorted output for   example merge timestamped entries from multiple log files
   returns an iterator over the sorted values
   similar to sorteditertools
chainiterables but returns an   iterable does not pull the data into memory all at once and   assumes that each of the input streams is already sorted smallest   to largest
   has two optional arguments which must be specified as keyword   arguments
   key specifies a key function of one argument that is used to   extract a comparison key from each input element
  the default   value is none compare the elements directly
   reverse is a boolean value
  if set to true then the input   elements are merged as if each comparison were reversed
 to achieve   behavior similar to sorteditertools
chainiterables   reversetrue all iterables must be sorted from largest to   smallest
   changed in version 3
5 added the optional key and reverse   parameters
nlargestn iterable keynone   return a list with the n largest elements from the dataset   defined by iterable
  key if provided specifies a function of   one argument that is used to extract a comparison key from each   element in iterable for example keystr
  equivalent   to  sortediterable keykey reversetruen
nsmallestn iterable keynone   return a list with the n smallest elements from the dataset   defined by iterable
  key if provided specifies a function of   one argument that is used to extract a comparison key from each   element in iterable for example keystr
  equivalent   to  sortediterable keykeyn
the latter two functions perform best for smaller values of n
  forlarger values it is more efficient to use the sorted function
also when n1 it is more efficient to use the builtin minand max functions
  if repeated usage of these functions isrequired consider turning the iterable into an actual heap
basic examples
priority queue implementation notes
a priority queue is common use for a heap and it presents severalimplementation challenges sort stability  how do you get two tasks with equal priorities to  be returned in the order they were originally added tuple comparison breaks for priority task pairs if the priorities  are equal and the tasks do not have a default comparison order
 if the priority of a task changes how do you move it to a new  position in the heap or if a pending task needs to be deleted how do you find it and  remove it from the queuea solution to the first two challenges is to store entries as3element list including the priority an entry count and the task
the entry count serves as a tiebreaker so that two tasks with thesame priority are returned in the order they were added
 and since notwo entry counts are the same the tuple comparison will never attemptto directly compare two tasks
another solution to the problem of noncomparable tasks is to create awrapper class that ignores the task item and only compares thepriority field   from dataclasses import dataclass field   from typing import any   dataclassordertrue   class prioritizeditem       priority int       item anyfieldcomparefalsethe remaining challenges revolve around finding a pending task andmaking changes to its priority or removing it entirely
  finding atask can be done with a dictionary pointing to an entry in the queue
removing the entry or changing its priority is more difficult becauseit would break the heap structure invariants
  so a possible solutionis to mark the entry as removed and add a new entry with the revisedpriority   pq                            list of entries arranged in a heap   entryfinder                  mapping of tasks to entries   removed  removedtask       placeholder for a removed task   counter  itertools
theory
heaps are arrays for which ak  a2k1 and ak  a2k2for all k counting elements from 0
  for the sake of comparisonnonexisting elements are considered to be infinite
  the interestingproperty of a heap is that a0 is always its smallest element
the strange invariant above is meant to be an efficient memoryrepresentation for a tournament
  the numbers below are k notak                                  0                 1                                 2         3               4                5               6     7       8       9       10      11      12      13      14   15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30in the tree above each cell k is topping 2k1 and 2k2
 in ausual binary tournament we see in sports each cell is the winner overthe two cells it tops and we can trace the winner down the tree tosee all opponents she had
  however in many computer applications ofsuch tournaments we do not need to trace the history of a winner
 tobe more memory efficient when a winner is promoted we try to replaceit by something else at a lower level and the rule becomes that acell and the two cells it tops contain three different items but thetop cell wins over the two topped cells
if this heap invariant is protected at all time index 0 is clearlythe overall winner
  the simplest algorithmic way to remove it andfind the next winner is to move some loser lets say cell 30 in thediagram above into the 0 position and then percolate this new 0 downthe tree exchanging values until the invariant is reestablished
this is clearly logarithmic on the total number of items in the tree
by iterating over all items you get an on log n sort
a nice feature of this sort is that you can efficiently insert newitems while the sort is going on provided that the inserted items arenot better than the last 0th element you extracted
  this isespecially useful in simulation contexts where the tree holds allincoming events and the win condition means the smallest scheduledtime
  when an event schedules other events for execution they arescheduled into the future so they can easily go into the heap
  so aheap is a good structure for implementing schedulers this is what iused for my midi sequencer 
various structures for implementing schedulers have been extensivelystudied and heaps are good for this as they are reasonably speedythe speed is almost constant and the worst case is not much differentthan the average case
 however there are other representations whichare more efficient overall yet the worst cases might be terrible
heaps are also very useful in big disk sorts
  you most probably allknow that a big sort implies producing runs which are presortedsequences whose size is usually related to the amount of cpu memoryfollowed by a merging passes for these runs which merging is oftenvery cleverly organised 1
 it is very important that the initialsort produces the longest runs possible
  tournaments are a good wayto achieve that
  if using all the memory available to hold atournament you replace and percolate items that happen to fit thecurrent run youll produce runs which are twice the size of thememory for random input and much better for input fuzzily ordered
moreover if you output the 0th item on disk and get an input whichmay not fit in the current tournament because the value wins overthe last output value it cannot fit in the heap so the size of theheap decreases
  the freed memory could be cleverly reused immediatelyfor progressively building a second heap which grows at exactly thesame rate the first heap is melting
  when the first heap completelyvanishes you switch heaps and start a new run
  clever and quiteeffectivein a word heaps are useful memory structures to know
  i use them ina few applications and i think it is good to keep a heap modulearound
  footnotes 1 the disk balancing algorithms which are current nowadays are    more annoying than clever and this is a consequence of the    seeking capabilities of the disks
 on devices which cannot seek    like big tape drives the story was quite different and one had    to be very clever to ensure far in advance that each tape    movement will be the most effective possible that is will best    participate at progressing the merge
  some tapes were even    able to read backwards and this was also used to avoid the    rewinding time
 believe me real good tape sorts were quite    spectacular to watch from all times sorting has always been a    great art 
spwd  the shadow password database
h index    attribute        meaning                            0        spnamp        login name                         1        sppwdp        encrypted password                 2        splstchg      date of last change                3        spmin         minimal number of days between                               changes                            4        spmax         maximum number of days between                               changes                            5        spwarn        number of days before password                               expires to warn user about it      6        spinact       number of days after password                                expires until account is disabled  7        spexpire      number of days since 19700101                              when account expires               8        spflag        reserved                          the spnamp and sppwdp items are strings all others are integers
the following functions are definedspwd
   changed in version 3
6 raises a permissionerror instead of   keyerror if the user doesnt have privileges
see also  module grp     an interface to the group database similar to this
  module pwd     an interface to the normal password database similar to this
developing with asyncio
asynchronous programming is different from classic sequentialprogramming
this page lists common mistakes and traps and explains how to avoidthem
debug mode
by default asyncio runs in production mode
  in order to ease thedevelopment asyncio has a debug mode
there are several ways to enable asyncio debug mode setting the pythonasynciodebug environment variable to 1
 using the python development mode
 passing debugtrue to asyncio
run
 calling loop
setdebug
in addition to enabling the debug mode consider also setting the log level of the asyncio logger to logging
debug for  example the following snippet of code can be run at startup of the  application     logging
debug configuring the warnings module to display resourcewarning  warnings
  one way of doing that is by using the w default  command line option
when the debug mode is enabled asyncio checks for coroutines that were not awaited and logs them  this mitigates the forgotten await pitfall
 many nonthreadsafe asyncio apis such as loop
callsoon and  loop
callat methods raise an exception if they are called from  a wrong thread
 the execution time of the io selector is logged if it takes too  long to perform an io operation
 callbacks taking longer than 100ms are logged
  the  loop
slowcallbackduration attribute can be used to set the  minimum execution duration in seconds that is considered slow
concurrency and multithreading
running blocking code
blocking cpubound code should not be called directly
  for exampleif a function performs a cpuintensive calculation for 1 second allconcurrent asyncio tasks and io operations would be delayed by 1second
an executor can be used to run a task in a different thread or even ina different process to avoid blocking the os thread with the eventloop
  see the loop
runinexecutor method for more details
logging
detect neverawaited coroutines
detect neverretrieved exceptions
if a future
setexception is called but the future object is neverawaited on the exception would never be propagated to the user code
in this case asyncio would emit a log message when the future objectis garbage collected
example of an unhandled exception   import asyncio   async def bug       raise exceptionnot consumed   async def main       asyncio
runmainoutput   task exception was never retrieved   future task finished corobug done defined at test
py line 4 in bug       raise exceptionnot consumed   exception not consumedenable the debug mode to get the traceback where the task was created   asyncio
runmain debugtrueoutput in debug mode   task exception was never retrieved   future task finished corobug done defined at test
linecache  random access to text lines
to3  automated python 2 to 3 code translation
2to3 is a python program that reads python 2
x source code and appliesa series of fixers to transform it into valid python 3
x code
  thestandard library contains a rich set of fixers that will handle almostall code
  2to3 supporting library lib2to3 is however a flexibleand generic library so it is possible to write your own fixers for2to3
using 2to
fixers
lib2to3  2to3s library
source code liblib2to3deprecated since version 3
10 python 3
9 will switch to a peg parsersee pep 617 and python 3
10 may include new language syntaxthat is not parsable by lib2to3s ll1 parser
 the lib2to3 modulemay be removed from the standard library in a future python version
consider thirdparty alternatives such as libcst or parso
note  the lib2to3 api should be considered unstable and may change  drastically in the future
emailheader internationalized headers
the remaining text in this section is the original documentation ofthe module
      changed in version 3
2 added the linesep argument
      changed in version 3
2 added handling for the unknown8bit      charset
httpclient  http protocol client
httpconnection objects
httpresponse objects
changed in version 3
5 the io
bufferediobase interface is nowimplemented and all of its reader operations are supported
   new in version 3
3
status   status code returned by server
geturl   deprecated since version 3
9 deprecated in favor of url
info   deprecated since version 3
9 deprecated in favor of headers
getstatus   deprecated since version 3
9 deprecated in favor of status
examples
httpmessage objects
hashlib  secure hashes and message digests
hash algorithms
shake variable length digests
the shake128 and shake256 algorithms provide variable lengthdigests with lengthinbits2 up to 128 or 256 bits of security
 assuch their digest methods require a length
 maximum length is notlimited by the shake algorithm
digestlength   return the digest of the data passed to the update method so   far
 this is a bytes object of size length which may contain   bytes in the whole range from 0 to 255
hexdigestlength   like digest except the digest is returned as a string object of   double length containing only hexadecimal digits
  this may be   used to exchange the value safely in email or other nonbinary   environments
key derivation
blake
creating hash objects
constants
saltsizesalt length maximum length accepted by constructors
personsizepersonalization string length maximum length accepted byconstructors
maxkeysizemaximum key size
maxdigestsizemaximum digest size that the hash function can output
examples
credits
exceptions
select  waiting for io completion
devpoll polling objects
edge and level trigger polling epoll objects
polling objects
the poll system call supported on most unix systems providesbetter scalability for network servers that service many many clientsat the same time
 poll scales better because the system call onlyrequires listing the file descriptors of interest while selectbuilds a bitmap turns on bits for the fds of interest and thenafterward the whole bitmap has to be linearly scanned again
select is ohighest file descriptor while poll is onumberof file descriptors
registerfd eventmask   register a file descriptor with the polling object
  future calls   to the poll method will then check whether the file descriptor   has any pending io events
  fd can be either an integer or an   object with a fileno method that returns an integer
  file   objects implement fileno so they can also be used as the   argument
   eventmask is an optional bitmask describing the type of events   you want to check for and can be a combination of the constants   pollin pollpri and pollout described in the table below
   if not specified the default value used will check for all 3 types   of events
       constant             meaning                                           pollin             there is data to read                             pollpri            there is urgent data to read                      pollout            ready for output writing will not block          pollerr            error condition of some sort                      pollhup            hung up                                           pollrdhup          stream socket peer closed connection or                            shut down writing half of connection              pollnval           invalid request descriptor not open             registering a file descriptor thats already registered is not an   error and has the same effect as registering the descriptor   exactly once
modifyfd eventmask   modifies an already registered fd
 this has the same effect as   registerfd eventmask
  attempting to modify a file descriptor   that was never registered causes an oserror exception with errno   enoent to be raised
poll
unregisterfd   remove a file descriptor being tracked by a polling object
  just   like the register method fd can be an integer or an object   with a fileno method that returns an integer
   attempting to remove a file descriptor that was never registered   causes a keyerror exception to be raised
poll
polltimeout   polls the set of registered file descriptors and returns a   possiblyempty list containing fd event 2tuples for the   descriptors that have events or errors to report
 fd is the file   descriptor and event is a bitmask with bits set for the reported   events for that descriptor  pollin for waiting input   pollout to indicate that the descriptor can be written to and so   forth
 an empty list indicates that the call timed out and no file   descriptors had any events to report
 if timeout is given it   specifies the length of time in milliseconds which the system will   wait for events before returning
 if timeout is omitted   negative or none the call will block until there is an event   for this poll object
   changed in version 3
5 the function is now retried with a   recomputed timeout when interrupted by a signal except if the   signal handler raises an exception see pep 475 for the   rationale instead of raising interruptederror
kqueue objects
kevent objects
ident   value used to identify the event
 the interpretation depends on the   filter but its usually the file descriptor
 in the constructor   ident can either be an int or an object with a fileno method
   kevent stores the integer internally
filter   name of the kernel filter
       constant                     meaning                                              kqfilterread             takes a descriptor and returns whenever there                                  is data available to read                            kqfilterwrite            takes a descriptor and returns whenever there                                  is data available to write                           kqfilteraio              aio requests                                         kqfiltervnode            returns when one or more of the requested                                      events watched in fflag occurs                     kqfilterproc             watch for events on a process id                     kqfilternetdev           watch for events on a network device not                                      available on mac os x                               kqfiltersignal           returns whenever the watched signal is                                         delivered to the process                             kqfiltertimer            establishes an arbitrary timer                   kevent
flags   filter action
       constant                     meaning                                              kqevadd                  adds or modifies an event                            kqevdelete               removes an event from the queue                      kqevenable               permitscontrol to returns the event                kqevdisable              disablesevent                                        kqevoneshot              removes event after first occurrence                 kqevclear                reset the state after an event is retrieved          kqevsysflags             internal event                                       kqevflag1                internal event                                       kqeveof                  filter specific eof condition                        kqeverror                see return values                                kevent
fflags   filter specific flags
   kqfilterread and  kqfilterwrite filter flags       constant                      meaning                                             kqnotelowat               low water mark of a socket buffer                  kqfiltervnode filter flags       constant                      meaning                                             kqnotedelete              unlink was called                               kqnotewrite               a write occurred                                    kqnoteextend              the file was extended                               kqnoteattrib              an attribute was changed                            kqnotelink                the link count has changed                          kqnoterename              the file was renamed                                kqnoterevoke              access to the file was revoked                     kqfilterproc filter flags       constant                      meaning                                             kqnoteexit                the process has exited                              kqnotefork                the process has called fork                     kqnoteexec                the process has executed a new process              kqnotepctrlmask           internal filter flag                                kqnotepdatamask           internal filter flag                                kqnotetrack               follow a process across fork                    kqnotechild               returned on the child process for                                              notetrack                                        kqnotetrackerr            unable to attach to a child                        kqfilternetdev filter flags not available on mac os x       constant                      meaning                                             kqnotelinkup              link is up                                          kqnotelinkdown            link is down                                        kqnotelinkinv             link state is invalid                           kevent
data   filter specific data
udata   user defined value
bz2  support for bzip2 compression
source code libbz2
pythis module provides a comprehensive interface for compressing anddecompressing data using the bzip2 compression algorithm
the bz2 module contains the open function and bz2file class for reading and writing  compressed files
 the bz2compressor and bz2decompressor classes for incremental  decompression
 the compress and decompress functions for oneshot  decompression
all of the classes in this module may safely be accessed from multiplethreads
decompression of files
incremental decompression
oneshot decompression
compressdata compresslevel9   compress data a byteslike object
   compresslevel if given must be an integer between 1 and 9
   the default is 9
   for incremental compression use a bz2compressor instead
decompressdata   decompress data a byteslike object
   if data is the concatenation of multiple compressed streams   decompress all of the streams
   for incremental decompression use a bz2decompressor instead
   changed in version 3
3 support for multistream inputs was added
examples of usage
below are some examples of typical usage of the bz2 module
using compress and decompress to demonstrate roundtripcompression import bz2 data  b
decompressc data  d   check equality to original object after roundtriptrueusing bz2compressor for incremental compression import bz2 def gendatachunks10 chunksize1000
flushthe example above uses a very nonrandom stream of data a stream ofbz chunks
  random data tends to compress poorly while orderedrepetitive data usually yields a high compression ratio
writing and reading a bzip2compressed file in binary mode import bz2 data  b
python language services
python provides a number of modules to assist in working with thepython language
  these modules support tokenizing parsing syntaxanalysis bytecode disassembly and various other facilities
these modules include parser  access python parse trees   creating st objects   converting st objects   queries on st objects   exceptions and error handling   st objects   example emulation of compile ast  abstract syntax trees   abstract grammar   node classes     literals     variables     expressions       subscripting       comprehensions     statements       imports     control flow     function and class definitions     async and await   ast helpers   compiler flags   commandline usage symtable  access to the compilers symbol tables   generating symbol tables   examining symbol tables symbol  constants used with python parse trees token  constants used with python parse trees keyword  testing for python keywords tokenize  tokenizer for python source   tokenizing input   commandline usage   examples tabnanny  detection of ambiguous indentation pyclbr  python module browser support   function objects   class objects pycompile  compile python source files compileall  bytecompile python libraries   commandline use   public functions dis  disassembler for python bytecode   bytecode analysis   analysis functions   python bytecode instructions   opcode collections pickletools  tools for pickle developers   command line usage     command line options   programmatic interface
weakref  weak references
weak reference objects
weak reference objects have no methods and no attributes besidesref
callback
 a weak reference object allows the referent to beobtained if it still exists by calling it import weakref class object
refo o2  r o is o2trueif the referent no longer exists calling the reference object returnsnone del o o2 printrnonetesting that a weak reference object is still live should be doneusing the expression ref is not none
  normally application codethat needs to use a reference object should follow this pattern    r is a weak reference object   o  r   if o is none        referent has been garbage collected       printobject has been deallocated cant frobnicate
dosomethingusefulusing a separate test for liveness creates race conditions inthreaded applications another thread can cause a weak reference tobecome invalidated before the weak reference is called the idiomshown above is safe in threaded applications as well as singlethreaded applications
specialized versions of ref objects can be created throughsubclassing
 this is used in the implementation of theweakvaluedictionary to reduce the memory overhead for each entry inthe mapping
  this may be most useful to associate additionalinformation with a reference but could also be used to insertadditional processing on calls to retrieve the referent
this example shows how a subclass of ref can be used to storeadditional information about an object and affect the value thatsreturned when the referent is accessed   import weakref   class extendedrefweakref
example
this simple example shows how an application can use object ids toretrieve objects that it has seen before
  the ids of the objects canthen be used in other data structures without forcing the objects toremain alive but the objects can still be retrieved by id if they do
finalizer objects
the main benefit of using finalize is that it makes it simple toregister a callback without needing to preserve the returned finalizerobject
  for instance import weakref class object
 del kennyyou killed kennythe finalizer can be called directly as well
  however the finalizerwill invoke the callback at most once
alive f                      callback not called because finalizer dead del obj                  callback not called because finalizer deadyou can unregister a finalizer using its detach method
  thiskills the finalizer and returns the arguments passed to theconstructor when it was created
alive assert newobj is obj assert funcargs kwargs  6callbackunless you set the atexit attribute to false a finalizer will becalled when the program exits if it is still alive
  for instance    obj  object    weakref
comparing finalizers with del methods
suppose we want to create a class whose instances represent temporarydirectories
  the directories should be deleted with their contentswhen the first of the following events occurs the object is garbage collected the objects remove method is called or the program exits
we might try to implement the class using a del method asfollows   class tempdir       def initself           self
removestarting with python 3
4 del methods no longer preventreference cycles from being garbage collected and module globals areno longer forced to none during interpreter shutdown
 so this codeshould work without any issues on cpython
however handling of del methods is notoriously implementationspecific since it depends on internal details of the interpretersgarbage collector implementation
a more robust alternative can be to define a finalizer which onlyreferences the specific functions and objects that it needs ratherthan having access to the full state of the object   class tempdir       def initself           self
alivedefined like this our finalizer only receives a reference to thedetails it needs to clean up the directory appropriately
 if theobject never gets garbage collected the finalizer will still be calledat exit
the other advantage of weakref based finalizers is that they can beused to register finalizers for classes where the definition iscontrolled by a third party such as running code when a module isunloaded   import weakref sys   def unloadingmodule        implicit reference to the module globals from the function body   weakref
modulesname unloadingmodulenote  if you create a finalizer object in a daemonic thread just as the  program exits then there is the possibility that the finalizer does  not get called at exit
  however in a daemonic thread  atexit
register try 
 and with 
 do not  guarantee that cleanup occurs either
file formats
the modules described in this chapter parse various miscellaneous fileformats that arent markup languages and are not related to email
 csv  csv file reading and writing   module contents   dialects and formatting parameters   reader objects   writer objects   examples configparser  configuration file parser   quick start   supported datatypes   fallback values   supported ini file structure   interpolation of values   mapping protocol access   customizing parser behaviour   legacy api examples   configparser objects   rawconfigparser objects   exceptions netrc  netrc file processing   netrc objects xdrlib  encode and decode xdr data   packer objects   unpacker objects   exceptions plistlib  generate and parse apple 
plist files   examples
formatter  generic output formatting
deprecated since version 3
4 due to lack of usage the formattermodule has been deprecated
the formatter interface
formatter implementations
the writer interface
writer implementations
policies
an event loop policy is a global perprocess object that controls themanagement of the event loop
 each event loop has a default policywhich can be changed and customized using the policy api
a policy defines the notion of context and manages a separate eventloop per context
 the default policy defines context to be thecurrent thread
by using a custom event loop policy the behavior ofgeteventloop seteventloop and neweventloopfunctions can be customized
policy objects should implement the apis defined in theabstracteventlooppolicy abstract base class
getting and setting the policy
the following functions can be used to get and set the policy for thecurrent processasyncio
geteventlooppolicy   return the current processwide policy
seteventlooppolicypolicy   set the current processwide policy to policy
   if policy is set to none the default policy is restored
policy objects
the abstract event loop policy base class is defined as followsclass asyncio
abstracteventlooppolicy   an abstract base class for asyncio policies
   geteventloop      get the event loop for the current context
      return an event loop object implementing the abstracteventloop      interface
      this method should never return none
      changed in version 3
6
   seteventlooploop      set the event loop for the current context to loop
   neweventloop      create and return a new event loop object
      this method should never return none
   getchildwatcher      get a child process watcher object
      return a watcher object implementing the abstractchildwatcher      interface
      this function is unix specific
   setchildwatcherwatcher      set the current child process watcher to watcher
      this function is unix specific
asyncio ships with the following builtin policiesclass asyncio
defaulteventlooppolicy   the default asyncio policy
  uses selectoreventloop on unix and   proactoreventloop on windows
   there is no need to install the default policy manually
 asyncio is   configured to use the default policy automatically
   changed in version 3
8 on windows proactoreventloop is now used   by default
windowsselectoreventlooppolicy   an alternative event loop policy that uses the selectoreventloop   event loop implementation
   availability windows
windowsproactoreventlooppolicy   an alternative event loop policy that uses the proactoreventloop   event loop implementation
   availability windows
process watchers
a process watcher allows customization of how an event loop monitorschild processes on unix
 specifically the event loop needs to knowwhen a child process has exited
in asyncio child processes are created withcreatesubprocessexec and loop
subprocessexec functions
asyncio defines the abstractchildwatcher abstract base class whichchild watchers should implement and has four differentimplementations threadedchildwatcher configured to be used bydefault multiloopchildwatcher safechildwatcher andfastchildwatcher
see also the subprocess and threads section
the following two functions can be used to customize the child processwatcher implementation used by the asyncio event loopasyncio
getchildwatcher   return the current child watcher for the current policy
setchildwatcherwatcher   set the current child watcher to watcher for the current policy
   watcher must implement methods defined in the   abstractchildwatcher base class
note  thirdparty event loops implementations might not support custom  child watchers
  for such event loops using setchildwatcher  might be prohibited or have no effect
abstractchildwatcher   addchildhandlerpid callback args      register a new child handler
      arrange for callbackpid returncode args to be called when      a process with pid equal to pid terminates
  specifying      another callback for the same process replaces the previous      handler
      the callback callable must be threadsafe
   removechildhandlerpid      removes the handler for process with pid equal to pid
      the function returns true if the handler was successfully      removed false if there was nothing to remove
   attachlooploop      attach the watcher to an event loop
      if the watcher was previously attached to an event loop then it      is first detached before attaching to the new loop
      note loop may be none
   isactive      return true if the watcher is ready to use
      spawning a subprocess with inactive current child watcher      raises runtimeerror
      new in version 3
8
   close      close the watcher
      this method has to be called to ensure that underlying resources      are cleanedup
threadedchildwatcher   this implementation starts a new waiting thread for every   subprocess spawn
   it works reliably even when the asyncio event loop is run in a non   main os thread
   there is no noticeable overhead when handling a big number of   children o1 each time a child terminates but stating a   thread per process requires extra memory
   this watcher is used by default
   new in version 3
8
multiloopchildwatcher   this implementation registers a sigchld signal handler on   instantiation
 that can break thirdparty code that installs a   custom handler for sigchld signal
   the watcher avoids disrupting other code spawning processes by   polling every process explicitly on a sigchld signal
   there is no limitation for running subprocesses from different   threads once the watcher is installed
   the solution is safe but it has a significant overhead when   handling a big number of processes on each time a sigchld is   received
   new in version 3
8
safechildwatcher   this implementation uses active event loop from the main thread to   handle sigchld signal
 if the main thread has no running event   loop another thread cannot spawn a subprocess runtimeerror is   raised
   the watcher avoids disrupting other code spawning processes by   polling every process explicitly on a sigchld signal
   this solution is as safe as multiloopchildwatcher and has the   same on complexity but requires a running event loop in the   main thread to work
fastchildwatcher   this implementation reaps every terminated processes by calling   os
waitpid1 directly possibly breaking other code spawning   processes and waiting for their termination
   there is no noticeable overhead when handling a big number of   children o1 each time a child terminates
   this solution requires a running event loop in the main thread to   work as safechildwatcher
pidfdchildwatcher   this implementation polls process file descriptors pidfds to   await child process termination
 in some respects   pidfdchildwatcher is a goldilocks child watcher implementation
   it doesnt require signals or threads doesnt interfere with any   processes launched outside the event loop and scales linearly with   the number of subprocesses launched by the event loop
 the main   disadvantage is that pidfds are specific to linux and only work on   recent 5
3 kernels
   new in version 3
9
custom policies
emailcontentmanager managing mime content
pynew in version 3
6 1class email
content manager instances
      note        a cte of binary does not actually work correctly yet
 footnotes 1 originally added in 3
runpy  locating and executing python modules
   see also     the m option offering equivalent functionality from the     command line
   changed in version 3
1 added ability to execute packages by   looking for a main submodule
   changed in version 3
2 added cached global variable see   pep 3147
   changed in version 3
4 updated to take advantage of the module   spec feature added by pep 451
 this allows cached to be   set correctly for modules run this way as well as ensuring the   real module name is always accessible as spec
   see also     interface options for equivalent functionality on the command     line python pathtoscript
   new in version 3
2
   changed in version 3
4 updated to take advantage of the module   spec feature added by pep 451
 this allows cached to be   set correctly in the case where main is imported from a valid   sys
path entry rather than being executed directly
see also  pep 338  executing modules as scripts     pep written and implemented by nick coghlan
  pep 366  main module explicit relative imports     pep written and implemented by nick coghlan
  pep 451  a modulespec type for the import system     pep written and implemented by eric snow  command line and environment  cpython command line details  the importlib
stat  interpreting stat results
operator  standard operators as functions
mapping operators to functions
this table shows how abstract operations correspond to operatorsymbols in the python syntax and the functions in the operatormodule
 operation                syntax                     function                                 addition                 a  b                    adda b                              concatenation            seq1  seq2              concatseq1 seq2                     containment test         obj in seq               containsseq obj                     division                 a  b                    truediva b                          division                 a  b                   floordiva b                         bitwise and              a  b                    anda b                             bitwise exclusive or     a  b                    xora b                              bitwise inversion         a                      inverta                              bitwise or               a  b                    ora b                              exponentiation           a  b                   powa b                              identity                 a is b                   isa b                              identity                 a is not b               isnota b                           indexed assignment       objk  v               setitemobj k v                     indexed deletion         del objk               delitemobj k                        indexing                 objk                   getitemobj k                        left shift               a  b                   lshifta b                           modulo                   a  b                    moda b                              multiplication           a  b                    mula b                              matrix multiplication    a  b                    matmula b                           negation arithmetic     a                      nega                                 negation logical       not a                    nota                                positive                  a                      posa                                 right shift              a  b                   rshifta b                           slice assignment         seqij  values        setitemseq slicei j values      slice deletion           del seqij             delitemseq slicei j              slicing                  seqij                 getitemseq slicei j              string formatting        s  obj                  mods obj                            subtraction              a  b                    suba b                              truth test               obj                      truthobj                             ordering                 a  b                    lta b                               ordering                 a  b                   lea b                               equality                 a  b                   eqa b                               difference               a  b                   nea b                               ordering                 a  b                   gea b                               ordering                 a  b                    gta b                              
inplace operators
many operations have an inplace version
  listed below arefunctions providing a more primitive access to inplace operators thanthe usual syntax does for example the statement x  y isequivalent to x  operator
iaddx y
  another way to put it is tosay that z  operator
iaddx y is equivalent to the compoundstatement z  x z  y
in those examples note that when an inplace method is called thecomputation and assignment are performed in two separate steps
  theinplace functions listed below only do the first step calling theinplace method
  the second step assignment is not handled
for immutable targets such as strings numbers and tuples theupdated value is computed but not assigned back to the inputvariable a  hello iadda  worldhello world ahellofor mutable targets such as lists and dictionaries the inplacemethod will perform the update so no subsequent assignment isnecessary s  h e l l o iadds   w o r l dh e l l o   w o r l d sh e l l o   w o r l doperator
iadda b   a  iadda b is equivalent to a  b
ianda b   a  ianda b is equivalent to a  b
iconcata b   a  iconcata b is equivalent to a  b for a and b   sequences
ifloordiva b   a  ifloordiva b is equivalent to a  b
ilshifta b   a  ilshifta b is equivalent to a  b
imoda b   a  imoda b is equivalent to a  b
imula b   a  imula b is equivalent to a  b
imatmula b   a  imatmula b is equivalent to a  b
   new in version 3
5
iora b   a  iora b is equivalent to a  b
ipowa b   a  ipowa b is equivalent to a  b
irshifta b   a  irshifta b is equivalent to a  b
isuba b   a  isuba b is equivalent to a  b
itruediva b   a  itruediva b is equivalent to a  b
ixora b   a  ixora b is equivalent to a  b
smtpd  smtp server
source code libsmtpd
see also  the aiosmtpd package is a recommended replacement for this module
smtpserver objects
   new in version 3
4 the map constructor argument
   changed in version 3
5 localaddr and remoteaddr may now   contain ipv6 addresses
   new in version 3
5 the decodedata and enablesmtputf8   constructor parameters and the kwargs parameter to   processmessage when decodedata is false
   changed in version 3
6 decodedata is now false by default
debuggingserver objects
pureproxy objects
mailmanproxy objects
smtpchannel objects
   changed in version 3
5 the decodedata and enablesmtputf8   parameters were added
   changed in version 3
6 decodedata is now false by default
   built into the base smtpchannel class are methods for handling   the following commands and responding to them appropriately       command   action taken                                                               helo      accepts the greeting from the client and stores it in                             seengreeting
  sets server to base command mode
                        ehlo      accepts the greeting from the client and stores it in                             seengreeting
  sets server to extended command mode
                    noop      takes no action
                                                           quit      closes the connection cleanly
                                             mail      accepts the mail from syntax and stores the supplied address as                mailfrom
                                                        rset      resets the mailfrom rcpttos and receiveddata but not the                greeting
                                                                  data      sets the internal state to data and stores remaining lines from                 the client in receiveddata until the terminator rn
                                                                  help      returns minimal information on command syntax                              vrfy      returns code 252 the server doesnt know if the address is valid         expn      reports that the command is not implemented
                           
text processing services
the modules described in this chapter provide a wide range of stringmanipulation operations and other text processing services
the codecs module described under binary data services is alsohighly relevant to text processing
 in addition see the documentationfor pythons builtin string type in text sequence type  str
 string  common string operations   string constants   custom string formatting   format string syntax     format specification minilanguage     format examples   template strings   helper functions re  regular expression operations   regular expression syntax   module contents   regular expression objects   match objects   regular expression examples     checking for a pair     simulating scanf     search vs
 match     making a phonebook     text munging     finding all adverbs     finding all adverbs and their positions     raw string notation     writing a tokenizer difflib  helpers for computing deltas   sequencematcher objects   sequencematcher examples   differ objects   differ example   a commandline interface to difflib textwrap  text wrapping and filling unicodedata  unicode database stringprep  internet string preparation readline  gnu readline interface   init file   line buffer   history file   history list   startup hooks   completion   example rlcompleter  completion function for gnu readline   completer objects
email examples
here are a few examples of how to use the email package to readwrite and send simple email messages as well as more complex mimemessages
first lets see how to create and send a simple text message boththe text content and the addresses may contain unicode characters    import smtplib for the actual sending function   import smtplib    import the email modules well need   from email
quitparsing rfc 822 headers can easily be done by the using theclasses from the parser module    import the email modules well need   from email
displaynameheres an example of how to send a mime message containing a bunch offamily pictures that may be residing in a directory    import smtplib for the actual sending function   import smtplib    and imghdr to find the types of our images   import imghdr    here are the email package modules well need   from email
sendmessagemsgheres an example of how to send the entire contents of a directory asan email message 1   usrbinenv python3   send the contents of a directory as a mime message
sendmessagemsg   if name  main       mainheres an example of how to unpack a mime message like the one aboveinto a directory of files   usrbinenv python3   unpack a mime message into a directory of files
getpayloaddecodetrue   if name  main       mainheres an example of how to create an html message with an alternativeplain text version
  to make things a bit more interesting we includea related image in the html part and we save a copy of what we aregoing to send to disk as well as sending it
sendmessagemsgif we were sent the message from the last example here is one way wecould process it   import os   import sys   import tempfile   import mimetypes   import webbrowser    import the email modules well need   from email import policy   from email
up to the prompt the output from the above is   to penelope pussycat penelopeexample
 footnotes 1 thanks to matthew dixon cowles for the original inspiration and    examples
statistics  mathematical statistics functions
new in version 3
4
source code libstatistics
pythis module provides functions for calculating mathematical statisticsof numeric realvalued data
the module is not intended to be a competitor to thirdparty librariessuch as numpy scipy or proprietary fullfeatured statistics packagesaimed at professional statisticians such as minitab sas and matlab
it is aimed at the level of graphing and scientific calculators
unless explicitly noted these functions support int floatdecimal and fraction
 behaviour with other types whether in thenumeric tower or not is currently unsupported
  collections with amix of types are also undefined and implementationdependent
  if yourinput data consists of mixed types you may be able to use map toensure a consistent result for example mapfloat inputdata
averages and measures of central location
measures of spread
function details
exceptions
a single exception is definedexception statistics
statisticserror   subclass of valueerror for statisticsrelated exceptions
normaldist objects
normaldist is a tool for creating and manipulating normaldistributions of a random variable
  it is a class that treats themean and standard deviation of data measurements as a single entity
normal distributions arise from the central limit theorem and have awide range of applications in statistics
0   returns a new normaldist object where mu represents the   arithmetic mean and sigma represents the standard deviation
   if sigma is negative raises statisticserror
   mean      a readonly property for the arithmetic mean of a normal      distribution
   median      a readonly property for the median of a normal distribution
   mode      a readonly property for the mode of a normal distribution
   stdev      a readonly property for the standard deviation of a normal      distribution
   variance      a readonly property for the variance of a normal distribution
      equal to the square of the standard deviation
   classmethod fromsamplesdata      makes a normal distribution instance with mu and sigma      parameters estimated from the data using fmean and      stdev
      the data can be any iterable and should consist of values      that can be converted to type float
  if data does not      contain at least two elements raises statisticserror because      it takes at least one point to estimate a central value and at      least two points to estimate dispersion
   samplesn  seednone      generates n random samples for a given mean and standard      deviation
 returns a list of float values
      if seed is given creates a new instance of the underlying      random number generator
  this is useful for creating      reproducible results even in a multithreading context
   pdfx      using a probability density function pdf compute the relative      likelihood that a random variable x will be near the given      value x
  mathematically it is the limit of the ratio px       x  xdx  dx as dx approaches zero
      the relative likelihood is computed as the probability of a      sample occurring in a narrow range divided by the width of the      range hence the word density
  since the likelihood is      relative to other points its value can be greater than 1
   cdfx      using a cumulative distribution function cdf compute the      probability that a random variable x will be less than or      equal to x
  mathematically it is written px  x
   invcdfp      compute the inverse cumulative distribution function also known      as the quantile function or the percentpoint function
      mathematically it is written x  px  x  p
      finds the value x of the random variable x such that the      probability of the variable being less than or equal to that      value equals the given probability p
   overlapother      measures the agreement between two normal probability      distributions
 returns a value between 0
0 and 1
0 giving the      overlapping area for the two probability density functions
   quantilesn4      divide the normal distribution into n continuous intervals      with equal probability
  returns a list of n  1 cut points      separating the intervals
      set n to 4 for quartiles the default
  set n to 10 for      deciles
 set n to 100 for percentiles which gives the 99 cuts      points that separate the normal distribution into 100 equal      sized groups
   zscorex      compute the standard score describing x in terms of the number      of standard deviations above or below the mean of the normal      distribution x  mean  stdev
      new in version 3
9
   instances of normaldist support addition subtraction   multiplication and division by a constant
  these operations are   used for translation and scaling
  for example       temperaturefebruary  normaldist5 2
5   dividing a constant by an instance of normaldist is not supported   because the result wouldnt be normally distributed
   since normal distributions arise from additive effects of   independent variables it is possible to add and subtract two   independent normally distributed random variables represented as   instances of normaldist
  for example       birthweights  normaldist
5   new in version 3
8
normaldist examples and recipes
normaldist readily solves classic probability problems
for example given historical data for sat exams showing that scoresare normally distributed with a mean of 1060 and a standard deviationof 195 determine the percentage of students with test scores between1100 and 1200 after rounding to the nearest whole number    sat  normaldist1060 195    fraction  sat
4find the quartiles and deciles for the sat scores    listmapround sat
quantilesn10   810 896 958 1011 1060 1109 1162 1224 1310to estimate the distribution for a model than isnt easy to solveanalytically normaldist can generate input samples for a montecarlo simulation    def modelx y z   
175091447274739normal distributions can be used to approximate binomial distributionswhen the sample size is large and when the probability of a successfultrial is near 50
for example an open source conference has 750 attendees and two roomswith a 500 person capacity
  there is a talk about python and anotherabout ruby
 in previous conferences 65 of the attendees preferred tolisten to python talks
  assuming the population preferences haventchanged what is the probability that the python room will stay withinits capacity limits    n  750              sample size    p  0
8398normal distributions commonly arise in machine learning problems
wikipedia has a nice example of a naive bayesian classifier
 thechallenge is to predict a persons gender from measurements ofnormally distributed features including height weight and foot size
were given a training dataset with measurements for eight people
the measurements are assumed to be normally distributed so wesummarize the data with normaldist    heightmale  normaldist
fromsamples6 8 7 9next we encounter a new person whose feature measurements are knownbut whose gender is unknown    ht  6
0         height    wt  130         weight    fs  8           foot sizestarting with a 50 prior probability of being male or female wecompute the posterior as the prior times the product of likelihoodsfor the feature measurements given the gender    priormale  0
pdffsthe final prediction goes to the largest posterior
 this is known asthe maximum a posteriori or map    male if posteriormale  posteriorfemale else female   female
parser  access python parse trees
warning  the parser module is deprecated and will be removed in future  versions of python
 for the majority of use cases you can leverage  the abstract syntax tree ast generation and compilation stage  using the ast module
  for full information on thelanguage syntax refer to the python language reference
  the parseritself is created from a grammar specification defined in the filegrammargrammar in the standard python distribution
see also  module symbol     useful constants representing internal nodes of the parse tree
  module token     useful constants representing leaf nodes of the parse tree and     functions for testing node values
creating st objects
converting st objects
queries on st objects
exceptions and error handling
st objects
st objects have the following methodsst
compilefilenamesyntaxtree   same as compilestst filename
isexpr   same as isexprst
issuite   same as issuitest
tolistlineinfofalse colinfofalse   same as st2listst lineinfo colinfo
totuplelineinfofalse colinfofalse   same as st2tuplest lineinfo colinfo
example emulation of compile
highlevel api index
this page lists all highlevel asyncawait enabled asyncio apis
tasks
queues
subprocesses
utilities to spawn subprocesses and run shell commands
 await createsubprocessexec                  create a subprocess
                                await createsubprocessshell                 run a shell command
                                examples  executing a shell command
 see also the subprocess apis documentation
streams
highlevel apis to work with network io
 await openconnection                         establish a tcp connection
                         await openunixconnection                    establish a unix socket connection
                 await startserver                            start a tcp server
                                 await startunixserver                       start a unix socket server
                         streamreader                                      highlevel asyncawait object to receive network                                                        data
                                               streamwriter                                      highlevel asyncawait object to send network                                                           data
                                               examples  example tcp client
 see also the streams apis documentation
synchronization
exceptions
timeouterror                              raised on timeout by functions like waitfor
                                                       keep in mind that asyncio
timeouterror is                                                             unrelated to the builtin timeouterror                                                            exception
                                          asyncio
cancellederror                            raised when a task is cancelled
 see also                                                               task
                                    examples  handling cancellederror to run code on cancellation request
 see also the full list of asynciospecific exceptions
unittestmock  getting started
new in version 3
3
using mock
mock patching methods
common uses for mock objects include patching methods recording method calls on objectsyou might want to replace a method on an object to check that it iscalled with the correct arguments by another part of the system real  someclass real
method  magicmocknamemethod real
method3 4 5 keyvaluemagicmock namemethod id
once our mock has been used real
method in this example it hasmethods and attributes that allow you to make assertions about how ithas been used
note  in most of these examples the mock and magicmock classes are  interchangeable
 as the magicmock is the more capable class it  makes a sensible one to use by default
once the mock has been called its called attribute is set to true
more importantly we can use the assertcalledwith orassertcalledoncewith method to check that it was called withthe correct arguments
this example tests that calling productionclass
method results ina call to the something method class productionclass
mock for method calls on an object
mocking classes
naming your mocks
tracking all calls
setting return values and attributes
raising exceptions with mocks
side effect functions and iterables
mocking asynchronous iterators
8 asyncmock and magicmock have support to mockasynchronous iterators through aiter
 the returnvalueattribute of aiter can be used to set the return values to beused for iteration
mocking asynchronous context manager
8 asyncmock and magicmock have support to mockasynchronous context managers through aenter and aexit
 bydefault aenter and aexit are asyncmock instances thatreturn an async function
creating a mock from an existing object
patch decorators
note  with patch it matters that you patch objects in the namespace  where they are looked up
 this is normally straightforward but for  a quick guide read where to patch
there is also patch
dict for setting values in a dictionary justduring a scope and restoring the dictionary to its original state whenthe test ends foo  key value original  foo
further examples
mocking chained calls
partial mocking
mocking a generator method
applying the same patch to every test method
mocking unbound methods
checking multiple calls with mock
coping with mutable arguments
note  if your mock is only going to be used once there is an easier way of  checking arguments at the point they are called
nesting patches
mocking a dictionary with magicmock
sideeffect  setitemnote  an alternative to using magicmock is to use mock and only  provide the magic methods you specifically want   mock  mock   mock
mock subclasses and their attributes
mocking imports with patchdict
tracking order of calls and less verbose call assertions
more complex argument matching
pwd  the password database
webbrowser  convenient webbrowser controller
source code libwebbrowser
pythe webbrowser module provides a highlevel interface to allowdisplaying webbased documents to users
 under most circumstancessimply calling the open function from this module will do theright thing
under unix graphical browsers are preferred under x11 but textmodebrowsers will be used if graphical browsers are not available or anx11 display isnt available
  if textmode browsers are used thecalling process will block until the user exits the browser
if the environment variable browser exists it is interpreted as theos
pathsepseparated list of browsers to try ahead of the platformdefaults
  when the value of a list part contains the string sthen it is interpreted as a literal browser command line to be usedwith the argument url substituted for s if the part does notcontain s it is simply interpreted as the name of the browser tolaunch
 1for nonunix platforms or when a remote browser is available on unixthe controlling process will not wait for the user to finish with thebrowser but allow the remote browser to maintain its own windows onthe display
  if remote browsers are not available on unix thecontrolling process will launch a new browser and wait
the script webbrowser can be used as a commandline interface forthe module
 it accepts a url as the argument
 it accepts the followingoptional parameters n opens the url in a new browser window ifpossible t opens the url in a new browser page tab
 theoptions are naturally mutually exclusive
  usage example   python m webbrowser t httpwww
orgthe following exception is definedexception webbrowser
error   exception raised when a browser control error occurs
the following functions are definedwebbrowser
openurl new0 autoraisetrue   display url using the default browser
 if new is 0 the url   is opened in the same browser window if possible
  if new is 1 a   new browser window is opened if possible
  if new is 2 a new   browser page tab is opened if possible
  if autoraise is   true the window is raised if possible note that under many   window managers this will occur regardless of the setting of this   variable
   note that on some platforms trying to open a filename using this   function may work and start the operating systems associated   program
  however this is neither supported nor portable
   raises an auditing event webbrowser
open with argument url
opennewurl   open url in a new window of the default browser if possible   otherwise open url in the only browser window
opennewtaburl   open url in a new page tab of the default browser if   possible otherwise equivalent to opennew
getusingnone   return a controller object for the browser type using
  if   using is none return a controller for a default browser   appropriate to the callers environment
registername constructor instancenone  preferredfalse   register the browser type name
  once a browser type is   registered the get function can return a controller for that   browser type
  if instance is not provided or is none   constructor will be called without parameters to create an   instance when needed
  if instance is provided constructor   will never be called and may be none
   setting preferred to true makes this browser a preferred result   for a get call with no argument
  otherwise this entry point   is only useful if you plan to either set the browser variable or   call get with a nonempty argument matching the name of a   handler you declare
   changed in version 3
7 preferred keywordonly parameter was   added
a number of browser types are predefined
  this table gives the typenames that may be passed to the get function and the correspondinginstantiations for the controller classes all defined in this module
 type name                 class name                                 notes    mozilla               mozillamozilla                                firefox               mozillamozilla                                netscape              mozillanetscape                               galeon                galeongaleon                                  epiphany              galeonepiphany                                skipstone             backgroundbrowserskipstone                    kfmclient             konqueror                              1      konqueror             konqueror                              1      kfm                   konqueror                              1      mosaic                backgroundbrowsermosaic                       opera                 opera                                           grail                 grail                                           links                 genericbrowserlinks                           elinks                elinkselinks                                  lynx                  genericbrowserlynx                            w3m                   genericbrowserw3m                             windowsdefault       windowsdefault                           2      macosx                macosxdefault                        3      safari                macosxsafari                         3      googlechrome         chromegooglechrome                           chrome                chromechrome                                  chromium              chromiumchromium                              chromiumbrowser      chromiumchromiumbrowser                     notes1
 konqueror is the file manager for the kde desktop environment for   unix and only makes sense to use if kde is running
  some way of   reliably detecting kde would be nice the kdedir variable is not   sufficient
  note also that the name kfm is used even when using   the konqueror command with kde 2  the implementation selects   the best strategy for running konqueror
 only on windows platforms
 only on mac os x platform
new in version 3
3 support for chromechromium has been added
here are some simple examples   url  httpdocs
browser controller objects
browser controllers provide these methods which parallel three of themodulelevel convenience functionscontroller
openurl new0 autoraisetrue   display url using the browser handled by this controller
 if   new is 1 a new browser window is opened if possible
 if new is   2 a new browser page tab is opened if possible
opennewurl   open url in a new window of the browser handled by this   controller if possible otherwise open url in the only browser   window
  alias opennew
opennewtaburl   open url in a new page tab of the browser handled by this   controller if possible otherwise equivalent to opennew
 footnotes 1 executables named here without a full path will be searched in the    directories given in the path environment variable
builtin types
the following sections describe the standard types that are built intothe interpreter
the principal builtin types are numerics sequences mappingsclasses instances and exceptions
some collection classes are mutable
  the methods that add subtractor rearrange their members in place and dont return a specific itemnever return the collection instance itself but none
some operations are supported by several object types in particularpractically all objects can be compared for equality tested for truthvalue and converted to a string with the repr function or theslightly different str function
  the latter function isimplicitly used when an object is written by the print function
truth value testing
any object can be tested for truth value for use in an if orwhile condition or as operand of the boolean operations below
by default an object is considered true unless its class defineseither a bool method that returns false or a lenmethod that returns zero when called with the object
 1  here aremost of the builtin objects considered false constants defined to be false none and false
 zero of any numeric type 0 0
0 0j decimal0  fraction0 1 empty sequences and collections     set  range0operations and builtin functions that have a boolean result alwaysreturn 0 or false for false and 1 or true for true unlessotherwise stated
 important exception the boolean operations orand and always return one of their operands

boolean operations  and or not
these are the boolean operations ordered by ascending priority operation      result                             notes    x or y       if x is false then y else    1                     x                                         x and y      if x is false then x else    2                     y                                         not x        if x is false then true      3                     else false                               notes1
 this is a shortcircuit operator so it only evaluates the second   argument if the first one is false
 this is a shortcircuit operator so it only evaluates the second   argument if the first one is true
 not has a lower priority than nonboolean operators so not a    b is interpreted as not a  b and a  not b is a syntax   error
comparisons
numeric types  int float complex
there are three distinct numeric types integers floating pointnumbers and complex numbers
  in addition booleans are a subtypeof integers
  integers have unlimited precision
  floating pointnumbers are usually implemented using double in c information aboutthe precision and internal representation of floating point numbersfor the machine on which your program is running is available insys
floatinfo
  complex numbers have a real and imaginary partwhich are each a floating point number
  to extract these parts from acomplex number z use z
real and z
 the standard libraryincludes the additional numeric types fractions
fraction forrationals and decimal
decimal for floatingpoint numbers withuserdefinable precision
numbers are created by numeric literals or as the result of builtinfunctions and operators
  unadorned integer literals including hexoctal and binary numbers yield integers
  numeric literals containinga decimal point or an exponent sign yield floating point numbers
appending j or j to a numeric literal yields an imaginarynumber a complex number with a zero real part which you can add toan integer or float to get a complex number with real and imaginaryparts
python fully supports mixed arithmetic when a binary arithmeticoperator has operands of different numeric types the operand with thenarrower type is widened to that of the other where integer isnarrower than floating point which is narrower than complex
 acomparison between numbers of different types behaves as though theexact values of those numbers were being compared
 2the constructors int float and complex can be used toproduce numbers of a specific type
all numeric types except complex support the following operationsfor priorities of the operations see operator precedence operation              result                             notes      full documentation    x  y                sum of x and y                                                  x  y                difference of x and y                                           x  y                product of x and y                                              x  y                quotient of x and y                                             x  y               floored quotient of x and y    1                              x  y                remainder of x  y               2                              x                   x negated                                                         x                   x unchanged                                                       absx               absolute value or magnitude of                abs                                      x                                                                 intx               x converted to integer           36     int               floatx             x converted to floating point    46     float             complexre im      a complex number with real part    6        complex                                  re imaginary part im
 im                                                            defaults to zero
                                                   c
conjugate        conjugate of the complex number                                                            c                                                                 divmodx y         the pair x  y x  y         2        divmod            powx y            x to the power y               5        pow               x  y               x to the power y               5                             notes1
 also referred to as integer division
  the resultant value is a   whole integer though the results type is not necessarily int
   the result is always rounded towards minus infinity 12 is 0   12 is 1 12 is 1 and 12 is 0
 not for complex numbers
  instead convert to floats using abs   if appropriate
 conversion from floating point to integer may round or truncate as   in c see functions math
floor and math
ceil for well   defined conversions
 float also accepts the strings nan and inf with an optional   prefix  or  for not a number nan and positive or negative   infinity
 python defines pow0 0 and 0  0 to be 1 as is common for   programming languages
 the numeric literals accepted include the digits 0 to 9 or any   unicode equivalent code points with the nd property
   see httpswww
0ucdextractedderivednum   erictype
txt for a complete list of code points with the nd   property
all numbers
real types int and float also include thefollowing operations operation             result                                         math
truncx       x truncated to integral                    roundx n       x rounded to n digits rounding half to                          even
 if n is omitted it defaults to 0
     math
floorx       the greatest integral  x                 math
ceilx        the least integral  x                   for additional numeric operations see the math and cmath modules
bitwise operations on integer types
bitwise operations only make sense for integers
 the result of bitwiseoperations is calculated as though carried out in twos complementwith an infinite number of sign bits
the priorities of the binary bitwise operations are all lower than thenumeric operations and higher than the comparisons the unaryoperation  has the same priority as the other unary numericoperations  and 
this table lists the bitwise operations sorted in ascending priority operation     result                            notes       x  y       bitwise or of x and y       4         x  y       bitwise exclusive or of x     4                       and y                                       x  y       bitwise and of x and y      4         x  n      x shifted left by n bits      12      x  n      x shifted right by n bits     13      x          the bits of x inverted                     notes1
 negative shift counts are illegal and cause a valueerror to be   raised
 a left shift by n bits is equivalent to multiplication by pow2   n
 a right shift by n bits is equivalent to floor division by   pow2 n
 performing these calculations with at least one extra sign   extension bit in a finite twos complement representation a   working bitwidth of 1  maxx
bitlength or   more is sufficient to get the same result as if there were an   infinite number of sign bits
additional methods on integer types
the int type implements the numbers
in addition it provides a few more methodsint
bitlength   return the number of bits necessary to represent an integer in   binary excluding the sign and leading zeros       n  37       binn      0b100101       n
bitlength      6   more precisely if x is nonzero then x
bitlength is the   unique positive integer k such that 2k1  absx  2k
   equivalently when absx is small enough to have a correctly   rounded logarithm then k  1  intlogabsx 2
 if x is   zero then x
bitlength returns 0
   equivalent to      def bitlengthself          s  binself        binary representation  bin37  0b100101          s  s
lstrip0b  remove leading zeros and minus sign          return lens        len100101  6   new in version 3
1
tobyteslength byteorder  signedfalse   return an array of bytes representing an integer
bitlength  7  8 byteorderlittle   bxe8x03   the integer is represented using length bytes
  an   overflowerror is raised if the integer is not representable with   the given number of bytes
   the byteorder argument determines the byte order used to   represent the integer
  if byteorder is big the most   significant byte is at the beginning of the byte array
  if   byteorder is little the most significant byte is at the end   of the byte array
  to request the native byte order of the host   system use sys
byteorder as the byte order value
   the signed argument determines whether twos complement is used   to represent the integer
  if signed is false and a negative   integer is given an overflowerror is raised
 the default value   for signed is false
   new in version 3
2
frombytesbytes byteorder  signedfalse   return the integer represented by the given array of bytes
frombytes255 0 0 byteorderbig   16711680   the argument bytes must either be a byteslike object or an   iterable producing bytes
   the byteorder argument determines the byte order used to   represent the integer
  if byteorder is big the most   significant byte is at the beginning of the byte array
  if   byteorder is little the most significant byte is at the end   of the byte array
  to request the native byte order of the host   system use sys
byteorder as the byte order value
   the signed argument indicates whether twos complement is used to   represent the integer
   new in version 3
2
asintegerratio   return a pair of integers whose ratio is exactly equal to the   original integer and with a positive denominator
 the integer ratio   of integers whole numbers is always the integer as the numerator   and 1 as the denominator
   new in version 3
8
additional methods on float
the float type implements the numbers
float also has the following additional methods
asintegerratio   return a pair of integers whose ratio is exactly equal to the   original float and with a positive denominator
  raises   overflowerror on infinities and a valueerror on nans
isinteger   return true if the float instance is finite with integral value   and false otherwise       2
isinteger      falsetwo methods support conversion to and from hexadecimal strings
  sincepythons floats are stored internally as binary numbers converting afloat to or from a decimal string usually involves a small roundingerror
  in contrast hexadecimal strings allow exact representationand specification of floatingpoint numbers
  this can be useful whendebugging and in numerical work
hex   return a representation of a floatingpoint number as a hexadecimal   string
  for finite floatingpoint numbers this representation   will always include a leading 0x and a trailing p and exponent
fromhexs   class method to return the float represented by a hexadecimal   string s
  the string s may have leading and trailing   whitespace
note that float
hex is an instance method while float
fromhexis a class method
a hexadecimal string takes the form   sign 0x integer 
 fraction p exponentwhere the optional sign may by either  or  integer andfraction are strings of hexadecimal digits and exponent is adecimal integer with an optional leading sign
  case is notsignificant and there must be at least one hexadecimal digit ineither the integer or the fraction
  this syntax is similar to thesyntax specified in section 6
2 of the c99 standard and also tothe syntax used in java 1
5 onwards
  in particular the output offloat
hex is usable as a hexadecimal floatingpoint literal in cor java code and hexadecimal strings produced by cs a formatcharacter or javas double
tohexstring are accepted byfloat
fromhex
note that the exponent is written in decimal rather than hexadecimaland that it gives the power of 2 by which to multiply the coefficient
for example the hexadecimal string 0x3
a7p10 represents thefloatingpoint number 3  10
16  7
010 or3740
0applying the reverse conversion to 3740
0 gives a differenthexadecimal string representing the same number    float
hashing of numeric types
for numbers x and y possibly of different types its arequirement that hashx  hashy whenever x  y see thehash method documentation for more details
  for ease ofimplementation and efficiency across a variety of numeric typesincluding int float decimal
decimal and fractions
fractionpythons hash for numeric types is based on a single mathematicalfunction thats defined for any rational number and hence applies toall instances of int and fractions
fraction and all finiteinstances of float and decimal
decimal
  essentially thisfunction is given by reduction modulo p for a fixed prime p
  thevalue of p is made available to python as the modulus attribute ofsys
hashinfo
cpython implementation detail currently the prime used is p 231  1 on machines with 32bit c longs and p  261  1 onmachines with 64bit c longs
here are the rules in detail if x  m  n is a nonnegative rational number and n is not  divisible by p define hashx as m  invmodn p  p where  invmodn p gives the inverse of n modulo p
 if x  m  n is a nonnegative rational number and n is divisible  by p but m is not then n has no inverse modulo p and the  rule above doesnt apply in this case define hashx to be the  constant value sys
 if x  m  n is a negative rational number define hashx as  hashx
  if the resulting hash is 1 replace it with 2
 the particular values sys
inf and  sys
nan are used as hash values for positive infinity  negative infinity or nans respectively
  all hashable nans have  the same hash value
 for a complex number z the hash values of the real and  imaginary parts are combined by computing hashz
imag reduced modulo  2sys
width so that it lies in  range2sys
width   1
  again if the result is 1 its replaced with 2
to clarify the above rules heres some example python codeequivalent to the builtin hash for computing the hash of a rationalnumber float or complex   import sys math   def hashfractionm n       compute the hash of a rational number m  n
iterator types
python supports a concept of iteration over containers
  this isimplemented using two distinct methods these are used to allow userdefined classes to support iteration
  sequences described below inmore detail always support the iteration methods
one method needs to be defined for container objects to provideiteration supportcontainer
iter   return an iterator object
  the object is required to support the   iterator protocol described below
  if a container supports   different types of iteration additional methods can be provided to   specifically request iterators for those iteration types
  an   example of an object supporting multiple forms of iteration would   be a tree structure which supports both breadthfirst and depth   first traversal
  this method corresponds to the tpiter slot of   the type structure for python objects in the pythonc api
the iterator objects themselves are required to support the followingtwo methods which together form the iterator protocoliterator
iter   return the iterator object itself
  this is required to allow both   containers and iterators to be used with the for and in   statements
 this method corresponds to the tpiter slot of the   type structure for python objects in the pythonc api
next   return the next item from the container
  if there are no further   items raise the stopiteration exception
  this method   corresponds to the tpiternext slot of the type structure for   python objects in the pythonc api
python defines several iterator objects to support iteration overgeneral and specific sequence types dictionaries and other morespecialized forms
  the specific types are not important beyond theirimplementation of the iterator protocol
once an iterators next method raises stopiteration it mustcontinue to do so on subsequent calls
 implementations that do notobey this property are deemed broken
generator types
pythons generators provide a convenient way to implement theiterator protocol
  if a container objects iter method isimplemented as a generator it will automatically return an iteratorobject technically a generator object supplying the iterand next methods
 more information about generators can befound in the documentation for the yield expression
sequence types  list tuple range
there are three basic sequence types lists tuples and rangeobjects
 additional sequence types tailored for processing of binarydata and text strings are described in dedicated sections
common sequence operations
the operations in the following table are supported by most sequencetypes both mutable and immutable
 the collections
sequence abcis provided to make it easier to correctly implement these operationson custom sequence types
this table lists the sequence operations sorted in ascending priority
in the table s and t are sequences of the same type n ij and k are integers and x is an arbitrary object that meets anytype and value restrictions imposed by s
the in and not in operations have the same priorities as thecomparison operations
 the  concatenation and  repetitionoperations have the same priority as the corresponding numericoperations
 3 operation                   result                            notes       x in s                    true if an item of s is       1                                     equal to x else false                    x not in s                false if an item of s is      1                                     equal to x else true                     s  t                     the concatenation of s and t  67      s  n or n  s          equivalent to adding s to       27                                  itself n times                              si                      ith item of s origin 0       3         sij                    slice of s from i to j      34      sijk                  slice of s from i to j      35                                  with step k                                 lens                    length of s                                 mins                    smallest item of s                          maxs                    largest item of s                           s
indexx i j      index of the first occurrence of  8                                     x in s at or after index                                             i and before index j                     s
countx                total number of occurrences of                                            x in s                                   sequences of the same type also support comparisons
  in particulartuples and lists are compared lexicographically by comparingcorresponding elements
 this means that to compare equal everyelement must compare equal and the two sequences must be of the sametype and have the same length
  for full details see comparisons inthe language reference
notes1
 while the in and not in operations are used only for simple   containment testing in the general case some specialised sequences   such as str bytes and bytearray also use them for   subsequence testing       gg in eggs      true2
 values of n less than 0 are treated as 0 which yields an   empty sequence of the same type as s
  note that items in the   sequence s are not copied they are referenced multiple times
   this often haunts new python programmers consider       lists    3       lists               lists0
append3       lists      3 3 3   what has happened is that  is a oneelement list containing   an empty list so all three elements of   3 are references   to this single empty list
  modifying any of the elements of   lists modifies this single list
 you can create a list of   different lists this way       lists   for i in range3       lists0
append7       lists      3 5 7   further explanation is available in the faq entry how do i create a   multidimensional list
 if i or j is negative the index is relative to the end of   sequence s lens  i or lens  j is substituted
  but   note that 0 is still 0
 the slice of s from i to j is defined as the sequence of   items with index k such that i  k  j
  if i or j is   greater than lens use lens
  if i is omitted or none   use 0
  if j is omitted or none use lens
  if i is   greater than or equal to j the slice is empty
 the slice of s from i to j with step k is defined as the   sequence of items with index  x  i  nk such that 0  n    jik
  in other words the indices are i ik i2k   i3k and so on stopping when j is reached but never   including j
  when k is positive i and j are reduced to   lens if they are greater
 when k is negative i and j are   reduced to lens  1 if they are greater
  if i or j are   omitted or none they become end values which end depends on   the sign of k
  note k cannot be zero
 if k is none it   is treated like 1
 concatenating immutable sequences always results in a new object
   this means that building up a sequence by repeated concatenation   will have a quadratic runtime cost in the total sequence length
   to get a linear runtime cost you must switch to one of the   alternatives below    if concatenating str objects you can build a list and use     str
join at the end or else write to an io
stringio     instance and retrieve its value when complete    if concatenating bytes objects you can similarly use     bytes
join or io
bytesio or you can do inplace     concatenation with a bytearray object
  bytearray objects are     mutable and have an efficient overallocation mechanism    if concatenating tuple objects extend a list instead    for other types investigate the relevant class documentation7
 some sequence types such as range only support item sequences   that follow specific patterns and hence dont support sequence   concatenation or repetition
 index raises valueerror when x is not found in s
 not all   implementations support passing the additional arguments i and   j
 these arguments allow efficient searching of subsections of   the sequence
 passing the extra arguments is roughly equivalent to   using sij
indexx only without copying any data and with the   returned index being relative to the start of the sequence rather   than the start of the slice
immutable sequence types
the only operation that immutable sequence types generally implementthat is not also implemented by mutable sequence types is support forthe hash builtin
this support allows immutable sequences such as tuple instances tobe used as dict keys and stored in set and frozenset instances
attempting to hash an immutable sequence that contains unhashablevalues will result in typeerror
mutable sequence types
lists
lists are mutable sequences typically used to store collections ofhomogeneous items where the precise degree of similarity will vary byapplication
class listiterable   lists may be constructed in several ways    using a pair of square brackets to denote the empty list     using square brackets separating items with commas a a     b c    using a list comprehension x for x in iterable    using the type constructor list or listiterable   the constructor builds a list whose items are the same and in the   same order as iterables items
  iterable may be either a   sequence a container that supports iteration or an iterator   object
  if iterable is already a list a copy is made and   returned similar to iterable
 for example listabc   returns a b c and list 1 2 3  returns 1 2   3
 if no argument is given the constructor creates a new empty   list 
   many other operations also produce lists including the sorted   builtin
   lists implement all of the common and mutable sequence operations
   lists also provide the following additional method   sort keynone reversefalse      this method sorts the list in place using only  comparisons      between items
 exceptions are not suppressed  if any comparison      operations fail the entire sort operation will fail and the      list will likely be left in a partially modified state
      sort accepts two arguments that can only be passed by      keyword keywordonly arguments      key specifies a function of one argument that is used to      extract a comparison key from each list element for example      keystr
 the key corresponding to each item in the list      is calculated once and then used for the entire sorting process
      the default value of none means that list items are sorted      directly without calculating a separate key value
      the functools
cmptokey utility is available to convert a      2
x style cmp function to a key function
      reverse is a boolean value
  if set to true then the list      elements are sorted as if each comparison were reversed
      this method modifies the sequence in place for economy of space      when sorting a large sequence
  to remind users that it operates      by side effect it does not return the sorted sequence use      sorted to explicitly request a new sorted list instance
      the sort method is guaranteed to be stable
  a sort is      stable if it guarantees not to change the relative order of      elements that compare equal  this is helpful for sorting in      multiple passes for example sort by department then by salary      grade
      for sorting examples and a brief sorting tutorial see sorting      how to
      cpython implementation detail while a list is being sorted      the effect of attempting to mutate or even inspect the list is      undefined
  the c implementation of python makes the list appear      empty for the duration and raises valueerror if it can detect      that the list has been mutated during a sort
tuples
tuples are immutable sequences typically used to store collections ofheterogeneous data such as the 2tuples produced by the enumeratebuiltin
 tuples are also used for cases where an immutable sequenceof homogeneous data is needed such as allowing storage in a set ordict instance
class tupleiterable   tuples may be constructed in a number of ways    using a pair of parentheses to denote the empty tuple     using a trailing comma for a singleton tuple a or a    separating items with commas a b c or a b c    using the tuple builtin tuple or tupleiterable   the constructor builds a tuple whose items are the same and in the   same order as iterables items
  iterable may be either a   sequence a container that supports iteration or an iterator   object
  if iterable is already a tuple it is returned   unchanged
 for example tupleabc returns a b c   and tuple 1 2 3  returns 1 2 3
 if no argument is   given the constructor creates a new empty tuple 
   note that it is actually the comma which makes a tuple not the   parentheses
 the parentheses are optional except in the empty   tuple case or when they are needed to avoid syntactic ambiguity
   for example fa b c is a function call with three arguments   while fa b c is a function call with a 3tuple as the sole   argument
   tuples implement all of the common sequence operations
for heterogeneous collections of data where access by name is clearerthan access by index collections
namedtuple may be a moreappropriate choice than a simple tuple object
ranges
text sequence type  str
string methods
printfstyle string formatting
binary sequence types  bytes bytearray memoryview
the core builtin types for manipulating binary data are bytes andbytearray
 they are supported by memoryview which uses the bufferprotocol to access the memory of other binary objects without needingto make a copy
the array module supports efficient storage of basic data types like32bit integers and ieee754 doubleprecision floating values
bytes objects
bytes objects are immutable sequences of single bytes
 since manymajor binary protocols are based on the ascii text encoding bytesobjects offer several methods that are only valid when working withascii compatible data and are closely related to string objects in avariety of other ways
class bytessource encoding errors   firstly the syntax for bytes literals is largely the same as that   for string literals except that a b prefix is added    single quotes bstill allows embedded double quotes    double quotes bstill allows embedded single quotes
    triple quoted b3 single quotes b3 double quotes   only ascii characters are permitted in bytes literals regardless   of the declared source code encoding
 any binary values over 127   must be entered into bytes literals using the appropriate escape   sequence
   as with string literals bytes literals may also use a r prefix   to disable processing of escape sequences
 see string and bytes   literals for more about the various forms of bytes literal   including supported escape sequences
   while bytes literals and representations are based on ascii text   bytes objects actually behave like immutable sequences of integers   with each value in the sequence restricted such that 0  x  256   attempts to violate this restriction will trigger valueerror
   this is done deliberately to emphasise that while many binary   formats include ascii based elements and can be usefully   manipulated with some textoriented algorithms this is not   generally the case for arbitrary binary data blindly applying text   processing algorithms to binary data formats that are not ascii   compatible will usually lead to data corruption
   in addition to the literal forms bytes objects can be created in a   number of other ways    a zerofilled bytes object of a specified length bytes10    from an iterable of integers bytesrange20    copying existing binary data via the buffer protocol     bytesobj   also see the bytes builtin
   since 2 hexadecimal digits correspond precisely to a single byte   hexadecimal numbers are a commonly used format for describing   binary data
 accordingly the bytes type has an additional class   method to read data in that format   classmethod fromhexstring      this bytes class method returns a bytes object decoding the      given string object
  the string must contain two hexadecimal      digits per byte with ascii whitespace being ignored
       bytes
fromhex2ef0 f1f2        b
xf0xf1xf2      changed in version 3
7 bytes
fromhex now skips all ascii      whitespace in the string not just spaces
   a reverse conversion function exists to transform a bytes object   into its hexadecimal representation
   hexsep bytespersep      return a string object containing two hexadecimal digits for      each byte in the instance
       bxf0xf1xf2
hex      f0f1f2      if you want to make the hex string easier to read you can      specify a single character separator sep parameter to include      in the output
 by default between each byte
  a second optional      bytespersep parameter controls the spacing
  positive values      calculate the separator position from the right negative values      from the left
       value  bxf0xf1xf2       value
hex      f0f1f2       value
hex 2      f0f1f2       buuddlrlrab
hex  4      55554444 4c524c52 4142      new in version 3
5
      changed in version 3
8 bytes
hex now supports optional      sep and bytespersep parameters to insert separators      between bytes in the hex output
since bytes objects are sequences of integers akin to a tuple for abytes object b b0 will be an integer while b01 will be abytes object of length 1
  this contrasts with text strings whereboth indexing and slicing will produce a string of length 1the representation of bytes objects uses the literal format b
since it is often more useful than e
g
 bytes46 46 46
  youcan always convert a bytes object into a list of integers usinglistb
note  for python 2
x users in the python 2
x series a variety of  implicit conversions between 8bit strings the closest thing 2
x  offers to a builtin binary data type and unicode strings were  permitted
 this was a backwards compatibility workaround to account  for the fact that python originally only supported 8bit text and  unicode text was a later addition
 in python 3
x those implicit  conversions are gone  conversions between 8bit binary data and  unicode text must be explicit and bytes and string objects will  always compare unequal
bytearray objects
bytes and bytearray operations
printfstyle bytes formatting
memory views
set types  set frozenset
a set object is an unordered collection of distinct hashableobjects
 common uses include membership testing removing duplicatesfrom a sequence and computing mathematical operations such asintersection union difference and symmetric difference
 for othercontainers see the builtin dict list and tuple classes andthe collections module
like other collections sets support x in set lenset and forx in set
  being an unordered collection sets do not record elementposition or order of insertion
  accordingly sets do not supportindexing slicing or other sequencelike behavior
there are currently two builtin set types set and frozenset
 theset type is mutable  the contents can be changed using methodslike add and remove
  since it is mutable it has no hashvalue and cannot be used as either a dictionary key or as an elementof another set
  the frozenset type is immutable and hashable its contents cannot be altered after it is created it can thereforebe used as a dictionary key or as an element of another set
nonempty sets not frozensets can be created by placing a commaseparated list of elements within braces for example jacksjoerd in addition to the set constructor
the constructors for both classes work the sameclass setiterableclass frozensetiterable   return a new set or frozenset object whose elements are taken from   iterable
  the elements of a set must be hashable
  to   represent sets of sets the inner sets must be frozenset objects
   if iterable is not specified a new empty set is returned
   sets can be created by several means    use a commaseparated list of elements within braces jack     sjoerd    use a set comprehension c for c in abracadabra if c not in     abc    use the type constructor set setfoobar seta     b foo   instances of set and frozenset provide the following   operations   lens      return the number of elements in set s cardinality of s
   x in s      test x for membership in s
   x not in s      test x for nonmembership in s
   isdisjointother      return true if the set has no elements in common with other
      sets are disjoint if and only if their intersection is the empty      set
   issubsetother   set  other      test whether every element in the set is in other
   set  other      test whether the set is a proper subset of other that is      set  other and set  other
   issupersetother   set  other      test whether every element in other is in the set
   set  other      test whether the set is a proper superset of other that is      set  other and set  other
      return a new set with elements from the set and all others
      return a new set with elements common to the set and all others
      return a new set with elements in the set that are not in the      others
   symmetricdifferenceother   set  other      return a new set with elements in either the set or other but      not both
   copy      return a shallow copy of the set
   note the nonoperator versions of union intersection   difference and symmetricdifference issubset and   issuperset methods will accept any iterable as an argument
  in   contrast their operator based counterparts require their arguments   to be sets
  this precludes errorprone constructions like   setabc  cbs in favor of the more readable   setabc
   both set and frozenset support set to set comparisons
 two sets   are equal if and only if every element of each set is contained in   the other each is a subset of the other
 a set is less than   another set if and only if the first set is a proper subset of the   second set is a subset but is not equal
 a set is greater than   another set if and only if the first set is a proper superset of   the second set is a superset but is not equal
   instances of set are compared to instances of frozenset based   on their members
  for example setabc  frozensetabc   returns true and so does setabc in setfrozensetabc
   the subset and equality comparisons do not generalize to a total   ordering function
  for example any two nonempty disjoint sets are   not equal and are not subsets of each other so all of the   following return false ab ab or ab
   since sets only define partial ordering subset relationships the   output of the list
sort method is undefined for lists of sets
   set elements like dictionary keys must be hashable
   binary operations that mix set instances with frozenset return   the type of the first operand
  for example frozensetab    setbc returns an instance of frozenset
   the following table lists operations available for set that do   not apply to immutable instances of frozenset   updateothers   set  other  
      update the set adding elements from all others
      update the set keeping only elements found in it and all      others
      update the set removing elements found in others
   symmetricdifferenceupdateother   set  other      update the set keeping only elements found in either set but      not in both
   addelem      add element elem to the set
   removeelem      remove element elem from the set
  raises keyerror if elem      is not contained in the set
   discardelem      remove element elem from the set if it is present
   pop      remove and return an arbitrary element from the set
  raises      keyerror if the set is empty
   clear      remove all elements from the set
   note the nonoperator versions of the update   intersectionupdate differenceupdate and   symmetricdifferenceupdate methods will accept any iterable as   an argument
   note the elem argument to the contains remove and   discard methods may be a set
  to support searching for an   equivalent frozenset a temporary one is created from elem
mapping types  dict
a mapping object maps hashable values to arbitrary objects
mappings are mutable objects
  there is currently only one standardmapping type the dictionary
  for other containers see the builtin list set and tuple classes and the collections module
a dictionarys keys are almost arbitrary values
  values that arenot hashable that is values containing lists dictionaries orother mutable types that are compared by value rather than by objectidentity may not be used as keys
  numeric types used for keys obeythe normal rules for numeric comparison if two numbers compare equalsuch as 1 and 1
0 then they can be used interchangeably to indexthe same dictionary entry
  note however that since computers storefloatingpoint numbers as approximations it is usually unwise to usethem as dictionary keys
dictionaries can be created by placing a commaseparated list of keyvalue pairs within braces for example jack 4098 sjoerd4127 or 4098 jack 4127 sjoerd or by the dictconstructor
class dictkwargclass dictmapping kwargclass dictiterable kwarg   return a new dictionary initialized from an optional positional   argument and a possibly empty set of keyword arguments
   dictionaries can be created by several means    use a commaseparated list of key value pairs within braces     jack 4098 sjoerd 4127 or 4098 jack 4127     sjoerd    use a dict comprehension  x x  2 for x in range10    use the type constructor dict dictfoo 100 bar     200 dictfoo100 bar200   if no positional argument is given an empty dictionary is created
   if a positional argument is given and it is a mapping object a   dictionary is created with the same keyvalue pairs as the mapping   object
  otherwise the positional argument must be an iterable   object
  each item in the iterable must itself be an iterable with   exactly two objects
  the first object of each item becomes a key   in the new dictionary and the second object the corresponding   value
  if a key occurs more than once the last value for that key   becomes the corresponding value in the new dictionary
   if keyword arguments are given the keyword arguments and their   values are added to the dictionary created from the positional   argument
  if a key being added is already present the value from   the keyword argument replaces the value from the positional   argument
   to illustrate the following examples all return a dictionary equal   to one 1 two 2 three 3       a  dictone1 two2 three3       b  one 1 two 2 three 3       c  dictzipone two three 1 2 3       d  dicttwo 2 one 1 three 3       e  dictthree 3 one 1 two 2       f  dictone 1 three 3 two2       a  b  c  d  e  f      true   providing keyword arguments as in the first example only works for   keys that are valid python identifiers
  otherwise any valid keys   can be used
   these are the operations that dictionaries support and therefore   custom mapping types should support too   listd      return a list of all the keys used in the dictionary d
   lend      return the number of items in the dictionary d
   dkey      return the item of d with key key
  raises a keyerror if      key is not in the map
      if a subclass of dict defines a method missing and key      is not present the dkey operation calls that method with      the key key as argument
  the dkey operation then returns      or raises whatever is returned or raised by the      missingkey call
 no other operations or methods invoke      missing
 if missing is not defined keyerror      is raised
 missing must be a method it cannot be an      instance variable          class counterdict         
         return 0          c  counter          cred         0          cred  1          cred         1      the example above shows part of the implementation of      collections
counter
  a different missing method is used      by collections
defaultdict
   dkey  value      set dkey to value
   del dkey      remove dkey from d
  raises a keyerror if key is not      in the map
   key in d      return true if d has a key key else false
   key not in d      equivalent to not key in d
   iterd      return an iterator over the keys of the dictionary
  this is a      shortcut for iterd
keys
   clear      remove all items from the dictionary
   copy      return a shallow copy of the dictionary
   classmethod fromkeysiterable value      create a new dictionary with keys from iterable and values set      to value
      fromkeys is a class method that returns a new dictionary
      value defaults to none
  all of the values refer to just a      single instance so it generally doesnt make sense for value      to be a mutable object such as an empty list
  to get distinct      values use a dict comprehension instead
   getkey default      return the value for key if key is in the dictionary else      default
 if default is not given it defaults to none so      that this method never raises a keyerror
   items      return a new view of the dictionarys items key value      pairs
 see the documentation of view objects
   keys      return a new view of the dictionarys keys
  see the      documentation of view objects
   popkey default      if key is in the dictionary remove it and return its value      else return default
  if default is not given and key is      not in the dictionary a keyerror is raised
   popitem      remove and return a key value pair from the dictionary
      pairs are returned in lifo lastin firstout order
      popitem is useful to destructively iterate over a      dictionary as often used in set algorithms
  if the dictionary      is empty calling popitem raises a keyerror
      changed in version 3
7 lifo order is now guaranteed
 in prior      versions popitem would return an arbitrary keyvalue pair
   reversedd      return a reverse iterator over the keys of the dictionary
 this      is a shortcut for reversedd
keys
      new in version 3
8
   setdefaultkey default      if key is in the dictionary return its value
  if not insert      key with a value of default and return default
  default      defaults to none
   updateother      update the dictionary with the keyvalue pairs from other      overwriting existing keys
  return none
      update accepts either another dictionary object or an      iterable of keyvalue pairs as tuples or other iterables of      length two
  if keyword arguments are specified the dictionary      is then updated with those keyvalue pairs d
updatered1      blue2
   values      return a new view of the dictionarys values
  see the      documentation of view objects
      an equality comparison between one dict
values view and      another will always return false
 this also applies when      comparing dict
values to itself          d  a 1          d
values         false   d  other      create a new dictionary with the merged keys and values of d      and other which must both be dictionaries
 the values of      other take priority when d and other share keys
      new in version 3
9
   d  other      update the dictionary d with keys and values from other      which may be either a mapping or an iterable of keyvalue      pairs
 the values of other take priority when d and other      share keys
      new in version 3
9
   dictionaries compare equal if and only if they have the same key   value pairs regardless of ordering
 order comparisons       raise typeerror
   dictionaries preserve insertion order
  note that updating a key   does not affect the order
  keys added after deletion are inserted   at the end
values      1 2 3 4       done  42       d      one 42 two 2 three 3 four 4       del dtwo       dtwo  none       d      one 42 three 3 four 4 two none   changed in version 3
7 dictionary order is guaranteed to be   insertion order
  this behavior was an implementation detail of   cpython from 3
6
   dictionaries and dictionary views are reversible
items      four 4 three 3 two 2 one 1   changed in version 3
8 dictionaries are now reversible
see also  types
mappingproxytype can be used to create a readonly view of a  dict
dictionary view objects
the objects returned by dict
values anddict
items are view objects
  they provide a dynamic view on thedictionarys entries which means that when the dictionary changesthe view reflects these changes
dictionary views can be iterated over to yield their respective dataand support membership testslendictview   return the number of entries in the dictionary
iterdictview   return an iterator over the keys values or items represented as   tuples of key value in the dictionary
   keys and values are iterated over in insertion order
 this allows   the creation of value key pairs using zip pairs    zipd
  another way to create the same list is   pairs  v k for k v in d
   iterating views while adding or deleting entries in the dictionary   may raise a runtimeerror or fail to iterate over all entries
   changed in version 3
7 dictionary order is guaranteed to be   insertion order
x in dictview   return true if x is in the underlying dictionarys keys values   or items in the latter case x should be a key value   tuple
reverseddictview   return a reverse iterator over the keys values or items of the   dictionary
 the view will be iterated in reverse order of the   insertion
   changed in version 3
8 dictionary views are now reversible
keys views are setlike since their entries are unique and hashable
if all values are hashable so that key value pairs are uniqueand hashable then the items view is also setlike
  values views arenot treated as setlike since the entries are generally not unique
for setlike views all of the operations defined for the abstractbase class collections
set are available for example  or 
an example of dictionary view usage    dishes  eggs 2 sausage 1 bacon 1 spam 500    keys  dishes
context manager types
pythons with statement supports the concept of a runtime contextdefined by a context manager
  this is implemented using a pair ofmethods that allow userdefined classes to define a runtime contextthat is entered before the statement body is executed and exited whenthe statement endscontextmanager
enter   enter the runtime context and return either this object or another   object related to the runtime context
 the value returned by this   method is bound to the identifier in the as clause of with   statements using this context manager
   an example of a context manager that returns itself is a file   object
 file objects return themselves from enter to allow   open to be used as the context expression in a with   statement
   an example of a context manager that returns a related object is   the one returned by decimal
localcontext
 these managers set   the active decimal context to a copy of the original decimal   context and then return the copy
 this allows changes to be made to   the current decimal context in the body of the with statement   without affecting code outside the with statement
exitexctype excval exctb   exit the runtime context and return a boolean flag indicating if   any exception that occurred should be suppressed
 if an exception   occurred while executing the body of the with statement the   arguments contain the exception type value and traceback   information
 otherwise all three arguments are none
   returning a true value from this method will cause the with   statement to suppress the exception and continue execution with the   statement immediately following the with statement
 otherwise the   exception continues propagating after this method has finished   executing
 exceptions that occur during execution of this method   will replace any exception that occurred in the body of the with   statement
   the exception passed in should never be reraised explicitly    instead this method should return a false value to indicate that   the method completed successfully and does not want to suppress the   raised exception
 this allows context management code to easily   detect whether or not an exit method has actually failed
python defines several context managers to support easy threadsynchronisation prompt closure of files or other objects and simplermanipulation of the active decimal arithmetic context
 the specifictypes are not treated specially beyond their implementation of thecontext management protocol
 see the contextlib module for someexamples
pythons generators and the contextlib
contextmanager decoratorprovide a convenient way to implement these protocols
  if a generatorfunction is decorated with the contextlib
contextmanager decoratorit will return a context manager implementing the necessaryenter and exit methods rather than the iteratorproduced by an undecorated generator function
note that there is no specific slot for any of these methods in thetype structure for python objects in the pythonc api
 extension typeswanting to define these methods must provide them as a normal pythonaccessible method
 compared to the overhead of setting up the runtimecontext the overhead of a single class dictionary lookup isnegligible
generic alias type
note  if the getitem of the class metaclass is present it will  take precedence over the classgetitem defined in the class  see pep 560 for more details
standard generic collections
special attributes of generic alias
parameters      tsee also   pep 585  type hinting generics in standard collections   classgetitem  used to implement parameterized generics
   generics  generics in the typing module
new in version 3
9
other builtin types
the interpreter supports several other kinds of objects
 most of thesesupport only one or two operations
modules
the only special operation on a module is attribute access m
namewhere m is a module and name accesses a name defined in mssymbol table
 module attributes can be assigned to
  note that theimport statement is not strictly speaking an operation on a moduleobject import foo does not require a module object named foo toexist rather it requires an external definition for a modulenamed foo somewhere
a special attribute of every module is dict
 this is thedictionary containing the modules symbol table
 modifying thisdictionary will actually change the modules symbol table but directassignment to the dict attribute is not possible you can writem
dicta  1 which defines m
a to be 1 but you cantwrite m
  modifying dict directly is notrecommended
modules built into the interpreter are written like this modulesys builtin
  if loaded from a file they are written asmodule os from usrlocallibpythonx
classes and class instances
see objects values and types and class definitions for these
functions
function objects are created by function definitions
  the onlyoperation on a function object is to call it funcargumentlist
there are really two flavors of function objects builtin functionsand userdefined functions
  both support the same operation to callthe function but the implementation is different hence thedifferent object types
see function definitions for more information
methods
methods are functions that are called using the attribute notation
there are two flavors builtin methods such as append on listsand class instance methods
  builtin methods are described with thetypes that support them
if you access a method a function defined in a class namespacethrough an instance you get a special object a bound method alsocalled instance method object
 when called it will add the selfargument to the argument list
  bound methods have two special readonly attributes m
self is the object on which the methodoperates and m
func is the function implementing the method
calling marg1 arg2 
 argn is completely equivalent tocalling m
like function objects bound method objects support getting arbitraryattributes
  however since method attributes are actually stored onthe underlying function object meth
func setting methodattributes on bound methods is disallowed
  attempting to set anattribute on a method results in an attributeerror being raised
  inorder to set a method attribute you need to explicitly set it on theunderlying function object    class c   
whoami   my name is methodsee the standard type hierarchy for more information
code objects
code objects are used by the implementation to represent pseudocompiled executable python code such as a function body
 they differfrom function objects because they dont contain a reference to theirglobal execution environment
  code objects are returned by the builtin compile function and can be extracted from function objectsthrough their code attribute
 see also the code module
a code object can be executed or evaluated by passing it instead of asource string to the exec or eval  builtin functions
see the standard type hierarchy for more information
type objects
type objects represent the various object types
  an objects type isaccessed by the builtin function type
  there are no specialoperations on types
  the standard module types defines names forall standard builtin types
types are written like this class int
the null object
this object is returned by functions that dont explicitly return avalue
  it supports no special operations
  there is exactly one nullobject named none a builtin name
  typenone produces thesame singleton
it is written as none
the ellipsis object
this object is commonly used by slicing see slicings
  it supportsno special operations
  there is exactly one ellipsis object namedellipsis a builtin name
  typeellipsis produces theellipsis singleton
it is written as ellipsis or 
the notimplemented object
this object is returned from comparisons and binary operations whenthey are asked to operate on types they dont support
 see comparisonsfor more information
  there is exactly one notimplemented object
typenotimplemented produces the singleton instance
it is written as notimplemented
boolean values
boolean values are the two constant objects false and true
  theyare used to represent truth values although other values can also beconsidered false or true
  in numeric contexts for example when usedas the argument to an arithmetic operator they behave like theintegers 0 and 1 respectively
 the builtin function bool can beused to convert any value to a boolean if the value can beinterpreted as a truth value see section truth value testing above
they are written as false and true respectively
internal objects
see the standard type hierarchy for this information
  it describesstack frame objects traceback objects and slice objects
special attributes
the implementation adds a few special readonly attributes to severalobject types where they are relevant
  some of these are not reportedby the dir builtin function
dict   a dictionary or other mapping object used to store an objects   writable attributes
class   the class to which a class instance belongs
bases   the tuple of base classes of a class object
name   the name of the class function method descriptor or generator   instance
qualname   the qualified name of the class function method descriptor or   generator instance
   new in version 3
3
mro   this attribute is a tuple of classes that are considered when   looking for base classes during method resolution
mro   this method can be overridden by a metaclass to customize the   method resolution order for its instances
  it is called at class   instantiation and its result is stored in mro
subclasses   each class keeps a list of weak references to its immediate   subclasses
  this method returns a list of all those references   still alive
 example       int
subclasses      class bool footnotes 1 additional information on these special methods may be found in    the python reference manual basic customization
2 as a consequence the list 1 2 is considered equal to 1
0    2
0 and similarly for tuples
3 they must have since the parser cant tell the type of the    operands
4 cased characters are those with general category property being    one of lu letter uppercase ll letter lowercase or lt    letter titlecase
5 to format only a tuple you should therefore provide a singleton    tuple whose only element is the tuple to be formatted
tabnanny  detection of ambiguous indentation
source code libtabnanny
pyfor the time being this module is intended to be called as a script
however it is possible to import it into an ide and use the functioncheck described below
note  the api provided by this module is likely to change in future  releases such changes may not be backward compatible
checkfileordir   if fileordir is a directory and not a symbolic link then   recursively descend the directory tree named by fileordir   checking all 
py files along the way
  if fileordir is an   ordinary python source file it is checked for whitespace related   problems
  the diagnostic messages are written to standard output   using the print function
verbose   flag indicating whether to print verbose messages
 this is   incremented by the v option if called as a script
filenameonly   flag indicating whether to print only the filenames of files   containing whitespace related problems
  this is set to true by the   q option if called as a script
nannynag   raised by processtokens if detecting an ambiguous indent
   captured and handled in check
processtokenstokens   this function is used by check to process tokens generated by   the tokenize module
see also  module tokenize     lexical scanner for python source code
undocumented modules
platform specific modules
these modules are used to implement the os
path module and are notdocumented beyond this mention
  theres little need to documentthese
ntpath    implementation of os
path on win32 and win64 platforms
posixpath    implementation of os
path on posix
concurrentfutures  launching parallel tasks
new in version 3
2
source code libconcurrentfuturesthread
py andlibconcurrentfuturesprocess
pythe concurrent
futures module provides a highlevel interface forasynchronously executing callables
the asynchronous execution can be performed with threads usingthreadpoolexecutor or separate processes usingprocesspoolexecutor
  both implement the same interface which isdefined by the abstract executor class
executor objects
threadpoolexecutor
threadpoolexecutor example
processpoolexecutor
the processpoolexecutor class is an executor subclass that uses apool of processes to execute calls asynchronously
processpoolexecutor uses the multiprocessing module which allowsit to sidestep the global interpreter lock but also means that onlypicklable objects can be executed and returned
the main module must be importable by worker subprocesses
 thismeans that processpoolexecutor will not work in the interactiveinterpreter
calling executor or future methods from a callable submitted to aprocesspoolexecutor will result in deadlock
   changed in version 3
3 when one of the worker processes terminates   abruptly a brokenprocesspool error is now raised
  previously   behaviour was undefined but operations on the executor or its   futures would often freeze or deadlock
   changed in version 3
7 the mpcontext argument was added to   allow users to control the startmethod for worker processes   created by the pool
added the initializer and initargs   arguments
processpoolexecutor example
future objects
module functions
exception classes
cancellederror   raised when a future is cancelled
timeouterror   raised when a future operation exceeds the given timeout
brokenexecutor   derived from runtimeerror this exception class is raised when an   executor is broken for some reason and cannot be used to submit or   execute new tasks
   new in version 3
7
invalidstateerror   raised when an operation is performed on a future that is not   allowed in the current state
   new in version 3
8
brokenthreadpool   derived from brokenexecutor this exception class is raised when   one of the workers of a threadpoolexecutor has failed   initializing
   new in version 3
7
brokenprocesspool   derived from brokenexecutor formerly runtimeerror this   exception class is raised when one of the workers of a   processpoolexecutor has terminated in a nonclean fashion for   example if it was killed from the outside
   new in version 3
3
cursesascii  utilities for ascii characters
the curses
ascii module supplies name constants for ascii charactersand functions to test membership in various ascii character classes
the constants supplied are names for control characters as follows name            meaning                                         nul                                                           soh           start of heading console interrupt             stx           start of text                                   etx           end of text                                     eot           end of transmission                             enq           enquiry goes with ack flow control           ack           acknowledgement                                 bel           bell                                            bs            backspace                                       tab           tab                                             ht            alias for tab horizontal tab               lf            line feed                                       nl            alias for lf new line                      vt            vertical tab                                    ff            form feed                                       cr            carriage return                                 so            shiftout begin alternate character set        si            shiftin resume default character set          dle           datalink escape                                dc1           xon for flow control                           dc2           device control 2 blockmode flow control       dc3           xoff for flow control                          dc4           device control 4                                nak           negative acknowledgement                        syn           synchronous idle                                etb           end transmission block                          can           cancel                                          em            end of medium                                   sub           substitute                                      esc           escape                                          fs            file separator                                  gs            group separator                                 rs            record separator blockmode terminator         us            unit separator                                  sp            space                                           del           delete                                         note that many of these have little practical significance in modernusage
  the mnemonics derive from teleprinter conventions that predatedigital computers
the module supplies the following functions patterned on those in thestandard c librarycurses
isalnumc   checks for an ascii alphanumeric character it is equivalent to   isalphac or isdigitc
isalphac   checks for an ascii alphabetic character it is equivalent to   isupperc or islowerc
isasciic   checks for a character value that fits in the 7bit ascii set
isblankc   checks for an ascii whitespace character space or horizontal tab
iscntrlc   checks for an ascii control character in the range 0x00 to 0x1f or   0x7f
isdigitc   checks for an ascii decimal digit 0 through 9
  this is   equivalent to c in string
isgraphc   checks for ascii any printable character except space
islowerc   checks for an ascii lowercase character
isprintc   checks for any ascii printable character including space
ispunctc   checks for any printable ascii character which is not a space or an   alphanumeric character
isspacec   checks for ascii whitespace characters space line feed carriage   return form feed horizontal tab vertical tab
isupperc   checks for an ascii uppercase letter
isxdigitc   checks for an ascii hexadecimal digit
  this is equivalent to c in   string
isctrlc   checks for an ascii control character ordinal values 0 to 31
ismetac   checks for a nonascii character ordinal values 0x80 and above
these functions accept either integers or singlecharacter stringswhen the argument is a string it is first converted using the builtin function ord
note that all these functions check ordinal bit values derived fromthe character of the string you pass in they do not actually knowanything about the host machines character encoding
the following two functions take either a singlecharacter string orinteger byte value they return a value of the same type
asciic   return the ascii value corresponding to the low 7 bits of c
ctrlc   return the control character corresponding to the given character   the character bit value is bitwiseanded with 0x1f
altc   return the 8bit character corresponding to the given ascii   character the character bit value is bitwiseored with 0x80
the following function takes either a singlecharacter string orinteger value it returns a string
unctrlc   return a string representation of the ascii character c
  if c   is printable this string is the character itself
  if the   character is a control character 0x000x1f the string consists   of a caret  followed by the corresponding uppercase letter
   if the character is an ascii delete 0x7f the string is 
   if the character has its meta bit 0x80 set the meta bit is   stripped the preceding rules applied and  prepended to the   result
controlnames   a 33element string array that contains the ascii mnemonics for the   thirtytwo ascii control characters from 0 nul to 0x1f us in   order plus the mnemonic sp for the space character
sys  systemspecific parameters and functions
debugging and profiling
binhex  encode and decode binhex4 files
source code libbinhex
pydeprecated since version 3
9
this module encodes and decodes files in binhex4 format a formatallowing representation of macintosh files in ascii
 only the datafork is handled
the binhex module defines the following functionsbinhex
binhexinput output   convert a binary file with filename input to binhex file   output
 the output parameter can either be a filename or a   filelike object any object supporting a write and close   method
hexbininput output   decode a binhex file input
 input may be a filename or a file   like object supporting read and close methods
 the   resulting file is written to a file named output unless the   argument is none in which case the output filename is read from   the binhex file
the following exception is also definedexception binhex
error   exception raised when something cant be encoded using the binhex   format for example a filename is too long to fit in the filename   field or when input is not properly encoded binhex data
see also  module binascii     support module containing asciitobinary and binarytoascii     conversions
notes
there is an alternative more powerful interface to the coder anddecoder see the source for details
if you code or decode textfiles on nonmacintosh platforms they willstill use the old macintosh newline convention carriagereturn as endof line
emailmime creating email and mime objects from scratch
   changed in version 3
6 added policy keywordonly parameter
   changed in version 3
6 added policy keywordonly parameter
   changed in version 3
6 added policy keywordonly parameter
   changed in version 3
6 added policy keywordonly parameter
   changed in version 3
6 added policy keywordonly parameter
   changed in version 3
6 added policy keywordonly parameter
   changed in version 3
5 charset also accepts charset   instances
   changed in version 3
6 added policy keywordonly parameter
futures
source code libasynciofutures
pyfuture objects are used to bridge lowlevel callbackbased codewith highlevel asyncawait code
future functions
future object
cursespanel  a panel stack extension for curses
panels are windows with the added feature of depth so they can bestacked on top of each other and only the visible portions of eachwindow will be displayed
  panels can be added moved up or down inthe stack and removed
functions
the module curses
panel defines the following functionscurses
bottompanel   returns the bottom panel in the panel stack
newpanelwin   returns a panel object associating it with the given window win
   be aware that you need to keep the returned panel object referenced   explicitly
  if you dont the panel object is garbage collected   and removed from the panel stack
toppanel   returns the top panel in the panel stack
updatepanels   updates the virtual screen after changes in the panel stack
 this   does not call curses
doupdate so youll have to do this   yourself
panel objects
panel objects as returned by newpanel above are windows with astacking order
 theres always a window associated with a panel whichdetermines the content while the panel methods are responsible forthe windows depth in the panel stack
panel objects have the following methodspanel
above   returns the panel above the current panel
below   returns the panel below the current panel
bottom   push the panel to the bottom of the stack
hidden   returns true if the panel is hidden not visible false   otherwise
hide   hide the panel
 this does not delete the object it just makes the   window on screen invisible
movey x   move the panel to the screen coordinates y x
replacewin   change the window associated with the panel to the window win
setuserptrobj   set the panels user pointer to obj
 this is used to associate an   arbitrary piece of data with the panel and can be any python   object
show   display the panel which might have been hidden
top   push panel to the top of the stack
userptr   returns the user pointer for the panel
  this might be any python   object
window   returns the window object associated with the panel
code  interpreter base classes
interactive interpreter objects
runsourcesource filenameinput symbolsingle   compile and run some source in the interpreter
 arguments are the   same as for compilecommand the default for filename is   input and for symbol is single
  one of several things   can happen    the input is incorrect compilecommand raised an exception     syntaxerror or overflowerror
  a syntax traceback will be     printed by calling the showsyntaxerror method
  runsource     returns false
    the input is incomplete and more input is required     compilecommand returned none
 runsource returns     true
    the input is complete compilecommand returned a code     object
  the code is executed by calling the runcode which     also handles runtime exceptions except for systemexit
     runsource returns false
   the return value can be used to decide whether to use sys
ps1 or   sys
ps2 to prompt the next line
runcodecode   execute a code object
 when an exception occurs showtraceback   is called to display a traceback
  all exceptions are caught except   systemexit which is allowed to propagate
   a note about keyboardinterrupt this exception may occur   elsewhere in this code and may not always be caught
  the caller   should be prepared to deal with it
showsyntaxerrorfilenamenone   display the syntax error that just occurred
  this does not display   a stack trace because there isnt one for syntax errors
 if   filename is given it is stuffed into the exception instead of   the default filename provided by pythons parser because it always   uses string when reading from a string
 the output is written   by the write method
showtraceback   display the exception that just occurred
  we remove the first   stack item because it is within the interpreter object   implementation
 the output is written by the write method
   changed in version 3
5 the full chained traceback is displayed   instead of just the primary traceback
writedata   write a string to the standard error stream sys
 derived   classes should override this to provide the appropriate output   handling as needed
interactive console objects
trace  trace or track python statement execution
commandline usage
new in version 3
8 added module option that allows to run anexecutable module
main options
modifiers
filters
programmatic interface
urllibparse  parse urls into components
source code liburllibparse
url parsing
   the return value is a named tuple which means that its items can   be accessed by index or as named attributes which are       attribute           index    value                       value if not present          scheme            0        url scheme specifier        scheme parameter            netloc            1        network location part       empty string                  path              2        hierarchical path           empty string                  params            3        parameters for last path    empty string                                            element                                                   query             4        query component             empty string                  fragment          5        fragment identifier         empty string                  username                   user name                   none                        password                   password                    none                        hostname                   host name lower case      none                        port                       port number as integer if  none                                                  present                                                  reading the port attribute will raise a valueerror if an   invalid port is specified in the url
  see section structured parse   results for more information on the result object
html                  params query fragment   changed in version 3
2 added ipv6 url parsing capabilities
   changed in version 3
3 the fragment is now parsed for all url   schemes unless allowfragment is false in accordance with   rfc 3986
  previously a whitelist of schemes that support   fragments existed
   changed in version 3
6 outofrange port numbers now raise   valueerror instead of returning none
   changed in version 3
8 characters that affect netloc parsing under   nfkc normalization will now raise valueerror
   changed in version 3
2 add encoding and errors parameters
   changed in version 3
8 added maxnumfields parameter
   changed in version 3
2 add encoding and errors parameters
   changed in version 3
8 added maxnumfields parameter
   the return value is a named tuple its items can be accessed by   index or as named attributes       attribute           index    value                      value if not present          scheme            0        url scheme specifier       scheme parameter            netloc            1        network location part      empty string                  path              2        hierarchical path          empty string                  query             3        query component            empty string                  fragment          4        fragment identifier        empty string                  username                   user name                  none                        password                   password                   none                        hostname                   host name lower case     none                        port                       port number as integer    none                                                  if present                                              reading the port attribute will raise a valueerror if an   invalid port is specified in the url
  see section structured parse   results for more information on the result object
   changed in version 3
6 outofrange port numbers now raise   valueerror instead of returning none
   changed in version 3
8 characters that affect netloc parsing under   nfkc normalization will now raise valueerror
   note     if url is an absolute url that is it starts with  or     scheme the urls hostname andor scheme will be present     in the result
   changed in version 3
5 behavior updated to match the semantics   defined in rfc 3986
   the return value is a named tuple its items can be accessed by   index or as named attributes       attribute           index    value                      value if not present          url               0        url with no fragment       empty string                  fragment          1        fragment identifier        empty string                 see section structured parse results for more information on the   result object
   changed in version 3
2 result is a structured object rather than a   simple 2tuple
parsing ascii encoded bytes
changed in version 3
2 url parsing functions now accept ascii encodedbyte sequences
structured parse results
   new in version 3
2
   new in version 3
2
   new in version 3
2
   new in version 3
2
url quoting
   changed in version 3
7 moved from rfc 2396 to rfc 3986 for   quoting url strings
   changed in version 3
9 string parameter supports bytes and str   objects previously only str
   changed in version 3
2 query supports bytes and string objects
   new in version 3
5 quotevia parameter
see also  rfc 3986  uniform resource identifiers     this is the current standard std66
  rfc 2396  uniform resource identifiers uri generic syntax     document describing the generic syntactic requirements for both     uniform resource names urns and uniform resource locators     urls
emailparser parsing email messages
source code libemailparser
pymessage object structures can be created in one of two ways they canbe created from whole cloth by creating an emailmessage objectadding headers using the dictionary interface and adding payloadsusing setcontent and related methods or they can be created byparsing a serialized representation of the email message
the email package provides a standard parser that understands mostemail document structures including mime documents
  you can pass theparser a bytes string or file object and the parser will return toyou the root emailmessage instance of the object structure
  forsimple nonmime messages the payload of this root object will likelybe a string containing the text of the message
  for mime messagesthe root object will return true from its ismultipart methodand the subparts can be accessed via the payload manipulation methodssuch as getbody iterparts and walk
there are actually two parser interfaces available for use theparser api and the incremental feedparser api
  the parser apiis most useful if you have the entire text of the message in memoryor if the entire message lives in a file on the file system
feedparser is more appropriate when you are reading the message froma stream which might block waiting for more input such as reading anemail message from a socket
  the feedparser can consume and parsethe message incrementally and only returns the root object when youclose the parser
note that the parser can be extended in limited ways and of courseyou can implement your own parser completely from scratch
  all of thelogic that connects the email packages bundled parser and theemailmessage class is embodied in the policy class so a customparser can create message object trees any way it finds necessary byimplementing custom versions of the appropriate policy methods
feedparser api
parser api
additional notes
here are some notes on the parsing semantics most nonmultipart type messages are parsed as a single message  object with a string payload
  these objects will return false for  ismultipart and iterparts will yield an empty list
 all multipart type messages will be parsed as a container message  object with a list of submessage objects for their payload
  the  outer container message will return true for ismultipart and  iterparts will yield a list of subparts
 most messages with a content type of message such as message  deliverystatus and messagerfc822 will also be parsed as  container object containing a list payload of length 1
  their  ismultipart method will return true
 the single element  yielded by iterparts will be a submessage object
 some nonstandardscompliant messages may not be internally  consistent about their multipartedness
  such messages may have a  contenttype header of type multipart but their  ismultipart method may return false
 if such messages were  parsed with the feedparser they will have an instance of the  multipartinvariantviolationdefect class in their defects  attribute list
  see email
errors for details
site  sitespecific configuration hook
readline configuration
changed in version 3
4 activation of rlcompleter and history was madeautomatic
module contents
   changed in version 3
3 this function used to be called   unconditionally
   new in version 3
2
   new in version 3
2
   new in version 3
2
command line interface
see also pep 370  per user sitepackages directory
future  future statement definitions
shlex  simple lexical analysis
   note     since the split function instantiates a shlex instance     passing none for s will read the string to split from     standard input
   deprecated since version 3
9 passing none for s will raise an   exception in future python versions
   new in version 3
8
formatquotecommand    printremotecommand   ssh home ls l somefile rm rf    the quoting is compatible with unix shells and with split    from shlex import split    remotecommand  splitremotecommand    remotecommand   ssh home ls l somefile rm rf     command  splitremotecommand1    command   ls l somefile rm rf    new in version 3
3
   changed in version 3
6 the punctuationchars parameter was   added
see also  module configparser     parser for configuration files similar to the windows 
shlex objects
   changed in version 3
8 the punctuationchars attribute was made   compatible with the whitespacesplit attribute
   new in version 3
6
parsing rules
improved compatibility with shells
new in version 3
6
shlexa  b  c punctuationchars    lists   a   b  cnote  when punctuationchars is specified the wordchars attribute is  augmented with the characters 
asyncore  asynchronous socket handler
source code libasyncore
pydeprecated since version 3
6 please use asyncio instead
note  this module exists for backwards compatibility only
  for new code  we recommend using asyncio
this module provides the basic infrastructure for writing asynchronoussocket service clients and servers
there are only two ways to have a program on a single processor domore than one thing at a time
 multithreaded programming is thesimplest and most popular way to do it but there is another verydifferent technique that lets you have nearly all the advantages ofmultithreading without actually using multiple threads
  its reallyonly practical if your program is largely io bound
  if your programis processor bound then preemptive scheduled threads are probablywhat you really need
  network servers are rarely processor boundhowever
if your operating system supports the select system call in itsio library and nearly all do then you can use it to jugglemultiple communication channels at once doing other work while yourio is taking place in the background
  although this strategy canseem strange and complex especially at first it is in many wayseasier to understand and control than multithreaded programming
  theasyncore module solves many of the difficult problems for youmaking the task of building sophisticated highperformance networkservers and clients a snap
  for conversational applications andprotocols the companion asynchat module is invaluable
the basic idea behind both modules is to create one or more networkchannels instances of class asyncore
dispatcher andasynchat
asyncchat
  creating the channels adds them to a globalmap used by the loop function if you do not provide it with yourown map
once the initial channels isare created calling the loopfunction activates channel service which continues until the lastchannel including any that have been added to the map duringasynchronous service is closed
looptimeout usepoll map count   enter a polling loop that terminates after count passes or all open   channels have been closed
  all arguments are optional
  the   count parameter defaults to none resulting in the loop   terminating only when all channels have been closed
  the timeout   argument sets the timeout parameter for the appropriate select   or poll call measured in seconds the default is 30 seconds
   the usepoll parameter if true indicates that poll should   be used in preference to select the default is false
  the implied higherlevel events are       event                   description                                     handleconnect      implied by the first read or write event        handleclose        implied by a read event with no data                                 available                                       handleaccepted     implied by a read event on a listening                               socket                                         during asynchronous processing each mapped channels readable   and writable methods are used to determine whether the   channels socket should be added to the list of channels   selected or polled for read and write events
      deprecated since version 3
2
      new in version 3
2
      changed in version 3
3 family and type arguments can be      omitted
asyncore example basic http client
asyncore example basic echo server
functools  higherorder functions and operations on callable objects
partial objects
partial objects are callable objects created by partial
 theyhave three readonly attributespartial
func   a callable object or function
  calls to the partial object will   be forwarded to func with new arguments and keywords
args   the leftmost positional arguments that will be prepended to the   positional arguments provided to a partial object call
keywords   the keyword arguments that will be supplied when the partial   object is called
partial objects are like function objects in that they arecallable weak referencable and can have attributes
  there are someimportant differences
  for instance the name and docattributes are not created automatically
  also partial objectsdefined in classes behave like static methods and do not transforminto bound methods during instance attribute lookup
idle
menus
idle has two main window types the shell window and the editorwindow
  it is possible to have multiple editor windowssimultaneously
  on windows and linux each has its own top menu
each menu documented below indicates which window type it isassociated with
output windows such as used for edit  find in files are a subtypeof editor window
  they currently have the same top menu but adifferent default title and context menu
on macos there is one application menu
  it dynamically changesaccording to the window currently selected
  it has an idle menu andsome entries described below are moved around to conform to appleguidelines
file menu shell and editor
edit menu shell and editor
undo   undo the last change to the current window
  a maximum of 1000   changes may be undone
redo   redo the last undone change to the current window
cut   copy selection into the systemwide clipboard then delete the   selection
copy   copy selection into the systemwide clipboard
paste   insert contents of the systemwide clipboard into the current   window
the clipboard functions are also available in context menus
select all   select the entire contents of the current window
find
   open a search dialog with many optionsfind again   repeat the last search if there is one
find selection   search for the currently selected string if there is one
find in files
   open a file search dialog
  put results in a new output window
replace
   open a searchandreplace dialog
go to line   move the cursor to the beginning of the line requested and make   that line visible
show completions   open a scrollable list allowing selection of existing names
expand word   expand a prefix you have typed to match a full word in the same   window repeat to get a different expansion
show call tip   after an unclosed parenthesis for a function open a small window   with function parameter hints
  see calltips in the editing and   navigation section below
show surrounding parens   highlight the surrounding parenthesis
format menu editor window only
indent region   shift selected lines right by the indent width default 4 spaces
dedent region   shift selected lines left by the indent width default 4 spaces
comment out region   insert  in front of selected lines
uncomment region   remove leading  or  from selected lines
tabify region   turn leading stretches of spaces into tabs
 note we recommend   using 4 space blocks to indent python code
untabify region   turn all tabs into the correct number of spaces
toggle tabs   open a dialog to switch between indenting with spaces and tabs
new indent width   open a dialog to change indent width
 the accepted default by the   python community is 4 spaces
format paragraph   reformat the current blanklinedelimited paragraph in comment   block or multiline string or selected line in a string
  all lines   in the paragraph will be formatted to less than n columns where n   defaults to 72
strip trailing whitespace   remove trailing space and other whitespace characters after the   last nonwhitespace character of a line by applying str
rstrip to   each line including lines within multiline strings
  except for   shell windows remove extra newlines at the end of the file
run menu editor window only
run module   do check module
  if no error restart the shell to clean the   environment then execute the module
  output is displayed in the   shell window
  note that output requires use of print or write
   when execution is complete the shell retains focus and displays a   prompt
 at this point one may interactively explore the result of   execution
 this is similar to executing a file with python i   file at a command line
run
 customized   same as run module but run the module with customized settings
   command line arguments extend sys
argv as if passed on a   command line
 the module can be run in the shell without   restarting
check module   check the syntax of the module currently open in the editor window
   if the module has not been saved idle will either prompt the user   to save or autosave as selected in the general tab of the idle   settings dialog
  if there is a syntax error the approximate   location is indicated in the editor window
python shell   open or wake up the python shell window
shell menu shell window only
view last restart   scroll the shell window to the last shell restart
restart shell   restart the shell to clean the environment
previous history   cycle through earlier commands in history which match the current   entry
next history   cycle through later commands in history which match the current   entry
interrupt execution   stop a running program
debug menu shell window only
go to fileline   look on the current line
debugger toggle   when activated code entered in the shell or run from an editor   will run under the debugger
  in the editor breakpoints can be set   with the context menu
  this feature is still incomplete and   somewhat experimental
stack viewer   show the stack traceback of the last exception in a tree widget   with access to locals and globals
autoopen stack viewer   toggle automatically opening the stack viewer on an unhandled   exception
options menu shell and editor
configure idle   open a configuration dialog and change preferences for the   following fonts indentation keybindings text color themes   startup windows and size additional help sources and extensions
   on macos open the configuration dialog by selecting preferences in   the application menu
 for more details see setting preferences   under help and preferences
most configuration options apply to all windows or all future windows
the option items below only apply to the active window
showhide code context editor window only   open a pane at the top of the edit window which shows the block   context of the code which has scrolled above the top of the window
showhide line numbers editor window only   open a column to the left of the edit window which shows the number   of each line of text
zoomrestore height   toggles the window between normal size and maximum height
window menu shell and editor
lists the names of all open windows select one to bring it to theforeground deiconifying it if necessary
help menu shell and editor
about idle   display version copyright license credits and more
idle help   display this idle document detailing the menu options basic   editing and navigation and other tips
python docs   access local python documentation if installed or start a web   browser and open docs
org showing the latest python   documentation
turtle demo   run the turtledemo module with example python code and turtle   drawings
additional help sources may be added here with the configure idledialog under the general tab
 see the help sources subsection belowfor more on help menu choices
context menus
editing and navigation
editor windows
key bindings
in this section c refers to the control key on windows and unixand the command key on macos
 backspace deletes to the left del deletes to the right cbackspace delete word left cdel delete word to the right arrow keys and page uppage down to move around cleftarrow and crightarrow moves by words homeend go to beginend of line chomecend go to beginend of file some useful emacs bindings are inherited from tcltk      ca beginning of line      ce end of line      ck kill line but doesnt put it in clipboard      cl center window around the insertion point      cb go backward one character without deleting usually you       can also use the cursor key for this      cf go forward one character without deleting usually you       can also use the cursor key for this      cp go up one line usually you can also use the cursor key       for this      cd delete next characterstandard keybindings like cc to copy and cv to paste may work
automatic indentation
completions
calltips
code context
python shell window
 cc interrupts executing command cd sends endoffile closes window if typed at a  prompt alt expand word is also useful to reduce typing  command history   altp retrieves previous command matching what you have typed
text colors
startup and code execution
command line usage
   c command  run command in the shell window   d          enable debugger and open shell window   e          open editor window   h          print help message with legal combinations and exit   i          open shell window   r file     run file in shell window   s          run idlestartup or pythonstartup first in shell window   t title    set title of shell window              run stdin in shell  must be last option before argsif there are arguments if  c or r is used all arguments are placed in  sys
startup failure
running user code
user output in shell
developing tkinter applications
running without a subprocess
deprecated since version 3
4
help and preferences
help sources
setting preferences
idle on macos
extensions
inspect  inspect live objects
source code libinspect
pythe inspect module provides several useful functions to help getinformation about live objects such as modules classes methodsfunctions tracebacks frame objects and code objects
  for exampleit can help you examine the contents of a class retrieve the sourcecode of a method extract and format the argument list for a functionor get all the information you need to display a detailed traceback
there are four main kinds of services provided by this module typechecking getting source code inspecting classes and functions andexamining the interpreter stack
types and members
the getmembers function retrieves the members of an object such asa class or module
 the functions whose names begin with is aremainly provided as convenient choices for the second argument togetmembers
 they also help you determine when you can expect tofind the following special attributes type         attribute            description                  module       doc              documentation string                      file             filename missing for                                          builtin modules            class        doc              documentation string                      name             name with which this class                                     was defined                               qualname         qualified name                            module           name of module in which                                        this class was defined       method       doc              documentation string                      name             name with which this method                                    was defined                               qualname         qualified name                            func             function object containing                                     implementation of method                  self             instance to which this                                         method is bound or none                module           name of module in which                                        this method was defined      function     doc              documentation string                      name             name with which this                                           function was defined                      qualname         qualified name                            code             code object containing                                         compiled function                                              bytecode                                defaults         tuple of any default values                                    for positional or keyword                                      parameters                                kwdefaults       mapping of any default                                         values for keywordonly                                        parameters                                globals          global namespace in which                                      this function was defined                 annotations      mapping of parameters names                                    to annotations return                                     key is reserved for return                                     annotations
                              module           name of module in which                                        this function was defined    traceback    tbframe             frame object at this level                tblasti             index of last attempted                                        instruction in bytecode                   tblineno            current line number in                                         python source code                        tbnext              next inner traceback object                                    called by this level       frame        fback               next outer frame object                                        this frames caller                     fbuiltins           builtins namespace seen by                                     this frame                                fcode               code object being executed                                     in this frame                             fglobals            global namespace seen by                                       this frame                                flasti              index of last attempted                                        instruction in bytecode                   flineno             current line number in                                         python source code                        flocals             local namespace seen by                                        this frame                                ftrace              tracing function for this                                      frame or none             code         coargcount          number of arguments not                                       including keyword only                                         arguments  or  args                  cocode              string of raw compiled                                         bytecode                                  cocellvars          tuple of names of cell                                         variables referenced by                                       containing scopes                        coconsts            tuple of constants used in                                     the bytecode                              cofilename          name of file in which this                                     code object was created                   cofirstlineno       number of first line in                                        python source code                        coflags             bitmap of co flags                                        read more here                            colnotab            encoded mapping of line                                        numbers to bytecode indices               cofreevars          tuple of names of free                                         variables referenced via a                                    functions closure                       coposonlyargcount   number of positional only                                      arguments                                 cokwonlyargcount    number of keyword only                                         arguments not including                                     arg                                      coname              name with which this code                                      object was defined                        conames             tuple of names of local                                        variables                                 conlocals           number of local variables                 costacksize         virtual machine stack space                                    required                                  covarnames          tuple of names of arguments                                    and local variables          generator    name             name                                      qualname         qualified name                            giframe             frame                                     girunning           is the generator running                 gicode              code                                      giyieldfrom         object being iterated by                                       yield from or none      coroutine    name             name                                      qualname         qualified name                            crawait             object being awaited on or                                    none                                    crframe             frame                                     crrunning           is the coroutine running                 crcode              code                                      crorigin            where coroutine was                                            created or none
setcoroutineorigintr                                     ackingdepth              builtin      doc              documentation string                      name             original name of this                                          function or method                        qualname         qualified name                            self             instance to which a method                                     is bound or none         changed in version 3
5 add qualname and giyieldfromattributes to generators
the name attribute of generators is nowset from the function name instead of the code name and it can nowbe modified
changed in version 3
7 add crorigin attribute to coroutines
   note     getmembers will only return class attributes defined in the     metaclass when the argument is a class and those attributes have     been listed in the metaclass custom dir
   changed in version 3
3 the function is based directly on   importlib
   changed in version 3
8 functions wrapped in functools
partial   now return true if the wrapped function is a python generator   function
   new in version 3
5
   changed in version 3
8 functions wrapped in functools
partial   now return true if the wrapped function is a coroutine   function
   new in version 3
5
coroutine      def gencoro          yield      assert not isawaitablegen      assert isawaitablegencoro   new in version 3
5
isasyncgenfunctionagen      true   new in version 3
6
   changed in version 3
8 functions wrapped in functools
partial   now return true if the wrapped function is a asynchronous   generator function
   new in version 3
6
retrieving source code
   changed in version 3
5 documentation strings are now inherited if   not overridden
   changed in version 3
3 oserror is raised instead of ioerror   now an alias of the former
   changed in version 3
3 oserror is raised instead of ioerror   now an alias of the former
introspecting callables with the signature object
new in version 3
3
   new in version 3
5 followwrapped parameter
 pass false to get   a signature of callable specifically callable
   note     some callables may not be introspectable in certain     implementations of python
   changed in version 3
5 signature objects are picklable and   hashable
      changed in version 3
7 python only explicitly guaranteed that      it preserved the declaration order of keywordonly parameters as      of version 3
fromcallablemin         assert isinstancesig mysignature      new in version 3
5
   changed in version 3
5 parameter objects are picklable and   hashable
      changed in version 3
6 these parameter names are exposed by      this module as names like implicit0
keywordonly             name                      meaning                                                     positionalonly         value must be supplied as a positional                                          argument
      new in version 3
8
empty annotationspam            foospam      changed in version 3
4 in python 3
3 parameter objects were      allowed to have name set to none if their kind was set to      positionalonly
      note        arguments for which signature
      changed in version 3
9 arguments is now of type dict
      formerly it was of type collections
arguments         a spam b ham args       new in version 3
5
kwargssee also  pep 362  function signature object
classes and functions
   deprecated since version 3
0 use getfullargspec for an updated   api that is usually a dropin replacement but also correctly   handles function annotations and keywordonly   parameters
alternatively use signature and signature object   which provide a more structured introspection api for callables
   changed in version 3
4 this function is now based on   signature but still ignores wrapped attributes and   includes the already bound first parameter in the signature output   for bound methods
   changed in version 3
6 this method was previously documented as   deprecated in favour of signature in python 3
5 but that   decision has been reversed in order to restore a clearly supported   standard interface for singlesource python 23 code migrating away   from the legacy getargspec api
   changed in version 3
7 python only explicitly guaranteed that it   preserved the declaration order of keywordonly parameters as of   version 3
7 although in practice this order had always been   preserved in python 3
   note     this function was inadvertently marked as deprecated in python     3
   for example    from inspect import formatargspec getfullargspec    def fa int b float   
    formatargspecgetfullargspecf   a int b float   deprecated since version 3
5 use signature and signature   object which provide a better introspecting api for callables
   note     this function was inadvertently marked as deprecated in python     3
      typeerror f missing 1 required positional argument a   new in version 3
2
   deprecated since version 3
5 use signature
   new in version 3
3
   new in version 3
4
the interpreter stack
changed in version 3
5 return a named tuple instead of a tuple
note  keeping references to frame objects as found in the first element  of the frame records these functions return can cause your program  to create reference cycles
   changed in version 3
5 a list of named tuples frameinfoframe   filename lineno function codecontext index is returned
   changed in version 3
5 a list of named tuples frameinfoframe   filename lineno function codecontext index is returned
   changed in version 3
5 a list of named tuples frameinfoframe   filename lineno function codecontext index is returned
   changed in version 3
5 a list of named tuples frameinfoframe   filename lineno function codecontext index is returned
fetching attributes statically
   new in version 3
2
current state of generators and coroutines
   new in version 3
2
   new in version 3
5
   new in version 3
3
   new in version 3
5
code objects bit flags
   new in version 3
5
   new in version 3
5
   new in version 3
6
note  the flags are specific to cpython and may not be defined in other  python implementations
command line interface
resource  resource usage information
error   a deprecated alias of oserror
   changed in version 3
3 following pep 3151 this class was made   an alias of oserror
resource limits
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
resource usage
   a simple example      from resource import       import time       a non cpubound task      time
 a brief summary is presented here       index     field                  resource                                       0       ruutime             time in user mode float seconds              1       rustime             time in system mode float seconds            2       rumaxrss            maximum resident set size                      3       ruixrss             shared memory size                             4       ruidrss             unshared memory size                           5       ruisrss             unshared stack size                            6       ruminflt            page faults not requiring io                  7       rumajflt            page faults requiring io                      8       runswap             number of swap outs                            9       ruinblock           block input operations                         10      ruoublock           block output operations                        11      rumsgsnd            messages sent                                  12      rumsgrcv            messages received                              13      runsignals          signals received                               14      runvcsw             voluntary context switches                     15      runivcsw            involuntary context switches                  this function will raise a valueerror if an invalid who   parameter is specified
   new in version 3
2
gettext  multilingual internationalization services
source code libgettext
pythe gettext module provides internationalization i18n andlocalization l10n services for your python modules and applications
it supports both the gnu gettext message catalog api and a higherlevel classbased api that may be more appropriate for python files
the interface described below allows you to write your module andapplication messages in one natural language and provide a catalog oftranslated messages for running under different natural languages
some hints on localizing your python modules and applications are alsogiven
gnu gettext api
classbased api
the classbased api of the gettext module gives you more flexibilityand greater convenience than the gnu gettext api
  it is therecommended way of localizing your python applications and modules
gettext defines a gnutranslations class which implements theparsing of gnu 
mo format files and has methods for returningstrings
 instances of this class can also install themselves in thebuiltin namespace as the function 
finddomain localedirnone languagesnone allfalse   this function implements the standard 
mo file search algorithm
   it takes a domain identical to what textdomain takes
   optional localedir is as in bindtextdomain
 optional   languages is a list of strings where each string is a language   code
   changed in version 3
3 ioerror used to be raised instead of   oserror
the nulltranslations class
      new in version 3
8
      new in version 3
8
      warning        these methods should be avoided in python 3
      changed in version 3
8 added pgettext and npgettext
the gnutranslations class
      here is an example         n  lenos
      new in version 3
8
      new in version 3
8
      warning        these methods should be avoided in python 3
solaris message catalog support
the catalog constructor
internationalizing your programs and modules
localizing your module
localizing your application
changing languages on the fly
deferred translations
acknowledgements
the following people contributed code feedback design suggestionsprevious implementations and valuable experience to the creation ofthis module peter funk james henstridge juan david ibáñez palomar marcandré lemburg martin von löwis françois pinard barry warsaw gustavo niemeyer footnotes 1 the default locale directory is system dependent for example on    redhat linux it is usrsharelocale but on solaris it is    usrliblocale
superseded modules
the modules described in this chapter are deprecated and only kept forbackwards compatibility
 they have been superseded by other modules
 optparse  parser for command line options   background     terminology     what are options for     what are positional arguments for   tutorial     understanding option actions     the store action     handling boolean flag options     other actions     default values     generating help       grouping options     printing a version string     how optparse handles errors     putting it all together   reference guide     creating the parser     populating the parser     defining options     option attributes     standard option actions     standard option types     parsing arguments     querying and manipulating your option parser     conflicts between options     cleanup     other methods   option callbacks     defining a callback option     how callbacks are called     raising errors in a callback     callback example 1 trivial callback     callback example 2 check option order     callback example 3 check option order generalized     callback example 4 check arbitrary condition     callback example 5 fixed arguments     callback example 6 variable arguments   extending optparse     adding new types     adding new actions imp  access the import internals   examples
platform   access to underlying platforms identifying data
source code libplatform
pynote  specific platforms listed alphabetically with linux included in the  unix section
cross platform
java platform
windows platform
mac os platform
macverrelease versioninfo   machine   get mac os version information and return it as tuple release   versioninfo machine with versioninfo being a tuple version   devstage nonreleaseversion
   entries which cannot be determined are set to 
  all tuple   entries are strings
unix platforms
executable lib version chunksize16384   tries to determine the libc version against which the file   executable defaults to the python interpreter is linked
  returns   a tuple of strings lib version which default to the given   parameters in case the lookup fails
   note that this function has intimate knowledge of how different   libc versions add symbols to the executable is probably only usable   for executables compiled using gcc
   the file is read and scanned in chunks of chunksize bytes
reprlib  alternate repr implementation
source code libreprlib
pythe reprlib module provides a means for producing objectrepresentations with limits on the size of the resulting strings
 thisis used in the python debugger and may be useful in other contexts aswell
this module provides a class an instance and a functionclass reprlib
repr   class which provides formatting services useful in implementing   functions similar to the builtin repr size limits for   different object types are added to avoid the generation of   representations which are excessively long
arepr   this is an instance of repr which is used to provide the repr   function described below
  changing the attributes of this object   will affect the size limits used by repr and the python   debugger
reprobj   this is the repr method of arepr
  it returns a string   similar to that returned by the builtin function of the same name   but with limits on most sizes
in addition to sizelimiting tools the module also provides adecorator for detecting recursive calls to repr andsubstituting a placeholder string instead
   decorator for repr methods to detect recursive calls within   the same thread
  if a recursive call is made the fillvalue is   returned otherwise the usual repr call is made
  for   example    from reprlib import recursiverepr    class mylistlist   
x   new in version 3
2
repr objects
repr instances provide several attributes which can be used toprovide size limits for the representations of different object typesand methods which format specific object types
maxlevel   depth limit on the creation of recursive representations
  the   default is 6
maxarray   limits on the number of entries represented for the named object   type
  the default is 4 for maxdict 5 for maxarray and   6 for the others
maxlong   maximum number of characters in the representation for an integer
   digits are dropped from the middle
  the default is 40
maxstring   limit on the number of characters in the representation of the   string
  note that the normal representation of the string is   used as the character source if escape sequences are needed in the   representation these may be mangled when the representation is   shortened
  the default is 30
maxother   this limit is used to control the size of object types for which no   specific formatting method is available on the repr object
 it is   applied in a similar manner as maxstring
  the default is 20
reprobj   the equivalent to the builtin repr that uses the formatting   imposed by the instance
repr1obj level   recursive implementation used by repr
  this uses the type of   obj to determine which formatting method to call passing it   obj and level
  the typespecific methods should call repr1   to perform recursive formatting with level  1 for the value of   level in the recursive  call
reprtypeobj level   formatting methods for specific types are implemented as methods   with a name based on the type name
  in the method name type   is replaced by 
 dispatch to   these methods is handled by repr1
 typespecific methods which   need to recursively format a value should call self
repr1subobj   level  1
subclassing repr objects
the use of dynamic dispatching by repr
repr1 allows subclasses ofrepr to add support for additional builtin object types or tomodify the handling of types already supported
 this example shows howspecial support for file objects could be added   import reprlib   import sys   class myreprreprlib
xmlparsersexpat  fast xml parsing using expat
warning  the pyexpat module is not secure against maliciously constructed  data
  if you need to parse untrusted or unauthenticated data see  xml vulnerabilities
see also  the expat xml parser     home page of the expat project
xmlparser objects
expaterror exceptions
example
content model descriptions
expat error constants
   new in version 3
2
   new in version 3
2
xmlerrorsuspendpe footnotes 1 the encoding string included in xml output should conform to the    appropriate standards
optparse  parser for command line options
source code liboptparse
pydeprecated since version 3
2 the optparse module is deprecated andwill not be developed further development will continue with theargparse module
background
terminology
argument   a string entered on the commandline and passed by the shell to   execl or execv
option   an argument used to supply extra information to guide or customize   the execution of a program
option argument   an argument that follows an option is closely associated with that   option and is consumed from the argument list when that option is
positional argument   something leftover in the argument list after options have been   parsed i
required option   an option that must be supplied on the commandline note that the   phrase required option is selfcontradictory in english
what are options for
what are positional arguments for
tutorial
parseargs returns two values options an object containing values for all of your options  e
understanding option actions
the store action
for example   parser
handling boolean flag options
other actions
some other actions supported by optparse arestoreconst   store a constant valueappend   append this options argument to a listcount   increment a counter by onecallback   call a specified functionthese are covered in section reference guide and section optioncallbacks
default values
addoptionq actionstorefalse destverbose defaulttrueconsider this   parser
generating help
printing a version string
how optparse handles errors
putting it all together
reference guide
creating the parser
   usage default prog options      the usage summary to print when your program is run incorrectly      or with a help option
   optionlist default       a list of option objects to populate the parser with
   optionclass default optparse
   version default none      a version string to print when the user supplies a version      option
   conflicthandler default error      specifies what to do when options with conflicting option      strings are added to the parser see section conflicts between      options
   description default none      a paragraph of text giving a brief overview of your program
   addhelpoption default true      if true optparse will add a help option with option strings      h and help to the parser
   epilog default none      a paragraph of help text to print after the option help
populating the parser
addoption as shown insection tutorial
defining options
  the standard option   actions hardcoded into optparse are   store      store this options argument default   storeconst      store a constant value   storetrue      store true   storefalse      store false   append      append this options argument to a list   appendconst      append a constant value to a list   count      increment a counter by one   callback      call a specified function   help      print a usage message including all options and the      documentation for them   if you dont supply an action the default is store
option attributes
action   default store   determines optparses behaviour when this option is seen on the   command line the available options are documented here
type   default string   the argument type expected by this option e
nargs   default 1   how many arguments of type type should be consumed when this   option is seen
   see section tutorial for an example
standard option actions
  example     parser
  example     parser
  example     parser
  example     parser
  example     parser
  example     from optparse import optionparser suppresshelp      usually a help option is added automatically but that can      be suppressed using the addhelpoption argument     parser  optionparseraddhelpoptionfalse     parser
standard option types
parsing arguments
parseargsargsnone valuesnonewhere the input parameters areargs   the list of arguments to process default sys
querying and manipulating your option parser
conflicts between options
setconflicthandlerhandlerthe available conflict handlers are   error default      assume option conflicts are a programming error and raise      optionconflicterror   resolve      resolve option conflicts intelligently see belowas an example lets define an optionparser that resolves conflictsintelligently and add conflicting options to it   parser  optionparserconflicthandlerresolve   parser
cleanup
other methods
option callbacks
defining a callback option
how callbacks are called
raising errors in a callback
callback example 1 trivial callback
callback example 2 check option order
callback example 3 check option order generalized
callback example 4 check arbitrary condition
callback example 5 fixed arguments
callback example 6 variable arguments
extending optparse
adding new types
adding new actions
collectionsabc  abstract base classes for containers
new in version 3
3 formerly this module was part of thecollections module
source code libcollectionsabc
pythis module provides abstract base classes that can be used to testwhether a class provides a particular interface for example whetherit is hashable or whether it is a mapping
collections abstract base classes
token  constants used with python parse trees
source code libtoken
pythis module provides constants which represent the numeric values ofleaf nodes of the parse tree terminal tokens
  refer to the filegrammargrammar in the python distribution for the definitions ofthe names in the context of the language grammar
  the specificnumeric values which the names map to may change between pythonversions
the module also provides a mapping from numeric codes to names andsome functions
  the functions mirror definitions in the python cheader files
tokname   dictionary mapping the numeric values of the constants defined in   this module back to name strings allowing more humanreadable   representation of parse trees to be generated
isterminalx   return true for terminal token values
isnonterminalx   return true for nonterminal token values
iseofx   return true if x is the marker indicating the end of input
the token constants aretoken
lpar   token value for 
rpar   token value for 
lsqb   token value for 
rsqb   token value for 
colon   token value for 
comma   token value for 
semi   token value for 
plus   token value for 
minus   token value for 
star   token value for 
slash   token value for 
vbar   token value for 
amper   token value for 
less   token value for 
greater   token value for 
ntoffsetthe following token type values arent used by the c tokenizer but areneeded for the tokenize module
comment   token value used to indicate a comment
nl   token value used to indicate a nonterminating newline
  the   newline token indicates the end of a logical line of python code   nl tokens are generated when a logical line of code is continued   over multiple physical lines
encoding   token value that indicates the encoding used to decode the source   bytes into text
 the first token returned by tokenize
tokenize   will always be an encoding token
changed in version 3
5 added await and async tokens
changed in version 3
7 added comment nl and encoding tokens
changed in version 3
7 removed await and async tokens
 asyncand await are now tokenized as name tokens
changed in version 3
8 added typecomment typeignorecolonequal
 added await and async tokens back theyre needed tosupport parsing older python versions for ast
parse withfeatureversion set to 6 or lower
sysconfig  provide access to pythons configuration information
new in version 3
2
source code libsysconfig
configuration variables
example of usage    import sysconfig    sysconfig
installation paths
other functions
using sysconfig as a script
tty  terminal control functions
pythe tty module defines functions for putting the tty into cbreak andraw modes
because it requires the termios module it will work only on unix
the tty module defines the following functionstty
tcsaflush   change the mode of the file descriptor fd to raw
 if when is   omitted it defaults to termios
tcsaflush and is passed to   termios
tcsetattr
tcsaflush   change the mode of file descriptor fd to cbreak
 if when is   omitted it defaults to termios
tcsaflush and is passed to   termios
tcsetattr
see also  module termios     lowlevel terminal control interface
wsgiref  wsgi utilities and reference implementation
wsgirefutil  wsgi environment utilities
  it should   not be used by actual wsgi servers or applications since the data   is fake   example usage      from wsgiref
   example usage      from io import stringio      from wsgiref
util import filewrapper       were using a stringiobuffer for as the filelike object      filelike  stringiothis is an example filelike object10      wrapper  filewrapperfilelike blksize5      for chunk in wrapper          printchunk   deprecated since version 3
8 support for sequence protocol is   deprecated
wsgirefheaders  wsgi response header tools
gif   changed in version 3
5 headers parameter is optional
wsgirefsimpleserver  a simple wsgi http server
   example usage      from wsgiref
wsgirefvalidate  wsgi conformance checker
   example usage      from wsgiref
wsgirefhandlers  servergateway base classes
   new in version 3
2
      changed in version 3
3 the term python is replaced with      implementation specific term like cpython jython etc
   new in version 3
2
examples
python runtime services
the modules described in this chapter provide a wide range of servicesrelated to the python interpreter and its interaction with itsenvironment
  heres an overview sys  systemspecific parameters and functions sysconfig  provide access to pythons configuration information   configuration variables   installation paths   other functions   using sysconfig as a script builtins  builtin objects main  toplevel script environment warnings  warning control   warning categories   the warnings filter     describing warning filters     default warning filter     overriding the default filter   temporarily suppressing warnings   testing warnings   updating code for new versions of dependencies   available functions   available context managers dataclasses  data classes   modulelevel decorators classes and functions   postinit processing   class variables   initonly variables   frozen instances   inheritance   default factory functions   mutable default values   exceptions contextlib  utilities for withstatement contexts   utilities   examples and recipes     supporting a variable number of context managers     catching exceptions from enter methods     cleaning up in an enter implementation     replacing any use of tryfinally and flag variables     using a context manager as a function decorator   single use reusable and reentrant context managers     reentrant context managers     reusable context managers abc  abstract base classes atexit  exit handlers   atexit example traceback  print or retrieve a stack traceback   tracebackexception objects   stacksummary objects   framesummary objects   traceback examples future  future statement definitions gc  garbage collector interface inspect  inspect live objects   types and members   retrieving source code   introspecting callables with the signature object   classes and functions   the interpreter stack   fetching attributes statically   current state of generators and coroutines   code objects bit flags   command line interface site  sitespecific configuration hook   readline configuration   module contents   command line interface
builtin exceptions
base classes
the following exceptions are used mostly as base classes for otherexceptions
exception baseexception   the base class for all builtin exceptions
  it is not meant to be   directly inherited by userdefined classes for that use   exception
  if str is called on an instance of this class   the representation of the arguments to the instance are returned   or the empty string when there were no arguments
   args      the tuple of arguments given to the exception constructor
  some      builtin exceptions like oserror expect a certain number of      arguments and assign a special meaning to the elements of this      tuple while others are usually called only with a single string      giving an error message
   withtracebacktb      this method sets tb as the new traceback for the exception and      returns the exception object
  it is usually used in exception      handling code like this         try             
withtracebacktbexception exception   all builtin nonsystemexiting exceptions are derived from this   class
  all userdefined exceptions should also be derived from   this class
exception arithmeticerror   the base class for those builtin exceptions that are raised for   various arithmetic errors overflowerror zerodivisionerror   floatingpointerror
exception buffererror   raised when a buffer related operation cannot be performed
exception lookuperror   the base class for the exceptions that are raised when a key or   index used on a mapping or sequence is invalid indexerror   keyerror
  this can be raised directly by codecs
lookup
concrete exceptions
os exceptions
warnings
the following exceptions are used as warning categories see thewarning categories documentation for more details
exception warning   base class for warning categories
exception userwarning   base class for warnings generated by user code
exception deprecationwarning   base class for warnings about deprecated features when those   warnings are intended for other python developers
   ignored by the default warning filters except in the main   module pep 565
 enabling the python development mode shows   this warning
exception pendingdeprecationwarning   base class for warnings about features which are obsolete and   expected to be deprecated in the future but are not deprecated at   the moment
   this class is rarely used as emitting a warning about a possible   upcoming deprecation is unusual and deprecationwarning is   preferred for already active deprecations
   ignored by the default warning filters
 enabling the python   development mode shows this warning
exception syntaxwarning   base class for warnings about dubious syntax
exception runtimewarning   base class for warnings about dubious runtime behavior
exception futurewarning   base class for warnings about deprecated features when those   warnings are intended for end users of applications that are   written in python
exception importwarning   base class for warnings about probable mistakes in module imports
   ignored by the default warning filters
 enabling the python   development mode shows this warning
exception unicodewarning   base class for warnings related to unicode
exception byteswarning   base class for warnings related to bytes and bytearray
exception resourcewarning   base class for warnings related to resource usage
   ignored by the default warning filters
 enabling the python   development mode shows this warning
   new in version 3
2
exception hierarchy
the class hierarchy for builtin exceptions is   baseexception     systemexit     keyboardinterrupt     generatorexit     exception          stopiteration          stopasynciteration          arithmeticerror              floatingpointerror              overflowerror              zerodivisionerror          assertionerror          attributeerror          buffererror          eoferror          importerror              modulenotfounderror          lookuperror              indexerror              keyerror          memoryerror          nameerror              unboundlocalerror          oserror              blockingioerror              childprocesserror              connectionerror                  brokenpipeerror                  connectionabortederror                  connectionrefusederror                  connectionreseterror              fileexistserror              filenotfounderror              interruptederror              isadirectoryerror              notadirectoryerror              permissionerror              processlookuperror              timeouterror          referenceerror          runtimeerror              notimplementederror              recursionerror          syntaxerror              indentationerror                   taberror          systemerror          typeerror          valueerror              unicodeerror                   unicodedecodeerror                   unicodeencodeerror                   unicodetranslateerror          warning               deprecationwarning               pendingdeprecationwarning               runtimewarning               syntaxwarning               userwarning               futurewarning               importwarning               unicodewarning               byteswarning               resourcewarning
http  http modules
source code libhttpinit
pyhttp is a package that collects several modules for working with thehypertext transfer protocol http
client is a lowlevel http protocol client for highlevel  url opening use urllib
server contains basic http server classes based on  socketserver http
cookies has utilities for implementing state management with  cookies http
cookiejar provides persistence of cookieshttp is also a module that defines a number of http status codes andassociated messages through the http
httpstatus enumclass http
httpstatus   new in version 3
5
   a subclass of enum
intenum that defines a set of http status   codes reason phrases and long descriptions written in english
   usage       from http import httpstatus       httpstatus
http status codes
csv  csv file reading and writing
module contents
dialects and formatting parameters
reader objects
writer objects
examples
the simplest example of reading a csv file   import csv   with opensome
readerf       for row in reader           printrowreading a file with an alternate format   import csv   with openpasswd newline as f       reader  csv
quotenone       for row in reader           printrowthe corresponding simplest possible writing example is   import csv   with opensome
writerowssomeiterablesince open is used to open a csv file for reading the file willby default be decoded into unicode using the system default encodingsee locale
getpreferredencoding
  to decode a file using adifferent encoding use the encoding argument of open   import csv   with opensome
readerf       for row in reader           printrowthe same applies to writing in something other than the system defaultencoding specify the encoding argument when opening the output file
registering a new dialect   import csv   csv
readerf unixpwda slightly more advanced use of the reader  catching and reportingerrors   import csv sys   filename  some
linenum eand while the module doesnt directly support parsing strings it caneasily be done   import csv   for row in csv
readeronetwothree       printrow footnotes 1 if newline is not specified newlines embedded inside quoted    fields will not be interpreted correctly and on platforms that    use rn linendings on write an extra r will be added
  it    should always be safe to specify newline since the csv    module does its own universal newline handling
stringprep  internet string preparation
termios  posix style tty control
this module provides an interface to the posix calls for tty iocontrol
 for a complete description of these calls see termios3unix manual page
  it is only available for those unix versions thatsupport posix termios style tty io control configured duringinstallation
all functions in this module take a file descriptor fd as theirfirst argument
  this can be an integer file descriptor such asreturned by sys
fileno or a file object such assys
stdin itself
this module also defines all the constants needed to work with thefunctions provided here these have the same name as theircounterparts in c
  please refer to your system documentation for moreinformation on using these terminal control interfaces
the module defines the following functionstermios
tcgetattrfd   return a list containing the tty attributes for file descriptor   fd as follows iflag oflag cflag lflag ispeed ospeed   cc where cc is a list of the tty special characters each a   string of length 1 except the items with indices vmin and   vtime which are integers when these fields are defined
  the   interpretation of the flags and the speeds as well as the indexing   in the cc array must be done using the symbolic constants defined   in the termios module
tcsetattrfd when attributes   set the tty attributes for file descriptor fd from the   attributes which is a list like the one returned by   tcgetattr
  the when argument determines when the attributes   are changed tcsanow to change immediately tcsadrain to change   after transmitting all queued output or tcsaflush to change   after transmitting all queued output and discarding all queued   input
tcsendbreakfd duration   send a break on file descriptor fd
  a zero duration sends a   break for 0
5 seconds a nonzero duration has a system   dependent meaning
tcdrainfd   wait until all output written to file descriptor fd has been   transmitted
tcflushfd queue   discard queued data on file descriptor fd
  the queue selector   specifies which queue tciflush for the input queue tcoflush   for the output queue or tcioflush for both queues
tcflowfd action   suspend or resume input or output on file descriptor fd
  the   action argument can be tcooff to suspend output tcoon to   restart output tcioff to suspend input or tcion to restart   input
see also  module tty     convenience functions for common terminal control operations
example
heres a function that prompts for a password with echoing turned off
note the technique using a separate tcgetattr call and a try 
finally statement to ensure that the old tty attributes are restoredexactly no matter what happens   def getpasspromptpassword        import termios sys       fd  sys
ftplib  ftp protocol client
source code libftplib
quitthe module defines the following itemsclass ftplib
   drxrxrx   5 ftp      ftp          4096 may  6 1043 centos   drxrxrx   3 ftp      ftp            18 jul 10  2008 fedora      changed in version 3
2 support for the with statement was added
   changed in version 3
3 sourceaddress parameter was added
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socket
 the encoding parameter was added and the   default was changed from latin1 to utf8 to follow rfc 2640
   new in version 3
2
   changed in version 3
3 sourceaddress parameter was added
   changed in version 3
4 the class now supports hostname check with   ssl
   deprecated since version 3
6 keyfile and certfile are   deprecated in favor of context
 please use   ssl
loadcertchain instead or let   ssl
createdefaultcontext select the systems trusted ca   certificates for you
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socket
 the encoding parameter was added and the   default was changed from latin1 to utf8 to follow rfc 2640
see also  module netrc     parser for the 
ftp objects
   changed in version 3
3 sourceaddress parameter was added
   changed in version 3
2 rest parameter added
   new in version 3
3
   note     if your server supports the command mlsd offers a better     api
   note     if your server supports the command mlsd offers a better     api
ftptls objects
   changed in version 3
4 the method now supports hostname check with   ssl
   new in version 3
3
gc  garbage collector interface
fcntl  the fcntl and ioctl system calls
changed in version 3
3 operations in this module used to raise anioerror where they now raise an oserror
changed in version 3
8 the fcntl module now contains faddsealsfgetseals and fseal constants for sealing ofos
changed in version 3
9 on macos the fcntl module exposes thefgetpath constant which obtains the path of a file from a filedescriptor
 on linux3
15 the fcntl module exposes thefofdgetlk fofdsetlk and fofdsetlkw constants whichworking with open file description locks
the module defines the following functionsfcntl
   an example       import array fcntl struct termios os       os
see also  module os     if the locking flags oshlock and oexlock are present in the     os module on bsd only the os
logging  logging facility for python
source code liblogginginit
pyimportantthis page contains the api reference information
 for tutorialinformation and discussion of more advanced topics see basic tutorial advanced tutorial logging cookbookthis module defines functions and classes which implement a flexibleevent logging system for applications and libraries
the key benefit of having the logging api provided by a standardlibrary module is that all python modules can participate in loggingso your application log can include your own messages integrated withmessages from thirdparty modules
the module provides a lot of functionality and flexibility
  if youare unfamiliar with logging the best way to get to grips with it isto see the tutorials see the links on the right
the basic classes defined by the module together with theirfunctions are listed below
 loggers expose the interface that application code directly uses
 handlers send the log records created by loggers to the  appropriate destination
 filters provide a finer grained facility for determining which log  records to output
 formatters specify the layout of log records in the final output
logger objects
logging levels
the numeric values of logging levels are given in the following table
these are primarily of interest if you want to define your own levelsand need them to have specific values relative to the predefinedlevels
 if you define a level with the same numeric value itoverwrites the predefined value the predefined name is lost
 level           numeric value    critical      50               error         40               warning       30               info          20               debug         10               notset        0               
handler objects
handlers have the following attributes and methods
 note thathandler is never instantiated directly this class acts as a basefor more useful subclasses
 however the init method insubclasses needs to call handler
init
handler   initlevelnotset      initializes the handler instance by setting its level setting      the list of filters to the empty list and creating a lock using      createlock for serializing access to an io mechanism
   createlock      initializes a thread lock which can be used to serialize access      to underlying io functionality which may not be threadsafe
   acquire      acquires the thread lock created with createlock
   release      releases the thread lock acquired with acquire
   setlevellevel      sets the threshold for this handler to level
 logging messages      which are less severe than level will be ignored
 when a      handler is created the level is set to notset which causes      all messages to be processed
      see logging levels for a list of levels
      changed in version 3
2 the level parameter now accepts a      string representation of the level such as info as an      alternative to the integer constants such as info
   setformatterfmt      sets the formatter for this handler to fmt
   addfilterfilter      adds the specified filter filter to this handler
   removefilterfilter      removes the specified filter filter from this handler
   filterrecord      apply this handlers filters to the record and return true if      the record is to be processed
 the filters are consulted in      turn until one of them returns a false value
 if none of them      return a false value the record will be emitted
 if one returns      a false value the handler will not emit the record
   flush      ensure all logging output has been flushed
 this version does      nothing and is intended to be implemented by subclasses
   close      tidy up any resources used by the handler
 this version does no      output but removes the handler from an internal list of handlers      which is closed when shutdown is called
 subclasses should      ensure that this gets called from overridden close methods
   handlerecord      conditionally emits the specified logging record depending on      filters which may have been added to the handler
 wraps the      actual emission of the record with acquisitionrelease of the      io thread lock
   handleerrorrecord      this method should be called from handlers when an exception is      encountered during an emit call
 if the modulelevel      attribute raiseexceptions is false exceptions get silently      ignored
 this is what is mostly wanted for a logging system       most users will not care about errors in the logging system      they are more interested in application errors
 you could      however replace this with a custom handler if you wish
 the      specified record is the one which was being processed when the      exception occurred
 the default value of raiseexceptions is      true as that is more useful during development
   formatrecord      do formatting for a record  if a formatter is set use it
      otherwise use the default formatter for the module
   emitrecord      do whatever it takes to actually log the specified logging      record
 this version is intended to be implemented by subclasses      and so raises a notimplementederror
for a list of handlers included as standard see logging
formatter objects
filter objects
logrecord objects
logrecord instances are created automatically by the logger everytime something is logged and can be created manually viamakelogrecord for example from a pickled event received over thewire
logrecordname level pathname lineno msg args excinfo funcnone sinfonone   contains all the information pertinent to the event being logged
   the primary information is passed in msg and args which are   combined using msg  args to create the message field of the   record
   parameters       name  the name of the logger used to log the event        represented by this logrecord
 note that this name will always        have this value even though it may be emitted by a handler        attached to a different ancestor logger
       level  the numeric level of the logging event one of        debug info etc
 note that this is converted to two        attributes of the logrecord levelno for the numeric value        and levelname for the corresponding level name
       pathname  the full pathname of the source file where the        logging call was made
       lineno  the line number in the source file where the        logging call was made
       msg  the event description message possibly a format        string with placeholders for variable data
       args  variable data to merge into the msg argument to        obtain the event description
       excinfo  an exception tuple with the current exception        information or none if no exception information is        available
       func  the name of the function or method from which the        logging call was invoked
       sinfo  a text string representing stack information from        the base of the stack in the current thread up to the logging        call
   getmessage      returns the message for this logrecord instance after merging      any usersupplied arguments with the message
 if the user      supplied message argument to the logging call is not a string      str is called on it to convert it to a string
 this allows      use of userdefined classes as messages whose str method      can return the actual format string to be used
   changed in version 3
2 the creation of a logrecord has been made   more configurable by providing a factory which is used to create   the record
 the factory can be set using getlogrecordfactory   and setlogrecordfactory see this for the factorys signature
   this functionality can be used to inject your own values into a   logrecord at creation time
 you can use the following pattern      oldfactory  logging
setlogrecordfactoryrecordfactory   with this pattern multiple factories could be chained and as long   as they dont overwrite each others attributes or unintentionally   overwrite the standard attributes listed above there should be no   surprises
logrecord attributes
loggeradapter objects
loggeradapter instances are used to conveniently pass contextualinformation into logging calls
 for a usage example see the sectionon adding contextual information to your logging output
loggeradapterlogger extra   returns an instance of loggeradapter initialized with an   underlying logger instance and a dictlike object
   processmsg kwargs      modifies the message andor keyword arguments passed to a      logging call in order to insert contextual information
 this      implementation takes the object passed as extra to the      constructor and adds it to kwargs using key extra
 the      return value is a msg kwargs tuple which has the      possibly modified versions of the arguments passed in
in addition to the above loggeradapter supports the followingmethods of logger debug info warning errorexception critical log isenabledforgeteffectivelevel setlevel and hashandlers
 these methodshave the same signatures as their counterparts in logger so you canuse the two types of instances interchangeably
changed in version 3
2 the isenabledfor geteffectivelevelsetlevel and hashandlers methods were added tologgeradapter
  these methods delegate to the underlying logger
thread safety
the logging module is intended to be threadsafe without any specialwork needing to be done by its clients
 it achieves this though usingthreading locks there is one lock to serialize access to the modulesshared data and each handler also creates a lock to serialize accessto its underlying io
if you are implementing asynchronous signal handlers using thesignal module you may not be able to use logging from within suchhandlers
 this is because lock implementations in the threadingmodule are not always reentrant and so cannot be invoked from suchsignal handlers
modulelevel functions
modulelevel attributes
integration with the warnings module
calendar  general calendarrelated functions
pprint  data pretty printer
source code libpprint
pythe pprint module provides a capability to prettyprint arbitrarypython data structures in a form which can be used as input to theinterpreter
 if the formatted structures include objects which are notfundamental python types the representation may not be loadable
this may be the case if objects such as files sockets or classes areincluded as well as many other objects which are not representable aspython literals
the formatted representation keeps objects on a single line if it canand breaks them onto multiple lines if they dont fit within theallowed width
 construct prettyprinter objects explicitly if youneed to adjust the width constraint
dictionaries are sorted by key before the display is computed
changed in version 3
9 added support for prettyprintingtypes
simplenamespace
the pprint module defines one classclass pprint
prettyprinterindent1 width80 depthnone streamnone  compactfalse sortdictstrue   construct a prettyprinter instance
  this constructor understands   several keyword parameters
  an output stream may be set using the   stream keyword the only method used on the stream object is the   file protocols write method
  if not specified the   prettyprinter adopts sys
  the amount of indentation   added for each recursive level is specified by indent the   default is one
  other values can cause output to look a little   odd but can make nesting easier to spot
  the number of levels   which may be printed is controlled by depth if the data   structure being printed is too deep the next contained level is   replaced by 
  by default there is no constraint on the depth   of the objects being formatted
  the desired output width is   constrained using the width parameter the default is 80   characters
  if a structure cannot be formatted within the   constrained width a best effort will be made
  if compact is   false the default each item of a long sequence will be formatted   on a separate line
  if compact is true as many items as will   fit within the width will be formatted on each output line
 if   sortdicts is true the default dictionaries will be formatted   with their keys sorted otherwise they will display in insertion   order
   changed in version 3
4 added the compact parameter
   changed in version 3
8 added the sortdicts parameter
the pprint module also provides several shortcut functionspprint
pformatobject indent1 width80 depthnone  compactfalse sortdictstrue   return the formatted representation of object as a string
   indent width depth compact and sortdicts will be   passed to the prettyprinter constructor as formatting parameters
   changed in version 3
4 added the compact parameter
   changed in version 3
8 added the sortdicts parameter
ppobject args sortdictsfalse kwargs   prints the formatted representation of object followed by a   newline
 if sortdicts is false the default dictionaries will   be displayed with their keys in insertion order otherwise the dict   keys will be sorted
 args and kwargs will be passed to   pprint as formatting parameters
   new in version 3
8
pprintobject streamnone indent1 width80 depthnone  compactfalse sortdictstrue   prints the formatted representation of object on stream   followed by a newline
  if stream is none sys
stdout is   used
  this may be used in the interactive interpreter instead of   the print function for inspecting values you can even reassign   print  pprint
pprint for use within a scope
  indent   width depth compact and sortdicts will be passed to the   prettyprinter constructor as formatting parameters
   changed in version 3
4 added the compact parameter
   changed in version 3
8 added the sortdicts parameter
isreadableobject   determine if the formatted representation of object is   readable or can be used to reconstruct the value using eval
   this always returns false for recursive objects
isrecursiveobject   determine if object requires a recursive representation
one more support function is also definedpprint
safereprobject   return a string representation of object protected against   recursive data structures
  if the representation of object   exposes a recursive entry the recursive reference will be   represented as recursion on typename with idnumber
  the   representation is not otherwise formatted
prettyprinter objects
prettyprinter instances have the following methodsprettyprinter
pformatobject   return the formatted representation of object
  this takes into   account the options passed to the prettyprinter constructor
pprintobject   print the formatted representation of object on the configured   stream followed by a newline
the following methods provide the implementations for thecorresponding functions of the same names
  using these methods on aninstance is slightly more efficient since new prettyprinter objectsdont need to be created
isreadableobject   determine if the formatted representation of the object is   readable or can be used to reconstruct the value using eval
   note that this returns false for recursive objects
  if the   depth parameter of the prettyprinter is set and the object is   deeper than allowed this returns false
isrecursiveobject   determine if the object requires a recursive representation
this method is provided as a hook to allow subclasses to modify theway objects are converted to strings
  the default implementation usesthe internals of the saferepr implementation
formatobject context maxlevels level   returns three values the formatted version of object as a   string a flag indicating whether the result is readable and a   flag indicating whether recursion was detected
  the first argument   is the object to be presented
  the second is a dictionary which   contains the id of objects that are part of the current   presentation context direct and indirect containers for object   that are affecting the presentation as the keys if an object   needs to be presented which is already represented in context   the third return value should be true
  recursive calls to the   format method should add additional entries for containers to   this dictionary
  the third argument maxlevels gives the   requested limit to recursion this will be 0 if there is no   requested limit
  this argument should be passed unmodified to   recursive calls
 the fourth argument level gives the current   level recursive calls should be passed a value less than that of   the current call
example
to demonstrate several uses of the pprint function and itsparameters lets fetch information about a project from pypi    import json    import pprint    from urllib
loadrespinfoin its basic form pprint shows the whole object    pprint
0the result can be limited to a certain depth ellipsis is used fordeeper contents    pprint
0additionally maximum character width can be suggested
 if a longobject cannot be split the specified width will be exceeded    pprint
difflib  helpers for computing deltas
source code libdifflib
pythis module provides classes and functions for comparing sequences
 itcan be used for example for comparing files and can produceinformation about file differences in various formats including htmland context and unified diffs
 for comparing directories and filessee also the filecmp module
sequencematcher   this is a flexible class for comparing pairs of sequences of any   type so long as the sequence elements are hashable
  the basic   algorithm predates and is a little fancier than an algorithm   published in the late 1980s by ratcliff and obershelp under the   hyperbolic name gestalt pattern matching
  the idea is to find   the longest contiguous matching subsequence that contains no junk   elements these junk elements are ones that are uninteresting in   some sense such as blank lines or whitespace
  handling junk is   an extension to the ratcliff and obershelp algorithm
 the same   idea is then applied recursively to the pieces of the sequences to   the left and to the right of the matching subsequence
  this does   not yield minimal edit sequences but does tend to yield matches   that look right to people
   timing the basic ratcliffobershelp algorithm is cubic time in   the worst case and quadratic time in the expected case
   sequencematcher is quadratic time for the worst case and has   expectedcase behavior dependent in a complicated way on how many   elements the sequences have in common best case time is linear
   automatic junk heuristic sequencematcher supports a   heuristic that automatically treats certain sequence items as junk
   the heuristic counts how many times each individual item appears in   the sequence
 if an items duplicates after the first one account   for more than 1 of the sequence and the sequence is at least 200   items long this item is marked as popular and is treated as junk   for the purpose of sequence matching
 this heuristic can be turned   off by setting the autojunk argument to false when creating the   sequencematcher
   new in version 3
2 the autojunk parameter
differ   this is a class for comparing sequences of lines of text and   producing humanreadable differences or deltas
  differ uses   sequencematcher both to compare sequences of lines and to   compare sequences of characters within similar nearmatching   lines
   each line of a differ delta begins with a twoletter code       code        meaning                                                   line unique to sequence 1                                 line unique to sequence 2                                  line common to both sequences                             line not present in either input sequence         lines beginning with  attempt to guide the eye to intraline   differences and were not present in either input sequence
 these   lines can be confusing if the sequences contain tab characters
htmldiff   this class can be used to create an html table or a complete html   file containing the table showing a side by side line by line   comparison of text with interline and intraline change   highlights
  the table can be generated in either full or   contextual difference mode
   the constructor for this class is   inittabsize8 wrapcolumnnone linejunknone charjunkischaracterjunk      initializes instance of htmldiff
      tabsize is an optional keyword argument to specify tab stop      spacing and defaults to 8
      wrapcolumn is an optional keyword to specify column number      where lines are broken and wrapped defaults to none where      lines are not wrapped
      linejunk and charjunk are optional keyword arguments passed      into ndiff used by htmldiff to generate the side by side      html differences
  see ndiff documentation for argument      default values and descriptions
   the following methods are public   makefilefromlines tolines fromdesc todesc contextfalse numlines5  charsetutf8      compares fromlines and tolines lists of strings and      returns a string which is a complete html file containing a      table showing line by line differences with interline and      intraline changes highlighted
      fromdesc and todesc are optional keyword arguments to      specify fromto file column header strings both default to an      empty string
      context and numlines are both optional keyword arguments
      set context to true when contextual differences are to be      shown else the default is false to show the full files
      numlines defaults to 5
  when context is true numlines      controls the number of context lines which surround the      difference highlights
  when context is false numlines      controls the number of lines which are shown before a difference      highlight when using the next hyperlinks setting to zero      would cause the next hyperlinks to place the next difference      highlight at the top of the browser without any leading      context
      note        fromdesc and todesc are interpreted as unescaped html and        should be properly escaped while receiving input from        untrusted sources
      changed in version 3
5 charset keywordonly argument was      added
  the default charset of html document changed from      iso88591 to utf8
   maketablefromlines tolines fromdesc todesc contextfalse numlines5      compares fromlines and tolines lists of strings and      returns a string which is a complete html table showing line by      line differences with interline and intraline changes      highlighted
      the arguments for this method are the same as those for the      makefile method
py is a commandline frontend to this class   and contains a good example of its use
contextdiffa b fromfile tofile fromfiledate tofiledate n3 linetermn   compare a and b lists of strings return a delta a   generator generating the delta lines in context diff format
   context diffs are a compact way of showing just the lines that have   changed plus a few lines of context
  the changes are shown in a   beforeafter style
  the number of context lines is set by n   which defaults to three
   by default the diff control lines those with  or  are   created with a trailing newline
  this is helpful so that inputs   created from io
readlines result in diffs that are   suitable for use with io
writelines since both the   inputs and outputs have trailing newlines
   for inputs that do not have trailing newlines set the lineterm   argument to  so that the output will be uniformly newline free
   the context diff format normally has a header for filenames and   modification times
  any or all of these may be specified using   strings for fromfile tofile fromfiledate and tofiledate
   the modification times are normally expressed in the iso 8601   format
 if not specified the strings default to blanks
py       14     bacon    eggs    ham     guido    14     python    eggy    hamster     guido   see a commandline interface to difflib for a more detailed   example
6   return a list of the best good enough matches
  word is a   sequence for which close matches are desired typically a string   and possibilities is a list of sequences against which to match   word typically a list of strings
   optional argument n default 3 is the maximum number of close   matches to return n must be greater than 0
   optional argument cutoff default 0
6 is a float in the range   0 1
 possibilities that dont score at least that similar to   word are ignored
   the best no more than n matches among the possibilities are   returned in a list sorted by similarity score most similar first
ndiffa b linejunknone charjunkischaracterjunk   compare a and b lists of strings return a differstyle   delta a generator generating the delta lines
   optional keyword parameters linejunk and charjunk are filtering   functions or none   linejunk a function that accepts a single string argument and   returns true if the string is junk or false if not
 the default is   none
 there is also a modulelevel function islinejunk   which filters out lines without visible characters except for at   most one pound character   however the underlying   sequencematcher class does a dynamic analysis of which lines are   so frequent as to constitute noise and this usually works better   than using this function
   charjunk a function that accepts a character a string of length   1 and returns if the character is junk or false if not
 the   default is modulelevel function ischaracterjunk which   filters out whitespace characters a blank or tab its a bad idea   to include newline in this
py is a commandline frontend to this   function
restoresequence which   return one of the two sequences that generated a delta
   given a sequence produced by differ
compare or ndiff   extract lines originating from file 1 or 2 parameter which   stripping off line prefixes
   example    diff  ndiffonentwonthreen
unifieddiffa b fromfile tofile fromfiledate tofiledate n3 linetermn   compare a and b lists of strings return a delta a   generator generating the delta lines in unified diff format
   unified diffs are a compact way of showing just the lines that have   changed plus a few lines of context
  the changes are shown in an   inline style instead of separate beforeafter blocks
  the number   of context lines is set by n which defaults to three
   by default the diff control lines those with   or    are created with a trailing newline
  this is helpful so that   inputs created from io
readlines result in diffs that   are suitable for use with io
writelines since both the   inputs and outputs have trailing newlines
   for inputs that do not have trailing newlines set the lineterm   argument to  so that the output will be uniformly newline free
   the context diff format normally has a header for filenames and   modification times
  any or all of these may be specified using   strings for fromfile tofile fromfiledate and tofiledate
   the modification times are normally expressed in the iso 8601   format
 if not specified the strings default to blanks
py    14 14    bacon   eggs   ham   python   eggy   hamster    guido   see a commandline interface to difflib for a more detailed   example
diffbytesdfunc a b fromfileb tofileb fromfiledateb tofiledateb n3 linetermbn   compare a and b lists of bytes objects using dfunc yield a   sequence of delta lines also bytes in the format returned by   dfunc
 dfunc must be a callable typically either   unifieddiff or contextdiff
   allows you to compare data with unknown or inconsistent encoding
   all inputs except n must be bytes objects not str
 works by   losslessly converting all inputs except n to str and calling   dfunca b fromfile tofile fromfiledate tofiledate n   lineterm
 the output of dfunc is then converted back to bytes   so the delta lines that you receive have the same   unknowninconsistent encodings as a and b
   new in version 3
5
islinejunkline   return true for ignorable lines
  the line line is ignorable if   line is blank or contains a single  otherwise it is not   ignorable
  used as a default for parameter linejunk in ndiff   in older versions
ischaracterjunkch   return true for ignorable characters
  the character ch is   ignorable if ch is a space or tab otherwise it is not ignorable
   used as a default for parameter charjunk in ndiff
see also  pattern matching the gestalt approach     discussion of a similar algorithm by john w
 ratcliff and d
     metzener
 this was published in dr
 dobbs journal in july 1988
sequencematcher objects
sequencematcher examples
this example compares two strings considering blanks to be junk s  sequencematcherlambda x x   
                     private volatile thread currentthreadratio returns a float in 0 1 measuring the similarity of thesequences
  as a rule of thumb a ratio value over 0
6 means thesequences are close matches printrounds
866if youre only interested in where the sequences matchgetmatchingblocks is handy for block in s
     printad and bd match for d elements  blocka0 and b0 match for 8 elementsa8 and b17 match for 21 elementsa29 and b38 match for 0 elementsnote that the last tuple returned by getmatchingblocks is alwaysa dummy lena lenb 0 and this is the only case in which thelast tuple element number of elements matched is 0
if you want to know how to change the first sequence into the seconduse getopcodes for opcode in s
     print6s add bdd  opcode equal a08 b08insert a88 b817 equal a829 b1738see also   the getclosematches function in this module which shows how    simple code building on sequencematcher can be used to do useful    work
   simple version control recipe for a small application built with    sequencematcher
differ objects
note that differgenerated deltas make no claim to be minimaldiffs
 to the contrary minimal diffs are often counterintuitivebecause they synch up anywhere possible sometimes accidental matches100 pages apart
 restricting synch points to contiguous matchespreserves some notion of locality at the occasional cost of producinga longer diff
the differ class has this constructorclass difflib
differlinejunknone charjunknone   optional keyword parameters linejunk and charjunk are for   filter functions or none   linejunk a function that accepts a single string argument and   returns true if the string is junk
  the default is none meaning   that no line is considered junk
   charjunk a function that accepts a single character argument a   string of length 1 and returns true if the character is junk
 the   default is none meaning that no character is considered junk
   these junkfiltering functions speed up matching to find   differences and do not cause any differing lines or characters to   be ignored
  read the description of the findlongestmatch   methods isjunk parameter for an explanation
   differ objects are used deltas generated via a single method   comparea b      compare two sequences of lines and generate the delta a      sequence of lines
      each sequence must contain individual singleline strings ending      with newlines
  such sequences can be obtained from the      readlines method of filelike objects
  the delta generated      also consists of newlineterminated strings ready to be printed      asis via the writelines method of a filelike object
differ example
this example compares two texts
 first we set up the texts sequencesof individual singleline strings ending with newlines such sequencescan also be obtained from the readlines method of filelikeobjects text1    1
splitlineskeependstruenext we instantiate a differ object d  differnote that when instantiating a differ object we may pass functionsto filter out line and character junk
  see the differconstructor for details
finally we compare the two result  listd
comparetext1 text2result is a list of strings so lets prettyprint it from pprint import pprint pprintresult    1
nas a single multiline string it looks like this import sys sys
a commandline interface to difflib
this example shows how to use difflib to create a difflike utility
it is also contained in the python source distribution astoolsscriptsdiff
audioop  manipulate raw audio data
introduction
the python library contains several different kinds of components
it contains data types that would normally be considered part of thecore of a language such as numbers and lists
  for these types thepython language core defines the form of literals and places someconstraints on their semantics but does not fully define thesemantics
  on the other hand the language core does definesyntactic properties like the spelling and priorities of operators
the library also contains builtin functions and exceptions objects that can be used by all python code without the need of animport statement
 some of these are defined by the core languagebut many are not essential for the core semantics and are onlydescribed here
the bulk of the library however consists of a collection of modules
there are many ways to dissect this collection
  some modules arewritten in c and built in to the python interpreter others arewritten in python and imported in source form
  some modules provideinterfaces that are highly specific to python like printing a stacktrace some provide interfaces that are specific to particularoperating systems such as access to specific hardware others provideinterfaces that are specific to a particular application domain likethe world wide web
 some modules are available in all versions andports of python others are only available when the underlying systemsupports or requires them yet others are available only when aparticular configuration option was chosen at the time when python wascompiled and installed
this manual is organized from the inside out it first describes thebuiltin functions data types and exceptions and finally themodules grouped in chapters of related modules
this means that if you start reading this manual from the start andskip to the next chapter when you get bored you will get a reasonableoverview of the available modules and application areas that aresupported by the python library
  of course you dont have to readit like a novel  you can also browse the table of contents infront of the manual or look for a specific function module or termin the index in the back
  and finally if you enjoy learning aboutrandom subjects you choose a random page number see module randomand read a section or two
  regardless of the order in which you readthe sections of this manual it helps to start with chapter builtinfunctions as the remainder of the manual assumes familiarity withthis material
let the show begin
notes on availability
 an availability unix note means that this function is commonly  found on unix systems
  it does not make any claims about its  existence on a specific operating system
 if not separately noted all functions that claim availability  unix are supported on mac os x which builds on a unix core
rlcompleter  completion function for gnu readline
source code librlcompleter
pythe rlcompleter module defines a completion function suitable forthe readline module by completing valid python identifiers andkeywords
when this module is imported on a unix platform with the readlinemodule available an instance of the completer class isautomatically created and its complete method is set as thereadline completer
example    import rlcompleter    import readline    readline
the rlcompleter module is designed for use with pythons interactivemode
  unless python is run with the s option the module isautomatically imported and configured see readline configuration
on platforms without readline the completer class defined by thismodule can still be used for custom purposes
completer objects
completer objects have the following methodcompleter
completetext state   return the stateth completion for text
   if called for text that doesnt include a period character   
 it will complete from names currently defined in   main builtins and keywords as defined by the keyword   module
   if called for a dotted name it will try to evaluate anything   without obvious sideeffects functions will not be evaluated but   it can generate calls to getattr up to the last part and   find matches for the rest via the dir function
  any exception   raised during the evaluation of the expression is caught silenced   and none is returned
abc  abstract base classes
readline  gnu readline interface
the readline module defines a number of functions to facilitatecompletion and readingwriting of history files from the pythoninterpreter
 this module can be used directly or via therlcompleter module which supports completion of python identifiersat the interactive prompt
  settings made using  this module affectthe behaviour of both the interpreters interactive prompt  and theprompts offered by the builtin input function
note  the underlying readline library api may be implemented by the  libedit library instead of gnu readline
 on macos the readline  module detects which library is being used at run time
the  configuration file for libedit is different from that of gnu  readline
 if you programmatically load configuration strings you can  check for the text libedit in readline
doc to differentiate  between gnu readline and libedit
if you use editlinelibedit  readline emulation on macos the initialization file located in your  home directory is named 
 for example the following  content in 
editrc will turn on vi keybindings and tab  completion     pythonbind v     pythonbind i rlcomplete
init file
the following functions relate to the init file and userconfigurationreadline
parseandbindstring   execute the init line provided in the string argument
 this calls   rlparseandbind in the underlying library
readinitfilefilename   execute a readline initialization file
 the default filename is the   last filename used
 this calls rlreadinitfile in the   underlying library
line buffer
history file
the following functions operate on a history filereadline
readhistoryfilefilename   load a readline history file and append it to the history list
   the default filename is 
  this calls readhistory   in the underlying library
writehistoryfilefilename   save the history list to a readline history file overwriting any   existing file
  the default filename is 
  this calls   writehistory in the underlying library
appendhistoryfilenelements filename   append the last nelements items of history to a file
  the   default filename is 
  the file must already exist
   this calls appendhistory in the underlying library
  this   function only exists if python was compiled for a version of the   library that supports it
   new in version 3
5
sethistorylengthlength   set or return the desired number of lines to save in the history   file
 the writehistoryfile function uses this value to   truncate the history file by calling historytruncatefile in   the underlying library
  negative values imply unlimited history   file size
history list
the following functions operate on a global history listreadline
clearhistory   clear the current history
  this calls clearhistory in the   underlying library
  the python function only exists if python was   compiled for a version of the library that supports it
getcurrenthistorylength   return the number of items currently in the history
  this is   different from gethistorylength which returns the maximum   number of lines that will be written to a history file
readline
gethistoryitemindex   return the current contents of history item at index
  the item   index is onebased
  this calls historyget in the underlying   library
removehistoryitempos   remove history item specified by its position from the history
 the   position is zerobased
  this calls removehistory in the   underlying library
replacehistoryitempos line   replace history item specified by its position with line
 the   position is zerobased
  this calls replacehistoryentry in   the underlying library
addhistoryline   append line to the history buffer as if it was the last line   typed
 this calls addhistory in the underlying library
setautohistoryenabled   enable or disable automatic calls to addhistory when reading   input via readline
  the enabled argument should be a boolean   value that when true enables auto history and that when false   disables auto history
   new in version 3
6
startup hooks
setstartuphookfunction   set or remove the function invoked by the rlstartuphook   callback of the underlying library
  if function is specified it   will be used as the new hook function if omitted or none any   function already installed is removed
  the hook is called with no   arguments just before readline prints the first prompt
setpreinputhookfunction   set or remove the function invoked by the rlpreinputhook   callback of the underlying library
  if function is specified it   will be used as the new hook function if omitted or none any   function already installed is removed
  the hook is called with no   arguments after the first prompt has been printed and just before   readline starts reading input characters
  this function only   exists if python was compiled for a version of the library that   supports it
completion
the following functions relate to implementing a custom wordcompletion function
  this is typically operated by the tab key andcan suggest and automatically complete a word being typed
  bydefault readline is set up to be used by rlcompleter to completepython identifiers for the interactive interpreter
  if the readlinemodule is to be used with a custom completer a different set of worddelimiters should be set
setcompleterfunction   set or remove the completer function
  if function is specified   it will be used as the new completer function if omitted or   none any completer function already installed is removed
  the   completer function is called as functiontext state for   state in 0 1 2 
 until it returns a nonstring value
   it should return the next possible completion starting with text
   the installed completer function is invoked by the entryfunc   callback passed to rlcompletionmatches in the underlying   library
 the text string comes from the first parameter to the   rlattemptedcompletionfunction callback of the underlying   library
getcompleter   get the completer function or none if no completer function has   been set
getcompletiontype   get the type of completion being attempted
  this returns the   rlcompletiontype variable in the underlying library as an   integer
getendidx   get the beginning or ending index of the completion scope
 these   indexes are the start and end arguments passed to the   rlattemptedcompletionfunction callback of the underlying   library
getcompleterdelims   set or get the word delimiters for completion
  these determine the   start of the word to be considered for completion the completion   scope
 these functions access the   rlcompleterwordbreakcharacters variable in the underlying   library
setcompletiondisplaymatcheshookfunction   set or remove the completion display function
  if function is   specified it will be used as the new completion display function   if omitted or none any completion display function already   installed is removed
  this sets or clears the   rlcompletiondisplaymatcheshook callback in the underlying   library
  the completion display function is called as   functionsubstitution matches longestmatchlength once each   time matches need to be displayed
example
the following example demonstrates how to use the readline moduleshistory reading and writing functions to automatically load and save ahistory file named 
pythonhistory from the users home directory
the code below would normally be executed automatically duringinteractive sessions from the users pythonstartup file
writehistoryfile histfilethis code is actually automatically run when python is run ininteractive mode see readline configuration
the following example achieves the same goal but supports concurrentinteractive sessions by only appending the new history
registersave hlen histfilethe following example extends the code
interactiveconsole class tosupport history saverestore
ms windows specific services
this chapter describes modules that are only available on ms windowsplatforms
 msilib  read and write microsoft installer files   database objects   view objects   summary information objects   record objects   errors   cab objects   directory objects   features   gui classes   precomputed tables msvcrt  useful routines from the ms vc runtime   file operations   console io   other functions winreg  windows registry access   functions   constants     hkey constants     access rights       64bit specific     value types   registry handle objects winsound  soundplaying interface for windows
base64  base16 base32 base64 base85 data encodings
getpass  portable password input
source code libgetpass
pythe getpass module provides two functionsgetpass
getpasspromptpassword  streamnone   prompt the user for a password without echoing
  the user is   prompted using the string prompt which defaults to password   
  on unix the prompt is written to the filelike object   stream using the replace error handler if needed
  stream   defaults to the controlling terminal devtty or if that is   unavailable to sys
stderr this argument is ignored on windows
   if echo free input is unavailable getpass falls back to printing   a warning message to stream and reading from sys
stdin and   issuing a getpasswarning
   note     if you call getpass from within idle the input may be done in     the terminal you launched idle from rather than the idle window     itself
getpasswarning   a userwarning subclass issued when password input may be echoed
getuser   return the login name of the user
   this function checks the environment variables logname user   lname and username in order and returns the value of the   first one which is set to a nonempty string
  if none are set the   login name from the password database is returned on systems which   support the pwd module otherwise an exception is raised
   in general this function should be preferred over os
getlogin
errno  standard errno system symbols
this module makes available standard errno system symbols
 the valueof each symbol is the corresponding integer value
 the names anddescriptions are borrowed from linuxincludeerrno
h which shouldbe pretty allinclusive
errorcode   dictionary providing a mapping from the errno value to the string   name in the underlying system
  for instance   errno
eperm maps to eperm
to translate a numeric error code to an error message useos
of the following list symbols that are not used on the currentplatform are not defined by the module
  the specific list of definedsymbols is available as errno
  symbols availablecan includeerrno
eperm   operation not permittederrno
enoent   no such file or directoryerrno
esrch   no such processerrno
eintr   interrupted system call
   see also this error is mapped to the exception interruptederror
eio   io errorerrno
enxio   no such device or addresserrno
e2big   arg list too longerrno
enoexec   exec format errorerrno
ebadf   bad file numbererrno
echild   no child processeserrno
eagain   try againerrno
enomem   out of memoryerrno
eacces   permission deniederrno
efault   bad addresserrno
enotblk   block device requirederrno
ebusy   device or resource busyerrno
eexist   file existserrno
exdev   crossdevice linkerrno
enodev   no such deviceerrno
enotdir   not a directoryerrno
eisdir   is a directoryerrno
einval   invalid argumenterrno
enfile   file table overflowerrno
emfile   too many open fileserrno
enotty   not a typewritererrno
etxtbsy   text file busyerrno
efbig   file too largeerrno
enospc   no space left on deviceerrno
espipe   illegal seekerrno
erofs   readonly file systemerrno
emlink   too many linkserrno
epipe   broken pipeerrno
edom   math argument out of domain of funcerrno
erange   math result not representableerrno
edeadlk   resource deadlock would occurerrno
enametoolong   file name too longerrno
enolck   no record locks availableerrno
enosys   function not implementederrno
enotempty   directory not emptyerrno
eloop   too many symbolic links encounterederrno
ewouldblock   operation would blockerrno
enomsg   no message of desired typeerrno
eidrm   identifier removederrno
echrng   channel number out of rangeerrno
el2nsync   level 2 not synchronizederrno
el3hlt   level 3 haltederrno
el3rst   level 3 reseterrno
elnrng   link number out of rangeerrno
eunatch   protocol driver not attachederrno
enocsi   no csi structure availableerrno
el2hlt   level 2 haltederrno
ebade   invalid exchangeerrno
ebadr   invalid request descriptorerrno
exfull   exchange fullerrno
enoano   no anodeerrno
ebadrqc   invalid request codeerrno
ebadslt   invalid sloterrno
edeadlock   file locking deadlock errorerrno
ebfont   bad font file formaterrno
enostr   device not a streamerrno
enodata   no data availableerrno
etime   timer expirederrno
enosr   out of streams resourceserrno
enonet   machine is not on the networkerrno
enopkg   package not installederrno
eremote   object is remoteerrno
enolink   link has been severederrno
eadv   advertise errorerrno
esrmnt   srmount errorerrno
ecomm   communication error on senderrno
eproto   protocol errorerrno
emultihop   multihop attemptederrno
edotdot   rfs specific errorerrno
ebadmsg   not a data messageerrno
eoverflow   value too large for defined data typeerrno
enotuniq   name not unique on networkerrno
ebadfd   file descriptor in bad stateerrno
eremchg   remote address changederrno
elibacc   can not access a needed shared libraryerrno
elibbad   accessing a corrupted shared libraryerrno
elibscn   
lib section in a
out corruptederrno
elibmax   attempting to link in too many shared librarieserrno
elibexec   cannot exec a shared library directlyerrno
eilseq   illegal byte sequenceerrno
erestart   interrupted system call should be restartederrno
estrpipe   streams pipe errorerrno
eusers   too many userserrno
enotsock   socket operation on nonsocketerrno
edestaddrreq   destination address requirederrno
emsgsize   message too longerrno
eprototype   protocol wrong type for socketerrno
enoprotoopt   protocol not availableerrno
eprotonosupport   protocol not supportederrno
esocktnosupport   socket type not supportederrno
eopnotsupp   operation not supported on transport endpointerrno
epfnosupport   protocol family not supportederrno
eafnosupport   address family not supported by protocolerrno
eaddrinuse   address already in useerrno
eaddrnotavail   cannot assign requested addresserrno
enetdown   network is downerrno
enetunreach   network is unreachableerrno
enetreset   network dropped connection because of reseterrno
econnaborted   software caused connection aborterrno
econnreset   connection reset by peererrno
enobufs   no buffer space availableerrno
eisconn   transport endpoint is already connectederrno
enotconn   transport endpoint is not connectederrno
eshutdown   cannot send after transport endpoint shutdownerrno
etoomanyrefs   too many references cannot spliceerrno
etimedout   connection timed outerrno
econnrefused   connection refusederrno
ehostdown   host is downerrno
ehostunreach   no route to hosterrno
ealready   operation already in progresserrno
einprogress   operation now in progresserrno
estale   stale nfs file handleerrno
euclean   structure needs cleaningerrno
enotnam   not a xenix named type fileerrno
enavail   no xenix semaphores availableerrno
eisnam   is a named type fileerrno
eremoteio   remote io errorerrno
edquot   quota exceeded
traceback  print or retrieve a stack traceback
source code libtraceback
pythis module provides a standard interface to extract format and printstack traces of python programs
  it exactly mimics the behavior ofthe python interpreter when it prints a stack trace
  this is usefulwhen you want to print stack traces under program control such as ina wrapper around the interpreter
the module uses traceback objects  this is the object type that isstored in the sys
lasttraceback variable and returned as the thirditem from sys
excinfo
the module defines the following functionstraceback
   changed in version 3
5 added negative limit support
printexceptionetype value tb limitnone filenone chaintrue   print exception information and stack trace entries from traceback   object tb to file
 this differs from printtb in the   following ways    if tb is not none it prints a header traceback most recent     call last    it prints the exception etype and value after the stack trace    if typevalue is syntaxerror and value has the appropriate     format it prints the line where the syntax error occurred with a     caret indicating the approximate position of the error
   changed in version 3
5 the etype argument is ignored and   inferred from the type of value
   changed in version 3
5 added negative limit support
   changed in version 3
5 the etype argument is ignored and   inferred from the type of value
   new in version 3
4
   new in version 3
5
   new in version 3
5
tracebackexception objects
new in version 3
5
stacksummary objects
new in version 3
5
      changed in version 3
6 long sequences of repeated frames are      now abbreviated
framesummary objects
new in version 3
5
traceback examples
re  regular expression operations
source code libre
pythis module provides regular expression matching operations similar tothose found in perl
both patterns and strings to be searched can be unicode stringsstr as well as 8bit strings bytes
 however unicode stringsand 8bit strings cannot be mixed that is you cannot match a unicodestring with a byte pattern or viceversa similarly when asking for asubstitution the replacement string must be of the same type as boththe pattern and the search string
regular expressions use the backslash character  to indicatespecial forms or to allow special characters to be used withoutinvoking their special meaning
  this collides with pythons usage ofthe same character for the same purpose in string literals forexample to match a literal backslash one might have to write as the pattern string because the regular expression must be and each backslash must be expressed as  inside a regularpython string literal
 also please note that any invalid escapesequences in pythons usage of the backslash in string literals nowgenerate a deprecationwarning and in the future this will become asyntaxerror
 this behaviour will happen even if it is a valid escapesequence for a regular expression
the solution is to use pythons raw string notation for regularexpression patterns backslashes are not handled in any special way ina string literal prefixed with r
  so rn is a twocharacterstring containing  and n while n is a onecharacterstring containing a newline
  usually patterns will be expressed inpython code using this raw string notation
it is important to note that most regular expression operations areavailable as modulelevel functions and methods on compiled regularexpressions
  the functions are shortcuts that dont require you tocompile a regex object first but miss some finetuning parameters
see also  the thirdparty regex module which has an api compatible with the  standard library re module but offers additional functionality  and a more thorough unicode support
regular expression syntax
module contents
regular expression objects
match objects
match objects always have a boolean value of true
 since matchand search return none when there is no match you can testwhether there was a match with a simple if statement   match  re
searchpattern string   if match       processmatchmatch objects support the following methods and attributesmatch
expandtemplate   return the string obtained by doing backslash substitution on the   template string template as done by the sub method
 escapes   such as n are converted to the appropriate characters and   numeric backreferences 1 2 and named backreferences   g1 gname are replaced by the contents of the   corresponding group
   changed in version 3
5 unmatched groups are replaced with an empty   string
   returns one or more subgroups of the match
  if there is a single   argument the result is a single string if there are multiple   arguments the result is a tuple with one item per argument
   without arguments group1 defaults to zero the whole match is   returned
 if a groupn argument is zero the corresponding return   value is the entire matching string if it is in the inclusive   range 1
99 it is the string matching the corresponding   parenthesized group
  if a group number is negative or larger than   the number of groups defined in the pattern an indexerror   exception is raised
 if a group is contained in a part of the   pattern that did not match the corresponding result is none
 if   a group is contained in a part of the pattern that matched multiple   times the last match is returned
       m  re
matchrw w isaac newton physicist       m
group0        the entire match      isaac newton       m
group1        the first parenthesized subgroup
      isaac       m
group2        the second parenthesized subgroup
      newton       m
group1 2     multiple arguments give us a tuple
      isaac newton   if the regular expression uses the pname
 syntax the   groupn arguments may also be strings identifying groups by their   group name
  if a string argument is not used as a group name in   the pattern an indexerror exception is raised
   a moderately complicated example       m  re
matchrpfirstnamew plastnamew malcolm reynolds       m
groupfirstname      malcolm       m
grouplastname      reynolds   named groups can also be referred to by their index       m
group1      malcolm       m
group2      reynolds   if a group matches multiple times only the last match is   accessible       m  re
matchr
 a1b2c3   matches 3 times
       m
group1                         returns only the last match
      c3match
getitemg   this is identical to m
groupg
  this allows easier access to an   individual group from a match       m  re
matchrw w isaac newton physicist       m0        the entire match      isaac newton       m1        the first parenthesized subgroup
      isaac       m2        the second parenthesized subgroup
      newton   new in version 3
6
match
groupsdefaultnone   return a tuple containing all the subgroups of the match from 1 up   to however many groups are in the pattern
  the default argument   is used for groups that did not participate in the match it   defaults to none
   for example       m  re
matchrd
d 24
1632       m
groups      24 1632   if we make the decimal place and everything after it optional not   all groups might participate in the match
  these groups will   default to none unless the default argument is given       m  re
matchrd
d 24       m
groups       second group defaults to none
      24 none       m
groups0    now the second group defaults to 0
      24 0match
groupdictdefaultnone   return a dictionary containing all the named subgroups of the   match keyed by the subgroup name
  the default argument is used   for groups that did not participate in the match it defaults to   none
  for example       m  re
matchrpfirstnamew plastnamew malcolm reynolds       m
groupdict      firstname malcolm lastname reynoldsmatch
startgroupmatch
endgroup   return the indices of the start and end of the substring matched by   group group defaults to zero meaning the whole matched   substring
 return 1 if group exists but did not contribute to   the match
  for a match object m and a group g that did   contribute to the match the substring matched by group g   equivalent to m
groupg is      m
endg   note that m
startgroup will equal m
endgroup if group   matched a null string
  for example after m  re
searchbc   cba m
start0 is 1 m
end0 is 2 m
start1 and   m
end1 are both 2 and m
start2 raises an indexerror   exception
   an example that will remove removethis from email addresses       email  tonytiremovethisger
spangroup   for a match m return the 2tuple m
startgroup   m
endgroup
 note that if group did not contribute to the   match this is 1 1
 group defaults to zero the entire   match
pos   the value of pos which was passed to the search or match   method of a regex object
  this is the index into the string at   which the re engine started looking for a match
endpos   the value of endpos which was passed to the search or   match method of a regex object
  this is the index into the   string beyond which the re engine will not go
lastindex   the integer index of the last matched capturing group or none if   no group was matched at all
 for example the expressions ab   ab and ab will have lastindex  1 if applied to   the string ab while the expression ab will have   lastindex  2 if applied to the same string
lastgroup   the name of the last matched capturing group or none if the   group didnt have a name or if no group was matched at all
re   the regular expression object whose match or search method   produced this match instance
string   the string passed to match or search
changed in version 3
7 added support of copy
copy andcopy
deepcopy
  match objects are considered atomic
regular expression examples
checking for a pair
in this example well use the following helper function to displaymatch objects a little more gracefully   def displaymatchmatch       if match is none           return none       return match r groupsr  match
groupssuppose you are writing a poker program where a players hand isrepresented as a 5character string with each character representing acard a for ace k for king q for queen j for jack t for10 and 2 through 9 representing the card with that value
to see if a given string is a valid hand one could do the following    valid  re
   match 727ak groupsthat last hand 727ak contained a pair or two of the same valuedcards
 to match this with a regular expression one could usebackreferences as such    pair  re
   match 354aa groupsato find out what card the pair consists of one could use thegroup method of the match object in the following manner    pair  re
simulating scanf
python does not currently have an equivalent to scanf
  regularexpressions are generally more powerful though also more verbosethan scanf format strings
  the table below offers some moreorless equivalent mappings between scanf format tokens and regularexpressions
 scanf token                   regular expression                             c                              
deed      i                              0xxdafaf007d          o                              07                                  s                              s                                          u                              d                                          x x                        0xxdafaf                    to extract the filename and numbers from a string like   usrsbinsendmail  0 errors 4 warningsyou would use a scanf format like   s  d errors d warningsthe equivalent regular expression would be   s  d errors d warnings
search vs match
making a phonebook
split splits a string into a list delimited by the passed pattern
the method is invaluable for converting textual data into datastructures that can be easily read and modified by python asdemonstrated in the following example that creates a phonebook
first here is the input
  normally it may come from a file here weare using triplequoted string syntax    text  ross mcfluff 834
4584 919 park placethe entries are separated by one or more newlines
 now we convert thestring into a list with each nonempty line having its own entry    entries  re
4584 919 park placefinally split each entry into a list with first name last nametelephone number and address
  we use the maxsplit parameter ofsplit because the address has spaces our splitting pattern init    re
4584 919 park placethe  pattern matches the colon after the last name so that itdoes not occur in the result list
  with a maxsplit of 4 we couldseparate the house number from the street name    re
text munging
sub replaces every occurrence of a pattern with a string or theresult of a function
  this example demonstrates using sub with afunction to munge text or randomize the order of all the charactersin each word of a sentence except for the first and last characters    def replm   
finding all adverbs
findall matches all occurrences of a pattern not just the firstone as search does
  for example if a writer wanted to find allof the adverbs in some text they might use findall in thefollowing manner    text  he was carefully disguised but captured quickly by police
finding all adverbs and their positions
if one wants more information about all matches of a pattern than thematched text finditer is useful as it provides match objectsinstead of strings
  continuing with the previous example if a writerwanted to find all of the adverbs and their positions in some textthey would use finditer in the following manner    text  he was carefully disguised but captured quickly by police
raw string notation
raw string notation rtext keeps regular expressions sane
without it every backslash  in a regular expression would haveto be prefixed with another one to escape it
  for example the twofollowing lines of code are functionally identical    re
match object span0 4 match ff when one wants to match a literal backslash it must be escaped in theregular expression
  with raw string notation this means r
without raw string notation one must use  making thefollowing lines of code functionally identical    re
writing a tokenizer
a tokenizer or scanner analyzes a string to categorize groups ofcharacters
  this is a useful first step in writing a compiler orinterpreter
the text categories are specified with regular expressions
  thetechnique is to combine those into a single master regular expressionand to loop over successive matches   from typing import namedtuple   import re   class tokennamedtuple       type str       value str       line int       column int   def tokenizecode       keywords  if then endif for next gosub return       tokenspecification             number   rd
05       endif      for token in tokenizestatements       printtokenthe tokenizer produces the following output   tokentypeif valueif line2 column4   tokentypeid valuequantity line2 column7   tokentypethen valuethen line2 column16   tokentypeid valuetotal line3 column8   tokentypeassign value line3 column14   tokentypeid valuetotal line3 column17   tokentypeop value line3 column23   tokentypeid valueprice line3 column25   tokentypeop value line3 column31   tokentypeid valuequantity line3 column33   tokentypeend value line3 column41   tokentypeid valuetax line4 column8   tokentypeassign value line4 column12   tokentypeid valueprice line4 column15   tokentypeop value line4 column21   tokentypenumber value0
 the third edition of the book no longer         covers python at all but the first edition covered writing         good regular expression patterns in great detail
htmlentities  definitions of html general entities
mailcap  mailcap file handling
source code libmailcap
pymailcap files are used to configure how mimeaware applications suchas mail readers and web browsers react to files with different mimetypes
 the name mailcap is derived from the phrase mailcapability
  for example a mailcap file might contain a line likevideompeg xmpeg s
  then if the user encounters an email messageor web document with the mime type videompeg s will be replacedby a filename usually one belonging to a temporary file and thexmpeg program can be automatically started to view the file
the mailcap format is documented in rfc 1524 a user agentconfiguration mechanism for multimedia mail format information butis not an internet standard
  however mailcap files are supported onmost unix systems
findmatchcaps mimetype keyview filenamedevnull plist   return a 2tuple the first element is a string containing the   command line to be executed which can be passed to os
system   and the second element is the mailcap entry for a given mime type
   if no matching mime type can be found none none is returned
   key is the name of the field desired which represents the type   of activity to be performed the default value is view since in   the  most common case you simply want to view the body of the mime   typed data
  other possible values might be compose and edit   if you wanted to create a new body of the given mime type or alter   the existing body data
  see rfc 1524 for a complete list of   these fields
   filename is the filename to be substituted for s in the   command line the default value is devnull which is almost   certainly not what you want so usually youll override it by   specifying a filename
   plist can be a list containing named parameters the default   value is simply an empty list
  each entry in the list must be a   string containing the parameter name an equals sign  and   the parameters value
  mailcap entries can contain  named   parameters like foo which will be replaced by the value of   the parameter named foo
  for example if the command line   showpartial id number total was in a mailcap file and   plist was set to id1 number2 total3 the resulting   command line would be showpartial 1 2 3
   in a mailcap file the test field can optionally be specified to   test some external condition such as the machine architecture or   the window system in use to determine whether or not the mailcap   line applies
  findmatch will automatically check such   conditions and skip the entry if the check fails
getcaps   returns a dictionary mapping mime types to a list of mailcap file   entries
 this dictionary must be passed to the findmatch   function
  an entry is stored as a list of dictionaries but it   shouldnt be necessary to know the details of this representation
   the information is derived from all of the mailcap files found on   the system
 settings in the users mailcap file home
mailcap   will override settings in the system mailcap files etcmailcap   usretcmailcap and usrlocaletcmailcap
an example usage    import mailcap    d  mailcap
pickletools  tools for pickle developers
source code libpickletools
pythis module contains various constants relating to the intimatedetails of the pickle module some lengthy comments about theimplementation and a few useful functions for analyzing pickled data
the contents of this module are useful for python core developers whoare working on the pickle ordinary users of the pickle moduleprobably wont find the pickletools module relevant
command line usage
new in version 3
2
when invoked from the command line python m pickletools willdisassemble the contents of one or more pickle files
  note that ifyou want to see the python object stored in the pickle rather than thedetails of pickle format you may want to use m pickle instead
however when the pickle file that you want to examine comes from anuntrusted source m pickletools is a safer option because it doesnot execute pickle bytecode
for example with a tuple 1 2 pickled in file x
pickle    python m pickle x
command line options
a annotate   annotate each line with a short opcode description
o outputfile   name of a file where the output should be written
l indentlevelnum   the number of blanks by which to indent a new mark level
m memo   when multiple objects are disassembled preserve memo between   disassemblies
p preamblepreamble   when more than one pickle file are specified print given preamble   before each disassembly
programmatic interface
dispickle outnone memonone indentlevel4 annotate0   outputs a symbolic disassembly of the pickle to the filelike   object out defaulting to sys
  pickle can be a string   or a filelike object
  memo can be a python dictionary that will   be used as the pickles memo it can be used to perform   disassemblies across multiple pickles created by the same pickler
   successive levels indicated by mark opcodes in the stream are   indented by indentlevel spaces
  if a nonzero value is given to   annotate each opcode in the output is annotated with a short   description
  the value of annotate is used as a hint for the   column where annotation should start
   new in version 3
2 the annotate argument
genopspickle   provides an iterator over all of the opcodes in a pickle   returning a sequence of opcode arg pos triples
  opcode is   an instance of an opcodeinfo class arg is the decoded value   as a python object of the opcodes argument pos is the position   at which this opcode is located
 pickle can be a string or a   filelike object
optimizepicklestring   returns a new equivalent pickle string after eliminating unused   put opcodes
 the optimized pickle is shorter takes less   transmission time requires less storage space and unpickles more   efficiently
imghdr  determine the type of an image
source code libimghdr
pythe imghdr module determines the type of image contained in a fileor byte stream
the imghdr module defines the following functionimghdr
whatfilename hnone   tests the image data contained in the file named by filename and   returns a string describing the image type
  if optional h is   provided the filename is ignored and h is assumed to contain   the byte stream to test
   changed in version 3
6 accepts a pathlike object
the following image types are recognized as listed below with thereturn value from what value         image format                         rgb       sgi imglib files                     gif       gif 87a and 89a files                pbm       portable bitmap files                pgm       portable graymap files               ppm       portable pixmap files                tiff      tiff files                           rast      sun raster files                     xbm       x bitmap files                       jpeg      jpeg data in jfif or exif formats    bmp       bmp files                            png       portable network graphics            webp      webp files                           exr       openexr files                       new in version 3
5 the exr and webp formats were added
you can extend the list of file types imghdr can recognize byappending to this variableimghdr
tests   a list of functions performing the individual tests
  each function   takes two arguments the bytestream and an open filelike object
   when what is called with a bytestream the filelike object   will be none
   the test function should return a string describing the image type   if the test succeeded or none if it failed
example    import imghdr    imghdr
argparse  parser for commandline options arguments and subcommands
new in version 3
2
source code libargparse
pytutorialthis page contains the api reference information
 for a more gentleintroduction to python commandline parsing have a look at theargparse tutorial
the argparse module makes it easy to write userfriendly commandline interfaces
 the program defines what arguments it requires andargparse will figure out how to parse those out of sys
argv
  theargparse module also automatically generates help and usage messagesand issues errors when users give the program invalid arguments
example
the following code is a python program that takes a list of integersand produces either the sum or the max   import argparse   parser  argparse
integersassuming the python code above is saved into a file called prog
pyit can be run at the command line and provides useful help messages    python prog
   positional arguments    n           an integer for the accumulator   optional arguments    h help  show this help message and exit    sum       sum the integers default find the maxwhen run with the appropriate arguments it prints either the sum orthe max of the commandline integers    python prog
py 1 2 3 4 sum   10if invalid arguments are passed in it will issue an error    python prog
py error argument n invalid int value athe following sections walk you through this example
creating a parser
the first step in using the argparse is creating an argumentparserobject    parser  argparse
the argumentparser object will hold all the information necessary toparse the command line into python data types
adding arguments
filling an argumentparser with information about program argumentsis done by making calls to the addargument method
 generallythese calls tell the argumentparser how to take the strings on thecommand line and turn them into objects
  this information is storedand used when parseargs is called
 for example    parser
                     helpsum the integers default find the maxlater calling parseargs will return an object with twoattributes integers and accumulate
  the integers attributewill be a list of one or more ints and the accumulate attributewill be either the sum function if sum was specified at thecommand line or the max function if it was not
parsing arguments
argumentparser parses arguments through the parseargs method
this will inspect the command line convert each argument to theappropriate type and then invoke the appropriate action
 in mostcases this means a simple namespace object will be built up fromattributes parsed out of the command line    parser
parseargssum 7 1 42   namespaceaccumulatebuiltin function sum integers7 1 42in a script parseargs will typically be called with noarguments and the argumentparser will automatically determine thecommandline arguments from sys
argv
argumentparser objects
prog
by default argumentparser objects use sys
argv0 to determinehow to display the name of the program in help messages
  this defaultis almost always desirable because it will make the help messagesmatch how the program was invoked on the command line
  for exampleconsider a file named myprogram
py with the following code   import argparse   parser  argparse
parseargsthe help for this program will display myprogram
py as the programname regardless of where the program was invoked from    python myprogram
py h foo foo   optional arguments    h help  show this help message and exit    foo foo   foo helpto change this default behavior another value can be supplied usingthe prog argument to argumentparser    parser  argparse
printhelp   usage myprogram h   optional arguments    h help  show this help message and exitnote that the program name whether determined from sys
argv0 orfrom the prog argument is available to help messages using theprogs format specifier
usage
by default argumentparser calculates the usage message from thearguments it contains    parser  argparse
   positional arguments    bar          bar help   optional arguments    h help   show this help message and exit    foo foo  foo helpthe default message can be overridden with the usage keywordargument    parser  argparse
printhelp   usage prog options   positional arguments    bar          bar help   optional arguments    h help   show this help message and exit    foo foo  foo helpthe progs format specifier is available to fill in the programname in your usage messages
description
most calls to the argumentparser constructor will use thedescription keyword argument
  this argument gives a briefdescription of what the program does and how it works
  in helpmessages the description is displayed between the commandline usagestring and the help messages for the various arguments    parser  argparse
py h   a foo that bars   optional arguments    h help  show this help message and exitby default the description will be linewrapped so that it fitswithin the given space
  to change this behavior see theformatterclass argument
epilog
parents
formatterclass
prefixchars
fromfileprefixchars
sometimes for example when dealing with a particularly long argumentlists it may make sense to keep the list of arguments in a filerather than typing it out at the command line
  if thefromfileprefixchars argument is given to the argumentparserconstructor then arguments that start with any of the specifiedcharacters will be treated as files and will be replaced by thearguments they contain
  for example    with openargs
txt   namespacefbararguments read from a file must by default be one per line but seealso convertarglinetoargs and are treated as if they were inthe same place as the original file referencing argument on thecommand line
  so in the example above the expression f fooargs
txt is considered equivalent to the expression ffoo f bar
the fromfileprefixchars argument defaults to none meaning thatarguments will never be treated as file references
argumentdefault
allowabbrev
normally when you pass an argument list to the parseargs methodof an argumentparser it recognizes abbreviations of long options
this feature can be disabled by setting allowabbrev to false    parser  argparse
parseargsfoon   usage prog h foobar foonley   prog error unrecognized arguments foonnew in version 3
5
conflicthandler
addhelp
exitonerror
normally when you pass an invalid argument list to the parseargsmethod of an argumentparser it will exit with error info
if the user would like catch errors manually the feature can beenable by setting exitonerror to false    parser  argparse
   catching an argumenterrornew in version 3
9
the addargument method
name or flags
the addargument method must know whether an optional argumentlike f or foo or a positional argument like a list offilenames is expected
  the first arguments passed toaddargument must therefore be either a series of flags or asimple argument name
  for example an optional argument could becreated like    parser
addargumentf foowhile a positional argument could be created like    parser
addargumentbarwhen parseargs is called optional arguments will be identifiedby the  prefix and the remaining arguments will be assumed to bepositional    parser  argparse
action
argumentparser objects associate commandline arguments withactions
  these actions can do just about anything with the commandline arguments associated with them though most actions simply add anattribute to the object returned by parseargs
  the actionkeyword argument specifies how the commandline arguments should behandled
 the supplied actions are store  this just stores the arguments value
  this is the  default action
 for example      parser  argparse
split     namespacefoo1 storeconst  this stores the value specified by the const  keyword argument
  the storeconst action is most commonly used  with optional arguments that specify some sort of flag
  for  example      parser  argparse
parseargsfoo     namespacefoo42 storetrue and storefalse  these are special cases of  storeconst used for storing the values true and false  respectively
  in addition they create default values of false  and true respectively
  for example      parser  argparse
split     namespacefootrue barfalse baztrue append  this stores a list and appends each argument value to  the list
  this is useful to allow an option to be specified  multiple times
 example usage      parser  argparse
split     namespacefoo1 2 appendconst  this stores a list and appends the value  specified by the const keyword argument to the list
  note that the  const keyword argument defaults to none
  the appendconst  action is typically useful when multiple arguments need to store  constants to the same list
 for example      parser  argparse
split     namespacetypesclass str class int count  this counts the number of times a keyword argument  occurs
 for example this is useful for increasing verbosity levels      parser  argparse
parseargsvvv     namespaceverbose3  note the default will be none unless explicitly set to 0
 help  this prints a complete help message for all the options  in the current parser and then exits
 by default a help action is  automatically added to the parser
 see argumentparser for details  of how the output is created
 version  this expects a version keyword argument in the  addargument call and prints version information and exits when  invoked      import argparse      parser  argparse
0 extend  this stores a list and extends each argument value to  the list
 example usage      parser  argparse
parseargsfoo f1 foo f2 f3 f4     namespacefoof1 f2 f3 f4  new in version 3
8
you may also specify an arbitrary action by passing an action subclassor other object that implements the same interface
 thebooleanoptionalaction is available in argparse and adds supportfor boolean actions such as foo and nofoo    import argparse    parser  argparse
parseargsnofoo   namespacefoofalsethe recommended way to create a custom action is to extend actionoverriding the call method and optionally the init andformatusage methods
an example of a custom action    class fooactionargparse
split   namespacebarnone foonone 1 none   namespacebar1 foonone 2 foo    args   namespacebar1 foo2for more details see action
nargs
const
the const argument of addargument is used to hold constantvalues that are not read from the command line but are required forthe various argumentparser actions
  the two most common uses of itare when addargument is called with actionstoreconst or  actionappendconst
  these actions add the const value to one  of the attributes of the object returned by parseargs
 see the  action description for examples
 when addargument is called with option strings like f or   foo and nargs
  this creates an optional argument that can  be followed by zero or one commandline arguments
 when parsing the  command line if the option string is encountered with no command  line argument following it the value of const will be assumed  instead
 see the nargs description for examples
with the storeconst and appendconst actions the constkeyword argument must be given
  for other actions it defaults tonone
default
type
choices
some commandline arguments should be selected from a restricted setof values
 these can be handled by passing a container object as thechoices keyword argument to addargument
  when the command lineis parsed argument values will be checked and an error message willbe displayed if the argument was not one of the acceptable values    parser  argparse
py error argument move invalid choice fire choose from rock   paper scissorsnote that inclusion in the choices container is checked after anytype conversions have been performed so the type of the objects inthe choices container should match the type specified    parser  argparse
py error argument door invalid choice 4 choose from 1 2 3any container can be passed as the choices value so list objectsset objects and custom containers are all supported
 this includesenum
enum which could be used to restrain arguments choices if wereuse previous rockpaperscissors game example this could be asfollows    from enum import enum    class gamemoveenum   
required
in general the argparse module assumes that flags like f and bar indicate optional arguments which can always be omitted at thecommand line
 to make an option required true can be specifiedfor the required keyword argument to addargument    parser  argparse
parseargs   usage h foo foo    error the following arguments are required fooas the example shows if an option is marked as requiredparseargs will report an error if that option is not present atthe command line
note  required options are generally considered bad form because users  expect options to be optional and thus they should be avoided  when possible
help
metavar
when argumentparser generates help messages it needs some way torefer to each expected argument
  by default argumentparser objectsuse the dest value as the name of each object
  by default forpositional argument actions the dest value is used directly and foroptional argument actions the dest value is uppercased
  so a singlepositional argument with destbar will be referred to as bar
 asingle optional argument foo that should be followed by a singlecommandline argument will be referred to as foo
  an example    parser  argparse
printhelp   usage  h foo foo bar   positional arguments    bar   optional arguments    h help  show this help message and exit    foo fooan alternative name can be specified with metavar    parser  argparse
printhelp   usage  h foo yyy xxx   positional arguments    xxx   optional arguments    h help  show this help message and exit    foo yyynote that metavar only changes the displayed name  the name ofthe attribute on the parseargs object is still determined by thedest value
different values of nargs may cause the metavar to be used multipletimes
 providing a tuple to metavar specifies a different displayfor each of the arguments    parser  argparse
dest
most argumentparser actions add some value as an attribute of theobject returned by parseargs
  the name of this attribute isdetermined by the dest keyword argument of addargument
  forpositional argument actions dest is normally supplied as the firstargument to addargument    parser  argparse
parseargsxxx   namespacebarxxxfor optional argument actions the value of dest is normallyinferred from the option strings
  argumentparser generates thevalue of dest by taking the first long option string and strippingaway the initial  string
  if no long option strings weresupplied dest will be derived from the first short option string bystripping the initial  character
  any internal  characters willbe converted to  characters to make sure the string is a validattribute name
  the examples below illustrate this behavior    parser  argparse
split   namespacefoobar1 x2dest allows a custom attribute name to be provided    parser  argparse
action classes
the parseargs method
parseargsargsnone namespacenone   convert argument strings to objects and assign them as attributes   of the namespace
  return the populated namespace
   previous calls to addargument determine exactly what objects   are created and how they are assigned
 see the documentation for   addargument for details
    args  list of strings to parse
  the default is taken from     sys
argv
    namespace  an object to take the attributes
  the default is a     new empty namespace object
option value syntax
the parseargs method supports several ways of specifying thevalue of an option if it takes one
  in the simplest case theoption and its value are passed as two separate arguments    parser  argparse
parseargsfoo foo   namespacefoofoo xnonefor long options options with names longer than a single characterthe option and value can also be passed as a single commandlineargument using  to separate them    parser
parseargsfoofoo   namespacefoofoo xnonefor short options options only one character long the option andits value can be concatenated    parser
parseargsxx   namespacefoonone xxseveral short options can be joined together using only a single prefix as long as only the last option or none of them requires avalue    parser  argparse
invalid arguments
while parsing the command line parseargs checks for a variety oferrors including ambiguous options invalid types invalid optionswrong number of positional arguments etc
  when it encounters such anerror it exits and prints the error along with a usage message    parser  argparse
arguments containing 
argument abbreviations prefix matching
the parseargs method by default allows long options to beabbreviated to a prefix if the abbreviation is unambiguous theprefix matches a unique option    parser  argparse
split   usage prog h bacon bacon badger badger   prog error ambiguous option ba could match badger baconan error is produced for arguments that could produce more than oneoptions
 this feature can be disabled by setting allowabbrev tofalse
beyond sysargv
sometimes it may be useful to have an argumentparser parse argumentsother than those of sys
argv
  this can be accomplished by passing alist of strings to parseargs
  this is useful for testing at theinteractive prompt    parser  argparse
the namespace object
namespace   simple class used by default by parseargs to create an object   holding attributes and return it
this class is deliberately simple just an object subclass with areadable string representation
 if you prefer to have dictlike viewof the attributes you can use the standard python idiom vars    parser  argparse
parseargsfoo bar    varsargs   foo barit may also be useful to have an argumentparser assign attributes toan already existing object rather than a new namespace object
this can be achieved by specifying the namespace keyword argument    class c   
other utilities
subcommands
filetype objects
filetypemoder bufsize1 encodingnone errorsnone   the filetype factory creates objects that can be passed to the   type argument of argumentparser
addargument
  arguments that   have filetype objects as their type will open commandline   arguments as files with the requested modes buffer sizes   encodings and error handling see the open function for more   details       parser  argparse
dat modewb   filetype objects understand the pseudoargument  and   automatically convert this into sys
stdin for readable filetype   objects and sys
stdout for writable filetype objects       parser  argparse
textiowrapper namestdin encodingutf8   new in version 3
4 the encodings and errors keyword arguments
argument groups
addargumentgrouptitlenone descriptionnone   by default argumentparser groups commandline arguments into   positional arguments and optional arguments when displaying   help messages
 when there is a better conceptual grouping of   arguments than this default one appropriate groups can be created   using the addargumentgroup method       parser  argparse
printhelp      usage prog foo foo bar      group        bar    bar help        foo foo  foo help   the addargumentgroup method returns an argument group object   which has an addargument method just like a regular   argumentparser
  when an argument is added to the group the   parser treats it just like a normal argument but displays the   argument in a separate group for help messages
  the   addargumentgroup method accepts title and description   arguments which can be used to customize this display       parser  argparse
printhelp      usage prog bar bar foo      group1        group1 description        foo    foo help      group2        group2 description        bar bar  bar help   note that any arguments not in your userdefined groups will end up   back in the usual positional arguments and optional arguments   sections
mutual exclusion
addmutuallyexclusivegrouprequiredfalse   create a mutually exclusive group
 argparse will make sure that   only one of the arguments in the mutually exclusive group was   present on the command line       parser  argparse
parseargsfoo bar      usage prog h foo  bar      prog error argument bar not allowed with argument foo   the addmutuallyexclusivegroup method also accepts a   required argument to indicate that at least one of the mutually   exclusive arguments is required       parser  argparse
parseargs      usage prog h foo  bar      prog error one of the arguments foo bar is required   note that currently mutually exclusive argument groups do not   support the title and description arguments of   addargumentgroup
parser defaults
setdefaultskwargs   most of the time the attributes of the object returned by   parseargs will be fully determined by inspecting the command   line arguments and the argument actions
  setdefaults allows   some additional attributes that are determined without any   inspection of the command line to be added       parser  argparse
parseargs736      namespacebar42 bazbadger foo736   note that parserlevel defaults always override argumentlevel   defaults       parser  argparse
parseargs      namespacefoospam   parserlevel defaults can be particularly useful when working with   multiple parsers
  see the addsubparsers method for an example   of this type
getdefaultdest   get the default value for a namespace attribute as set by either   addargument or by setdefaults       parser  argparse
printing help
in most typical applications parseargs will take care offormatting and printing any usage or error messages
  however severalformatting methods are availableargumentparser
printusagefilenone   print a brief description of how the argumentparser should be   invoked on the command line
  if file is none sys
stdout is   assumed
printhelpfilenone   print a help message including the program usage and information   about the arguments registered with the argumentparser
  if   file is none sys
stdout is assumed
there are also variants of these methods that simply return a stringinstead of printing itargumentparser
formatusage   return a string containing a brief description of how the   argumentparser should be invoked on the command line
formathelp   return a string containing a help message including the program   usage and information about the arguments registered with the   argumentparser
partial parsing
parseknownargsargsnone namespacenonesometimes a script may only parse a few of the commandline argumentspassing the remaining arguments on to another script or program
 inthese cases the parseknownargs method can be useful
  it worksmuch like parseargs except that it does not produce an error whenextra arguments are present
  instead it returns a two item tuplecontaining the populated namespace and the list of remaining argumentstrings
parseknownargsfoo badger bar spam   namespacebarbar footrue badger spamwarning  prefix matching rules apply to parseknownargs
 the parser may  consume an option even if its just a prefix of one of its known  options instead of leaving it in the remaining arguments list
customizing file parsing
convertarglinetoargsargline   arguments that are read from a file see the   fromfileprefixchars keyword argument to the argumentparser   constructor are read one argument per line
   convertarglinetoargs can be overridden for fancier reading
   this method takes a single argument argline which is a string   read from the argument file
  it returns a list of arguments parsed   from this string
 the method is called once per line read from the   argument file in order
   a useful override of this method is one that treats each space   separated word as an argument
  the following example demonstrates   how to do this      class myargumentparserargparse
exiting methods
exitstatus0 messagenone   this method terminates the program exiting with the specified   status and if given it prints a message before that
 the user   can override this method to handle these steps differently      class errorcatchingargumentparserargparse
errormessage   this method prints a usage message including the message to the   standard error and terminates the program with a status code of 2
intermixed parsing
parseknownintermixedargsargsnone namespacenonea number of unix commands allow the user to intermix optionalarguments with positional arguments
  the parseintermixedargsand parseknownintermixedargs methods support this parsingstyle
these parsers do not support all the argparse features and will raiseexceptions if unsupported features are used
  in particularsubparsers argparse
remainder and mutually exclusive groups thatinclude both optionals and positionals are not supported
the following example shows the difference betweenparseknownargs and parseintermixedargs the former returns2 3 as unparsed arguments while the latter collects all thepositionals into rest
split   namespacecmddoit foobar rest1 2 3parseknownintermixedargs returns a two item tuple containingthe populated namespace and the list of remaining argument strings
parseintermixedargs raises an error if there are any remainingunparsed argument strings
new in version 3
7
upgrading optparse code
unittest  unit testing framework
basic example
the unittest module provides a rich set of tools for constructingand running tests
  this section demonstrates that a small subset ofthe tools suffice to meet the needs of most users
here is a short script to test three string methods   import unittest   class teststringmethodsunittest
maina testcase is created by subclassing unittest
testcase
  the threeindividual tests are defined with methods whose names start with theletters test
  this naming convention informs the test runner aboutwhich methods represent tests
the crux of each test is a call to assertequal to check for anexpected result asserttrue or assertfalse to verify acondition or assertraises to verify that a specific exceptiongets raised
  these methods are used instead of the assert statementso the test runner can accumulate all test results and produce areport
the setup and teardown methods allow you to defineinstructions that will be executed before and after each test method
they are covered in more detail in the section organizing test code
the final block shows a simple way to run the tests
mainprovides a commandline interface to the test script
  when run fromthe command line the above script produces an output that looks likethis   
000s   okpassing the v option to your test script will instructunittest
main to enable a higher level of verbosity and producethe following output   testisupper main
001s   okthe above examples show the most commonly used unittest featureswhich are sufficient to meet many everyday testing needs
  theremainder of the documentation explores the full feature set fromfirst principles
commandline interface
commandline options
unittest supports these commandline optionsb buffer   the standard output and standard error streams are buffered during   the test run
 output during a passing test is discarded
 output is   echoed normally on test fail or error and is added to the failure   messages
c catch   controlc during the test run waits for the current test to end   and then reports all the results so far
 a second controlc   raises the normal keyboardinterrupt exception
   see signal handling for the functions that provide this   functionality
f failfast   stop the test run on the first error or failure
k   only run test methods and classes that match the pattern or   substring
 this option may be used multiple times in which case   all test cases that match of the given patterns are included
   patterns that contain a wildcard character  are matched   against the test name using fnmatch
fnmatchcase otherwise   simple casesensitive substring matching is used
   patterns are matched against the fully qualified test method name   as imported by the test loader
   for example k foo matches footests
testsomething   bartests
testfoo but not   bartests
testsomething
locals   show local variables in tracebacks
new in version 3
2 the commandline options b c and f wereadded
new in version 3
5 the commandline option locals
new in version 3
7 the commandline option k
the command line can also be used for test discovery for running allof the tests in a project or just a subset
test discovery
organizing test code
the basic building blocks of unit testing are test cases  singlescenarios that must be set up and checked for correctness
  inunittest test cases are represented by unittest
testcaseinstances
 to make your own test cases you must write subclasses oftestcase or use functiontestcase
the testing code of a testcase instance should be entirely selfcontained such that it can be run either in isolation or in arbitrarycombination with any number of other test cases
the simplest testcase subclass will simply implement a test methodi
e
 a method whose name starts with test in order to performspecific testing code   import unittest   class defaultwidgetsizetestcaseunittest
testcase       def testdefaultwidgetsizeself           widget  widgetthe widget           self
assertequalwidget
size 50 50note that in order to test something we use one of the assertmethods provided by the testcase base class
  if the test fails anexception will be raised with an explanatory message and unittestwill identify the test case as a failure
  any other exceptions willbe treated as errors
tests can be numerous and their setup can be repetitive
  luckilywe can factor out setup code by implementing a method calledsetup which the testing framework will automatically call forevery single test we run   import unittest   class widgettestcaseunittest
testcase       def setupself           self
widget  widgetthe widget       def testdefaultwidgetsizeself           self
assertequalself
widget
size 5050                            incorrect default size       def testwidgetresizeself           self
widget
resize100150           self
assertequalself
widget
size 100150                            wrong size after resizenote  the order in which the various tests will be run is determined by  sorting the test method names with respect to the builtin ordering  for strings
if the setup method raises an exception while the test is runningthe framework will consider the test to have suffered an error andthe test method will not be executed
similarly we can provide a teardown method that tidies up afterthe test method has been run   import unittest   class widgettestcaseunittest
disposeif setup succeeded teardown will be run whether the testmethod succeeded or not
such a working environment for the testing code is called a testfixture
  a new testcase instance is created as a unique test fixtureused to execute each individual test method
  thus setupteardown and init will be called once per test
it is recommended that you use testcase implementations to group teststogether according to the features they test
  unittest provides amechanism for this the test suite represented by unitteststestsuite class
  in most cases calling unittest
main will dothe right thing and collect all the modules test cases for you andexecute them
however should you want to customize the building of your test suiteyou can do it yourself   def suite       suite  unittest
reusing old test code
some users will find that they have existing test code that they wouldlike to run from unittest without converting every old testfunction to a testcase subclass
for this reason unittest provides a functiontestcase class
 thissubclass of testcase can be used to wrap an existing test function
setup and teardown functions can also be provided
given the following test function   def testsomething       something  makesomething       assert something
name is not none        
one can create an equivalent test case instance as follows withoptional setup and teardown methods   testcase  unittest
functiontestcasetestsomething                                        setupmakesomethingdb                                        teardowndeletesomethingdbnote  even though functiontestcase can be used to quickly convert an  existing test base over to a unittestbased system this approach  is not recommended
skipping tests and expected failures
distinguishing test iterations using subtests
new in version 3
4
for example the following test   class numberstestunittest
assertequali  2 0will produce the following output      fail testeven main
classes and functions
this section describes in depth the api of unittest
test cases
grouping tests
      changed in version 3
2 in earlier versions the testsuite      accessed tests directly rather than through iteration so      overriding iter wasnt sufficient for providing tests
      changed in version 3
4 in earlier versions the testsuite held      references to each testcase after testsuite
loading and running tests
      new in version 3
5
      note        while using a hierarchy of testcasederived classes can be        convenient in sharing fixtures and helper functions defining        test methods on base classes that are not intended to be        instantiated directly does not play well with this method
      changed in version 3
2 support for loadtests added
      changed in version 3
5 the undocumented and unofficial      useloadtests default argument is deprecated and ignored      although it is still accepted for backward compatibility
  the      method also now accepts a keywordonly argument pattern which      is passed to loadtests as the third argument
      changed in version 3
5 if an importerror or attributeerror      occurs while traversing name then a synthetic test that raises      that error when run will be returned
 these errors are included      in the errors accumulated by self
      new in version 3
2
      changed in version 3
4 modules that raise skiptest on import      are recorded as skips   not errors
 discovery works for      namespace packages
 paths are sorted before being imported so      that execution order is   the same even if the underlying file      systems ordering is not   dependent on file name
      changed in version 3
5 found packages are now checked for      loadtests regardless of whether their path matches pattern      because it is impossible for a package name to match the default      pattern
      new in version 3
7
      new in version 3
1
      new in version 3
2
      new in version 3
2
      new in version 3
5
      changed in version 3
4 returns false if there were any      unexpectedsuccesses from tests marked with the      expectedfailure decorator
      new in version 3
1
      new in version 3
1
      new in version 3
4
   new in version 3
2 this class was previously named   texttestresult
 the old name still exists as an alias but is   deprecated
   changed in version 3
2 added the warnings argument
   changed in version 3
2 the default stream is set to sys
stderr   at instantiation time rather than import time
   changed in version 3
5 added the tblocals parameter
   changed in version 3
1 the exit parameter was added
   changed in version 3
2 the verbosity failfast catchbreak   buffer and warnings parameters were added
   changed in version 3
4 the defaulttest parameter was changed to   also accept an iterable of test names
loadtests protocolnew in version 3
2
addtestspackagetests       return standardtestschanged in version 3
5 discovery no longer checks package names formatching pattern due to the impossibility of package names matchingthe default pattern
class and module fixtures
setupclass and teardownclass
setupmodule and teardownmodule
   new in version 3
8
   new in version 3
8
signal handling
new in version 3
2
subprocess  subprocess management
source code libsubprocess
pythe subprocess module allows you to spawn new processes connect totheir inputoutputerror pipes and obtain their return codes
  thismodule intends to replace several older modules and functions   os
spawninformation about how the subprocess module can be used to replacethese modules and functions can be found in the following sections
see also pep 324  pep proposing the subprocess module
using the subprocess module
frequently used arguments
popen constructor
exceptions
exceptions raised in the child process before the new program hasstarted to execute will be reraised in the parent
the most common exception raised is oserror
  this occurs forexample when trying to execute a nonexistent file
  applicationsshould prepare for oserror exceptions
a valueerror will be raised if popen is called with invalidarguments
checkcall and checkoutput will raise calledprocesserror ifthe called process returns a nonzero return code
all of the functions and methods that accept a timeout parametersuch as call and popen
communicate will raise timeoutexpiredif the timeout expires before the process exits
exceptions defined in this module all inherit from subprocesserror
   new in version 3
3 the subprocesserror base class was added
security considerations
unlike some other popen functions this implementation will neverimplicitly call a system shell
  this means that all charactersincluding shell metacharacters can safely be passed to childprocesses
 if the shell is invoked explicitly via shelltrue it isthe applications responsibility to ensure that all whitespace andmetacharacters are quoted appropriately to avoid shell injectionvulnerabilities
when using shelltrue the shlex
quote function can be used toproperly escape whitespace and shell metacharacters in strings thatare going to be used to construct shell commands
popen objects
windows popen helpers
windows constants
older highlevel api
replacing older functions with the subprocess module
in this section a becomes b means that b can be used as areplacement for a
note  all a functions in this section fail more or less silently if  the executed program cannot be found the b replacements raise  oserror instead
in addition the replacements using  checkoutput will fail with a calledprocesserror if the  requested operation produces a nonzero return code
 the output is  still available as the output attribute of the raised exception
in the following examples we assume that the relevant functions havealready been imported from the subprocess module
replacing binsh shell command substitution
outputmycmd myargbecomes   output  checkoutputmycmd myarg
replacing shell pipeline
outputdmesg  grep hdabecomes   p1  popendmesg stdoutpipe   p2  popengrep hda stdinp1
communicate0the p1
close call after starting the p2 is important inorder for p1 to receive a sigpipe if p2 exits before p1
alternatively for trusted input the shells own pipeline support maystill be used directly   outputdmesg  grep hdabecomes   outputcheckoutputdmesg  grep hda shelltrue
replacing ossystem
systemmycmd   myarg    becomes   sts  callmycmd   myarg shelltruenotes calling the program through the shell is usually not required
a more realistic example would look like this   try       retcode  callmycmd   myarg shelltrue       if retcode  0           printchild was terminated by signal retcode filesys
replacing the osspawn family
pnowait example   pid  os
pidpwait example   retcode  os
pwait binmycmd mycmd myarg      retcode  callbinmycmd myargvector example   os
pnowait path args      popenpath  args1environment example   os
replacing ospopen ospopen2 ospopen3
stdoutreturn code handling translates as follows   pipe  os
replacing functions from the popen2 module
note  if the cmd argument to popen2 functions is a string the command is  executed through binsh
  if it is a list the command is directly  executed
popen3 and popen2
popen4 basically work assubprocess
popen except that popen raises an exception if the execution fails
 the capturestderr argument is replaced with the stderr argument
 stdinpipe and stdoutpipe must be specified
 popen2 closes all file descriptors by default but you have to  specify closefdstrue with popen to guarantee this behavior on  all platforms or past python versions
legacy shell invocation functions
this module also provides the following legacy functions from the 2
xcommands module
 these operations implicitly invoke the system shelland none of the guarantees described above regarding security andexception handling consistency are valid for these functions
getstatusoutputcmd   return exitcode output of executing cmd in a shell
   execute the string cmd in a shell with popen
checkoutput and   return a 2tuple exitcode output
 the locale encoding is used   see the notes on frequently used arguments for more details
   a trailing newline is stripped from the output
 the exit code for   the command can be interpreted as the return code of subprocess
   example       subprocess
getstatusoutputbinkill       15    availability posix  windows
   changed in version 3
4 windows support was added
the function   now returns exitcode output instead of status output as it   did in python 3
3 and earlier
  exitcode has the same value as   returncode
getoutputcmd   return output stdout and stderr of executing cmd in a shell
   like getstatusoutput except the exit code is ignored and the   return value is a string containing the commands output
  example       subprocess
getoutputls binls      binls   availability posix  windows
   changed in version 3
4 windows support added
notes
converting an argument sequence to a string on windows
on windows an args sequence is converted to a string that can beparsed using the following rules which correspond to the rules usedby the ms c runtime1
 arguments are delimited by white space which is either a space or   a tab
 a string surrounded by double quotation marks is interpreted as a   single argument regardless of white space contained within
  a   quoted string can be embedded in an argument
 a double quotation mark preceded by a backslash is interpreted as a   literal double quotation mark
 backslashes are interpreted literally unless they immediately   precede a double quotation mark
 if backslashes immediately precede a double quotation mark every   pair of backslashes is interpreted as a literal backslash
  if the   number of backslashes is odd the last backslash escapes the next   double quotation mark as described in rule 3
see also  shlex     module which provides function to parse and escape command lines
builtin constants
constants added by the site module
the site module which is imported automatically during startupexcept if the s commandline option is given adds severalconstants to the builtin namespace
  they are useful for theinteractive interpreter shell and should not be used in programs
quitcodenoneexitcodenone   objects that when printed print a message like use quit or   ctrld i
 eof to exit and when called raise systemexit   with the specified exit code
copyrightcredits   objects that when printed or called print the text of copyright or   credits respectively
license   object that when printed prints the message type license to see   the full license text and when called displays the full license   text in a pagerlike fashion one screen at a time
faulthandler  dump the python traceback
new in version 3
3
dumping the traceback
   changed in version 3
5 added support for passing file descriptor   to this function
fault handler state
   changed in version 3
5 added support for passing file descriptor   to this function
   changed in version 3
6 on windows a handler for windows exception   is also installed
dumping the tracebacks after a timeout
   changed in version 3
7 this function is now always available
   changed in version 3
5 added support for passing file descriptor   to this function
dumping the traceback on a user signal
   changed in version 3
5 added support for passing file descriptor   to this function
issue with file descriptors
example
development tools
the modules described in this chapter help you write software
  forexample the pydoc module takes a module and generates documentationbased on the modules contents
  the doctest and unittest modulescontains frameworks for writing unit tests that automatically exercisecode and verify that the expected output is produced
  2to3 cantranslate python 2
x source code into valid python 3
x code
the list of modules described in this chapter is typing  support for type hints   type aliases   newtype   callable   generics   userdefined generic types   the any type   nominal vs structural subtyping   module contents     special typing primitives       special types       special forms       building generic types       other special directives     generic concrete collections       corresponding to builtin types       corresponding to types in collections       other concrete types     abstract base classes       corresponding to collections in collections
abc       asynchronous programming       context manager types     protocols     functions and decorators     introspection helpers     constant pydoc  documentation generator and online help system python development mode effects of the python development mode resourcewarning example bad file descriptor error example doctest  test interactive python examples   simple usage checking examples in docstrings   simple usage checking examples in a text file   how it works     which docstrings are examined     how are docstring examples recognized     whats the execution context     what about exceptions     option flags     directives     warnings   basic api   unittest api   advanced api     doctest objects     example objects     doctestfinder objects     doctestparser objects     doctestrunner objects     outputchecker objects   debugging   soapbox unittest  unit testing framework   basic example   commandline interface     commandline options   test discovery   organizing test code   reusing old test code   skipping tests and expected failures   distinguishing test iterations using subtests   classes and functions     test cases       deprecated aliases     grouping tests     loading and running tests       loadtests protocol   class and module fixtures     setupclass and teardownclass     setupmodule and teardownmodule   signal handling unittest
mock  mock object library   quick guide   the mock class     calling     deleting attributes     mock names and the name attribute     attaching mocks as attributes   the patchers     patch     patch
mock  getting started   using mock     mock patching methods     mock for method calls on an object     mocking classes     naming your mocks     tracking all calls     setting return values and attributes     raising exceptions with mocks     side effect functions and iterables     mocking asynchronous iterators     mocking asynchronous context manager     creating a mock from an existing object   patch decorators   further examples     mocking chained calls     partial mocking     mocking a generator method     applying the same patch to every test method     mocking unbound methods     checking multiple calls with mock     coping with mutable arguments     nesting patches     mocking a dictionary with magicmock     mock subclasses and their attributes     mocking imports with patch
dict     tracking order of calls and less verbose call assertions     more complex argument matching 2to3  automated python 2 to 3 code translation   using 2to3   fixers   lib2to3  2to3s library test  regression tests package for python   writing unit tests for the test package   running tests using the commandline interface test
file and directory access
the modules described in this chapter deal with disk files anddirectories
  for example there are modules for reading theproperties of files manipulating paths in a portable way andcreating temporary files
  the full list of modules in this chapteris pathlib  objectoriented filesystem paths   basic use   pure paths     general properties     operators     accessing individual parts     methods and properties   concrete paths     methods   correspondence to tools in the os module os
path  common pathname manipulations fileinput  iterate over lines from multiple input streams stat  interpreting stat results filecmp  file and directory comparisons   the dircmp class tempfile  generate temporary files and directories   examples   deprecated functions and variables glob  unix style pathname pattern expansion fnmatch  unix filename pattern matching linecache  random access to text lines shutil  highlevel file operations   directory and files operations     platformdependent efficient copy operations     copytree example     rmtree example   archiving operations     archiving example     archiving example with basedir   querying the size of the output terminalsee also  module os     operating system interfaces including functions to work with     files at a lower level than python file objects
  module io     pythons builtin io library including both abstract classes     and some concrete classes such as file io
  builtin function open     the standard way to open files for reading and writing with     python
urllib  url handling modules
source code liburlliburllib is a package that collects several modules for working withurls urllib
request for opening and reading urls urllib
error containing the exceptions raised by urllib
request urllib
parse for parsing urls urllib
robotparser for parsing robots
txt files
modulefinder  find modules used by a script
source code libmodulefinder
pythis module provides a modulefinder class that can be used todetermine the set of modules imported by a script
 modulefinder
pycan also be run as a script giving the filename of a python script asits argument after which a report of the imported modules will beprinted
addpackagepathpkgname path   record that the package named pkgname can be found in the   specified path
replacepackageoldname newname   allows specifying that the module named oldname is in fact the   package named newname
modulefinderpathnone debug0 excludes replacepaths   this class provides runscript and report methods to   determine the set of modules imported by a script
 path can be a   list of directories to search for modules if not specified   sys
path is used
  debug sets the debugging level higher   values make the class print debugging messages about what its   doing
 excludes is a list of module names to exclude from the   analysis
 replacepaths is a list of oldpath newpath tuples   that will be replaced in module paths
   report      print a report to standard output that lists the modules      imported by the script and their paths as well as modules that      are missing or seem to be missing
   runscriptpathname      analyze the contents of the pathname file which must contain      python code
   modules      a dictionary mapping module names to modules
 see example usage      of modulefinder
example usage of modulefinder
the script that is going to get analyzed later on bacon
py   import re itertools   try       import baconhameggs   except importerror       pass   try       import guido
ham   except importerror       passthe script that will output the report of bacon
py   from modulefinder import modulefinder   finder  modulefinder   finder
keyssample output may vary depending on the architecture   loaded modules   types   copyreg  invertedregistryslotnamesall   srecompile  isstringsreoptimizeunicode   sre   sreconstants  repeatonemakedictatendline   sys   re  modulefinditerexpand   itertools   main  reitertoolsbaconhameggs   sreparse  patternenderssreflagunicode   array   types  moduleinttypetypetype      modules not imported   guido
signal  set handlers for asynchronous events
this module provides mechanisms to use signal handlers in python
general rules
the signal
signal function allows defining custom handlers to beexecuted when a signal is received
  a small number of defaulthandlers are installed sigpipe is ignored so write errors on pipesand sockets can be reported as ordinary python exceptions andsigint is translated into a keyboardinterrupt exception if theparent process has not changed it
a handler for a particular signal once set remains installed untilit is explicitly reset python emulates the bsd style interfaceregardless of the underlying implementation with the exception ofthe handler for sigchld which follows the underlyingimplementation
execution of python signal handlers
a python signal handler does not get executed inside the lowlevel csignal handler
  instead the lowlevel signal handler sets a flagwhich tells the virtual machine to execute the corresponding pythonsignal handler at a later pointfor example at the next bytecodeinstruction
 this has consequences it makes little sense to catch synchronous errors like sigfpe or  sigsegv that are caused by an invalid operation in c code
  python  will return from the signal handler to the c code which is likely  to raise the same signal again causing python to apparently hang
  from python 3
3 onwards you can use the faulthandler module to  report on synchronous errors
 a longrunning calculation implemented purely in c such as regular  expression matching on a large body of text may run uninterrupted  for an arbitrary amount of time regardless of any signals received
  the python signal handlers will be called when the calculation  finishes
signals and threads
module contents
changed in version 3
5 signal sig handler sigdfl sigignand sigmask sigblock sigunblock sigsetmask relatedconstants listed below were turned into enums
 getsignalpthreadsigmask sigpending and sigwait functions returnhumanreadable enums
the variables defined in the signal module aresignal
sigdfl   this is one of two standard signal handling options it will simply   perform the default function for the signal
  for example on most   systems the default action for sigquit is to dump core and exit   while the default action for sigchld is to simply ignore it
sigign   this is another standard signal handler which will simply ignore   the given signal
   availability windows
   availability windows
   see also     zerodivisionerror is raised when the second argument of a     division or modulo operation is zero
ctrlcevent   the signal corresponding to the ctrlc keystroke event
 this   signal can only be used with os
kill
   availability windows
   new in version 3
2
ctrlbreakevent   the signal corresponding to the ctrlbreak keystroke event
 this   signal can only be used with os
kill
   availability windows
   new in version 3
2
nsig   one more than the number of the highest signal number
itimerreal   decrements interval timer in real time and delivers sigalrm upon   expiration
itimervirtual   decrements interval timer only when the process is executing and   delivers sigvtalrm upon expiration
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3 this error used to be a subtype of ioerror   which is now an alias of oserror
   new in version 3
8
   new in version 3
8
   new in version 3
8
1   new in version 3
9
   new in version 3
3
   new in version 3
3
   changed in version 3
5 on windows the function now also supports   socket handles
   changed in version 3
7 added warnonfullbuffer parameter
   new in version 3
3
   new in version 3
3
   new in version 3
3
   changed in version 3
5 the function is now retried if interrupted   by a signal not in sigset and the signal handler does not raise   an exception see pep 475 for the rationale
   new in version 3
3
   changed in version 3
5 the function is now retried with the   recomputed timeout if interrupted by a signal not in sigset and   the signal handler does not raise an exception see pep 475 for   the rationale
example
note on sigpipe
event loop
event loop methods
running and stopping the loop
rununtilcompletefuture   run until the future an instance of future has completed
   if the argument is a coroutine object it is implicitly scheduled to   run as a asyncio
task
   return the futures result or raise its exception
runforever   run the event loop until stop is called
   if stop is called before runforever is called the loop   will poll the io selector once with a timeout of zero run all   callbacks scheduled in response to io events and those that were   already scheduled and then exit
   if stop is called while runforever is running the loop   will run the current batch of callbacks and then exit
 note that   new callbacks scheduled by callbacks will not run in this case   instead they will run the next time runforever or   rununtilcomplete is called
stop   stop the event loop
isrunning   return true if the event loop is currently running
isclosed   return true if the event loop was closed
close   close the event loop
   the loop must not be running when this function is called
 any   pending callbacks will be discarded
   this method clears all queues and shuts down the executor but does   not wait for the executor to finish
   this method is idempotent and irreversible
  no other methods   should be called after the event loop is closed
shutdownasyncgens   schedule all currently open asynchronous generator objects to   close with an aclose call
  after calling this method the   event loop will issue a warning if a new asynchronous generator is   iterated
 this should be used to reliably finalize all scheduled   asynchronous generators
   note that there is no need to call this function when   asyncio
run is used
   example      try          loop
close   new in version 3
6
shutdowndefaultexecutor   schedule the closure of the default executor and wait for it to   join all of the threads in the threadpoolexecutor
 after calling   this method a runtimeerror will be raised if   loop
runinexecutor is called while using the default   executor
   note that there is no need to call this function when   asyncio
run is used
   new in version 3
9
scheduling callbacks
callsooncallback args contextnone   schedule the callback callback to be called with args   arguments at the next iteration of the event loop
   callbacks are called in the order in which they are registered
   each callback will be called exactly once
   an optional keywordonly context argument allows specifying a   custom contextvars
context for the callback to run in
 the   current context is used when no context is provided
   an instance of asyncio
handle is returned which can be used   later to cancel the callback
   this method is not threadsafe
callsoonthreadsafecallback args contextnone   a threadsafe variant of callsoon
  must be used to schedule   callbacks from another thread
   see the concurrency and multithreading section of the   documentation
changed in version 3
7 the context keywordonly parameter wasadded
 see pep 567 for more details
note  most asyncio scheduling functions dont allow passing keyword  arguments
  to do that use functools
partial      will schedule printhello flushtrue     loop
partialprint hello flushtrue  using partial objects is usually more convenient than using lambdas  as asyncio can render partial objects better in debug and error  messages
scheduling delayed callbacks
event loop provides mechanisms to schedule callback functions to becalled at some point in the future
  event loop uses monotonic clocksto track time
calllaterdelay callback args contextnone   schedule callback to be called after the given delay number of   seconds can be either an int or a float
   an instance of asyncio
timerhandle is returned which can be used   to cancel the callback
   callback will be called exactly once
  if two callbacks are   scheduled for exactly the same time the order in which they are   called is undefined
   the optional positional args will be passed to the callback when   it is called
 if you want the callback to be called with keyword   arguments use functools
partial
   an optional keywordonly context argument allows specifying a   custom contextvars
context for the callback to run in
 the   current context is used when no context is provided
   changed in version 3
7 the context keywordonly parameter was   added
 see pep 567 for more details
   changed in version 3
8 in python 3
7 and earlier with the default   event loop implementation the delay could not exceed one day
   this has been fixed in python 3
8
callatwhen callback args contextnone   schedule callback to be called at the given absolute timestamp   when an int or a float using the same time reference as   loop
time
   this methods behavior is the same as calllater
   an instance of asyncio
timerhandle is returned which can be used   to cancel the callback
   changed in version 3
7 the context keywordonly parameter was   added
 see pep 567 for more details
   changed in version 3
8 in python 3
7 and earlier with the default   event loop implementation the difference between when and the   current time could not exceed one day
  this has been fixed in   python 3
8
time   return the current time as a float value according to the event   loops internal monotonic clock
note  changed in version 3
8 in python 3
7 and earlier timeouts relative  delay or absolute when should not exceed one day
  this has  been fixed in python 3
8
see also the asyncio
sleep function
creating futures and tasks
createfuture   create an asyncio
future object attached to the event loop
   this is the preferred way to create futures in asyncio
 this lets   thirdparty event loops provide alternative implementations of the   future object with better performance or instrumentation
   new in version 3
2
createtaskcoro  namenone   schedule the execution of a coroutines
 return a task object
   thirdparty event loops can use their own subclass of task for   interoperability
 in this case the result type is a subclass of   task
   if the name argument is provided and not none it is set as the   name of the task using task
setname
   changed in version 3
8 added the name parameter
settaskfactoryfactory   set a task factory that will be used by loop
createtask
   if factory is none the default task factory will be set
   otherwise factory must be a callable with the signature   matching loop coro where loop is a reference to the active   event loop and coro is a coroutine object
  the callable must   return a asyncio
futurecompatible object
gettaskfactory   return a task factory or none if the default one is in use
opening network connections
creating network servers
aipassive socknone backlog100 sslnone reuseaddressnone reuseportnone sslhandshaketimeoutnone startservingtrue   create a tcp server socket type sockstream listening on port   of the host address
   returns a server object
   arguments    protocolfactory must be a callable returning a protocol     implementation
    the host parameter can be set to several types which determine     where the server would be listening      if host is a string the tcp server is bound to a single       network interface specified by host
      if host is a sequence of strings the tcp server is bound to       all network interfaces specified by the sequence
      if host is an empty string or none all interfaces are       assumed and a list of multiple sockets will be returned most       likely one for ipv4 and another one for ipv6
    family can be set to either socket
afinet or afinet6 to     force the socket to use ipv4 or ipv6
 if not set the family     will be determined from host name defaults to afunspec
    flags is a bitmask for getaddrinfo
    sock can optionally be specified in order to use a preexisting     socket object
 if specified host and port must not be     specified
    backlog is the maximum number of queued connections passed to     listen defaults to 100
    ssl can be set to an sslcontext instance to enable tls over     the accepted connections
    reuseaddress tells the kernel to reuse a local socket in     timewait state without waiting for its natural timeout to     expire
 if not specified will automatically be set to true on     unix
    reuseport tells the kernel to allow this endpoint to be bound     to the same port as other existing endpoints are bound to so     long as they all set this flag when being created
 this option is     not supported on windows
    sslhandshaketimeout is for a tls server the time in seconds     to wait for the tls handshake to complete before aborting the     connection
 60
0 seconds if none default
    startserving set to true the default causes the created     server to start accepting connections immediately
  when set to     false the user should await on server
startserving or     server
serveforever to make the server to start accepting     connections
   new in version 3
7 added sslhandshaketimeout and   startserving parameters
   changed in version 3
6 the socket option tcpnodelay is set by   default for all tcp connections
   changed in version 3
5 added support for ssltls in   proactoreventloop
   changed in version 3
1 the host parameter can be a sequence of   strings
   see also     the startserver function is a higherlevel alternative api     that returns a pair of streamreader and streamwriter that can     be used in an asyncawait code
createunixserverprotocolfactory pathnone  socknone backlog100 sslnone sslhandshaketimeoutnone startservingtrue   similar to loop
createserver but works with the afunix   socket family
   path is the name of a unix domain socket and is required unless   a sock argument is provided
  abstract unix sockets str   bytes and path paths are supported
   see the documentation of the loop
createserver method for   information about arguments to this method
   availability unix
   new in version 3
7 the sslhandshaketimeout and startserving   parameters
   changed in version 3
7 the path parameter can now be a path   object
connectacceptedsocketprotocolfactory sock  sslnone sslhandshaketimeoutnone   wrap an already accepted connection into a transportprotocol pair
   this method can be used by servers that accept connections outside   of asyncio but that use asyncio to handle them
   parameters    protocolfactory must be a callable returning a protocol     implementation
    sock is a preexisting socket object returned from     socket
accept
    ssl can be set to an sslcontext to enable ssl over the     accepted connections
    sslhandshaketimeout is for an ssl connection the time in     seconds to wait for the ssl handshake to complete before aborting     the connection
 60
0 seconds if none default
   returns a transport protocol pair
   new in version 3
7 the sslhandshaketimeout parameter
   new in version 3
3
transferring files
tls upgrade
starttlstransport protocol sslcontext  serversidefalse serverhostnamenone sslhandshaketimeoutnone   upgrade an existing transportbased connection to tls
   return a new transport instance that the protocol must start   using immediately after the await
  the transport instance   passed to the starttls method should never be used again
   parameters    transport and protocol instances that methods like     createserver and createconnection return
    sslcontext a configured instance of sslcontext
    serverside pass true when a serverside connection is being     upgraded like the one created by createserver
    serverhostname sets or overrides the host name that the     target servers certificate will be matched against
    sslhandshaketimeout is for a tls connection the time in     seconds to wait for the tls handshake to complete before aborting     the connection
 60
0 seconds if none default
   new in version 3
7
watching file descriptors
addreaderfd callback args   start monitoring the fd file descriptor for read availability and   invoke callback with the specified arguments once fd is   available for reading
removereaderfd   stop monitoring the fd file descriptor for read availability
addwriterfd callback args   start monitoring the fd file descriptor for write availability   and invoke callback with the specified arguments once fd is   available for writing
   use functools
partial to pass keyword arguments to callback
removewriterfd   stop monitoring the fd file descriptor for write availability
see also platform support section for some limitations of thesemethods
working with socket objects directly
dns
getaddrinfohost port  family0 type0 proto0 flags0   asynchronous version of socket
getaddrinfo
getnameinfosockaddr flags0   asynchronous version of socket
getnameinfo
changed in version 3
7 both getaddrinfo and getnameinfo methodswere always documented to return a coroutine but prior to python 3
7they were in fact returning asyncio
future objects
  starting withpython 3
7 both methods are coroutines
working with pipes
connectreadpipeprotocolfactory pipe   register the read end of pipe in the event loop
   protocolfactory must be a callable returning an asyncio protocol   implementation
   pipe is a filelike object
   return pair transport protocol where transport supports the   readtransport interface and protocol is an object instantiated   by the protocolfactory
   with selectoreventloop event loop the pipe is set to non   blocking mode
connectwritepipeprotocolfactory pipe   register the write end of pipe in the event loop
   protocolfactory must be a callable returning an asyncio protocol   implementation
   pipe is filelike object
   return pair transport protocol where transport supports   writetransport interface and protocol is an object instantiated   by the protocolfactory
   with selectoreventloop event loop the pipe is set to non   blocking mode
note  selectoreventloop does not support the above methods on windows
  use proactoreventloop instead for windows
see also  the loop
subprocessexec and loop
subprocessshell methods
unix signals
addsignalhandlersignum callback args   set callback as the handler for the signum signal
   the callback will be invoked by loop along with other queued   callbacks and runnable coroutines of that event loop
 unlike signal   handlers registered using signal
signal a callback registered   with this function is allowed to interact with the event loop
   raise valueerror if the signal number is invalid or uncatchable
   raise runtimeerror if there is a problem setting up the handler
   use functools
partial to pass keyword arguments to callback
   like signal
signal this function must be invoked in the main   thread
removesignalhandlersig   remove the handler for the sig signal
   return true if the signal handler was removed or false if no   handler was set for the given signal
   availability unix
see also the signal module
executing code in thread or process pools
runinexecutorexecutor func args   arrange for func to be called in the specified executor
   example      import asyncio      import concurrent
runmain   this method returns a asyncio
future object
   use functools
partial to pass keyword arguments to func
   changed in version 3
3 loop
runinexecutor no longer   configures the maxworkers of the thread pool executor it   creates instead leaving it up to the thread pool executor   threadpoolexecutor to set the default
setdefaultexecutorexecutor   set executor as the default executor used by runinexecutor
   executor should be an instance of threadpoolexecutor
   deprecated since version 3
8 using an executor that is not an   instance of threadpoolexecutor is deprecated and will trigger an   error in python 3
9
   executor must be an instance of   concurrent
threadpoolexecutor
error handling api
enabling debug mode
getdebug   get the debug mode bool of the event loop
   the default value is true if the environment variable   pythonasynciodebug is set to a nonempty string false   otherwise
setdebugenabled bool   set the debug mode of the event loop
   changed in version 3
7 the new python development mode can now   also be used to enable the debug mode
see also the debug mode of asyncio
running subprocesses
callback handles
handle   a callback wrapper object returned by loop
callsoon   loop
callsoonthreadsafe
   cancel      cancel the callback
  if the callback has already been canceled      or executed this method has no effect
   cancelled      return true if the callback was cancelled
      new in version 3
7
timerhandle   a callback wrapper object returned by loop
calllater and   loop
callat
   this class is a subclass of handle
   when      return a scheduled callback time as float seconds
      the time is an absolute timestamp using the same time reference      as loop
time
      new in version 3
7
server objects
event loop implementations
asyncio ships with two different event loop implementationsselectoreventloop and proactoreventloop
by default asyncio is configured to use selectoreventloop on unixand proactoreventloop on windows
selectoreventloop   an event loop based on the selectors module
   uses the most efficient selector available for the given   platform
  it is also possible to manually configure the exact   selector implementation to be used      import asyncio      import selectors      selector  selectors
seteventlooploop   availability unix windows
proactoreventloop   an event loop for windows that uses io completion ports iocp
   availability windows
   see also msdn documentation on io completion ports
abstracteventloop   abstract base class for asynciocompliant event loops
   the event loop methods section lists all methods that an   alternative implementation of abstracteventloop should have   defined
examples
note that all examples in this section purposefully show how touse the lowlevel event loop apis such as loop
runforever andloop
  modern asyncio applications rarely need to bewritten this way consider using the highlevel functions likeasyncio
hello world with callsoon
an example using the loop
callsoon method to schedule a callback
the callback displays hello world and then stops the event loop   import asyncio   def helloworldloop       a callback to print hello world and stop the event loop       printhello world       loop
closesee also  a similar hello world example created with a coroutine and the  run function
display the current date with calllater
an example of a callback displaying the current date every second
 thecallback uses the loop
calllater method to reschedule itselfafter 5 seconds and then stops the event loop   import asyncio   import datetime   def displaydateendtime loop       printdatetime
closesee also  a similar current date example created with a coroutine and the  run function
watch a file descriptor for read events
wait until a file descriptor received some data using theloop
addreader method and then close the event loop   import asyncio   from socket import socketpair    create a pair of connected file descriptors   rsock wsock  socketpair   loop  asyncio
closesee also   a similar example using transports protocols and the    loop
createconnection method
   another similar example using the highlevel    asyncio
openconnection function and streams
set signal handlers for sigint and sigterm
this signals example only works on unix
register handlers for signals sigint and sigterm using theloop
addsignalhandler method   import asyncio   import functools   import os   import signal   def askexitsigname loop       printgot signal s exit  signame       loop
nntplib  nntp protocol client
   changed in version 3
2 usenetrc is now false by default
   changed in version 3
3 support for the with statement was added
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socket
   new in version 3
2
   changed in version 3
4 the class now supports hostname check with   ssl
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socket
nntp objects
attributes
   new in version 3
2
   new in version 3
2
methods
changed in version 3
2 many of the following methods have beenreworked and fixed which makes them incompatible with their 3
1counterparts
getcapabilities   true   new in version 3
2
   new in version 3
2
   new in version 3
2
   changed in version 3
4 the method now supports hostname check with   ssl
   changed in version 3
2 grouppattern was added
de   new in version 3
2
utility functions
tkinterfont  tkinter font wrapper
typing  support for type hints
new in version 3
5
source code libtyping
pynote  the python runtime does not enforce function and variable type  annotations
 they can be used by third party tools such as type  checkers ides linters etc
this module provides runtime support for type hints as specified bypep 484 pep 526 pep 544 pep 586 pep 589 andpep 591
 the most fundamental support consists of the types anyunion tuple callable typevar and generic
  for fullspecification please see pep 484
  for a simplified introductionto type hints see pep 483
the function below takes and returns a string and is annotated asfollows   def greetingname str  str       return hello   namein the function greeting the argument name is expected to be oftype str and the return type str
 subtypes are accepted asarguments
type aliases
a type alias is defined by assigning the type to the alias
 in thisexample vector and listfloat will be treated as interchangeablesynonyms   vector  listfloat   def scalescalar float vector vector  vector       return scalar  num for num in vector    typechecks a list of floats qualifies as a vector
4type aliases are useful for simplifying complex type signatures
 forexample   from collections
note that none as a type hint is a special case and is replaced bytypenone
newtype
use the newtype helper function to create distinct types   from typing import newtype   userid  newtypeuserid int   someid  userid524313the static type checker will treat the new type as if it were asubclass of the original type
 this is useful in helping catch logicalerrors   def getusernameuserid userid  str       
    typechecks   usera  getusernameuserid42351    does not typecheck an int is not a userid   userb  getusername1you may still perform all int operations on a variable of typeuserid but the result will always be of type int
 this lets youpass in a userid wherever an int might be expected but willprevent you from accidentally creating a userid in an invalid way    output is of type int not userid   output  userid23413  userid54341note that these checks are enforced only by the static type checker
at runtime the statement derived  newtypederived base willmake derived a function that immediately returns whatever parameteryou pass it
 that means the expression derivedsomevalue does notcreate a new class or introduce any overhead beyond that of a regularfunction call
more precisely the expression somevalue is derivedsomevalue isalways true at runtime
this also means that it is not possible to create a subtype ofderived since it is an identity function at runtime not an actualtype   from typing import newtype   userid  newtypeuserid int    fails at runtime and does not typecheck   class adminuseriduserid passhowever it is possible to create a newtype based on a derivednewtype   from typing import newtype   userid  newtypeuserid int   prouserid  newtypeprouserid useridand typechecking for prouserid will work as expected
see pep 484 for more details
note  recall that the use of a type alias declares two types to be  equivalent to one another
 doing alias  original will make the  static type checker treat alias as being exactly equivalent to  original in all cases
 this is useful when you want to simplify  complex type signatures
in contrast newtype declares one type to  be a subtype of another
 doing derived  newtypederived  original will make the static type checker treat derived as a  subclass of original which means a value of type original  cannot be used in places where a value of type derived is  expected
 this is useful when you want to prevent logic errors with  minimal runtime cost
new in version 3
2
callable
frameworks expecting callback functions of specific signatures mightbe type hinted using callablearg1type arg2type returntype
for example   from collections
abc import callable   def feedergetnextitem callable str  none        body   def asyncqueryonsuccess callableint none                   onerror callableint exception none  none        bodyit is possible to declare the return type of a callable withoutspecifying the call signature by substituting a literal ellipsis forthe list of arguments in the type hint callable
 returntype
generics
since type information about objects kept in containers cannot bestatically inferred in a generic way abstract base classes have beenextended to support subscription to denote expected types forcontainer elements
generics can be parameterized by using a new factory available intyping called typevar
userdefined generic types
a userdefined class can be defined as a generic class
name messagegenerict as a base class defines that the class loggedvar takesa single type parameter t 
 this also makes t valid as a typewithin the class body
the generic base class defines classgetitem so thatloggedvart is valid as a type   from collections
set0a generic type can have any number of type variables and typevariables may be constrained   from typing import typevar generic   
each type variable argument to generic must be distinct
 this isthus invalid   from typing import typevar generic   
you can use multiple inheritance with generic   from collections
when inheriting from generic classes some type variables could befixed   from collections
in this case mydict has a single parameter t
using a generic class without specifying type parameters assumes anyfor each position
 in the following example myiterable is notgeneric but implicitly inherits from iterableany   from collections
abc import iterable   class myiterableiterable  same as iterableanyuser defined generic type aliases are also supported
 examples   from collections
   t  typevart int float complex   vec  iterabletuplet t   def inproductv vect  t  same as iterabletuplet t       return sumxy for x y in vchanged in version 3
7 generic no longer has a custom metaclass
a userdefined generic class can have abcs as base classes without ametaclass conflict
 generic metaclasses are not supported
 the outcomeof parameterizing generics is cached and most types in the typingmodule are hashable and comparable for equality
the any type
nominal vs structural subtyping
initially pep 484 defined python static type system as usingnominal subtyping
 this means that a class a is allowed where aclass b is expected if and only if a is a subclass of b
this requirement previously also applied to abstract base classessuch as iterable
 the problem with this approach is that a class hadto be explicitly marked to support them which is unpythonic andunlike what one would normally do in idiomatic dynamically typedpython code
 for example this conforms to pep 484   from collections
pep 544 allows to solve this problem by allowing users to writethe above code without explicit base classes in the class definitionallowing bucket to be implicitly considered a subtype of bothsized and iterableint by static type checkers
 this is known asstructural subtyping or static ducktyping   from collections
   result  collectbucket   passes type checkmoreover by subclassing a special class protocol a user can definenew custom protocols to fully enjoy structural subtyping see examplesbelow
module contents
the module defines the following classes functions and decorators
note  this module defines several types that are subclasses of pre  existing standard library classes which also extend generic to  support type variables inside 
 these types became redundant in  python 3
9 when the corresponding preexisting classes were enhanced  to support 
the redundant types are deprecated as of python 3
9  but no deprecation warnings will be issued by the interpreter
 it is  expected that type checkers will flag the deprecated types when the  checked program targets python 3
9 or newer
the deprecated types  will be removed from the typing module in the first python version  released 5 years after the release of python 3
0
 see details in  pep 585—type hinting generics in standard collections
special typing primitives
generic concrete collections
dictdict mutablemappingkt vt   a generic version of dict
 useful for annotating return types
 to   annotate arguments it is preferred to use an abstract collection   type such as mapping
   this type can be used as follows      def countwordstext str  dictstr int          
   deprecated since version 3
9 builtins
   see pep 585 and generic alias type
   this type may be used as follows      t  typevart int float      def vec2x t y t  listt          return x y      def keeppositivesvector sequencet  listt          return item for item in vector if item  0   deprecated since version 3
9 builtins
   see pep 585 and generic alias type
   deprecated since version 3
9 builtins
 see   pep 585 and generic alias type
   deprecated since version 3
9 builtins
frozenset now supports   
 see pep 585 and generic alias type
note  tuple is a special form
defaultdict mutablemappingkt vt   a generic version of collections
defaultdict
   new in version 3
2
   deprecated since version 3
9 collections
defaultdict now   supports 
 see pep 585 and generic alias type
ordereddict mutablemappingkt vt   a generic version of collections
ordereddict
   new in version 3
2
   deprecated since version 3
9 collections
ordereddict now   supports 
 see pep 585 and generic alias type
chainmap mutablemappingkt vt   a generic version of collections
chainmap
   new in version 3
4
   new in version 3
1
   deprecated since version 3
9 collections
chainmap now supports   
 see pep 585 and generic alias type
counter dictt int   a generic version of collections
counter
   new in version 3
4
   new in version 3
1
   deprecated since version 3
9 collections
counter now supports   
 see pep 585 and generic alias type
dequedeque mutablesequencet   a generic version of collections
deque
   new in version 3
4
   new in version 3
1
   deprecated since version 3
9 collections
deque now supports   
 see pep 585 and generic alias type
   deprecated since version 3
9 classes pattern and match from   re now support 
   use text to indicate that a value must contain a unicode string   in a manner that is compatible with both python 2 and python 3      def addunicodecheckmarktext text  text          return text  u u2713   new in version 3
2
abstract base classes
protocols
   new in version 3
8
functions and decorators
   new in version 3
8
notypecheck   decorator to indicate that annotations are not type hints
   this works as class or function decorator
  with a class it   applies recursively to all methods defined in that class but not   to methods defined in its superclasses or subclasses
   this mutates the functions in place
notypecheckdecorator   decorator to give another decorator the notypecheck effect
typecheckonly   decorator to mark a class or function to be unavailable at runtime
introspection helpers
gettypehintsobj globalnsnone localnsnone includeextrasfalse   return a dictionary containing type hints for a function method   module or class object
 for example      class studentnamedtuple          name annotatedstr some marker      gettypehintsstudent  name str      gettypehintsstudent includeextrasfalse  name str      gettypehintsstudent includeextrastrue            name annotatedstr some marker         changed in version 3
9 added includeextras parameter as part of   pep 593
 examples      assert getorigindictstr int is dict      assert getargsdictint str  int str      assert getoriginunionint str is union      assert getargsunionint str  int str   new in version 3
8
constant
   note     if from future import annotations is used in python 3
   new in version 3
2
socket  lowlevel networking interface
source code libsocket
pythis module provides access to the bsd socket interface
 it isavailable on all modern unix systems windows macos and probablyadditional platforms
note  some behavior may be platform dependent since calls are made to the  operating system socket apis
the python interface is a straightforward transliteration of the unixsystem call and library interface for sockets to pythons objectoriented style the socket function returns a socket objectwhose methods implement the various socket system calls
  parametertypes are somewhat higherlevel than in the c interface as withread and write operations on python files buffer allocationon receive operations is automatic and buffer length is implicit onsend operations
see also  module socketserver     classes that simplify writing network servers
  module ssl     a tlsssl wrapper for socket objects
socket families
module contents
the module socket exports the following elements
exceptions
constants
functions
socket objects
notes on socket timeouts
timeouts and the connect method
the connect operation is also subject to the timeout setting andin general it is recommended to call settimeout before callingconnect or pass a timeout parameter to createconnection
however the system network stack may also return a connection timeouterror of its own regardless of any python socket timeout setting
timeouts and the accept method
if getdefaulttimeout is not none sockets returned by theaccept method inherit that timeout
  otherwise the behaviourdepends on settings of the listening socket if the listening socket is in blocking mode or in timeout mode  the socket returned by accept is in blocking mode if the listening socket is in nonblocking mode whether the  socket returned by accept is in blocking or nonblocking mode is  operating systemdependent
  if you want to ensure crossplatform  behaviour it is recommended you manually override this setting
example
streams
streamreader
streamwriter
streamwriter   represents a writer object that provides apis to write data to the   io stream
   it is not recommended to instantiate streamwriter objects   directly use openconnection and startserver instead
   writedata      the method attempts to write the data to the underlying socket      immediately
 if that fails the data is queued in an internal      write buffer until it can be sent
      the method should be used along with the drain method         stream
drain   writelinesdata      the method writes a list or any iterable of bytes to the      underlying socket immediately
 if that fails the data is queued      in an internal write buffer until it can be sent
      the method should be used along with the drain method         stream
drain   close      the method closes the stream and the underlying socket
      the method should be used along with the waitclosed method         stream
waitclosed   canwriteeof      return true if the underlying transport supports the      writeeof method false otherwise
   writeeof      close the write end of the stream after the buffered write data      is flushed
   transport      return the underlying asyncio transport
   getextrainfoname defaultnone      access optional transport information see      basetransport
getextrainfo for details
   coroutine drain      wait until it is appropriate to resume writing to the stream
      example         writer
drain      this is a flow control method that interacts with the underlying      io write buffer
  when the size of the buffer reaches the high      watermark drain blocks until the size of the buffer is      drained down to the low watermark and writing can be resumed
      when there is nothing to wait for the drain returns      immediately
   isclosing      return true if the stream is closed or in the process of being      closed
      new in version 3
7
   coroutine waitclosed      wait until the stream is closed
      should be called after close to wait until the underlying      connection is closed
      new in version 3
7
examples
tcp echo client using streams
tcp echo client using the asyncio
openconnection function   import asyncio   async def tcpechoclientmessage       reader writer  await asyncio
runtcpechoclienthello worldsee also  the tcp echo client protocol example uses the lowlevel  loop
createconnection method
tcp echo server using streams
tcp echo server using the asyncio
startserver function   import asyncio   async def handleechoreader writer       data  await reader
runmainsee also  the tcp echo server protocol example uses the loop
createserver  method
get http headers
simple example querying http headers of the url passed on the commandline   import asyncio   import urllib
runprinthttpheadersurlusage   python example
htmlor with https   python example
register an open socket to wait for data using streams
coroutine waiting until a socket receives data using theopenconnection function   import asyncio   import socket   async def waitfordata        get a reference to the current event loop because        we want to access lowlevel apis
runwaitfordatasee also  the register an open socket to wait for data using a protocol  example uses a lowlevel protocol and the loop
createconnection  method
  the watch a file descriptor for read events example uses the low  level loop
addreader method to watch a file descriptor
wave  read and write wav files
waveread objects
wavewrite objects
for seekable output streams the wave header will automatically beupdated to reflect the number of frames actually written
  forunseekable streams the nframes value must be accurate when thefirst frame data is written
  an accurate nframes value can beachieved either by calling setnframes or setparams with thenumber of frames that will be written before close is called andthen using writeframesraw to write the frame data or by callingwriteframes with all of the frame data to be written
  in thelatter case writeframes will calculate the number of frames in thedata and set nframes accordingly before writing the frame data
wavewrite objects as returned by open have the followingmethodschanged in version 3
4 added support for unseekable files
close   make sure nframes is correct and close the file if it was opened   by wave
  this method is called upon object collection
  it will   raise an exception if the output stream is not seekable and   nframes does not match the number of frames actually written
setnchannelsn   set the number of channels
setsampwidthn   set the sample width to n bytes
setframeraten   set the frame rate to n
   changed in version 3
2 a nonintegral input to this method is   rounded to the nearest integer
setnframesn   set the number of frames to n
  this will be changed later if the   number of frames actually written is different this update attempt   will raise an error if the output stream is not seekable
setcomptypetype name   set the compression type and description
 at the moment only   compression type none is supported meaning no compression
setparamstuple   the tuple should be nchannels sampwidth framerate nframes   comptype compname with values valid for the set methods
   sets all parameters
tell   return current position in the file with the same disclaimer for   the waveread
tell and waveread
setpos methods
writeframesrawdata   write audio frames without correcting nframes
   changed in version 3
4 any byteslike object is now accepted
writeframesdata   write audio frames and make sure nframes is correct
  it will   raise an error if the output stream is not seekable and the total   number of frames that have been written after data has been   written does not match the previously set value for nframes
   changed in version 3
4 any byteslike object is now accepted
note that it is invalid to set any parameters after callingwriteframes or writeframesraw and any attempt to do so willraise wave
test  regression tests package for python
note  the test package is meant for internal use by python only
see also  module unittest     writing pyunit regression tests
  module doctest     tests embedded in documentation strings
writing unit tests for the test package
see also  test driven development     a book by kent beck on writing tests before code
running tests using the commandline interface
emailiterators iterators
source code libemailiterators
pyiterating over a message object tree is fairly easy with themessage
walk method
  the email
iterators module provides someuseful higher level iterations over message object trees
bodylineiteratormsg decodefalse   this iterates over all the payloads in all the subparts of msg   returning the string payloads linebyline
  it skips over all the   subpart headers and it skips over any subpart with a payload that   isnt a python string
  this is somewhat equivalent to reading the   flat text representation of the message from a file using   readline skipping over all the intervening headers
   optional decode is passed through to message
typedsubpartiteratormsg maintypetext subtypenone   this iterates over all the subparts of msg returning only those   subparts that match the mime type specified by maintype and   subtype
   note that subtype is optional if omitted then subpart mime type   matching is done only with the main type
  maintype is optional   too it defaults to text
   thus by default typedsubpartiterator returns each subpart   that has a mime type of text
the following function has been added as a useful debugging tool
  itshould not be considered part of the supported public interface forthe package
structuremsg fpnone level0 includedefaultfalse   prints an indented representation of the content types of the   message object structure
  for example       msg  email
messagefromfilesomefile       structuremsg      multipartmixed          textplain          textplain          multipartdigest              messagerfc822                  textplain              messagerfc822                  textplain              messagerfc822                  textplain              messagerfc822                  textplain              messagerfc822                  textplain          textplain   optional fp is a filelike object to print the output to
  it   must be suitable for pythons print function
  level is used   internally
 includedefault if true prints the default type as   well
syslog  unix syslog library routines
this module provides an interface to the unix syslog libraryroutines
 refer to the unix manual pages for a detailed description ofthe syslog facility
this module wraps the system syslog family of routines
  a purepython library that can speak to a syslog server is available in thelogging
handlers module as sysloghandler
the module defines the following functionssyslog
syslogpriority message   send the string message to the system logger
  a trailing newline   is added if necessary
  each message is tagged with a priority   composed of a facility and a level
  the optional priority   argument which defaults to loginfo determines the message   priority
  if the facility is not encoded in priority using   logicalor loginfo  loguser the value given in the   openlog call is used
   if openlog has not been called prior to the call to syslog   openlog will be called with no arguments
   raises an auditing event syslog
syslog with arguments priority   message
openlogident logoption facility   logging options of subsequent syslog calls can be set by   calling openlog
  syslog will call openlog with no   arguments if the log is not currently open
   the optional ident keyword argument is a string which is   prepended to every message and defaults to sys
argv0 with   leading path components stripped
  the optional logoption keyword   argument default is 0 is a bit field  see below for possible   values to combine
  the optional facility keyword argument   default is loguser sets the default facility for messages   which do not have a facility explicitly encoded
   raises an auditing event syslog
openlog with arguments ident   logoption facility
   changed in version 3
2 in previous versions keyword arguments   were not allowed and ident was required
  the default for   ident was dependent on the system libraries and often was   python instead of the name of the python program file
closelog   reset the syslog module values and call the system library   closelog
   this causes the module to behave as it does when initially   imported
  for example openlog will be called on the first   syslog call if openlog hasnt already been called and   ident and other openlog parameters are reset to defaults
   raises an auditing event syslog
closelog with no arguments
setlogmaskmaskpri   set the priority mask to maskpri and return the previous mask   value
  calls to syslog with a priority level not set in   maskpri are ignored
 the default is to log all priorities
  the   function logmaskpri calculates the mask for the individual   priority pri
  the function loguptopri calculates the mask   for all priorities up to and including pri
   raises an auditing event syslog
setlogmask with argument   maskpri
the module defines the following constantspriority levels high to low   logemerg logalert logcrit logerr logwarning   lognotice loginfo logdebug
facilities   logkern loguser logmail logdaemon logauth   loglpr lognews loguucp logcron logsyslog   loglocal0 to loglocal7 and if defined in syslog
h   logauthpriv
log options   logpid logcons logndelay and if defined in   syslog
h logodelay lognowait and logperror
examples
simple example
a simple set of examples   import syslog   syslog
logerr processing startedan example of setting some log options these would include theprocess id in logged messages and write the messages to thedestination facility used for mail logging   syslog
pickle  python object serialization
relationship to other python modules
comparison with marshal
comparison with json
data stream format
the data format used by pickle is pythonspecific
  this has theadvantage that there are no restrictions imposed by external standardssuch as json or xdr which cant represent pointer sharing howeverit means that nonpython programs may not be able to reconstructpickled python objects
by default the pickle data format uses a relatively compact binaryrepresentation
  if you need optimal size characteristics you canefficiently compress pickled data
the module pickletools contains tools for analyzing data streamsgenerated by pickle
  pickletools source code has extensivecomments about opcodes used by pickle protocols
there are currently 6 different protocols which can be used forpickling
 the higher the protocol used the more recent the version ofpython needed to read the pickle produced
 protocol version 0 is the original humanreadable protocol and is  backwards compatible with earlier versions of python
 protocol version 1 is an old binary format which is also compatible  with earlier versions of python
 protocol version 2 was introduced in python 2
3
  it provides much  more efficient pickling of newstyle classes
  refer to pep  307 for information about improvements brought by protocol 2
 protocol version 3 was added in python 3
0
  it has explicit support  for bytes objects and cannot be unpickled by python 2
x
  this was  the default protocol in python 3
03
7
 protocol version 4 was added in python 3
  it adds support for  very large objects pickling more kinds of objects and some data  format optimizations
  it is the default protocol starting with  python 3
8
 refer to pep 3154 for information about improvements  brought by protocol 4
 protocol version 5 was added in python 3
8
  it adds support for  outofband data and speedup for inband data
  refer to pep 574  for information about improvements brought by protocol 5
note  serialization is a more primitive notion than persistence although  pickle reads and writes file objects it does not handle the issue  of naming persistent objects nor the even more complicated issue  of concurrent access to persistent objects
  the pickle module can  transform a complex object into a byte stream and it can transform  the byte stream into an object with the same internal structure
  perhaps the most obvious thing to do with these byte streams is to  write them onto a file but it is also conceivable to send them  across a network or store them in a database
  the shelve module  provides a simple interface to pickle and unpickle objects on dbm  style database files
module interface
what can be pickled and unpickled
pickling class instances
persistence of external objects
for the benefit of object persistence the pickle module supportsthe notion of a reference to an object outside the pickled datastream
  such objects are referenced by a persistent id which shouldbe either a string of alphanumeric characters for protocol 0 5 orjust an arbitrary object for any newer protocol
the resolution of such persistent ids is not defined by the picklemodule it will delegate this resolution to the userdefined methodson the pickler and unpickler persistentid andpersistentload respectively
to pickle objects that have an external persistent id the picklermust have a custom persistentid method that takes an object as anargument and returns either none or the persistent id for thatobject
 when none is returned the pickler simply pickles the objectas normal
 when a persistent id string is returned the pickler willpickle that object along with a marker so that the unpickler willrecognize it as a persistent id
to unpickle external objects the unpickler must have a custompersistentload method that takes a persistent id object andreturns the referenced object
here is a comprehensive example presenting how persistent id can beused to pickle external objects by reference
dispatch tables
if one wants to customize pickling of some classes without disturbingany other code which depends on pickling then one can create apickler with a private dispatch table
the global dispatch table managed by the copyreg module is availableas copyreg
dispatchtable
  therefore one may choose to use amodified copy of copyreg
dispatchtable as a private dispatch table
for example   f  io
dispatchtablesomeclass  reducesomeclasscreates an instance of pickle
pickler with a private dispatch tablewhich handles the someclass class specially
  alternatively thecode   class mypicklerpickle
bytesio   p  mypicklerfdoes the same but all instances of mypickler will by default sharethe same dispatch table
  the equivalent code using the copyregmodule is   copyreg
handling stateful objects
heres an example that shows how to modify pickling behavior for aclass
 the textreader class opens a text file and returns the linenumber and line contents each time its readline method is called
if a textreader instance is pickled all attributes except thefile object member are saved
 when the instance is unpickled the fileis reopened and reading resumes from the last location
 thesetstate and getstate methods are used to implementthis behavior
file  filea sample usage might be something like this    reader  textreaderhello
custom reduction for types functions and other objects
new in version 3
8
sometimes dispatchtable may not be flexible enough
 in particularwe may want to customize pickling based on another criterion than theobjects type or we may want to customize the pickling of functionsand classes
for those cases it is possible to subclass from the pickler classand implement a reduceroverride method
 this method can return anarbitrary reduction tuple see reduce
 it can alternativelyreturn notimplemented to fallback to the traditional behavior
if both the dispatchtable and reduceroverride are definedthen reduceroverride method takes priority
note  for performance reasons reduceroverride may not be called for  the following objects none true false and exact instances  of int float bytes str dict set frozenset  list and tuple
here is a simple example where we allow pickling and reconstructing agiven class   import io   import pickle   class myclass       myattribute  1   class mypicklerpickle
outofband buffers
new in version 3
8
in some contexts the pickle module is used to transfer massiveamounts of data
  therefore it can be important to minimize thenumber of memory copies to preserve performance and resourceconsumption
  however normal operation of the pickle module as ittransforms a graphlike structure of objects into a sequential streamof bytes intrinsically involves copying data to and from the picklestream
this constraint can be eschewed if both the provider theimplementation of the object types to be transferred and theconsumer the implementation of the communications system supportthe outofband transfer facilities provided by pickle protocol 5 andhigher
provider api
consumer api
a communications system can enable custom handling of thepicklebuffer objects generated when serializing an object graph
on the sending side it needs to pass a buffercallback argument topickler or to the dump or dumps function which will becalled with each picklebuffer generated while pickling the objectgraph
  buffers accumulated by the buffercallback will not seetheir data copied into the pickle stream only a cheap marker will beinserted
on the receiving side it needs to pass a buffers argument tounpickler or to the load or loads function which is aniterable of the buffers which were passed to buffercallback
 thatiterable should produce buffers in the same order as they were passedto buffercallback
  those buffers will provide the data expected bythe reconstructors of the objects whose pickling produced the originalpicklebuffer objects
between the sending side and the receiving side the communicationssystem is free to implement its own transfer mechanism for outofbandbuffers
 potential optimizations include the use of shared memory ordatatypedependent compression
example
here is a trivial example where we implement a bytearray subclassable to participate in outofband buffer pickling   class zerocopybytearraybytearray       def reduceexself protocol           if protocol  5               return typeself
                   return obj               else                   return clsobjthe reconstructor the reconstruct class method returns thebuffers providing object if it has the right type
  this is an easyway to simulate zerocopy behaviour on this toy example
on the consumer side we can pickle those objects the usual way whichwhen unserialized will give us a copy of the original object   b  zerocopybytearraybabc   data  pickle
loadsdata   printb  newb   true   printb is newb   false a copy was madebut if we pass a buffercallback and then give back the accumulatedbuffers when unserializing we are able to get back the originalobject   b  zerocopybytearraybabc   buffers     data  pickle
loadsdata buffersbuffers   printb  newb   true   printb is newb   true no copy was madethis example is limited by the fact that bytearray allocates its ownmemory you cannot create a bytearray instance that is backed byanother objects memory
  however thirdparty datatypes such as numpyarrays do not have this limitation and allow use of zerocopypickling or making as few copies as possible when transferringbetween distinct processes or systems
see also pep 574  pickle protocol 5 with outofband data
restricting globals
performance
recent versions of the pickle protocol from protocol 2 and upwardsfeature efficient binary encodings for several common features andbuiltin types
 also the pickle module has a transparent optimizerwritten in c
examples
for the simplest code use the dump and load functions
highestprotocolthe following example reads the resulting pickled data
loadfsee also  module copyreg     pickle interface constructor registration for extension types
  module pickletools     tools for working with and analyzing pickled data
  module shelve     indexed databases of objects uses pickle
  module copy     shallow and deep object copying
  module marshal     highperformance serialization of builtin types
 footnotes 1 dont confuse this with the marshal module2 this is why lambda functions cannot be pickled  all lambda    functions share the same name  lambda
3 the exception raised will likely be an importerror or an    attributeerror but it could be something else
4 the copy module uses this protocol for shallow and deep copying    operations
5 the limitation on alphanumeric characters is due to the fact the    persistent ids in protocol 0 are delimited by the newline    character
  therefore if any kind of newline characters occurs in    persistent ids the resulting pickle will become unreadable
multiprocessingsharedmemory   provides shared memory for direct access across processes
loggingconfig  logging configuration
source code libloggingconfig
pyimportantthis page contains only reference information
 for tutorials pleasesee basic tutorial advanced tutorial logging cookbookthis section describes the api for configuring the logging module
configuration functions
configuration dictionary schema
describing a logging configuration requires listing the variousobjects to create and the connections between them for example youmay create a handler named console and then say that the loggernamed startup will send its messages to the console handler
 theseobjects arent limited to those provided by the logging modulebecause you might write your own formatter or handler class
 theparameters to these classes may also need to include external objectssuch as sys
stderr
  the syntax for describing these objects andconnections is defined in object connections below
dictionary schema details
the dictionary passed to dictconfig must contain the followingkeys version  to be set to an integer value representing the schema  version
  the only valid value at present is 1 but having this key  allows the schema to evolve while still preserving backwards  compatibility
all other keys are optional but if present they will be interpretedas described below
  in all cases below where a configuring dict ismentioned it will be checked for the special  key to see if acustom instantiation is required
  if so the mechanism described inuserdefined objects below is used to create an instance otherwisethe context is used to determine what to instantiate
 formatters  the corresponding value will be a dict in which each  key is a formatter id and each value is a dict describing how to  configure the corresponding formatter instance
  the configuring dict is searched for keys format and datefmt  with defaults of none and these are used to construct a  formatter instance
  changed in version 3
8 a validate key with default of true  can be added into the formatters section of the configuring dict  this is to validate the format
 filters  the corresponding value will be a dict in which each key  is a filter id and each value is a dict describing how to configure  the corresponding filter instance
  the configuring dict is searched for the key name defaulting to  the empty string and this is used to construct a logging
filter  instance
 handlers  the corresponding value will be a dict in which each  key is a handler id and each value is a dict describing how to  configure the corresponding handler instance
  the configuring dict is searched for the following keys   class mandatory
  this is the fully qualified name of the    handler class
   level optional
  the level of the handler
   formatter optional
  the id of the formatter for this handler
   filters optional
  a list of ids of the filters for this    handler
  all other keys are passed through as keyword arguments to the  handlers constructor
  for example given the snippet     handlers       console         class  logging
log         maxbytes 1024         backupcount 3  the handler with id console is instantiated as a  logging
streamhandler using sys
stdout as the underlying  stream
  the handler with id file is instantiated as a  logging
rotatingfilehandler with the keyword arguments  filenamelogconfig
 loggers  the corresponding value will be a dict in which each key  is a logger name and each value is a dict describing how to  configure the corresponding logger instance
  the configuring dict is searched for the following keys   level optional
  the level of the logger
   propagate optional
  the propagation setting of the logger
   filters optional
  a list of ids of the filters for this    logger
   handlers optional
  a list of ids of the handlers for this    logger
  the specified loggers will be configured according to the level  propagation filters and handlers specified
 root  this will be the configuration for the root logger
  processing of the configuration will be as for any logger except  that the propagate setting will not be applicable
 incremental  whether the configuration is to be interpreted as  incremental to the existing configuration
  this value defaults to  false which means that the specified configuration replaces the  existing configuration with the same semantics as used by the  existing fileconfig api
  if the specified value is true the configuration is processed as  described in the section on incremental configuration
 disableexistingloggers  whether any existing nonroot loggers  are to be disabled
 this setting mirrors the parameter of the same  name in fileconfig
 if absent this parameter defaults to  true
 this value is ignored if incremental is true
incremental configuration
it is difficult to provide complete flexibility for incrementalconfiguration
  for example because objects such as filters andformatters are anonymous once a configuration is set up it is notpossible to refer to such anonymous objects when augmenting aconfiguration
furthermore there is not a compelling case for arbitrarily alteringthe object graph of loggers handlers filters formatters at runtime once a configuration is set up the verbosity of loggers andhandlers can be controlled just by setting levels and in the case ofloggers propagation flags
  changing the object graph arbitrarily ina safe way is problematic in a multithreaded environment while notimpossible the benefits are not worth the complexity it adds to theimplementation
thus when the incremental key of a configuration dict is presentand is true the system will completely ignore any formatters andfilters entries and process only the level settings in thehandlers entries and the level and propagate settings in theloggers and root entries
using a value in the configuration dict lets configurations to be sentover the wire as pickled dicts to a socket listener
 thus the loggingverbosity of a longrunning application can be altered over time withno need to stop and restart the application
object connections
userdefined objects
the schema supports userdefined objects for handlers filters andformatters
  loggers do not need to have different types fordifferent instances so there is no support in this configurationschema for userdefined logger classes
objects to be configured are described by dictionaries which detailtheir configuration
  in some places the logging system will be ableto infer from the context how an object is to be instantiated butwhen a userdefined object is to be instantiated the system will notknow how to do this
  in order to provide complete flexibility foruserdefined object instantiation the user needs to provide afactory  a callable which is called with a configuration dictionaryand which returns the instantiated object
 this is signalled by anabsolute import path to the factory being made available under thespecial key 
  heres a concrete example   formatters     brief       format messages     default       format asctimes levelname8s name15s messages       datefmt ymd hms     custom          my
9         answer 42the above yaml snippet defines three formatters
  the first with idbrief is a standard logging
formatter instance with the specifiedformat string
  the second with id default has a longer format andalso defines the time format explicitly and will result in alogging
formatter initialized with those two format strings
  shownin python source form the brief and default formatters haveconfiguration subdictionaries        format  messages   and        format  asctimes levelname8s name15s messages     datefmt  ymd hms   respectively and as these dictionaries do not contain the special key the instantiation is inferred from the context as a resultstandard logging
formatter instances are created
  the configurationsubdictionary for the third formatter with id custom is          my
9     answer  42   and this contains the special key  which means that userdefined instantiation is wanted
  in this case the specified factorycallable will be used
 if it is an actual callable it will be useddirectly  otherwise if you specify a string as in the example theactual callable will be located using normal import mechanisms
 thecallable will be called with the remaining items in theconfiguration subdictionary as keyword arguments
  in the aboveexample the formatter with id custom will be assumed to be returnedby the call   my
9 answer42the key  has been used as the special key because it is not avalid keyword parameter name and so will not clash with the names ofthe keyword arguments used in the call
  the  also serves as amnemonic that the corresponding value is a callable
access to external objects
access to internal objects
as well as external objects there is sometimes also a need to referto objects in the configuration
  this will be done implicitly by theconfiguration system for things that it knows about
  for example thestring value debug for a level in a logger or handler willautomatically be converted to the value logging
debug and thehandlers filters and formatter entries will take an object idand resolve to the appropriate destination object
however a more generic mechanism is needed for userdefined objectswhich are not known to the logging module
  for example considerlogging
memoryhandler which takes a target argumentwhich is another handler to delegate to
 since the system alreadyknows about this class then in the configuration the given targetjust needs to be the object id of the relevant target handler and thesystem will resolve to the handler from the id
  if however a userdefines a my
myhandler which has an alternate handler theconfiguration system would not know that the alternate referred to ahandler
  to cater for this a generic resolution system allows theuser to specify   handlers     file        configuration of file handler goes here     custom        my
filethe literal string cfghandlers
file will be resolved in ananalogous way to strings with the ext prefix but looking in theconfiguration itself rather than the import namespace
  the mechanismallows access by dot or by index in a similar way to that provided bystr
format
  thus given the following snippet   handlers     email       class logging
in the configuration the string cfghandlers would resolve tothe dict with key handlers the string cfghandlers
email wouldresolve to the dict with key email in the handlers dict and soon
  the string cfghandlers
toaddrs1 would resolve todevteam
tld and the stringcfghandlers
toaddrs0 would resolve to the valuesupportteamdomain
 the subject value could be accessedusing either cfghandlers
subject or equivalentlycfghandlers
emailsubject
  the latter form only needs to beused if the key contains spaces or nonalphanumeric characters
  if anindex value consists only of decimal digits access will be attemptedusing the corresponding integer value falling back to the stringvalue if needed
given a string cfghandlers
123 this will resolveto configdicthandlersmyhandlermykey123
 if thestring is specified as cfghandlers
mykey123 thesystem will attempt to retrieve the value fromconfigdicthandlersmyhandlermykey123 and fall back toconfigdicthandlersmyhandlermykey123 if that fails
import resolution and custom importers
import resolution by default uses the builtin importfunction to do its importing
 you may want to replace this with yourown importing mechanism if so you can replace the importerattribute of the dictconfigurator or its superclass thebaseconfigurator class
 however you need to be careful because ofthe way functions are accessed from classes via descriptors
 if youare using a python callable to do your imports and you want to defineit at class level rather than instance level you need to wrap it withstaticmethod
 for example   from importlib import importmodule   from logging
importer  staticmethodimportmoduleyou dont need to wrap with staticmethod if youre setting theimport callable on a configurator instance
configuration file format
other graphical user interface packages
bdb  debugger framework
the following exception is definedexception bdb
      new in version 3
2
   new in version 3
1 the skip argument
  for more information on code and frame      objects refer to the standard type hierarchy
      new in version 3
2
tracemalloc  trace memory allocations
new in version 3
4
source code libtracemalloc
examples
display the top
display the 10 files allocating the most memory   import tracemalloc   tracemalloc
statisticslineno   print top 10    for stat in topstats10       printstatexample of output of the python test suite    top 10    frozen importlib
compute differences
take two snapshots and display the differences   import tracemalloc   tracemalloc
get the traceback of a memory block
pretty top
takesnapshot   displaytopsnapshotexample of output of the python test suite   top 10 lines   1 libbase64
gettracedmemory   printffirstsize firstpeak   printfsecondsize secondpeakoutput   firstsize664 firstpeak3592984   secondsize804 secondpeak29704using resetpeak ensured we could accurately record the peakduring the computation of smallsum even though it is much smallerthan the overall peak size of memory blocks since the start call
api
functions
   new in version 3
9
domainfilter
   new in version 3
6
filter
filterinclusive bool filenamepattern str lineno intnone allframes boolfalse domain intnone   filter on traces of memory blocks
   examples    filtertrue subprocess
file excludes traces of the     tracemalloc module    filterfalse unknown excludes empty tracebacks   changed in version 3
5 the 
pyo file extension is no longer   replaced with 
   changed in version 3
6 added the domain attribute
frame
snapshot
statistic
statisticdiff
trace
   changed in version 3
6 added the domain attribute
traceback
   changed in version 3
7 frames are now sorted from the oldest to   the most recent instead of most recent to oldest
   changed in version 3
9 the traceback
totalnframe attribute was   added
      example         printtraceback most recent call first         for line in traceback             printline      output         traceback most recent call first           file test
json  json encoder and decoder
source code libjsoninit
pyjson javascript object notation specified by rfc 7159 whichobsoletes rfc 4627 and by ecma404 is a lightweight datainterchange format inspired by javascript object literal syntaxalthough it is not a strict subset of javascript 1 
json exposes an api familiar to users of the standard librarymarshal and pickle modules
encoding basic python object hierarchies    import json    json
getvalue   streaming apicompact encoding    import json    json
dumps1 2 3 4 5 6 7 separators    1234567pretty printing    import json    printjson
dumps4 5 6 7 sortkeystrue indent4          4 5       6 7   decoding json    import json    json
loadio   streaming apispecializing json object decoding    import json    def ascomplexdct   
1extending jsonencoder    import json    class complexencoderjson
0 using json
tool from the shell to validate and prettyprint    echo jsonobj  python m json
tool   expecting property name enclosed in double quotes line 1 column 2 char 1see command line interface for detailed documentation
note  json is a subset of yaml 1
2
  the json produced by this modules  default settings in particular the default separators value is  also a subset of yaml 1
1
  this module can thus also be  used as a yaml serializer
note  this modules encoders and decoders preserve input and output order  by default
  order is only lost if the underlying containers are  unordered
prior to python 3
7 dict was not guaranteed to be  ordered so inputs and outputs were typically scrambled unless  collections
ordereddict was specifically requested
  starting with  python 3
7 the regular dict became order preserving so it is no  longer necessary to specify collections
ordereddict for json  generation and parsing
basic usage
encoders and decoders
exceptions
jsondecodeerrormsg doc pos   subclass of valueerror with the following additional attributes   msg      the unformatted error message
   doc      the json document being parsed
   new in version 3
5
standard compliance and interoperability
the json format is specified by rfc 7159 and by ecma404
 thissection details this modules level of compliance with the rfc
 forsimplicity jsonencoder and jsondecoder subclasses and parametersother than those explicitly mentioned are not considered
this module does not comply with the rfc in a strict fashionimplementing some extensions that are valid javascript but not validjson
  in particular infinite and nan number values are accepted and output repeated names within an object are accepted and only the value of  the last namevalue pair is used
since the rfc permits rfccompliant parsers to accept input texts thatare not rfccompliant this modules deserializer is technically rfccompliant under default settings
character encodings
infinite and nan number values
the rfc does not permit the representation of infinite or nan numbervalues
 despite that by default this module accepts and outputsinfinity infinity and nan as if they were valid json numberliteral values     neither of these calls raises an exception but the results are not valid json    json
loadsnan   nanin the serializer the allownan parameter can be used to alter thisbehavior
  in the deserializer the parseconstant parameter can beused to alter this behavior
repeated names within an object
the rfc specifies that the names within a json object should beunique but does not mandate how repeated names in json objects shouldbe handled
  by default this module does not raise an exceptioninstead it ignores all but the last namevalue pair for a given name    weirdjson  x 1 x 2 x 3    json
toplevel nonobject nonarray values
the old version of json specified by the obsolete rfc 4627required that the toplevel value of a json text must be either a jsonobject or array python dict or list and could not be a jsonnull boolean number or string value
  rfc 7159 removed thatrestriction and this module does not and has never implemented thatrestriction in either its serializer or its deserializer
regardless for maximum interoperability you may wish to voluntarilyadhere to the restriction yourself
implementation limitations
some json deserializer implementations may set limits on the size of accepted json texts the maximum level of nesting of json objects and arrays the range and precision of json numbers the content and maximum length of json stringsthis module does not impose any such limits beyond those of therelevant python datatypes themselves or the python interpreter itself
when serializing to json beware any such limitations in applicationsthat may consume your json
  in particular it is common for jsonnumbers to be deserialized into ieee 754 double precision numbers andthus subject to that representations range and precision limitations
this is especially relevant when serializing python int values ofextremely large magnitude or when serializing instances of exoticnumerical types such as decimal
decimal
command line interface
source code libjsontool
if the optional infile and outfile arguments are not specifiedsys
stdin and sys
stdout will be used respectively    echo json obj  python m json
tool   expecting property name enclosed in double quotes line 1 column 2 char 1changed in version 3
5 the output is now in the same order as theinput
 use the sortkeys option to sort the output of dictionariesalphabetically by key
command line options
infile   the json file to be validated or prettyprinted       python m json
json                              title and now for something completely different              year 1971                                  title monty python and the holy grail              year 1975                   if infile is not specified read from sys
stdin
outfile   write the output of the infile to the given outfile
 otherwise   write it to sys
sortkeys   sort the output of dictionaries alphabetically by key
   new in version 3
5
noensureascii   disable escaping of nonascii characters see json
dumps for   more information
   new in version 3
9
jsonlines   parse every input line as separate json object
   new in version 3
8
indent tab noindent compact   mutually exclusive options for whitespace control
   new in version 3
9
h help   show the help message
 footnotes 1 as noted in the errata for rfc 7159 json permits literal u2028    line separator and u2029 paragraph separator characters in    strings whereas javascript as of ecmascript edition 5
1 does    not
dbm  interfaces to unix databases
dbmgnu  gnus reinterpretation of dbm
source code libdbmgnu
pythis module is quite similar to the dbm module but uses the gnulibrary gdbm instead to provide some additional functionality
please note that the file formats created by dbm
gnu and dbm
ndbmare incompatible
the dbm
gnu module provides an interface to the gnu dbm library
dbm
gdbm objects behave like mappings dictionaries exceptthat keys and values are always converted to bytes before storing
printing a gdbm object doesnt print the keys and values and theitems and values methods are not supported
error   raised on dbm
gnuspecific errors such as io errors
 keyerror   is raised for general mapping errors like specifying an incorrect   key
openfilename flag mode   open a gdbm database and return a gdbm object
  the filename   argument is the name of the database file
   the optional flag argument can be       value      meaning                                            r      open existing database for reading only                    default                                          w      open existing database for reading and                     writing                                            c      open database for reading and writing                     creating it if it doesnt exist                    n      always create a new empty database open                  for reading and writing                           the following additional characters may be appended to the flag to   control how the database is opened       value      meaning                                             f      open the database in fast mode
  writes to                  the database will not be synchronized
              s      synchronized mode
 this will cause changes                  to the database to be immediately written to                the file
                                           u      do not lock database
                              not all flags are valid for all versions of gdbm
  the module   constant openflags is a string of supported flag characters
   the exception error is raised if an invalid flag is specified
   the optional mode argument is the unix mode of the file used   only when the database has to be created
  it defaults to octal   0o666
   in addition to the dictionarylike methods gdbm objects have the   following methods   gdbm
firstkey      its possible to loop over every key in the database using this      method  and the nextkey method
  the traversal is ordered by      gdbms internal hash values and wont be sorted by the key      values
  this method returns the starting key
nextkeykey      returns the key that follows key in the traversal
  the      following code prints every key in the database db without      having to create a list in memory that contains them all         k  db
reorganize      if you have carried out a lot of deletions and would like to      shrink the space used by the gdbm file this routine will      reorganize the database
  gdbm objects will not shorten the      length of a database file except by using this reorganization      otherwise deleted file space will be kept and reused as new      key value pairs are added
sync      when the database has been opened in fast mode this method      forces any unwritten data to be written to the disk
close      close the gdbm database
dbmndbm  interface based on ndbm
source code libdbmndbm
pythe dbm
ndbm module provides an interface to the unix ndbmlibrary
 dbm objects behave like mappings dictionaries except thatkeys and values are always stored as bytes
 printing a dbm objectdoesnt print the keys and values and the items and valuesmethods are not supported
this module can be used with the classic ndbm interface or the gnugdbm compatibility interface
 on unix the configure script willattempt to locate the appropriate header file to simplify buildingthis module
error   raised on dbm
ndbmspecific errors such as io errors
   keyerror is raised for general mapping errors like specifying an   incorrect key
library   name of the ndbm implementation library used
openfilename flag mode   open a dbm database and return a ndbm object
  the filename   argument is the name of the database file without the 
dir or   
pag extensions
   the optional flag argument must be one of these values       value      meaning                                            r      open existing database for reading only                    default                                          w      open existing database for reading and                     writing                                            c      open database for reading and writing                     creating it if it doesnt exist                    n      always create a new empty database open                  for reading and writing                           the optional mode argument is the unix mode of the file used   only when the database has to be created
  it defaults to octal   0o666 and will be modified by the prevailing umask
   in addition to the dictionarylike methods ndbm objects provide   the following method   ndbm
close      close the ndbm database
dbmdumb  portable dbm implementation
source code libdbmdumb
pynote  the dbm
dumb module is intended as a last resort fallback for the  dbm module when a more robust module is not available
 the  dbm
dumb module is not written for speed and is not nearly as  heavily used as the other database modules
the dbm
dumb module provides a persistent dictionarylike interfacewhich is written entirely in python
  unlike other modules such asdbm
gnu no external library is required
  as with other persistentmappings the keys and values are always stored as bytes
the module defines the followingexception dbm
error   raised on dbm
dumbspecific errors such as io errors
   keyerror is raised for general mapping errors like specifying an   incorrect key
openfilename flag mode   open a dumbdbm database and return a dumbdbm object
  the   filename argument is the basename of the database file without   any specific extensions
  when a dumbdbm database is created   files with 
dat and 
dir extensions are created
   the optional flag argument can be       value      meaning                                            r      open existing database for reading only                    default                                          w      open existing database for reading and                     writing                                            c      open database for reading and writing                     creating it if it doesnt exist                    n      always create a new empty database open                  for reading and writing                           the optional mode argument is the unix mode of the file used   only when the database has to be created
  it defaults to octal   0o666 and will be modified by the prevailing umask
   warning     it is possible to crash the python interpreter when loading a     database with a sufficiently largecomplex entry due to stack     depth limitations in pythons ast compiler
   changed in version 3
5 open always creates a new database when   the flag has the value n
   changed in version 3
8 a database opened with flags r is now   readonly
  opening with flags r and w no longer creates a   database if it does not exist
   in addition to the methods provided by the   collections
mutablemapping class dumbdbm objects provide   the following methods   dumbdbm
sync      synchronize the ondisk directory and data files
  this method      is called by the shelve
sync method
close      close the dumbdbm database
zoneinfo  iana time zone support
new in version 3
9
the zoneinfo module provides a concrete time zone implementation tosupport the iana time zone database as originally specified in pep615
 by default zoneinfo uses the systems time zone data ifavailable if no system time zone data is available the library willfall back to using the firstparty tzdata package available on pypi
see also  module datetime     provides the time and datetime types with which the     zoneinfo class is designed to be used
  package tzdata     firstparty package maintained by the cpython core developers to     supply time zone data via pypi
using zoneinfo
zoneinfo is a concrete implementation of the datetime
tzinfoabstract base class and is intended to be attached to tzinfoeither via the constructor the datetime
replace method ordatetime
astimezone    from zoneinfo import zoneinfo    from datetime import datetime timedelta    dt  datetime2020 10 31 12 tzinfozoneinfoamericalosangeles    printdt   20201031 1200000700    dt
tzname   pdtdatetimes constructed in this way are compatible with datetimearithmetic and handle daylight saving time transitions with no furtherintervention    dtadd  dt  timedeltadays1    printdtadd   20201101 1200000800    dtadd
tzname   pstthese time zones also support the fold attribute introduced in pep495
  during offset transitions which induce ambiguous times suchas a daylight saving time to standard time transition the offsetfrom before the transition is used when fold0 and the offsetafter the transition is used when fold1 for example    dt  datetime2020 11 1 1 tzinfozoneinfoamericalosangeles    printdt   20201101 0100000700    printdt
replacefold1   20201101 0100000800when converting from another time zone the fold will be set to thecorrect value    from datetime import timezone    losangeles  zoneinfoamericalosangeles    dtutc  datetime2020 11 1 8 tzinfotimezone
data sources
the zoneinfo module does not directly provide time zone data andinstead pulls time zone information from the system time zone databaseor the firstparty pypi package tzdata if available
 some systemsincluding notably windows systems do not have an iana databaseavailable and so for projects targeting crossplatform compatibilitythat require time zone data it is recommended to declare a dependencyon tzdata
 if neither system data nor tzdata are available all callsto zoneinfo will raise zoneinfonotfounderror
configuring the data sources
when zoneinfokey is called the constructor first searches thedirectories specified in tzpath for a file matching key and onfailure looks for a match in the tzdata package
 this behavior can beconfigured in three ways1
 the default tzpath when not otherwise specified can be configured   at compile time
 tzpath can be configured using an environment variable
 at runtime the search path can be manipulated using the   resettzpath function
compiletime configurationthe default tzpath includes several common deployment locations forthe time zone database except on windows where there are no wellknown locations for time zone data
 on posix systems downstreamdistributors and those building python from source who know wheretheir system time zone data is deployed may change the default timezone path by specifying the compiletime option tzpath or morelikely the configure flag withtzpath which should be astring delimited by os
pathsep
on all platforms the configured value is available as the tzpathkey in sysconfig
getconfigvar
environment configurationwhen initializing tzpath either at import time or wheneverresettzpath is called with no arguments the zoneinfo modulewill use the environment variable pythontzpath if it exists to setthe search path
pythontzpath   this is an os
pathsepseparated string containing the time zone   search path to use
 it must consist of only absolute rather than   relative paths
 relative components specified in pythontzpath   will not be used but otherwise the behavior when a relative path   is specified is implementationdefined cpython will raise   invalidtzpathwarning but other implementations are free to   silently ignore the erroneous component or raise an exception
to set the system to ignore the system data and use the tzdata packageinstead set pythontzpath
runtime configurationthe tz search path can also be configured at runtime using theresettzpath function
 this is generally not an advisableoperation though it is reasonable to use it in test functions thatrequire the use of a specific time zone path or require disablingaccess to the system time zones
the zoneinfo class
string representations
the string representation returned when calling str on a zoneinfoobject defaults to using the zoneinfo
key attribute see the note onusage in the attribute documentation    zone  zoneinfopacifickwajalein    strzone   pacifickwajalein    dt  datetime2020 4 1 3 15 tzinfozone    fdt
tzinfo   20200401t0315001200 pacifickwajaleinfor objects constructed from a file without specifying a keyparameter str falls back to calling repr
 zoneinfos repris implementationdefined and not necessarily stable between versionsbut it is guaranteed not to be a valid zoneinfo key
pickle serialization
rather than serializing all transition data zoneinfo objects areserialized by key and zoneinfo objects constructed from files eventhose with a value for key specified cannot be pickled
the behavior of a zoneinfo file depends on how it was constructed1
 zoneinfokey when constructed with the primary constructor a   zoneinfo object is serialized by key and when deserialized the   deserializing process uses the primary and thus it is expected that   these are expected to be the same object as other references to the   same time zone
  for example if europeberlinpkl is a string   containing a pickle constructed from zoneinfoeuropeberlin   one would expect the following behavior       a  zoneinfoeuropeberlin       b  pickle
nocachekey when constructed from the cachebypassing   constructor the zoneinfo object is also serialized by key but   when deserialized the deserializing process uses the cache   bypassing constructor
 if europeberlinpklnc is a string   containing a pickle constructed from   zoneinfo
nocacheeuropeberlin one would expect the   following behavior       a  zoneinfoeuropeberlin       b  pickle
fromfilefobj  keynone when constructed from a   file the zoneinfo object raises an exception on pickling
 if an   end user wants to pickle a zoneinfo constructed from a file it   is recommended that they use a wrapper type or a custom   serialization function either serializing by key or storing the   contents of the file object and serializing that
this method of serialization requires that the time zone data for therequired key be available on both the serializing and deserializingside similar to the way that references to classes and functions areexpected to exist in both the serializing and deserializingenvironments
 it also means that no guarantees are made about theconsistency of results when unpickling a zoneinfo pickled in anenvironment with a different version of the time zone data
functions
availabletimezones   get a set containing all the valid keys for iana time zones   available anywhere on the time zone path
 this is recalculated on   every call to the function
   this function only includes canonical zone names and does not   include special zones such as those under the posix and   right directories or the posixrules zone
   caution     this function may open a large number of files as the best way     to determine if a file on the time zone path is a valid time zone     is to read the magic string at the beginning
   note     these values are not designed to be exposed to endusers for     user facing elements applications should use something like cldr     the unicode common locale data repository to get more user     friendly strings
 see also the cautionary note on zoneinfo
key
resettzpathtonone   sets or resets the time zone search path tzpath for the module
   when called with no arguments tzpath is set to the default   value
   calling resettzpath will not invalidate the zoneinfo cache   and so calls to the primary zoneinfo constructor will only use   the new tzpath in the case of a cache miss
   the to parameter must be a sequence of strings or os
pathlike   and not a string all of which must be absolute paths
 valueerror   will be raised if something other than an absolute path is passed
globals
tzpath   a readonly sequence representing the time zone search path  when   constructing a zoneinfo from a key the key is joined to each   entry in the tzpath and the first file found is used
   tzpath may contain only absolute paths never relative paths   regardless of how it is configured
   the object that zoneinfo
tzpath points to may change in response   to a call to resettzpath so it is recommended to use   zoneinfo
tzpath rather than importing tzpath from zoneinfo or   assigning a longlived variable to zoneinfo
tzpath
   for more information on configuring the time zone search path see   configuring the data sources
exceptions and warnings
zoneinfonotfounderror   raised when construction of a zoneinfo object fails because the   specified key could not be found on the system
 this is a subclass   of keyerror
invalidtzpathwarning   raised when pythontzpath contains an invalid component that will   be filtered out such as a relative path
fileinput  iterate over lines from multiple input streams
binary data services
the modules described in this chapter provide some basic servicesoperations for manipulation of binary data
 other operations on binarydata specifically in relation to file formats and network protocolsare described in the relevant sections
some libraries described under text processing services also work witheither asciicompatible binary formats for example re or allbinary data for example difflib
in addition see the documentation for pythons builtin binary datatypes in binary sequence types  bytes bytearray memoryview
 struct  interpret bytes as packed binary data   functions and exceptions   format strings     byte order size and alignment     format characters     examples   classes codecs  codec registry and base classes   codec base classes     error handlers     stateless encoding and decoding     incremental encoding and decoding       incrementalencoder objects       incrementaldecoder objects     stream encoding and decoding       streamwriter objects       streamreader objects       streamreaderwriter objects       streamrecoder objects   encodings and unicode   standard encodings   python specific encodings     text encodings     binary transforms     text transforms   encodings
idna  internationalized domain names in    applications   encodings
mbcs  windows ansi codepage   encodings
utf8sig  utf8 codec with bom signature
aifc  read and write aiff and aifc files
binascii  convert between binary and ascii
numeric and mathematical modules
collections  container datatypes
pythis module implements specialized container datatypes providingalternatives to pythons general purpose builtin containers dictlist set and tuple
 namedtuple         factory function for creating tuple subclasses with named fields      deque                listlike container with fast appends and pops on either end          chainmap             dictlike class for creating a single view of multiple mappings       counter              dict subclass for counting hashable objects                           ordereddict          dict subclass that remembers the order entries were added             defaultdict          dict subclass that calls a factory function to supply missing values  userdict             wrapper around dictionary objects for easier dict subclassing         userlist             wrapper around list objects for easier list subclassing               userstring           wrapper around string objects for easier string subclassing          deprecated since version 3
10 movedcollections abstract base classes to the collections
abc module
 forbackwards compatibility they continue to be visible in this modulethrough python 3
9
chainmap objects
new in version 3
3
a chainmap class is provided for quickly linking a number ofmappings so they can be treated as a single unit
  it is often muchfaster than creating a new dictionary and running multiple updatecalls
the class can be used to simulate nested scopes and is useful intemplating
chainmapmaps   a chainmap groups multiple dicts or other mappings together to   create a single updateable view
  if no maps are specified a   single empty dictionary is provided so that a new chain always has   at least one mapping
   the underlying mappings are stored in a list
  that list is public   and can be accessed or updated using the maps attribute
  there   is no other state
   lookups search the underlying mappings successively until a key is   found
  in contrast writes updates and deletions only operate on   the first mapping
   a chainmap incorporates the underlying mappings by reference
   so if one of the underlying mappings gets updated those changes   will be reflected in chainmap
   all of the usual dictionary methods are supported
  in addition   there is a maps attribute a method for creating new subcontexts   and a property for accessing all but the first mapping   maps      a user updateable list of mappings
  the list is ordered from      firstsearched to lastsearched
  it is the only stored state      and can be modified to change which mappings are searched
  the      list should always contain at least one mapping
   newchildmnone      returns a new chainmap containing a new map followed by all of      the maps in the current instance
  if m is specified it      becomes the new map at the front of the list of mappings if not      specified an empty dict is used so that a call to      d
newchild is equivalent to chainmap d
maps
  this      method is used for creating subcontexts that can be updated      without altering values in any of the parent mappings
      changed in version 3
4 the optional m parameter was added
   parents      property returning a new chainmap containing all of the maps      in the current instance except the first one
  this is useful      for skipping the first map in the search
  use cases are similar      to those for the nonlocal keyword used in nested scopes
      the use cases also parallel those for the builtin super      function
  a reference to d
parents is equivalent to      chainmapd
maps1
   note the iteration order of a chainmap is determined by   scanning the mappings last to first       baseline  music bach art rembrandt       adjustments  art van gogh opera carmen       listchainmapadjustments baseline      music art opera   this gives the same ordering as a series of dict
update calls   starting with the last mapping       combined  baseline
updateadjustments       listcombined      music art opera   changed in version 3
9 added support for  and  operators   specified in pep 584
see also   the multicontext class in the enthought codetools package has    options to support writing to any mapping in the chain
   djangos context class for templating is a readonly chain of    mappings
  it also features pushing and popping of contexts    similar to the newchild method and the parents property
   the nested contexts recipe has options to control whether writes    and other mutations apply only to the first mapping or to any    mapping in the chain
   a greatly simplified readonly version of chainmap
chainmap examples and recipes
this section shows various approaches to working with chained maps
example of simulating pythons internal lookup chain   import builtins   pylookup  chainmaplocals globals varsbuiltinsexample of letting user specified commandline arguments takeprecedence over environment variables which in turn take precedenceover default values   import os argparse   defaults  color red user guest   parser  argparse
environ defaults   printcombinedcolor   printcombineduserexample patterns for using the chainmap class to simulate nestedcontexts   c  chainmap         create root context   d  c
items              all nested items   dictd                flatten into a regular dictionarythe chainmap class only makes updates writes and deletions to thefirst mapping in the chain while lookups will search the full chain
however if deep writes and deletions are desired it is easy to makea subclass that updates keys found deeper in the chain   class deepchainmapchainmap       variant of chainmap that allows direct updates to inner scopes       def setitemself key value           for mapping in self
counter objects
a counter tool is provided to support convenient and rapid tallies
for example     tally occurrences of words in a list    cnt  counter    for word in red blue red green blue blue   
counteriterableormapping   a counter is a dict subclass for counting hashable objects
 it   is a collection where elements are stored as dictionary keys and   their counts are stored as dictionary values
  counts are allowed   to be any integer value including zero or negative counts
  the   counter class is similar to bags or multisets in other languages
   elements are counted from an iterable or initialized from another   mapping or counter    c  counter                            a new empty counter    c  countergallahad                  a new counter from an iterable    c  counterred 4 blue 2       a new counter from a mapping    c  countercats4 dogs8              a new counter from keyword args   counter objects have a dictionary interface except that they return   a zero count for missing items instead of raising a keyerror    c  countereggs ham    cbacon                               count of a missing element is zero   0   setting a count to zero does not remove an element from a counter
   use del to remove it entirely    csausage  0                         counter entry with a zero count    del csausage                         del actually removes the entry   new in version 3
1
   changed in version 3
7 as a dict subclass counter inherited   the capability to remember insertion order
  math operations on   counter objects also preserve order
  results are ordered   according to when an element is first encountered in the left   operand and then by the order encountered in the right operand
   counter objects support three methods beyond those available for   all dictionaries   elements      return an iterator over elements repeating each as many times as      its count
  elements are returned in the order first      encountered
 if an elements count is less than one      elements will ignore it
elements      a a a a b b   mostcommonn      return a list of the n most common elements and their counts      from the most common to the least
  if n is omitted or none      mostcommon returns all elements in the counter
 elements      with equal counts are ordered in the order first encountered       counterabracadabra
mostcommon3      a 5 b 2 r 2   subtractiterableormapping      elements are subtracted from an iterable or from another      mapping or counter
  like dict
update but subtracts      counts instead of replacing them
  both inputs and outputs may      be zero or negative
subtractd       c      countera 3 b 0 c 3 d 6      new in version 3
2
   the usual dictionary methods are available for counter objects   except for two which work differently for counters
   fromkeysiterable      this class method is not implemented for counter objects
   updateiterableormapping      elements are counted from an iterable or addedin from another      mapping or counter
  like dict
update but adds counts      instead of replacing them
  also the iterable is expected to      be a sequence of elements not a sequence of key value      pairs
common patterns for working with counter objects   sumc
mostcommonn11        n least common elements   c                               remove zero and negative countsseveral mathematical operations are provided for combining counterobjects to produce multisets counters that have counts greater thanzero
 addition and subtraction combine counters by adding orsubtracting the counts of corresponding elements
  intersection andunion return the minimum and maximum of corresponding counts
  eachoperation can accept inputs with signed counts but the output willexclude results with counts of zero or less
 c  countera3 b1 d  countera1 b2 c  d                        add two counters together  cx  dxcountera 4 b 3 c  d                        subtract keeping only positive countscountera 2 c  d                        intersection  mincx dx countera 1 b 1 c  d                        union  maxcx dxcountera 3 b 2unary addition and subtraction are shortcuts for adding an emptycounter or subtracting from an empty counter
 c  countera2 b4 ccountera 2 ccounterb 4new in version 3
3 added support for unary plus unary minus and inplace multiset operations
note  counters were primarily designed to work with positive integers to  represent running counts however care was taken to not  unnecessarily preclude use cases needing other types or negative  values
  to help with those use cases this section documents the  minimum range and type restrictions
   the counter class itself is a dictionary subclass with no    restrictions on its keys and values
  the values are intended to    be numbers representing counts but you could store anything in    the value field
   the mostcommon method requires only that the values be    orderable
   for inplace operations such as ckey  1 the value type need    only support addition and subtraction
  so fractions floats and    decimals would work and negative values are supported
  the same    is also true for update and subtract which allow negative    and zero values for both inputs and outputs
   the multiset methods are designed only for use cases with positive    values
 the inputs may be negative or zero but only outputs with    positive values are created
  there are no type restrictions but    the value type needs to support addition subtraction and    comparison
   the elements method requires integer counts
  it ignores zero    and negative counts
see also   bag class in smalltalk
   wikipedia entry for multisets
   c multisets tutorial with examples
   for mathematical operations on multisets and their use cases see    knuth donald
 the art of computer programming volume ii section    4
3 exercise 19
   to enumerate all distinct multisets of a given size over a given    set of elements see itertools
combinationswithreplacement       mapcounter combinationswithreplacementabc 2   aa ab ac bb bc cc
deque objects
deque recipes
this section shows various approaches to working with deques
bounded length deques provide functionality similar to the tailfilter in unix   def tailfilename n10       return the last n lines of a file       with openfilename as f           return dequef nanother approach to using deques is to maintain a sequence of recentlyadded elements by appending to the right and popping to the left   def movingaverageiterable n3        movingaverage40 30 50 46 39 44  40
appendelem           yield s  na roundrobin scheduler can be implemented with input iterators storedin a deque
  values are yielded from the active iterator in positionzero
  if that iterator is exhausted it can be removed withpopleft otherwise it can be cycled back to the end with therotate method   def roundrobiniterables       roundrobinabc d ef  a d e b f c       iterators  dequemapiter iterables       while iterators           try               while true                   yield nextiterators0                   iterators
popleftthe rotate method provides a way to implement deque slicing anddeletion
  for example a pure python implementation of del dnrelies on the rotate method to position elements to be popped   def deletenthd n       d
rotatento implement deque slicing use a similar approach applyingrotate to bring a target element to the left side of the deque
remove old entries with popleft add new entries with extendand then reverse the rotation
 with minor variations on that approachit is easy to implement forth style stack manipulations such as dupdrop swap over pick rot and roll
defaultdict objects
defaultdict examples
using list as the defaultfactory it is easy to group a sequenceof keyvalue pairs into a dictionary of lists s  yellow 1 blue 2 yellow 3 blue 4 red 1 d  defaultdictlist for k v in s
itemsblue 2 4 red 1 yellow 1 3when each key is encountered for the first time it is not already inthe mapping so an entry is automatically created using thedefaultfactory function which returns an empty list
  thelist
append operation then attaches the value to the new list
when keys are encountered again the lookup proceeds normallyreturning the list for that key and the list
append operationadds another value to the list
 this technique is simpler and fasterthan an equivalent technique using dict
setdefault d   for k v in s
itemsblue 2 4 red 1 yellow 1 3setting the defaultfactory to int makes the defaultdict usefulfor counting like a bag or multiset in other languages s  mississippi d  defaultdictint for k in s
itemsi 4 m 1 p 2 s 4when a letter is first encountered it is missing from the mapping sothe defaultfactory function calls int to supply a default countof zero
  the increment operation then builds up the count for eachletter
the function int which always returns zero is just a special caseof constant functions
  a faster and more flexible way to createconstant functions is to use a lambda function which can supply anyconstant value not just zero def constantfactoryvalue
updatenamejohn actionran names actions to objects  djohn ran to missingsetting the defaultfactory to set makes the defaultdict usefulfor building a dictionary of sets s  red 1 blue 2 red 3 blue 4 red 1 blue 4 d  defaultdictset for k v in s
namedtuple factory function for tuples with named fields
named tuples assign meaning to each position in a tuple and allow formore readable selfdocumenting code
  they can be used whereverregular tuples are used and they add the ability to access fields byname instead of position index
namedtupletypename fieldnames  renamefalse defaultsnone modulenone   returns a new tuple subclass named typename
  the new subclass is   used to create tuplelike objects that have fields accessible by   attribute lookup as well as being indexable and iterable
   instances of the subclass also have a helpful docstring with   typename and fieldnames and a helpful repr method which   lists the tuple contents in a namevalue format
   the fieldnames are a sequence of strings such as x y
   alternatively fieldnames can be a single string with each   fieldname separated by whitespace andor commas for example x   y or x y
   any valid python identifier may be used for a fieldname except for   names starting with an underscore
  valid identifiers consist of   letters digits and underscores but do not start with a digit or   underscore and cannot be a keyword such as class for   return global pass or raise
   if rename is true invalid fieldnames are automatically replaced   with positional names
  for example abc def ghi abc   is converted to abc 1 ghi 3 eliminating the   keyword def and the duplicate fieldname abc
   defaults can be none or an iterable of default values
 since   fields with a default value must come after any fields without a   default the defaults are applied to the rightmost parameters
   for example if the fieldnames are x y z and the   defaults are 1 2 then x will be a required argument y   will default to 1 and z will default to 2
   if module is defined the module attribute of the named   tuple is set to that value
   named tuple instances do not have perinstance dictionaries so   they are lightweight and require no more memory than regular   tuples
   changed in version 3
1 added support for rename
   changed in version 3
6 the verbose and rename parameters   became keywordonly arguments
   changed in version 3
6 added the module parameter
   changed in version 3
7 removed the verbose parameter and the   source attribute
   changed in version 3
7 added the defaults parameter and the   fielddefaults attribute
y                fields also accessible by name   33    p                        readable repr with a namevalue style   pointx11 y22named tuples are especially useful for assigning field names to resulttuples returned by the csv or sqlite3 modules   employeerecord  namedtupleemployeerecord name age title department paygrade   import csv   for emp in mapemployeerecord
titlein addition to the methods inherited from tuples named tuples supportthree additional methods and two attributes
  to prevent conflictswith field names the method and attribute names start with anunderscore
makeiterable   class method that makes a new instance from an existing sequence or   iterable
asdict   return a new dict which maps field names to their corresponding   values       p  pointx11 y22       p
asdict      x 11 y 22   changed in version 3
1 returns an ordereddict instead of a   regular dict
   changed in version 3
8 returns a regular dict instead of an   ordereddict
 as of python 3
7 regular dicts are guaranteed to be   ordered
  if the extra features of ordereddict are required the   suggested remediation is to cast the result to the desired type   ordereddictnt
replacekwargs   return a new instance of the named tuple replacing specified fields   with new values       p  pointx11 y22       p
fields   tuple of strings listing the field names
  useful for introspection   and for creating new named tuple types from existing named tuples
fielddefaults   dictionary mapping field names to default values
fielddefaults      balance 0       accountpremium      accounttypepremium balance0to retrieve a field whose name is stored in a string use thegetattr function getattrp x11to convert a dictionary to a named tuple use the doublestaroperatoras described in unpacking argument lists d  x 11 y 22 pointdpointx11 y22since a named tuple is a regular python class it is easy to add orchange functionality with a subclass
  here is how to add a calculatedfield and a fixedwidth print format    class pointnamedtuplepoint x y   
018the subclass shown above sets slots to an empty tuple
  thishelps keep memory requirements low by preventing the creation ofinstance dictionaries
subclassing is not useful for adding new stored fields
  insteadsimply create a new named tuple type from the fields attribute point3d  namedtuplepoint3d point
fields  zdocstrings can be customized by making direct assignments to thedoc fields book  namedtuplebook id title authors book
doc  list of authors sorted by last namechanged in version 3
5 property docstrings became writeable
see also   see typing
namedtuple for a way to add type hints for named    tuples
  it also provides an elegant notation using the class    keyword       class componentnamedtuple           partnumber int           weight float           description optionalstr  none   see types
simplenamespace for a mutable namespace based on an    underlying dictionary instead of a tuple
   the dataclasses module provides a decorator and functions for    automatically adding generated special methods to userdefined    classes
ordereddict objects
ordered dictionaries are just like regular dictionaries but have someextra capabilities relating to ordering operations
  they have becomeless important now that the builtin dict class gained the abilityto remember insertion order this new behavior became guaranteed inpython 3
7
some differences from dict still remain the regular dict was designed to be very good at mapping  operations
  tracking insertion order was secondary
 the ordereddict was designed to be good at reordering operations
  space efficiency iteration speed and the performance of update  operations were secondary
 algorithmically ordereddict can handle frequent reordering  operations better than dict
  this makes it suitable for tracking  recent accesses for example in an lru cache
 the equality operation for ordereddict checks for matching order
 the popitem method of ordereddict has a different signature
  it accepts an optional argument to specify which item is popped
 ordereddict has a movetoend method to efficiently reposition  an element to an endpoint
 until python 3
8 dict lacked a reversed method
ordereddictitems   return an instance of a dict subclass that has methods   specialized for rearranging dictionary order
   new in version 3
1
   popitemlasttrue      the popitem method for ordered dictionaries returns and      removes a key value pair
  the pairs are returned in lifo      lastin firstout order if last is true or fifo firstin      firstout order if false
   movetoendkey lasttrue      move an existing key to either end of an ordered dictionary
      the item is moved to the right end if last is true the      default or to the beginning if last is false
  raises      keyerror if the key does not exist          d  ordereddict
keys         bacde      new in version 3
2
in addition to the usual mapping methods ordered dictionaries alsosupport reverse iteration using reversed
equality tests between ordereddict objects are ordersensitive andare implemented as listod1
items
 equalitytests between ordereddict objects and other mapping objects areorderinsensitive like regular dictionaries
  this allowsordereddict objects to be substituted anywhere a regular dictionaryis used
changed in version 3
5 the items keys and values views ofordereddict now support reverse iteration using reversed
changed in version 3
6 with the acceptance of pep 468 order isretained for keyword arguments passed to the ordereddict constructorand its update method
changed in version 3
9 added merge  and update  operatorsspecified in pep 584
ordereddict examples and recipes
it is straightforward to create an ordered dictionary variant thatremembers the order the keys were last inserted
 if a new entryoverwrites an existing entry the original insertion position ischanged and moved to the end   class lastupdatedordereddictordereddict       store items in the order the keys were last added       def setitemself key value           super
movetoendkeyan ordereddict would also be useful for implementing variants offunctools
lrucache   class lruordereddict       limit size evicting the least recently lookedup key when full       def initself maxsize128  args kwds           self
userdict objects
the class userdict acts as a wrapper around dictionary objects
 theneed for this class has been partially supplanted by the ability tosubclass directly from dict however this class can be easier towork with because the underlying dictionary is accessible as anattribute
userdictinitialdata   class that simulates a dictionary
  the instances contents are   kept in a regular dictionary which is accessible via the data   attribute of userdict instances
  if initialdata is provided   data is initialized with its contents note that a reference to   initialdata will not be kept allowing it be used for other   purposes
   in addition to supporting the methods and operations of mappings   userdict instances provide the following attribute   data      a real dictionary used to store the contents of the userdict      class
userlist objects
this class acts as a wrapper around list objects
  it is a useful baseclass for your own listlike classes which can inherit from them andoverride existing methods or add new ones
  in this way one can addnew behaviors to lists
the need for this class has been partially supplanted by the abilityto subclass directly from list however this class can be easier towork with because the underlying list is accessible as an attribute
userlistlist   class that simulates a list
  the instances contents are kept in a   regular list which is accessible via the data attribute of   userlist instances
  the instances contents are initially set to   a copy of list defaulting to the empty list 
  list can be   any iterable for example a real python list or a userlist   object
   in addition to supporting the methods and operations of mutable   sequences userlist instances provide the following attribute   data      a real list object used to store the contents of the      userlist class
subclassing requirements subclasses of userlist are expected tooffer a constructor which can be called with either no arguments orone argument
  list operations which return a new sequence attempt tocreate an instance of the actual implementation class
  to do so itassumes that the constructor can be called with a single parameterwhich is a sequence object used as a data source
if a derived class does not wish to comply with this requirement allof the special methods supported by this class will need to beoverridden please consult the sources for information about themethods which need to be provided in that case
userstring objects
the class userstring acts as a wrapper around string objects
 theneed for this class has been partially supplanted by the ability tosubclass directly from str however this class can be easier towork with because the underlying string is accessible as an attribute
userstringseq   class that simulates a string object
  the instances content is   kept in a regular string object which is accessible via the data   attribute of userstring instances
  the instances contents are   initially set to a copy of seq
  the seq argument can be any   object which can be converted into a string using the builtin   str function
   in addition to supporting the methods and operations of strings   userstring instances provide the following attribute   data      a real str object used to store the contents of the      userstring class
   changed in version 3
5 new methods getnewargs rmod   casefold formatmap isprintable and maketrans
symtable  access to the compilers symbol tables
generating symbol tables
examining symbol tables
      for example          table  symtable
functional programming modules
the modules described in this chapter provide functions and classesthat support a functional programming style and general operations oncallables
the following modules are documented in this chapter itertools  functions creating iterators for efficient looping   itertool functions   itertools recipes functools  higherorder functions and operations on callable  objects   partial objects operator  standard operators as functions   mapping operators to functions   inplace operators
emailcharset representing character sets
the remaining text in this section is the original documentation ofthe module
cmd  support for lineoriented command interpreters
source code libcmd
pythe cmd class provides a simple framework for writing lineorientedcommand interpreters
  these are often useful for test harnessesadministrative tools and prototypes that will later be wrapped in amore sophisticated interface
cmdcompletekeytab stdinnone stdoutnone   a cmd instance or subclass instance is a lineoriented   interpreter framework
  there is no good reason to instantiate   cmd itself rather its useful as a superclass of an interpreter   class you define yourself in order to inherit cmds methods and   encapsulate action methods
   the optional argument completekey is the readline name of a   completion key it defaults to tab
 if completekey is not   none and readline is available command completion is done   automatically
   the optional arguments stdin and stdout specify the  input and   output file objects that the cmd instance or subclass  instance   will use for input and output
 if not specified they will default   to sys
stdin and sys
stdout
   if you want a given stdin to be used make sure to set the   instances userawinput attribute to false otherwise stdin   will be ignored
cmd objects
cmd example
this section presents a simple example of how to build a shell arounda few of the commands in the turtle module
basic turtle commands such as forward are added to a cmdsubclass with method named doforward
  the argument is convertedto a number and dispatched to the turtle module
  the docstring isused in the help utility provided by the shell
the example also includes a basic record and playback facilityimplemented with the precmd method which is responsible forconverting the input to lowercase and writing the commands to a file
the doplayback method reads the file and adds the recordedcommands to the cmdqueue for immediate playback   import cmd sys   from turtle import    class turtleshellcmd
cmdloophere is a sample session with the turtle shell showing the helpfunctions using blank lines to repeat commands and the simple recordand playback facility   welcome to the turtle shell
msilib  read and write microsoft installer files
see also fcicreate uuidcreate uuidtostring
database objects
   new in version 3
7
see also  msidatabaseopenview msidatabasecommit msigetsummaryinformation  msiclosehandle
view objects
see also  msiviewexecute msiviewgetcolumninfo msiviewfetch msiviewmodify  msiviewclose
summary information objects
see also  msisummaryinfogetproperty msisummaryinfogetpropertycount  msisummaryinfosetproperty msisummaryinfopersist
record objects
see also  msirecordgetfieldcount msirecordsetstring msirecordsetstream  msirecordsetinteger msirecordcleardata
errors
cab objects
directory objects
see also  directory table file table component table featurecomponents table
features
see also feature table
gui classes
see also  dialog table control table control types controlcondition table  controlevent table eventmapping table radiobutton table
precomputed tables
html  hypertext markup language support
emailmessagemessage representing an email message using the compat32 api
shelve  python object persistence
source code libshelve
pya shelf is a persistent dictionarylike object
  the differencewith dbm databases is that the values not the keys in a shelf canbe essentially arbitrary python objects  anything that the picklemodule can handle
 this includes most class instances recursive datatypes and objects containing lots of shared  subobjects
  the keysare ordinary strings
openfilename flagc protocolnone writebackfalse   open a persistent dictionary
  the filename specified is the base   filename for the underlying database
  as a sideeffect an   extension may be added to the filename and more than one file may   be created
  by default the underlying database file is opened for   reading and writing
  the optional flag parameter has the same   interpretation as the flag parameter of dbm
open
   by default version 3 pickles are used to serialize values
  the   version of the pickle protocol can be specified with the protocol   parameter
   because of python semantics a shelf cannot know when a mutable   persistentdictionary entry is modified
  by default modified   objects are written only when assigned to the shelf see   example
  if the optional writeback parameter is set to true   all entries accessed are also cached in memory and written back on   sync and close this can make it handier to mutate mutable   entries in the persistent dictionary but if many entries are   accessed it can consume vast amounts of memory for the cache and   it can make the close operation very slow since all accessed   entries are written back there is no way to determine which   accessed entries are mutable nor which ones were actually   mutated
   note     do not rely on the shelf being closed automatically always call     close explicitly when you dont need it any more or use     shelve
open as a context manager        with shelve
openspam as db            dbeggs  eggswarning  because the shelve module is backed by pickle it is insecure to  load a shelf from an untrusted source
  like with pickle loading a  shelf can execute arbitrary code
shelf objects support all methods supported by dictionaries
  thiseases the transition from dictionary based scripts to those requiringpersistent storage
two additional methods are supportedshelf
sync   write back all entries in the cache if the shelf was opened with   writeback set to true
  also empty the cache and synchronize   the persistent dictionary on disk if feasible
  this is called   automatically when the shelf is closed with close
close   synchronize and close the persistent dict object
  operations on   a closed shelf will fail with a valueerror
see also  persistent dictionary recipe with widely supported storage formats  and having the speed of native dictionaries
restrictions
example
to summarize the interface key is a string data is an arbitraryobject   import shelve   d  shelve
close                   close itsee also  module dbm     generic interface to dbmstyle databases
  module pickle     object serialization used by shelve
tkintertix  extension widgets for tk
pydeprecated since version 3
6 this tk extension is unmaintained andshould not be used in new code
see also  tix homepage     the home page for tix
using tix
tix widgets
basic widgets
file selectors
hierarchical listbox
tabular listbox
manager widgets
image types
miscellaneous widgets
form geometry manager
tix commands
grp  the group database
this module provides access to the unix group database
 it isavailable on all unix versions
group database entries are reported as a tuplelike object whoseattributes correspond to the members of the group structureattribute field below see pwd
h index    attribute    meaning                            0        grname      the name of the group              1        grpasswd    the encrypted group password                          often empty                        2        grgid       the numerical group id             3        grmem       all the group members  user                             names                             the gid is an integer name and password are strings and the memberlist is a list of strings
 note that most users are not explicitlylisted as members of the group they are in according to the passworddatabase
  check both databases to get complete membershipinformation
  also note that a grname that starts with a  or is likely to be a ypnis reference and may not be accessible viagetgrnam or getgrgid
it defines the following itemsgrp
getgrgidgid   return the group database entry for the given numeric group id
   keyerror is raised if the entry asked for cannot be found
   deprecated since version 3
6 since python 3
6 the support of non   integer arguments like floats or strings in getgrgid is   deprecated
getgrnamname   return the group database entry for the given group name
   keyerror is raised if the entry asked for cannot be found
getgrall   return a list of all available group entries in arbitrary order
see also  module pwd     an interface to the user database similar to this
  module spwd     an interface to the shadow password database similar to this
email  an email and mime handling package
source code libemailinit
changed in version 3
6 docs reorganized and rewritten to promote thenew emailmessageemailpolicy api
message representing an email message email
parser parsing email messages   feedparser api   parser api   additional notes email
errors exception and defect classes email
contentmanager managing mime content   content manager instances email exampleslegacy api email
encoders encoders email
utils miscellaneous utilities email
iterators iteratorssee also  module smtplib     smtp simple mail transport protocol client  module poplib     pop post office protocol client  module imaplib     imap internet message access protocol client  module nntplib     nntp net news transport protocol client  module mailbox     tools for creating reading and managing collections of messages     on disk using a variety standard formats
venv  creation of virtual environments
new in version 3
3
source code libvenvthe venv module provides support for creating lightweight virtualenvironments with their own site directories optionally isolatedfrom system site directories
  each virtual environment has its ownpython binary which matches the version of the binary that was usedto create this environment and can have its own independent set ofinstalled python packages in its site directories
see pep 405 for more information about python virtualenvironments
see also  python packaging user guide creating and using virtual environments
creating virtual environments
api
an example of extending envbuilder
locale  internationalization services
background details hints tips and caveats
for extension writers and programs that embed python
access to message catalogs
platform support
the asyncio module is designed to be portable but some platformshave subtle differences and limitations due to the platformsunderlying architecture and capabilities
all platforms
addreader and loop
addwriter cannot be used to  monitor file io
windows
subprocess support on windows
on windows the default event loop proactoreventloop supportssubprocesses whereas selectoreventloop does not
the policy
setchildwatcher function is also not supported asproactoreventloop has a different mechanism to watch childprocesses
macos
modern macos versions are fully supported
8 on macos 10
7 and 10
8 the default event loop usesselectors
kqueueselector which does not support character deviceson these versions
  the selectoreventloop can be manually configuredto use selectselector or pollselector to support character deviceson these older versions of macos
  example   import asyncio   import selectors   selector  selectors
main  toplevel script environment
generic operating system services
program frameworks
the modules described in this chapter are frameworks that will largelydictate the structure of your program
  currently the modulesdescribed  here are all oriented toward writing commandlineinterfaces
the full list of modules described in this chapter is turtle  turtle graphics   introduction   overview of available turtle and screen methods     turtle methods     methods of turtlescreenscreen   methods of rawturtleturtle and corresponding functions     turtle motion     tell turtles state     settings for measurement     pen control       drawing state       color control       filling       more drawing control     turtle state       visibility       appearance     using events     special turtle methods     compound shapes   methods of turtlescreenscreen and corresponding functions     window control     animation control     using screen events     input methods     settings and special methods     methods specific to screen not inherited from turtlescreen   public classes   help and configuration     how to use help     translation of docstrings into different languages     how to configure screen and turtles   turtledemo  demo scripts   changes since python 2
6   changes since python 3
0 cmd  support for lineoriented command interpreters   cmd objects   cmd example shlex  simple lexical analysis   shlex objects   parsing rules   improved compatibility with shells
tempfile  generate temporary files and directories
examples
here are some examples of typical usage of the tempfile module    import tempfile    create a temporary file and write some data to it    fp  tempfile
deprecated functions and variables
a historical way to create temporary files was to first generate afile name with the mktemp function and then create a file usingthis name
 unfortunately this is not secure because a differentprocess may create a file with this name in the time between the callto mktemp and the subsequent attempt to create the file by thefirst process
 the solution is to combine the two steps and create thefile immediately
 this approach is used by mkstemp and the otherfunctions described above
mktempsuffix prefixtmp dirnone   deprecated since version 2
3 use mkstemp instead
   return an absolute pathname of a file that did not exist at the   time the call is made
  the prefix suffix and dir arguments   are similar to those of mkstemp except that bytes file names   suffixnone and prefixnone are not supported
   warning     use of this function may introduce a security hole in your     program
  by the time you get around to doing anything with the     file name it returns someone else may have beaten you to the     punch
  mktemp usage can be replaced easily with     namedtemporaryfile passing it the deletefalse parameter         f  namedtemporaryfiledeletefalse         f
pdb  the python debugger
debugger commands
data persistence
xmldomminidom  minimal dom implementation
warning  the xml
  if you need to parse untrusted or unauthenticated  data see xml vulnerabilities
see also  document object model dom level 1 specification     the w3c recommendation for the dom supported by     xml
dom objects
   changed in version 3
8 the writexml method now preserves the   attribute order specified by the user
   changed in version 3
8 the toxml method now preserves the   attribute order specified by the user
   changed in version 3
8 the toprettyxml method now preserves   the attribute order specified by the user
dom example
minidom and the dom standard
 footnotes 1 the encoding name included in the xml output should conform to the    appropriate standards
contextvars  context variables
this module provides apis to manage store and access contextlocalstate
  the contextvar class is used to declare and work withcontext variables
  the copycontext function and the contextclass should be used to manage the current context in asynchronousframeworks
context managers that have state should use context variables insteadof threading
local to prevent their state from bleeding to othercode unexpectedly when used in concurrent code
see also pep 567 for additional details
new in version 3
7
context variables
manual context management
asyncio support
context variables are natively supported in asyncio and are ready tobe used without any extra configuration
  for example here is asimple echo server that uses a context variable to make the addressof a remote client available in the task that handles that client   import asyncio   import contextvars   clientaddrvar  contextvars
concurrent execution
the modules described in this chapter provide support for concurrentexecution of code
 the appropriate choice of tool will depend on thetask to be executed cpu bound vs io bound and preferred style ofdevelopment event driven cooperative multitasking vs preemptivemultitasking
 heres an overview threading  threadbased parallelism   threadlocal data   thread objects   lock objects   rlock objects   condition objects   semaphore objects     semaphore example   event objects   timer objects   barrier objects   using locks conditions and semaphores in the with statement multiprocessing  processbased parallelism   introduction     the process class     contexts and start methods     exchanging objects between processes     synchronization between processes     sharing state between processes     using a pool of workers   reference     process and exceptions     pipes and queues     miscellaneous     connection objects     synchronization primitives     shared ctypes objects       the multiprocessing
sharedctypes module     managers       customized managers       using a remote manager     proxy objects       cleanup     process pools     listeners and clients       address formats     authentication keys     logging     the multiprocessing
dummy module   programming guidelines     all start methods     the spawn and forkserver start methods   examples multiprocessing
sharedmemory   provides shared memory for  direct access across processes the concurrent package concurrent
futures  launching parallel tasks   executor objects   threadpoolexecutor     threadpoolexecutor example   processpoolexecutor     processpoolexecutor example   future objects   module functions   exception classes subprocess  subprocess management   using the subprocess module     frequently used arguments     popen constructor     exceptions   security considerations   popen objects   windows popen helpers     windows constants   older highlevel api   replacing older functions with the subprocess module     replacing binsh shell command substitution     replacing shell pipeline     replacing os
system     replacing the os
spawn family     replacing os
popen3     replacing functions from the popen2 module   legacy shell invocation functions   notes     converting an argument sequence to a string on windows sched  event scheduler   scheduler objects queue  a synchronized queue class   queue objects   simplequeue objectsthe following are support modules for some of the above services thread  lowlevel threading api
numbers  numeric abstract base classes
source code libnumbers
pythe numbers module pep 3141 defines a hierarchy of numericabstract base classes which progressively define more operations
none of the types defined in this module can be instantiated
number   the root of the numeric hierarchy
 if you just want to check if an   argument x is a number without caring what kind use   isinstancex number
the numeric tower
complex   subclasses of this type describe complex numbers and include the   operations that work on the builtin complex type
 these are   conversions to complex and bool real imag       abs conjugate  and 
 all except  and    are abstract
   real      abstract
 retrieves the real component of this number
   imag      abstract
 retrieves the imaginary component of this number
   abstractmethod conjugate      abstract
 returns the complex conjugate
 for example      13j
real   to complex real adds the operations that work on real numbers
   in short those are a conversion to float math
trunc   round math
floor math
ceil divmod        and 
   real also provides defaults for complex real imag and   conjugate
rational   subtypes real and adds numerator and denominator properties   which should be in lowest terms
 with these it provides a default   for float
   numerator      abstract
   denominator      abstract
integral   subtypes rational and adds a conversion to int
  provides   defaults for float numerator and denominator
  adds   abstract methods for  and bitstring operations        
notes for type implementors
implementors should be careful to make equal numbers equal and hashthem to the same values
 this may be subtle if there are two differentextensions of the real numbers
 for example fractions
fractionimplements hash as follows   def hashself       if self
adding more numeric abcs
there are of course more possible abcs for numbers and this wouldbe a poor hierarchy if it precluded the possibility of adding those
you can add myfoo between complex and real with   class myfoocomplex 
implementing the arithmetic operations
we want to implement the arithmetic operations so that mixedmodeoperations either call an implementation whose author knew about thetypes of both arguments or convert both to the nearest built in typeand do the operation there
 for subtypes of integral this meansthat add and radd should be defined as   class myintegralintegral       def addself other           if isinstanceother myintegral               return domyaddingstuffself other           elif isinstanceother othertypeiknowabout               return domyotheraddingstuffself other           else               return notimplemented       def raddself other           if isinstanceother myintegral               return domyaddingstuffother self           elif isinstanceother othertypeiknowabout               return domyotheraddingstuffother self           elif isinstanceother integral               return intother  intself           elif isinstanceother real               return floatother  floatself           elif isinstanceother complex               return complexother  complexself           else               return notimplementedthere are 5 different cases for a mixedtype operation on subclassesof complex
 if a defines an add which accepts b all is well
 if a falls back to the boilerplate code and it were to return      a value from add wed miss the possibility that b      defines a more intelligent radd so the boilerplate      should return notimplemented from add
 or a may not      implement add at all
   3
 then bs radd gets a chance
 if it accepts a all is      well
 if it falls back to the boilerplate there are no more possible      methods to try so this is where the default implementation      should live
 if b  a python tries b
radd before a
add
 this      is ok because it was implemented with knowledge of a so it      can handle those instances before delegating to complex
if a  complex and b  real without sharing any other knowledgethen the appropriate shared operation is the one involving the builtin complex and both radd s land there so ab  ba
because most of the operations on any given type will be very similarit can be useful to define a helper function which generates theforward and reverse instances of any given operator
 for examplefractions
fraction uses   def operatorfallbacksmonomorphicoperator fallbackoperator       def forwarda b           if isinstanceb int fraction               return monomorphicoperatora b           elif isinstanceb float               return fallbackoperatorfloata b           elif isinstanceb complex               return fallbackoperatorcomplexa b           else               return notimplemented       forward
keyword  testing for python keywords
source code libkeyword
pythis module allows a python program to determine if a string is akeyword
iskeywords   return true if s is a python keyword
kwlist   sequence containing all the keywords defined for the interpreter
   if any keywords are defined to only be active when particular   future statements are in effect these will be included as   well
issoftkeywords   return true if s is a python soft keyword
   new in version 3
9
softkwlist   sequence containing all the soft keywords defined for the   interpreter
  if any soft keywords are defined to only be active   when particular future statements are in effect these will   be included as well
   new in version 3
9
zlib  compression compatible with gzip
secrets  generate secure random numbers for managing secrets
new in version 3
6
source code libsecrets
pythe secrets module is used for generating cryptographically strongrandom numbers suitable for managing data such as passwords accountauthentication security tokens and related secrets
in particular secrets should be used in preference to the defaultpseudorandom number generator in the random module which isdesigned for modelling and simulation not security or cryptography
see also pep 506
random numbers
the secrets module provides access to the most secure source ofrandomness that your operating system provides
systemrandom   a class for generating random numbers using the highestquality   sources provided by the operating system
  see   random
systemrandom for additional details
choicesequence   return a randomlychosen element from a nonempty sequence
randbelown   return a random int in the range 0 n
randbitsk   return an int with k random bits
generating tokens
the secrets module provides functions for generating secure tokenssuitable for applications such as password resets hardtoguess urlsand similar
tokenbytesnbytesnone   return a random byte string containing nbytes number of bytes
 if   nbytes is none or not supplied a reasonable default is used
tokenhexnbytesnone   return a random text string in hexadecimal
  the string has   nbytes random bytes each byte converted to two hex digits
  if   nbytes is none or not supplied a reasonable default is used
tokenurlsafenbytesnone   return a random urlsafe text string containing nbytes random   bytes
  the text is base64 encoded so on average each byte results   in approximately 1
3 characters
  if nbytes is none or not   supplied a reasonable default is used
how many bytes should tokens use
to be secure against bruteforce attacks tokens need to havesufficient randomness
  unfortunately what is considered sufficientwill necessarily increase as computers get more powerful and able tomake more guesses in a shorter period
  as of 2015 it is believedthat 32 bytes 256 bits of randomness is sufficient for the typicalusecase expected for the secrets module
for those who want to manage their own token length you canexplicitly specify how much randomness is used for tokens by giving anint argument to the various token functions
  that argument istaken as the number of bytes of randomness to use
otherwise if no argument is provided or if the argument is nonethe token functions will use a reasonable default instead
note  that default is subject to change at any time including during  maintenance releases
other functions
comparedigesta b   return true if strings a and b are equal otherwise false   in such a way as to reduce the risk of timing attacks
 see   hmac
comparedigest for additional details
recipes and best practices
this section shows recipes and best practices for using secrets tomanage a basic level of security
generate an eightcharacter alphanumeric password   import string   import secrets   alphabet  string
choicealphabet for i in range8note  applications should not store passwords in a recoverable format  whether plain text or encrypted
  they should be salted and hashed  using a cryptographicallystrong oneway irreversible hash  function
generate a tencharacter alphanumeric password with at least onelowercase character at least one uppercase character and at leastthree digits   import string   import secrets   alphabet  string
isdigit for c in password  3           breakgenerate an xkcdstyle passphrase   import secrets    on standard linux systems use a convenient dictionary file
choicewords for i in range4generate a hardtoguess temporary url containing a security tokensuitable for password recovery applications   import secrets   url  httpsmydomain
synchronization primitives
source code libasynciolocks
pyasyncio synchronization primitives are designed to be similar to thoseof the threading module with two important caveats asyncio primitives are not threadsafe therefore they should not be  used for os thread synchronization use threading for that methods of these synchronization primitives do not accept the  timeout argument use the asyncio
waitfor function to perform  operations with timeouts
asyncio has the following basic synchronization primitives lock event condition semaphore boundedsemaphore
lock
lock loopnone   implements a mutex lock for asyncio tasks
  not threadsafe
   an asyncio lock can be used to guarantee exclusive access to a   shared resource
   the preferred way to use a lock is an async with statement      lock  asyncio
 later      async with lock           access shared state   which is equivalent to      lock  asyncio
10 the   loop parameter
   coroutine acquire      acquire the lock
      this method waits until the lock is unlocked sets it to      locked and returns true
      when more than one coroutine is blocked in acquire waiting      for the lock to be unlocked only one coroutine eventually      proceeds
      acquiring a lock is fair the coroutine that proceeds will be      the first coroutine that started waiting on the lock
   release      release the lock
      when the lock is locked reset it to unlocked and return
      if the lock is unlocked a runtimeerror is raised
   locked      return true if the lock is locked
event
event loopnone   an event object
  not threadsafe
   an asyncio event can be used to notify multiple asyncio tasks that   some event has happened
   an event object manages an internal flag that can be set to true   with the set method and reset to false with the clear   method
  the wait method blocks until the flag is set to   true
  the flag is set to false initially
10 the   loop parameter
   example      async def waiterevent          printwaiting for it 
runmain   coroutine wait      wait until the event is set
      if the event is set return true immediately
 otherwise block      until another task calls set
   set      set the event
      all tasks waiting for event to be set will be immediately      awakened
   clear      clear unset the event
      tasks awaiting on wait will now block until the set      method is called again
   isset      return true if the event is set
condition
conditionlocknone  loopnone   a condition object
  not threadsafe
   an asyncio condition primitive can be used by a task to wait for   some event to happen and then get exclusive access to a shared   resource
   in essence a condition object combines the functionality of an   event and a lock
  it is possible to have multiple condition   objects share one lock which allows coordinating exclusive access   to a shared resource between different tasks interested in   particular states of that shared resource
   the optional lock argument must be a lock object or none
  in   the latter case a new lock object is created automatically
10 the   loop parameter
   the preferred way to use a condition is an async with statement      cond  asyncio
wait   which is equivalent to      cond  asyncio
release   coroutine acquire      acquire the underlying lock
      this method waits until the underlying lock is unlocked sets      it to locked and returns true
   notifyn1      wake up at most n tasks 1 by default waiting on this      condition
  the method is noop if no tasks are waiting
      the lock must be acquired before this method is called and      released shortly after
  if called with an unlocked lock a      runtimeerror error is raised
   locked      return true if the underlying lock is acquired
   notifyall      wake up all tasks waiting on this condition
      this method acts like notify but wakes up all waiting      tasks
      the lock must be acquired before this method is called and      released shortly after
  if called with an unlocked lock a      runtimeerror error is raised
   release      release the underlying lock
      when invoked on an unlocked lock a runtimeerror is raised
   coroutine wait      wait until notified
      if the calling task has not acquired the lock when this method      is called a runtimeerror is raised
      this method releases the underlying lock and then blocks until      it is awakened by a notify or notifyall call
 once      awakened the condition reacquires its lock and this method      returns true
   coroutine waitforpredicate      wait until a predicate becomes true
      the predicate must be a callable which result will be      interpreted as a boolean value
  the final value is the return      value
semaphore
boundedsemaphore
boundedsemaphorevalue1  loopnone   a bounded semaphore object
  not threadsafe
   bounded semaphore is a version of semaphore that raises a   valueerror in release if it increases the internal counter   above the initial value
10 the   loop parameter
changed in version 3
9 acquiring a lock using await lock or yieldfrom lock andor with statement with await lock with yieldfrom lock was removed
  use async with lock instead
software packaging and distribution
compileall  bytecompile python libraries
commandline use
 see cached bytecode invalidation for more   information on how python validates bytecode cache files at   runtime
changed in version 3
2 added the i b and h options
changed in version 3
5 added the  j r and qq options
q option was changed to a multilevel value
  b will alwaysproduce a bytecode file ending in 
changed in version 3
7 added the invalidationmode option
changed in version 3
9 added the s p e and hardlinkdupes options
public functions
   changed in version 3
2 added the legacy and optimize   parameter
   changed in version 3
5 added the workers parameter
   changed in version 3
5 quiet parameter was changed to a   multilevel value
   changed in version 3
5 the legacy parameter only writes out   
pyc files not 
pyo files no matter what the value of   optimize is
   changed in version 3
6 accepts a pathlike object
   changed in version 3
7 the invalidationmode parameter was   added
   changed in version 3
2 the invalidationmode parameters   default value is updated to none
   changed in version 3
8 setting workers to 0 now chooses the   optimal number of cores
   changed in version 3
9 added stripdir prependdir   limitsldest and hardlinkdupes arguments
 default value of   maxlevels was changed from 10 to sys
   new in version 3
2
   changed in version 3
5 quiet parameter was changed to a   multilevel value
   changed in version 3
5 the legacy parameter only writes out   
pyc files not 
pyo files no matter what the value of   optimize is
   changed in version 3
7 the invalidationmode parameter was   added
   changed in version 3
2 the invalidationmode parameters   default value is updated to none
   changed in version 3
9 added stripdir prependdir   limitsldest and hardlinkdupes arguments
   changed in version 3
2 added the legacy and optimize   parameter
   changed in version 3
5 quiet parameter was changed to a   multilevel value
   changed in version 3
5 the legacy parameter only writes out   
pyc files not 
pyo files no matter what the value of   optimize is
   changed in version 3
7 the invalidationmode parameter was   added
   changed in version 3
2 the invalidationmode parameters   default value is updated to none
pathlib forcetruesee also  module pycompile     bytecompile a single source file
filecmp  file and directory comparisons
source code libfilecmp
pythe filecmp module defines functions to compare files anddirectories with various optional timecorrectness tradeoffs
 forcomparing files see also the difflib module
the filecmp module defines the following functionsfilecmp
cmpf1 f2 shallowtrue   compare the files named f1 and f2 returning true if they   seem equal false otherwise
   if shallow is true files with identical os
stat signatures   are taken to be equal
  otherwise the contents of the files are   compared
   note that no external programs are called from this function   giving it portability and efficiency
   this function uses a cache for past comparisons and the results   with cache entries invalidated if the os
stat information for   the file changes
  the entire cache may be cleared using   clearcache
cmpfilesdir1 dir2 common shallowtrue   compare the files in the two directories dir1 and dir2 whose   names are given by common
   returns three lists of file names match mismatch errors
   match contains the list of files that match mismatch contains   the names of those that dont and errors lists the names of   files which could not be compared
  files are listed in errors if   they dont exist in one of the directories the user lacks   permission to read them or if the comparison could not be done for   some other reason
   the shallow parameter has the same meaning and default value as   for filecmp
cmp
   for example cmpfilesa b c de will compare ac   with bc and ade with bde
  c and de will each   be in one of the three returned lists
clearcache   clear the filecmp cache
 this may be useful if a file is compared   so quickly after it is modified that it is within the mtime   resolution of the underlying filesystem
   new in version 3
4
the dircmp class
dircmpa b ignorenone hidenone   construct a new directory comparison object to compare the   directories a and b
  ignore is a list of names to ignore   and defaults to filecmp
defaultignores
  hide is a list of   names to hide and defaults to os
pardir
   the dircmp class compares files by doing shallow comparisons as   described for filecmp
cmp
   the dircmp class provides the following methods   report      print to sys
stdout a comparison between a and b
   reportpartialclosure      print a comparison between a and b and common immediate      subdirectories
   reportfullclosure      print a comparison between a and b and common subdirectories      recursively
   the dircmp class offers a number of interesting attributes that   may be used to get various bits of information about the directory   trees being compared
   note that via getattr hooks all attributes are computed   lazily so there is no speed penalty if only those attributes which   are lightweight to compute are used
   left      the directory a
   right      the directory b
   leftlist      files and subdirectories in a filtered by hide and      ignore
   rightlist      files and subdirectories in b filtered by hide and      ignore
   common      files and subdirectories in both a and b
   leftonly      files and subdirectories only in a
   rightonly      files and subdirectories only in b
   commondirs      subdirectories in both a and b
   commonfiles      files in both a and b
   commonfunny      names in both a and b such that the type differs between      the directories or names for which os
stat reports an      error
   samefiles      files which are identical in both a and b using the classs      file comparison operator
   difffiles      files which are in both a and b whose contents differ      according to the classs file comparison operator
   funnyfiles      files which are in both a and b but could not be compared
   subdirs      a dictionary mapping names in commondirs to dircmp objects
defaultignores   new in version 3
4
   list of directories ignored by dircmp by default
here is a simplified example of using the subdirs attribute tosearch recursively through two directories to show common differentfiles    from filecmp import dircmp    def printdifffilesdcmp   
sndhdr  determine type of sound file
pty  pseudoterminal utilities
source code libpty
pythe pty module defines operations for handling the pseudoterminalconcept starting another process and being able to write to and readfrom its controlling terminal programmatically
because pseudoterminal handling is highly platform dependent thereis code to do it only for linux
 the linux code is supposed to workon other platforms but hasnt been tested yet
the pty module defines the following functionspty
fork   fork
 connect the childs controlling terminal to a pseudo   terminal
 return value is pid fd
 note that the child  gets   pid 0 and the fd is invalid
 the parents return value is   the pid of the child and fd is a file descriptor connected to   the childs controlling terminal and also to the childs standard   input and output
openpty   open a new pseudoterminal pair using os
openpty if possible   or emulation code for generic unix systems
 return a pair of file   descriptors master slave for the master and the slave end   respectively
spawnargv masterread stdinread   spawn a process and connect its controlling terminal with the   current processs standard io
 this is often used to baffle   programs which insist on reading from the controlling terminal
 it   is expected that the process spawned behind the pty will eventually   terminate and when it does spawn will return
   the functions masterread and stdinread are passed a file   descriptor which they should read from and they should always   return a byte string
 in order to force spawn to return before the   child process exits an oserror should be thrown
   the default implementation for both functions will read and return   up to 1024 bytes each time the function is called
 the   masterread callback is passed the pseudoterminal’s master file   descriptor to read output from the child process and stdinread   is passed file descriptor 0 to read from the parent processs   standard input
   returning an empty byte string from either callback is interpreted   as an endoffile eof condition and that callback will not be   called after that
 if stdinread signals eof the controlling   terminal can no longer communicate with the parent process or the   child process
 unless the child process will quit without any   input spawn will then loop forever
 if masterread signals eof   the same behavior results on linux at least
   if both callbacks signal eof then spawn will probably never   return unless select throws an error on your platform when   passed three empty lists
 this is a bug documented in issue 26228
   return the exit status value from os
waitpid on the child   process
   waitstatustoexitcode can be used to convert the exit status   into an exit code
   raises an auditing event pty
spawn with argument argv
   changed in version 3
4 spawn now returns the status value from   os
waitpid on the child process
example
xmlsaxsaxutils  sax utilities
source code libxmlsaxsaxutils
pythe module xml
saxutils contains a number of classes andfunctions that are commonly useful when creating sax applicationseither in direct use or as base classes
escapedata entities   escape   and  in a string of data
   you can escape other strings of data by passing a dictionary as the   optional entities parameter
  the keys and values must all be   strings each key will be replaced with its corresponding value
   the characters   and  are always escaped even if   entities is provided
unescapedata entities   unescape amp lt and gt in a string of data
   you can unescape other strings of data by passing a dictionary as   the optional entities parameter
  the keys and values must all be   strings each key will be replaced with its corresponding value
   amp lt and gt are always unescaped even if   entities is provided
quoteattrdata entities   similar to escape but also prepares data to be used as an   attribute value
  the return value is a quoted version of data   with any additional required replacements
 quoteattr will   select a quote character based on the content of data attempting   to avoid encoding any quote characters in the string
  if both   single and doublequote characters are already in data the   doublequote characters will be encoded and data will be wrapped   in doublequotes
  the resulting string can be used directly as an   attribute value       printelement attrs  quoteattrab  cd  ef      element attrab  cd quot ef   this function is useful when generating attribute values for html   or any sgml using the reference concrete syntax
xmlgeneratoroutnone encodingiso88591 shortemptyelementsfalse   this class implements the contenthandler interface by writing sax   events back into an xml document
 in other words using an   xmlgenerator as the content handler will reproduce the original   document being parsed
 out should be a filelike object which   will default to sys
 encoding is the encoding of the   output stream which defaults to iso88591
   shortemptyelements controls the formatting of elements that   contain no content  if false the default they are emitted as a   pair of startend tags if set to true they are emitted as a   single selfclosed tag
   new in version 3
2 the shortemptyelements parameter
xmlfilterbasebase   this class is designed to sit between an xmlreader and the client   applications event handlers
  by default it does nothing but pass   requests up to the reader and events on to the handlers unmodified   but subclasses can override specific methods to modify the event   stream or the configuration requests as they pass through
prepareinputsourcesource base   this function takes an input source and an optional base url and   returns a fully resolved inputsource object ready for reading
   the input source can be given as a string a filelike object or   an inputsource object parsers will use this function to   implement the polymorphic source argument to their parse   method
math  mathematical functions
this module provides access to the mathematical functions defined bythe c standard
these functions cannot be used with complex numbers use the functionsof the same name from the cmath module if you require support forcomplex numbers
  the distinction between functions which supportcomplex numbers and those which dont is made since most users do notwant to learn quite as much mathematics as required to understandcomplex numbers
  receiving an exception instead of a complex resultallows earlier detection of the unexpected complex number used as aparameter so that the programmer can determine how and why it wasgenerated in the first place
the following functions are provided by this module
  except whenexplicitly noted otherwise all return values are floats
numbertheoretic and representation functions
ceilx   return the ceiling of x the smallest integer greater than or   equal to x
 if x is not a float delegates to x
ceil   which should return an integral value
combn k   return the number of ways to choose k items from n items   without repetition and without order
   evaluates to n  k  n  k when k  n and evaluates to   zero when k  n
   also called the binomial coefficient because it is equivalent to   the coefficient of kth term in polynomial expansion of the   expression 1  x  n
   raises typeerror if either of the arguments are not integers
   raises valueerror if either of the arguments are negative
   new in version 3
8
copysignx y   return a float with the magnitude absolute value of x but the   sign of y
  on platforms that support signed zeros   copysign1
0 returns 1
fabsx   return the absolute value of x
factorialx   return x factorial as an integer
  raises valueerror if x is   not integral or is negative
   deprecated since version 3
9 accepting floats with integral values   like 5
0 is deprecated
floorx   return the floor of x the largest integer less than or equal to   x
 if x is not a float delegates to x
floor which   should return an integral value
fmodx y   return fmodx y as defined by the platform c library
 note   that the python expression x  y may not return the same result
   the intent of the c standard is that fmodx y be exactly   mathematically to infinite precision equal to x  ny for some   integer n such that the result has the same sign as x and   magnitude less than absy
  pythons x  y returns a result   with the sign of y instead and may not be exactly computable for   float arguments
 for example fmod1e100 1e100 is 1e100   but the result of pythons 1e100  1e100 is 1e1001e100   which cannot be represented exactly as a float and rounds to the   surprising 1e100
  for this reason function fmod is   generally preferred when working with floats while pythons x    y is preferred when working with integers
frexpx   return the mantissa and exponent of x as the pair m e
  m   is a float and e is an integer such that x  m  2e exactly
   if x is zero returns 0
0 0 otherwise 0
5  absm  1
   this is used to pick apart the internal representation of a float   in a portable way
fsumiterable   return an accurate floating point sum of values in the iterable
   avoids loss of precision by tracking multiple intermediate partial   sums       sum
0   the algorithms accuracy depends on ieee754 arithmetic guarantees   and the typical case where the rounding mode is halfeven
  on some   nonwindows builds the underlying c library uses extended   precision addition and may occasionally doubleround an   intermediate sum causing it to be off in its least significant bit
   for further discussion and two alternative approaches see the aspn   cookbook recipes for accurate floating point summation
gcdintegers   return the greatest common divisor of the specified integer   arguments
 if any of the arguments is nonzero then the returned   value is the largest positive integer that is a divisor of all   arguments
  if all arguments are zero then the returned value is   0
  gcd without arguments returns 0
   new in version 3
5
   changed in version 3
9 added support for an arbitrary number of   arguments
 formerly only two arguments were supported
0   return true if the values a and b are close to each other and   false otherwise
   whether or not two values are considered close is determined   according to given absolute and relative tolerances
   reltol is the relative tolerance  it is the maximum allowed   difference between a and b relative to the larger absolute   value of a or b
 for example to set a tolerance of 5 pass   reltol0
05
  the default tolerance is 1e09 which assures   that the two values are the same within about 9 decimal digits
   reltol must be greater than zero
   abstol is the minimum absolute tolerance  useful for   comparisons near zero
 abstol must be at least zero
   if no errors occur the result will be absab  maxreltol    maxabsa absb abstol
   the ieee 754 special values of nan inf and inf will be   handled according to ieee rules
  specifically nan is not   considered close to any other value including nan
  inf and   inf are only considered close to themselves
   new in version 3
5
   see also     pep 485  a function for testing approximate equalitymath
isfinitex   return true if x is neither an infinity nor a nan and false   otherwise
  note that 0
0 is considered finite
   new in version 3
2
isinfx   return true if x is a positive or negative infinity and   false otherwise
isnanx   return true if x is a nan not a number and false   otherwise
isqrtn   return the integer square root of the nonnegative integer n
 this   is the floor of the exact square root of n or equivalently the   greatest integer a such that a² ≤ n
   for some applications it may be more convenient to have the least   integer a such that n ≤ a² or in other words the ceiling of   the exact square root of n
 for positive n this can be   computed using a  1  isqrtn  1
   new in version 3
8
lcmintegers   return the least common multiple of the specified integer   arguments
 if all arguments are nonzero then the returned value is   the smallest positive integer that is a multiple of all arguments
   if any of the arguments is zero then the returned value is 0
   lcm without arguments returns 1
   new in version 3
9
ldexpx i   return x  2i
  this is essentially the inverse of function   frexp
modfx   return the fractional and integer parts of x
  both results carry   the sign of x and are floats
nextafterx y   return the next floatingpoint value after x towards y
   if x is equal to y return y
   examples    math
inf goes up towards positive infinity
inf goes down towards minus infinity
0 goes towards zero
inf x goes away from     zero
   see also math
   new in version 3
9
permn knone   return the number of ways to choose k items from n items   without repetition and with order
   evaluates to n  n  k when k  n and evaluates to zero   when k  n
   if k is not specified or is none then k defaults to n and   the function returns n
   raises typeerror if either of the arguments are not integers
   raises valueerror if either of the arguments are negative
   new in version 3
8
proditerable  start1   calculate the product of all the elements in the input iterable
   the default start value for the product is 1
   when the iterable is empty return the start value
  this function   is intended specifically for use with numeric values and may reject   nonnumeric types
   new in version 3
8
remainderx y   return the ieee 754style remainder of x with respect to y
   for finite x and finite nonzero y this is the difference x    ny where n is the closest integer to the exact value of the   quotient x  y
  if x  y is exactly halfway between two   consecutive integers the nearest even integer is used for n
   the remainder r  remainderx y thus always satisfies absr    0
5  absy
   special cases follow ieee 754 in particular remainderx   math
inf is x for any finite x and remainderx 0 and   remaindermath
inf x raise valueerror for any nonnan x
 if   the result of the remainder operation is zero that zero will have   the same sign as x
   on platforms using ieee 754 binary floatingpoint the result of   this operation is always exactly representable no rounding error   is introduced
   new in version 3
7
truncx   return the real value x truncated to an integral usually an   integer
 delegates to x
ulpx   return the value of the least significant bit of the float x    if x is a nan not a number return x
    if x is negative return ulpx
    if x is a positive infinity return x
    if x is equal to zero return the smallest positive     denormalized representable float smaller than the minimum     positive normalized float sys
    if x is equal to the largest positive representable float     return the value of the least significant bit of x such that     the first float smaller than x is x  ulpx
    otherwise x is a positive finite number return the value of     the least significant bit of x such that the first float     bigger than x is x  ulpx
   ulp stands for unit in the last place
   see also math
nextafter and sys
   new in version 3
9
note that frexp and modf have a different callreturn patternthan their c equivalents they take a single argument and return apair of values rather than returning their second return valuethrough an output parameter there is no such thing in python
for the ceil floor and modf functions note that allfloatingpoint numbers of sufficiently large magnitude are exactintegers
 python floats typically carry no more than 53 bits ofprecision the same as the platform c double type in which case anyfloat x with absx  252 necessarily has no fractional bits
power and logarithmic functions
expx   return e raised to the power x where e  2
 is the   base of natural logarithms
  this is usually more accurate than   math
e  x or powmath
e x
expm1x   return e raised to the power x minus 1
  here e is the base   of natural logarithms
  for small floats x the subtraction in   expx  1 can result in a significant loss of precision the   expm1 function provides a way to compute this quantity to full   precision       from math import exp expm1       exp1e5  1   gives result accurate to 11 places      1
0000050000166668e05   new in version 3
2
logx base   with one argument return the natural logarithm of x to base   e
   with two arguments return the logarithm of x to the given   base calculated as logxlogbase
log1px   return the natural logarithm of 1x base e
 the result is   calculated in a way which is accurate for x near zero
log2x   return the base2 logarithm of x
 this is usually more accurate   than logx 2
   new in version 3
3
   see also     int
bitlength returns the number of bits necessary to     represent an integer in binary excluding the sign and leading     zeros
log10x   return the base10 logarithm of x
  this is usually more accurate   than logx 10
powx y   return x raised to the power y
  exceptional cases follow annex   f of the c99 standard as far as possible
  in particular   pow1
0 x and powx 0
0 always return 1
0 even when x   is a zero or a nan
  if both x and y are finite x is   negative and y is not an integer then powx y is undefined   and raises valueerror
   unlike the builtin  operator math
pow converts both its   arguments to type float
  use  or the builtin pow   function for computing exact integer powers
sqrtx   return the square root of x
trigonometric functions
acosx   return the arc cosine of x in radians
 the result is between 0   and pi
asinx   return the arc sine of x in radians
 the result is between   pi2 and pi2
atanx   return the arc tangent of x in radians
 the result is between   pi2 and pi2
atan2y x   return atany  x in radians
 the result is between pi and   pi
 the vector in the plane from the origin to point x y   makes this angle with the positive x axis
 the point of atan2   is that the signs of both inputs are known to it so it can compute   the correct quadrant for the angle
 for example atan1 and   atan21 1 are both pi4 but atan21 1 is 3pi4
cosx   return the cosine of x radians
distp q   return the euclidean distance between two points p and q each   given as a sequence or iterable of coordinates
  the two points   must have the same dimension
   roughly equivalent to      sqrtsumpx  qx  2
0 for px qx in zipp q   new in version 3
8
hypotcoordinates   return the euclidean norm sqrtsumx2 for x in coordinates
   this is the length of the vector from the origin to the point given   by the coordinates
   for a two dimensional point x y this is equivalent to   computing the hypotenuse of a right triangle using the pythagorean   theorem sqrtxx  yy
   changed in version 3
8 added support for ndimensional points
   formerly only the two dimensional case was supported
sinx   return the sine of x radians
tanx   return the tangent of x radians
angular conversion
degreesx   convert angle x from radians to degrees
radiansx   convert angle x from degrees to radians
hyperbolic functions
hyperbolic functions are analogs of trigonometric functions that arebased on hyperbolas instead of circles
acoshx   return the inverse hyperbolic cosine of x
asinhx   return the inverse hyperbolic sine of x
atanhx   return the inverse hyperbolic tangent of x
coshx   return the hyperbolic cosine of x
sinhx   return the hyperbolic sine of x
tanhx   return the hyperbolic tangent of x
special functions
erfx   return the error function at x
   the erf function can be used to compute traditional statistical   functions such as the cumulative standard normal distribution      def phix          cumulative distribution function for the standard normal distribution          return 1
0   new in version 3
2
erfcx   return the complementary error function at x
  the complementary   error function is defined as 1
  it is used for large   values of x where a subtraction from one would cause a loss of   significance
   new in version 3
2
gammax   return the gamma function at x
   new in version 3
2
lgammax   return the natural logarithm of the absolute value of the gamma   function at x
   new in version 3
2
constants
datetime  basic date and time types
aware and naive objects
date and time objects may be categorized as aware or naivedepending on whether or not they include timezone information
with sufficient knowledge of applicable algorithmic and political timeadjustments such as time zone and daylight saving time informationan aware object can locate itself relative to other aware objects
an aware object represents a specific moment in time that is not opento interpretation
 1a naive object does not contain enough information tounambiguously locate itself relative to other datetime objects
whether a naive object represents coordinated universal time utclocal time or time in some other timezone is purely up to theprogram just like it is up to the program whether a particular numberrepresents metres miles or mass
 naive objects are easy tounderstand and to work with at the cost of ignoring some aspects ofreality
for applications requiring aware objects datetime and timeobjects have an optional time zone information attribute tzinfothat can be set to an instance of a subclass of the abstract tzinfoclass
 these tzinfo objects capture information about the offsetfrom utc time the time zone name and whether daylight saving time isin effect
only one concrete tzinfo class the timezone class is supplied bythe datetime module
 the timezone class can represent simpletimezones with fixed offsets from utc such as utc itself or northamerican est and edt timezones
 supporting timezones at deeper levelsof detail is up to the application
 the rules for time adjustmentacross the world are more political than rational change frequentlyand there is no standard suitable for every application aside fromutc
constants
minyear   the smallest year number allowed in a date or datetime object
   minyear is 1
maxyear   the largest year number allowed in a date or datetime object
   maxyear is 9999
available types
date   an idealized naive date assuming the current gregorian calendar   always was and always will be in effect
 attributes year   month and day
time   an idealized time independent of any particular day assuming that   every day has exactly 246060 seconds
  there is no notion of   leap seconds here
 attributes hour minute second   microsecond and tzinfo
datetime   a combination of a date and a time
 attributes year month   day hour minute second microsecond and tzinfo
timedelta   a duration expressing the difference between two date time or   datetime instances to microsecond resolution
tzinfo   an abstract base class for time zone information objects
 these are   used by the datetime and time classes to provide a customizable   notion of time adjustment for example to account for time zone   andor daylight saving time
timezone   a class that implements the tzinfo abstract base class as a fixed   offset from the utc
   new in version 3
2
objects of these types are immutable
subclass relationships   object       timedelta       tzinfo           timezone       time       date           datetime
common properties
the date datetime time and timezone types share thesecommon features objects of these types are immutable
 objects of these types are hashable meaning that they can be used  as dictionary keys
 objects of these types support efficient pickling via the pickle  module
determining if an object is aware or naive
objects of the date type are always naive
an object of type time or datetime may be aware or naive
a datetime object d is aware if both of the following hold1
tzinfo is not none2
utcoffsetd does not return noneotherwise d is naive
a time object t is aware if both of the following hold1
tzinfo is not none2
utcoffsetnone does not return none
otherwise t is naive
the distinction between aware and naive doesnt apply to timedeltaobjects
timedelta objects
examples of usage timedelta
an additional example of normalization     components of anotheryear add up to exactly 365 days    from datetime import timedelta    year  timedeltadays365    anotheryear  timedeltaweeks40 days84 hours23   
0examples of timedelta arithmetic    from datetime import timedelta    year  timedeltadays365    tenyears  10  year    tenyears   datetime
date objects
examples of usage date
example of counting days to an event    import time    from datetime import date    today  date
days   202more examples of working with date    from datetime import date    d  date
datetime objects
examples of usage datetime
examples of working with datetime objects    from datetime import datetime date time timezone     using datetime
the example below defines a tzinfo subclass capturing time zoneinformation for kabul afghanistan which used 4 utc until 1945 andthen 430 utc thereafter   from datetime import timedelta datetime tzinfo timezone   class kabultztzinfo        kabul used 4 until 1945 when they moved to 430       utcmovedate  datetime1944 12 31 20 tzinfotimezone
utcmovedate               return 0430           return 04usage of kabultz from above    tz1  kabultz     datetime before the change    dt1  datetime1900 11 21 16 30 tzinfotz1    printdt1
time objects
examples of usage time
examples of working with a time object    from datetime import time tzinfo timedelta    class tz1tzinfo   
tzinfo objects
timezone objects
the timezone class is a subclass of tzinfo each instance of whichrepresents a timezone defined by a fixed offset from utc
objects of this class cannot be used to represent timezone informationin the locations where different offsets are used in different days ofthe year or where historical changes have been made to civil time
timezoneoffset namenone   the offset argument must be specified as a timedelta object   representing the difference between the local time and utc
 it must   be strictly between timedeltahours24 and   timedeltahours24 otherwise valueerror is raised
   the name argument is optional
 if specified it must be a string   that will be used as the value returned by the datetime
tzname   method
   new in version 3
2
   changed in version 3
7 the utc offset is not restricted to a whole   number of minutes
utcoffsetdt   return the fixed value specified when the timezone instance is   constructed
   the dt argument is ignored
 the return value is a timedelta   instance equal to the difference between the local time and utc
   changed in version 3
7 the utc offset is not restricted to a whole   number of minutes
tznamedt   return the fixed value specified when the timezone instance is   constructed
   if name is not provided in the constructor the name returned by   tznamedt is generated from the value of the offset as   follows
 if offset is timedelta0 the name is utc   otherwise it is a string in the format utc±hhmm where ± is the   sign of offset hh and mm are two digits of offset
hours and   offset
minutes respectively
   changed in version 3
6 name generated from offsettimedelta0   is now plain utc not utc0000
dstdt   always returns none
fromutcdt   return dt  offset
 the dt argument must be an aware datetime   instance with tzinfo set to self
class attributestimezone
utc   the utc timezone timezonetimedelta0
strftime and strptime behavior
date datetime and time objects all support astrftimeformat method to create a string representing the timeunder the control of an explicit format string
conversely the datetime
strptime class method creates adatetime object from a string representing a date and time and acorresponding format string
the table below provides a highlevel comparison of strftimeversus strptime                   strftime                                                strptime                                                                      usage             convert object to a string according to a given format    parse a string into a datetime object given a corresponding format            type of method    instance method                                           class method                                                                    method of         date datetime time                                datetime                                                                      signature         strftimeformat                                        strptimedatestring format                                                
strftime and strptime format codes
the following is a list of all the format codes that the 1989 cstandard requires and these work on all platforms with a standard cimplementation
 directive    meaning                           example                   notes    a         weekday as locales abbreviated   sun mon 
 sat        1                   name
                             enus so mo 
 sa                                                          dede                            a         weekday as locales full name
                                                             samstag dede                    w         weekday as a decimal number      0 1 
 6                                    where 0 is sunday and 6 is                                                        saturday
                                                            d         day of the month as a zero       01 02 
 31           9                   padded decimal number
                                               b         month as locales abbreviated     jan feb 
 dec        1                   name
                             enus jan feb 
                                                           dez dede                        b         month as locales full name
      january february 
                                                             dezember dede                   m         month as a zeropadded decimal    01 02 
 12           9                   number
                                                              y         year without century as a zero   00 01 
 99           9                   padded decimal number
                                               y         year with century as a decimal    0001 0002 
 2013    2                   number
                           2014 
 9998 9999              h         hour 24hour clock as a zero   00 01 
 23           9                   padded decimal number
                                               i         hour 12hour clock as a zero   01 02 
 12           9                   padded decimal number
                                               p         locales equivalent of either am  am pm enus am pm    1                  or pm
                            dede                   3      m         minute as a zeropadded decimal   00 01 
 59           9                   number
                                                              s         second as a zeropadded decimal   00 01 
 59           4                  number
                                                     9      f         microsecond as a decimal number  000000 000001 
      5                   zeropadded on the left
          999999                             z         utc offset in the form            empty 0000 0400    6                   ±hhmmss
ffffff empty       1030 063415                                 string if the object is naive
   030712
345216                     z         time zone name empty string if   empty utc gmt         6                   the object is naive
                                                j         day of the year as a zeropadded  001 002 
 366        9                   decimal number
                                                      u         week number of the year sunday   00 01 
 53           7                  as the first day of the week as                            9                   a zero padded decimal number
                                                     all days in a new year preceding                                                  the first sunday are considered                                                   to be in week 0
                                                     w         week number of the year monday   00 01 
 53           7                  as the first day of the week as                            9                   a decimal number
 all days in a                                                   new year preceding the first                                                      monday are considered to be in                                                    week 0
                                                              c         locales appropriate date and     tue aug 16 213000 1988  1                   time representation
              enus di 16 aug                                                                213000 1988 dede              x         locales appropriate date         081688 none          1                   representation
                   08161988 enus                                                               16
1988 dede                 x         locales appropriate time         213000 enus         1                   representation
                   213000 dede                            a literal  character
                                         several additional directives not required by the c89 standard areincluded for convenience
 these parameters all correspond to iso 8601date values
 directive    meaning                           example                   notes    g         iso 8601 year with century        0001 0002 
 2013    8                   representing the year that        2014 
 9998 9999                           contains the greater part of the                                                  iso week v
                                                     u         iso 8601 weekday as a decimal     1 2 
 7                                    number where 1 is monday
                                            v         iso 8601 week as a decimal        01 02 
 53           8                  number with monday as the first                             9                   day of the week
 week 01 is the                                                   week containing jan 4
                                              these may not be available on all platforms when used with thestrftime method
 the iso 8601 year and iso 8601 week directivesare not interchangeable with the year and week number directivesabove
 calling strptime with incomplete or ambiguous iso 8601directives will raise a valueerror
the full set of format codes supported varies across platformsbecause python calls the platform c librarys strftime functionand platform variations are common
 to see the full set of formatcodes supported on your platform consult the strftime3documentation
new in version 3
6 g u and v were added
technical detail
ast  abstract syntax trees
source code libast
pythe ast module helps python applications to process trees of thepython abstract syntax grammar
  the abstract syntax itself mightchange with each python release this module helps to find outprogrammatically what the current grammar looks like
an abstract syntax tree can be generated by passingast
pycfonlyast as a flag to the compile builtin function orusing the parse helper provided in this module
  the result willbe a tree of objects whose classes all inherit from ast
  anabstract syntax tree can be compiled into a python code object usingthe builtin compile function
abstract grammar
the abstract grammar is currently defined as follows    asdls 4 builtin types are    identifier int string constant   module python          mod  modulestmt body typeignore typeignores            interactivestmt body            expressionexpr body            functiontypeexpr argtypes expr returns       stmt  functiondefidentifier name arguments args                          stmt body expr decoratorlist expr returns                          string typecomment              asyncfunctiondefidentifier name arguments args                                stmt body expr decoratorlist expr returns                                string typecomment              classdefidentifier name                expr bases                keyword keywords                stmt body                expr decoratorlist              returnexpr value              deleteexpr targets              assignexpr targets expr value string typecomment              augassignexpr target operator op expr value              simple indicates that we annotate simple name without parens              annassignexpr target expr annotation expr value int simple              use orelse because else is a keyword in target languages              forexpr target expr iter stmt body stmt orelse string typecomment              asyncforexpr target expr iter stmt body stmt orelse string typecomment              whileexpr test stmt body stmt orelse              ifexpr test stmt body stmt orelse              withwithitem items stmt body string typecomment              asyncwithwithitem items stmt body string typecomment              raiseexpr exc expr cause              trystmt body excepthandler handlers stmt orelse stmt finalbody              assertexpr test expr msg              importalias names              importfromidentifier module alias names int level              globalidentifier names              nonlocalidentifier names              exprexpr value              pass  break  continue              coloffset is the byte offset in the utf8 string the parser uses             attributes int lineno int coloffset int endlineno int endcoloffset              boolop can use left  right       expr  boolopboolop op expr values             namedexprexpr target expr value             binopexpr left operator op expr right             unaryopunaryop op expr operand             lambdaarguments args expr body             ifexpexpr test expr body expr orelse             dictexpr keys expr values             setexpr elts             listcompexpr elt comprehension generators             setcompexpr elt comprehension generators             dictcompexpr key expr value comprehension generators             generatorexpexpr elt comprehension generators             the grammar constrains where yield expressions can occur             awaitexpr value             yieldexpr value             yieldfromexpr value             need sequences for compare to distinguish between             x  4  3 and x  4  3             compareexpr left cmpop ops expr comparators             callexpr func expr args keyword keywords             formattedvalueexpr value int conversion expr formatspec             joinedstrexpr values             constantconstant value string kind             the following expression can appear in assignment context             attributeexpr value identifier attr exprcontext ctx             subscriptexpr value expr slice exprcontext ctx             starredexpr value exprcontext ctx             nameidentifier id exprcontext ctx             listexpr elts exprcontext ctx             tupleexpr elts exprcontext ctx             can appear only in subscript             sliceexpr lower expr upper expr step              coloffset is the byte offset in the utf8 string the parser uses             attributes int lineno int coloffset int endlineno int endcoloffset       exprcontext  load  store  del       boolop  and  or       operator  add  sub  mult  matmult  div  mod  pow  lshift                     rshift  bitor  bitxor  bitand  floordiv       unaryop  invert  not  uadd  usub       cmpop  eq  noteq  lt  lte  gt  gte  is  isnot  in  notin       comprehension  expr target expr iter expr ifs int isasync       excepthandler  excepthandlerexpr type identifier name stmt body                       attributes int lineno int coloffset int endlineno int endcoloffset       arguments  arg posonlyargs arg args arg vararg arg kwonlyargs                    expr kwdefaults arg kwarg expr defaults       arg  identifier arg expr annotation string typecomment              attributes int lineno int coloffset int endlineno int endcoloffset        keyword arguments supplied to call null identifier for kwargs       keyword  identifier arg expr value                  attributes int lineno int coloffset int endlineno int endcoloffset        import name with optional as alias
node classes
literals
variables
expressions
statements
control flow
note  optional clauses such as else are stored as an empty list if  theyre not present
function and class definitions
async and await
ast helpers
compiler flags
   new in version 3
8
   new in version 3
8
commandline usage
new in version 3
9
see also  green tree snakes an external documentation resource has good  details on working with python asts
data compression and archiving
the modules described in this chapter support data compression withthe zlib gzip bzip2 and lzma algorithms and the creation of zipand tarformat archives
  see also archiving operations provided bythe shutil module
 zlib  compression compatible with gzip gzip  support for gzip files   examples of usage   command line interface     command line options bz2  support for bzip2 compression   decompression of files   incremental decompression   oneshot decompression   examples of usage lzma  compression using the lzma algorithm   reading and writing compressed files   compressing and decompressing data in memory   miscellaneous   specifying custom filter chains   examples zipfile  work with zip archives   zipfile objects   path objects   pyzipfile objects   zipinfo objects   commandline interface     commandline options   decompression pitfalls     from file itself     file system limitations     resources limitations     interruption     default behaviors of extraction tarfile  read and write tar archive files   tarfile objects   tarinfo objects   commandline interface     commandline options   examples   supported tar formats   unicode issues
httpcookies  http state management
source code libhttpcookies
changed in version 3
3 allowed  as a valid cookie name character
note  on encountering an invalid cookie cookieerror is raised so if  your cookie data comes from a browser you should always prepare for  invalid data and catch cookieerror on parsing
see also  module http
cookie objects
morsel objects
   changed in version 3
5 eq now takes key and value into   account
   changed in version 3
7 attributes key value and codedvalue   are readonly
   changed in version 3
8 added support for the samesite attribute
value   the value of the cookie
   changed in version 3
5 an error is raised for invalid keys
   changed in version 3
5 return a morsel object instead of a dict
example
xmlsaxxmlreader  interface for xml parsers
xmlreader objects
   changed in version 3
5 added support of character streams
   changed in version 3
8 added support of pathlike objects
incrementalparser objects
locator objects
inputsource objects
the attributes interface
the attributesns interface
getopt  cstyle parser for command line options
builtin functions
array  efficient arrays of numeric values
this module defines an object type which can compactly represent anarray of basic values characters integers floating point numbers
arrays are sequence types and behave very much like lists except thatthe type of objects stored in them is constrained
  the type isspecified at object creation time by using a type code which is asingle character
  the following type codes are defined type code    c type                python type          minimum size in bytes    notes    b        signed char           int                  1                                 b        unsigned char         int                  1                                 u        wchart               unicode character    2                        1      h        signed short          int                  2                                 h        unsigned short        int                  2                                 i        signed int            int                  2                                 i        unsigned int          int                  2                                 l        signed long           int                  4                                 l        unsigned long         int                  4                                 q        signed long long      int                  8                                 q        unsigned long long    int                  8                                 f        float                 float                4                                 d        double                float                8                                notes1
 it can be 16 bits or 32 bits depending on the platform
   changed in version 3
9 arrayu now uses wchart as c type   instead of deprecated pyunicode
 this change doesnt affect to   its behavior because pyunicode is alias of wchart since   python 3
3
the actual representation of values is determined by the machinearchitecture strictly speaking by the c implementation
  the actualsize can be accessed through the itemsize attribute
the module defines the following typeclass array
arraytypecode initializer   a new array whose items are restricted by typecode and   initialized from the optional initializer value which must be a   list a byteslike object or iterable over elements of the   appropriate type
   if given a list or string the initializer is passed to the new   arrays fromlist frombytes or fromunicode method see   below to add initial items to the array
  otherwise the iterable   initializer is passed to the extend method
   raises an auditing event array
new with arguments typecode   initializer
typecodes   a string with all available type codes
array objects support the ordinary sequence operations of indexingslicing concatenation and multiplication
  when using sliceassignment the assigned value must be an array object with the sametype code in all other cases typeerror is raised
 array objectsalso implement the buffer interface and may be used wherever byteslike objects are supported
the following data items and methods are also supportedarray
typecode   the typecode character used to create the array
itemsize   the length in bytes of one array item in the internal   representation
appendx   append a new item with value x to the end of the array
bufferinfo   return a tuple address length giving the current memory   address and the length in elements of the buffer used to hold   arrays contents
  the size of the memory buffer in bytes can be   computed as array
itemsize
  this is   occasionally useful when working with lowlevel and inherently   unsafe io interfaces that require memory addresses such as   certain ioctl operations
  the returned numbers are valid as   long as the array exists and no lengthchanging operations are   applied to it
   note     when using array objects from code written in c or c the only     way to effectively make use of this information it makes more     sense to use the buffer interface supported by array objects
     this method is maintained for backward compatibility and should     be avoided in new code
  the buffer interface is documented in     buffer protocol
byteswap   byteswap all items of the array
  this is only supported for   values which are 1 2 4 or 8 bytes in size for other types of   values runtimeerror is raised
  it is useful when reading data   from a file written on a machine with a different byte order
countx   return the number of occurrences of x in the array
extenditerable   append items from iterable to the end of the array
  if   iterable is another array it must have exactly the same type   code if not typeerror will be raised
  if iterable is not an   array it must be iterable and its elements must be the right type   to be appended to the array
frombytess   appends items from the string interpreting the string as an array   of machine values as if it had been read from a file using the   fromfile method
   new in version 3
2 fromstring is renamed to frombytes for   clarity
fromfilef n   read n items as machine values from the file object f and   append them to the end of the array
  if less than n items are   available eoferror is raised but the items that were available   are still inserted into the array
 f must be a real builtin file   object something else with a read method wont do
fromlistlist   append items from the list
  this is equivalent to for x in list   a
appendx except that if there is a type error the array is   unchanged
fromunicodes   extends this array with data from the given unicode string
  the   array must be a type u array otherwise a valueerror is   raised
  use array
encodeenc to append   unicode data to an array of some other type
indexx   return the smallest i such that i is the index of the first   occurrence of x in the array
inserti x   insert a new item with value x in the array before position i
   negative values are treated as being relative to the end of the   array
popi   removes the item with the index i from the array and returns it
   the optional argument defaults to 1 so that by default the last   item is removed and returned
removex   remove the first occurrence of x from the array
reverse   reverse the order of the items in the array
tobytes   convert the array to an array of machine values and return the   bytes representation the same sequence of bytes that would be   written to a file by the tofile method
   new in version 3
2 tostring is renamed to tobytes for   clarity
tofilef   write all items as machine values to the file object f
tolist   convert the array to an ordinary list with the same items
tounicode   convert the array to a unicode string
  the array must be a type   u array otherwise a valueerror is raised
 use   array
decodeenc to obtain a unicode string from an   array of some other type
when an array object is printed or converted to a string it isrepresented as arraytypecode initializer
  the initializer isomitted if the array is empty otherwise it is a string if thetypecode is u otherwise it is a list of numbers
  the string isguaranteed to be able to be converted back to an array with the sametype and value using eval so long as the array class has beenimported using from array import array
 examples   arrayl   arrayu hello u2641   arrayl 1 2 3 4 5   arrayd 1
14see also  module struct     packing and unpacking of heterogeneous binary data
  module xdrlib     packing and unpacking of external data representation xdr data     as used in some remote procedure call systems
  the numerical python documentation     the numeric python extension numpy defines another array type     see httpwww
org for further information about numerical     python
xmlrpcserver  basic xmlrpc servers
warning  the xmlrpc
  if you need to parse untrusted or unauthenticated  data see xml vulnerabilities
   changed in version 3
3 the usebuiltintypes flag was added
   changed in version 3
3 the usebuiltintypes flag was added
simplexmlrpcserver objects
   changed in version 3
7 registerfunction can be used as a   decorator
   warning     enabling the allowdottednames option allows intruders to     access your modules global variables and may allow intruders to     execute arbitrary code on your machine
simplexmlrpcserver example
warning  enabling the allowdottednames option allows intruders to access  your modules global variables and may allow intruders to execute  arbitrary code on your machine
cgixmlrpcrequesthandler
   changed in version 3
7 registerfunction can be used as a   decorator
example   class myfuncs       def mulself x y           return x  y   handler  cgixmlrpcrequesthandler   handler
documenting xmlrpc server
   changed in version 3
3 the usebuiltintypes flag was added
docxmlrpcserver objects
doccgixmlrpcrequesthandler
using importlibmetadata
note  this functionality is provisional and may deviate from the usual  version semantics of the standard library
overview
functional api
entry points
distribution metadata
distribution versions
distribution files
distribution requirements
distributions
extending the search algorithm
 footnotes 1 technically the returned distribution metadata object is an    email
audit events table
this table contains all events raised by sys
audit orpysysaudit calls throughout the cpython runtime and the standardlibrary
  these calls were added in 3
0 or later
see sys
addaudithook and pysysaddaudithook for information onhandling these events
cpython implementation detail this table is generated from thecpython documentation and may not represent events raised by otherimplementations
 see your runtime specific documentation for actualevents raised
setvalue                 key subkey type value                        12          the following events are raised internally and do not correspond toany public api of cpython audit event                 arguments                                    winapi
marshal  internal python object serialization
internationalization
the modules described in this chapter help you write software that isindependent of language and locale by providing mechanisms forselecting a language to be used in  program messages or by tailoringoutput to match local conventions
the list of modules described in this chapter is gettext  multilingual internationalization services   gnu gettext api   classbased api     the nulltranslations class     the gnutranslations class     solaris message catalog support     the catalog constructor   internationalizing your programs and modules     localizing your module     localizing your application     changing languages on the fly     deferred translations   acknowledgements locale  internationalization services   background details hints tips and caveats   for extension writers and programs that embed python   access to message catalogs
tkinter dialogs
tkintersimpledialog  standard tkinter input dialogs
source code libtkintersimpledialog
askstringtitle prompt kw   the above three functions provide dialogs that prompt the user to   enter a value of the desired type
dialogparent titlenone   the base class for custom dialogs
      buttonbox         default behaviour adds ok and cancel buttons
 override for         custom button layouts
tkinterfiledialog  file selection dialogs
source code libtkinterfiledialog
native loadsave dialogs
tkintercommondialog  dialog window templates
source code libtkintercommondialog
dialogmasternone options   showcolornone options      render the dialog window
see also modules tkinter
messagebox reading and writing files
copy  shallow and deep copy operations
mimetypes  map filenames to mime types
   changed in version 3
8 added support for url being a pathlike   object
   changed in version 3
2 previously windows registry settings were   ignored
mimetypes objects
      availability windows
      new in version 3
2
io  core tools for working with streams
source code libio
overview
the io module provides pythons main facilities for dealing withvarious types of io
  there are three main types of io text iobinary io and raw io
  these are generic categories and variousbacking stores can be used for each of them
  a concrete objectbelonging to any of these categories is called a file object
  othercommon terms are stream and filelike object
independent of its category each concrete stream object will alsohave various capabilities it can be readonly writeonly or readwrite
 it can also allow arbitrary random access seeking forwards orbackwards to any location or only sequential access for example inthe case of a socket or pipe
all streams are careful about the type of data you give to them
  forexample giving a str object to the write method of a binarystream will raise a typeerror
  so will giving a bytes object tothe write method of a text stream
changed in version 3
3 operations that used to raise ioerror nowraise oserror since ioerror is now an alias of oserror
text io
text io expects and produces str objects
  this means that wheneverthe backing store is natively made of bytes such as in the case of afile encoding and decoding of data is made transparently as well asoptional translation of platformspecific newline characters
the easiest way to create a text stream is with open optionallyspecifying an encoding   f  openmyfile
txt r encodingutf8inmemory text streams are also available as stringio objects   f  io
stringiosome initial text datathe text stream api is described in detail in the documentation oftextiobase
binary io
raw io
highlevel module interface
inmemory streams
it is also possible to use a str or byteslike object as a filefor both reading and writing
  for strings stringio can be used likea file opened in text mode
  bytesio can be used like a file openedin binary mode
  both provide full readwrite capabilities with randomaccess
see also  sys     contains the standard io streams sys
stdout and     sys
stderr
class hierarchy
the implementation of io streams is organized as a hierarchy ofclasses
  first abstract base classes abcs which are used tospecify the various categories of streams then concrete classesproviding the standard stream implementations
   note     the abstract base classes also provide default implementations of     some methods in order to help implementation of concrete stream     classes
  for example bufferediobase provides unoptimized     implementations of readinto and readline
at the top of the io hierarchy is the abstract base class iobase
it defines the basic interface to a stream
  note however that thereis no separation between reading and writing to streamsimplementations are allowed to raise unsupportedoperation if they donot support a given operation
the rawiobase abc extends iobase
  it deals with the reading andwriting of bytes to a stream
  fileio subclasses rawiobase toprovide an interface to files in the machines file system
the bufferediobase abc extends iobase
  it deals with buffering ona raw binary stream rawiobase
  its subclasses bufferedwriterbufferedreader and bufferedrwpair buffer raw binary streams thatare readable writable and both readable and writable respectively
bufferedrandom provides a buffered interface to seekable streams
another bufferediobase subclass bytesio is a stream of inmemorybytes
the textiobase abc extends iobase
  it deals with streams whosebytes represent text and handles encoding and decoding to and fromstrings
  textiowrapper which extends textiobase is a bufferedtext interface to a buffered raw stream bufferediobase
  finallystringio is an inmemory stream for text
argument names are not part of the specification and only thearguments of open are intended to be used as keyword arguments
the following table summarizes the abcs provided by the io module abc                        inherits            stub methods              mixin methods and properties                        iobase                                       fileno seek and     close closed enter exit                                                        truncate                flush isatty iter next                                                                                   readable readline readlines seekable                                                                             tell writable and writelines                rawiobase                iobase            readinto and write    inherited iobase methods read and readall   bufferediobase           iobase            detach read         inherited iobase methods readinto and                                                        read1 and write      readinto1                                         textiobase               iobase            detach read         inherited iobase methods encoding errors                                                  readline and write   and newlines                                     
io base classes
raw file io
fileioname moder closefdtrue openernone   a raw binary stream representing an oslevel file containing bytes   data
  it inherits rawiobase
   the name can be one of two things    a character string or bytes object representing the path to the     file which will be opened
 in this case closefd must be true     the default otherwise an error will be raised
    an integer representing the number of an existing oslevel file     descriptor to which the resulting fileio object will give     access
 when the fileio object is closed this fd will be closed     as well unless closefd is set to false
   the mode can be r w x or a for reading   default writing exclusive creation or appending
 the file will   be created if it doesnt exist when opened for writing or   appending it will be truncated when opened for writing
   fileexistserror will be raised if it already exists when opened   for creating
 opening a file for creating implies writing so this   mode behaves in a similar way to w
 add a  to the mode to   allow simultaneous reading and writing
   the read when called with a positive argument readinto   and write methods on this class will only make one system call
   a custom opener can be used by passing a callable as opener
 the   underlying file descriptor for the file object is then obtained by   calling opener with name flags
 opener must return an   open file descriptor passing os
open as opener results in   functionality similar to passing none
   the newly created file is noninheritable
   see the open builtin function for examples on using the   opener parameter
   changed in version 3
3 the opener parameter was added
 the x   mode was added
   changed in version 3
4 the file is now noninheritable
   fileio provides these data attributes in addition to those from   rawiobase and iobase   mode      the mode as given in the constructor
   name      the file name
  this is the file descriptor of the file when no      name is given in the constructor
buffered streams
buffered io streams provide a higherlevel interface to an io devicethan raw io does
bytesioinitialbytes   a binary stream using an inmemory bytes buffer
  it inherits   bufferediobase
  the buffer is discarded when the close   method is called
   the optional argument initialbytes is a byteslike object that   contains initial data
   bytesio provides or overrides these methods in addition to those   from bufferediobase and iobase   getbuffer      return a readable and writable view over the contents of the      buffer without copying them
  also mutating the view will      transparently update the contents of the buffer          b  io
getvalue         bab56ef      note        as long as the view exists the bytesio object cannot be        resized or closed
      new in version 3
2
   getvalue      return bytes containing the entire contents of the buffer
   read1size      in bytesio this is the same as read
      changed in version 3
7 the size argument is now optional
   readinto1b      in bytesio this is the same as readinto
      new in version 3
5
bufferedreaderraw buffersizedefaultbuffersize   a buffered binary stream providing higherlevel access to a   readable non seekable rawiobase raw binary stream
  it inherits   bufferediobase
   when reading data from this object a larger amount of data may be   requested from the underlying raw stream and kept in an internal   buffer
 the buffered data can then be returned directly on   subsequent reads
   the constructor creates a bufferedreader for the given readable   raw stream and buffersize
  if buffersize is omitted   defaultbuffersize is used
   bufferedreader provides or overrides these methods in addition to   those from bufferediobase and iobase   peeksize      return bytes from the stream without advancing the position
  at      most one single read on the raw stream is done to satisfy the      call
 the number of bytes returned may be less or more than      requested
   readsize      read and return size bytes or if size is not given or      negative until eof or if the read call would block in non      blocking mode
   read1size      read and return up to size bytes with only one call on the raw      stream
 if at least one byte is buffered only buffered bytes      are returned
 otherwise one raw stream read call is made
      changed in version 3
7 the size argument is now optional
bufferedwriterraw buffersizedefaultbuffersize   a buffered binary stream providing higherlevel access to a   writeable non seekable rawiobase raw binary stream
  it inherits   bufferediobase
   when writing to this object data is normally placed into an   internal buffer
  the buffer will be written out to the underlying   rawiobase object under various conditions including    when the buffer gets too small for all pending data    when flush is called    when a seek is requested for bufferedrandom objects    when the bufferedwriter object is closed or destroyed
   the constructor creates a bufferedwriter for the given writeable   raw stream
  if the buffersize is not given it defaults to   defaultbuffersize
   bufferedwriter provides or overrides these methods in addition to   those from bufferediobase and iobase   flush      force bytes held in the buffer into the raw stream
  a      blockingioerror should be raised if the raw stream blocks
   writeb      write the byteslike object b and return the number of      bytes written
  when in nonblocking mode a blockingioerror      is raised if the buffer needs to be written out but the raw      stream blocks
bufferedrandomraw buffersizedefaultbuffersize   a buffered binary stream providing higherlevel access to a   seekable rawiobase raw binary stream
  it inherits   bufferedreader and bufferedwriter
   the constructor creates a reader and writer for a seekable raw   stream given in the first argument
  if the buffersize is   omitted it defaults to defaultbuffersize
   bufferedrandom is capable of anything bufferedreader or   bufferedwriter can do
  in addition seek and tell are   guaranteed to be implemented
bufferedrwpairreader writer buffersizedefaultbuffersize   a buffered binary stream providing higherlevel access to two non   seekable rawiobase raw binary streamsone readable the other   writeable
 it inherits bufferediobase
   reader and writer are rawiobase objects that are readable and   writeable respectively
  if the buffersize is omitted it   defaults to defaultbuffersize
   bufferedrwpair implements all of bufferediobases methods   except for detach which raises unsupportedoperation
   warning     bufferedrwpair does not attempt to synchronize accesses to its     underlying raw streams
  you should not pass it the same object     as reader and writer use bufferedrandom instead
text io
performance
this section discusses the performance of the provided concrete ioimplementations
binary io
text io
text io over a binary storage such as a file is significantlyslower than binary io over the same storage because it requiresconversions between unicode and binary data using a character codec
this can become noticeable handling huge amounts of text data likelarge log files
  also textiowrapper
tell andtextiowrapper
seek are both quite slow due to the reconstructionalgorithm used
stringio however is a native inmemory unicode container and willexhibit similar speed to bytesio
multithreading
fileio objects are threadsafe to the extent that the operatingsystem calls such as read2 under unix they wrap are threadsafetoo
binary buffered objects instances of bufferedreaderbufferedwriter bufferedrandom and bufferedrwpair protect theirinternal structures using a lock it is therefore safe to call themfrom multiple threads at once
textiowrapper objects are not threadsafe
reentrancy
binary buffered objects instances of bufferedreaderbufferedwriter bufferedrandom and bufferedrwpair are notreentrant
  while reentrant calls will not happen in normalsituations they can arise from doing io in a signal handler
  if athread tries to reenter a buffered object which it is alreadyaccessing a runtimeerror is raised
  note this doesnt prohibit adifferent thread from entering the buffered object
the above implicitly extends to text files since the openfunction will wrap a buffered object inside a textiowrapper
  thisincludes standard streams and therefore affects the builtin printfunction as well
sqlite3  dbapi 20 interface for sqlite databases
module functions and constants
connection objects
cursor objects
row objects
exceptions
sqlite and python types
introduction
sqlite natively supports the following types null integerreal text blob
the following python types can thus be sent to sqlite without anyproblem python type                      sqlite type    none                           null         int                            integer      float                          real         str                            text         bytes                          blob        this is how sqlite types are converted to python types by default sqlite type    python type                                     null         none                                          integer      int                                           real         float                                         text         depends on textfactory str by default     blob         bytes                                        the type system of the sqlite3 module is extensible in two ways youcan store additional python types in a sqlite database via objectadaptation and you can let the sqlite3 module convert sqlite typesto different python types via converters
using adapters to store additional python types in sqlite databases
as described before sqlite supports only a limited set of typesnatively
 to use other python types with sqlite you must adaptthem to one of the sqlite3 modules supported types for sqlite one ofnonetype int float str bytes
there are two ways to enable the sqlite3 module to adapt a custompython type to one of the supported ones
letting your object adapt itselfthis is a good approach if you write the class yourself
 lets supposeyou have a class like this   class point       def initself x y           self
y  x ynow you want to store the point in a single sqlite column
  firstyoull have to choose one of the supported types to be used forrepresenting the point
 lets just use str and separate thecoordinates using a semicolon
 then you need to give your class amethod conformself protocol which must return the convertedvalue
 the parameter protocol will be prepareprotocol
closeregistering an adapter callablethe other possibility is to create a function that converts the typeto the string representation and register the function withregisteradapter
closethe sqlite3 module has two default adapters for pythons builtindatetime
date and datetime
datetime types
  now lets suppose wewant to store datetime
datetime objects not in iso representationbut as a unix timestamp
converting sqlite values to custom python types
writing an adapter lets you send custom python types to sqlite
 but tomake it really useful we need to make the python to sqlite to pythonroundtrip work
enter converters
lets go back to the point class
 we stored the x and y coordinatesseparated via semicolons as strings in sqlite
first well define a converter function that accepts the string as aparameter and constructs a point object from it
note  converter functions always get called with a bytes object no  matter under which data type you sent the value to sqlite
splitb       return pointx ynow you need to make the sqlite3 module know that what you selectfrom the database is actually a point
 there are two ways of doingthis implicitly via the declared type explicitly via the column nameboth ways are described in section module functions and constants inthe entries for the constants parsedecltypes and parsecolnames
the following example illustrates both approaches
default adapters and converters
there are default adapters for the date and datetime types in thedatetime module
 they will be sent as iso datesiso timestamps tosqlite
the default converters are registered under the name date fordatetime
date and under the name timestamp fordatetime
datetime
this way you can use datetimestamps from python without anyadditional fiddling in most cases
 the format of the adapters is alsocompatible with the experimental sqlite datetime functions
the following example demonstrates this
closeif a timestamp stored in sqlite has a fractional part longer than 6numbers its value will be truncated to microsecond precision by thetimestamp converter
controlling transactions
using sqlite3 efficiently
using shortcut methods
using the nonstandard execute executemany andexecutescript methods of the connection object your code can bewritten more concisely because you dont have to create the oftensuperfluous cursor objects explicitly
 instead the cursorobjects are created implicitly and these shortcut methods return thecursor objects
 this way you can execute a select statement anditerate over it directly using only a single call on the connectionobject
accessing columns by name instead of by index
one useful feature of the sqlite3 module is the builtinsqlite3
row class designed to be used as a row factory
rows wrapped with this class can be accessed both by index liketuples and caseinsensitively by name   import sqlite3   con  sqlite3
using the connection as a context manager
common issues
multithreading
older sqlite versions had issues with sharing connections betweenthreads
 thats why the python module disallows sharing connectionsand cursors between threads
 if you still try to do so you will getan exception at runtime
the only exception is calling the interrupt method which onlymakes sense to call from a different thread
 footnotes 1 the sqlite3 module is not built with loadable extension support by    default because some platforms notably mac os x have sqlite    libraries which are compiled without this feature
 to get loadable    extension support you must pass enableloadablesqlite    extensions to configure
xdrlib  encode and decode xdr data
source code libxdrlib
pythe xdrlib module supports the external data representation standardas described in rfc 1014 written by sun microsystems inc
 june1987
  it supports most of the data types described in the rfc
the xdrlib module defines two classes one for packing variablesinto xdr representation and another for unpacking from xdrrepresentation
  there are also two exception classes
packer   packer is the class for packing data into xdr representation
 the   packer class is instantiated with no arguments
unpackerdata   unpacker is the complementary class which unpacks xdr data values   from a string buffer
  the input buffer is given as data
see also  rfc 1014  xdr external data representation standard     this rfc defined the encoding of data which was xdr at the time     this module was originally written
  it has apparently been     obsoleted by rfc 1832
  rfc 1832  xdr external data representation standard     newer rfc that provides a revised definition of xdr
packer objects
unpacker objects
the unpacker class offers the following methodsunpacker
resetdata   resets the string buffer with the given data
getposition   returns the current unpack position in the data buffer
setpositionposition   sets the data buffer unpack position to position
  you should be   careful about using getposition and setposition
getbuffer   returns the current unpack data buffer as a string
done   indicates unpack completion
  raises an error exception if all of   the data has not been unpacked
in addition every data type that can be packed with a packer canbe unpacked with an unpacker
  unpacking methods are of the formunpacktype and take no arguments
  they return the unpackedobject
unpackfloat   unpacks a singleprecision floating point number
unpackdouble   unpacks a doubleprecision floating point number similarly to   unpackfloat
in addition the following methods unpack strings bytes and opaquedataunpacker
unpackfstringn   unpacks and returns a fixed length string
  n is the number of   characters expected
  padding with null bytes to guaranteed 4 byte   alignment is assumed
unpackfopaquen   unpacks and returns a fixed length opaque data stream similarly to   unpackfstring
unpackstring   unpacks and returns a variable length string
  the length of the   string is first unpacked as an unsigned integer then the string   data is unpacked with unpackfstring
unpackopaque   unpacks and returns a variable length opaque data string similarly   to unpackstring
unpackbytes   unpacks and returns a variable length byte stream similarly to   unpackstring
the following methods support unpacking arrays and listsunpacker
unpacklistunpackitem   unpacks and returns a list of homogeneous items
  the list is   unpacked one element at a time by first unpacking an unsigned   integer flag
  if the flag is 1 then the item is unpacked and   appended to the list
  a flag of 0 indicates the end of the list
   unpackitem is the function that is called to unpack the items
unpackfarrayn unpackitem   unpacks and returns as a list a fixed length array of homogeneous   items
  n is number of list elements to expect in the buffer
 as   above unpackitem is the function used to unpack each element
unpackarrayunpackitem   unpacks and returns a variable length list of homogeneous items
   first the length of the list is unpacked as an unsigned integer   then each element is unpacked as in unpackfarray above
exceptions
exceptions in this module are coded as class instancesexception xdrlib
error   the base exception class
  error has a single public attribute   msg containing the description of the error
conversionerror   class derived from error
  contains no additional instance   variables
here is an example of how you would catch one of these exceptions   import xdrlib   p  xdrlib
coroutines and tasks
this section outlines highlevel asyncio apis to work with coroutinesand tasks
 coroutines awaitables running an asyncio program creating tasks sleeping running tasks concurrently shielding from cancellation timeouts waiting primitives running in threads scheduling from other threads introspection task object generatorbased coroutines
coroutines
coroutines declared with the asyncawait syntax is the preferred wayof writing asyncio applications
  for example the following snippetof code requires python 3
7 prints hello waits 1 second andthen prints world    import asyncio    async def main   
runmain   hello   worldnote that simply calling a coroutine will not schedule it to beexecuted    main   coroutine object main at 0x1053bb7c8to actually run a coroutine asyncio provides three main mechanisms the asyncio
run function to run the toplevel entry point  main function see the above example
 awaiting on a coroutine
  the following snippet of code will print  hello after waiting for 1 second and then print world after  waiting for another 2 seconds     import asyncio     import time     async def sayafterdelay what         await asyncio
runmain  expected output     started at 171352     hello     world     finished at 171355 the asyncio
createtask function to run coroutines concurrently  as asyncio tasks
  lets modify the above example and run two sayafter coroutines  concurrently     async def main         task1  asyncio
strftimex  note that expected output now shows that the snippet runs 1 second  faster than before     started at 171432     hello     world     finished at 171434
awaitables
we say that an object is an awaitable object if it can be used inan await expression
  many asyncio apis are designed to acceptawaitables
there are three main types of awaitable objects coroutinestasks and futures
 coroutines python coroutines are awaitables and therefore can be awaited fromother coroutines   import asyncio   async def nested       return 42   async def main        nothing happens if we just call nested
runmainimportant  in this documentation the term coroutine can be used for two  closely related concepts   a coroutine function an async def function   a coroutine object an object returned by calling a coroutine    function
asyncio also supports legacy generatorbased coroutines
 tasks tasks are used to schedule coroutines concurrently
when a coroutine is wrapped into a task with functions likeasyncio
createtask the coroutine is automatically scheduled torun soon   import asyncio   async def nested       return 42   async def main        schedule nested to run soon concurrently        with main
runmain futures a future is a special lowlevel awaitable object that representsan eventual result of an asynchronous operation
when a future object is awaited it means that the coroutine willwait until the future is resolved in some other place
future objects in asyncio are needed to allow callbackbased code tobe used with asyncawait
normally there is no need to create future objects at theapplication level code
future objects sometimes exposed by libraries and some asyncio apiscan be awaited   async def main       await functionthatreturnsafutureobject        this is also valid       await asyncio
gather           functionthatreturnsafutureobject           somepythoncoroutine       a good example of a lowlevel function that returns a future object isloop
running an asyncio program
runcoro  debugfalse   execute the coroutine coro and return the result
   this function runs the passed coroutine taking care of managing   the asyncio event loop finalizing asynchronous generators and   closing the threadpool
   this function cannot be called when another asyncio event loop is   running in the same thread
   if debug is true the event loop will be run in debug mode
   this function always creates a new event loop and closes it at the   end
  it should be used as a main entry point for asyncio programs   and should ideally only be called once
   example      async def main          await asyncio
runmain   new in version 3
7
   changed in version 3
9 updated to use   loop
   note     the source code for asyncio
run can be found in     libasynciorunners
py
creating tasks
sleeping
sleepdelay resultnone  loopnone   block for delay seconds
   if result is provided it is returned to the caller when the   coroutine completes
   sleep always suspends the current task allowing other tasks to   run
10 the   loop parameter
   example of coroutine displaying the current date every second for 5   seconds      import asyncio      import datetime      async def displaydate          loop  asyncio
running tasks concurrently
gatheraws loopnone returnexceptionsfalse   run awaitable objects in the aws sequence concurrently
   if any awaitable in aws is a coroutine it is automatically   scheduled as a task
   if all awaitables are completed successfully the result is an   aggregate list of returned values
  the order of result values   corresponds to the order of awaitables in aws
   if returnexceptions is false default the first raised   exception is immediately propagated to the task that awaits on   gather
  other awaitables in the aws sequence wont be   cancelled and will continue to run
   if returnexceptions is true exceptions are treated the same   as successful results and aggregated in the result list
   if gather is cancelled all submitted awaitables that have   not completed yet are also cancelled
   if any task or future from the aws sequence is cancelled it is   treated as if it raised cancellederror  the gather call is   not cancelled in this case
  this is to prevent the   cancellation of one submitted taskfuture to cause other   tasksfutures to be cancelled
10 the   loop parameter
   example      import asyncio      async def factorialname number          f  1          for i in range2 number  1              printftask name compute factoriali
           task c factorial4  24   note     if returnexceptions is false cancelling gather after it has     been marked done wont cancel any submitted awaitables
 for     instance gather can be marked done after propagating an     exception to the caller therefore calling gather
cancel     after catching an exception raised by one of the awaitables     from gather wont cancel any other awaitables
   changed in version 3
7 if the gather itself is cancelled the   cancellation is propagated regardless of returnexceptions
shielding from cancellation
timeouts
waitforaw timeout  loopnone   wait for the aw awaitable to complete with a timeout
   if aw is a coroutine it is automatically scheduled as a task
   timeout can either be none or a float or int number of seconds   to wait for
  if timeout is none block until the future   completes
   if a timeout occurs it cancels the task and raises   asyncio
   to avoid the task cancellation wrap it in shield
   the function will wait until the future is actually cancelled so   the total wait time may exceed the timeout
 if an exception   happens during cancellation it is propagated
   if the wait is cancelled the future aw is also cancelled
10 the   loop parameter
   example      async def eternity           sleep for one hour          await asyncio
runmain       expected output                 timeout   changed in version 3
7 when aw is cancelled due to a timeout   waitfor waits for aw to be cancelled
  previously it raised   asyncio
timeouterror immediately
waiting primitives
   returns two sets of tasksfutures done pending
   usage      done pending  await asyncio
waitaws   timeout a float or int if specified can be used to control   the maximum number of seconds to wait before returning
   note that this function does not raise asyncio
   futures or tasks that arent done when the timeout occurs are   simply returned in the second set
   returnwhen indicates when this function should return
  it must   be one of the following constants       constant                       description                                     firstcompleted              the function will return when any future                                    finishes or is cancelled
                       firstexception              the function will return when any future                                    finishes by raising an exception
  if no                                    future raises an exception then it is                                       equivalent to allcompleted
                  allcompleted                the function will return when all                                           futures finish or are cancelled
               unlike waitfor wait does not cancel the futures when a   timeout occurs
   deprecated since version 3
8 if any awaitable in aws is a   coroutine it is automatically scheduled as a task
  passing   coroutines objects to wait directly is deprecated as it leads   to confusing behavior
10 the   loop parameter
   note     wait schedules coroutines as tasks automatically and later     returns those implicitly created task objects in done     pending sets
  therefore the following code wont work as     expected        async def foo            return 42        coro  foo        done pending  await asyncio
waitcoro        if coro in done             this branch will never be run     here is how the above snippet can be fixed        async def foo            return 42        task  asyncio
11   passing coroutine objects to wait directly is deprecated
   raises asyncio
timeouterror if the timeout occurs before all   futures are done
10 the   loop parameter
   example      for coro in ascompletedaws          earliestresult  await coro           
running in threads
tothreadfunc  args kwargs   asynchronously run function func in a separate thread
   any args and kwargs supplied for this function are directly   passed to func
 also the current contextvars
context is   propogated allowing context variables from the event loop thread   to be accessed in the separate thread
   return a coroutine that can be awaited to get the eventual result   of func
   this coroutine function is primarily intended to be used for   executing iobound functionsmethods that would otherwise block the   event loop if they were ran in the main thread
 for example      def blockingio          printfstart blockingio at time
runmain       expected output             started main at 195053       start blockingio at 195053       blockingio complete at 195054       finished main at 195054   directly calling blockingio in any coroutine would block the   event loop for its duration resulting in an additional 1 second of   run time
 instead by using asyncio
tothread we can run it in   a separate thread without blocking the event loop
   note     due to the gil asyncio
tothread can typically only be     used to make iobound functions nonblocking
 however for     extension modules that release the gil or alternative python     implementations that dont have one asyncio
tothread can     also be used for cpubound functions
   new in version 3
9
scheduling from other threads
runcoroutinethreadsafecoro loop   submit a coroutine to the given event loop
  threadsafe
   return a concurrent
future to wait for the result from   another os thread
   this function is meant to be called from a different os thread than   the one where the event loop is running
  example       create a coroutine      coro  asyncio
resulttimeout  3   if an exception is raised in the coroutine the returned future   will be notified
  it can also be used to cancel the task in the   event loop      try          result  future
cancel      except exception as exc          printfthe coroutine raised an exception excr      else          printfthe coroutine returned resultr   see the concurrency and multithreading section of the   documentation
   unlike other asyncio functions this function requires the loop   argument to be passed explicitly
   new in version 3
1
introspection
currenttaskloopnone   return the currently running task instance or none if no task   is running
   if loop is none getrunningloop is used to get the current   loop
   new in version 3
7
alltasksloopnone   return a set of not yet finished task objects run by the loop
   if loop is none getrunningloop is used for getting   current loop
   new in version 3
7
task object
taskcoro  loopnone namenone   a futurelike object that runs a python coroutine
  not thread   safe
   tasks are used to run coroutines in event loops
 if a coroutine   awaits on a future the task suspends the execution of the   coroutine and waits for the completion of the future
  when the   future is done the execution of the wrapped coroutine resumes
   event loops use cooperative scheduling an event loop runs one task   at a time
  while a task awaits for the completion of a future the   event loop runs other tasks callbacks or performs io operations
   use the highlevel asyncio
createtask function to create   tasks or the lowlevel loop
createtask or ensurefuture   functions
  manual instantiation of tasks is discouraged
   to cancel a running task use the cancel method
  calling it   will cause the task to throw a cancellederror exception into the   wrapped coroutine
  if a coroutine is awaiting on a future object   during cancellation the future object will be cancelled
   cancelled can be used to check if the task was cancelled
 the   method returns true if the wrapped coroutine did not suppress the   cancellederror exception and was actually cancelled
task inherits from future all of its apis except   future
setresult and future
setexception
   tasks support the contextvars module
  when a task is created it   copies the current context and later runs its coroutine in the   copied context
   changed in version 3
7 added support for the contextvars module
   changed in version 3
8 added the name parameter
10 the   loop parameter
   cancelmsgnone      request the task to be cancelled
      this arranges for a cancellederror exception to be thrown into      the wrapped coroutine on the next cycle of the event loop
      the coroutine then has a chance to clean up or even deny the      request by suppressing the exception with a try 
      except cancellederror 
 finally block
 therefore unlike      future
cancel task
cancel does not guarantee that the      task will be cancelled although suppressing cancellation      completely is not common and is actively discouraged
      changed in version 3
9 added the msg parameter
      the following example illustrates how coroutines can intercept      the cancellation request         async def cancelme             printcancelme before sleep             try                  wait for 1 hour                 await asyncio
runmain          expected output                       cancelme before sleep              cancelme cancel sleep              cancelme after sleep              main cancelme is cancelled now   cancelled      return true if the task is cancelled
      the task is cancelled when the cancellation was requested with      cancel and the wrapped coroutine propagated the      cancellederror exception thrown into it
   done      return true if the task is done
      a task is done when the wrapped coroutine either returned a      value raised an exception or the task was cancelled
   result      return the result of the task
      if the task is done the result of the wrapped coroutine is      returned or if the coroutine raised an exception that      exception is reraised
      if the task has been cancelled this method raises a      cancellederror exception
      if the tasks result isnt yet available this method raises a      invalidstateerror exception
   exception      return the exception of the task
      if the wrapped coroutine raised an exception that exception is      returned
  if the wrapped coroutine returned normally this      method returns none
      if the task has been cancelled this method raises a      cancellederror exception
      if the task isnt done yet this method raises an      invalidstateerror exception
   adddonecallbackcallback  contextnone      add a callback to be run when the task is done
      this method should only be used in lowlevel callbackbased      code
      see the documentation of future
adddonecallback for more      details
   removedonecallbackcallback      remove callback from the callbacks list
      this method should only be used in lowlevel callbackbased      code
      see the documentation of future
removedonecallback for      more details
   getstack limitnone      return the list of stack frames for this task
      if the wrapped coroutine is not done this returns the stack      where it is suspended
  if the coroutine has completed      successfully or was cancelled this returns an empty list
 if      the coroutine was terminated by an exception this returns the      list of traceback frames
      the frames are always ordered from oldest to newest
      only one stack frame is returned for a suspended coroutine
      the optional limit argument sets the maximum number of frames      to return by default all available frames are returned
 the      ordering of the returned list differs depending on whether a      stack or a traceback is returned the newest frames of a stack      are returned but the oldest frames of a traceback are returned
      this matches the behavior of the traceback module
   printstack limitnone filenone      print the stack or traceback for this task
      this produces output similar to that of the traceback module for      the frames retrieved by getstack
      the limit argument is passed to getstack directly
      the file argument is an io stream to which the output is      written by default output is written to sys
   getcoro      return the coroutine object wrapped by the task
      new in version 3
8
   getname      return the name of the task
      if no name has been explicitly assigned to the task the default      asyncio task implementation generates a default name during      instantiation
      new in version 3
8
   setnamevalue      set the name of the task
      the value argument can be any object which is then converted      to a string
      in the default task implementation the name will be visible in      the repr output of a task object
      new in version 3
8
generatorbased coroutines
note  support for generatorbased coroutines is deprecated and is  scheduled for removal in python 3
10
generatorbased coroutines predate asyncawait syntax
  they arepython generators that use yield from expressions to await onfutures and other coroutines
generatorbased coroutines should be decorated withasyncio
coroutine although this is not enforced
coroutine   decorator to mark generatorbased coroutines
   this decorator enables legacy generatorbased coroutines to be   compatible with asyncawait code      asyncio
sleep1      async def main          await oldstylecoroutine   this decorator should not be used for async def coroutines
10 use   async def instead
iscoroutineobj   return true if obj is a coroutine object
   this method is different from inspect
iscoroutine because it   returns true for generatorbased coroutines
iscoroutinefunctionfunc   return true if func is a coroutine function
   this method is different from inspect
iscoroutinefunction   because it returns true for generatorbased coroutine functions   decorated with coroutine
decimal  decimal fixed point and floating point arithmetic
source code libdecimal
pythe decimal module provides support for fast correctlyroundeddecimal floating point arithmetic
 it offers several advantages overthe float datatype decimal is based on a floatingpoint model which was designed with  people in mind and necessarily has a paramount guiding principle   computers must provide an arithmetic that works in the same way as  the arithmetic that people learn at school
  excerpt from the  decimal arithmetic specification
 decimal numbers can be represented exactly
  in contrast numbers  like 1
1 and 2
2 do not have exact representations in binary  floating point
 end users typically would not expect 1
2 to  display as 3
3000000000000003 as it does with binary floating  point
 the exactness carries over into arithmetic
  in decimal floating  point 0
3 is exactly equal to zero
  in binary  floating point the result is 5
5511151231257827e017
  while near  to zero the differences prevent reliable equality testing and  differences can accumulate
 for this reason decimal is preferred in  accounting applications which have strict equality invariants
 the decimal module incorporates a notion of significant places so  that 1
20 is 2
50
  the trailing zero is kept to indicate  significance
 this is the customary presentation for monetary  applications
 for multiplication the schoolbook approach uses all  the figures in the multiplicands
  for instance 1
2 gives  1
56 while 1
20 gives 1
5600
 unlike hardware based binary floating point the decimal module has  a user alterable precision defaulting to 28 places which can be as  large as needed for a given problem   from decimal import    getcontext
1428571428571428571428571429 both binary and decimal floating point are implemented in terms of  published standards
  while the builtin float type exposes only a  modest portion of its capabilities the decimal module exposes all  required parts of the standard
 when needed the programmer has full  control over rounding and signal handling
 this includes an option  to enforce exact arithmetic by using exceptions to block any inexact  operations
 the decimal module was designed to support without prejudice both  exact unrounded decimal arithmetic sometimes called fixedpoint  arithmetic and rounded floatingpoint arithmetic
   excerpt from  the decimal arithmetic specification
the module design is centered around three concepts  the decimalnumber the context for arithmetic and signals
a decimal number is immutable
  it has a sign coefficient digits andan exponent
  to preserve significance the coefficient digits do nottruncate trailing zeros
  decimals also include special values such asinfinity infinity and nan
  the standard also differentiates0 from 0
the context for arithmetic is an environment specifying precisionrounding rules limits on exponents flags indicating the results ofoperations and trap enablers which determine whether signals aretreated as exceptions
  rounding options include roundceilingrounddown roundfloor roundhalfdown roundhalfevenroundhalfup roundup and round05up
signals are groups of exceptional conditions arising during the courseof computation
  depending on the needs of the application signalsmay be ignored considered as informational or treated as exceptions
the signals in the decimal module are clamped invalidoperationdivisionbyzero inexact rounded subnormal overflowunderflow and floatoperation
for each signal there is a flag and a trap enabler
  when a signal isencountered its flag is set to one then if the trap enabler is setto one an exception is raised
  flags are sticky so the user needsto reset them before monitoring a calculation
see also   ibms general decimal arithmetic specification the general    decimal arithmetic specification
quickstart tutorial
the usual start to using decimals is importing the module viewing thecurrent context with getcontext and if necessary setting newvalues for precision rounding or enabled traps    from decimal import     getcontext   contextprec28 roundingroundhalfeven emin999999 emax999999           capitals1 clamp0 flags trapsoverflow divisionbyzero           invalidoperation    getcontext
prec  7        set a new precisiondecimal instances can be constructed from integers strings floatsor tuples
 construction from an integer or a float performs an exactconversion of the value of that integer or float
  decimal numbersinclude special values such as nan which stands for not a numberpositive and negative infinity and 0    getcontext
414213562373095048801688724    decimalnan   decimalnan    decimalinfinity   decimalinfinityif the floatoperation signal is trapped accidental mixing ofdecimals and floats in constructors or ordering comparisons raises anexception    c  getcontext    c
5   truenew in version 3
3
the significance of a new decimal is determined solely by the numberof digits input
  context precision and rounding only come into playduring arithmetic operations
85988if the internal limits of the c version are exceeded constructing adecimal raises invalidoperation    decimal1e9999999999999999999   traceback most recent call last     file stdin line 1 in module   decimal
invalidoperationchanged in version 3
3
decimals interact well with much of the rest of python
  here is asmall decimal floating point flying circus    data  listmapdecimal 1
77and some mathematical functions are also available to decimal getcontext
log10decimal1the quantize method rounds a number to a fixed exponent
  thismethod is useful for monetary applications that often round results toa fixed number of places decimal7
 roundingroundupdecimal8as shown above the getcontext function accesses the currentcontext and allows the settings to be changed
  this approach meetsthe needs of most applications
for more advanced work it may be useful to create alternate contextsusing the context constructor
  to make an alternate active use thesetcontext function
in accordance with the standard the decimal module provides twoready to use standard contexts basiccontext and extendedcontext
the former is especially useful for debugging because many of thetraps are enabled    myothercontext  contextprec60 roundingroundhalfdown    setcontextmyothercontext    decimal1  decimal7   decimal0
142857143    decimal42  decimal0   decimalinfinity    setcontextbasiccontext    decimal42  decimal0   traceback most recent call last     file pyshell143 line 1 in toplevel       decimal42  decimal0   divisionbyzero x  0contexts also have signal flags for monitoring exceptional conditionsencountered during computations
  the flags remain set untilexplicitly cleared so it is best to clear the flags before each setof monitored computations by using the clearflags method
    setcontextextendedcontext    getcontext
14159292    getcontext   contextprec9 roundingroundhalfeven emin999999 emax999999           capitals1 clamp0 flagsinexact rounded trapsthe flags entry shows that the rational approximation to pi wasrounded digits beyond the context precision were thrown away andthat the result is inexact some of the discarded digits were nonzero
individual traps are set using the dictionary in the traps field ofa context    setcontextextendedcontext    decimal1  decimal0   decimalinfinity    getcontext
trapsdivisionbyzero  1    decimal1  decimal0   traceback most recent call last     file pyshell112 line 1 in toplevel       decimal1  decimal0   divisionbyzero x  0most programs adjust the current context only once at the beginningof the program
  and in many applications data is converted todecimal with a single cast inside a loop
  with context set anddecimals created the bulk of the program manipulates the data nodifferently than with other python numeric types
decimal objects
decimalvalue0 contextnone   construct a new decimal object based from value
   value can be an integer string tuple float or another   decimal object
 if no value is given returns decimal0
   if value is a string it should conform to the decimal numeric   string syntax after leading and trailing whitespace characters as   well as underscores throughout are removed      sign                     digit            0  1  2  3  4  5  6  7  8  9      indicator        e  e      digits           digit digit
 digits      exponentpart    indicator sign digits      infinity         infinity  inf      nan              nan digits  snan digits      numericvalue    decimalpart exponentpart  infinity      numericstring   sign numericvalue  sign nan   other unicode decimal digits are also permitted where digit   appears above
  these include decimal digits from various other   alphabets for example arabicindic and devanāgarī digits along   with the fullwidth digits uff10 through uff19
   if value is a tuple it should have three components a sign   0 for positive or 1 for negative a tuple of digits and an   integer exponent
 for example decimal0 1 4 1 4 3   returns decimal1
   if value is a float the binary floating point value is   losslessly converted to its exact decimal equivalent
  this   conversion can often require 53 or more digits of precision
  for   example decimalfloat1
1 converts to   decimal1
100000000000000088817841970012523233890533447265625
   the context precision does not affect how many digits are stored
   that is determined exclusively by the number of digits in value
   for example decimal3
00000 records all five zeros even if   the context precision is only three
   the purpose of the context argument is determining what to do if   value is a malformed string
  if the context traps   invalidoperation an exception is raised otherwise the   constructor returns a new decimal with the value of nan
   once constructed decimal objects are immutable
   changed in version 3
2 the argument to the constructor is now   permitted to be a float instance
   changed in version 3
3 float arguments raise an exception if the   floatoperation trap is set
 by default the trap is off
   changed in version 3
6 underscores are allowed for grouping as   with integral and floatingpoint literals in code
   decimal floating point objects share many properties with the other   builtin numeric types such as float and int
  all of the usual   math operations and special methods apply
  likewise decimal   objects can be copied pickled printed used as dictionary keys   used as set elements compared sorted and coerced to another type   such as float or int
   there are some small differences between arithmetic on decimal   objects and arithmetic on integers and floats
  when the remainder   operator  is applied to decimal objects the sign of the result   is the sign of the dividend rather than the sign of the divisor       7  4      1       decimal7  decimal4      decimal3   the integer division operator  behaves analogously returning   the integer part of the true quotient truncating towards zero   rather than its floor so as to preserve the usual identity x    x  y  y  x  y       7  4      2       decimal7  decimal4      decimal1   the  and  operators implement the remainder and divide   integer operations respectively as described in the   specification
   decimal objects cannot generally be combined with floats or   instances of fractions
fraction in arithmetic operations an   attempt to add a decimal to a float for example will raise a   typeerror
  however it is possible to use pythons comparison   operators to compare a decimal instance x with another number   y
  this avoids confusing results when doing equality comparisons   between numbers of different types
   changed in version 3
2 mixedtype comparisons between decimal   instances and other numeric types are now fully supported
   in addition to the standard numeric properties decimal floating   point objects also have a number of specialized methods   adjusted      return the adjusted exponent after shifting out the      coefficients rightmost digits until only the lead digit      remains decimal321e5
adjusted returns seven
  used for      determining the position of the most significant digit with      respect to the decimal point
   asintegerratio      return a pair n d of integers that represent the given      decimal instance as a fraction in lowest terms and with a      positive denominator          decimal3
asintegerratio         157 50      the conversion is exact
  raise overflowerror on infinities and      valueerror on nans
   new in version 3
6
   astuple      return a named tuple representation of the number      decimaltuplesign digits exponent
   canonical      return the canonical encoding of the argument
  currently the      encoding of a decimal instance is always canonical so this      operation returns its argument unchanged
   compareother contextnone      compare the values of two decimal instances
  compare      returns a decimal instance and if either operand is a nan then      the result is a nan         a or b is a nan   decimalnan         a  b             decimal1         a  b            decimal0         a  b             decimal1   comparesignalother contextnone      this operation is identical to the compare method except      that all nans signal
  that is if neither operand is a      signaling nan then any quiet nan operand is treated as though it      were a signaling nan
   comparetotalother contextnone      compare two operands using their abstract representation rather      than their numerical value
  similar to the compare method      but the result gives a total ordering on decimal instances
      two decimal instances with the same numeric value but      different representations compare unequal in this ordering       decimal12
comparetotaldecimal12      decimal1      quiet and signaling nans are also included in the total      ordering
  the result of this function is decimal0 if both      operands have the same representation decimal1 if the      first operand is lower in the total order than the second and      decimal1 if the first operand is higher in the total order      than the second operand
  see the specification for details of      the total order
      this operation is unaffected by context and is quiet no flags      are changed and no rounding is performed
  as an exception the      c version may raise invalidoperation if the second operand      cannot be converted exactly
   comparetotalmagother contextnone      compare two operands using their abstract representation rather      than their value as in comparetotal but ignoring the sign      of each operand
 x
comparetotalmagy is equivalent to      x
      this operation is unaffected by context and is quiet no flags      are changed and no rounding is performed
  as an exception the      c version may raise invalidoperation if the second operand      cannot be converted exactly
   conjugate      just returns self this method is only to comply with the      decimal specification
   copyabs      return the absolute value of the argument
  this operation is      unaffected by the context and is quiet no flags are changed and      no rounding is performed
   copynegate      return the negation of the argument
  this operation is      unaffected by the context and is quiet no flags are changed and      no rounding is performed
   copysignother contextnone      return a copy of the first operand with the sign set to be the      same as the sign of the second operand
  for example       decimal2
3      this operation is unaffected by context and is quiet no flags      are changed and no rounding is performed
  as an exception the      c version may raise invalidoperation if the second operand      cannot be converted exactly
   expcontextnone      return the value of the natural exponential function ex at      the given number
  the result is correctly rounded using the      roundhalfeven rounding mode
561702493119680037517373933e139   fromfloatf      classmethod that converts a float to a decimal number exactly
      note decimal
1 is not the same as      decimal0
1
 since 0
1 is not exactly representable in      binary floating point the value is stored as the nearest      representable value which is 0x1
999999999999ap4
  that      equivalent value in decimal is      0
1000000000000000055511151231257827021181583404541015625
      note        from python 3
2 onwards a decimal instance can also be        constructed directly from a float
fromfloatfloatinf         decimalinfinity      new in version 3
1
   fmaother third contextnone      fused multiplyadd
  return selfotherthird with no rounding of      the intermediate product selfother
fma3 5      decimal11   iscanonical      return true if the argument is canonical and false      otherwise
  currently a decimal instance is always canonical      so this operation always returns true
   isfinite      return true if the argument is a finite number and false if      the argument is an infinity or a nan
   isinfinite      return true if the argument is either positive or negative      infinity and false otherwise
   isnan      return true if the argument is a quiet or signaling nan and      false otherwise
   isnormalcontextnone      return true if the argument is a normal finite number
      return false if the argument is zero subnormal infinite or a      nan
   isqnan      return true if the argument is a quiet nan and false      otherwise
   issigned      return true if the argument has a negative sign and false      otherwise
  note that zeros and nans can both carry signs
   issnan      return true if the argument is a signaling nan and false      otherwise
   issubnormalcontextnone      return true if the argument is subnormal and false      otherwise
   iszero      return true if the argument is a positive or negative zero      and false otherwise
   lncontextnone      return the natural base e logarithm of the operand
  the      result is correctly rounded using the roundhalfeven rounding      mode
   log10contextnone      return the base ten logarithm of the operand
  the result is      correctly rounded using the roundhalfeven rounding mode
   logbcontextnone      for a nonzero number return the adjusted exponent of its      operand as a decimal instance
  if the operand is a zero then      decimalinfinity is returned and the divisionbyzero flag      is raised
  if the operand is an infinity then      decimalinfinity is returned
   logicalandother contextnone      logicaland is a logical operation which takes two logical      operands see logical operands
  the result is the digitwise      and of the two operands
   logicalinvertcontextnone      logicalinvert is a logical operation
  the result is the      digitwise inversion of the operand
   logicalorother contextnone      logicalor is a logical operation which takes two logical      operands see logical operands
  the result is the digitwise      or of the two operands
   logicalxorother contextnone      logicalxor is a logical operation which takes two logical      operands see logical operands
  the result is the digitwise      exclusive or of the two operands
   maxother contextnone      like maxself other except that the context rounding rule is      applied before returning and that nan values are either      signaled or ignored depending on the context and whether they      are signaling or quiet
   maxmagother contextnone      similar to the max method but the comparison is done using      the absolute values of the operands
   minother contextnone      like minself other except that the context rounding rule is      applied before returning and that nan values are either      signaled or ignored depending on the context and whether they      are signaling or quiet
   minmagother contextnone      similar to the min method but the comparison is done using      the absolute values of the operands
   nextminuscontextnone      return the largest number representable in the given context or      in the current threads context if no context is given that is      smaller than the given operand
   nextpluscontextnone      return the smallest number representable in the given context      or in the current threads context if no context is given that      is larger than the given operand
   nexttowardother contextnone      if the two operands are unequal return the number closest to      the first operand in the direction of the second operand
  if      both operands are numerically equal return a copy of the first      operand with the sign set to be the same as the sign of the      second operand
   normalizecontextnone      normalize the number by stripping the rightmost trailing zeros      and converting any result equal to decimal0 to      decimal0e0
 used for producing canonical values for      attributes of an equivalence class
 for example      decimal32
100 and decimal0
321000e2 both normalize      to the equivalent value decimal32
   numberclasscontextnone      return a string describing the class of the operand
  the      returned value is one of the following ten strings
       infinity indicating that the operand is negative        infinity
       normal indicating that the operand is a negative normal        number
       subnormal indicating that the operand is negative and        subnormal
       zero indicating that the operand is a negative zero
       zero indicating that the operand is a positive zero
       subnormal indicating that the operand is positive and        subnormal
       normal indicating that the operand is a positive normal        number
       infinity indicating that the operand is positive        infinity
       nan indicating that the operand is a quiet nan not a        number
       snan indicating that the operand is a signaling nan
   quantizeexp roundingnone contextnone      return a value equal to the first operand after rounding and      having the exponent of the second operand
414      unlike other operations if the length of the coefficient after      the quantize operation would be greater than precision then an      invalidoperation is signaled
 this guarantees that unless      there is an error condition the quantized exponent is always      equal to that of the righthand operand
      also unlike other operations quantize never signals underflow      even if the result is subnormal and inexact
      if the exponent of the second operand is larger than that of the      first then rounding may be necessary
  in this case the      rounding mode is determined by the rounding argument if given      else by the given context argument if neither argument is      given the rounding mode of the current threads context is used
      an error is returned whenever the resulting exponent is greater      than emax or less than etiny
   radix      return decimal10 the radix base in which the decimal      class does all its arithmetic
  included for compatibility with      the specification
   remaindernearother contextnone      return the remainder from dividing self by other
  this      differs from self  other in that the sign of the remainder is      chosen so as to minimize its absolute value
  more precisely      the return value is self  n  other where n is the integer      nearest to the exact value of self  other and if two      integers are equally near then the even one is chosen
      if the result is zero then its sign will be the sign of self
remainderneardecimal10      decimal5   rotateother contextnone      return the result of rotating the digits of the first operand by      an amount specified by the second operand
  the second operand      must be an integer in the range precision through precision
      the absolute value of the second operand gives the number of      places to rotate
  if the second operand is positive then      rotation is to the left otherwise rotation is to the right
 the      coefficient of the first operand is padded on the left with      zeros to length precision if necessary
  the sign and exponent      of the first operand are unchanged
   samequantumother contextnone      test whether self and other have the same exponent or whether      both are nan
      this operation is unaffected by context and is quiet no flags      are changed and no rounding is performed
  as an exception the      c version may raise invalidoperation if the second operand      cannot be converted exactly
   scalebother contextnone      return the first operand with exponent adjusted by the second
      equivalently return the first operand multiplied by      10other
  the second operand must be an integer
   shiftother contextnone      return the result of shifting the digits of the first operand by      an amount specified by the second operand
  the second operand      must be an integer in the range precision through precision
      the absolute value of the second operand gives the number of      places to shift
  if the second operand is positive then the      shift is to the left otherwise the shift is to the right
      digits shifted into the coefficient are zeros
  the sign and      exponent of the first operand are unchanged
   sqrtcontextnone      return the square root of the argument to full precision
   toengstringcontextnone      convert to a string using engineering notation if an exponent      is needed
      engineering notation has an exponent which is a multiple of 3
      this can leave up to 3 digits to the left of the decimal place      and may require the addition of either one or two trailing      zeros
      for example this converts decimal123e1 to      decimal1
23e3
   tointegralroundingnone contextnone      identical to the tointegralvalue method
  the      tointegral name has been kept for compatibility with older      versions
   tointegralexactroundingnone contextnone      round to the nearest integer signaling inexact or rounded      as appropriate if rounding occurs
  the rounding mode is      determined by the rounding parameter if given else by the      given context
  if neither parameter is given then the      rounding mode of the current context is used
   tointegralvalueroundingnone contextnone      round to the nearest integer without signaling inexact or      rounded
  if given applies rounding otherwise uses the      rounding method in either the supplied context or the current      context
logical operands
the logicaland logicalinvert logicalor andlogicalxor methods expect their arguments to be logicaloperands
  a logical operand is a decimal instance whose exponentand sign are both zero and whose digits are all either 0 or 1
context objects
contexts are environments for arithmetic operations
  they governprecision set rules for rounding determine which signals are treatedas exceptions and limit the range for exponents
each thread has its own current context which is accessed or changedusing the getcontext and setcontext functionsdecimal
getcontext   return the current context for the active thread
setcontextc   set the current context for the active thread to c
you can also use the with statement and the localcontextfunction to temporarily change the active context
localcontextctxnone   return a context manager that will set the current context for the   active thread to a copy of ctx on entry to the withstatement and   restore the previous context when exiting the withstatement
 if no   context is specified a copy of the current context is used
   for example the following code sets the current decimal precision   to 42 places performs a calculation and then automatically   restores the previous context      from decimal import localcontext      with localcontext as ctx          ctx
prec  42    perform a high precision calculation          s  calculatesomething      s  s   round the final result back to the default precisionnew contexts can also be created using the context constructordescribed below
 in addition the module provides three premadecontextsclass decimal
basiccontext   this is a standard context defined by the general decimal   arithmetic specification
  precision is set to nine
  rounding is   set to roundhalfup
  all flags are cleared
  all traps are   enabled treated as exceptions except inexact rounded and   subnormal
   because many of the traps are enabled this context is useful for   debugging
extendedcontext   this is a standard context defined by the general decimal   arithmetic specification
  precision is set to nine
  rounding is   set to roundhalfeven
  all flags are cleared
  no traps are   enabled so that exceptions are not raised during computations
   because the traps are disabled this context is useful for   applications that prefer to have result value of nan or   infinity instead of raising exceptions
  this allows an   application to complete a run in the presence of conditions that   would otherwise halt the program
defaultcontext   this context is used by the context constructor as a prototype   for new contexts
  changing a field such a precision has the   effect of changing the default for new contexts created by the   context constructor
   this context is most useful in multithreaded environments
   changing one of the fields before threads are started has the   effect of setting systemwide defaults
  changing the fields after   threads have started is not recommended as it would require thread   synchronization to prevent race conditions
   in single threaded environments it is preferable to not use this   context at all
  instead simply create contexts explicitly as   described below
   the default values are prec28 roundingroundhalfeven   and enabled traps for overflow invalidoperation and   divisionbyzero
in addition to the three supplied contexts new contexts can becreated with the context constructor
contextprecnone roundingnone eminnone emaxnone capitalsnone clampnone flagsnone trapsnone   creates a new context
  if a field is not specified or is none   the default values are copied from the defaultcontext
  if the   flags field is not specified or is none all flags are cleared
   prec is an integer in the range 1 maxprec that sets the   precision for arithmetic operations in the context
   the rounding option is one of the constants listed in the section   rounding modes
   the traps and flags fields list any signals to be set
   generally new contexts should only set traps and leave the flags   clear
   the emin and emax fields are integers specifying the outer   limits allowable for exponents
 emin must be in the range   minemin 0 emax in the range 0 maxemax
   the capitals field is either 0 or 1 the default
 if set to   1 exponents are printed with a capital e otherwise a   lowercase e is used decimal6
   the clamp field is either 0 the default or 1
 if set to   1 the exponent e of a decimal instance representable in this   context is strictly limited to the range emin  prec  1  e    emax  prec  1
  if clamp is 0 then a weaker condition holds   the adjusted exponent of the decimal instance is at most emax
   when clamp is 1 a large normal number will where possible   have its exponent reduced and a corresponding number of zeros added   to its coefficient in order to fit the exponent constraints this   preserves the value of the number but loses information about   significant trailing zeros
  for example       contextprec6 emax999 clamp1
23000e999   a clamp value of 1 allows compatibility with the fixedwidth   decimal interchange formats specified in ieee 754
   the context class defines several general purpose methods as well   as a large number of methods for doing arithmetic directly in a   given context
 in addition for each of the decimal methods   described above with the exception of the adjusted and   astuple methods there is a corresponding context method
   for example for a context instance c and decimal instance   x c
expx is equivalent to x
  each   context method accepts a python integer an instance of int   anywhere that a decimal instance is accepted
   clearflags      resets all of the flags to 0
   cleartraps      resets all of the traps to 0
      new in version 3
3
   copy      return a duplicate of the context
   copydecimalnum      return a copy of the decimal instance num
   createdecimalnum      creates a new decimal instance from num but using self as      context
 unlike the decimal constructor the context      precision rounding method flags and traps are applied to the      conversion
      this is useful because constants are often given to a greater      precision than is needed by the application
  another benefit is      that rounding immediately eliminates unintended effects from      digits beyond the current precision
 in the following example      using unrounded inputs means that adding zero to a sum can      change the result          getcontext
44      this method implements the tonumber operation of the ibm      specification
 if the argument is a string no leading or      trailing whitespace or underscores are permitted
   createdecimalfromfloatf      creates a new decimal instance from a float f but rounding      using self as the context
  unlike the decimal
fromfloat      class method the context precision rounding method flags and      traps are applied to the conversion
inexact none      new in version 3
1
   etiny      returns a value equal to emin  prec  1 which is the minimum      exponent value for subnormal results
  when underflow occurs      the exponent is set to etiny
   etop      returns a value equal to emax  prec  1
   the usual approach to working with decimals is to create decimal   instances and then apply arithmetic operations which take place   within the current context for the active thread
  an alternative   approach is to use context methods for calculating within a   specific context
  the methods are similar to those for the   decimal class and are only briefly recounted here
   absx      returns the absolute value of x
   addx y      return the sum of x and y
   canonicalx      returns the same decimal object x
   comparex y      compares x and y numerically
   comparesignalx y      compares the values of the two operands numerically
   comparetotalx y      compares two operands using their abstract representation
   comparetotalmagx y      compares two operands using their abstract representation      ignoring sign
   copyabsx      returns a copy of x with the sign set to 0
   copynegatex      returns a copy of x with the sign inverted
   copysignx y      copies the sign from y to x
   dividex y      return x divided by y
   divideintx y      return x divided by y truncated to an integer
   divmodx y      divides two numbers and returns the integer part of the result
   expx      returns e  x
   fmax y z      returns x multiplied by y plus z
   iscanonicalx      returns true if x is canonical otherwise returns false
   isfinitex      returns true if x is finite otherwise returns false
   isinfinitex      returns true if x is infinite otherwise returns false
   isnanx      returns true if x is a qnan or snan otherwise returns      false
   isnormalx      returns true if x is a normal number otherwise returns      false
   isqnanx      returns true if x is a quiet nan otherwise returns false
   issignedx      returns true if x is negative otherwise returns false
   issnanx      returns true if x is a signaling nan otherwise returns      false
   issubnormalx      returns true if x is subnormal otherwise returns false
   iszerox      returns true if x is a zero otherwise returns false
   lnx      returns the natural base e logarithm of x
   log10x      returns the base 10 logarithm of x
   logbx      returns the exponent of the magnitude of the operands msd
   logicalandx y      applies the logical operation and between each operands      digits
   logicalinvertx      invert all the digits in x
   logicalorx y      applies the logical operation or between each operands      digits
   logicalxorx y      applies the logical operation xor between each operands      digits
   maxx y      compares two values numerically and returns the maximum
   maxmagx y      compares the values numerically with their sign ignored
   minx y      compares two values numerically and returns the minimum
   minmagx y      compares the values numerically with their sign ignored
   minusx      minus corresponds to the unary prefix minus operator in python
   multiplyx y      return the product of x and y
   nextminusx      returns the largest representable number smaller than x
   nextplusx      returns the smallest representable number larger than x
   nexttowardx y      returns the number closest to x in direction towards y
   normalizex      reduces x to its simplest form
   numberclassx      returns an indication of the class of x
   plusx      plus corresponds to the unary prefix plus operator in python
      this operation applies the context precision and rounding so it      is not an identity operation
   powerx y modulonone      return x to the power of y reduced modulo modulo if      given
      with two arguments compute xy
  if x is negative then y      must be integral
  the result will be inexact unless y is      integral and the result is finite and can be expressed exactly      in precision digits
 the rounding mode of the context is used
      results are always correctlyrounded in the python version
      decimal0  decimal0 results in invalidoperation and if      invalidoperation is not trapped then results in      decimalnan
      changed in version 3
3 the c module computes power in terms      of the correctlyrounded exp and ln functions
 the      result is welldefined but only almost always correctly      rounded
      with three arguments compute xy  modulo
  for the three      argument form the following restrictions on the arguments hold          all three arguments must be integral          y must be nonnegative          at least one of x or y must be nonzero          modulo must be nonzero and have at most precision           digits      the value resulting from context
powerx y modulo is equal      to the value that would be obtained by computing xy       modulo with unbounded precision but is computed more      efficiently
  the exponent of the result is zero regardless of      the exponents of x y and modulo
  the result is always      exact
   quantizex y      returns a value equal to x rounded having the exponent of      y
   radix      just returns 10 as this is decimal    remainderx y      returns the remainder from integer division
      the sign of the result if nonzero is the same as that of the      original dividend
   remaindernearx y      returns x  y  n where n is the integer nearest the exact      value of x  y if the result is 0 then its sign will be the      sign of x
   rotatex y      returns a rotated copy of x y times
   samequantumx y      returns true if the two operands have the same exponent
   scalebx y      returns the first operand after adding the second value its exp
   shiftx y      returns a shifted copy of x y times
   sqrtx      square root of a nonnegative number to context precision
   subtractx y      return the difference between x and y
   toengstringx      convert to a string using engineering notation if an exponent      is needed
      engineering notation has an exponent which is a multiple of 3
      this can leave up to 3 digits to the left of the decimal place      and may require the addition of either one or two trailing      zeros
   tointegralexactx      rounds to an integer
   toscistringx      converts a number to a string using scientific notation
constants
the constants in this section are only relevant for the c module
 theyare also included in the pure python version for compatibility
                        32bit                 64bit                           decimal
havethreads   the value is true
  deprecated because python now always has   threads
deprecated since version 3
9
havecontextvar   the default value is true
 if python is compiled without   decimalcontextvar the c version uses a threadlocal rather than   a coroutinelocal context and the value is false
  this is   slightly faster in some nested context scenarios
new in version 3
9 backported to 3
7 and 3
rounding modes
roundceiling   round towards infinity
rounddown   round towards zero
roundfloor   round towards infinity
roundhalfdown   round to nearest with ties going towards zero
roundhalfeven   round to nearest with ties going to nearest even integer
roundhalfup   round to nearest with ties going away from zero
roundup   round away from zero
round05up   round away from zero if last digit after rounding towards zero   would have been 0 or 5 otherwise round towards zero
signals
signals represent conditions that arise during computation
 eachcorresponds to one context flag and one context trap enabler
the context flag is set whenever the condition is encountered
 afterthe computation flags may be checked for informational purposes forinstance to determine whether a computation was exact
 afterchecking the flags be sure to clear all flags before starting thenext computation
if the contexts trap enabler is set for the signal then thecondition causes a python exception to be raised
  for example if thedivisionbyzero trap is set then a divisionbyzero exception israised upon encountering the condition
clamped   altered an exponent to fit representation constraints
   typically clamping occurs when an exponent falls outside the   contexts emin and emax limits
  if possible the exponent is   reduced to fit by adding zeros to the coefficient
decimalexception   base class for other signals and a subclass of arithmeticerror
divisionbyzero   signals the division of a noninfinite number by zero
   can occur with division modulo division or when raising a number   to a negative power
  if this signal is not trapped returns   infinity or infinity with the sign determined by the inputs to   the calculation
inexact   indicates that rounding occurred and the result is not exact
   signals when nonzero digits were discarded during rounding
 the   rounded result is returned
  the signal flag or trap is used to   detect when results are inexact
invalidoperation   an invalid operation was performed
   indicates that an operation was requested that does not make sense
   if not trapped returns nan
  possible causes include      infinity  infinity      0  infinity      infinity  infinity      x  0      infinity  x      sqrtx and x  0      0  0      x  noninteger      x  infinityclass decimal
overflow   numerical overflow
   indicates the exponent is larger than emax after rounding has   occurred
  if not trapped the result depends on the rounding mode   either pulling inward to the largest representable finite number or   rounding outward to infinity
  in either case inexact and   rounded are also signaled
rounded   rounding occurred though possibly no information was lost
   signaled whenever rounding discards digits even if those digits   are zero such as rounding 5
00 to 5
  if not trapped   returns the result unchanged
  this signal is used to detect loss   of significant digits
subnormal   exponent was lower than emin prior to rounding
   occurs when an operation result is subnormal the exponent is too   small
 if not trapped returns the result unchanged
underflow   numerical underflow with result rounded to zero
   occurs when a subnormal result is pushed to zero by rounding
   inexact and subnormal are also signaled
floatoperation   enable stricter semantics for mixing floats and decimals
   if the signal is not trapped default mixing floats and decimals   is permitted in the decimal constructor createdecimal and   all comparison operators
 both conversion and comparisons are   exact
 any occurrence of a mixed operation is silently recorded by   setting floatoperation in the context flags
 explicit conversions   with fromfloat or createdecimalfromfloat do not set the   flag
   otherwise the signal is trapped only equality comparisons and   explicit conversions are silent
 all other mixed operations raise   floatoperation
the following table summarizes the hierarchy of signals   exceptions
floating point notes
mitigating roundoff error with increased precision
the use of decimal floating point eliminates decimal representationerror making it possible to represent 0
1 exactly however someoperations can still incur roundoff error when nonzero digits exceedthe fixed precision
the effects of roundoff error can be amplified by the addition orsubtraction of nearly offsetting quantities resulting in loss ofsignificance
  knuth provides two instructive examples where roundedfloating point arithmetic with insufficient precision causes thebreakdown of the associative and distributive properties of addition    examples from seminumerical algorithms section 4
0060000the decimal module makes it possible to restore the identities byexpanding the precision sufficiently to avoid loss of significance    getcontext
special values
the number system for the decimal module provides special valuesincluding nan snan infinity infinity and two zeros 0and 0
infinities can be constructed directly with  decimalinfinity
also they can arise from dividing by zero when the divisionbyzerosignal is not trapped
  likewise when the overflow signal is nottrapped infinity can result from rounding beyond the limits of thelargest representable number
the infinities are signed affine and can be used in arithmeticoperations where they get treated as very large indeterminatenumbers
  for instance adding a constant to infinity gives anotherinfinite result
some operations are indeterminate and return nan or if theinvalidoperation signal is trapped raise an exception
  forexample 00 returns nan which means not a number
  this varietyof nan is quiet and once created will flow through othercomputations always resulting in another nan
  this behavior can beuseful for a series of computations that occasionally have missinginputs  it allows the calculation to proceed while flaggingspecific results as invalid
a variant is snan which signals rather than remaining quiet afterevery operation
  this is a useful return value when an invalid resultneeds to interrupt a calculation for special handling
the behavior of pythons comparison operators can be a littlesurprising where a nan is involved
  a test for equality where oneof the operands is a quiet or signaling nan always returns falseeven when doing decimalnandecimalnan while a test forinequality always returns true
  an attempt to compare two decimalsusing any of the    or  operators will raise theinvalidoperation signal if either operand is a nan and returnfalse if this signal is not trapped
  note that the general decimalarithmetic specification does not specify the behavior of directcomparisons these rules for comparisons involving a nan were takenfrom the ieee 854 standard see table 3 in section 5
7
  to ensurestrict standardscompliance use the compare and comparesignal methods instead
the signed zeros can result from calculations that underflow
 theykeep the sign that would have resulted if the calculation had beencarried out to greater precision
  since their magnitude is zero bothpositive and negative zeros are treated as equal and their sign isinformational
in addition to the two signed zeros which are distinct yet equalthere are various representations of zero with differing precisionsyet equivalent in value
  this takes a bit of getting used to
  for aneye accustomed to normalized floating point representations it is notimmediately obvious that the following calculation returns a valueequal to zero 1  decimalinfinitydecimal0e1000026
working with threads
the getcontext function accesses a different context object foreach thread
  having separate thread contexts means that threads maymake changes such as getcontext
prec10 without interfering withother threads
likewise the setcontext function automatically assigns its targetto the current thread
if setcontext has not been called before getcontext thengetcontext will automatically create a new context for use in thecurrent thread
the new context is copied from a prototype context calleddefaultcontext
 to control the defaults so that each thread will usethe same values throughout the application directly modify thedefaultcontext object
 this should be done before any threads arestarted so that there wont be a race condition between threadscalling getcontext
 for example    set applicationwide defaults for all threads about to be launched   defaultcontext
recipes
here are a few recipes that serve as utility functions and thatdemonstrate ways to work with the decimal class   def moneyfmtvalue places2 curr sep dp
decimal faq
warnings  warning control
source code libwarnings
  c programmers use pyerrwarnex seeexception handling for details
see also  logging
warning categories
the following warnings category classes are currently defined class                               description                                      warning                           this is the base class of all warning category                                       classes
                                          changed in version 3
7 previously deprecationwarning andfuturewarning were distinguished based on whether a feature wasbeing removed entirely or changing its behaviour
 they are nowdistinguished based on their intended audience and the way theyrehandled by the default warnings filters
the warnings filter
  each entry is a tuple of theform action message category module lineno where action is one of the following strings     value            disposition                                         default      print the first occurrence of matching                             warnings for each location module  line                          number where the warning is issued                 error        turn matching warnings into exceptions              ignore       never print matching warnings                       always       always print matching warnings                      module       print the first occurrence of matching                             warnings for each module where the warning is                      issued regardless of line number                  once         print only the first occurrence of matching                        warnings regardless of location                  message is a string containing a regular expression that the start  of the warning message must match
describing warning filters
default warning filter
changed in version 3
2 deprecationwarning is now ignored by defaultin addition to pendingdeprecationwarning
changed in version 3
7 deprecationwarning is once again shown bydefault when triggered directly by code in main
changed in version 3
7 byteswarning no longer appears in thedefault filter list and is instead configured via sys
warnoptionswhen b is specified twice
overriding the default filter
temporarily suppressing warnings
testing warnings
updating code for new versions of dependencies
available functions
   changed in version 3
6 added source parameter
   changed in version 3
6 add the source parameter
available context managers
   note     the catchwarnings manager works by replacing and then later     restoring the modules showwarning function and internal list     of filter specifications
tarfile  read and write tar archive files
tarfile objects
tarinfo objects
commandline interface
new in version 3
4
the tarfile module provides a simple commandline interface tointeract with tar archives
if you want to create a new tar archive specify its name after thec option and then list the filenames that should be included    python m tarfile c monty
txtpassing a directory is also acceptable    python m tarfile c monty
tar lifeofbrian1979if you want to extract a tar archive into the current directory usethe e option    python m tarfile e monty
taryou can also extract a tar archive into a different directory bypassing the directorys name    python m tarfile e monty
tar  otherdirfor a list of the files in a tar archive use the l option    python m tarfile l monty
commandline options
l tarfilelist tarfile   list files in a tarfile
 sourcen   create tarfile from source files
e tarfile outputdirextract tarfile outputdir   extract tarfile into the current directory if outputdir is not   specified
t tarfiletest tarfile   test whether the tarfile is valid or not
v verbose   verbose output
examples
how to extract an entire tar archive to the current working directory   import tarfile   tar  tarfile
closehow to extract a subset of a tar archive with tarfile
extractallusing a generator function instead of a list   import os   import tarfile   def pyfilesmembers       for tarinfo in members           if os
closehow to create an uncompressed tar archive from a list of filenames   import tarfile   tar  tarfile
closethe same example using the with statement   import tarfile   with tarfile
addnamehow to read a gzip compressed tar archive and display some memberinformation   import tarfile   tar  tarfile
closehow to create an archive and reset the user information using thefilter parameter in tarfile
add   import tarfile   def resettarinfo       tarinfo
supported tar formats
there are three tar formats that can be created with the tarfilemodule the posix
11988 ustar format ustarformat
 it supports  filenames up to a length of at best 256 characters and linknames up  to 100 characters
 the maximum file size is 8 gib
 this is an old  and limited but widely supported format
 the gnu tar format gnuformat
 it supports long filenames and  linknames files bigger than 8 gib and sparse files
 it is the de  facto standard on gnulinux systems
 tarfile fully supports the  gnu tar extensions for long names sparse file support is readonly
 the posix
12001 pax format paxformat
 it is the most flexible  format with virtually no limits
 it supports long filenames and  linknames large files and stores pathnames in a portable way
  modern tar implementations including gnu tar bsdtarlibarchive and  star fully support extended pax features some old or  unmaintained libraries may not but should treat pax archives as  if they were in the universallysupported ustar format
 it is the  current default format for new archives
  it extends the existing ustar format with extra headers for  information that cannot be stored otherwise
 there are two flavours  of pax headers extended headers only affect the subsequent file  header global headers are valid for the complete archive and affect  all following files
 all the data in a pax header is encoded in  utf8 for portability reasons
there are some more variants of the tar format which can be read butnot created the ancient v7 format
 this is the first tar format from unix  seventh edition storing only regular files and directories
 names  must not be longer than 100 characters there is no usergroup name  information
 some archives have miscalculated header checksums in  case of fields with nonascii characters
 the sunos tar extended format
 this format is a variant of the  posix
12001 pax format but is not compatible
unicode issues
the tar format was originally conceived to make backups on tape driveswith the main focus on preserving file system information
 nowadaystar archives are commonly used for file distribution and exchangingarchives over networks
 one problem of the original format which isthe basis of all other formats is that there is no concept ofsupporting different character encodings
 for example an ordinary tararchive created on a utf8 system cannot be read correctly on alatin1 system if it contains nonascii characters
 textualmetadata like filenames linknames usergroup names will appeardamaged
 unfortunately there is no way to autodetect the encoding ofan archive
 the pax format was designed to solve this problem
 itstores nonascii metadata using the universal character encodingutf8
the details of character conversion in tarfile are controlled by theencoding and errors keyword arguments of the tarfile class
encoding defines the character encoding to use for the metadata inthe archive
 the default value is sys
getfilesystemencoding orascii as a fallback
 depending on whether the archive is read orwritten the metadata must be either decoded or encoded
 if encodingis not set appropriately this conversion may fail
the errors argument defines how characters are treated that cannotbe converted
 possible values are listed in section error handlers
the default scheme is surrogateescape which python also uses forits file system calls see file names command line arguments andenvironment variables
for paxformat archives the default encoding is generally notneeded because all the metadata is stored using utf8
 encoding isonly used in the rare cases when binary pax headers are decoded orwhen strings with surrogate characters are stored
tkinterdnd  drag and drop support
source code libtkinterdnd
pynote  this is experimental and due to be deprecated when it is replaced  with the tk dnd
the tkinter
dnd module provides draganddrop support for objectswithin a single application within the same window or betweenwindows
 to enable an object to be dragged you must create an eventbinding for it that starts the draganddrop process
 typically youbind a buttonpress event to a callback function that you write seebindings and events
 the function should call dndstart wheresource is the object to be dragged and event is the event thatinvoked the call the argument to your callback function
selection of a target object occurs as follows1
 topdown search of area under mouse for target widget    target widget should have a callable dndaccept attribute    if dndaccept is not present or returns none search moves to     parent widget    if no target widget is found then the target object is none2
 call to oldtarget
 call to newtarget
 call to target
dndcommitsource event to notify of drop5
 call to source
dndendtarget event to signal end of drag   anddropclass tkinter
dndhandlersource event   the dndhandler class handles draganddrop events tracking motion   and buttonrelease events on the root of the event widget
   canceleventnone      cancel the draganddrop process
   finishevent commit0      execute end of draganddrop functions
   onmotionevent      inspect area below mouse for target objects while drag is      performed
   onreleaseevent      signal end of drag when the release pattern is triggered
dndstartsource event   factory function for draganddrop process
see also bindings and events
httpcookiejar  cookie handling for http clients
cookiejar and filecookiejar objects
   changed in version 3
3 request object needs originreqhost   attribute
 dependency on a deprecated method   getoriginreqhost has been removed
   changed in version 3
3 request object needs originreqhost   attribute
 dependency on a deprecated method   getoriginreqhost has been removed
   changed in version 3
3 ioerror used to be raised it is now an   alias of oserror
filecookiejar subclasses and cooperation with web browsers
   note     this loses information about rfc 2965 cookies and also about     newer or nonstandard cookieattributes such as port
   warning     back up your cookies before saving if you have cookies whose loss      corruption would be inconvenient there are some subtleties     which may lead to slight changes in the file over a load  save     roundtrip
   changed in version 3
8 the filename parameter supports a path   like object
cookiepolicy objects
defaultcookiepolicy objects
cookie objects
examples
miscellaneous services
the modules described in this chapter provide miscellaneous servicesthat are available in all python versions
  heres an overview formatter  generic output formatting   the formatter interface   formatter implementations   the writer interface   writer implementations
pathlib  objectoriented filesystem paths
new in version 3
4
source code libpathlib
pythis module offers classes representing filesystem paths withsemantics appropriate for different operating systems
  path classesare divided between pure paths which provide purely computationaloperations without io and concrete paths which inherit from purepaths but also provide io operations
imageif youve never used this module before or just arent sure whichclass is right for your task path is most likely what you need
 itinstantiates a concrete path for the platform the code is running on
pure paths are useful in some special cases for example1
 if you want to manipulate windows paths on a unix machine or vice   versa
 you cannot instantiate a windowspath when running on   unix but you can instantiate purewindowspath
 you want to make sure that your code only manipulates paths without   actually accessing the os
 in this case instantiating one of the   pure classes may be useful since those simply dont have any os   accessing operations
see also  pep 428 the pathlib module  objectoriented filesystem paths
see also  for lowlevel path manipulation on strings you can also use the  os
path module
basic use
importing the main class    from pathlib import pathlisting subdirectories    p  path
hg posixpathdocs posixpathdist    posixpathpycache posixpathbuildlisting python source files in this directory tree    listp
pynavigating inside a directory tree    p  pathetc    q  p  init
dhaltquerying path properties    q
isdir   falseopening a file    with q
pure paths
general properties
paths are immutable and hashable
  paths of a same flavour arecomparable and orderable
  these properties respect the flavourscasefolding semantics    pureposixpathfoo  pureposixpathfoo   false    purewindowspathfoo  purewindowspathfoo   true    purewindowspathfoo in  purewindowspathfoo    true    purewindowspathc  purewindowspathd   truepaths of a different flavour compare unequal and cannot be ordered    purewindowspathfoo  pureposixpathfoo   false    purewindowspathfoo  pureposixpathfoo   traceback most recent call last     file stdin line 1 in module   typeerror  not supported between instances of purewindowspath and pureposixpath
operators
accessing individual parts
to access the individual parts components of a path use thefollowing propertypurepath
parts   a tuple giving access to the paths various components       p  purepathusrbinpython3       p
parts      c program files psf   note how the drive and local root are regrouped in a single part
methods and properties
concrete paths
concrete paths are subclasses of the pure path classes
  in additionto operations provided by the latter they also provide methods to dosystem calls on path objects
  there are three ways to instantiateconcrete pathsclass pathlib
pathpathsegments   a subclass of purepath this class represents concrete paths of   the systems path flavour instantiating it creates either a   posixpath or a windowspath       pathsetup
py   pathsegments is specified similarly to purepath
posixpathpathsegments   a subclass of path and pureposixpath this class represents   concrete nonwindows filesystem paths       posixpathetc      posixpathetc   pathsegments is specified similarly to purepath
windowspathpathsegments   a subclass of path and purewindowspath this class represents   concrete windows filesystem paths       windowspathcprogram files      windowspathcprogram files   pathsegments is specified similarly to purepath
you can only instantiate the class flavour that corresponds to yoursystem allowing system calls on noncompatible path flavours couldlead to bugs or failures in your application    import os    os
methods
concrete paths provide the following methods in addition to pure pathsmethods
  many of these methods can raise an oserror if a systemcall fails for example because the path doesnt exist
changed in version 3
8 exists isdir isfileismount issymlink isblockdevice ischardeviceisfifo issocket now return false instead of raising anexception for paths that contain characters unrepresentable at the oslevel
cwd   return a new path object representing the current directory as   returned by os
getcwd       path
home   return a new path object representing the users home directory as   returned by os
expanduser with  construct       path
home      posixpathhomeantoine   new in version 3
5
stat   return a os
statresult object containing information about this   path like os
 the result is looked up at each call to   this method
chmodmode   change the file mode and permissions like os
chmod       p  pathsetup
exists   whether the path points to an existing file or directory       path
exists      false   note     if the path points to a symlink exists returns whether the     symlink points to an existing file or directory
expanduser   return a new path with expanded  and user constructs as   returned by os
expanduser       p  posixpathfilmsmonty python       p
expanduser      posixpathhomeericfilmsmonty python   new in version 3
5
globpattern   glob the given relative pattern in the directory represented by   this path yielding all matching files of any kind       sortedpath
py   the  pattern means this directory and all subdirectories   recursively
  in other words it enables recursive globbing       sortedpath
py   note     using the  pattern in large directory trees may consume an     inordinate amount of time
   raises an auditing event pathlib
glob with arguments self   pattern
group   return the name of the group owning the file
  keyerror is raised   if the files gid isnt found in the system database
isdir   return true if the path points to a directory or a symbolic link   pointing to a directory false if it points to another kind of   file
   false is also returned if the path doesnt exist or is a broken   symlink other errors such as permission errors are propagated
isfile   return true if the path points to a regular file or a symbolic   link pointing to a regular file false if it points to another   kind of file
   false is also returned if the path doesnt exist or is a broken   symlink other errors such as permission errors are propagated
ismount   return true if the path is a mount point a point in a file   system where a different file system has been mounted
  on posix   the function checks whether paths parent path
 is on a   different device than path or whether path
 and path point   to the same inode on the same device  this should detect mount   points for all unix and posix variants
  not implemented on   windows
   new in version 3
7
issymlink   return true if the path points to a symbolic link false   otherwise
   false is also returned if the path doesnt exist other errors   such as permission errors are propagated
issocket   return true if the path points to a unix socket or a symbolic   link pointing to a unix socket false if it points to another   kind of file
   false is also returned if the path doesnt exist or is a broken   symlink other errors such as permission errors are propagated
isfifo   return true if the path points to a fifo or a symbolic link   pointing to a fifo false if it points to another kind of file
   false is also returned if the path doesnt exist or is a broken   symlink other errors such as permission errors are propagated
isblockdevice   return true if the path points to a block device or a symbolic   link pointing to a block device false if it points to another   kind of file
   false is also returned if the path doesnt exist or is a broken   symlink other errors such as permission errors are propagated
ischardevice   return true if the path points to a character device or a   symbolic link pointing to a character device false if it points   to another kind of file
   false is also returned if the path doesnt exist or is a broken   symlink other errors such as permission errors are propagated
iterdir   when the path points to a directory yield path objects of the   directory contents       p  pathdocs       for child in p
rst      posixpathdocsbuild      posixpathdocsstatic      posixpathdocsmakefile   the children are yielded in arbitrary order and the special   entries 
 and 
 are not included
  if a file is removed   from or added to the directory after creating the iterator whether   an path object for that file be included is unspecified
lchmodmode   like path
chmod but if the path points to a symbolic link the   symbolic links mode is changed rather than its targets
lstat   like path
stat but if the path points to a symbolic link   return the symbolic links information rather than its targets
mkdirmode0o777 parentsfalse existokfalse   create a new directory at this given path
  if mode is given it   is combined with the process umask value to determine the file   mode and access flags
  if the path already exists   fileexistserror is raised
   if parents is true any missing parents of this path are created   as needed they are created with the default permissions without   taking mode into account mimicking the posix mkdir p   command
   if parents is false the default a missing parent raises   filenotfounderror
   if existok is false the default fileexistserror is raised   if the target directory already exists
   if existok is true fileexistserror exceptions will be ignored   same behavior as the posix mkdir p command but only if the   last path component is not an existing nondirectory file
   changed in version 3
5 the existok parameter was added
openmoder buffering1 encodingnone errorsnone newlinenone   open the file pointed to by the path like the builtin open   function does       p  pathsetup
owner   return the name of the user owning the file
  keyerror is raised   if the files uid isnt found in the system database
readbytes   return the binary contents of the pointedto file as a bytes   object       p  pathmybinaryfile       p
readbytes      bbinary file contents   new in version 3
5
readtextencodingnone errorsnone   return the decoded contents of the pointedto file as a string       p  pathmytextfile       p
writetexttext file contents      18       p
readtext      text file contents   the file is opened and then closed
 the optional parameters have   the same meaning as in open
   new in version 3
5
path
readlink   return the path to which the symbolic link points as returned by   os
readlink       p  pathmylink       p
symlinktosetup
py       p
readlink      posixpathsetup
py   new in version 3
9
path
renametarget   rename this file or directory to the given target and return a   new path instance pointing to target
  on unix if target   exists and is a file it will be replaced silently if the user has   permission
  target can be either a string or another path   object       p  pathfoo       p
openw
writesome text      9       target  pathbar       p
renametarget      posixpathbar       target
open
read      some text   the target path may be absolute or relative
 relative paths are   interpreted relative to the current working directory not the   directory of the path object
   changed in version 3
8 added return value return the new path   instance
path
replacetarget   rename this file or directory to the given target and return a   new path instance pointing to target
  if target points to an   existing file or directory it will be unconditionally replaced
   the target path may be absolute or relative
 relative paths are   interpreted relative to the current working directory not the   directory of the path object
   changed in version 3
8 added return value return the new path   instance
path
resolvestrictfalse   make the path absolute resolving any symlinks
  a new path object   is returned       p  path       p      posixpath
       p
resolve      posixpathhomeantoinepathlib   
 components are also eliminated this is the only method to   do so       p  pathdocs
setup
py       p
resolve      posixpathhomeantoinepathlibsetup
py   if the path doesnt exist and strict is true   filenotfounderror is raised
  if strict is false the path is   resolved as far as possible and any remainder is appended without   checking whether it exists
  if an infinite loop is encountered   along the resolution path runtimeerror is raised
   new in version 3
6 the strict argument pre3
6 behavior is   strict
path
rglobpattern   this is like calling path
glob with  added in front of   the given relative pattern       sortedpath
py   raises an auditing event pathlib
rglob with arguments   self pattern
rmdir   remove this directory
  the directory must be empty
samefileotherpath   return whether this path points to the same file as otherpath   which can be either a path object or a string
  the semantics are   similar to os
samefile and os
samestat
   an oserror can be raised if either file cannot be accessed for   some reason
samefilespam      true   new in version 3
5
symlinktotarget targetisdirectoryfalse   make this path a symbolic link to target
  under windows   targetisdirectory must be true default false if the links   target is a directory
  under posix targetisdirectorys value   is ignored
stsize      8   note     the order of arguments link target is the reverse of     os
symlinks
touchmode0o666 existoktrue   create a file at this given path
  if mode is given it is   combined with the process umask value to determine the file mode   and access flags
  if the file already exists the function   succeeds if existok is true and its modification time is   updated to the current time otherwise fileexistserror is   raised
unlinkmissingokfalse   remove this file or symbolic link
  if the path points to a   directory use path
rmdir instead
   if missingok is false the default filenotfounderror is   raised if the path does not exist
   if missingok is true filenotfounderror exceptions will be   ignored same behavior as the posix rm f command
   changed in version 3
8 the missingok parameter was added
linktotarget   create a hard link pointing to a path named target
   new in version 3
8
writebytesdata   open the file pointed to in bytes mode write data to it and   close the file       p  pathmybinaryfile       p
readbytes      bbinary file contents   an existing file of the same name is overwritten
   new in version 3
5
writetextdata encodingnone errorsnone   open the file pointed to in text mode write data to it and   close the file       p  pathmytextfile       p
readtext      text file contents   an existing file of the same name is overwritten
 the optional   parameters have the same meaning as in open
   new in version 3
5
correspondence to tools in the os module
below is a table mapping various os functions to their correspondingpurepathpath equivalent
note  although os
relpath and purepath
relativeto have some  overlapping usecases their semantics differ enough to warrant not  considering them equivalent
 os and os
path                        pathlib                         os
expanduser and                                               path
unittestmock  mock object library
new in version 3
3
source code libunittestmock
mock is a library for testing in python
 it allows you toreplace parts of your system under test with mock objects and makeassertions about how they have been used
mock provides a core mock class removing the need tocreate a host of stubs throughout your test suite
 after performing anaction you can make assertions about which methods  attributes wereused and arguments they were called with
 you can also specify returnvalues and set needed attributes in the normal way
additionally mock provides a patch decorator that handlespatching module and class level attributes within the scope of a testalong with sentinel for creating unique objects
 see the quick guidefor some examples of how to use mock magicmock and patch
mock is very easy to use and is designed for use with unittest
 mockis based on the action  assertion pattern instead of record replay used by many mocking frameworks
there is a backport of unittest
mock for earlier versions of pythonavailable as mock on pypi
quick guide
the mock class
mock is a flexible mock object intended to replace the use of stubsand test doubles throughout your code
 mocks are callable and createattributes as new mocks when you access them 1
 accessing the sameattribute will always return the same mock
 mocks record how you usethem allowing you to make assertions about what your code has done tothem
magicmock is a subclass of mock with all the magic methods precreated and ready to use
 there are also noncallable variants usefulwhen you are mocking out objects that arent callablenoncallablemock and noncallablemagicmockthe patch decorators makes it easy to temporarily replace classesin a particular module with a mock object
 by default patch willcreate a magicmock for you
 you can specify an alternative class ofmock using the newcallable argument to patch
mockspecnone sideeffectnone returnvaluedefault wrapsnone namenone specsetnone unsafefalse kwargs   create a new mock object
 mock takes several optional arguments   that specify the behaviour of the mock object    spec this can be either a list of strings or an existing     object a class or instance that acts as the specification for     the mock object
     new in version 3
5
assertcalled      new in version 3
6
      new in version 3
6
      new in version 3
5
called      false      changed in version 3
6 added two keyword only argument to the      resetmock function
      note        returnvalue and sideeffect are keyword only argument
      changed in version 3
8 added args and kwargs properties
      note        the way mockcalls are recorded means that where nested        calls are made the parameters of ancestor calls are not        recorded and so will always compare equal         mock  magicmock         mock
   changed in version 3
4 added signature introspection on specced   and autospecced mock objects
   new in version 3
8
calling
deleting attributes
mock names and the name attribute
attaching mocks as attributes
the patchers
patch
note  the key is to do the patching in the right namespace
 with it switched on you can write   passing tests against apis that dont actually exist   note     changed in version 3
5 if you are patching builtins in a module     then you dont need to pass createtrue it will be added by     default
    testchanged in version 3
8 patch now returns an asyncmock if thetarget is an async function
patchobject
patchdict
   changed in version 3
8 patch
dict now returns the patched   dictionary when used as a context manager
patchmultiple
patch methods start and stop
runcaution  if you use this technique you must ensure that the patching is  undone by calling stop
patch builtins
testprefix
nesting patch decorators
where to patch
patching descriptors and proxy objects
magicmock and magic method support
mocking magic methods
note  if you use the spec keyword argument to create a mock then  attempting to set a magic method that isnt in the spec will raise  an attributeerror
the full list of supported magic methods is hash sizeof repr and str dir format and subclasses round floor trunc and ceil comparisons lt gt le ge eq and  ne container methods getitem setitem delitem  contains len iter reversed and  missing context manager enter exit aenter and  aexit unary numeric methods neg pos and invert the numeric methods including right hand and inplace variants  add sub mul matmul div  truediv floordiv mod divmod  lshift rshift and xor or and  pow numeric conversion methods complex int float  and index descriptor methods get set and delete pickling reduce reduceex getinitargs  getnewargs getstate and setstate file system path representation fspath asynchronous iteration methods aiter and anextchanged in version 3
8 added support for os
changed in version 3
8 added support for aenter aexitaiter and anext
magic mock
0 bool true index 1 hash default hash for the mock str default str for the mock sizeof default sizeof for the mockfor example mock  magicmock intmock1 lenmock0 listmock object in mockfalsethe two equality methods eq and ne are special
helpers
sentinel
   changed in version 3
7 the sentinel attributes now preserve   their identity when they are copied or pickled
default
call
createautospec
changed in version 3
8 createautospec now returns an asyncmockif the target is an async function
any
filterdir
mockopen
   changed in version 3
4 added readline and readlines   support
 the mock of read changed to consume readdata rather   than returning it on each call
   changed in version 3
5 readdata is now reset on each call to   the mock
   changed in version 3
8 added iter to implementation so   that iteration such as in for loops correctly consumes   readdata
autospeccing
sealing mocks
   new in version 3
7
imp  access the import internals
pydeprecated since version 3
4 the imp module is deprecated in favorof importlib
   deprecated since version 3
4 use importlib
magicnumber   instead
   deprecated since version 3
3 use the constants defined on   importlib
machinery instead
   deprecated since version 3
3 use importlib
findspec   instead unless python 3
3 compatibility is required in which case   use importlib
 for example usage of the former   case see the examples section of the importlib documentation
   deprecated since version 3
3 if previously used in conjunction   with imp
 see the examples section of   the importlib documentation for details of the various   approaches
   deprecated since version 3
4 use   importlib
    as with all other objects in python the old objects are only     reclaimed after their reference counts drop to zero
    the names in the module namespace are updated to point to any new     or changed objects
    other references to the old objects such as names external to     the module are not rebound to refer to the new objects and must     be updated in each namespace where they occur if that is desired
   there are a number of other caveats   when a module is reloaded its dictionary containing the modules   global variables is retained
  redefinitions of names will   override the old definitions so this is generally not a problem
   if the new version of a module does not define a name that was   defined by the old version the old definition remains
  this   feature can be used to the modules advantage if it maintains a   global table or cache of objects  with a try statement it can   test for the tables presence and skip its initialization if   desired      try          cache      except nameerror          cache     it is legal though generally not very useful to reload builtin or   dynamically loaded modules except for sys main and   builtins
   if a module instantiates instances of a class reloading the module   that defines the class does not affect the method definitions of   the instances  they continue to use the old class definition
   the same is true for derived classes
   changed in version 3
3 relies on both name and loader   being defined on the module being reloaded instead of just   name
   deprecated since version 3
4 use importlib
new in version 3
2
   changed in version 3
3 if sys
cachetag is   none then notimplementederror is raised
   deprecated since version 3
4 use   importlib
   changed in version 3
5 the debugoverride parameter no longer   creates a 
   changed in version 3
3 raise notimplementederror when   sys
   deprecated since version 3
4 use   importlib
   deprecated since version 3
4 use sys
cachetag   directly starting in python 3
   changed in version 3
3 the locking scheme has changed to per   module locks for the most part
  a global import lock is kept for   some critical tasks such as initializing the permodule locks
   deprecated since version 3
4
   changed in version 3
3 the locking scheme has changed to per   module locks for the most part
  a global import lock is kept for   some critical tasks such as initializing the permodule locks
   deprecated since version 3
4
   changed in version 3
3 the locking scheme has changed to per   module locks for the most part
  a global import lock is kept for   some critical tasks such as initializing the permodule locks
   deprecated since version 3
4
   deprecated since version 3
3
   deprecated since version 3
3
   deprecated since version 3
3
   deprecated since version 3
3
   deprecated since version 3
3
   deprecated since version 3
3
   changed in version 3
3 none is inserted into   sys
pathimportercache instead of an instance of nullimporter
   deprecated since version 3
4 insert none into   sys
pathimportercache instead
examples
plistlib  generate and parse apple plist files
examples
generating a plist   pl  dict       astring  doodah       alist  a b 12 32
gmtime      with openfilename wb as fp       dumppl fpparsing a plist   with openfilename rb as fp       pl  loadfp   printplakey
xml processing modules
source code libxmlpythons interfaces for processing xml are grouped in the xmlpackage
warning  the xml modules are not secure against erroneous or maliciously  constructed data
  if you need to parse untrusted or unauthenticated  data see the xml vulnerabilities and the defusedxml package  sections
it is important to note that modules in the xml package require thatthere be at least one saxcompliant xml parser available
 the expatparser is included with python so the xml
expat module willalways be available
the documentation for the xml
dom and xml
sax packages are thedefinition of the python bindings for the dom and sax interfaces
the xml handling submodules are xml
elementtree the elementtree api a simple and  lightweight xml processor xml
dom the dom api definition xml
minidom a minimal dom implementation xml
pulldom support for building partial dom trees xml
sax sax2 base classes and convenience functions xml
expat the expat parser binding
xml vulnerabilities
the xml processing modules are not secure against maliciouslyconstructed data
 an attacker can abuse xml features to carry outdenial of service attacks access local files generate networkconnections to other machines or circumvent firewalls
the following table gives an overview of the known attacks and whetherthe various modules are vulnerable to them
 kind                       sax             etree            minidom         pulldom         xmlrpc          billion laughs             vulnerable  vulnerable   vulnerable  vulnerable  vulnerable  quadratic blowup           vulnerable  vulnerable   vulnerable  vulnerable  vulnerable  external entity expansion  safe 4        safe    1      safe    2     safe 4        safe    3     dtd retrieval              safe 4        safe             safe            safe 4        safe            decompression bomb         safe            safe             safe            safe            vulnerable 1
elementtree doesnt expand external entities and raises   a parsererror when an entity occurs
minidom doesnt expand external entities and simply   returns the unexpanded entity verbatim
 xmlrpclib doesnt expand external entities and omits them
 since python 3
1 external general entities are no longer   processed by default
billion laughs  exponential entity expansion   the billion laughs attack  also known as exponential entity   expansion  uses multiple levels of nested entities
 each entity   refers to another entity several times and the final entity   definition contains a small string
 the exponential expansion   results in several gigabytes of text and consumes lots of memory   and cpu time
quadratic blowup entity expansion   a quadratic blowup attack is similar to a billion laughs attack it   abuses entity expansion too
 instead of nested entities it repeats   one large entity with a couple of thousand chars over and over   again
 the attack isnt as efficient as the exponential case but it   avoids triggering parser countermeasures that forbid deeplynested   entities
external entity expansion   entity declarations can contain more than just text for   replacement
 they can also point to external resources or local   files
 the xml parser accesses the resource and embeds the content   into the xml document
dtd retrieval   some xml libraries like pythons xml
pulldom retrieve   document type definitions from remote or local locations
 the   feature has similar implications as the external entity expansion   issue
decompression bomb   decompression bombs aka zip bomb apply to all xml libraries that   can parse compressed xml streams such as gzipped http streams or   lzmacompressed files
 for an attacker it can reduce the amount of   transmitted data by three magnitudes or more
the documentation for defusedxml on pypi has further information aboutall known attack vectors with examples and references
the defusedxml package
defusedxml is a pure python package with modified subclasses of allstdlib xml parsers that prevent any potentially malicious operation
use of this package is recommended for any server code that parsesuntrusted xml data
 the package also ships with example exploits andextended documentation on more xml exploits such as xpath injection
graphlib  functionality to operate with graphlike structures
   new in version 3
9
exceptions
contextlib  utilities for withstatement contexts
source code libcontextlib
pythis module provides utilities for common tasks involving the withstatement
 for more information see also context manager types andwith statement context managers
utilities
examples and recipes
supporting a variable number of context managers
catching exceptions from enter methods
cleaning up in an enter implementation
replacing any use of tryfinally and flag variables
using a context manager as a function decorator
see also  pep 343  the with statement     the specification background and examples for the python with     statement
single use reusable and reentrant context managers
reentrant context managers
reusable context managers
cmath  mathematical functions for complex numbers
this module provides access to mathematical functions for complexnumbers
  the functions in this module accept integers floatingpointnumbers or complex numbers as arguments
 they will also accept anypython object that has either a complex or a floatmethod these methods are used to convert the object to a complex orfloatingpoint number respectively and the function is then appliedto the result of the conversion
note  on platforms with hardware and systemlevel support for signed  zeros functions involving branch cuts are continuous on both  sides of the branch cut the sign of the zero distinguishes one side  of the branch cut from the other
  on platforms that do not support  signed zeros the continuity is as specified below
conversions to and from polar coordinates
a python complex number z is stored internally using rectangularor cartesian coordinates
  it is completely determined by its realpart z
real and its imaginary part z
  in other words   z  z
imag1jpolar coordinates give an alternative way to represent a complexnumber
  in polar coordinates a complex number z is defined by themodulus r and the phase angle phi
 the modulus r is the distancefrom z to the origin while the phase phi is the counterclockwiseangle measured in radians from the positive xaxis to the linesegment that joins the origin to z
the following functions can be used to convert from the nativerectangular coordinates to polar coordinates and back
phasex   return the phase of x also known as the argument of x as a   float
  phasex is equivalent to math
   the result lies in the range π π and the branch cut for   this operation lies along the negative real axis continuous from   above
  on systems with support for signed zeros which includes   most systems in current use this means that the sign of the   result is the same as the sign of x
imag even when x
imag is   zero       phasecomplex1
141592653589793note  the modulus absolute value of a complex number x can be computed  using the builtin abs function
  there is no separate cmath  module function for this operation
polarx   return the representation of x in polar coordinates
  returns a   pair r phi where r is the modulus of x and phi is the   phase of x
  polarx is equivalent to absx phasex
rectr phi   return the complex number x with polar coordinates r and phi
   equivalent to r  math
cosphi  math
power and logarithmic functions
expx   return e raised to the power x where e is the base of   natural logarithms
logx base   returns the logarithm of x to the given base
 if the base is   not specified returns the natural logarithm of x
 there is one   branch cut from 0 along the negative real axis to ∞ continuous   from above
log10x   return the base10 logarithm of x
 this has the same branch cut   as log
sqrtx   return the square root of x
 this has the same branch cut as   log
trigonometric functions
acosx   return the arc cosine of x
 there are two branch cuts one   extends right from 1 along the real axis to ∞ continuous from   below
 the other extends left from 1 along the real axis to ∞   continuous from above
asinx   return the arc sine of x
 this has the same branch cuts as   acos
atanx   return the arc tangent of x
 there are two branch cuts one   extends from 1j along the imaginary axis to ∞j continuous from   the right
 the other extends from 1j along the imaginary axis to   ∞j continuous from the left
cosx   return the cosine of x
sinx   return the sine of x
tanx   return the tangent of x
hyperbolic functions
acoshx   return the inverse hyperbolic cosine of x
 there is one branch   cut extending left from 1 along the real axis to ∞ continuous   from above
asinhx   return the inverse hyperbolic sine of x
 there are two branch   cuts one extends from 1j along the imaginary axis to ∞j   continuous from the right
  the other extends from 1j along the   imaginary axis to ∞j continuous from the left
atanhx   return the inverse hyperbolic tangent of x
 there are two branch   cuts one extends from 1 along the real axis to ∞ continuous   from below
 the other extends from 1 along the real axis to   ∞ continuous from above
coshx   return the hyperbolic cosine of x
sinhx   return the hyperbolic sine of x
tanhx   return the hyperbolic tangent of x
classification functions
isfinitex   return true if both the real and imaginary parts of x are   finite and false otherwise
   new in version 3
2
isinfx   return true if either the real or the imaginary part of x is an   infinity and false otherwise
isnanx   return true if either the real or the imaginary part of x is a   nan and false otherwise
0   return true if the values a and b are close to each other and   false otherwise
   whether or not two values are considered close is determined   according to given absolute and relative tolerances
   reltol is the relative tolerance  it is the maximum allowed   difference between a and b relative to the larger absolute   value of a or b
 for example to set a tolerance of 5 pass   reltol0
05
  the default tolerance is 1e09 which assures   that the two values are the same within about 9 decimal digits
   reltol must be greater than zero
   abstol is the minimum absolute tolerance  useful for   comparisons near zero
 abstol must be at least zero
   if no errors occur the result will be absab  maxreltol    maxabsa absb abstol
   the ieee 754 special values of nan inf and inf will be   handled according to ieee rules
  specifically nan is not   considered close to any other value including nan
  inf and   inf are only considered close to themselves
   new in version 3
5
   see also     pep 485  a function for testing approximate equality
constants
pi   the mathematical constant π as a float
e   the mathematical constant e as a float
tau   the mathematical constant τ as a float
   new in version 3
6
inf   floatingpoint positive infinity
 equivalent to floatinf
   new in version 3
6
infj   complex number with zero real part and positive infinity imaginary   part
 equivalent to complex0
   new in version 3
6
nan   a floatingpoint not a number nan value
  equivalent to   floatnan
   new in version 3
6
nanj   complex number with zero real part and nan imaginary part
   equivalent to complex0
   new in version 3
6
note that the selection of functions is similar but not identical tothat in module math
  the reason for having two modules is that someusers arent interested in complex numbers and perhaps dont evenknow what they are
  they would rather have math
sqrt1 raise anexception than return a complex number
 also note that the functionsdefined in cmath always return a complex number even if the answercan be expressed as a real number in which case the complex numberhas an imaginary part of zero
a note on branch cuts they are curves along which the given functionfails to be continuous
  they are a necessary feature of many complexfunctions
  it is assumed that if you need to compute with complexfunctions you will understand about branch cuts
  consult almost anynot too elementary book on complex variables for enlightenment
  forinformation of the proper choice of branch cuts for numericalpurposes a good reference should be the followingsee also  kahan w  branch cuts for complex elementary functions or much  ado about nothings sign bit
  in iserles a
  eds
 the state of the art in numerical analysis
 clarendon press  1987 pp165211
emailmessage representing an email message
sunau  read and write sun au files
auread objects
getsampwidth   returns sample width in bytes
getframerate   returns sampling frequency
getnframes   returns number of audio frames
getparams   returns a namedtuple nchannels sampwidth framerate   nframes comptype compname equivalent to output of the get   methods
rewind   rewind the file pointer to the beginning of the audio stream
the following two methods define a term position which is compatiblebetween them and is otherwise implementation dependent
getmarkers   returns none
getmarkid   raise an error
auwrite objects
setnchannelsn   set the number of channels
   changed in version 3
4 added support for 24bit samples
writeframesrawdata   write audio frames without correcting nframes
   changed in version 3
4 any byteslike object is now accepted
writeframesdata   write audio frames and make sure nframes is correct
   changed in version 3
4 any byteslike object is now accepted
the python standard library
while the python language reference describes the exact syntax andsemantics of the python language this library reference manualdescribes the standard library that is distributed with python
 italso describes some of the optional components that are commonlyincluded in python distributions
pythons standard library is very extensive offering a wide range offacilities as indicated by the long table of contents listed below
the library contains builtin modules written in c that provideaccess to system functionality such as file io that would otherwisebe inaccessible to python programmers as well as modules written inpython that provide standardized solutions for many problems thatoccur in everyday programming
 some of these modules are explicitlydesigned to encourage and enhance the portability of python programsby abstracting away platformspecifics into platformneutral apis
the python installers for the windows platform usually include theentire standard library and often also include many additionalcomponents
 for unixlike operating systems python is normallyprovided as a collection of packages so it may be necessary to usethe packaging tools provided with the operating system to obtain someor all of the optional components
in addition to the standard library there is a growing collection ofseveral thousand components from individual programs and modules topackages and entire application development frameworks availablefrom the python package index
 introduction   notes on availability builtin functions builtin constants   constants added by the site module builtin types   truth value testing   boolean operations  and or not   comparisons   numeric types  int float complex   iterator types   sequence types  list tuple range   text sequence type  str   binary sequence types  bytes bytearray memoryview   set types  set frozenset   mapping types  dict   context manager types   generic alias type   other builtin types   special attributes builtin exceptions   base classes   concrete exceptions   warnings   exception hierarchy text processing services   string  common string operations   re  regular expression operations   difflib  helpers for computing deltas   textwrap  text wrapping and filling   unicodedata  unicode database   stringprep  internet string preparation   readline  gnu readline interface   rlcompleter  completion function for gnu readline binary data services   struct  interpret bytes as packed binary data   codecs  codec registry and base classes data types   datetime  basic date and time types   zoneinfo  iana time zone support   calendar  general calendarrelated functions   collections  container datatypes   collections
abc  abstract base classes for containers   heapq  heap queue algorithm   bisect  array bisection algorithm   array  efficient arrays of numeric values   weakref  weak references   types  dynamic type creation and names for builtin types   copy  shallow and deep copy operations   pprint  data pretty printer   reprlib  alternate repr implementation   enum  support for enumerations   graphlib  functionality to operate with graphlike structures numeric and mathematical modules   numbers  numeric abstract base classes   math  mathematical functions   cmath  mathematical functions for complex numbers   decimal  decimal fixed point and floating point arithmetic   fractions  rational numbers   random  generate pseudorandom numbers   statistics  mathematical statistics functions functional programming modules   itertools  functions creating iterators for efficient looping   functools  higherorder functions and operations on callable    objects   operator  standard operators as functions file and directory access   pathlib  objectoriented filesystem paths   os
path  common pathname manipulations   fileinput  iterate over lines from multiple input streams   stat  interpreting stat results   filecmp  file and directory comparisons   tempfile  generate temporary files and directories   glob  unix style pathname pattern expansion   fnmatch  unix filename pattern matching   linecache  random access to text lines   shutil  highlevel file operations data persistence   pickle  python object serialization   copyreg  register pickle support functions   shelve  python object persistence   marshal  internal python object serialization   dbm  interfaces to unix databases   sqlite3  dbapi 2
0 interface for sqlite databases data compression and archiving   zlib  compression compatible with gzip   gzip  support for gzip files   bz2  support for bzip2 compression   lzma  compression using the lzma algorithm   zipfile  work with zip archives   tarfile  read and write tar archive files file formats   csv  csv file reading and writing   configparser  configuration file parser   netrc  netrc file processing   xdrlib  encode and decode xdr data   plistlib  generate and parse apple 
plist files cryptographic services   hashlib  secure hashes and message digests   hmac  keyedhashing for message authentication   secrets  generate secure random numbers for managing secrets generic operating system services   os  miscellaneous operating system interfaces   io  core tools for working with streams   time  time access and conversions   argparse  parser for commandline options arguments and sub    commands   getopt  cstyle parser for command line options   logging  logging facility for python   logging
config  logging configuration   logging
handlers  logging handlers   getpass  portable password input   curses  terminal handling for charactercell displays   curses
textpad  text input widget for curses programs   curses
ascii  utilities for ascii characters   curses
panel  a panel stack extension for curses   platform   access to underlying platforms identifying data   errno  standard errno system symbols   ctypes  a foreign function library for python concurrent execution   threading  threadbased parallelism   multiprocessing  processbased parallelism   multiprocessing
sharedmemory   provides shared memory for    direct access across processes   the concurrent package   concurrent
futures  launching parallel tasks   subprocess  subprocess management   sched  event scheduler   queue  a synchronized queue class   thread  lowlevel threading api contextvars  context variables   context variables   manual context management   asyncio support networking and interprocess communication   asyncio  asynchronous io   socket  lowlevel networking interface   ssl  tlsssl wrapper for socket objects   select  waiting for io completion   selectors  highlevel io multiplexing   asyncore  asynchronous socket handler   asynchat  asynchronous socket commandresponse handler   signal  set handlers for asynchronous events   mmap  memorymapped file support internet data handling   email  an email and mime handling package   json  json encoder and decoder   mailcap  mailcap file handling   mailbox  manipulate mailboxes in various formats   mimetypes  map filenames to mime types   base64  base16 base32 base64 base85 data encodings   binhex  encode and decode binhex4 files   binascii  convert between binary and ascii   quopri  encode and decode mime quotedprintable data   uu  encode and decode uuencode files structured markup processing tools   html  hypertext markup language support   html
parser  simple html and xhtml parser   html
entities  definitions of html general entities   xml processing modules   xml
elementtree  the elementtree xml api   xml
saxutils  sax utilities   xml
expat  fast xml parsing using expat internet protocols and support   webbrowser  convenient webbrowser controller   cgi  common gateway interface support   cgitb  traceback manager for cgi scripts   wsgiref  wsgi utilities and reference implementation   urllib  url handling modules   urllib
request  extensible library for opening urls   urllib
response  response classes used by urllib   urllib
error  exception classes raised by urllib
request   urllib
robotparser   parser for robots
txt   http  http modules   http
client  http protocol client   ftplib  ftp protocol client   poplib  pop3 protocol client   imaplib  imap4 protocol client   nntplib  nntp protocol client   smtplib  smtp protocol client   smtpd  smtp server   telnetlib  telnet client   uuid  uuid objects according to rfc 4122   socketserver  a framework for network servers   http
server  http servers   http
cookies  http state management   http
cookiejar  cookie handling for http clients   xmlrpc  xmlrpc server and client modules   xmlrpc
server  basic xmlrpc servers   ipaddress  ipv4ipv6 manipulation library multimedia services   audioop  manipulate raw audio data   aifc  read and write aiff and aifc files   sunau  read and write sun au files   wave  read and write wav files   chunk  read iff chunked data   colorsys  conversions between color systems   imghdr  determine the type of an image   sndhdr  determine type of sound file   ossaudiodev  access to osscompatible audio devices internationalization   gettext  multilingual internationalization services   locale  internationalization services program frameworks   turtle  turtle graphics   cmd  support for lineoriented command interpreters   shlex  simple lexical analysis graphical user interfaces with tk   tkinter  python interface to tcltk   tkinter
colorchooser  color choosing dialog   tkinter
font  tkinter font wrapper   tkinter dialogs   tkinter
messagebox  tkinter message prompts   tkinter
scrolledtext  scrolled text widget   tkinter
dnd  drag and drop support   tkinter
ttk  tk themed widgets   tkinter
tix  extension widgets for tk   idle   other graphical user interface packages development tools   typing  support for type hints   pydoc  documentation generator and online help system   python development mode   effects of the python development mode   resourcewarning example   bad file descriptor error example   doctest  test interactive python examples   unittest  unit testing framework   unittest
mock  mock object library   unittest
mock  getting started   2to3  automated python 2 to 3 code translation   test  regression tests package for python   test
bytecodehelper  support tools for testing    correct bytecode generation debugging and profiling   audit events table   bdb  debugger framework   faulthandler  dump the python traceback   pdb  the python debugger   the python profilers   timeit  measure execution time of small code snippets   trace  trace or track python statement execution   tracemalloc  trace memory allocations software packaging and distribution   distutils  building and installing python modules   ensurepip  bootstrapping the pip installer   venv  creation of virtual environments   zipapp  manage executable python zip archives python runtime services   sys  systemspecific parameters and functions   sysconfig  provide access to pythons configuration    information   builtins  builtin objects   main  toplevel script environment   warnings  warning control   dataclasses  data classes   contextlib  utilities for withstatement contexts   abc  abstract base classes   atexit  exit handlers   traceback  print or retrieve a stack traceback   future  future statement definitions   gc  garbage collector interface   inspect  inspect live objects   site  sitespecific configuration hook custom python interpreters   code  interpreter base classes   codeop  compile python code importing modules   zipimport  import modules from zip archives   pkgutil  package extension utility   modulefinder  find modules used by a script   runpy  locating and executing python modules   importlib  the implementation of import   using importlib
metadata python language services   parser  access python parse trees   ast  abstract syntax trees   symtable  access to the compilers symbol tables   symbol  constants used with python parse trees   token  constants used with python parse trees   keyword  testing for python keywords   tokenize  tokenizer for python source   tabnanny  detection of ambiguous indentation   pyclbr  python module browser support   pycompile  compile python source files   compileall  bytecompile python libraries   dis  disassembler for python bytecode   pickletools  tools for pickle developers miscellaneous services   formatter  generic output formatting ms windows specific services   msilib  read and write microsoft installer files   msvcrt  useful routines from the ms vc runtime   winreg  windows registry access   winsound  soundplaying interface for windows unix specific services   posix  the most common posix system calls   pwd  the password database   spwd  the shadow password database   grp  the group database   crypt  function to check unix passwords   termios  posix style tty control   tty  terminal control functions   pty  pseudoterminal utilities   fcntl  the fcntl and ioctl system calls   pipes  interface to shell pipelines   resource  resource usage information   nis  interface to suns nis yellow pages   syslog  unix syslog library routines superseded modules   optparse  parser for command line options   imp  access the import internals undocumented modules   platform specific modules
emailpolicy policy objects
new in version 3
3
      new in version 3
5 the manglefrom parameter
      new in version 3
6
   in addition to the settable attributes listed above that apply to   all policies this policy adds the following additional attributes   new in version 3
6 1   utf8      if false follow rfc 5322 supporting nonascii characters      in headers by encoding them as encoded words
      new in version 3
4
 footnotes 1 originally added in 3
logginghandlers  logging handlers
source code liblogginghandlers
pyimportantthis page contains only reference information
 for tutorials pleasesee basic tutorial advanced tutorial logging cookbookthe following useful handlers are provided in the package
 note thatthree of the handlers streamhandler filehandler andnullhandler are actually defined in the logging module itselfbut have been documented here along with the other handlers
streamhandler
the streamhandler class located in the core logging packagesends logging output to streams such as sys
stderr orany filelike object or more precisely any object which supportswrite and flush methods
streamhandlerstreamnone   returns a new instance of the streamhandler class
 if stream is   specified the instance will use it for logging output otherwise   sys
stderr will be used
   emitrecord      if a formatter is specified it is used to format the record
      the record is then written to the stream followed by      terminator
 if exception information is present it is      formatted using traceback
printexception and appended to      the stream
   flush      flushes the stream by calling its flush method
 note that      the close method is inherited from handler and so does no      output so an explicit flush call may be needed at times
   setstreamstream      sets the instances stream to the specified value if it is      different
 the old stream is flushed before the new stream is      set
      parameters         stream  the stream that the handler should use
      returns         the old stream if the stream was changed or none if it         wasnt
      new in version 3
7
   terminator      string used as the terminator when writing a formatted record to      a stream
 default value is n
      if you dont want a newline termination you can set the handler      instances terminator attribute to the empty string
      in earlier versions the terminator was hardcoded as n
      new in version 3
2
filehandler
the filehandler class located in the core logging package sendslogging output to a disk file
  it inherits the output functionalityfrom streamhandler
filehandlerfilename modea encodingnone delayfalse errorsnone   returns a new instance of the filehandler class
 the specified   file is opened and used as the stream for logging
 if mode is not   specified a is used
  if encoding is not none it is used   to open the file with that encoding
  if delay is true then file   opening is deferred until the first call to emit
 by default   the file grows indefinitely
 if errors is specified its used to   determine how encoding errors are handled
   changed in version 3
6 as well as string values path objects   are also accepted for the filename argument
   changed in version 3
9 the errors parameter was added
   close      closes the file
   emitrecord      outputs the record to the file
nullhandler
new in version 3
1
the nullhandler class located in the core logging package doesnot do any formatting or output
 it is essentially a noop handlerfor use by library developers
nullhandler   returns a new instance of the nullhandler class
   emitrecord      this method does nothing
   handlerecord      this method does nothing
   createlock      this method returns none for the lock since there is no      underlying io to which access needs to be serialized
see configuring logging for a library for more information on how touse nullhandler
watchedfilehandler
the watchedfilehandler class located in the logging
handlersmodule is a filehandler which watches the file it is logging to
 ifthe file changes it is closed and reopened using the file name
a file change can happen because of usage of programs such asnewsyslog and logrotate which perform log file rotation
 thishandler intended for use under unixlinux watches the file to see ifit has changed since the last emit
 a file is deemed to have changedif its device or inode have changed
 if the file has changed the oldfile stream is closed and the file opened to get a new stream
this handler is not appropriate for use under windows because underwindows open log files cannot be moved or renamed  logging opens thefiles with exclusive locks  and so there is no need for such ahandler
 furthermore stino is not supported under windowsstat always returns zero for this value
watchedfilehandlerfilename modea encodingnone delayfalse errorsnone   returns a new instance of the watchedfilehandler class
 the   specified file is opened and used as the stream for logging
 if   mode is not specified a is used
  if encoding is not   none it is used to open the file with that encoding
  if delay   is true then file opening is deferred until the first call to   emit
  by default the file grows indefinitely
 if errors is   provided it determines how encoding errors are handled
   changed in version 3
6 as well as string values path objects   are also accepted for the filename argument
   changed in version 3
9 the errors parameter was added
   reopenifneeded      checks to see if the file has changed
  if it has the existing      stream is flushed and closed and the file opened again      typically as a precursor to outputting the record to the file
      new in version 3
6
   emitrecord      outputs the record to the file but first calls      reopenifneeded to reopen the file if it has changed
baserotatinghandler
rotatingfilehandler
timedrotatingfilehandler
sockethandler
the sockethandler class located in the logging
handlers modulesends logging output to a network socket
 the base class uses a tcpsocket
sockethandlerhost port   returns a new instance of the sockethandler class intended to   communicate with a remote machine whose address is given by host   and port
   changed in version 3
4 if port is specified as none a unix   domain socket is created using the value in host  otherwise a   tcp socket is created
   close      closes the socket
   emit      pickles the records attribute dictionary and writes it to the      socket in binary format
 if there is an error with the socket      silently drops the packet
 if the connection was previously      lost reestablishes the connection
 to unpickle the record at      the receiving end into a logrecord use the makelogrecord      function
   handleerror      handles an error which has occurred during emit
 the most      likely cause is a lost connection
 closes the socket so that we      can retry on the next event
   makesocket      this is a factory method which allows subclasses to define the      precise type of socket they want
 the default implementation      creates a tcp socket socket
   makepicklerecord      pickles the records attribute dictionary in binary format with      a length prefix and returns it ready for transmission across      the socket
 the details of this operation are equivalent to         data  pickle
packl lendata         return datalen  data      note that pickles arent completely secure
 if you are concerned      about security you may want to override this method to      implement a more secure mechanism
 for example you can sign      pickles using hmac and then verify them on the receiving end or      alternatively you can disable unpickling of global objects on      the receiving end
   sendpacket      send a pickled bytestring packet to the socket
 the format of      the sent bytestring is as described in the documentation for      makepickle
      this function allows for partial sends which can happen when      the network is busy
   createsocket      tries to create a socket on failure uses an exponential back      off algorithm
  on initial failure the handler will drop the      message it was trying to send
  when subsequent messages are      handled by the same instance it will not try connecting until      some time has passed
  the default parameters are such that the      initial delay is one second and if after that delay the      connection still cant be made the handler will double the      delay each time up to a maximum of 30 seconds
      this behaviour is controlled by the following handler      attributes       retrystart initial delay defaulting to 1
0 seconds
       retryfactor multiplier defaulting to 2
       retrymax maximum delay defaulting to 30
0 seconds
      this means that if the remote listener starts up after the      handler has been used you could lose messages since the      handler wont even attempt a connection until the delay has      elapsed but just silently drop messages during the delay      period
datagramhandler
the datagramhandler class located in the logging
handlers moduleinherits from sockethandler to support sending logging messages overudp sockets
datagramhandlerhost port   returns a new instance of the datagramhandler class intended to   communicate with a remote machine whose address is given by host   and port
   changed in version 3
4 if port is specified as none a unix   domain socket is created using the value in host  otherwise a   udp socket is created
   emit      pickles the records attribute dictionary and writes it to the      socket in binary format
 if there is an error with the socket      silently drops the packet
 to unpickle the record at the      receiving end into a logrecord use the makelogrecord      function
   makesocket      the factory method of sockethandler is here overridden to      create a udp socket socket
   sends      send a pickled bytestring to a socket
 the format of the sent      bytestring is as described in the documentation for      sockethandler
makepickle
sysloghandler
the sysloghandler class located in the logging
handlers modulesupports sending logging messages to a remote or local unix syslog
sockdgram   returns a new instance of the sysloghandler class intended to   communicate with a remote unix machine whose address is given by   address in the form of a host port tuple
  if address is   not specified localhost 514 is used
  the address is used   to open a socket
  an alternative to providing a host port   tuple is providing an address as a string for example devlog
   in this case a unix domain socket is used to send the message to   the syslog
 if facility is not specified loguser is used
 the   type of socket opened depends on the socktype argument which   defaults to socket
sockdgram and thus opens a udp socket
 to   open a tcp socket for use with the newer syslog daemons such as   rsyslog specify a value of socket
   note that if your server is not listening on udp port 514   sysloghandler may appear not to work
 in that case check what   address you should be using for a domain socket  its system   dependent
 for example on linux its usually devlog but on   osx its varrunsyslog
 youll need to check your platform and   use the appropriate address you may need to do this check at   runtime if your application needs to run on several platforms
 on   windows you pretty much have to use the udp option
   changed in version 3
2 socktype was added
   close      closes the socket to the remote host
   emitrecord      the record is formatted and then sent to the syslog server
 if      exception information is present it is not sent to the      server
      changed in version 3
1 see bpo12168
 in earlier versions      the message sent to the syslog daemons was always terminated      with a nul byte because early versions of these daemons      expected a nul terminated message  even though its not in the      relevant specification rfc 5424
 more recent versions of      these daemons dont expect the nul byte but strip it off if its      there and even more recent daemons which adhere more closely      to rfc 5424 pass the nul byte on as part of the message
to      enable easier handling of syslog messages in the face of all      these differing daemon behaviours the appending of the nul byte      has been made configurable through the use of a classlevel      attribute appendnul
 this defaults to true preserving the      existing behaviour but can be set to false on a      sysloghandler instance in order for that instance to not      append the nul terminator
      changed in version 3
3 see bpo12419
 in earlier versions      there was no facility for an ident or tag prefix to identify      the source of the message
 this can now be specified using a      classlevel attribute defaulting to  to preserve existing      behaviour but which can be overridden on a sysloghandler      instance in order for that instance to prepend the ident to      every message handled
 note that the provided ident must be      text not bytes and is prepended to the message exactly as is
   encodepriorityfacility priority      encodes the facility and priority into an integer
 you can pass      in strings or integers  if strings are passed internal mapping      dictionaries are used to convert them to integers
      the symbolic log values are defined in sysloghandler and      mirror the values defined in the syssyslog
h header file
      priorities             name string               symbolic value               alert                     logalert                    crit or critical        logcrit                     debug                     logdebug                    emerg or panic          logemerg                    err or error            logerr                      info                      loginfo                     notice                    lognotice                   warn or warning         logwarning                 facilities             name string    symbolic value               auth           logauth                     authpriv       logauthpriv                 cron           logcron                     daemon         logdaemon                   ftp            logftp                      kern           logkern                     lpr            loglpr                      mail           logmail                     news           lognews                     syslog         logsyslog                   user           loguser                     uucp           loguucp                     local0         loglocal0                   local1         loglocal1                   local2         loglocal2                   local3         loglocal3                   local4         loglocal4                   local5         loglocal5                   local6         loglocal6                   local7         loglocal7               mapprioritylevelname      maps a logging level name to a syslog priority name
 you may      need to override this if you are using custom levels or if the      default algorithm is not suitable for your needs
 the default      algorithm maps debug info warning error and      critical to the equivalent syslog names and all other level      names to warning
nteventloghandler
the nteventloghandler class located in the logging
handlersmodule supports sending logging messages to a local windows ntwindows 2000 or windows xp event log
 before you can use it you needmark hammonds win32 extensions for python installed
nteventloghandlerappname dllnamenone logtypeapplication   returns a new instance of the nteventloghandler class
 the   appname is used to define the application name as it appears in   the event log
 an appropriate registry entry is created using this   name
 the dllname should give the fully qualified pathname of a   
dll or 
exe which contains message definitions to hold in the log   if not specified win32service
pyd is used  this is installed   with the win32 extensions and contains some basic placeholder   message definitions
 note that use of these placeholders will make   your event logs big as the entire message source is held in the   log
 if you want slimmer logs you have to pass in the name of your   own 
dll or 
exe which contains the message definitions you want to   use in the event log
 the logtype is one of application   system or security and defaults to application
   close      at this point you can remove the application name from the      registry as a source of event log entries
 however if you do      this you will not be able to see the events as you intended in      the event log viewer  it needs to be able to access the      registry to get the 
dll name
 the current version does not do      this
   emitrecord      determines the message id event category and event type and      then logs the message in the nt event log
   geteventcategoryrecord      returns the event category for the record
 override this if you      want to specify your own categories
 this version returns 0
   geteventtyperecord      returns the event type for the record
 override this if you want      to specify your own types
 this version does a mapping using the      handlers typemap attribute which is set up in init to      a dictionary which contains mappings for debug info      warning error and critical
 if you are using your own      levels you will either need to override this method or place a      suitable dictionary in the handlers typemap attribute
   getmessageidrecord      returns the message id for the record
 if you are using your own      messages you could do this by having the msg passed to the      logger being an id rather than a format string
 then in here      you could use a dictionary lookup to get the message id
 this      version returns 1 which is the base message id in      win32service
pyd
smtphandler
the smtphandler class located in the logging
handlers modulesupports sending logging messages to an email address via smtp
0   returns a new instance of the smtphandler class
 the instance is   initialized with the from and to addresses and subject line of the   email
 the toaddrs should be a list of strings
 to specify a non   standard smtp port use the host port tuple format for the   mailhost argument
 if you use a string the standard smtp port is   used
 if your smtp server requires authentication you can specify   a username password tuple for the credentials argument
   to specify the use of a secure protocol tls pass in a tuple to   the secure argument
 this will only be used when authentication   credentials are supplied
 the tuple should be either an empty   tuple or a singlevalue tuple with the name of a keyfile or a   2value tuple with the names of the keyfile and certificate file
   this tuple is passed to the smtplib
starttls method
   a timeout can be specified for communication with the smtp server   using the timeout argument
   new in version 3
3 the timeout argument was added
   emitrecord      formats the record and sends it to the specified addressees
   getsubjectrecord      if you want to specify a subject line which is recorddependent      override this method
memoryhandler
the memoryhandler class located in the logging
handlers modulesupports buffering of logging records in memory periodically flushingthem to a target handler
 flushing occurs whenever the buffer isfull or when an event of a certain severity or greater is seen
memoryhandler is a subclass of the more general bufferinghandlerwhich is an abstract class
 this buffers logging records in memory
whenever each record is added to the buffer a check is made bycalling shouldflush to see if the buffer should be flushed
  if itshould then flush is expected to do the flushing
bufferinghandlercapacity   initializes the handler with a buffer of the specified capacity
   here capacity means the number of logging records buffered
   emitrecord      append the record to the buffer
 if shouldflush returns      true call flush to process the buffer
   flush      you can override this to implement custom flushing behavior
      this version just zaps the buffer to empty
   shouldflushrecord      return true if the buffer is up to capacity
 this method can      be overridden to implement custom flushing strategies
memoryhandlercapacity flushlevelerror targetnone flushonclosetrue   returns a new instance of the memoryhandler class
 the instance   is initialized with a buffer size of capacity number of records   buffered
 if flushlevel is not specified error is used
 if no   target is specified the target will need to be set using   settarget before this handler does anything useful
 if   flushonclose is specified as false then the buffer is not   flushed when the handler is closed
 if not specified or specified   as true the previous behaviour of flushing the buffer will occur   when the handler is closed
   changed in version 3
6 the flushonclose parameter was added
   close      calls flush sets the target to none and clears the      buffer
   flush      for a memoryhandler flushing means just sending the buffered      records to the target if there is one
 the buffer is also      cleared when this happens
 override if you want different      behavior
   settargettarget      sets the target handler for this handler
   shouldflushrecord      checks for buffer full or a record at the flushlevel or      higher
httphandler
queuehandler
queuelistener
new in version 3
2
the queuelistener class located in the logging
handlers modulesupports receiving logging messages from a queue such as thoseimplemented in the queue or multiprocessing modules
 the messagesare received from a queue in an internal thread and passed on thesame thread to one or more handlers for processing
 whilequeuelistener is not itself a handler it is documented here becauseit works handinhand with queuehandler
along with the queuehandler class queuelistener can be used tolet handlers do their work on a separate thread from the one whichdoes the logging
 this is important in web applications and also otherservice applications where threads servicing clients need to respondas quickly as possible while any potentially slow operations such assending an email via smtphandler are done on a separate thread
queuelistenerqueue handlers respecthandlerlevelfalse   returns a new instance of the queuelistener class
 the instance   is initialized with the queue to send messages to and a list of   handlers which will handle entries placed on the queue
 the queue   can be any queuelike object its passed asis to the dequeue   method which needs to know how to get messages from it
 the queue   is not required to have the task tracking api though its used   if available which means that you can use simplequeue instances   for queue
   if respecthandlerlevel is true a handlers level is   respected compared with the level for the message when deciding   whether to pass messages to that handler otherwise the behaviour   is as in previous python versions  to always pass each message to   each handler
   changed in version 3
5 the respecthandlerlevel argument was   added
   dequeueblock      dequeues a record and return it optionally blocking
      the base implementation uses get
 you may want to override      this method if you want to use timeouts or work with custom      queue implementations
   preparerecord      prepare a record for handling
      this implementation just returns the passedin record
 you may      want to override this method if you need to do any custom      marshalling or manipulation of the record before passing it to      the handlers
   handlerecord      handle a record
      this just loops through the handlers offering them the record to      handle
 the actual object passed to the handlers is that which      is returned from prepare
   start      starts the listener
      this starts up a background thread to monitor the queue for      logrecords to process
   stop      stops the listener
      this asks the thread to terminate and then waits for it to do      so
 note that if you dont call this before your application      exits there may be some records still left on the queue which      wont be processed
   enqueuesentinel      writes a sentinel to the queue to tell the listener to quit
      this implementation uses putnowait
  you may want to      override this method if you want to use timeouts or work with      custom queue implementations
      new in version 3
3
see also  module logging     api reference for the logging module
  module logging
config     configuration api for the logging module
multimedia services
the modules described in this chapter implement various algorithms orinterfaces that are mainly useful for multimedia applications
  theyare available at the discretion of the installation
  heres anoverview audioop  manipulate raw audio data aifc  read and write aiff and aifc files sunau  read and write sun au files   auread objects   auwrite objects wave  read and write wav files   waveread objects   wavewrite objects chunk  read iff chunked data colorsys  conversions between color systems imghdr  determine the type of an image sndhdr  determine type of sound file ossaudiodev  access to osscompatible audio devices   audio device objects   mixer device objects
enum  support for enumerations
new in version 3
4
source code libenum
pyan enumeration is a set of symbolic names members bound to uniqueconstant values
  within an enumeration the members can be comparedby identity and the enumeration itself can be iterated over
note  case of enum membersbecause enums are used to represent constants we  recommend using uppercase names for enum members and will be using  that style in our examples
module contents
this module defines four enumeration classes that can be used todefine unique sets of names and values enum intenum flag andintflag
  it also defines one decorator unique and one helperauto
enum   base class for creating enumerated constants
  see section   functional api for an alternate construction syntax
intenum   base class for creating enumerated constants that are also   subclasses of int
intflag   base class for creating enumerated constants that can be combined   using the bitwise operators without losing their intflag   membership
 intflag members are also subclasses of int
flag   base class for creating enumerated constants that can be combined   using the bitwise operations without losing their flag   membership
unique      enum class decorator that ensures only one name is bound to any      one value
auto   instances are replaced with an appropriate value for enum members
   by default the initial value starts at 1
new in version 3
6 flag intflag auto
creating an enum
programmatic access to enumeration members and their attributes
duplicating enum members and values
ensuring unique enumeration values
by default enumerations allow multiple names as aliases for the samevalue
 when this behavior isnt desired the following decorator canbe used to ensure each value is used only once in the enumerationenum
uniquea class decorator specifically for enumerations
  it searches anenumerations members gathering any aliases it finds if any arefound valueerror is raised with the details    from enum import enum unique    unique   
using automatic values
if the exact value is unimportant you can use auto    from enum import enum auto    class colorenum   
green 3the values are chosen by generatenextvalue which can beoverridden    class autonameenum   
west westnote  the goal of the default generatenextvalue methods is to  provide the next int in sequence with the last int provided but  the way it does this is an implementation detail and may change
note  the generatenextvalue method must be defined before any  members
iteration
iterating over the members of an enum does not provide the aliases    listshape   shape
circle 3the special attribute members is a readonly ordered mapping ofnames to members
  it includes all names defined in the enumerationincluding the aliases    for name member in shape
square 2the members attribute can be used for detailed programmaticaccess to the enumeration members
  for example finding all thealiases    name for name member in shape
comparisons
enumeration members are compared by identity    color
blue   trueordered comparisons between enumeration values are not supported
enum members are not integers but see intenum below    color
blue   traceback most recent call last     file stdin line 1 in module   typeerror  not supported between instances of color and colorequality comparisons are defined though    color
blue   truecomparisons against nonenumeration values will always compare notequal again intenum was explicitly designed to behave differentlysee below    color
allowed members and attributes of enumerations
restricted enum subclassing
a new enum class must have one base enum class up to one concretedata type and as many objectbased mixin classes as needed
  theorder of these base classes is   class enumnamemixin 
 datatype baseenum       passalso subclassing an enumeration is allowed only if the enumerationdoes not define any members
  so this is forbidden    class morecolorcolor   
   typeerror cannot extend enumerationsbut this is allowed    class fooenum   
allowing subclassing of enums that define members would lead to aviolation of some important invariants of types and instances
  on theother hand it makes sense to allow sharing some common behaviorbetween a group of enumerations
 see orderedenum for an example

pickling
enumerations can be pickled and unpickled    from test
tomato   truethe usual restrictions for pickling apply picklable enums must bedefined in the top level of a module since unpickling requires themto be importable from that module
note  with pickle protocol version 4 it is possible to easily pickle enums  nested in other classes
it is possible to modify how enum members are pickledunpickled bydefining reduceex in the enumeration class
functional api
derived enumerations
intenum
the first variation of enum that is provided is also a subclass ofint
  members of an intenum can be compared to integers byextension integer enumerations of different types can also becompared to each other    from enum import intenum    class shapeintenum   
post   truehowever they still cant be compared to standard enum enumerations    class shapeintenum   
red   falseintenum values behave like integers in other ways youd expect    intshape
intflag
flag
others
when to use new vs init
new must be used whenever you want to customize the actualvalue of the enum member
  any other modifications may go in eithernew or init with init being preferred
for example if you want to pass several items to the constructor butonly want one of them to be the value    class coordinatebytes enum   
interesting examples
while enum intenum intflag and flag are expected to coverthe majority of usecases they cannot cover them all
  here arerecipes for some different types of enumerations that can be useddirectly or as examples for creating ones own
omitting values
in many usecases one doesnt care what the actual value of anenumeration is
 there are several ways to define this type of simpleenumeration use instances of auto for the value use instances of object as the value use a descriptive string as the value use a tuple as the value and a custom new to replace the  tuple with an int valueusing any of these methods signifies to the user that these values arenot important and also enables one to add remove or reorder memberswithout having to renumber the remaining members
whichever method you choose you should provide a repr that alsohides the unimportant value    class novalueenum   
using autousing auto would look like    class colornovalue   
greenusing objectusing object would look like    class colornovalue   
greenusing a descriptive stringusing a string as the value would look like    class colornovalue   
value   gousing a custom newusing an autonumbering new would look like    class autonumbernovalue   
value   2to make a more general purpose autonumber add args to thesignature    class autonumbernovalue   
then when you inherit from autonumber you can write your owninit to handle any extra arguments    class swatchautonumber   
pantone   unknownnote  the new method if defined is used during creation of the  enum members it is then replaced by enums new which is  used after class creation for lookup of existing members
orderedenum
an ordered enumeration that is not based on intenum and so maintainsthe normal enum invariants such as not being comparable to otherenumerations    class orderedenumenum   
duplicatefreeenum
raises an error if a duplicate member name is found instead ofcreating an alias    class duplicatefreeenumenum   
   valueerror aliases not allowed in duplicatefreeenum  grene  greennote  this is a useful example for subclassing enum to add or change other  behaviors as well as disallowing aliases
  if the only desired  change is disallowing aliases the unique decorator can be used  instead
planet
if new or init is defined the value of the enum memberwill be passed to those methods    class planetenum   
timeperiod
an example to show the ignore attribute in use    from datetime import timedelta    class periodtimedelta enum   
how are enums different
enums have a custom metaclass that affects many aspects of bothderived enum classes and their instances members
enum classes
the enummeta metaclass is responsible for providing thecontains dir iter and other methods thatallow one to do things with an enum class that fail on a typicalclass such as listcolor or someenumvar in color
  enummetais responsible for ensuring that various other methods on the finalenum class are correct such as new getnewargsstr and repr
enum members aka instances
the most interesting thing about enum members is that they aresingletons
 enummeta creates them all while it is creating theenum class itself and then puts a custom new in place toensure that no new ones are ever instantiated by returning only theexisting member instances
finer points
xmldom  the document object model api
  see section conformance for a detaileddiscussion of mapping requirements
see also  document object model dom level 2 specification     the w3c recommendation upon which the python dom api is based
module contents
objects in the dom
the definitive documentation for the dom is the dom specification fromthe w3c
note that dom attributes may also be manipulated as nodes instead ofas simple strings
  it is fairly rare that you must do this howeverso this usage is not yet documented
 interface                         section                              purpose                            domimplementation               domimplementation objects            interface to the underlying                                                                               implementation
                    node                            node objects                         base interface for most objects                                                                           in a document
                     nodelist                        nodelist objects                     interface for a sequence of                                                                               nodes
                             documenttype                    documenttype objects                 information about the                                                                                     declarations needed to process a                                                                          document
                          document                        document objects                     object which represents an entire                                                                         document
                          element                         element objects                      element nodes in the document                                                                             hierarchy
                         attr                            attr objects                         attribute value nodes on element                                                                          nodes
                             comment                         comment objects                      representation of comments in the                                                                         source document
                   text                            text and cdatasection objects        nodes containing textual content                                                                          from the document
                 processinginstruction           processinginstruction objects        processing instruction                                                                                    representation
                   an additional section describes the exceptions defined for workingwith the dom in python
domimplementation objects
node objects
   note     this is based on a proposed dom level 3 api which is still in the     working draft stage but this particular interface appears     uncontroversial
nodelist objects
documenttype objects
document objects
element objects
attr objects
namednodemap objects
comment objects
text and cdatasection objects
note  the use of a cdatasection node does not indicate that the node  represents a complete cdata marked section only that the content of  the node was part of a cdata section
processinginstruction objects
exceptions
the exception codes defined in the dom recommendation map to theexceptions described above according to this table constant                                exception                          domstringsizeerr                    domstringsizeerr                 hierarchyrequesterr                 hierarchyrequesterr              indexsizeerr                        indexsizeerr                     inuseattributeerr                   inuseattributeerr                invalidaccesserr                    invalidaccesserr                 invalidcharactererr                 invalidcharactererr              invalidmodificationerr              invalidmodificationerr           invalidstateerr                     invalidstateerr                  namespaceerr                         namespaceerr                     notfounderr                         notfounderr                      notsupportederr                     notsupportederr                  nodataallowederr                   nodataallowederr                 nomodificationallowederr           nomodificationallowederr         syntaxerr                            syntaxerr                        wrongdocumenterr                    wrongdocumenterr                
conformance
type mapping
the idl types used in the dom specification are mapped to python typesaccording to the following table
 idl type            python type                                  boolean           bool or int                              int               int                                        long int          int                                        unsigned int      int                                        domstring         str or bytes                             null              none                                      
accessor methods
string  common string operations
source code libstring
pysee also  text sequence type  str  string methods
string constants
the constants defined in this module arestring
asciiletters   the concatenation of the asciilowercase and asciiuppercase   constants described below
  this value is not localedependent
asciilowercase   the lowercase letters abcdefghijklmnopqrstuvwxyz
  this value   is not localedependent and will not change
asciiuppercase   the uppercase letters abcdefghijklmnopqrstuvwxyz
  this value   is not localedependent and will not change
digits   the string 0123456789
hexdigits   the string 0123456789abcdefabcdef
octdigits   the string 01234567
punctuation   string of ascii characters which are considered punctuation   characters in the c locale 
printable   string of ascii characters which are considered printable
  this is   a combination of digits asciiletters punctuation and   whitespace
whitespace   a string containing all ascii characters that are considered   whitespace
 this includes the characters space tab linefeed   return formfeed and vertical tab
custom string formatting
the builtin string class provides the ability to do complex variablesubstitutions and value formatting via the format method describedin pep 3101
  the formatter class in the string module allowsyou to create and customize your own string formatting behaviors usingthe same implementation as the builtin format method
formatter   the formatter class has the following public methods   formatformatstring  args kwargs      the primary api method
  it takes a format string and an      arbitrary set of positional and keyword arguments
 it is just a      wrapper that calls vformat
      changed in version 3
7 a format string argument is now      positionalonly
   vformatformatstring args kwargs      this function does the actual work of formatting
  it is exposed      as a separate function for cases where you want to pass in a      predefined dictionary of arguments rather than unpacking and      repacking the dictionary as individual arguments using the      args and kwargs syntax
  vformat does the work of      breaking up the format string into character data and      replacement fields
  it calls the various methods described      below
   in addition the formatter defines a number of methods that are   intended to be replaced by subclasses   parseformatstring      loop over the formatstring and return an iterable of tuples      literaltext fieldname formatspec conversion
      this is used by vformat to break the string into either      literal text or replacement fields
      the values in the tuple conceptually represent a span of literal      text followed by a single replacement field
  if there is no      literal text which can happen if two replacement fields occur      consecutively then literaltext will be a zerolength      string
  if there is no replacement field then the values of      fieldname formatspec and conversion will be none
   getfieldfieldname args kwargs      given fieldname as returned by parse see above convert      it to an object to be formatted
  returns a tuple obj      usedkey
  the default version takes strings of the form      defined in pep 3101 such as 0name or label
title
      args and kwargs are as passed in to vformat
  the return      value usedkey has the same meaning as the key parameter to      getvalue
   getvaluekey args kwargs      retrieve a given field value
  the key argument will be either      an integer or a string
  if it is an integer it represents the      index of the positional argument in args if it is a string      then it represents a named argument in kwargs
      the args parameter is set to the list of positional arguments      to vformat and the kwargs parameter is set to the      dictionary of keyword arguments
      for compound field names these functions are only called for      the first component of the field name subsequent components are      handled through normal attribute and indexing operations
      so for example the field expression 0
name would cause      getvalue to be called with a key argument of 0
  the      name attribute will be looked up after getvalue returns      by calling the builtin getattr function
      if the index or keyword refers to an item that does not exist      then an indexerror or keyerror should be raised
   checkunusedargsusedargs args kwargs      implement checking for unused arguments if desired
  the      arguments to this function is the set of all argument keys that      were actually referred to in the format string integers for      positional arguments and strings for named arguments and a      reference to the args and kwargs that was passed to vformat
      the set of unused args can be calculated from these parameters
      checkunusedargs is assumed to raise an exception if the      check fails
   formatfieldvalue formatspec      formatfield simply calls the global format builtin
      the method is provided so that subclasses can override it
   convertfieldvalue conversion      converts the value returned by getfield given a      conversion type as in the tuple returned by the parse      method
  the default version understands s str r repr      and a ascii conversion types
format string syntax
format specification minilanguage
format specifications are used within replacement fields containedwithin a format string to define how individual values are presentedsee format string syntax and formatted string literals
 they canalso be passed directly to the builtin format function
  eachformattable type may define how the format specification is to beinterpreted
most builtin types implement the following options for formatspecifications although some of the formatting options are onlysupported by the numeric types
a general convention is that an empty format specification producesthe same result as if you had called str on the value
 a nonemptyformat specification typically modifies the result
the general form of a standard format specifier is   formatspec      fillalignsign0widthgroupingoption
precisiontype   fill             any character   align                     sign                     width            digit   groupingoption       precision        digit   type             b  c  d  e  e  f  f  g  g  n  o  s  x  x  if a valid align value is specified it can be preceded by a fillcharacter that can be any character and defaults to a space ifomitted
 it is not possible to use a literal curly brace  or as the fill character in a formatted string literal or whenusing the str
format method
  however it is possible to insert acurly brace with a nested replacement field
  this limitation doesntaffect the format function
the meaning of the various alignment options is as follows       option     meaning                                                                 forces the field to be leftaligned within the available                  space this is the default for most objects
                           forces the field to be rightaligned within the available                 space this is the default for numbers
                                forces the padding to be placed after the sign if any                   but before the digits
  this is used for printing fields                  in the form 000000120
 this alignment option is only                   valid for numeric types
  it becomes the default when 0                 immediately precedes the field width
                                   forces the field to be centered within the available                      space
                                                        note that unless a minimum field width is defined the field widthwill always be the same size as the data to fill it so that thealignment option has no meaning in this case
the sign option is only valid for number types and can be one ofthe following       option     meaning                                                                 indicates that a sign should be used for both positive as                 well as negative numbers
                                               indicates that a sign should be used only for negative                    numbers this is the default behavior
                           space      indicates that a leading space should be used on positive                 numbers and a minus sign on negative numbers
                the  option causes the alternate form to be used for theconversion
  the alternate form is defined differently for differenttypes
  this option is only valid for integer float complex anddecimal types
 for integers when binary octal or hexadecimal outputis used this option adds the prefix respective 0b 0o or0x to the output value
 for floats complex and decimal thealternate form causes the result of the conversion to always contain adecimalpoint character even if no digits follow it
 normally adecimalpoint character appears in the result of these conversionsonly if a digit follows it
 in addition for g and gconversions trailing zeros are not removed from the result
the  option signals the use of a comma for a thousands separator
for a locale aware separator use the n integer presentation typeinstead
changed in version 3
1 added the  option see also pep 378
the  option signals the use of an underscore for a thousandsseparator for floating point presentation types and for integerpresentation type d
  for integer presentation types b ox and x underscores will be inserted every 4 digits
  forother presentation types specifying this option is an error
changed in version 3
6 added the  option see also pep 515
width is a decimal integer defining the minimum total field widthincluding any prefixes separators and other formatting characters
if not specified then the field width will be determined by thecontent
when no explicit alignment is given preceding the width field by azero 0 character enables signaware zeropadding for numerictypes
  this is equivalent to a fill character of 0 with analignment type of 
the precision is a decimal number indicating how many digits shouldbe displayed after the decimal point for a floating point valueformatted with f and f or before and after the decimal pointfor a floating point value formatted with g or g
  for nonnumber types the field indicates the maximum field size  in otherwords how many characters will be used from the field content
 theprecision is not allowed for integer values
finally the type determines how the data should be presented
the available string presentation types are       type       meaning                                                           s      string format
 this is the default type for strings and                   may be omitted
                                                   none       the same as s
                                            the available integer presentation types are       type       meaning                                                           b      binary format
 outputs the number in base 2
                      c      character
 converts the integer to the corresponding                      unicode character before printing
                                d      decimal integer
 outputs the number in base 10
                   o      octal format
 outputs the number in base 8
                       x      hex format
 outputs the number in base 16 using lower                   case letters for the digits above 9
                              x      hex format
 outputs the number in base 16 using upper                   case letters for the digits above 9
                              n      number
 this is the same as d except that it uses the                current locale setting to insert the appropriate number                   separator characters
                                             none       the same as d
                                            in addition to the above presentation types integers can be formattedwith the floating point presentation types listed below except nand none
 when doing so float is used to convert the integerto a floating point number before formatting
the available presentation types for floating point and decimal valuesare       type       meaning                                                           e      exponent notation
 prints the number in scientific                        notation using the letter e to indicate the exponent
                   the default precision is 6
                                     e      exponent notation
 same as e except it uses an upper                  case e as the separator character
                              f      fixedpoint notation
 displays the number as a fixedpoint                number
 the default precision is 6
                             f      fixedpoint notation
 same as f but converts nan to                nan and inf to inf
                                         g      general format
  for a given precision p  1 this                     rounds the number to p significant digits and then                      formats the result in either fixedpoint format or in                     scientific notation depending on its magnitude
  the                     precise rules are as follows suppose that the result                     formatted with presentation type e and precision p1                would have exponent exp
  then if m  exp  p where                m is 4 for floats and 6 for decimals the number is                 formatted with presentation type f and precision                      p1exp
  otherwise the number is formatted with                       presentation type e and precision p1
 in both cases                insignificant trailing zeros are removed from the                         significand and the decimal point is also removed if                     there are no remaining digits following it unless the                     option is used
  positive and negative infinity                    positive and negative zero and nans are formatted as                    inf inf 0 0 and nan respectively                          regardless of the precision
  a precision of 0 is                       treated as equivalent to a precision of 1
 the default                  precision is 6
                                                 g      general format
 same as g except switches to e if                 the number gets too large
 the representations of infinity                and nan are uppercased too
                                      n      number
 this is the same as g except that it uses the                current locale setting to insert the appropriate number                   separator characters
                                                   percentage
 multiplies the number by 100 and displays in                  fixed f format followed by a percent sign
                 none       similar to g except that fixedpoint notation when                  used has at least one digit past the decimal point
 the                  default precision is as high as needed to represent the                   particular value
 the overall effect is to match the                      output of str as altered by the other format                          modifiers
                                                    
format examples
this section contains examples of the str
format syntax andcomparison with the old formatting
in most of the cases the syntax is similar to the old formattingwith the addition of the  and with  used instead of 
 forexample 03
2f can be translated to 03
the new format syntax also supports new and different options shownin the following examples
accessing arguments by position    0 1 2
formatabra cad    arguments indices can be repeated   abracadabraaccessing arguments by name    coordinates latitude longitude
81waccessing arguments attributes    c  35j    the complex number 0 is formed from the real part 0
    strpoint4 2   point4 2accessing arguments items    coord  3 5    x 00  y 01
formatcoord   x 3  y 5replacing s and r    repr shows quotes r str doesnt s
formattest1 test2   repr shows quotes test1 str doesnt test2aligning the text and specifying a width    30
formatcentered   use  as a fill char   centeredreplacing f f and  f and specifying a sign    f f
140000replacing x and o and converting the value to different bases     format also supports binary numbers    int 0d  hex 0x  oct 0o  bin 0b
format42   int 42  hex 0x2a  oct 0o52  bin 0b101010using the comma as a thousands separator    
format1234567890   1234567890expressing a percentage    points  19    total  22    correct answers 
36using typespecific formatting    import datetime    d  datetime
formatd   20100704 121558nesting arguments and more complex examples    for align text in zip left center right   
template strings
helper functions
capwordss sepnone   split the argument into words using str
split capitalize each   word using str
capitalize and join the capitalized words using   str
join
  if the optional second argument sep is absent or   none runs of whitespace characters are replaced by a single   space and leading and trailing whitespace are removed otherwise   sep is used to split and join the words
mailbox  manipulate mailboxes in various formats
source code libmailbox
see also  module email     represent and manipulate messages
mailbox objects
   warning     be very cautious when modifying mailboxes that might be     simultaneously changed by some other process
      changed in version 3
2 support for binary input was added
      note        the behavior of iter is unlike that of dictionaries        which iterate over keys
      new in version 3
2
      changed in version 3
2 the file object really is a binary file      previously it was incorrectly returned in text mode
      note        unlike other representations of messages filelike        representations are not necessarily independent of the        mailbox instance that created them or of the underlying        mailbox
      note        unlike with dictionaries keyword arguments are not supported
maildir
   note     the maildir specification requires the use of a colon  in     certain message file names
   some mailbox methods implemented by maildir deserve special   remarks   addmessage   setitemkey message   updatearg      warning        these methods generate unique file names based upon the        current process id
see also  maildir man page from courier     a specification of the format
mbox
see also  mbox man page from tin     a specification of the format with details on locking
mh
      note        alreadyissued keys are invalidated by this operation and        should not be subsequently used
see also  nmh  message handling system     home page of nmh an updated version of the original mh
babyl
      note        the actual messages are inspected to determine which labels        exist in the mailbox rather than consulting the list of labels        in the babyl options section but the babyl section is updated        whenever the mailbox is modified
see also  format of version 5 babyl files     a specification of the babyl format
mmdf
see also  mmdf man page from tin     a specification of mmdf format from the documentation of tin a     newsreader
message objects
maildirmessage
 standard flags for maildir   messages are as follows       flag    meaning    explanation                             d       draft      under composition                       f       flagged    marked as important                     p       passed     forwarded resent or bounced           r       replied    replied to                              s       seen       read                                    t       trashed    marked for subsequent deletion         maildirmessage instances offer the following methods   getsubdir      return either new if the message should be stored in the      new subdirectory or cur if the message should be stored in      the cur subdirectory
      note        a message is typically moved from new to cur after its        mailbox has been accessed whether or not the message is has        been read
when a maildirmessage instance is created based upon anmboxmessage or mmdfmessage instance the status and xstatusheaders are omitted and the following conversions take place resulting state       mboxmessage or mmdfmessage state            cur subdirectory    o flag                                          f flag                f flag                                          r flag                a flag                                          s flag                r flag                                          t flag                d flag                                         when a maildirmessage instance is created based upon an mhmessageinstance the following conversions take place resulting state                  mhmessage state           cur subdirectory               unseen sequence           cur subdirectory and s flag    no unseen sequence        f flag                           flagged sequence          r flag                           replied sequence         when a maildirmessage instance is created based upon ababylmessage instance the following conversions take place resulting state                  babylmessage state             cur subdirectory               unseen label                   cur subdirectory and s flag    no unseen label                p flag                           forwarded or resent label    r flag                           answered label                 t flag                           deleted label                 
mboxmessage
   conventional flags for mbox messages are as follows       flag    meaning     explanation                             r       read        read                                    o       old         previously detected by mua              d       deleted     marked for subsequent deletion          f       flagged     marked as important                     a       answered    replied to                             the r and o flags are stored in the status header and the   d f and a flags are stored in the xstatus header
when an mboxmessage instance is created based upon amaildirmessage instance a from  line is generated based upon themaildirmessage instances delivery date and the followingconversions take place resulting state    maildirmessage state           r flag             s flag                           o flag             cur subdirectory               d flag             t flag                           f flag             f flag                           a flag             r flag                          when an mboxmessage instance is created based upon an mhmessageinstance the following conversions take place resulting state      mhmessage state           r flag and o flag    no unseen sequence        o flag               unseen sequence           f flag               flagged sequence          a flag               replied sequence         when an mboxmessage instance is created based upon a babylmessageinstance the following conversions take place resulting state      babylmessage state           r flag and o flag    no unseen label              o flag               unseen label                 d flag               deleted label                a flag               answered label              when a message instance is created based upon an mmdfmessageinstance the from  line is copied and all flags directlycorrespond resulting state    mmdfmessage state           r flag             r flag                        o flag             o flag                        d flag             d flag                        f flag             f flag                        a flag             a flag                       
mhmessage
 some mail reading programs although not the   standard mh and nmh use sequences in much the same way   flags are used with other formats as follows       sequence    explanation                                       unseen      not read but previously detected by mua          replied     replied to                                        flagged     marked as important                              mhmessage instances offer the following methods   getsequences      return a list of the names of sequences that include this      message
when an mhmessage instance is created based upon a maildirmessageinstance the following conversions take place resulting state       maildirmessage state           unseen sequence     no s flag                        replied sequence    r flag                           flagged sequence    f flag                          when an mhmessage instance is created based upon an mboxmessage ormmdfmessage instance the status and xstatus headers areomitted and the following conversions take place resulting state       mboxmessage or mmdfmessage state            unseen sequence     no r flag                                       replied sequence    a flag                                          flagged sequence    f flag                                         when an mhmessage instance is created based upon a babylmessageinstance the following conversions take place resulting state       babylmessage state           unseen sequence     unseen label                 replied sequence    answered label              
babylmessage
 the attributes are as follows       label        explanation                                       unseen       not read but previously detected by mua          deleted      marked for subsequent deletion                    filed        copied to another file or mailbox                 answered     replied to                                        forwarded    forwarded                                         edited       modified by the user                              resent       resent                                           by default rmail displays only visible headers
   babylmessage instances offer the following methods   getlabels      return a list of labels on the message
   setlabelslabels      set the list of labels on the message to labels
   addlabellabel      add label to the list of labels on the message
   removelabellabel      remove label from the list of labels on the message
when a babylmessage instance is created based upon amaildirmessage instance the following conversions take place resulting state      maildirmessage state           unseen label       no s flag                        deleted label      t flag                           answered label     r flag                           forwarded label    p flag                          when a babylmessage instance is created based upon an mboxmessageor mmdfmessage instance the status and xstatus headers areomitted and the following conversions take place resulting state     mboxmessage or mmdfmessage state            unseen label      no r flag                                       deleted label     d flag                                          answered label    a flag                                         when a babylmessage instance is created based upon an mhmessageinstance the following conversions take place resulting state     mhmessage state           unseen label      unseen sequence           answered label    replied sequence         
mmdfmessage
   conventional flags for mmdf messages are identical to those of mbox   message and are as follows       flag    meaning     explanation                             r       read        read                                    o       old         previously detected by mua              d       deleted     marked for subsequent deletion          f       flagged     marked as important                     a       answered    replied to                             the r and o flags are stored in the status header and the   d f and a flags are stored in the xstatus header
when an mmdfmessage instance is created based upon amaildirmessage instance a from  line is generated based upon themaildirmessage instances delivery date and the followingconversions take place resulting state    maildirmessage state           r flag             s flag                           o flag             cur subdirectory               d flag             t flag                           f flag             f flag                           a flag             r flag                          when an mmdfmessage instance is created based upon an mhmessageinstance the following conversions take place resulting state      mhmessage state           r flag and o flag    no unseen sequence        o flag               unseen sequence           f flag               flagged sequence          a flag               replied sequence         when an mmdfmessage instance is created based upon a babylmessageinstance the following conversions take place resulting state      babylmessage state           r flag and o flag    no unseen label              o flag               unseen label                 d flag               deleted label                a flag               answered label              when an mmdfmessage instance is created based upon an mboxmessageinstance the from  line is copied and all flags directlycorrespond resulting state    mboxmessage state           r flag             r flag                        o flag             o flag                        d flag             d flag                        f flag             f flag                        a flag             a flag                       
exceptions
examples
internet protocols and support
urlliberror  exception classes raised by urllibrequest
source code liburlliberror
pythe urllib
error module defines the exception classes for exceptionsraised by urllib
request
  the base exception class is urlerror
the following exceptions are raised by urllib
error as appropriateexception urllib
urlerror   the handlers raise this exception or derived exceptions when they   run into a problem
  it is a subclass of oserror
   reason      the reason for this error
  it can be a message string or      another exception instance
   changed in version 3
3 urlerror has been made a subclass of   oserror instead of ioerror
httperror   though being an exception a subclass of urlerror an   httperror can also function as a nonexceptional filelike return   value the same thing that urlopen returns
  this is useful   when handling exotic http errors such as requests for   authentication
   code      an http status code as defined in rfc 2616
  this numeric      value corresponds to a value found in the dictionary of codes as      found in http
responses
   reason      this is usually a string explaining the reason for this error
   headers      the http response headers for the http request that caused the      httperror
      new in version 3
4
contenttooshorterrormsg content   this exception is raised when the urlretrieve function detects   that the amount of the downloaded data is less than the expected   amount given by the contentlength header
  the content   attribute stores the downloaded and supposedly truncated data
queues
source code libasyncioqueues
pyasyncio queues are designed to be similar to classes of the queuemodule
  although asyncio queues are not threadsafe they aredesigned to be used specifically in asyncawait code
note that methods of asyncio queues dont have a timeout parameteruse asyncio
waitfor function to do queue operations with atimeout
see also the examples section below
queue
priority queue
priorityqueue   a variant of queue retrieves entries in priority order lowest   first
   entries are typically tuples of the form prioritynumber data
lifo queue
lifoqueue   a variant of queue that retrieves most recently added entries   first last in first out
exceptions
queueempty   this exception is raised when the getnowait method is called   on an empty queue
queuefull   exception raised when the putnowait method is called on a   queue that has reached its maxsize
examples
queues can be used to distribute workload between several concurrenttasks   import asyncio   import random   import time   async def workername queue       while true            get a work item out of the queue
curses  terminal handling for charactercell displays
the curses module provides an interface to the curses library thedefacto standard for portable advanced terminal handling
while curses is most widely used in the unix environment versions areavailable for windows dos and possibly other systems as well
  thisextension module is designed to match the api of ncurses an opensource curses library hosted on linux and the bsd variants of unix
note  whenever the documentation mentions a character it can be  specified as an integer a onecharacter unicode string or a one  byte byte string
whenever the documentation mentions a character  string it can be specified as a unicode string or a byte string
note  since version 5
4 the ncurses library decides how to interpret non  ascii data using the nllanginfo function
  that means that you  have to call locale
setlocale in the application and encode  unicode strings using one of the systems available encodings
  this  example uses the systems default encoding     import locale     locale
getpreferredencoding  then use code as the encoding for str
encode calls
see also  module curses
ascii     utilities for working with ascii characters regardless of your     locale settings
  module curses
panel     a panel stack extension that adds depth to  curses windows
  module curses
textpad     editable text widget for curses supporting  emacslike     bindings
  curses programming with python     tutorial material on using curses with python by andrew kuchling     and eric raymond
  the toolsdemo directory in the python source distribution contains  some example programs using the curses bindings provided by this  module
functions
window objects
constants
pipes  interface to shell pipelines
source code libpipes
pythe pipes module defines a class to abstract the concept of apipeline  a sequence of converters from one file to  another
because the module uses binsh command lines a posix orcompatible shell for os
system and os
popen is required
the pipes module defines the following classclass pipes
template   an abstraction of a pipeline
example    import pipes    t  pipes
template objects
template objects following methodstemplate
reset   restore a pipeline template to its initial state
clone   return a new equivalent pipeline template
debugflag   if flag is true turn debugging on
 otherwise turn debugging   off
 when debugging is on commands to be executed are printed and   the shell is given set x command to be more verbose
appendcmd kind   append a new action at the end
 the cmd variable must be a valid   bourne shell command
 the kind variable consists of two letters
   the first letter can be either of  which means the command   reads its standard input f which means the commands reads a   given file on the command line or 
 which means the commands   reads no input and hence must be first
   similarly the second letter can be either of  which means   the command writes to standard output f which means the   command writes a file on the command line or 
 which means   the command does not write anything and hence must be last
prependcmd kind   add a new action at the beginning
 see append for explanations   of the arguments
openfile mode   return a filelike object open to file but read from or written   to by the pipeline
  note that only one of r w may be   given
copyinfile outfile   copy infile to outfile through the pipe
colorsys  conversions between color systems
source code libcolorsys
pythe colorsys module defines bidirectional conversions of colorvalues between colors expressed in the rgb red green blue colorspace used in computer monitors and three other coordinate systemsyiq hls hue lightness saturation and hsv hue saturation value
coordinates in all of these color spaces are floating point values
in the yiq space the y coordinate is between 0 and 1 but the i and qcoordinates can be positive or negative
  in all other spaces thecoordinates are all between 0 and 1
see also  more information about color spaces can be found at  httpspoynton
html and  httpswww
the colorsys module defines the following functionscolorsys
rgbtoyiqr g b   convert the color from rgb coordinates to yiq coordinates
yiqtorgby i q   convert the color from yiq coordinates to rgb coordinates
rgbtohlsr g b   convert the color from rgb coordinates to hls coordinates
hlstorgbh l s   convert the color from hls coordinates to rgb coordinates
rgbtohsvr g b   convert the color from rgb coordinates to hsv coordinates
hsvtorgbh s v   convert the color from hsv coordinates to rgb coordinates
example    import colorsys    colorsys
time  time access and conversions
functions
clock id constants
timezone constants
altzone   the offset of the local dst timezone in seconds west of utc if   one is defined
 this is negative if the local dst timezone is east   of utc as in western europe including the uk
  only use this if   daylight is nonzero
  see note below
daylight   nonzero if a dst timezone is defined
  see note below
timezone   the offset of the local nondst timezone in seconds west of utc   negative in most of western europe positive in the us zero in   the uk
  see note below
tzname   a tuple of two strings the first is the name of the local nondst   timezone the second is the name of the local dst timezone
  if no   dst timezone is defined the second string should not be used
  see   note below
note  for the above timezone constants altzone daylight timezone  and tzname the value is determined by the timezone rules in  effect at module load time or the last time tzset is called and  may be incorrect for times in the past
  it is recommended to use  the tmgmtoff and tmzone results from localtime to obtain  timezone information
see also  module datetime     more objectoriented interface to dates and times
  module locale     internationalization services
  the locale setting affects the     interpretation of many format specifiers in strftime and     strptime
  module calendar     general calendarrelated functions
   timegm is the inverse     of gmtime from this module
 footnotes 1 the use of z is now deprecated but the z escape that    expands to the preferred  hourminute offset is not supported by    all ansi c libraries
 also a strict reading of the original 1982    rfc 822 standard calls for a twodigit year y rather than    y but practice moved to 4digit years long before the year    2000
  after that rfc 822 became obsolete and the 4digit    year has been first recommended by rfc 1123 and then mandated    by rfc 2822
socketserver  a framework for network servers
server creation notes
   changed in version 3
7 socketserver
serverclose   and socketserver
serverclose now waits until   all child processes and nondaemonic threads complete
server objects
      changed in version 3
3 added serviceactions call to the      serveforever method
      new in version 3
3
      changed in version 3
6 now only called for exceptions derived      from the exception class
   changed in version 3
6 support for the context manager protocol   was added
request handler objects
   changed in version 3
6 streamrequesthandler
wfile also supports   the io
examples
socketservertcpserver example
socketserverudpserver example
asynchronous mixins
transports and protocols
transports
source code libasynciotransports
pytransports are classes provided by asyncio in order to abstractvarious kinds of communication channels
transport objects are always instantiated by an asyncio event loop
asyncio implements transports for tcp udp ssl and subprocess pipes
the methods available on a transport depend on the transports kind
the transport classes are not thread safe
transports hierarchy
basetransport   base class for all transports
  contains methods that all asyncio   transports share
writetransportbasetransport   a base transport for writeonly connections
   instances of the writetransport class are returned from the   loop
connectwritepipe event loop method and are also used by   subprocessrelated methods like loop
subprocessexec
readtransportbasetransport   a base transport for readonly connections
   instances of the readtransport class are returned from the   loop
connectreadpipe event loop method and are also used by   subprocessrelated methods like loop
subprocessexec
transportwritetransport readtransport   interface representing a bidirectional transport such as a tcp   connection
   the user does not instantiate a transport directly they call a   utility function passing it a protocol factory and other   information necessary to create the transport and protocol
   instances of the transport class are returned from or used by   event loop methods like loop
createconnection   loop
createunixconnection loop
createserver   loop
sendfile etc
datagramtransportbasetransport   a transport for datagram udp connections
   instances of the datagramtransport class are returned from the   loop
createdatagramendpoint event loop method
subprocesstransportbasetransport   an abstraction to represent a connection between a parent and its   child os process
   instances of the subprocesstransport class are returned from   event loop methods loop
subprocessshell and   loop
subprocessexec
base transport
readonly transports
writeonly transports
datagram transports
sendtodata addrnone   send the data bytes to the remote peer given by addr a   transportdependent target address
  if addr is none the data   is sent to the target address given on transport creation
   this method does not block it buffers the data and arranges for it   to be sent out asynchronously
abort   close the transport immediately without waiting for pending   operations to complete
  buffered data will be lost
 no more data   will be received
  the protocols protocol
connectionlost   method will eventually be called with none as its argument
subprocess transports
getpid   return the subprocess process id as an integer
getpipetransportfd   return the transport for the communication pipe corresponding to   the integer file descriptor fd    0 readable streaming transport of the standard input     stdin or none if the subprocess was not created with     stdinpipe    1 writable streaming transport of the standard output     stdout or none if the subprocess was not created with     stdoutpipe    2 writable streaming transport of the standard error     stderr or none if the subprocess was not created with     stderrpipe    other fd nonesubprocesstransport
getreturncode   return the subprocess return code as an integer or none if it   hasnt returned which is similar to the   subprocess
returncode attribute
kill   kill the subprocess
   on posix systems the function sends sigkill to the subprocess
 on   windows this method is an alias for terminate
   see also subprocess
sendsignalsignal   send the signal number to the subprocess as in   subprocess
sendsignal
terminate   stop the subprocess
   on posix systems this method sends sigterm to the subprocess
 on   windows the windows api function terminateprocess is called to   stop the subprocess
   see also subprocess
close   kill the subprocess by calling the kill method
   if the subprocess hasnt returned yet and close transports of   stdin stdout and stderr pipes
protocols
source code libasyncioprotocols
pyasyncio provides a set of abstract base classes that should be used toimplement network protocols
  those classes are meant to be usedtogether with transports
subclasses of abstract base protocol classes may implement some or allmethods
  all these methods are callbacks they are called bytransports on certain events for example when some data is received
a base protocol method should be called by the correspondingtransport
base protocols
baseprotocol   base protocol with methods that all protocols share
protocolbaseprotocol   the base class for implementing streaming protocols tcp unix   sockets etc
bufferedprotocolbaseprotocol   a base class for implementing streaming protocols with manual   control of the receive buffer
datagramprotocolbaseprotocol   the base class for implementing datagram udp protocols
subprocessprotocolbaseprotocol   the base class for implementing protocols communicating with child   processes unidirectional pipes
base protocol
all asyncio protocols can implement base protocol callbacks
 connection callbacks connection callbacks are called on all protocols exactly once per asuccessful connection
  all other protocol callbacks can only becalled between those two methods
connectionmadetransport   called when a connection is made
   the transport argument is the transport representing the   connection
  the protocol is responsible for storing the reference   to its transport
connectionlostexc   called when the connection is lost or closed
   the argument is either an exception object or none
 the latter   means a regular eof is received or the connection was aborted or   closed by this side of the connection
 flow control callbacks flow control callbacks can be called by transports to pause or resumewriting performed by the protocol
see the documentation of the setwritebufferlimits method formore details
pausewriting   called when the transports buffer goes over the high watermark
resumewriting   called when the transports buffer drains below the low watermark
if the buffer size equals the high watermark pausewriting is notcalled the buffer size must go strictly over
conversely resumewriting is called when the buffer size is equalor lower than the low watermark
  these end conditions are importantto ensure that things go as expected when either mark is zero
streaming protocols
event methods such as loop
createserverloop
createunixserver loop
createconnectionloop
createunixconnection loop
connectacceptedsocketloop
connectreadpipe and loop
connectwritepipe acceptfactories that return streaming protocols
datareceiveddata   called when some data is received
  data is a nonempty bytes   object containing the incoming data
   whether the data is buffered chunked or reassembled depends on the   transport
  in general you shouldnt rely on specific semantics   and instead make your parsing generic and flexible
 however data   is always received in the correct order
   the method can be called an arbitrary number of times while a   connection is open
   however protocol
eofreceived is called at most once
  once   eofreceived is called datareceived is not called   anymore
eofreceived   called when the other end signals it wont send any more data for   example by calling transport
writeeof if the other end also   uses asyncio
   this method may return a false value including none in which   case the transport will close itself
  conversely if this method   returns a true value the protocol used determines whether to close   the transport
 since the default implementation returns none it   implicitly closes the connection
   some transports including ssl dont support halfclosed   connections in which case returning true from this method will   result in the connection being closed
state machine   start  connectionmade        datareceived        eofreceived    connectionlost  end
buffered streaming protocols
new in version 3
7
buffered protocols can be used with any event loop method thatsupports streaming protocols
bufferedprotocol implementations allow explicit manual allocationand control of the receive buffer
  event loops can then use thebuffer provided by the protocol to avoid unnecessary data copies
this can result in noticeable performance improvement for protocolsthat receive big amounts of data
  sophisticated protocolimplementations can significantly reduce the number of bufferallocations
the following callbacks are called on bufferedprotocol instancesbufferedprotocol
getbuffersizehint   called to allocate a new receive buffer
   sizehint is the recommended minimum size for the returned buffer
   it is acceptable to return smaller or larger buffers than what   sizehint suggests
  when set to 1 the buffer size can be   arbitrary
 it is an error to return a buffer with a zero size
   getbuffer must return an object implementing the buffer   protocol
bufferupdatednbytes   called when the buffer was updated with the received data
   nbytes is the total number of bytes that were written to the   buffer
eofreceived   see the documentation of the protocol
eofreceived method
getbuffer can be called an arbitrary number of times during aconnection
  however protocol
eofreceived is called at most onceand if called getbuffer and bufferupdated wont be calledafter it
state machine   start  connectionmade        getbuffer            bufferupdated               eofreceived    connectionlost  end
datagram protocols
subprocess protocols
datagram protocol instances should be constructed by protocolfactories passed to the loop
subprocessexec andloop
subprocessshell methods
pipedatareceivedfd data   called when the child process writes data into its stdout or stderr   pipe
   fd is the integer file descriptor of the pipe
   data is a nonempty bytes object containing the received data
pipeconnectionlostfd exc   called when one of the pipes communicating with the child process   is closed
   fd is the integer file descriptor that was closed
processexited   called when the child process has exited
examples
tcp echo server
create a tcp echo server using the loop
createserver method sendback received data and close the connection   import asyncio   class echoserverprotocolasyncio
runmainsee also  the tcp echo server using streams example uses the highlevel  asyncio
startserver function
tcp echo client
a tcp echo client using the loop
createconnection method sendsdata and waits until the connection is closed   import asyncio   class echoclientprotocolasyncio
runmainsee also  the tcp echo client using streams example uses the highlevel  asyncio
openconnection function
udp echo server
a udp echo server using the loop
createdatagramendpoint methodsends back received data   import asyncio   class echoserverprotocol       def connectionmadeself transport           self
udp echo client
a udp echo client using the loop
createdatagramendpoint methodsends data and closes the transport when it receives the answer   import asyncio   class echoclientprotocol       def initself message onconlost           self
connecting existing sockets
wait until a socket receives data using the loop
createconnectionmethod with a protocol   import asyncio   import socket   class myprotocolasyncio
runmainsee also  the watch a file descriptor for read events example uses the low  level loop
addreader method to register an fd
  the register an open socket to wait for data using streams example  uses highlevel streams created by the openconnection function  in a coroutine
loopsubprocessexec and subprocessprotocol
an example of a subprocess protocol used to get the output of asubprocess and to wait for the subprocess exit
the subprocess is created by the loop
subprocessexec method   import asyncio   import sys   class dateprotocolasyncio
rungetdate   printfcurrent date datesee also the same example written using highlevel apis
symbol  constants used with python parse trees
source code libsymbol
pythis module provides constants which represent the numeric values ofinternal nodes of the parse tree
  unlike most python constants theseuse lowercase names
  refer to the file grammargrammar in thepython distribution for the definitions of the names in the context ofthe language grammar
  the specific numeric values which the names mapto may change between python versions
warning  the symbol module is deprecated and will be removed in future  versions of python
this module also provides one additional data objectsymbol
symname   dictionary mapping the numeric values of the constants defined in   this module back to name strings allowing more humanreadable   representation of parse trees to be generated
tkinter  python interface to tcltk
tkinter modules
most of the time tkinter is all you really need but a number ofadditional modules are available as well
  the tk interface is locatedin a binary module named tkinter
 this module contains the lowlevel interface to tk and should never be used directly byapplication programmers
 it is usually a shared library or dll butmight in some cases be statically linked with the python interpreter
in addition to the tk interface module tkinter includes a number ofpython modules tkinter
constants being one of the most important
importing tkinter will automatically import tkinter
constants sousually to use tkinter all you need is a simple import statement   import tkinteror more often   from tkinter import class tkinter
tkscreennamenone basenamenone classnametk usetk1   the tk class is instantiated without arguments
 this creates a   toplevel widget of tk which usually is the main window of an   application
 each instance has its own associated tcl interpreter
tclscreennamenone basenamenone classnametk usetk0   the tcl function is a factory function which creates an object   much like that created by the tk class except that it does not   initialize the tk subsystem
  this is most often useful when   driving the tcl interpreter in an environment where one doesnt   want to create extraneous toplevel windows or where one cannot   such as unixlinux systems without an x server
  an object   created by the tcl object can have a toplevel window created   and the tk subsystem initialized by calling its loadtk   method
other modules that provide tk support includetkinter
colorchooser   dialog to let the user choose a color
commondialog   base class for the dialogs defined in the other modules listed   here
tkinter life preserver
how to use this section
a simple hello world program
a very quick look at tcltk
notes these classes are provided for the purposes of organizing certain  functions under one namespace
for example   button   
mapping basic tk into tkinter
how tk and tkinter are related
handy reference
setting options
 index    meaning                            example         0        option name                        relief      1        option name for database lookup    relief      2        option class for database lookup   relief      3        default value                      raised      4        current value                      groove     example    printfred
the packer
packer options
ipadx and ipady   a distance  designating internal padding on each side of the slave   widget
padx and pady   a distance  designating external padding on each side of the slave   widget
coupling widget variables
for example   import tkinter as tk   class apptk
the window manager
tk option data types
bitmap   there are eight builtin named bitmaps error gray25   gray50 hourglass info questhead question   warning
callback   this is any python function that takes no arguments
bindings and events
  the form of the bind method is   def bindself sequence func addwheresequence   is a string that denotes the target kind of event
for example   def turnredself event       event
 tk    tkinter event field    tk    tkinter event field    f    focus                  a    char                   h    height                 e    sendevent             k    keycode                k    keysym                 s    state                  n    keysymnum             t    time                   t    type                   w    width                  w    widget                 x    x                      x    xroot                 y    y                      y    yroot                
the index parameter
images
see also  the pillow package adds support for formats such as bmp jpeg tiff  and webp among others
file handlers
zipapp  manage executable python zip archives
new in version 3
5
  the module provides both a commandline interface and apython api
basic example
the following example shows how the commandline interface can be usedto create an executable archive from a directory containing pythoncode
  when run the archive will execute the main function from themodule myapp in the archive
commandline interface
   new in version 3
7
python api
   new in version 3
7 added the filter and compressed arguments
examples
specifying the interpreter
creating standalone applications with zipapp
making a windows executable
caveats
the python zip application archive format
fnmatch  unix filename pattern matching
source code libfnmatch
pythis module provides support for unix shellstyle wildcards which arenot the same as regular expressions which are documented in there module
  the special characters used in shellstyle wildcardsare pattern       meaning                                          matches everything                               matches any single character          seq       matches any character in seq        seq      matches any character not in seq   for a literal match wrap the metacharacters in brackets
 forexample  matches the character 
note that the filename separator  on unix is not special tothis module
  see module glob for pathname expansion glob usesfilter to match pathname segments
  similarly filenames startingwith a period are not special for this module and are matched by the and  patterns
fnmatchfilename pattern   test whether the filename string matches the pattern string   returning true or false
  both parameters are casenormalized   using os
normcase
 fnmatchcase can be used to perform   a casesensitive comparison regardless of whether thats standard   for the operating system
   this example will print all file names in the current directory   with the extension 
txt      import fnmatch      import os      for file in os
fnmatchcasefilename pattern   test whether filename matches pattern returning true or   false the comparison is casesensitive and does not apply   os
filternames pattern   return the subset of the list of names that match pattern
 it   is the same as n for n in names if fnmatchn pattern but   implemented more efficiently
translatepattern   return the shellstyle pattern converted to a regular expression   for using with re
   example    import fnmatch re       regex  fnmatch
txtsee also  module glob     unix shellstyle path expansion
telnetlib  telnet client
   changed in version 3
6 context manager support addedsee also  rfc 854  telnet protocol specification     definition of the telnet protocol
telnet objects
close   close the connection
   changed in version 3
3 this method used to raise socket
error   which is now an alias of oserror
telnet example
doctest  test interactive python examples
source code libdoctest
pythe doctest module searches for pieces of text that look likeinteractive python sessions and then executes those sessions toverify that they work exactly as shown
  there are several common waysto use doctest to check that a modules docstrings are uptodate by verifying that  all interactive examples still work as documented
 to perform regression testing by verifying that interactive examples  from a test file or a test object work as expected
 to write tutorial documentation for a package liberally illustrated  with inputoutput examples
  depending on whether the examples or  the expository text are emphasized this has the flavor of literate  testing or executable documentation
heres a complete but small example module      this is the example module
   the example module supplies one function factorial
  for example    factorial5   120      def factorialn       return the factorial of n an exact integer  0
        factorialn for n in range6       1 1 2 6 24 120        factorial30       265252859812191058636308480000000        factorial1       traceback most recent call last           
       valueerror n must be  0       factorials of floats are ok but the float must be an exact integer        factorial30
1       traceback most recent call last           
       valueerror n must be exact integer        factorial30
0       265252859812191058636308480000000       it must also not be ridiculously large        factorial1e100       traceback most recent call last           
       overflowerror n too large              import math       if not n  0           raise valueerrorn must be  0       if math
floorn  n           raise valueerrorn must be exact integer       if n1  n   catch a value like 1e300           raise overflowerrorn too large       result  1       factor  2       while factor  n           result  factor           factor  1       return result   if name  main       import doctest       doctest
testmodif you run example
py directly from the command line doctestworks its magic    python example
simple usage checking examples in docstrings
the simplest way to start using doctest but not necessarily the wayyoull continue to do it is to end each module m with   if name  main       import doctest       doctest
simple usage checking examples in a text file
how it works
which docstrings are examined
how are docstring examples recognized
whats the execution context
what about exceptions
option flags
new in version 3
4 the o command line option
   changed in version 3
2 ignoreexceptiondetail now also ignores   any information relating to the module containing the exception   under test
   new in version 3
4
directives
warnings
  another is to do    d  sortedfoo    d   harry hermionenote  before python 3
basic api
  for a lessformal introduction to these two functions see sections simple usagechecking examples in docstrings and simple usage checking examples ina text file
unittest api
   changed in version 3
5 doctestsuite returns an empty   unittest
advanced api
doctest objects
example objects
doctestfinder objects
doctestparser objects
doctestrunner objects
outputchecker objects
debugging
soapbox
formatfail total footnotes 1 examples containing both expected output and an exception are not    supported
gzip  support for gzip files
examples of usage
example of how to read a compressed file   import gzip   with gzip
readexample of how to create a compressed gzip file   import gzip   content  blots of content here   with gzip
writecontentexample of how to gzip compress an existing file   import gzip   import shutil   with openhomejoefile
copyfileobjfin foutexample of how to gzip compress a binary string   import gzip   sin  blots of content here   sout  gzip
compresssinsee also  module zlib     the basic data compression module needed to support the gzip     file format
command line interface
the gzip module provides a simple command line interface to compressor decompress files
once executed the gzip module keeps the input files
changed in version 3
8 add a new command line interface with a usage
by default when you will execute the cli the default compressionlevel is 6
command line options
file   if file is not specified read from sys
stdin
fast   indicates the fastest compression method less compression
best   indicates the slowest compression method best compression
d decompress   decompress the given file
h help   show the help message
atexit  exit handlers
the atexit module defines functions to register and unregistercleanup functions
  functions thus registered are automaticallyexecuted upon normal interpreter termination
  atexit runs thesefunctions in the reverse order in which they were registered if youregister a b and c at interpreter termination time they willbe run in the order c b a
note the functions registered via this module are not called whenthe program is killed by a signal not handled by python when a pythonfatal internal error is detected or when os
exit is called
changed in version 3
7 when used with capi subinterpretersregistered functions are local to the interpreter they were registeredin
registerfunc args kwargs   register func as a function to be executed at termination
  any   optional arguments that are to be passed to func must be passed   as arguments to register
  it is possible to register the same   function and arguments more than once
   at normal program termination for instance if sys
exit is   called or the main modules execution completes all functions   registered are called in last in first out order
  the assumption   is that lower level modules will normally be imported before higher   level modules and thus must be cleaned up later
   if an exception is raised during execution of the exit handlers a   traceback is printed unless systemexit is raised and the   exception information is saved
  after all exit handlers have had a   chance to run the last exception to be raised is reraised
   this function returns func which makes it possible to use it as   a decorator
unregisterfunc   remove func from the list of functions to be run at interpreter   shutdown
  after calling unregister func is guaranteed not   to be called when the interpreter shuts down even if it was   registered more than once
  unregister silently does nothing if   func was not previously registered
see also  module readline     useful example of atexit to read and write readline history     files
atexit example
the following simple example demonstrates how a module can initializea counter from a file when it is imported and save the countersupdated value automatically when the program terminates withoutrelying on the application making an explicit call into this module attermination
   try       with opencounterfile as infile           count  intinfile
registersavecounterpositional and keyword arguments may also be passed to register tobe passed along to the registered function when it is called   def goodbyename adjective       printgoodbye s it was s to meet you
registergoodbye adjectivenice namedonnyusage as a decorator   import atexit   atexit
this only works with functions that can be called without arguments
winsound  soundplaying interface for windows
   all win32 systems support at least the following most systems   support many more       playsound name        corresponding control panel sound name          systemasterisk          asterisk                                        systemexclamation       exclamation                                     systemexit              exit windows                                    systemhand              critical stop                                   systemquestion          question                                       for example      import winsound       play windows exit sound
   note     this module does not support playing from a memory image     asynchronously so a combination of this flag and sndasync     will raise runtimeerror
   note     this flag is not supported on modern windows platforms
   note     this flag is not supported on modern windows platforms
uu  encode and decode uuencode files
posix  the most common posix system calls
this module provides access to operating system functionality that isstandardized by the c standard and the posix standard a thinlydisguised unix interface
do not import this module directly
  instead import the moduleos which provides a portable version of this interface
  on unixthe os module provides a superset of the posix interface
  on nonunix operating systems the posix module is not available but asubset is always available through the os interface
  once os isimported there is no performance penalty in using it instead ofposix
  in addition os provides some additional functionalitysuch as automatically calling putenv when an entry in os
environis changed
errors are reported as exceptions the usual exceptions are given fortype errors while errors reported by the system calls raiseoserror
large file support
several operating systems including aix hpux irix and solarisprovide support for files that are larger than 2 gib from a cprogramming model where int and long are 32bit values
 this istypically accomplished by defining the relevant size and offset typesas 64bit values
 such files are sometimes referred to as largefiles
large file support is enabled in python when the size of an offt islarger than a long and the long long is at least as large as anofft
 it may be necessary to configure and compile python withcertain compiler flags to enable this mode
 for example it is enabledby default with recent versions of irix but with solaris 2
6 and 2
7you need to do something like   cflagsgetconf lfscflags optg o2 cflags            
configureon largefilecapable linux systems this might work   cflagsdlargefile64source dfileoffsetbits64 optg o2 cflags            
notable module contents
in addition to many functions described in the os moduledocumentation posix defines the following data itemposix
environ   a dictionary representing the string environment at the time the   interpreter was started
 keys and values are bytes on unix and str   on windows
 for example environbhome environhome on   windows is the pathname of your home directory equivalent to   getenvhome in c
   modifying this dictionary does not affect the string environment   passed on by execv popen or system if you need to   change the environment pass environ to execve or add   variable assignments and export statements to the command string   for system or popen
   changed in version 3
2 on unix keys and values are bytes
   note     the os module provides an alternate implementation of environ     which updates the environment on modification
 note also that     updating os
environ will render this dictionary obsolete
 use     of the os module version of this is recommended over direct     access to the posix module
networking and interprocess communication
the concurrent package
currently there is only one module in this package concurrent
futures  launching parallel tasks
zipfile  work with zip archives
source code libzipfile
pythe zip file format is a common archive and compression standard
 thismodule provides tools to create read write append and list a zipfile
  any advanced use of this module will require an understandingof the format as defined in pkzip application note
this module does not currently handle multidisk zip files
 it canhandle zip files that use the zip64 extensions that is zip files thatare more than 4 gib in size
  it supports decryption of encryptedfiles in zip archives but it currently cannot create an encryptedfile
  decryption is extremely slow as it is implemented in nativepython rather than c
the module defines the following itemsexception zipfile
badzipfile   the error raised for bad zip files
   new in version 3
2
badzipfile   alias of badzipfile for compatibility with older python   versions
   deprecated since version 3
2
largezipfile   the error raised when a zip file would require zip64 functionality   but that has not been enabled
zipfile   the class for reading and writing zip files
  see section zipfile   objects for constructor details
path   a pathlibcompatible wrapper for zip files
 see section path   objects for details
   new in version 3
8
pyzipfile   class for creating zip archives containing python libraries
zipinfofilenamenoname datetime1980 1 1 0 0 0   class used to represent information about a member of an archive
   instances of this class are returned by the getinfo and   infolist methods of zipfile objects
  most users of the   zipfile module will not need to create these but only use those   created by this module
 filename should be the full name of the   archive member and datetime should be a tuple containing six   fields which describe the time of the last modification to the   file the fields are described in section zipinfo objects
iszipfilefilename   returns true if filename is a valid zip file based on its magic   number otherwise returns false
  filename may be a file or   filelike object too
   changed in version 3
1 support for file and filelike objects
zipstored   the numeric constant for an uncompressed archive member
zipdeflated   the numeric constant for the usual zip compression method
  this   requires the zlib module
zipbzip2   the numeric constant for the bzip2 compression method
  this   requires the bz2 module
   new in version 3
3
ziplzma   the numeric constant for the lzma compression method
  this   requires the lzma module
   new in version 3
3
   note     the zip file format specification has included support for bzip2     compression since 2001 and for lzma compression since 2006
     however some tools including older python releases do not     support these compression methods and may either refuse to     process the zip file altogether or fail to extract individual     files
see also  pkzip application note     documentation on the zip file format by phil katz the creator of     the format and algorithms used
  infozip home page     information about the infozip projects zip archive programs and     development libraries
zipfile objects
path objects
pyzipfile objects
the pyzipfile constructor takes the same parameters as the zipfileconstructor and one additional parameter optimize
pyzipfilefile moder compressionzipstored allowzip64true optimize1   new in version 3
2 the optimize parameter
   changed in version 3
4 zip64 extensions are enabled by default
   instances have one method in addition to those of zipfile   objects   writepypathname basename filterfuncnone      search for files 
py and add the corresponding file to the      archive
      if the optimize parameter to pyzipfile was not given or      1 the corresponding file is a 
pyc file compiling if      necessary
      if the optimize parameter to pyzipfile was 0 1 or 2      only files with that optimization level see compile are      added to the archive compiling if necessary
      if pathname is a file the filename must end with 
py and      just the corresponding 
pyc file is added at the top level      no path information
  if pathname is a file that does not      end with 
py a runtimeerror will be raised
  if it is a      directory and the directory is not a package directory then      all the files 
pyc are added at the top level
  if the      directory is a package directory then all 
pyc are added      under the package name as a file path and if any subdirectories      are package directories all of these are added recursively in      sorted order
      basename is intended for internal use only
      filterfunc if given must be a function taking a single      string argument
  it will be passed each path including each      individual full file path before it is added to the archive
      if filterfunc returns a false value the path will not be      added and if it is a directory its contents will be ignored
      for example if our test files are all either in test      directories or start with the string test we can use a      filterfunc to exclude them          zf  pyzipfilemyprog
writepymyprog filterfuncnotests      the writepy method makes archives with file names like this         string
myfile      new in version 3
4 the filterfunc parameter
      changed in version 3
2 the pathname parameter accepts a      pathlike object
      changed in version 3
7 recursion sorts directory entries
zipinfo objects
instances of the zipinfo class are returned by the getinfo andinfolist methods of zipfile objects
  each object storesinformation about a single member of the zip archive
there is one classmethod to make a zipinfo instance for a filesystemfileclassmethod zipinfo
fromfilefilename arcnamenone  stricttimestampstrue   construct a zipinfo instance for a file on the filesystem in   preparation for adding it to a zip file
   filename should be the path to a file or directory on the   filesystem
   if arcname is specified it is used as the name within the   archive
 if arcname is not specified the name will be the same   as filename but with any drive letter and leading path   separators removed
   the stricttimestamps argument when set to false allows to   zip files older than 19800101 at the cost of setting the   timestamp to 19800101
 similar behavior occurs with files newer   than 21071231 the timestamp is also set to the limit
   new in version 3
6
   changed in version 3
2 the filename parameter accepts a path   like object
   new in version 3
8 the stricttimestamps keywordonly argumentinstances have the following methods and attributeszipinfo
isdir   return true if this archive member is a directory
   this uses the entrys name directories should always end with 
   new in version 3
6
filename   name of the file in the archive
datetime   the time and date of the last modification to the archive member
   this is a tuple of six values       index    value                             0      year  1980                    1      month onebased                 2      day of month onebased          3      hours zerobased                4      minutes zerobased              5      seconds zerobased             note     the zip file format does not support timestamps before 1980
compresstype   type of compression for the archive member
comment   comment for the individual archive member as a bytes object
extra   expansion field data
  the pkzip application note contains some   comments on the internal structure of the data contained in this   bytes object
createsystem   system which created zip archive
createversion   pkzip version which created zip archive
extractversion   pkzip version needed to extract archive
reserved   must be zero
flagbits   zip flag bits
volume   volume number of file header
internalattr   internal attributes
externalattr   external file attributes
headeroffset   byte offset to the file header
crc   crc32 of the uncompressed file
compresssize   size of the compressed data
filesize   size of the uncompressed file
commandline interface
the zipfile module provides a simple commandline interface tointeract with zip archives
if you want to create a new zip archive specify its name after thec option and then list the filenames that should be included    python m zipfile c monty
txtpassing a directory is also acceptable    python m zipfile c monty
zip lifeofbrian1979if you want to extract a zip archive into the specified directory usethe e option    python m zipfile e monty
zip targetdirfor a list of the files in a zip archive use the l option    python m zipfile l monty
commandline options
l zipfilelist zipfile   list files in a zipfile
 sourcen   create zipfile from source files
e zipfile outputdirextract zipfile outputdir   extract zipfile into target directory
t zipfiletest zipfile   test whether the zipfile is valid or not
decompression pitfalls
the extraction in zipfile module might fail due to some pitfallslisted below
from file itself
decompression may fail due to incorrect password  crc checksum  zipformat or unsupported compression method  decryption
file system limitations
exceeding limitations on different file systems can causedecompression failed
 such as allowable characters in the directoryentries length of the file name length of the pathname size of asingle file and number of files etc
resources limitations
the lack of memory or disk volume would lead to decompression failed
for example decompression bombs aka zip bomb apply to zipfilelibrary that can cause disk volume exhaustion
interruption
interruption during the decompression such as pressing controlc orkilling the decompression process may result in incompletedecompression of the archive
default behaviors of extraction
not knowing the default extraction behaviors can cause unexpecteddecompression results
 for example when extracting the same archivetwice it overwrites files without asking
dataclasses  data classes
source code libdataclasses
pythis module provides a decorator and functions for automaticallyadding generated special methods such as init andrepr to userdefined classes
  it was originally described inpep 557
the member variables to use in these generated methods are definedusing pep 526 type annotations
  for example this code   from dataclasses import dataclass   dataclass   class inventoryitem       class for keeping track of an item in inventory
quantityonhandwill add among other things a init that looks like   def initself name str unitprice float quantityonhand int0       self
quantityonhand  quantityonhandnote that this method is automatically added to the class it is notdirectly specified in the inventoryitem definition shown above
new in version 3
7
modulelevel decorators classes and functions
postinit processing
the generated init code will call a method namedpostinit if postinit is defined on the class
  itwill normally be called as self
postinit
 however if anyinitvar fields are defined they will also be passed topostinit in the order they were defined in the class
  if noinit method is generated then postinit will notautomatically be called
among other uses this allows for initializing field values thatdepend on one or more other fields
  for example   dataclass   class c       a float       b float       c float  fieldinitfalse       def postinitself           self
bsee the section below on initonly variables for ways to passparameters to postinit
  also see the warning about howreplace handles initfalse fields
class variables
one of two places where dataclass actually inspects the type of afield is to determine if a field is a class variable as defined inpep 526
  it does this by checking if the type of the field istyping
classvar
  if a field is a classvar it is excluded fromconsideration as a field and is ignored by the dataclass mechanisms
such classvar pseudofields are not returned by the modulelevelfields function
initonly variables
the other place where dataclass inspects a type annotation is todetermine if a field is an initonly variable
  it does this by seeingif the type of a field is of type dataclasses
initvar
  if a fieldis an initvar it is considered a pseudofield called an initonlyfield
  as it is not a true field it is not returned by the modulelevel fields function
  initonly fields are added as parametersto the generated init method and are passed to the optionalpostinit method
  they are not otherwise used by dataclasses
for example suppose a field will be initialized from a database if avalue is not provided when creating the class   dataclass   class c       i int       j int  none       database initvardatabasetype  none       def postinitself database           if self
lookupj   c  c10 databasemydatabasein this case fields will return field objects for i and jbut not for database
frozen instances
it is not possible to create truly immutable python objects
  howeverby passing frozentrue to the dataclass decorator you canemulate immutability
  in that case dataclasses will addsetattr and delattr methods to the class
  thesemethods will raise a frozeninstanceerror when invoked
there is a tiny performance penalty when using frozentrueinit cannot use simple assignment to initialize fields andmust use object
setattr
inheritance
when the dataclass is being created by the dataclass decorator itlooks through all of the classs base classes in reverse mro that isstarting at object and for each dataclass that it finds adds thefields from that base class to an ordered mapping of fields
 after allof the base class fields are added it adds its own fields to theordered mapping
  all of the generated methods will use this combinedcalculated ordered mapping of fields
  because the fields are ininsertion order derived classes override base classes
  an example   dataclass   class base       x any  15
0       y int  0   dataclass   class cbase       z int  10       x int  15the final list of fields is in order x y z
  the final typeof x is int as specified in class c
the generated init method for c will look like   def initself x int  15 y int  0 z int  10
default factory functions
if a field specifies a defaultfactory it is called with   zero arguments when a default value for the field is needed
  for   example to create a new instance of a list use      mylist list  fielddefaultfactorylist   if a field is excluded from init using initfalse and   the field also specifies defaultfactory then the default   factory function will always be called from the generated   init function
  this happens because there is no other way   to give the field an initial value
mutable default values
python stores default member variable values in class attributes
   consider this example not using dataclasses      class c          x            def addself element              self
x   note that the two instances of class c share the same class   variable x as expected
   using dataclasses if this code was valid      dataclass      class d          x list            def addself element              self
x  element   it would generate code similar to      class d          x            def initself xx              self
x   this has the same issue as the original example using class c
   that is two instances of class d that do not specify a value for   x when creating a class instance will share the same copy of x
   because dataclasses just use normal python class creation they also   share this behavior
  there is no general way for data classes to   detect this condition
  instead dataclasses will raise a   typeerror if it detects a default parameter of type list   dict or set
  this is a partial solution but it does protect   against many common errors
   using default factory functions is a way to create new instances of   mutable types as default values for fields      dataclass      class d          x list  fielddefaultfactorylist      assert d
exceptions
frozeninstanceerror   raised when an implicitly defined setattr or   delattr is called on a dataclass which was defined with   frozentrue
codeop  compile python code
source code libcodeop
pythe codeop module provides utilities upon which the python readevalprint loop can be emulated as is done in the code module
  asa result you probably dont want to use the module directly if youwant to include such a loop in your program you probably want to usethe code module instead
there are two parts to this job1
 being able to tell if a line of input completes a python   statement in short telling whether to print  or 
   next
 remembering which future statements the user has entered so   subsequent input can be compiled with these in effect
the codeop module provides a way of doing each of these things anda way of doing them both
to do just the formercodeop
compilecommandsource filenameinput symbolsingle   tries to compile source which should be a string of python code   and return a code object if source is valid python code
 in that   case the filename attribute of the code object will be filename   which defaults to input
 returns none if source is not   valid python code but is a prefix of valid python code
   if there is a problem with source an exception will be raised
   syntaxerror is raised if there is invalid python syntax and   overflowerror or valueerror if there is an invalid literal
   the symbol argument determines whether source is compiled as a   statement single the default as a sequence of statements   exec or as an expression eval
  any other value will   cause valueerror to  be raised
   note     it is possible but not likely that the parser stops parsing     with a successful outcome before reaching the end of the source     in this case trailing symbols may be ignored instead of causing     an error
  for example a backslash followed by two newlines may     be followed by arbitrary garbage
 this will be fixed once the api     for the parser is better
compile   instances of this class have call methods identical in   signature to the builtin function compile but with the   difference that if the instance compiles program text containing a   future statement the instance remembers and compiles all   subsequent program texts with the statement in force
commandcompiler   instances of this class have call methods identical in   signature to compilecommand the difference is that if the   instance compiles program text containing a future statement   the instance remembers and compiles all subsequent program texts   with the statement in force
xmlrpcclient  xmlrpc client access
source code libxmlrpcclient
warning  the xmlrpc
  if you need to parse untrusted or unauthenticated  data see xml vulnerabilities
changed in version 3
5 for https uris xmlrpc
client now performsall the necessary certificate and hostname checks by default
changed in version 3
3 the usebuiltintypes flag was added
changed in version 3
8 the headers parameter was added
both thehttp and https transports support the url syntax extension for httpbasic authentication httpuserpasshostportpath
  theuserpass portion will be base64encoded as an http authorizationheader and sent to the remote server as part of the connectionprocess when invoking an xmlrpc method
  you only need to use this ifthe remote server requires a basic authentication user and password
if an https url is provided context may be ssl
sslcontext andconfigures the ssl settings of the underlying https connection
thereturned instance is a proxy object with methods that can be used toinvoke corresponding rpc calls on the remote server
  if the remoteserver supports the introspection api the proxy can also be used toquery the remote server for the methods it supports servicediscovery and fetch other serverassociated metadata
types that areconformable e
 that can be marshalled through xml include thefollowing and except where noted they are unmarshalled as the samepython type xmlrpc type            python type                                              boolean               bool                                                   int i1 i2      int in range from 2147483648 to 2147483647
 values    i4 i8 or           get the int tag
                                     biginteger                                                                     double or float     float
  values get the double tag
                 string                str                                                    array                 list or tuple containing conformable elements
                               arrays are returned as lists
                          struct                dict
iso8601      datetime or datetime
 returned type                                 depends on values of usebuiltintypes and                                     usedatetime flags
                                    base64                binary bytes or bytearray
  returned type                                 depends on the value of the usebuiltintypes flag
    nil                   the none constant
  passing is allowed only if                                 allownone is true
                                    bigdecimal            decimal
  returned type only
                 this is the full set of data types supported by xmlrpc
changed in version 3
5 added the context argument
changed in version 3
6 added support of type tags with prefixes e
see also  xmlrpc howto     a good description of xmlrpc operation and client software in     several languages
serverproxy objects
changed in version 3
5 instances of serverproxy support thecontext manager protocol for closing the underlying transport
datetime objects
binary objects
fault objects
protocolerror objects
multicall objects
convenience functions
   changed in version 3
3 the usebuiltintypes flag was added
example of client usage
example of client and server usage
 footnotes 1 this approach has been first presented in a discussion on    xmlrpc
smtplib  smtp protocol client
   changed in version 3
3 support for the with statement was added
   changed in version 3
3 sourceaddress argument was added
   new in version 3
5 the smtputf8 extension rfc 6531 is now   supported
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socketclass smtplib
   changed in version 3
3 context was added
   changed in version 3
3 sourceaddress argument was added
   changed in version 3
4 the class now supports hostname check with   ssl
   deprecated since version 3
6 keyfile and certfile are   deprecated in favor of context
 please use   ssl
loadcertchain instead or let   ssl
createdefaultcontext select the systems trusted ca   certificates for you
   changed in version 3
9 if the timeout parameter is set to be   zero it will raise a valueerror to prevent the creation of a   nonblocking socketlmtphost portlmtpport localhostnamenonesourceaddressnone timeout   the lmtp protocol which is very similar to esmtp is heavily based   on the standard smtp client
   changed in version 3
9 the optional timeout parameter was added
   changed in version 3
4 smtpexception became subclass of oserrorexception smtplib
   new in version 3
5
see also  rfc 821  simple mail transfer protocol     protocol definition for smtp
smtp objects
   changed in version 3
5 added debuglevel 2
   note     many sites disable smtp vrfy in order to foil spammers
   changed in version 3
5 smtpnotsupportederror may be raised and   the initialresponseok parameter was added
   new in version 3
5
   deprecated since version 3
6 keyfile and certfile are   deprecated in favor of context
 please use   ssl
loadcertchain instead or let   ssl
createdefaultcontext select the systems trusted ca   certificates for you
   changed in version 3
3 context was added
   changed in version 3
4 the method now supports hostname check with   sslcontext
   changed in version 3
5 the error raised for lack of starttls   support is now the smtpnotsupportederror subclass instead of the   base smtpexception
   note     the fromaddr and toaddrs parameters are used to construct     the message envelope used by the transport agents
   changed in version 3
2 msg may be a byte string
   changed in version 3
5 smtputf8 support added and   smtpnotsupportederror may be raised if smtputf8 is specified   but the server does not support it
   new in version 3
2
   new in version 3
5 support for internationalized addresses   smtputf8
smtp example
quitnote  in general you will want to use the email packages features to  construct an email message which you can then send via  sendmessage see email examples
os  miscellaneous operating system interfaces
file names command line arguments and environment variables
in python file names command line arguments and environmentvariables are represented using the string type
 on some systemsdecoding these strings to and from bytes is necessary before passingthem to the operating system
 python uses the file system encoding toperform this conversion see sys
getfilesystemencoding
changed in version 3
1 on some systems conversion using the filesystem encoding may fail
 in this case python uses thesurrogateescape encoding error handler which means that undecodablebytes are replaced by a unicode character udcxx on decoding andthese are again translated to the original byte on encoding
the file system encoding must guarantee to successfully decode allbytes below 128
 if the file system encoding fails to provide thisguarantee api functions may raise unicodeerrors
process parameters
file object creation
these functions create new file objects
  see also open foropening file descriptors
os
fdopenfd args kwargs   return an open file object connected to the file descriptor fd
   this is an alias of the open builtin function and accepts the   same arguments
 the only difference is that the first argument of   fdopen must always be an integer
file descriptor operations
querying the size of a terminal
new in version 3
3
getterminalsizefdstdoutfileno   return the size of the terminal window as columns lines tuple   of type terminalsize
   the optional argument fd default stdoutfileno or standard   output specifies which file descriptor should be queried
   if the file descriptor is not connected to a terminal an oserror   is raised
getterminalsize is the highlevel function which   should normally be used os
getterminalsize is the lowlevel   implementation
   availability unix windows
terminalsize   a subclass of tuple holding columns lines of the terminal   window size
   columns      width of the terminal window in characters
   lines      height of the terminal window in characters
inheritance of file descriptors
new in version 3
4
a file descriptor has an inheritable flag which indicates if thefile descriptor can be inherited by child processes
  since python3
4 file descriptors created by python are noninheritable bydefault
on unix noninheritable file descriptors are closed in childprocesses at the execution of a new program other file descriptorsare inherited
on windows noninheritable handles and file descriptors are closed inchild processes except for standard streams file descriptors 0 1and 2 stdin stdout and stderr which are always inherited
  usingspawn functions all inheritable handles and all inheritable filedescriptors are inherited
 using the subprocess module all filedescriptors except standard streams are closed and inheritablehandles are only inherited if the closefds parameter is false
getinheritablefd   get the inheritable flag of the specified file descriptor a   boolean
setinheritablefd inheritable   set the inheritable flag of the specified file descriptor
gethandleinheritablehandle   get the inheritable flag of the specified handle a boolean
   availability windows
sethandleinheritablehandle inheritable   set the inheritable flag of the specified handle
   availability windows
files and directories
linux extended attributes
process management
interface to the scheduler
these functions control how a process is allocated cpu time by theoperating system
 they are only available on some unix platforms
 formore detailed information consult your unix manpages
new in version 3
3
the following scheduling policies are exposed if they are supported bythe operating system
schedother   the default scheduling policy
schedbatch   scheduling policy for cpuintensive processes that tries to   preserve interactivity on the rest of the computer
schedidle   scheduling policy for extremely low priority background tasks
schedsporadic   scheduling policy for sporadic server programs
schedfifo   a first in first out scheduling policy
schedrr   a roundrobin scheduling policy
schedresetonfork   this flag can be ored with any other scheduling policy
 when a   process with this flag set forks its childs scheduling policy and   priority are reset to the default
schedparamschedpriority   this class represents tunable scheduling parameters used in   schedsetparam schedsetscheduler and schedgetparam
   it is immutable
   at the moment there is only one possible parameter   schedpriority      the scheduling priority for a scheduling policy
schedgetpriorityminpolicy   get the minimum priority value for policy
 policy is one of the   scheduling policy constants above
schedgetprioritymaxpolicy   get the maximum priority value for policy
 policy is one of the   scheduling policy constants above
schedsetschedulerpid policy param   set the scheduling policy for the process with pid pid
 a pid   of 0 means the calling process
 policy is one of the scheduling   policy constants above
 param is a schedparam instance
schedgetschedulerpid   return the scheduling policy for the process with pid pid
 a   pid of 0 means the calling process
 the result is one of the   scheduling policy constants above
schedsetparampid param   set a scheduling parameters for the process with pid pid
 a pid   of 0 means the calling process
 param is a schedparam   instance
schedgetparampid   return the scheduling parameters as a schedparam instance for   the process with pid pid
 a pid of 0 means the calling process
schedrrgetintervalpid   return the roundrobin quantum in seconds for the process with pid   pid
 a pid of 0 means the calling process
schedyield   voluntarily relinquish the cpu
schedsetaffinitypid mask   restrict the process with pid pid or the current process if   zero to a set of cpus
  mask is an iterable of integers   representing the set of cpus to which the process should be   restricted
schedgetaffinitypid   return the set of cpus the process with pid pid or the current   process if zero is restricted to
miscellaneous system information
random numbers
getrandomsize flags0   get up to size random bytes
 the function can return less bytes   than requested
   these bytes can be used to seed userspace random number generators   or for cryptographic purposes
   getrandom relies on entropy gathered from device drivers and   other sources of environmental noise
 unnecessarily reading large   quantities of data will have a negative impact on  other users  of   the devrandom and devurandom devices
   the flags argument is a bit mask that can contain zero or more of   the following values ored together os
grndrandom and   grndnonblock
   see also the linux getrandom manual page
   availability linux 3
17 and newer
   new in version 3
6
urandomsize   return a string of size random bytes suitable for cryptographic   use
   this function returns random bytes from an osspecific randomness   source
  the returned data should be unpredictable enough for   cryptographic applications though its exact quality depends on the   os implementation
   on linux if the getrandom syscall is available it is used in   blocking mode block until the system urandom entropy pool is   initialized 128 bits of entropy are collected by the kernel
 see   the pep 524 for the rationale
 on linux the getrandom   function can be used to get random bytes in nonblocking mode   using the grndnonblock flag or to poll until the system   urandom entropy pool is initialized
   on a unixlike system random bytes are read from the   devurandom device
 if the devurandom device is not   available or not readable the notimplementederror exception is   raised
   on windows it will use cryptgenrandom
   see also     the secrets module provides higher level functions
 for an     easytouse interface to the random number generator provided by     your platform please see random
   changed in version 3
0 on linux getrandom is now used in   blocking mode to increase the security
   changed in version 3
2 on linux if the getrandom syscall   blocks the urandom entropy pool is not initialized yet fall back   on reading devurandom
   changed in version 3
5 on linux 3
17 and newer the getrandom   syscall is now used when available
  on openbsd 5
6 and newer the   c getentropy function is now used
 these functions avoid the   usage of an internal file descriptor
grndnonblock   by  default when reading from devrandom getrandom blocks   if no random bytes are available and when reading from   devurandom it blocks if the entropy pool has not yet been   initialized
   if the grndnonblock flag is set then getrandom does not   block in these cases but instead immediately raises   blockingioerror
   new in version 3
6
grndrandom   if  this  bit  is  set  then  random bytes are drawn from the   devrandom pool instead of the devurandom pool
   new in version 3
6
emailerrors exception and defect classes
emailgenerator generating mime documents
   new in version 3
2
   changed in version 3
3 added the policy keyword
   changed in version 3
6 the default behavior of the manglefrom   and maxheaderlen parameters is to follow the policy
   changed in version 3
3 added the policy keyword
   changed in version 3
6 the default behavior of the manglefrom   and maxheaderlen parameters is to follow the policy
      changed in version 3
2 added support for reencoding 8bit      message bodies and the linesep argument
 footnotes 1 this statement assumes that you use the appropriate setting for    unixfrom and that there are no policy settings calling for    automatic adjustments for example refoldsource must be    none which is not the default
turtle  turtle graphics
source code libturtle
introduction
overview of available turtle and screen methods
turtle methods
turtle motion   move and draw         forward  fd         backward  bk  back         right  rt         left  lt         goto  setpos  setposition         setx         sety         setheading  seth         home         circle         dot         stamp         clearstamp         clearstamps         undo         speed   tell turtles state         position  pos         towards         xcor         ycor         heading         distance   setting and measurement         degrees         radianspen control   drawing state         pendown  pd  down         penup  pu  up         pensize  width         pen         isdown   color control         color         pencolor         fillcolor   filling         filling         beginfill         endfill   more drawing control         reset         clear         writeturtle state   visibility         showturtle  st         hideturtle  ht         isvisible   appearance         shape         resizemode         shapesize  turtlesize         shearfactor         settiltangle         tiltangle         tilt         shapetransform         getshapepolyusing events      onclick      onrelease      ondragspecial turtle methods      beginpoly      endpoly      getpoly      clone      getturtle  getpen      getscreen      setundobuffer      undobufferentries
methods of turtlescreenscreen
window control      bgcolor      bgpic      clear  clearscreen      reset  resetscreen      screensize      setworldcoordinatesanimation control      delay      tracer      updateusing screen events      listen      onkey  onkeyrelease      onkeypress      onclick  onscreenclick      ontimer      mainloop  donesettings and special methods      mode      colormode      getcanvas      getshapes      registershape  addshape      turtles      windowheight      windowwidthinput methods      textinput      numinputmethods specific to screen      bye      exitonclick      setup      title
methods of rawturtleturtle and corresponding functions
most of the examples in this section refer to a turtle instance calledturtle
turtle motion
tell turtles state
pos   return the turtles current location xy as a vec2d vector
towardsx ynone   parameters       x  a number or a pairvector of numbers or a turtle        instance       y  a number if x is a number else none   return the angle between the line from turtle position to position   specified by xy the vector or the other turtle
  this depends   on the turtles start orientation which depends on the mode    standardworld or logo
xcor   return the turtles x coordinate
ycor   return the turtles y coordinate
heading   return the turtles current heading value depends on the turtle   mode see mode
distancex ynone   parameters       x  a number or a pairvector of numbers or a turtle        instance       y  a number if x is a number else none   return the distance from the turtle to xy the given vector or   the given other turtle in turtle step units
settings for measurement
pen control
drawing stateturtle
down   pull the pen down  drawing when moving
up   pull the pen up  no drawing when moving
widthwidthnone   parameters      width  a positive number   set the line thickness to width or return it
  if resizemode is   set to auto and turtleshape is a polygon that polygon is drawn   with the same line thickness
  if no argument is given the current   pensize is returned
penpennone pendict   parameters       pen  a dictionary with some or all of the below listed        keys       pendict  one or more keywordarguments with the below        listed keys as keywords   return or set the pens attributes in a pendictionary with the   following keyvalue pairs    shown truefalse    pendown truefalse    pencolor colorstring or colortuple    fillcolor colorstring or colortuple    pensize positive number    speed number in range 0
10    resizemode auto or user or noresize    stretchfactor positive number positive number    outline positive number    tilt number   this dictionary can be used as argument for a subsequent call to   pen to restore the former penstate
  moreover one or more of   these attributes can be provided as keywordarguments
  this can be   used to set several pen attributes in one statement
isdown   return true if pen is down false if its up
isdown      truecolor controlturtle
pencolorargs   return or set the pencolor
   four input formats are allowed   pencolor      return the current pencolor as color specification string or as      a tuple see example
  may be used as input to another      colorpencolorfillcolor call
   pencolorcolorstring      set pencolor to colorstring which is a tk color specification      string such as red yellow or 33cc8c
   pencolorr g b      set pencolor to the rgb color represented by the tuple of r      g and b
  each of r g and b must be in the range      0
colormode where colormode is either 1
0 or 255 see      colormode
   pencolorr g b         set pencolor to the rgb color represented by r g and         b
  each of r g and b must be in the range         0
      if turtleshape is a polygon the outline of that polygon is      drawn with the newly set pencolor
fillcolorargs   return or set the fillcolor
   four input formats are allowed   fillcolor      return the current fillcolor as color specification string      possibly in tuple format see example
  may be used as input to      another colorpencolorfillcolor call
   fillcolorcolorstring      set fillcolor to colorstring which is a tk color      specification string such as red yellow or      33cc8c
   fillcolorr g b      set fillcolor to the rgb color represented by the tuple of r      g and b
  each of r g and b must be in the range      0
colormode where colormode is either 1
0 or 255 see      colormode
   fillcolorr g b         set fillcolor to the rgb color represented by r g and         b
  each of r g and b must be in the range         0
      if turtleshape is a polygon the interior of that polygon is      drawn with the newly set fillcolor
colorargs   return or set pencolor and fillcolor
   several input formats are allowed
  they use 0 to 3 arguments as   follows   color      return the current pencolor and the current fillcolor as a pair      of color specification strings or tuples as returned by      pencolor and fillcolor
   colorcolorstring colorrgb colorrgb      inputs as in pencolor set both fillcolor and pencolor to      the given value
   colorcolorstring1 colorstring2 colorr1g1b1   r2g2b2         equivalent to pencolorcolorstring1 and         fillcolorcolorstring2 and analogously if the other input         format is used
      if turtleshape is a polygon outline and interior of that      polygon is drawn with the newly set colors
0see also screen method colormode
fillingturtle
filling   return fillstate true if filling false else
beginfill   to be called just before drawing a shape to be filled
endfill   fill the shape drawn after the last call to beginfill
   whether or not overlap regions for selfintersecting polygons or   multiple shapes are filled depends on the operating system   graphics type of overlap and number of overlaps
  for example   the turtle star above may be either all yellow or have some white   regions
endfillmore drawing controlturtle
reset   delete the turtles drawings from the screen recenter the turtle   and set variables to the default values
clear   delete the turtles drawings from the screen
  do not move turtle
   state and position of the turtle as well as drawings of other   turtles are not affected
writearg movefalse alignleft fontarial 8 normal   parameters       arg  object to be written to the turtlescreen       move  truefalse       align  one of the strings left center or right       font  a triple fontname fontsize fonttype   write text  the string representation of arg  at the current   turtle position according to align left center or right   and with the given font
  if move is true the pen is moved to   the bottomright corner of the text
  by default move is   false
turtle state
using events
special turtle methods
beginpoly   start recording the vertices of a polygon
  current turtle position   is first vertex of polygon
endpoly   stop recording the vertices of a polygon
  current turtle position   is last vertex of polygon
  this will be connected with the first   vertex
getpoly   return the last recorded polygon
clone   create and return a clone of the turtle with same position heading   and turtle properties
getpen   return the turtle object itself
  only reasonable use as a   function to return the anonymous turtle       pet  getturtle       pet
getscreen   return the turtlescreen object the turtle is drawing on
   turtlescreen methods can then be called for that object
setundobuffersize   parameters      size  an integer or none   set or disable undobuffer
  if size is an integer an empty   undobuffer of given size is installed
  size gives the maximum   number of turtle actions that can be undone by the undo   methodfunction
  if size is none the undobuffer is disabled
undobufferentries   return number of entries in the undobuffer
compound shapes
to use compound turtle shapes which consist of several polygons ofdifferent color you must use the helper class shape explicitly asdescribed below1
 create an empty shape object of type compound
 add as many components to this object as desired using the   addcomponent method
   for example       s  shapecompound       poly1  00105010105       s
 now add the shape to the screens shapelist and use it       registershapemyshape s       shapemyshapenote  the shape class is used internally by the registershape  method in different ways
  the application programmer has to deal  with the shape class only when using compound shapes like shown  above
methods of turtlescreenscreen and corresponding functions
most of the examples in this section refer to a turtlescreen instancecalled screen
window control
animation control
delaydelaynone   parameters      delay  positive integer   set or return the drawing delay in milliseconds
  this is   approximately the time interval between two consecutive canvas   updates
  the longer the drawing delay the slower the animation
   optional argument       screen
tracernnone delaynone   parameters       n  nonnegative integer       delay  nonnegative integer   turn turtle animation onoff and set delay for update drawings
  if   n is given only each nth regular screen update is really   performed
  can be used to accelerate the drawing of complex   graphics
  when called without arguments returns the currently   stored value of n
 second argument sets delay value see   delay
update   perform a turtlescreen update
 to be used when tracer is turned   off
see also the rawturtleturtle method speed
using screen events
input methods
textinputtitle prompt   parameters       title  string       prompt  string   pop up a dialog window for input of a string
 parameter title is   the title of the dialog window prompt is a text mostly describing   what information to input
 return the string input
 if the dialog   is canceled return none
       screen
numinputtitle prompt defaultnone minvalnone maxvalnone   parameters       title  string       prompt  string       default  number optional       minval  number optional       maxval  number optional   pop up a dialog window for input of a number
 title is the title of   the dialog window prompt is a text mostly describing what   numerical information to input
 default default value minval   minimum value for input maxval maximum value for input the number   input must be in the range minval 
 maxval if these are given
 if   not a hint is issued and the dialog remains open for correction
   return the number input
 if the dialog is canceled  return none
       screen
settings and special methods
modemodenone   parameters      mode  one of the strings standard logo or world   set turtle mode standard logo or world and perform reset
   if mode is not given current mode is returned
   mode standard is compatible with old turtle
  mode logo is   compatible with most logo turtle graphics
  mode world uses user   defined world coordinates
 attention in this mode angles   appear distorted if xy unitratio doesnt equal 1
       mode          initial turtle heading     positive angles            standard    to the right east        counterclockwise           logo        upward    north          clockwise                     modelogo    resets turtle heading to north       mode      logoturtle
colormodecmodenone   parameters      cmode  one of the values 1
0 or 255   return the colormode or set it to 1
0 or 255
  subsequently r   g b values of color triples have to be in the range   0
cmode
getcanvas   return the canvas of this turtlescreen
  useful for insiders who   know what to do with a tkinter canvas
getshapes   return a list of names of all currently available turtle shapes
addshapename shapenone   there are three different ways to call this function   1
 name is the name of a giffile and shape is none install      the corresponding image shape
          screen
gif      note        image shapes do not rotate when turning the turtle so they        do not display the heading of the turtle   2
 name is an arbitrary string and shape is a tuple of pairs of      coordinates install the corresponding polygon shape
 name is an arbitrary string and shape is a compound shape      object install the corresponding compound shape
   add a turtle shape to turtlescreens shapelist
  only thusly   registered shapes can be used by issuing the command   shapeshapename
turtles   return the list of turtles on the screen
windowheight   return the height of the turtle window
       screen
windowwidth   return the width of the turtle window
       screen
methods specific to screen not inherited from turtlescreen
bye   shut the turtlegraphics window
exitonclick   bind bye method to mouse clicks on the screen
   if the value usingidle in the configuration dictionary is   false default value also enter mainloop
  remark if idle with   the n switch no subprocess is used this value should be set   to true in turtle
cfg
  in this case idles own mainloop is   active also for the client script
setupwidthcfgwidth heightcfgheight startxcfgleftright startycfgtopbottom   set the size and position of the main window
  default values of   arguments are stored in the configuration dictionary and can be   changed via a turtle
cfg file
   parameters       width  if an integer a size in pixels if a float a        fraction of the screen default is 50 of screen       height  if an integer the height in pixels if a float        a fraction of the screen default is 75 of screen       startx  if positive starting position in pixels from        the left edge of the screen if negative from the right edge        if none center window horizontally       starty  if positive starting position in pixels from        the top edge of the screen if negative from the bottom edge        if none center window vertically       screen
titletitlestring   parameters      titlestring  a string that is shown in the titlebar of the      turtle graphics window   set title of turtle window to titlestring
public classes
help and configuration
how to use help
the public methods of the screen and turtle classes are documentedextensively via docstrings
  so these can be used as onlinehelp viathe python help facilities when using idle tooltips show the signatures and first lines of the  docstrings of typed in functionmethod calls
 calling help on methods or functions displays the docstrings      helpscreen
penup the docstrings of the functions which are derived from methods have  a modified form      helpbgcolor     help on function bgcolor in module turtle     bgcolorargs         set or return backgroundcolor of the turtlescreen
         aliases penup  pu  up         no argument         example          penupthese modified docstrings are created automatically together with thefunction definitions that are derived from the methods at import time
translation of docstrings into different languages
how to configure screen and turtles
turtledemo  demo scripts
the turtledemo package includes a set of demo scripts
  thesescripts can be run and viewed using the supplied demo viewer asfollows   python m turtledemoalternatively you can run the demo scripts individually
  forexample   python m turtledemo
bytedesignthe turtledemo package directory contains a demo viewer main
py which can be used to view the sourcecode  of the scripts and run them at the same time
 multiple scripts demonstrating different features of the turtle  module
  examples can be accessed via the examples menu
  they can  also be run standalone
 a turtle
cfg file which serves as an example of how to write and  use such files
the demo scripts are name              description                     features                 bytedesign        complex classical turtle        tracer delay                         graphics pattern                update               chaos             graphs verhulst dynamics       world coordinates                          shows that computers                                                      computations can generate                                                  results sometimes against the                                              common sense expectations                                clock             analog clock showing time of    turtles as clocks                         your computer                   hands ontimer           colormixer        experiment with r g b         ondrag               forest            3 breadthfirst trees           randomization            fractalcurves     hilbert  koch curves           recursion                lindenmayer       ethnomathematics indian        lsystem                                   kolams                                                  minimalhanoi     towers of hanoi                 rectangular turtles as                                                     hanoi discs shape                                                        shapesize               nim               play the classical nim game     turtles as nimsticks                      with three heaps of sticks      event driven mouse                       against the computer
           keyboard                paint             super minimalistic drawing      onclick                                program                                                  peace             elementary                      turtle appearance and                                                     animation                penrose           aperiodic tiling with kites     stamp                                  and darts                                                planetandmoon   simulation of gravitational     compound shapes                           system                          vec2d                  rounddance       dancing turtles rotating        compound shapes clone                     pairwise in opposite direction  shapesize tilt                                                           getshapepoly update    sortinganimate   visual demonstration of         simple alignment                          different sorting methods       randomization            tree              a graphical breadth first     clone                                  tree using generators                                  twocanvases      simple design                   turtles on two canvases  wikipedia         a pattern from the wikipedia    clone undo                        article on turtle graphics                               yinyang           another elementary example      circle              have fun
changes since python
 the methods turtle
windowwidth and  turtle
windowheight have been eliminated
 methods with these  names and functionality are now available only as methods of  screen
 the functions derived from these remain available
 in  fact already in python 2
6 these methods were merely duplications of  the corresponding turtlescreenscreenmethods
 the method turtle
fill has been eliminated
 the behaviour of  beginfill and endfill have changed slightly now  every  fillingprocess must be completed with an endfill call
 a method turtle
filling has been added
 it returns a boolean  value true if a filling process is under way false otherwise
  this behaviour corresponds to a fill call without arguments in  python 2
6
changes since python
 the methods turtle
shapetransform and  turtle
getshapepoly have been added
 thus the full range of  regular linear transforms is now available for transforming turtle  shapes
 turtle
tiltangle has been enhanced in functionality it  now can be used to get or set the tiltangle
 turtle
settiltangle  has been deprecated
 the method screen
onkeypress has been added as a complement to  screen
onkey which in fact binds actions to the keyrelease  event
 accordingly the latter has got an alias  screen
 the method  screen
mainloop has been added
 so when working only  with screen and turtle objects one must not additionally import  mainloop anymore
 two input methods has been added screen
textinput and  screen
 these popup input dialogs and return strings  and numbers respectively
 two example scripts tdemonim
py and tdemorounddance
py have  been added to the libturtledemo directory
urllibrequest  extensible library for opening urls
request objects
fullurl   the original url passed to the constructor
   changed in version 3
4
originreqhost   the original host for the request without port
selector   the uri path
  if the request uses a proxy then selector will be   the full url that is passed to the proxy
   changed in version 3
4 changing value of request
data now   deletes contentlength header if it was previously set or   calculated
unverifiable   boolean indicates whether the request is unverifiable as defined   by rfc 2965
   new in version 3
3
   changed in version 3
4 a default value can now be set in   subclasses previously it could only be set via the constructor   argument
   changed in version 3
3 getmethod now looks at the value of   request
addunredirectedheaderkey header   add a header that will not be added to a redirected request
   new in version 3
4
getfullurl   return the url given in the constructor
   changed in version 3
4
   returns request
changed in version 3
4 the request methods adddata hasdatagetdata gettype gethost getselector getoriginreqhost andisunverifiable that were deprecated since 3
openerdirector objects
openerdirector instances have the following methodsopenerdirector
    protocolopen  signal that the handler knows how to open     protocol urls
     see basehandler
protocolopen for more information
     see basehandler
httperrornnn for more information
    protocolerror  signal that the handler knows how to     handle errors from nonhttp protocol
    protocolrequest  signal that the handler knows how to     preprocess protocol requests
     see basehandler
protocolrequest for more information
    protocolresponse  signal that the handler knows how to     postprocess protocol responses
     see basehandler
protocolresponse for more information
basehandler objects
note  the convention has been adopted that subclasses defining  protocolrequest or protocolresponse methods are named  processor all others are named handler
httpredirecthandler objects
note  some http redirections require action from this modules client  code
   note     the default implementation of this method does not strictly     follow rfc 2616 which says that 301 and 302 responses to     post requests must not be automatically redirected without     confirmation by the user
httpcookieprocessor objects
proxyhandler objects
httppasswordmgr objects
httppasswordmgrwithpriorauth objects
abstractbasicauthhandler objects
httpbasicauthhandler objects
proxybasicauthhandler objects
abstractdigestauthhandler objects
httpdigestauthhandler objects
proxydigestauthhandler objects
httphandler objects
httpshandler objects
filehandler objects
   changed in version 3
2 this method is applicable only for local   hostnames
  when a remote hostname is given an urlerror is   raised
datahandler objects
ftphandler objects
cacheftphandler objects
unknownhandler objects
httperrorprocessor objects
examples
in addition to the examples below more examples are given in howtofetch internet resources using the urllib package
legacy interface
urlopenerproxiesnone x509   deprecated since version 3
3
   deprecated since version 3
3
   note     according to the letter of rfc 2616 301 and 302 responses to     post requests must not be automatically redirected without     confirmation by the user
   note     when performing basic authentication a fancyurlopener instance     calls its promptuserpasswd method
urllibrequest restrictions
  changed in version 3
4 added support for data urls
hmac  keyedhashing for message authentication
chunk  read iff chunked data
source code libchunk
pythis module provides an interface for reading files that use ea iff 85chunks
 1  this format is used in at least the audio interchangefile format aiffaiffc and the real media file format rmff
  thewave audio file format is closely related and can also be read usingthis module
a chunk has the following structure offset     length    contents                         0          4         chunk id                         4          4         size of chunk in bigendian                           byte order not including the                         header                           8          n       data bytes where n is the                          size given in the preceding                           field                            8  n    0 or 1    pad byte needed if n is odd                         and chunk alignment is used     the id is a 4byte string which identifies the type of chunk
the size field a 32bit value encoded using bigendian byte ordergives the size of the chunk data not including the 8byte header
usually an ifftype file consists of one or more chunks
  the proposedusage of the chunk class defined here is to instantiate an instanceat the start of each chunk and read from the instance until it reachesthe end after which a new instance can be instantiated
 at the end ofthe file creating a new instance will fail with an eoferrorexception
chunkfile aligntrue bigendiantrue inclheaderfalse   class which represents a chunk
  the file argument is expected to   be a filelike object
  an instance of this class is specifically   allowed
  the only method that is needed is read
  if the   methods seek and tell are present and dont raise an   exception they are also used
 if these methods are present and   raise an exception they are expected to not have altered the   object
  if the optional argument align is true chunks are   assumed to be aligned on 2byte boundaries
  if align is false   no alignment is assumed
  the default value is true
  if the   optional argument bigendian is false the chunk size is assumed   to be in littleendian order
 this is needed for wave audio files
   the default value is true
  if the optional argument inclheader   is true the size given in the chunk header includes the size of   the header
  the default value is false
   a chunk object supports the following methods   getname      returns the name id of the chunk
  this is the first 4 bytes      of the chunk
   getsize      returns the size of the chunk
   close      close and skip to the end of the chunk
  this does not close the      underlying file
   the remaining methods will raise oserror if called after the   close method has been called
  before python 3
3 they used to   raise ioerror now an alias of oserror
   isatty      returns false
   seekpos whence0      set the chunks current position
  the whence argument is      optional and defaults to 0 absolute file positioning other      values are 1 seek relative to the current position and 2      seek relative to the files end
  there is no return value
 if      the underlying file does not allow seek only forward seeks are      allowed
   tell      return the current position into the chunk
   readsize1      read at most size bytes from the chunk less if the read hits      the end of the chunk before obtaining size bytes
  if the      size argument is negative or omitted read all data until the      end of the chunk
  an empty bytes object is returned when the      end of the chunk is encountered immediately
   skip      skip to the end of the chunk
  all further calls to read for      the chunk will return b
  if you are not interested in the      contents of the chunk this method should be called so that the      file points to the start of the next chunk
 footnotes 1 ea iff 85 standard for interchange format files jerry morrison    electronic arts january 1985
pyclbr  python module browser support
source code libpyclbr
pythe pyclbr module provides limited information about the functionsclasses and methods defined in a pythoncoded module
  theinformation is sufficient to implement a module browser
  theinformation is extracted from the python source code rather than byimporting the module so this module is safe to use with untrustedcode
 this restriction makes it impossible to use this module withmodules not implemented in python including all standard and optionalextension modules
readmodulemodule pathnone   return a dictionary mapping modulelevel class names to class   descriptors
  if possible descriptors for imported base classes   are included
  parameter module is a string with the name of the   module to read it may be the name of a module within a package
   if given path is a sequence of directory paths prepended to   sys
path which is used to locate the module source code
   this function is the original interface and is only kept for back   compatibility
  it returns a filtered version of the following
readmoduleexmodule pathnone   return a dictionarybased tree containing a function or class   descriptors for each function and class defined in the module with   a def or class statement
  the returned dictionary maps module   level function and class names to their descriptors
  nested   objects are entered into the children dictionary of their parent
   as with readmodule module names the module to be read and path   is prepended to sys
  if the module being read is a package   the returned dictionary has a key path whose value is a   list containing the package search path
new in version 3
7 descriptors for nested definitions
  they areaccessed through the new children attribute
  each has a new parentattribute
the descriptors returned by these functions are instances of functionand class classes
  users are not expected to create instances ofthese classes
function objects
class function instances describe functions defined by defstatements
  they have the following attributesfunction
file   name of the file in which the function is defined
module   the name of the module defining the function described
name   the name of the function
lineno   the line number in the file where the definition starts
parent   for toplevel functions none
  for nested functions the parent
   new in version 3
7
children   a dictionary mapping names to descriptors for nested functions and   classes
   new in version 3
7
class objects
class class instances describe classes defined by class statements
they have the same attributes as functions and two more
file   name of the file in which the class is defined
module   the name of the module defining the class described
name   the name of the class
lineno   the line number in the file where the definition starts
parent   for toplevel classes none
  for nested classes the parent
   new in version 3
7
children   a dictionary mapping names to descriptors for nested functions and   classes
   new in version 3
7
super   a list of class objects which describe the immediate base classes   of the class being described
  classes which are named as   superclasses but which are not discoverable by readmoduleex   are listed as a string with the class name instead of as class   objects
methods   a dictionary mapping method names to line numbers
  this can be   derived from the newer children dictionary but remains for back   compatibility
pydoc  documentation generator and online help system
ensurepip  bootstrapping the pip installer
new in version 3
4
note  this module does not access the internet
see also  installing python modules     the end user guide for installing python packages  pep 453 explicit bootstrapping of pip in python installations     the original rationale and specification for this module
command line interface
module api
   note     the bootstrapping process has side effects on both sys
   note     the bootstrapping process may install additional modules required     by pip but other software should not assume those dependencies     will always be present by default as the dependencies may be     removed in a future version of pip
xmldompulldom  support for building partial dom trees
warning  the xml
  if you need to parse untrusted or unauthenticated  data see xml vulnerabilities
changed in version 3
1 the sax parser no longer processes generalexternal entities by default to increase security by default
 toenable processing of external entities pass a custom parser instancein   from xml
setfeaturefeatureexternalges true   parsefilename parserparserexample   from xml
domeventstream objects
domeventstreamstream parser bufsize   deprecated since version 3
8 support for sequence protocol is   deprecated
types  dynamic type creation and names for builtin types
source code libtypes
pythis module defines utility functions to assist in dynamic creation ofnew types
it also defines names for some object types that are used by thestandard python interpreter but not exposed as builtins like int orstr are
finally it provides some additional typerelated utility classes andfunctions that are not fundamental enough to be builtins
dynamic type creation
newclassname bases kwdsnone execbodynone   creates a class object dynamically using the appropriate metaclass
   the first three arguments are the components that make up a class   definition header the class name the base classes in order the   keyword arguments such as metaclass
   the execbody argument is a callback that is used to populate the   freshly created class namespace
 it should accept the class   namespace as its sole argument and update the namespace directly   with the class contents
 if no callback is provided it has the   same effect as passing in lambda ns ns
   new in version 3
3
prepareclassname bases kwdsnone   calculates the appropriate metaclass and creates the class   namespace
   the arguments are the components that make up a class definition   header the class name the base classes in order and the keyword   arguments such as metaclass
   the return value is a 3tuple metaclass namespace kwds   metaclass is the appropriate metaclass namespace is the   prepared class namespace and kwds is an updated copy of the   passed in kwds argument with any metaclass entry removed
 if   no kwds argument is passed in this will be an empty dict
   new in version 3
3
   changed in version 3
6 the default value for the namespace   element of the returned tuple has changed
  now an insertionorder   preserving mapping is used when the metaclass does not have a   prepare method
see also  metaclasses     full details of the class creation process supported by these     functions  pep 3115  metaclasses in python 3000     introduced the prepare namespace hooktypes
resolvebasesbases   resolve mro entries dynamically as specified by pep 560
   this function looks for items in bases that are not instances of   type and returns a tuple where each such object that has an   mroentries method is replaced with an unpacked result of   calling this method
  if a bases item is an instance of type   or it doesnt have an mroentries method then it is included   in the return tuple unchanged
   new in version 3
7
see also  pep 560  core support for typing module and generic types
standard interpreter types
additional utility classes and functions
simplenamespace   a simple object subclass that provides attribute access to its   namespace as well as a meaningful repr
   unlike object with simplenamespace you can add and remove   attributes
  if a simplenamespace object is initialized with   keyword arguments those are directly added to the underlying   namespace
   the type is roughly equivalent to the following code      class simplenamespace          def initself  kwargs              self
dict   simplenamespace may be useful as a replacement for class ns   pass
 however for a structured record type use namedtuple   instead
   new in version 3
3
   changed in version 3
9 attribute order in the repr changed from   alphabetical to insertion like dict
dynamicclassattributefgetnone fsetnone fdelnone docnone   route attribute access on a class to getattr
   this is a descriptor used to define attributes that act   differently when accessed through an instance and through a class
   instance access remains normal but access to an attribute through   a class will be routed to the classs getattr method this is   done by raising attributeerror
   this allows one to have properties active on an instance and have   virtual attributes on the class with the same name see enum
enum   for an example
   new in version 3
4
coroutine utility functions
coroutinegenfunc   this function transforms a generator function into a coroutine   function which returns a generatorbased coroutine
 the generator   based coroutine is still a generator iterator but is also   considered to be a coroutine object and is awaitable
  however   it may not necessarily implement the await method
   if genfunc is a generator function it will be modified in   place
   if genfunc is not a generator function it will be wrapped
 if   it returns an instance of collections
generator the instance   will be wrapped in an awaitable proxy object
  all other types of   objects will be returned as is
   new in version 3
5
xmlrpc  xmlrpc server and client modules
xmlrpc is a remote procedure call method that uses xml passed viahttp as a transport
  with it a client can call methods withparameters on a remote server the server is named by a uri and getback structured data
xmlrpc is a package that collects server and client modulesimplementing xmlrpc
  the modules are xmlrpc
winreg  windows registry access
these functions expose the windows registry api to python
  instead ofusing an integer as the registry handle a handle object is used toensure that the handles are closed correctly even if the programmerneglects to explicitly close them
changed in version 3
3 several functions in this module used to raisea windowserror which is now an alias of oserror
functions
constants
hkey constants
access rights
value types
   new in version 3
6
   new in version 3
6
registry handle objects
   raises an auditing event winreg
detach with argument   key
cryptographic services
the modules described in this chapter implement various algorithms ofa cryptographic nature
  they are available at the discretion of theinstallation
 on unix systems the crypt module may also beavailable
 heres an overview hashlib  secure hashes and message digests   hash algorithms   shake variable length digests   key derivation   blake2     creating hash objects     constants     examples       simple hashing       using different digest sizes       keyed hashing       randomized hashing       personalization       tree mode     credits hmac  keyedhashing for message authentication secrets  generate secure random numbers for managing secrets   random numbers   generating tokens     how many bytes should tokens use   other functions   recipes and best practices
timeit  measure execution time of small code snippets
source code libtimeit
pythis module provides a simple way to time small bits of python code
it has both a commandline interface as well as a callable one
  itavoids a number of common traps for measuring execution times
 seealso tim peters introduction to the algorithms chapter in thepython cookbook published by oreilly
basic examples
the following example shows how the commandline interface can be usedto compare three different expressions    python3 m timeit 
2 usec per loopthis can be achieved from the python interface with    import timeit    timeit
23702679807320237a callable can also be passed from the python interface    timeit
19665591977536678note however that timeit will automatically determine the numberof repetitions only when the commandline interface is used
  in theexamples section you can find more advanced examples
python interface
the module defines three convenience functions and a public classtimeit
timeitstmtpass setuppass timerdefault timer number1000000 globalsnone   create a timer instance with the given statement setup code   and timer function and run its timeit method with number   executions
 the optional globals argument specifies a namespace   in which to execute the code
   changed in version 3
5 the optional globals parameter was added
repeatstmtpass setuppass timerdefault timer repeat5 number1000000 globalsnone   create a timer instance with the given statement setup code   and timer function and run its repeat method with the given   repeat count and number executions
  the optional globals   argument specifies a namespace in which to execute the code
   changed in version 3
5 the optional globals parameter was added
   changed in version 3
7 default value of repeat changed from 3 to   5
defaulttimer   the default timer which is always time
perfcounter
   changed in version 3
3 time
perfcounter is now the default   timer
timerstmtpass setuppass timertimer function globalsnone   class for timing execution speed of small code snippets
   the constructor takes a statement to be timed an additional   statement used for setup and a timer function
  both statements   default to pass the timer function is platformdependent see   the module doc string
 stmt and setup may also contain   multiple statements separated by  or newlines as long as they   dont contain multiline string literals
  the statement will by   default be executed within timeits namespace this behavior can be   controlled by passing a namespace to globals
   to measure the execution time of the first statement use the   timeit method
  the repeat and autorange methods are   convenience methods to call timeit multiple times
   the execution time of setup is excluded from the overall timed   execution run
   the stmt and setup parameters can also take objects that are   callable without arguments
  this will embed calls to them in a   timer function that will then be executed by timeit
  note that   the timing overhead is a little larger in this case because of the   extra function calls
   changed in version 3
5 the optional globals parameter was added
   timeitnumber1000000      time number executions of the main statement
  this executes      the setup statement once and then returns the time it takes to      execute the main statement a number of times measured in      seconds as a float
 the argument is the number of times through      the loop defaulting to one million
  the main statement the      setup statement and the timer function to be used are passed to      the constructor
      note        by default timeit temporarily turns off garbage        collection during the timing
  the advantage of this approach        is that it makes independent timings more comparable
  the        disadvantage is that gc may be an important component of the        performance of the function being measured
  if so gc can be        reenabled as the first statement in the setup string
  for        example           timeit
timeit   autorangecallbacknone      automatically determine how many times to call timeit
      this is a convenience function that calls timeit repeatedly      so that the total time  0
2 second returning the eventual      number of loops time taken for that number of loops
 it calls      timeit with increasing numbers from the sequence 1 2 5      10 20 50 
 until the time taken is at least 0
2 second
      if callback is given and is not none it will be called      after each trial with two arguments callbacknumber      timetaken
      new in version 3
6
   repeatrepeat5 number1000000      call timeit a few times
      this is a convenience function that calls the timeit      repeatedly returning a list of results
  the first argument      specifies how many times to call timeit
  the second      argument specifies the number argument for timeit
      note        its tempting to calculate mean and standard deviation from        the result vector and report these
  however this is not very        useful
 in a typical case the lowest value gives a lower        bound for how fast your machine can run the given code        snippet higher values in the result vector are typically not        caused by variability in pythons speed but by other        processes interfering with your timing accuracy
 so the        min of the result is probably the only number you should        be interested in
  after that you should look at the entire        vector and apply common sense rather than statistics
      changed in version 3
7 default value of repeat changed from 3      to 5
   printexcfilenone      helper to print a traceback from the timed code
      typical use         t  timer
printexc      the advantage over the standard traceback is that source lines      in the compiled template will be displayed
  the optional file      argument directs where the traceback is sent it defaults to      sys
stderr
commandline interface
when called as a program from the command line the following form isused   python m timeit n n r n u u s s h statement 
where the following options are understoodn n numbern   how many times to execute statementr n repeatn   how many times to repeat the timer default 5s s setups   statement to be executed once initially default passp process   measure process time not wallclock time using   time
processtime instead of time
perfcounter which is   the default   new in version 3
3
u unitu   specify a time unit for timer output can select nsec usec msec   or sec   new in version 3
5
v verbose   print raw timing results repeat for more digits precisionh help   print a short usage message and exita multiline statement may be given by specifying each line as aseparate statement argument indented lines are possible by enclosingan argument in quotes and using leading spaces
  multiple s optionsare treated similarly
if n is not given a suitable number of loops is calculated bytrying increasing numbers from the sequence 1 2 5 10 20 50 
until the total time is at least 0
2 seconds
defaulttimer measurements can be affected by other programsrunning on the same machine so the best thing to do when accuratetiming is necessary is to repeat the timing a few times and use thebest time
  the r option is good for this the default of 5repetitions is probably enough in most cases
  you can usetime
processtime to measure cpu time
note  there is a certain baseline overhead associated with executing a  pass statement
 the code here doesnt try to hide it but you should  be aware of it
  the baseline overhead can be measured by invoking  the program without arguments and it might differ between python  versions
examples
unix specific services
the modules described in this chapter provide interfaces to featuresthat are unique to the unix operating system or in some cases to someor many variants of it
  heres an overview posix  the most common posix system calls   large file support   notable module contents pwd  the password database spwd  the shadow password database grp  the group database crypt  function to check unix passwords   hashing methods   module attributes   module functions   examples termios  posix style tty control   example tty  terminal control functions pty  pseudoterminal utilities   example fcntl  the fcntl and ioctl system calls pipes  interface to shell pipelines   template objects resource  resource usage information   resource limits   resource usage nis  interface to suns nis yellow pages syslog  unix syslog library routines   examples     simple example
ssl  tlsssl wrapper for socket objects
functions constants and exceptions
socket creation
since python 3
2 and 2
9 it is recommended to use thesslcontext
wrapsocket of an sslcontext instance to wrap socketsas sslsocket objects
 the helper functionscreatedefaultcontext returns a new context with secure defaultsettings
 the old wrapsocket function is deprecated since it isboth inefficient and has no support for server name indication sniand hostname matching
client socket example with default context and ipv4ipv6 dual stack   import socket   import ssl   hostname  www
versionclient socket example with custom context and ipv4   hostname  www
versionserver socket example listening on localhost ipv4   context  ssl
context creation
a convenience function helps create sslcontext objects for commonpurposes
serverauth cafilenone capathnone cadatanone   return a new sslcontext object with default settings for the   given purpose
  the settings are chosen by the ssl module and   usually represent a higher security level than when calling the   sslcontext constructor directly
   cafile capath cadata represent optional ca certificates to   trust for certificate verification as in   sslcontext
loadverifylocations
  if all three are none   this function can choose to trust the systems default ca   certificates instead
   the settings are protocoltls opnosslv2 and opnosslv3   with high encryption cipher suites without rc4 and without   unauthenticated cipher suites
 passing serverauth as purpose   sets verifymode to certrequired and either loads ca   certificates when at least one of cafile capath or cadata   is given or uses sslcontext
loaddefaultcerts to load default   ca certificates
   when keylogfilename is supported and the environment variable   sslkeylogfile is set createdefaultcontext enables key   logging
   note     the protocol options cipher and other settings may change to     more restrictive values anytime without prior deprecation
  the     values represent a fair balance between compatibility and     security
if your application needs specific settings you should     create a sslcontext and apply the settings yourself
   note     if you find that when certain older clients or servers attempt to     connect with a sslcontext created by this function that they     get an error stating protocol or cipher suite mismatch it may     be that they only support ssl3
0 which this function excludes     using the opnosslv3
0 is widely considered to be     completely broken
 if you still wish to continue to use this     function but still allow ssl 3
0 connections you can reenable     them using        ctx  ssl
opnosslv3   new in version 3
4
   changed in version 3
4 rc4 was dropped from the default cipher   string
   changed in version 3
6 chacha20poly1305 was added to the default   cipher string
3des was dropped from the default cipher string
   changed in version 3
8 support for key logging to sslkeylogfile   was added
exceptions
sslerror   raised to signal an error from the underlying ssl implementation   currently provided by the openssl library
  this signifies some   problem in the higherlevel encryption and authentication layer   thats superimposed on the underlying network connection
  this   error is a subtype of oserror
  the error code and message of   sslerror instances are provided by the openssl library
   changed in version 3
3 sslerror used to be a subtype of   socket
error
   library      a string mnemonic designating the openssl submodule in which the      error occurred such as ssl pem or x509
  the range of      possible values depends on the openssl version
      new in version 3
3
   reason      a string mnemonic designating the reason this error occurred      for example certificateverifyfailed
  the range of possible      values depends on the openssl version
      new in version 3
3
sslzeroreturnerror   a subclass of sslerror raised when trying to read or write and   the ssl connection has been closed cleanly
  note that this doesnt   mean that the underlying transport read tcp has been closed
   new in version 3
3
sslwantreaderror   a subclass of sslerror raised by a nonblocking ssl socket when   trying to read or write data but more data needs to be received on   the underlying tcp transport before the request can be fulfilled
   new in version 3
3
sslwantwriteerror   a subclass of sslerror raised by a nonblocking ssl socket when   trying to read or write data but more data needs to be sent on the   underlying tcp transport before the request can be fulfilled
   new in version 3
3
sslsyscallerror   a subclass of sslerror raised when a system error was encountered   while trying to fulfill an operation on a ssl socket
   unfortunately there is no easy way to inspect the original errno   number
   new in version 3
3
ssleoferror   a subclass of sslerror raised when the ssl connection has been   terminated abruptly
  generally you shouldnt try to reuse the   underlying transport when this error is encountered
   new in version 3
3
sslcertverificationerror   a subclass of sslerror raised when certificate validation has   failed
   new in version 3
7
   verifycode      a numeric error number that denotes the verification error
   verifymessage      a human readable string of the verification error
certificateerror   an alias for sslcertverificationerror
   changed in version 3
7 the exception is now an alias for   sslcertverificationerror
random generation
randbytesnum   return num cryptographically strong pseudorandom bytes
 raises   an sslerror if the prng has not been seeded with enough data or   if the operation is not supported by the current rand method
   randstatus can be used to check the status of the prng and   randadd can be used to seed the prng
   for almost all applications os
urandom is preferable
   read the wikipedia article cryptographically secure pseudorandom   number generator csprng to get the requirements of a   cryptographically strong generator
   new in version 3
3
randpseudobytesnum   return bytes iscryptographic bytes are num pseudorandom   bytes iscryptographic is true if the bytes generated are   cryptographically strong
 raises an sslerror if the operation is   not supported by the current rand method
   generated pseudorandom byte sequences will be unique if they are   of sufficient length but are not necessarily unpredictable
 they   can be used for noncryptographic purposes and for certain purposes   in cryptographic protocols but usually not for key generation etc
   for almost all applications os
urandom is preferable
   new in version 3
3
   deprecated since version 3
6 openssl has deprecated   ssl
randpseudobytes use ssl
randbytes instead
randstatus   return true if the ssl pseudorandom number generator has been   seeded with enough randomness and false otherwise
  you can   use ssl
randegd and ssl
randadd to increase the   randomness of the pseudorandom number generator
randegdpath   if you are running an entropygathering daemon egd somewhere and   path is the pathname of a socket connection open to it this will   read 256 bytes of randomness from the socket and add it to the ssl   pseudorandom number generator to increase the security of   generated secret keys
  this is typically only necessary on systems   without better sources of randomness
   see httpegd
net or httpprngd
net   for sources of entropygathering daemons
   availability not available with libressl and openssl  1
0
randaddbytes entropy   mix the given bytes into the ssl pseudorandom number generator
   the parameter entropy a float is a lower bound on the entropy   contained in string so you can always use 0
  see rfc   1750 for more information on sources of entropy
   changed in version 3
5 writable byteslike object is now   accepted
certificate handling
constants
   new in version 3
6
   new in version 3
6
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
4
   new in version 3
6
   new in version 3
6
   new in version 3
6
   new in version 3
6
   deprecated since version 3
6 use protocoltls instead
   warning     ssl version 2 is insecure
   deprecated since version 3
6 openssl has removed support for   sslv2
   warning     ssl version 3 is insecure
   deprecated since version 3
6 openssl has deprecated all version   specific protocols
 use the default protocol protocoltls with   flags like opnosslv3 instead
   deprecated since version 3
6 openssl has deprecated all version   specific protocols
 use the default protocol protocoltls with   flags like opnosslv3 instead
   new in version 3
4
   deprecated since version 3
6 openssl has deprecated all version   specific protocols
 use the default protocol protocoltls with   flags like opnosslv3 instead
   new in version 3
4
   deprecated since version 3
6 openssl has deprecated all version   specific protocols
 use the default protocol protocoltls with   flags like opnosslv3 instead
   new in version 3
2
   new in version 3
2
   deprecated since version 3
6 sslv2 is deprecatedssl
   new in version 3
2
   deprecated since version 3
6 sslv3 is deprecatedssl
   new in version 3
2
   deprecated since version 3
7 the option is deprecated since   openssl 1
0 use the new sslcontext
   new in version 3
4
   deprecated since version 3
7 the option is deprecated since   openssl 1
   new in version 3
4
   deprecated since version 3
7 the option is deprecated since   openssl 1
   new in version 3
7
   deprecated since version 3
7 the option is deprecated since   openssl 1
 it was added to 2
0 for   backwards compatibility with openssl 1
   new in version 3
7
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
8
   new in version 3
3
   new in version 3
6
   new in version 3
5
   new in version 3
7
   new in version 3
3
   new in version 3
2
   new in version 3
3
   new in version 3
7
   new in version 3
7
   new in version 3
7
   new in version 3
7
   new in version 3
7
   new in version 3
7
   new in version 3
3
2k  26 jan 2017   new in version 3
2
opensslversioninfo      1 0 2 11 15   new in version 3
2
opensslversionnumber      0x100020bf   new in version 3
2
   new in version 3
4
   new in version 3
6
   new in version 3
4
   new in version 3
4
   new in version 3
6
   new in version 3
7
ssl sockets
socket   ssl sockets provide the following methods of socket objects    accept    bind    close    connect    detach    fileno    getpeername getsockname    getsockopt setsockopt    gettimeout settimeout setblocking    listen    makefile    recv recvinto but passing a nonzero flags argument     is not allowed    send sendall with the same limitation    sendfile but os
   changed in version 3
5 the sendfile method was added
   changed in version 3
5 the shutdown does not reset the socket   timeout each time bytes are received or sent
 the socket timeout is   now to maximum total duration of the shutdown
   deprecated since version 3
6 it is deprecated to create a   sslsocket instance directly use sslcontext
wrapsocket to   wrap a socket
   changed in version 3
7 sslsocket instances must to created with   wrapsocket
   changed in version 3
5 the socket timeout is no more reset each   time bytes are received or sent
 the socket timeout is now to   maximum total duration to read up to len bytes
   deprecated since version 3
6 use recv instead of read
   changed in version 3
5 the socket timeout is no more reset each   time bytes are received or sent
 the socket timeout is now to   maximum total duration to write buf
   deprecated since version 3
6 use send instead of write
note  the read and write methods are the lowlevel methods that  read and write unencrypted applicationlevel data and  decryptencrypt it to encrypted wirelevel data
   changed in version 3
4 the handshake method also performs   matchhostname when the checkhostname attribute of the   sockets context is true
   changed in version 3
5 the socket timeout is no more reset each   time bytes are received or sent
 the socket timeout is now to   maximum total duration of the handshake
   changed in version 3
7 hostname or ip address is matched by   openssl during handshake
 the function matchhostname is no   longer used
 in case openssl refuses a hostname or ip address the   handshake is aborted early and a tls alert message is send to the   peer
org       version 3   note     to validate a certificate for a particular service you can use     the matchhostname function
   changed in version 3
2 the returned dictionary includes additional   items such as issuer and notbefore
   changed in version 3
4 valueerror is raised when the handshake   isnt done
 the returned dictionary includes additional x509v3   extension items   such as crldistributionpoints caissuers and   ocsp uris
   changed in version 3
9 ipv6 address strings no longer have a   trailing new line
   new in version 3
5
   new in version 3
3
   new in version 3
3
   new in version 3
5
   new in version 3
3
   note     only available with openssl 1
   new in version 3
8
   new in version 3
5
   new in version 3
2
   new in version 3
2
   new in version 3
2
   changed in version 3
7 the attribute is now always ascii text
   when serverhostname is an internationalized domain name idn   this attribute now stores the alabel form xnpythnmua
   new in version 3
6
sessionreused   new in version 3
6
ssl contexts
new in version 3
2
   heres a table showing which versions in a client down the side   can connect to which versions in a server along the top             client  server     sslv2     sslv3     tls 3    tlsv1  tlsv1
2              sslv2                   yes           no            no 1         no         no           no                       sslv3                   no            yes           no 2         no         no           no                       tls sslv23 3      no 1        no 2        yes            yes        yes          yes                      tlsv1                   no            no            yes            yes        no           no                       tlsv1
1                 no            no            yes            no         yes          no                       tlsv1
2                 no            no            yes            no         no           yes                   footnotes    1 sslcontext disables sslv2 with opnosslv2 by default
   see also     createdefaultcontext lets the ssl module choose security     settings for a given purpose
   changed in version 3
6 the context is created with secure default   values
 the options opnocompression   opcipherserverpreference opsingledhuse   opsingleecdhuse opnosslv2 except for protocolsslv2   and opnosslv3 except for protocolsslv3 are set by default
   the initial cipher suite list contains only high ciphers no   null ciphers and no md5 ciphers except for protocolsslv2
certstorestats      crl 0 x509ca 1 x509 2   new in version 3
4
   changed in version 3
3 new optional argument password
   new in version 3
4
   changed in version 3
4 new optional argument cadatasslcontext
   note     certificates in a capath directory arent loaded unless they have     been used at least once
   new in version 3
4
   example       ctx  ssl
   new in version 3
6
   note     when connected the sslsocket
   new in version 3
5
   new in version 3
3
   new in version 3
7
   new in version 3
4
   new in version 3
3
   new in version 3
3
   see also     ssltls  perfect forward secrecy        vincent bernat
   changed in version 3
5 always allow a serverhostname to be   passed even if openssl does not have sni
   changed in version 3
6 session argument was added
   changed in version 3
7 the method returns on instance of   sslcontext
   new in version 3
7
   changed in version 3
6 session argument was added
   changed in version 3
7 the method returns on instance of   sslcontext
   new in version 3
7
   example      import socket ssl      context  ssl
com 443   new in version 3
4
   changed in version 3
7 verifymode is now automatically changed   to certrequired  when hostname checking is enabled and   verifymode is certnone
   note     this features requires openssl 0
   new in version 3
8
   note     this features requires openssl 1
   note     this attribute is not available unless the ssl module is compiled     with openssl 1
   new in version 3
7
   note     this attribute is not available unless the ssl module is compiled     with openssl 1
   new in version 3
7
   note     this attribute is not available unless the ssl module is compiled     with openssl 1
   new in version 3
8
   note     with versions of openssl older than 0
   changed in version 3
6 sslcontext
options returns options   flags    ssl
   note     only available with openssl 1
3 support the property value is none and cant be modified   new in version 3
8
   note     only writeable with openssl 1
   new in version 3
7
   new in version 3
4
   changed in version 3
6 sslcontext
verifyflags returns   verifyflags flags    ssl
   changed in version 3
6 sslcontext
verifymode returns   verifymode enum    ssl
certificates
certificate chains
ca certificates
combined key and certificate
selfsigned certificates
examples
testing for ssl support
clientside operation
serverside operation
notes on nonblocking sockets
  changed in version 3
5 in earlier python versions the  sslsocket
send method returned zero instead of raising  sslwantwriteerror or sslwantreaderror
select sock see also  the asyncio module supports nonblocking ssl sockets and provides  a higher level api
memory bio support
new in version 3
5
   the following methods are available    context    serverside    serverhostname    session    sessionreused    read    write    getpeercert    selectedalpnprotocol    selectednpnprotocol    cipher    sharedciphers    compression    pending    dohandshake    verifyclientposthandshake    unwrap    getchannelbinding    version   when compared to sslsocket this object lacks the following   features    any form of network io recv and send read and write only     to the underlying memorybio buffers
   changed in version 3
7 sslobject instances must to created with   wrapbio
ssl session
new in version 3
6
security considerations
best defaults
manual settings
changed in version 3
7 hostname matchings is now performed byopenssl
 python no longer uses matchhostname
multiprocessing
tls
new in version 3
7
libressl support
see also  class socket
socket     documentation of underlying socket class  ssltls strong encryption an introduction     intro from the apache http server documentation  rfc 1422 privacy enhancement for internet electronic mail part  ii certificatebased key management     steve kent  rfc 4086 randomness requirements for security     donald e
emailutils miscellaneous utilities
urllibrobotparser   parser for robotstxt
source code liburllibrobotparser
pythis module provides a single class robotfileparser which answersquestions about whether or not a particular user agent can fetch a urlon the web site that published the robots
txt file
  for moredetails on the structure of robots
txt files seehttpwww
robotfileparserurl   this class provides methods to read parse and answer questions   about the robots
txt file at url
   seturlurl      sets the url referring to a robots
txt file
   read      reads the robots
txt url and feeds it to the parser
   parselines      parses the lines argument
   canfetchuseragent url      returns true if the useragent is allowed to fetch the url      according to the rules contained in the parsed robots
txt      file
   mtime      returns the time the robots
txt file was last fetched
  this      is useful for longrunning web spiders that need to check for      new robots
txt files periodically
   modified      sets the time the robots
txt file was last fetched to the      current time
   crawldelayuseragent      returns the value of the crawldelay parameter from      robots
txt for the useragent in question
  if there is no      such parameter or it doesnt apply to the useragent specified      or the robots
txt entry for this parameter has invalid syntax      return none
      new in version 3
6
   requestrateuseragent      returns the contents of the requestrate parameter from      robots
txt as a named tuple requestraterequests      seconds
 if there is no such parameter or it doesnt apply to      the useragent specified or the robots
txt entry for this      parameter has invalid syntax return none
      new in version 3
6
   sitemaps      returns the contents of the sitemap parameter from      robots
txt in the form of a list
 if there is no such      parameter or the robots
txt entry for this parameter has      invalid syntax return none
      new in version 3
8
the following example demonstrates basic use of the robotfileparserclass    import urllib
internet data handling
this chapter describes modules which support handling data formatscommonly used on the internet
 email  an email and mime handling package   email
message representing an email message   email
parser parsing email messages     feedparser api     parser api     additional notes   email
errors exception and defect classes   email
contentmanager managing mime content     content manager instances   email examples   email
encoders encoders   email
utils miscellaneous utilities   email
iterators iterators json  json encoder and decoder   basic usage   encoders and decoders   exceptions   standard compliance and interoperability     character encodings     infinite and nan number values     repeated names within an object     toplevel nonobject nonarray values     implementation limitations   command line interface     command line options mailcap  mailcap file handling mailbox  manipulate mailboxes in various formats   mailbox objects     maildir     mbox     mh     babyl     mmdf   message objects     maildirmessage     mboxmessage     mhmessage     babylmessage     mmdfmessage   exceptions   examples mimetypes  map filenames to mime types   mimetypes objects base64  base16 base32 base64 base85 data encodings binhex  encode and decode binhex4 files   notes binascii  convert between binary and ascii quopri  encode and decode mime quotedprintable data uu  encode and decode uuencode files
tokenize  tokenizer for python source
source code libtokenize
to simplify token stream handling all operator and delimiter tokensand ellipsis are returned using the generic op token type
  theexact type can be determined by checking the exacttype property onthe named tuple returned from tokenize
tokenize
tokenizing input
the primary entry point is a generatortokenize
tokenizereadline   the tokenize generator requires one argument readline which   must be a callable object which provides the same interface as the   io
readline method of file objects
  each call to the   function should return one line of input as bytes
   changed in version 3
1 added support for named tuples
   changed in version 3
3 added support for exacttype
   new in version 3
2
tokenerror   raised when either a docstring or expression that may be split over   several lines is not completed anywhere in the file for example      beginning of      docstring   or      1       2       3note that unclosed singlequoted strings do not cause an error to beraised
commandline usage
new in version 3
3
examples
readline       for token in tokens           printtokenor reading bytes directly with tokenize   import tokenize   with openhello
emailheaderregistry custom header objects
pynew in version 3
6 1headers are represented by customized subclasses of str
   the default mappings are      subject         uniqueunstructuredheader      date         uniquedateheader      resentdate         dateheader      origdate         uniquedateheader      sender         uniquesingleaddressheader      resentsender         singleaddressheader      to         uniqueaddressheader      resentto         addressheader      cc         uniqueaddressheader      resentcc         addressheader      bcc         uniqueaddressheader      resentbcc         addressheader      from         uniqueaddressheader      resentfrom         addressheader      replyto         uniqueaddressheader      mimeversion         mimeversionheader      contenttype         contenttypeheader      contentdisposition         contentdispositionheader      contenttransferencoding         contenttransferencodingheader      messageid         messageidheader   headerregistry has the following methods   maptotypeself name cls      name is the name of the header to be mapped
  the general form of   an address is      displayname usernamedomain   or      usernamedomain   where each part must conform to specific syntax rules spelled out   in rfc 5322
 footnotes 1 originally added in 3
glob  unix style pathname pattern expansion
configparser  configuration file parser
source code libconfigparser
pythis module provides the configparser class which implements a basicconfiguration language which provides a structure similar to whatsfound in microsoft windows ini files
  you can use this to writepython programs which can be customized by end users easily
note  this library does not interpret or write the valuetype prefixes  used in the windows registry extended version of ini syntax
see also  module shlex     support for creating unix shelllike minilanguages which can be     used as an alternate format for application configuration files
  module json     the json module implements a subset of javascript syntax which     can also be used for this purpose
quick start
lets take a very basic configuration file that looks like this   default   serveraliveinterval  45   compression  yes   compressionlevel  9   forwardx11  yes   bitbucket
com   port  50022   forwardx11  nothe structure of ini files is described in the following section
essentially the file consists of sections each of which containskeys with values
 configparser classes can read and write suchfiles
  lets start by creating the above configuration fileprogrammatically
as you can see we can treat a config parser much like a dictionary
there are differences outlined later but the behavior is very closeto what you would expect from a dictionary
now that we have created and saved a configuration file lets read itback and explore the data it holds
orgforwardx11   yesas we can see above the api is pretty straightforward
  the only bitof magic involves the default section which provides default valuesfor all other sections 1
  note also that keys in sections are caseinsensitive and stored in lowercase 1
supported datatypes
config parsers do not guess datatypes of values in configurationfiles always storing them internally as strings
  this means that ifyou need other datatypes you should convert on your own    inttopsecretport   50022    floattopsecretcompressionlevel   9
0since this task is so common config parsers provide a range of handygetter methods to handle integers floats and booleans
  the last oneis the most interesting because simply passing the value to boolwould do no good since boolfalse is still true
  this is whyconfig parsers also provide getboolean
  this method is caseinsensitive and recognizes boolean values from yesnoonoff truefalse and 10 1
  for example    topsecret
org compression   trueapart from getboolean config parsers also provide equivalentgetint and getfloat methods
  you can register your ownconverters and customize the provided ones
 1
fallback values
as with a dictionary you can use a sections get method toprovide fallback values    topsecret
getcipher 3descbc   3descbcplease note that default values have precedence over fallback values
for instance in our example the compressionlevel key wasspecified only in the default section
  if we try to get it fromthe section topsecret
com we will always get the defaulteven if we specify a fallback    topsecret
getcompressionlevel 3   9one more thing to be aware of is that the parserlevel get methodprovides a custom more complex interface maintained for backwardscompatibility
  when using this method a fallback value can beprovided via the fallback keywordonly argument    config
            fallbackno such things as monsters   no such things as monstersthe same fallback argument can be used with the getintgetfloat and getboolean methods for example    batchmode in topsecret   false    topsecret
supported ini file structure
a configuration file consists of sections each led by a sectionheader followed by keyvalue entries separated by a specific string or  by default 1
  by default section names are casesensitive but keys are not 1
  leading and trailing whitespace isremoved from keys and values
 values can be omitted in which case thekeyvalue delimiter may also be left out
  values can also spanmultiple lines as long as they are indented deeper than the firstline of the value
  depending on the parsers mode blank lines may betreated as parts of multiline values or ignored
configuration files may include comments prefixed by specificcharacters  and  by default 1
  comments may appear on theirown on an otherwise empty line possibly indented
 1for example   simple values   keyvalue   spaces in keysallowed   spaces in valuesallowed as well   spaces around the delimiter  obviously   you can also use  to delimit keys from values   all values are strings   values like this 1000000   or this 3
interpolation of values
on top of the core functionality configparser supportsinterpolation
  this means values can be preprocessed before returningthem from get calls
basicinterpolation   the default implementation used by configparser
  it enables   values to contain format strings which refer to other values in the   same section or values in the special default section 1
   additional default values can be provided on initialization
   for example      paths      homedir users      mydir homedirslumberjack      mypictures mydirspictures      escape      gain 80   use a  to escape the  sign  is the only character that needs to be escaped   in the example above configparser with interpolation set to   basicinterpolation would resolve homedirs to the value of   homedir users in this case
  mydirs in effect would   resolve to userslumberjack
  all interpolations are done on   demand so keys used in the chain of references do not have to be   specified in any specific order in the configuration file
   with interpolation set to none the parser would simply return   mydirspictures as the value of mypictures and   homedirslumberjack as the value of mydir
extendedinterpolation   an alternative handler for interpolation which implements a more   advanced syntax used for instance in zc
buildout
  extended   interpolation is using sectionoption to denote a value from a   foreign section
 interpolation can span multiple levels
  for   convenience if the section part is omitted interpolation   defaults to the current section and possibly the default values   from the special section
   for example the configuration specified above with basic   interpolation would look like this with extended interpolation      paths      homedir users      mydir homedirlumberjack      mypictures mydirpictures      escape      cost 80   use a  to escape the  sign  is the only character that needs to be escaped   values from other sections can be fetched as well      common      homedir users      librarydir library      systemdir system      macportsdir optlocal      frameworks      python 3
mapping protocol access
customizing parser behaviour
legacy api examples
mainly because of backwards compatibility concerns configparserprovides also a legacy api with explicit getset methods
  whilethere are valid use cases for the methods outlined below mappingprotocol access is preferred for new projects
  the legacy api is attimes more advanced lowlevel and downright counterintuitive
an example of writing to a configuration file   import configparser   config  configparser
writeconfigfilean example of reading the configuration file again   import configparser   config  configparser
getsection1 footo get interpolation use configparser   import configparser   cfg  configparser
getsection1 monster fallbacknone           nonedefault values are available in both types of configparsers
  they areused in interpolation if an option used is not defined elsewhere
configparser objects
defaultsect interpolationbasicinterpolation converters   the main configuration parser
  when defaults is given it is   initialized into the dictionary of intrinsic defaults
  when   dicttype is given it will be used to create the dictionary   objects for the list of sections for the options within a section   and for the default values
   when delimiters is given it is used as the set of substrings   that divide keys from values
  when commentprefixes is given it   will be used as the set of substrings that prefix comments in   otherwise empty lines
 comments can be indented
  when   inlinecommentprefixes is given it will be used as the set of   substrings that prefix comments in nonempty lines
   when strict is true the default the parser wont allow for   any section or option duplicates while reading from a single source   file string or dictionary raising duplicatesectionerror or   duplicateoptionerror
  when emptylinesinvalues is false   default true each empty line marks the end of an option
   otherwise internal empty lines of a multiline option are kept as   part of the value
 when allownovalue is true default   false options without values are accepted the value held for   these is none and they are serialized without the trailing   delimiter
   when defaultsection is given it specifies the name for the   special section holding default values for other sections and   interpolation purposes normally named default
  this value   can be retrieved and changed on runtime using the defaultsection   instance attribute
   interpolation behaviour may be customized by providing a custom   handler through the interpolation argument
 none can be used to   turn off interpolation completely extendedinterpolation   provides a more advanced variant inspired by zc
buildout
  more   on the subject in the dedicated documentation section
   all option names used in interpolation will be passed through the   optionxform method just like any other option name reference
   for example using the default implementation of optionxform   which converts option names to lower case the values foo   bars and foo bars are equivalent
   when converters is given it should be a dictionary where each   key represents the name of a type converter and each value is a   callable implementing the conversion from string to the desired   datatype
  every converter gets its own corresponding get   method on the parser object and section proxies
   changed in version 3
1 the default dicttype is   collections
   changed in version 3
2 allownovalue delimiters   commentprefixes strict emptylinesinvalues   defaultsection and interpolation were added
   changed in version 3
5 the converters argument was added
   changed in version 3
7 the defaults argument is read with   readdict providing consistent behavior across the parser   nonstring keys and values are implicitly converted to strings
   changed in version 3
8 the default dicttype is dict since it   now preserves insertion order
   defaults      return a dictionary containing the instancewide defaults
   sections      return a list of the sections available the default section      is not included in the list
   addsectionsection      add a section named section to the instance
  if a section by      the given name already exists duplicatesectionerror is      raised
  if the default section name is passed valueerror      is raised
  the name of the section must be a string if not      typeerror is raised
      changed in version 3
2 nonstring section names raise      typeerror
   hassectionsection      indicates whether the named section is present in the      configuration
 the default section is not acknowledged
   optionssection      return a list of options available in the specified section
   hasoptionsection option      if the given section exists and contains the given option      return true otherwise return false
  if the specified      section is none or an empty string default is assumed
   readfilenames encodingnone      attempt to read and parse an iterable of filenames returning a      list of filenames which were successfully parsed
      if filenames is a string a bytes object or a pathlike      object it is treated as a single filename
  if a file named in      filenames cannot be opened that file will be ignored
  this      is designed so that you can specify an iterable of potential      configuration file locations for example the current      directory the users home directory and some systemwide      directory and all existing configuration files in the iterable      will be read
      if none of the named files exist the configparser instance      will contain an empty dataset
  an application which requires      initial values to be loaded from a file should load the required      file or files using readfile before calling read for      any optional files         import configparser os         config  configparser
cfg                     encodingcp1250      new in version 3
2 the encoding parameter
  previously all      files were read using the default encoding for open
      new in version 3
1 the filenames parameter accepts a path      like object
      new in version 3
7 the filenames parameter accepts a bytes      object
   readfilef sourcenone      read and parse configuration data from f which must be an      iterable yielding unicode strings for example files opened in      text mode
      optional argument source specifies the name of the file being      read
  if not given and f has a name attribute that is used      for source the default is 
      new in version 3
2 replaces readfp
   readstringstring sourcestring      parse configuration data from a string
      optional argument source specifies a contextspecific name of      the string passed
  if not given string is used
  this      should commonly be a filesystem path or a url
      new in version 3
2
   readdictdictionary sourcedict      load configuration from any object that provides a dictlike      items method
  keys are section names values are      dictionaries with keys and values that should be present in the      section
  if the used dictionary type preserves order sections      and their keys will be added in order
 values are automatically      converted to strings
      optional argument source specifies a contextspecific name of      the dictionary passed
  if not given dict is used
      this method can be used to copy state between parsers
      new in version 3
2
   getsection option  rawfalse varsnone fallback      get an option value for the named section
  if vars is      provided it must be a dictionary
  the option is looked up in      vars if provided section and in defaultsect in that      order
  if the key is not found and fallback is provided it      is used as a fallback value
  none can be provided as a      fallback value
      all the  interpolations are expanded in the return values      unless the raw argument is true
  values for interpolation      keys are looked up in the same manner as the option
      changed in version 3
2 arguments raw vars and fallback      are keyword only to protect users from trying to use the third      argument as the fallback fallback especially when using the      mapping protocol
   getintsection option  rawfalse varsnone fallback      a convenience method which coerces the option in the specified      section to an integer
  see get for explanation of raw      vars and fallback
   getfloatsection option  rawfalse varsnone fallback      a convenience method which coerces the option in the specified      section to a floating point number
  see get for      explanation of raw vars and fallback
   getbooleansection option  rawfalse varsnone fallback      a convenience method which coerces the option in the specified      section to a boolean value
  note that the accepted values for      the option are 1 yes true and on which cause      this method to return true and 0 no false and      off which cause it to return false
  these string values      are checked in a caseinsensitive manner
  any other value will      cause it to raise valueerror
  see get for explanation of      raw vars and fallback
   itemsrawfalse varsnone   itemssection rawfalse varsnone      when section is not given return a list of sectionname      sectionproxy pairs including defaultsect
      otherwise return a list of name value pairs for the      options in the given section
  optional arguments have the      same meaning as for the get method
      changed in version 3
8 items present in vars no longer appear      in the result
  the previous behaviour mixed actual parser      options with variables provided for interpolation
   setsection option value      if the given section exists set the given option to the      specified value otherwise raise nosectionerror
  option and      value must be strings if not typeerror is raised
   writefileobject spacearounddelimiterstrue      write a representation of the configuration to the specified      file object which must be opened in text mode accepting      strings
  this representation can be parsed by a future      read call
  if spacearounddelimiters is true delimiters      between keys and values are surrounded by spaces
   removeoptionsection option      remove the specified option from the specified section
  if      the section does not exist raise nosectionerror
  if the      option existed to be removed return true otherwise return      false
   removesectionsection      remove the specified section from the configuration
  if the      section in fact existed return true
  otherwise return      false
   optionxformoption      transforms the option name option as found in an input file or      as passed in by client code to the form that should be used in      the internal structures
  the default implementation returns a      lowercase version of option subclasses may override this or      client code can set an attribute of this name on instances to      affect this behavior
      you dont need to subclass the parser to use this method you      can also set it on an instance to a function that takes a      string argument and returns a string
  setting it to str for      example would make option names case sensitive         cfgparser  configparser         cfgparser
optionxform  str      note that when reading configuration files whitespace around      the option names is stripped before optionxform is called
   readfpfp filenamenone      deprecated since version 3
2 use readfile instead
      changed in version 3
2 readfp now iterates on fp instead      of calling fp
      for existing code calling readfp with arguments which dont      support iteration the following generator may be used as a      wrapper around the filelike object         def readlinegeneratorfp             line  fp
readline      instead of parser
readfpfp use      parser
maxinterpolationdepth   the maximum depth for recursive interpolation for get when the   raw parameter is false
  this is relevant only when the default   interpolation is used
rawconfigparser objects
defaultsect interpolation   legacy variant of the configparser
  it has interpolation   disabled by default and allows for nonstring section names option   names and values via its unsafe addsection and set methods   as well as the legacy defaults keyword argument handling
   changed in version 3
8 the default dicttype is dict since it   now preserves insertion order
   note     consider using configparser instead which checks types of the     values to be stored internally
  if you dont want interpolation     you can use configparserinterpolationnone
   addsectionsection      add a section named section to the instance
  if a section by      the given name already exists duplicatesectionerror is      raised
  if the default section name is passed valueerror      is raised
      type of section is not checked which lets users create non      string named sections
  this behaviour is unsupported and may      cause internal errors
   setsection option value      if the given section exists set the given option to the      specified value otherwise raise nosectionerror
  while it is      possible to use rawconfigparser or configparser with raw      parameters set to true for internal storage of nonstring      values full functionality including interpolation and output      to files can only be achieved using string values
      this method lets users assign nonstring values to keys      internally
  this behaviour is unsupported and will cause errors      when attempting to write to a file or get it in nonraw mode
      use the mapping protocol api which does not allow such      assignments to take place
exceptions
lzma  compression using the lzma algorithm
new in version 3
3
source code liblzma
pythis module provides classes and convenience functions for compressingand decompressing data using the lzma compression algorithm
 alsoincluded is a file interface supporting the 
xz and legacy 
lzmafile formats used by the xz utility as well as raw compressedstreams
the interface provided by this module is very similar to that of thebz2 module
 however note that lzmafile is not threadsafeunlike bz2
bz2file so if you need to use a single lzmafileinstance from multiple threads it is necessary to protect it with alock
lzmaerror   this exception is raised when an error occurs during compression or   decompression or while initializing the compressordecompressor   state
reading and writing compressed files
compressing and decompressing data in memory
lzmacompressorformatformatxz check1 presetnone filtersnone   create a compressor object which can be used to compress data   incrementally
   for a more convenient way of compressing a single chunk of data   see compress
   the format argument specifies what container format should be   used
 possible values are    formatxz the 
xz container format
        this is the default format
    formatalone the legacy 
lzma container format
        this format is more limited than 
xz  it does not support        integrity checks or multiple filters
    formatraw a raw data stream not using any container format
        this format specifier does not support integrity checks and        requires that you always specify a custom filter chain for        both compression and decompression
 additionally data        compressed in this manner cannot be decompressed using        formatauto see lzmadecompressor
   the check argument specifies the type of integrity check to   include in the compressed data
 this check is used when   decompressing to ensure that the data has not been corrupted
   possible values are    checknone no integrity check
 this is the default and the     only acceptable value for formatalone and formatraw
    checkcrc32 32bit cyclic redundancy check
    checkcrc64 64bit cyclic redundancy check
 this is the     default for formatxz
    checksha256 256bit secure hash algorithm
   if the specified check is not supported an lzmaerror is raised
   the compression settings can be specified either as a preset   compression level with the preset argument or in detail as a   custom filter chain with the filters argument
   the preset argument if provided should be an integer between   0 and 9 inclusive optionally ored with the constant   presetextreme
 if neither preset nor filters are given the   default behavior is to use presetdefault preset level 6
   higher presets produce smaller output but make the compression   process slower
   note     in addition to being more cpuintensive compression with higher     presets also requires much more memory and produces output that     needs more memory to decompress
 with preset 9 for example     the overhead for an lzmacompressor object can be as high as 800     mib
 for this reason it is generally best to stick with the     default preset
   the filters argument if provided should be a filter chain   specifier
 see specifying custom filter chains for details
   compressdata      compress data a bytes object returning a bytes object      containing compressed data for at least part of the input
 some      of data may be buffered internally for use in later calls to      compress and flush
 the returned data should be      concatenated with the output of any previous calls to      compress
   flush      finish the compression process returning a bytes object      containing any data stored in the compressors internal buffers
      the compressor cannot be used after this method has been called
lzmadecompressorformatformatauto memlimitnone filtersnone   create a decompressor object which can be used to decompress data   incrementally
   for a more convenient way of decompressing an entire compressed   stream at once see decompress
   the format argument specifies the container format that should be   used
 the default is formatauto which can decompress both 
xz   and 
lzma files
 other possible values are formatxz   formatalone and formatraw
   the memlimit argument specifies a limit in bytes on the amount   of memory that the decompressor can use
 when this argument is   used decompression will fail with an lzmaerror if it is not   possible to decompress the input within the given memory limit
   the filters argument specifies the filter chain that was used to   create the stream being decompressed
 this argument is required if   format is formatraw but should not be used for other formats
   see specifying custom filter chains for more information about   filter chains
   note     this class does not transparently handle inputs containing     multiple compressed streams unlike decompress and     lzmafile
 to decompress a multistream input with     lzmadecompressor you must create a new decompressor for each     stream
   decompressdata maxlength1      decompress data a byteslike object returning      uncompressed data as bytes
 some of data may be buffered      internally for use in later calls to decompress
 the      returned data should be concatenated with the output of any      previous calls to decompress
      if maxlength is nonnegative returns at most maxlength      bytes of decompressed data
 if this limit is reached and further      output can be produced the needsinput attribute will be set      to false
 in this case the next call to decompress may      provide data as b to obtain more of the output
      if all of the input data was decompressed and returned either      because this was less than maxlength bytes or because      maxlength was negative the needsinput attribute will be      set to true
      attempting to decompress data after the end of stream is reached      raises an eoferror
  any data found after the end of the      stream is ignored and saved in the unuseddata attribute
      changed in version 3
5 added the maxlength parameter
   check      the id of the integrity check used by the input stream
 this may      be checkunknown until enough of the input has been decoded to      determine what integrity check it uses
   eof      true if the endofstream marker has been reached
   unuseddata      data found after the end of the compressed stream
      before the end of the stream is reached this will be b
   needsinput      false if the decompress method can provide more      decompressed data before requiring new uncompressed input
      new in version 3
5
compressdata formatformatxz check1 presetnone filtersnone   compress data a bytes object returning the compressed data   as a bytes object
   see lzmacompressor above for a description of the format   check preset and filters arguments
decompressdata formatformatauto memlimitnone filtersnone   decompress data a bytes object returning the uncompressed   data as a bytes object
   if data is the concatenation of multiple distinct compressed   streams decompress all of these streams and return the   concatenation of the results
   see lzmadecompressor above for a description of the format   memlimit and filters arguments
miscellaneous
ischecksupportedcheck   return true if the given integrity check is supported on this   system
   checknone and checkcrc32 are always supported
 checkcrc64   and checksha256 may be unavailable if you are using a version of   liblzma that was compiled with a limited feature set
specifying custom filter chains
examples
reading in a compressed file   import lzma   with lzma
readcreating a compressed file   import lzma   data  binsert data here   with lzma
writedatacompressing data in memory   import lzma   datain  binsert data here   dataout  lzma
compressdatainincremental compression   import lzma   lzc  lzma
joinout1 out2 out3 out4writing compressed data to an alreadyopen file   import lzma   with openfile
writebnot compressedncreating a compressed file using a custom filter chain   import lzma   myfilters         id lzma
fractions  rational numbers
source code libfractions
pythe fractions module provides support for rational numberarithmetic
a fraction instance can be constructed from a pair of integers fromanother rational number or from a string
fractionstring   the first version requires that numerator and denominator are   instances of numbers
rational and returns a new fraction   instance with value numeratordenominator
 if denominator is   0 it raises a zerodivisionerror
 the second version requires   that otherfraction is an instance of numbers
rational and   returns a fraction instance with the same value
  the next two   versions accept either a float or a decimal
decimal instance   and return a fraction instance with exactly the same value
  note   that due to the usual issues with binary floatingpoint see   floating point arithmetic  issues and limitations the argument   to fraction1
1 is not exactly equal to 1110 and so   fraction1
1 does not return fraction11 10 as one might   expect
 but see the documentation for the limitdenominator   method below
 the last version of the constructor expects a string   or unicode instance
 the usual form for this instance is      sign numerator  denominator   where the optional sign may be either  or  and numerator   and denominator if present are strings of decimal digits
  in   addition any string that represents a finite value and is accepted   by the float constructor is also accepted by the fraction   constructor
  in either form the input string may also have leading   andor trailing whitespace
 here are some examples       from fractions import fraction       fraction16 10      fraction8 5       fraction123      fraction123 1       fraction      fraction0 1       fraction37      fraction3 7       fraction 37       fraction3 7       fraction1
1      fraction11 10   the fraction class inherits from the abstract base class   numbers
rational and implements all of the methods and   operations from that class
  fraction instances are hashable and   should be treated as immutable
  in addition fraction has the   following properties and methods   changed in version 3
2 the fraction constructor now accepts   float and decimal
decimal instances
   changed in version 3
9 the math
gcd function is now used to   normalize the numerator and denominator
gcd always   return a int type
 previously the gcd type depended on   numerator and denominator
   numerator      numerator of the fraction in lowest term
   denominator      denominator of the fraction in lowest term
   asintegerratio      return a tuple of two integers whose ratio is equal to the      fraction and with a positive denominator
      new in version 3
8
   fromfloatflt      this class method constructs a fraction representing the exact      value of flt which must be a float
 beware that      fraction
3 is not the same value as fraction3      10
      note        from python 3
2 onwards you can also construct a fraction        instance directly from a float
   fromdecimaldec      this class method constructs a fraction representing the exact      value of dec which must be a decimal
decimal instance
      note        from python 3
2 onwards you can also construct a fraction        instance directly from a decimal
decimal instance
   limitdenominatormaxdenominator1000000      finds and returns the closest fraction to self that has      denominator at most maxdenominator
  this method is useful for      finding rational approximations to a given floatingpoint      number       from fractions import fraction       fraction3
limitdenominator1000      fraction355 113      or for recovering a rational number thats represented as a      float       from math import pi cos       fractioncospi3      fraction4503599627370497 9007199254740992       fractioncospi3
limitdenominator      fraction11 10   floor      returns the greatest int  self
  this method can also be      accessed through the math
floor function       from math import floor       floorfraction355 113      3   ceil      returns the least int  self
  this method can also be      accessed through the math
ceil function
   round   roundndigits      the first version returns the nearest int to self rounding      half to even
 the second version rounds self to the nearest      multiple of fraction1 10ndigits logically if ndigits      is negative again rounding half toward even
  this method can      also be accessed through the round function
see also  module numbers     the abstract base classes making up the numeric tower
itertools  functions creating iterators for efficient looping
itertool functions
itertools recipes
this section shows recipes for creating an extended toolset using theexisting itertools as building blocks
substantially all of these recipes and many many others can beinstalled from the moreitertools project found on the python packageindex   pip install moreitertoolsthe extended tools offer the same high performance as the underlyingtoolset
 the superior memory performance is kept by processingelements one at a time rather than bringing the whole iterable intomemory all at once
 code volume is kept small by linking the toolstogether in a functional style which helps eliminate temporaryvariables
  high speed is retained by preferring vectorized buildingblocks over the use of forloops and generators which incurinterpreter overhead
tkintermessagebox  tkinter message prompts
source code libtkintermessagebox
pythe tkinter
messagebox module provides a template base class as wellas a variety of convenience methods for commonly used configurations
the message boxes are modal and will return a subset of true falseok none yes no based on the users selection
 common message boxstyles and layouts include but are not limited to   imageclass tkinter
messagemasternone options   create a default information message box
information message boxtkinter
showinfotitlenone messagenone optionswarning message boxestkinter
showerrortitlenone messagenone optionsquestion message boxestkinter
imaplib  imap4 protocol client
87   changed in version 3
5 support for the with statement was added
   changed in version 3
9 the optional timeout parameter was added
   changed in version 3
3 sslcontext parameter was added
   changed in version 3
4 the class now supports hostname check with   ssl
   deprecated since version 3
6 keyfile and certfile are   deprecated in favor of sslcontext
 please use   ssl
loadcertchain instead or let   ssl
createdefaultcontext select the systems trusted ca   certificates for you
   changed in version 3
9 the optional timeout parameter was added
see also  documents describing the protocol and sources and binaries  for  servers implementing it can all be found at the university of  washingtons imap information center  httpswww
imap4 objects
   changed in version 3
5 string usernames and passwords are now   encoded to utf8 instead of being limited to ascii
   new in version 3
5 the enable method itself and rfc 6855   support
   changed in version 3
8 the method no longer ignores silently   arbitrary exceptions
   changed in version 3
9 the timeout parameter was added
   example       m is a connected imap4 instance
   new in version 3
2
   changed in version 3
4 the method now supports hostname check with   ssl
expunge   note     creating flags containing  for example test violates     rfc 3501 the imap protocol
   new in version 3
9
   new in version 3
5
imap4 example
subprocesses
source code libasynciosubprocess
pylibasynciobasesubprocess
pythis section describes highlevel asyncawait asyncio apis to createand manage subprocesses
heres an example of how asyncio can run a shell command and obtainits result   import asyncio   async def runcmd       proc  await asyncio
runrunls zzzwill print   ls zzz exited with 1   stderr   ls zzz no such file or directorybecause all asyncio subprocess functions are asynchronous and asyncioprovides many tools to work with such functions it is easy to executeand monitor multiple subprocesses in parallel
  it is indeed trivialto modify the above example to run several commands simultaneously   async def main       await asyncio
runmainsee also the examples subsection
creating subprocesses
createsubprocessexecprogram args stdinnone stdoutnone stderrnone loopnone limitnone kwds   create a subprocess
   the limit argument sets the buffer limit for streamreader   wrappers for process
stdout and process
stderr if   subprocess
pipe is passed to stdout and stderr arguments
   return a process instance
   see the documentation of loop
subprocessexec for other   parameters
10 the   loop parameter
createsubprocessshellcmd stdinnone stdoutnone stderrnone loopnone limitnone kwds   run the cmd shell command
   the limit argument sets the buffer limit for streamreader   wrappers for process
stdout and process
stderr if   subprocess
pipe is passed to stdout and stderr arguments
   return a process instance
   see the documentation of loop
subprocessshell for other   parameters
   important     it is the applications responsibility to ensure that all     whitespace and special characters are quoted appropriately to     avoid shell injection vulnerabilities
 the shlex
quote     function can be used to properly escape whitespace and special     shell characters in strings that are going to be used to     construct shell commands
10 the   loop parameter
note  subprocesses are available for windows if a proactoreventloop is  used
 see subprocess support on windows for details
see also  asyncio also has the following lowlevel apis to work with  subprocesses loop
connectwritepipe as well as  the subprocess transports and subprocess protocols
constants
pipe   can be passed to the stdin stdout or stderr parameters
   if pipe is passed to stdin argument the process
stdin   attribute will point to a streamwriter instance
   if pipe is passed to stdout or stderr arguments the   process
stdout and process
stderr attributes will point to   streamreader instances
stdout   special value that can be used as the stderr argument and   indicates that standard error should be redirected into standard   output
devnull   special value that can be used as the stdin stdout or stderr   argument to process creation functions
  it indicates that the   special file os
devnull will be used for the corresponding   subprocess stream
interacting with subprocesses
both createsubprocessexec and createsubprocessshellfunctions return instances of the process class
  process is ahighlevel wrapper that allows communicating with subprocesses andwatching for their completion
process   an object that wraps os processes created by the   createsubprocessexec and createsubprocessshell   functions
   this class is designed to have a similar api to the   subprocess
popen class but there are some notable differences    unlike popen process instances do not have an equivalent to the     poll method    the communicate and wait methods dont have a timeout     parameter use the waitfor function    the process
wait method is asynchronous whereas     subprocess
wait method is implemented as a blocking     busy loop    the universalnewlines parameter is not supported
   this class is not thread safe
   see also the subprocess and threads section
   coroutine wait      wait for the child process to terminate
      set and return the returncode attribute
      note        this method can deadlock when using stdoutpipe or        stderrpipe and the child process generates so much output        that it blocks waiting for the os pipe buffer to accept more        data
 use the communicate method when using pipes to avoid        this condition
   coroutine communicateinputnone      interact with process      1
 send data to stdin if input is not none      2
 read data from stdout and stderr until eof is reached      3
 wait for process to terminate
      the optional input argument is the data bytes object that      will be sent to the child process
      return a tuple stdoutdata stderrdata
      if either brokenpipeerror or connectionreseterror exception      is raised when writing input into stdin the exception is      ignored
  this condition occurs when the process exits before      all data are written into stdin
      if it is desired to send data to the process stdin the      process needs to be created with stdinpipe
  similarly to      get anything other than none in the result tuple the process      has to be created with stdoutpipe andor stderrpipe      arguments
      note that the data read is buffered in memory so do not use      this method if the data size is large or unlimited
   sendsignalsignal      sends the signal signal to the child process
      note        on windows sigterm is an alias for terminate
        ctrlcevent and ctrlbreakevent can be sent to processes        started with a creationflags parameter which includes        createnewprocessgroup
   terminate      stop the child process
      on posix systems this method sends signal
sigterm to the child      process
      on windows the win32 api function terminateprocess is called      to stop the child process
   kill      kill the child
      on posix systems this method sends sigkill to the child      process
      on windows this method is an alias for terminate
   stdin      standard input stream streamwriter or none if the process      was created with stdinnone
   stdout      standard output stream streamreader or none if the process      was created with stdoutnone
   stderr      standard error stream streamreader or none if the process      was created with stderrnone
   warning     use the communicate method rather than     process
write await process
read or await     process
 this avoids deadlocks due to streams     pausing reading or writing and blocking the child process
   pid      process identification number pid
      note that for processes created by the      createsubprocessshell function this attribute is the pid      of the spawned shell
   returncode      return code of the process when it exits
      a none value indicates that the process has not terminated      yet
      a negative value n indicates that the child was terminated by      signal n posix only
subprocess and threads
standard asyncio event loop supports running subprocesses fromdifferent threads by default
on windows subprocesses are provided by proactoreventloop onlydefault selectoreventloop has no subprocess support
on unix child watchers are used for subprocess finish waiting seeprocess watchers for more info
changed in version 3
8 unix switched to use threadedchildwatcherfor spawning subprocesses from different threads without anylimitation
spawning a subprocess with inactive current child watcherraises runtimeerror
note that alternative event loop implementations might have ownlimitations please refer to their documentation
see also the concurrency and multithreading in asyncio section
examples
an example using the process class to control a subprocess and thestreamreader class to read from its standard output
the subprocess is created by the createsubprocessexec function   import asyncio   import sys   async def getdate       code  import datetime printdatetime
rungetdate   printfcurrent date datesee also the same example written using lowlevel apis
pycompile  compile python source files
data types
xmletreeelementtree  the elementtree xml api
source code libxmletreeelementtree
pythe xml
elementtree module implements a simple and efficientapi for parsing and creating xml data
changed in version 3
3 this module will use a fast implementationwhenever available
deprecated since version 3
3 the xml
celementtree module isdeprecated
warning  the xml
elementtree module is not secure against maliciously  constructed data
  if you need to parse untrusted or unauthenticated  data see xml vulnerabilities
tutorial
this is a short tutorial for using xml
elementtree et inshort
  the goal is to demonstrate some of the building blocks andbasic concepts of the module
xml tree and elements
xml is an inherently hierarchical data format and the most naturalway to represent it is with a tree
  et has two classes for thispurpose  elementtree represents the whole xml document as a treeand element represents a single node in this tree
  interactionswith the whole document reading and writing tofrom files areusually done on the elementtree level
  interactions with a singlexml element and its subelements are done on the element level
parsing xml
well be using the following xml document as the sample data for thissection   xml version1
0   data       country nameliechtenstein           rank1rank           year2008year           gdppc141100gdppc           neighbor nameaustria directione           neighbor nameswitzerland directionw       country       country namesingapore           rank4rank           year2011year           gdppc59900gdppc           neighbor namemalaysia directionn       country       country namepanama           rank68rank           year2011year           gdppc13600gdppc           neighbor namecosta rica directionw           neighbor namecolombia directione       country   datawe can import this data by reading from a file   import xml
getrootor directly from a string   root  et
fromstringcountrydataasstringfromstring parses xml from a string directly into an elementwhich is the root element of the parsed tree
  other parsing functionsmay create an elementtree
  check the documentation to be sure
as an element root has a tag and a dictionary of attributes    root
attrib   it also has children nodes over which we can iterate    for child in root   
   country name liechtenstein   country name singapore   country name panamachildren are nested and we can access specific child nodes by index    root01
text   2008note  not all elements of the xml input will end up as elements of the  parsed tree
 currently this module skips over any xml comments  processing instructions and document type declarations in the  input
 nevertheless trees built using this modules api rather than  parsing from xml text can have comments and processing instructions  in them they will be included when generating xml output
 a  document type declaration may be accessed by passing a custom  treebuilder instance to the xmlparser constructor
pull api for nonblocking parsing
finding interesting elements
element has some useful methods that help iterate recursively overall the subtree below it its children their children and so on
for example element
findall finds only elements with a tag which are directchildren of the current element
  element
find finds the firstchild with a particular tag and element
text accesses the elementstext content
  element
get accesses the elements attributes    for country in root
   liechtenstein 1   singapore 4   panama 68more sophisticated specification of which elements to look for ispossible by using xpath
modifying an xml file
building xml documents
the subelement function also provides a convenient way to createnew subelements for a given element    a  et
parsing xml with namespaces
additional resources
xpath support
example
supported xpath syntax
 syntax                   meaning                                                 tag                    selects all child elements with the given tag
  changed in version 3
8 support for star                            wildcards was added
                                                          selects all child elements including comments and                               processing instructions
  for example egg selects                           all grandchildren named egg
                          
                      selects the current node
  this is mostly useful at                              the beginning of the path to indicate that its a                               relative path
                                                               selects all subelements on all levels beneath the                               current  element
             attrib              selects all elements that have the given attribute
     attribvalue      selects all elements for which the given attribute has                           the given value
  the value cannot contain quotes
      tag                  selects all elements that have a child named tag
                              only immediate children are supported
                  
text             selects all elements whose complete text content                                including descendants equals the given text
  new                             in version 3
7
                                         tagtext           selects all elements that have a child named tag                               whose complete text content including descendants                              equals the given text
                                position             selects all elements that are located at the given                               position
                            predicates expressions within square brackets must be preceded by atag name an asterisk or another predicate
  position predicatesmust be preceded by a tag name
reference
functions
0 transformation function
   typical uses      xmldata  root
xml outoutfile   the configuration options are as follows    withcomments set to true to include comments default false    striptext set to true to strip whitespace before and after     text content        default false    rewriteprefixes set to true to replace namespace prefixes by     nnumber        default false    qnameawaretags a set of qname aware tag names in which     prefixes        should be replaced in text content default empty    qnameawareattrs a set of qname aware attribute names in     which prefixes        should be replaced in text content default empty    excludeattrs a set of attribute names that should not be     serialised    excludetags a set of tag names that should not be serialised   in the option list above a set refers to any collection or   iterable of strings no ordering is expected
   new in version 3
8
   changed in version 3
8 the dump function now preserves the   attribute order specified by the user
   new in version 3
2
   new in version 3
9
   note     iterparse only guarantees that it has seen the  character     of a starting tag when it emits a start event so the     attributes are defined but the contents of the text and tail     attributes are undefined at that point
   deprecated since version 3
4 the parser argument
   changed in version 3
8 the comment and pi events were added
   new in version 3
2
   new in version 3
4 the shortemptyelements parameter
   new in version 3
8 the xmldeclaration and defaultnamespace   parameters
   changed in version 3
8 the tostring function now preserves the   attribute order specified by the user
   new in version 3
2
   new in version 3
4 the shortemptyelements parameter
   new in version 3
8 the xmldeclaration and defaultnamespace   parameters
   changed in version 3
8 the tostringlist function now preserves   the attribute order specified by the user
xinclude support
example
   documentthe result might look something like   document xmlnsxihttpwww
reference
functions
   new in version 3
9 the baseurl and maxdepth parameters
element objects
   tag      a string identifying what kind of data this element represents      the element type in other words
      new in version 3
2
      new in version 3
2
      new in version 3
2
      new in version 3
2
elementtree objects
      new in version 3
2
      new in version 3
4 the shortemptyelements parameter
      changed in version 3
8 the write method now preserves the      attribute order specified by the user
qname objects
treebuilder objects
      new in version 3
8
      new in version 3
8
      new in version 3
2
      new in version 3
8
      new in version 3
8
   new in version 3
8
xmlparser objects
   changed in version 3
8 parameters are now keywordonly
 the html   argument no longer supported
xmlpullparser objects
   note     xmlpullparser only guarantees that it has seen the      character of a starting tag when it emits a start event so the     attributes are defined but the contents of the text and tail     attributes are undefined at that point
   new in version 3
4
   changed in version 3
8 the comment and pi events were added
exceptions
 footnotes 1 the encoding string included in xml output should conform to the    appropriate standards
lowlevel api index
this page lists all lowlevel asyncio apis
obtaining the event loop
getrunningloop                        the preferred function to get the running                                                           event loop
                                         asyncio
geteventloop                          get an event loop instance current or via the                                                          policy
                                            asyncio
seteventloop                          set the event loop as current via the current                                                           policy
                                             asyncio
neweventloop                          create a new event loop
                            examples  using asyncio
event loop methods
see also the main documentation section about the event loop methods
 lifecycle  loop
rununtilcomplete                         run a futuretaskawaitable until complete
         loop
runforever                                run the event loop forever
                         loop
stop                                       stop the event loop
                                loop
close                                      close the event loop
                               loop
isrunning                                 return true if the event loop is running
         loop
isclosed                                  return true if the event loop is closed
          await loop
shutdownasyncgens                 close asynchronous generators
                      debugging  loop
setdebug                                  enable or disable the debug mode
                   loop
getdebug                                  get the current debug mode
                         scheduling callbacks  loop
callsoon                                  invoke a callback soon
                             loop
callsoonthreadsafe                       a threadsafe variant of loop
callsoon
        loop
calllater                                 invoke a callback after the given time
           loop
callat                                    invoke a callback at the given time
              threadprocess pool  await loop
runinexecutor                    run a cpubound or other blocking function in a                                                         concurrent
futures executor
                      loop
setdefaultexecutor                       set the default executor for                                                                            loop
runinexecutor
                           tasks and futures  loop
createfuture                              create a future object
                           loop
createtask                                schedule coroutine as a task
                     loop
settaskfactory                           set a factory used by loop
createtask to                                                           create tasks
                                     loop
gettaskfactory                           get the factory loop
createtask uses to                                                            create tasks
                                     dns  await loop
getaddrinfo                        asynchronous version of socket
getaddrinfo
     await loop
getnameinfo                        asynchronous version of socket
getnameinfo
     networking and ipc  await loop
createconnection                  open a tcp connection
                              await loop
createserver                      create a tcp server
                                await loop
createunixconnection             open a unix socket connection
                      await loop
createunixserver                 create a unix socket server
                        await loop
connectacceptedsocket            wrap a socket into a transport protocol                                                          pair
                                               await loop
createdatagramendpoint           open a datagram udp connection
                   await loop
sendfile                           send a file over a transport
                       await loop
starttls                          upgrade an existing connection to tls
              await loop
connectreadpipe                  wrap a read end of a pipe into a transport                                                           protocol pair
                                    await loop
connectwritepipe                 wrap a write end of a pipe into a transport                                                          protocol pair
                                    sockets  await loop
sockrecv                          receive data from the socket
                     await loop
sockrecvinto                     receive data from the socket into a buffer
       await loop
socksendall                       send data to the socket
                          await loop
sockconnect                       connect the socket
                               await loop
sockaccept                        accept a socket connection
                       await loop
socksendfile                      send a file over the socket
                      loop
addreader                                 start watching a file descriptor for read                                                               availability
                                       loop
removereader                              stop watching a file descriptor for read                                                                availability
                                       loop
addwriter                                 start watching a file descriptor for write                                                              availability
                                       loop
removewriter                              stop watching a file descriptor for write                                                               availability
                                       unix signals  loop
addsignalhandler                         add a handler for a signal
                       loop
removesignalhandler                      remove a handler for a signal
                    subprocesses  loop
subprocessexec                            spawn a subprocess
                                 loop
subprocessshell                           spawn a subprocess from a shell command
            error handling  loop
callexceptionhandler                     call the exception handler
                         loop
setexceptionhandler                      set a new exception handler
                        loop
getexceptionhandler                      get the current exception handler
                  loop
defaultexceptionhandler                  the default exception handler implementation
       examples  using asyncio
geteventloop and loop
 using loop
 using loop
createconnection to implement an echoclient
 using loop
createconnection to connect a socket
 using addreader to watch an fd for read events
 using loop
 using loop
subprocessexec
transports
protocols
protocol classes can implement the following callback methods callback connectionmade                      called when a connection is made
                   callback connectionlost                      called when the connection is lost or closed
       callback pausewriting                        called when the transports buffer goes over the                                                        high water mark
                                    callback resumewriting                       called when the transports buffer drains below                                                         the low water mark
                                 streaming protocols tcp unix sockets pipes  callback datareceived                        called when some data is received
                  callback eofreceived                         called when an eof is received
                     buffered streaming protocols  callback getbuffer                           called to allocate a new receive buffer
            callback bufferupdated                       called when the buffer was updated with the                                                             received data
                                      callback eofreceived                         called when an eof is received
                     datagram protocols  callback datagramreceived                    called when a datagram is received
                 callback errorreceived                       called when a previous send or receive operation                                                        raises an oserror
                                subprocess protocols  callback pipedatareceived                   called when the child process writes data into its                                                      stdout or stderr pipe
                          callback pipeconnectionlost                 called when one of the pipes communicating with                                                         the child process is closed
                        callback processexited                       called when the child process has exited
          
event loop policies
policies is a lowlevel mechanism to alter the behavior of functionslike asyncio
geteventloop
  see also the main policies sectionfor more details
 accessing policies  asyncio
geteventlooppolicy                   return the current processwide policy
             asyncio
seteventlooppolicy                   set a new processwide policy
                      abstracteventlooppolicy                           base class for policy objects
                     
codecs  codec registry and base classes
codec base classes
the codecs module defines a set of base classes which define theinterfaces for working with codec objects and can also be used as thebasis for custom codec implementations
each codec has to define four interfaces to make it usable as codec inpython stateless encoder stateless decoder stream reader and streamwriter
 the stream reader and writers typically reuse the statelessencoderdecoder to implement the file protocols
 codec authors alsoneed to define how the codec will handle encoding and decoding errors
error handlers
stateless encoding and decoding
incremental encoding and decoding
stream encoding and decoding
encodings and unicode
standard encodings
python specific encodings
a number of predefined codecs are specific to python so their codecnames have no meaning outside python
 these are listed in the tablesbelow based on the expected input and output types note that whiletext encodings are the most common use case for codecs the underlyingcodec infrastructure supports arbitrary data transforms rather thanjust text encodings
 for asymmetric codecs the stated meaningdescribes the encoding direction
text encodings
binary transforms
text transforms
encodingsidna  internationalized domain names in applications
this module implements rfc 3490 internationalized domain names inapplications and rfc 3492 nameprep a stringprep profile forinternationalized domain names idn
 it builds upon the punycodeencoding and stringprep
these rfcs together define a protocol to support nonascii charactersin domain names
 a domain name containing nonascii characters suchas www
nu is converted into an asciicompatibleencoding ace such as www
 the aceform of the domain name is then used in all places where arbitrarycharacters are not allowed by the protocol such as dns queries httphost fields and so on
 this conversion is carried out in theapplication if possible invisible to the user the application shouldtransparently convert unicode domain labels to idna on the wire andconvert back ace labels to unicode before presenting them to the user
python supports this conversion in several ways  the idna codecperforms conversion between unicode and ace separating an inputstring into labels based on the separator characters defined insection 3
1 of rfc 3490 and converting each label to ace asrequired and conversely separating an input byte string into labelsbased on the 
 separator and converting any ace labels found intounicode
 furthermore the socket module transparently convertsunicode host names to ace so that applications need not be concernedabout converting host names themselves when they pass them to thesocket module
 on top of that modules that have host names asfunction parameters such as http
client and ftplib acceptunicode host names http
client then also transparently sends anidna hostname in the host field if it sends that field at all
when receiving host names from the wire such as in reverse namelookup no automatic conversion to unicode is performed applicationswishing to present such host names to the user should decode them tounicode
the module encodings
idna also implements the nameprep procedurewhich performs certain normalizations on host names to achieve caseinsensitivity of international domain names and to unify similarcharacters
 the nameprep functions can be used directly if desired
namepreplabel   return the nameprepped version of label
 the implementation   currently assumes query strings so allowunassigned is true
toasciilabel   convert a label to ascii as specified in rfc 3490
   usestd3asciirules is assumed to be false
tounicodelabel   convert a label to unicode as specified in rfc 3490
encodingsmbcs  windows ansi codepage
encodingsutf8sig  utf8 codec with bom signature
emailencoders encoders
copyreg  register pickle support functions
source code libcopyreg
pythe copyreg module offers a way to define functions used whilepickling specific objects
  the pickle and copy modules use thosefunctions when picklingcopying those objects
  the module providesconfiguration information about object constructors which are notclasses
 such constructors may be factory functions or classinstances
constructorobject   declares object to be a valid constructor
  if object is not   callable and hence not valid as a constructor raises   typeerror
pickletype function constructornone   declares that function should be used as a reduction function   for objects of type type
  function should return either a   string or a tuple containing two or three elements
   the optional constructor parameter if provided is a callable   object which can be used to reconstruct the object when called with   the tuple of arguments returned by function at pickling time
   typeerror will be raised if object is a class or constructor   is not callable
   see the pickle module for more details on the interface expected   of function and constructor
  note that the dispatchtable   attribute of a pickler object or subclass of pickle
pickler can   also be used for declaring reduction functions
example
the example below would like to show how to register a pickle functionand how it will be used import copyreg copy pickle class c
nis  interface to suns nis yellow pages
the nis module gives a thin wrapper around the nis library usefulfor central administration of several hosts
because nis exists only on unix systems this module is only availablefor unix
the nis module defines the following functionsnis
matchkey mapname domaindefaultdomain   return the match for key in map mapname or raise an error   nis
error if there is none
 both should be strings key is   8bit clean
 return value is an arbitrary array of bytes may   contain null and other joys
   note that mapname is first checked if it is an alias to another   name
   the domain argument allows overriding the nis domain used for the   lookup
 if unspecified lookup is in the default nis domain
catmapname domaindefaultdomain   return a dictionary mapping key to value such that matchkey   mapnamevalue
 note that both keys and values of the dictionary   are arbitrary arrays of bytes
   note that mapname is first checked if it is an alias to another   name
   the domain argument allows overriding the nis domain used for the   lookup
 if unspecified lookup is in the default nis domain
mapsdomaindefaultdomain   return a list of all valid maps
   the domain argument allows overriding the nis domain used for the   lookup
 if unspecified lookup is in the default nis domain
getdefaultdomain   return the system default nis domain
the nis module defines the following exceptionexception nis
error   an error raised when a nis function returns an error code
custom python interpreters
the modules described in this chapter allow writing interfaces similarto pythons interactive interpreter
  if you want a python interpreterthat supports some special feature in addition to the python languageyou should look at the code module
  the codeop module is lowerlevel used to support compiling a possiblyincomplete chunk of pythoncode
the full list of modules described in this chapter is code  interpreter base classes   interactive interpreter objects   interactive console objects codeop  compile python code
importing modules
the modules described in this chapter provide new ways to import otherpython modules and hooks for customizing the import process
the full list of modules described in this chapter is zipimport  import modules from zip archives   zipimporter objects   examples pkgutil  package extension utility modulefinder  find modules used by a script   example usage of modulefinder runpy  locating and executing python modules importlib  the implementation of import   introduction   functions   importlib
abc  abstract base classes related to import   importlib
resources  resources   importlib
util  utility code for importers   examples     importing programmatically     checking if a module can be imported     importing a source file directly     setting up an importer     approximating importlib
metadata   overview   functional api     entry points     distribution metadata     distribution versions     distribution files     distribution requirements   distributions   extending the search algorithm
msvcrt  useful routines from the ms vc runtime
these functions provide access to some useful capabilities on windowsplatforms
 some higherlevel modules use these functions to build thewindows implementations of their services
  for example the getpassmodule uses this in the implementation of the getpass function
further documentation on these functions can be found in the platformapi documentation
the module implements both the normal and wide char variants of theconsole io api
 the normal api deals only with ascii characters andis of limited use for internationalized applications
 the wide charapi should be used where ever possible
changed in version 3
3 operations in this module now raise oserrorwhere ioerror was raised
file operations
lockingfd mode nbytes   lock part of a file based on file descriptor fd from the c   runtime
  raises oserror on failure
  the locked region of the   file extends from the current file position for nbytes bytes and   may continue beyond the end of the file
  mode must be one of the   lk constants listed below
 multiple regions in a file may be   locked at the same time but may not overlap
  adjacent regions are   not merged they must be unlocked individually
   raises an auditing event msvcrt
locking with arguments fd   mode nbytes
lkrlck   locks the specified bytes
 if the bytes cannot be locked the   program immediately tries again after 1 second
  if after 10   attempts the bytes cannot be locked oserror is raised
lknbrlck   locks the specified bytes
 if the bytes cannot be locked oserror   is raised
lkunlck   unlocks the specified bytes which must have been previously   locked
setmodefd flags   set the lineend translation mode for the file descriptor fd
 to   set it to text mode flags should be os
otext for binary it   should be os
obinary
openosfhandlehandle flags   create a c runtime file descriptor from the file handle handle
   the flags parameter should be a bitwise or of os
oappend   os
ordonly and os
otext
  the returned file descriptor may   be used as a parameter to os
fdopen to create a file object
   raises an auditing event msvcrt
openosfhandle with arguments   handle flags
getosfhandlefd   return the file handle for the file descriptor fd
  raises   oserror if fd is not recognized
   raises an auditing event msvcrt
getosfhandle with argument fd
console io
kbhit   return true if a keypress is waiting to be read
getch   read a keypress and return the resulting character as a byte   string
 nothing is echoed to the console
  this call will block if   a keypress is not already available but will not wait for enter   to be pressed
 if the pressed key was a special function key this   will return 000 or xe0 the next call will return the   keycode
 the controlc keypress cannot be read with this   function
getwch   wide char variant of getch returning a unicode value
getche   similar to getch but the keypress will be echoed if it   represents a printable character
getwche   wide char variant of getche returning a unicode value
putchchar   print the byte string char to the console without buffering
putwchunicodechar   wide char variant of putch accepting a unicode value
ungetchchar   cause the byte string char to be pushed back into the console   buffer it will be the next character read by getch or   getche
ungetwchunicodechar   wide char variant of ungetch accepting a unicode value
other functions
heapmin   force the malloc heap to clean itself up and return unused   blocks to the operating system
  on failure this raises oserror
ipaddress  ipv4ipv6 manipulation library
source code libipaddress
pyipaddress provides the capabilities to create manipulate andoperate on ipv4 and ipv6 addresses and networks
the functions and classes in this module make it straightforward tohandle various tasks related to ip addresses including checkingwhether or not two hosts are on the same subnet iterating over allhosts in a particular subnet checking whether or not a stringrepresents a valid ip address or network definition and so on
this is the full module api reference—for an overview andintroduction see an introduction to the ipaddress module
new in version 3
3
convenience factory functions
the ipaddress module provides factory functions to convenientlycreate ip addresses networks and interfacesipaddress
ipaddressaddress   return an ipv4address or ipv6address object depending on the ip   address passed as argument
  either ipv4 or ipv6 addresses may be   supplied integers less than 232 will be considered to be ipv4 by   default
 a valueerror is raised if address does not represent a   valid ipv4 or ipv6 address
ipnetworkaddress stricttrue   return an ipv4network or ipv6network object depending on the ip   address passed as argument
  address is a string or integer   representing the ip network
  either ipv4 or ipv6 networks may be   supplied integers less than 232 will be considered to be ipv4 by   default
  strict is passed to ipv4network or ipv6network   constructor
  a valueerror is raised if address does not   represent a valid ipv4 or ipv6 address or if the network has host   bits set
ipinterfaceaddress   return an ipv4interface or ipv6interface object depending on   the ip address passed as argument
  address is a string or   integer representing the ip address
  either ipv4 or ipv6 addresses   may be supplied integers less than 232 will be considered to be   ipv4 by default
  a valueerror is raised if address does not   represent a valid ipv4 or ipv6 address
one downside of these convenience functions is that the need to handleboth ipv4 and ipv6 formats means that error messages provide minimalinformation on the precise error as the functions dont know whetherthe ipv4 or ipv6 format was intended
 more detailed error reportingcan be obtained by calling the appropriate version specific classconstructors directly
ip addresses
address objects
conversion to strings and integers
operators
ip network definitions
prefix net mask and host mask
network objects
   changed in version 3
5 added the twotuple form for the address   constructor parameter
subnetofa      true      new in version 3
7
supernetofb      true      new in version 3
7
132      0      deprecated since version 3
7 it uses the same ordering and      comparison algorithm as   and class ipaddress
   changed in version 3
5 added the twotuple form for the address   constructor parameter
operators
iterationnetwork objects can be iterated to list all the addresses belonging tothe network
interface objects
operators
other module level functions
custom exceptions
asynchat  asynchronous socket commandresponse handler
pydeprecated since version 3
6 please use asyncio instead
note  this module exists for backwards compatibility only
  for new code  we recommend using asyncio
       term         description                                          string     will call foundterminator when the                        string is found in the input stream                  integer    will call foundterminator when the                        indicated number of characters have been                       received                                             none       the channel continues to collect data forever       note that any data following the terminator will be available for   reading by the channel after foundterminator is called
asynchat example
distutils  building and installing python modules
the distutils package provides support for building and installingadditional modules into a python installation
  the new modules may beeither 100pure python or may be extension modules written in c ormay be collections of python packages which include modules coded inboth python and c
most python users will not want to use this module directly butinstead use the crossversion tools maintained by the python packagingauthority
 in particular setuptools is an enhanced alternative todistutils that provides support for declaring project dependencies additional mechanisms for configuring which files to include in  source releases including plugins for integration with version  control systems the ability to declare project entry points which can be used as  the basis for application plugin systems the ability to automatically generate windows command line  executables at installation time rather than needing to prebuild  them consistent behaviour across all supported python versionsthe recommended pip installer runs all setup
py scripts withsetuptools even if the script itself only imports distutils
refer to the python packaging user guide for more information
for the benefits of packaging tool authors and users seeking a deeperunderstanding of the details of the current packaging and distributionsystem the legacy distutils based user documentation and apireference remain available installing python modules legacy version distributing python modules legacy version
ossaudiodev  access to osscompatible audio devices
changed in version 3
3 operations in this module now raise oserrorwhere ioerror was raised
see also  open sound system programmers guide     the official documentation for the oss c api  the module defines a large number of constants supplied by the oss  device driver see syssoundcard
audio device objects
   changed in version 3
5 writable byteslike object is now   accepted
   changed in version 3
5 writable byteslike object is now   accepted
changed in version 3
2 audio device objects also support the contextmanagement protocol i
  some of the formats supported by oss are       format                     description                                          afmtmulaw              a logarithmic encoding used by sun 
  common rates are       rate     description                                        8000     default rate for devaudio                      11025    speech recording                                   22050                                                       44100    cd quality audio at 16 bitssample and 2                channels                                          96000    dvd quality audio at 24 bitssample          ossaudiodevice
mixer device objects
changed in version 3
2 mixer objects also support the contextmanagement protocol
multiprocessing  processbased parallelism
source code libmultiprocessing
introduction
multiprocessing is a package that supports spawning processes usingan api similar to the threading module
  the multiprocessingpackage offers both local and remote concurrency effectively sidestepping the global interpreter lock by using subprocesses insteadof threads
  due to this the multiprocessing module allows theprogrammer to fully leverage multiple processors on a given machine
it runs on both unix and windows
the multiprocessing module also introduces apis which do not haveanalogs in the threading module
  a prime example of this is thepool object which offers a convenient means of parallelizing theexecution of a function across multiple input values distributing theinput data across processes data parallelism
  the following exampledemonstrates the common practice of defining such functions in amodule so that child processes can successfully import that module
this basic example of data parallelism using pool   from multiprocessing import pool   def fx       return xx   if name  main       with pool5 as p           printp
mapf 1 2 3will print to standard output   1 4 9
the process class
in multiprocessing processes are spawned by creating a processobject and then calling its start method
  process follows theapi of threading
thread
  a trivial example of a multiprocessprogram is   from multiprocessing import process   def fname       printhello name   if name  main       p  processtargetf argsbob       p
jointo show the individual process ids involved here is an expandedexample   from multiprocessing import process   import os   def infotitle       printtitle       printmodule name name       printparent process os
joinfor an explanation of why the if name  main part isnecessary see programming guidelines
contexts and start methods
exchanging objects between processes
multiprocessing supports two types of communication channel betweenprocessesqueues   the queue class is a near clone of queue
queue
  for example      from multiprocessing import process queue      def fq          q
join   queues are thread and process safe
pipes   the pipe function returns a pair of connection objects   connected by a pipe which by default is duplex twoway
  for   example      from multiprocessing import process pipe      def fconn          conn
join   the two connection objects returned by pipe represent the two   ends of the pipe
  each connection object has send and recv   methods among others
  note that data in a pipe may become   corrupted if two processes or threads try to read from or write   to the same end of the pipe at the same time
  of course there is   no risk of corruption from processes using different ends of the   pipe at the same time
synchronization between processes
multiprocessing contains equivalents of all the synchronizationprimitives from threading
  for instance one can use a lock toensure that only one process prints to standard output at a time   from multiprocessing import process lock   def fl i       l
startwithout using the lock output from the different processes is liableto get all mixed up
sharing state between processes
as mentioned above when doing concurrent programming it is usuallybest to avoid using shared state as far as possible
  this isparticularly true when using multiple processes
however if you really do need to use some shared data thenmultiprocessing provides a couple of ways of doing so
shared memory   data can be stored in a shared memory map using value or array
   for example the following code      from multiprocessing import process value array      def fn a          n
value          printarr   will print      3
1415927      0 1 2 3 4 5 6 7 8 9   the d and i arguments used when creating num and arr   are typecodes of the kind used by the array module d   indicates a double precision float and i indicates a signed   integer
  these shared objects will be process and threadsafe
   for more flexibility in using shared memory one can use the   multiprocessing
sharedctypes module which supports the creation   of arbitrary ctypes objects allocated from shared memory
server process   a manager object returned by manager controls a server process   which holds python objects and allows other processes to manipulate   them using proxies
   a manager returned by manager will support types list   dict namespace lock rlock semaphore   boundedsemaphore condition event barrier queue   value and array
  for example      from multiprocessing import process manager      def fd l          d1  1          d2  2          d0
join              printd              printl   will print      0
25 none 1 1 2 2      9 8 7 6 5 4 3 2 1 0   server process managers are more flexible than using shared memory   objects because they can be made to support arbitrary object types
   also a single manager can be shared by processes on different   computers over a network
 they are however slower than using   shared memory
using a pool of workers
the pool class represents a pool of worker processes
  it hasmethods which allows tasks to be offloaded to the worker processes ina few different ways
for example   from multiprocessing import pool timeouterror   import time   import os   def fx       return xx   if name  main        start 4 worker processes       with poolprocesses4 as pool            print 0 1 4
timeouterror           printfor the moment the pool remains available for more work        exiting the withblock has stopped the pool       printnow the pool is closed and no longer availablenote that the methods of a pool should only ever be used by theprocess which created it
note  functionality within this package requires that the main  module be importable by the children
 this is covered in programming  guidelines however it is worth pointing out here
 this means that  some examples such as the multiprocessing
pool examples will  not work in the interactive interpreter
 for example      from multiprocessing import pool      p  pool5      def fx     
mapf 123     process poolworker1     process poolworker2     process poolworker3     traceback most recent call last     traceback most recent call last     traceback most recent call last     attributeerror module object has no attribute f     attributeerror module object has no attribute f     attributeerror module object has no attribute f  if you try this it will actually output three full tracebacks  interleaved in a semirandom fashion and then you may have to stop  the parent process somehow
reference
the multiprocessing package mostly replicates the api of thethreading module
process and exceptions
pipes and queues
miscellaneous
activechildren   return list of all live children of the current process
   calling this has the side effect of joining any processes which   have already finished
cpucount   return the number of cpus in the system
   this number is not equivalent to the number of cpus the current   process can use
  the number of usable cpus can be obtained with   lenos
schedgetaffinity0   may raise notimplementederror
   see also os
cpucountmultiprocessing
currentprocess   return the process object corresponding to the current process
   an analogue of threading
currentthread
multiprocessing
parentprocess   return the process object corresponding to the parent process of   the currentprocess
 for the main process parentprocess   will be none
   new in version 3
8
multiprocessing
freezesupport   add support for when a program which uses multiprocessing has   been frozen to produce a windows executable
  has been tested with   py2exe pyinstaller and cxfreeze
   one needs to call this function straight after the if name    main line of the main module
  for example      from multiprocessing import process freezesupport      def f          printhello world      if name  main          freezesupport          processtargetf
start   if the freezesupport line is omitted then trying to run the   frozen executable will raise runtimeerror
   calling freezesupport has no effect when invoked on any   operating system other than windows
  in addition if the module is   being run normally by the python interpreter on windows the   program has not been frozen then freezesupport has no   effect
getallstartmethods   returns a list of the supported start methods the first of which   is the default
  the possible start methods are fork spawn   and forkserver
  on windows only spawn is available
  on   unix fork and spawn are always supported with fork   being the default
   new in version 3
4
getcontextmethodnone   return a context object which has the same attributes as the   multiprocessing module
   if method is none then the default context is returned
   otherwise method should be fork spawn forkserver
   valueerror is raised if the specified start method is not   available
   new in version 3
4
multiprocessing
getstartmethodallownonefalse   return the name of start method used for starting processes
   if the start method has not been fixed and allownone is false   then the start method is fixed to the default and the name is   returned
  if the start method has not been fixed and allownone   is true then none is returned
   the return value can be fork spawn forkserver or   none
  fork is the default on unix while spawn is the   default on windows
   new in version 3
4
multiprocessing
setexecutable   sets the path of the python interpreter to use when starting a   child process
 by default sys
executable is used
  embedders   will probably need to do some thing like      setexecutableos
exe   before they can create child processes
   changed in version 3
4 now supported on unix when the spawn   start method is used
setstartmethodmethod   set the method which should be used to start child processes
   method can be fork spawn or forkserver
   note that this should be called at most once and it should be   protected inside the if name  main clause of the main   module
   new in version 3
4
note  multiprocessing contains no analogues of  threading
activecount threading
enumerate  threading
settrace threading
timer  or threading
local
connection objects
synchronization primitives
shared ctypes objects
managers
proxy objects
a proxy is an object which refers to a shared object which livespresumably in a different process
  the shared object is said to bethe referent of the proxy
  multiple proxy objects may have the samereferent
a proxy object has methods which invoke corresponding methods of itsreferent although not every method of the referent will necessarilybe available through the proxy
  in this way a proxy can be usedjust like its referent can    from multiprocessing import manager    manager  manager    l  manager
    l4   16    l25   4 9 16notice that applying str to a proxy will return the representationof the referent whereas applying repr will return therepresentation of the proxy
an important feature of proxy objects is that they are picklable sothey can be passed between processes
  as such a referent can containproxy objects
  this permits nesting of these managed lists dictsand other proxy objects    a  manager
list    b  manager
list    a
appendb          referent of a now contains referent of b    printa b   listproxy object typeid list at 
     b
appendhello    printa0 b   hello hellosimilarly dict and list proxies may be nested inside one another    louter  manager
list manager
dict for i in range2     dfirstinner  louter0    dfirstinnera  1    dfirstinnerb  2    louter1c  3    louter1z  26    printlouter0   a 1 b 2    printlouter1   c 3 z 26if standard nonproxy list or dict objects are contained in areferent modifications to those mutable values will not be propagatedthrough the manager because the proxy has no way of knowing when thevalues contained within are modified
  however storing a value in acontainer proxy which triggers a setitem on the proxy objectdoes propagate through the manager and so to effectively modify suchan item one could reassign the modified value to the containerproxy    create a list proxy and append a mutable object a dictionary   lproxy  manager
list   lproxy
append    now mutate the dictionary   d  lproxy0   da  1   db  2    at this point the changes to d are not yet synced but by    updating the dictionary the proxy is notified of the change   lproxy0  dthis approach is perhaps less convenient than employing nested proxyobjects for most use cases but also demonstrates a level of controlover the synchronization
note  the proxy types in multiprocessing do nothing to support  comparisons by value
  so for instance we have      manager
list123  123     false  one should just use a copy of the referent instead when making  comparisons
class multiprocessing
managers
baseproxy   proxy objects are instances of subclasses of baseproxy
   callmethodmethodname args kwds      call and return the result of a method of the proxys referent
      if proxy is a proxy whose referent is obj then the      expression         proxy
callmethodmethodname args kwds      will evaluate the expression         getattrobj methodnameargs kwds      in the managers process
      the returned value will be a copy of the result of the call or a      proxy to a new shared object  see documentation for the      methodtotypeid argument of basemanager
register
      if an exception is raised by the call then is reraised by      callmethod
  if some other exception is raised in the      managers process then this is converted into a remoteerror      exception and is raised by callmethod
      note in particular that an exception will be raised if      methodname has not been exposed
      an example of the usage of callmethod          l  manager
listrange10          l
callmethodlen         10          l
callmethodgetitem slice2 7  equivalent to l27         2 3 4 5 6          l
callmethodgetitem 20           equivalent to l20         traceback most recent call last         
         indexerror list index out of range   getvalue      return a copy of the referent
      if the referent is unpicklable then this will raise an      exception
   repr      return a representation of the proxy object
   str      return the representation of the referent
cleanupa proxy object uses a weakref callback so that when it gets garbagecollected it deregisters itself from the manager which owns itsreferent
a shared object gets deleted from the manager process when there areno longer any proxies referring to it
process pools
listeners and clients
authentication keys
logging
the multiprocessingdummy module
dummy replicates the api of multiprocessing but isno more than a wrapper around the threading module
programming guidelines
there are certain guidelines and idioms which should be adhered towhen using multiprocessing
all start methods
the spawn and forkserver start methods
examples
demonstration of how to create and use customized managers andproxies   from multiprocessing import freezesupport   from multiprocessing
exposed      if name  main       freezesupport       testusing pool   import multiprocessing   import time   import random   import sys       functions used by test code      def calculatefunc args       result  funcargs       return s says that ss  s             multiprocessing
freezesupport       testan example showing how to use queues to feed tasks to a collection ofworker processes and collect the results   import time   import random   from multiprocessing import process queue currentprocess freezesupport       function run by worker processes      def workerinput output       for func args in iterinput
selectors  highlevel io multiplexing
new in version 3
4
source code libselectors
introduction
note  the type of file objects supported depends on the platform on  windows sockets are supported but not pipes whereas on unix both  are supported some other types may be supported as well such as  fifos or special file devices
see also  select     lowlevel io multiplexing module
classes
 it can be acombination of the modules constants below       constant                 meaning                                                eventread             available for read                                     eventwrite            available for write                                class selectors
      note        this method can return before any file object becomes ready or        the timeout has elapsed if the current process receives a        signal in this case an empty list will be returned
      changed in version 3
5 the selector is now retried with a      recomputed timeout when interrupted by a signal if the signal      handler did not raise an exception see pep 475 for the      rationale instead of returning an empty list of events before      the timeout
   new in version 3
5
examples
tkinterscrolledtext  scrolled text widget
source code libtkinterscrolledtext
pythe tkinter
scrolledtext module provides a class of the same namewhich implements a basic text widget which has a vertical scroll barconfigured to do the right thing
  using the scrolledtext class isa lot easier than setting up a text widget and scroll bar directly
the text widget and scrollbar are packed together in a frame andthe methods of the grid and pack geometry managers are acquiredfrom the frame object
  this allows the scrolledtext widget to beused directly to achieve most normal geometry management behavior
should more specific control be necessary the following attributesare availableclass tkinter
scrolledtextmasternone kw   frame      the frame which surrounds the text and scroll bar widgets
   vbar      the scroll bar widget
the python profilers
source code libprofile
py and libpstats
introduction to the profilers
cprofile and profile provide deterministic profiling of pythonprograms
 a profile is a set of statistics that describes how oftenand for how long various parts of the program executed
 thesestatistics can be formatted into reports via the pstats module
the python standard library provides two different implementations ofthe same profiling interface1
 cprofile is recommended for most users its a c extension with   reasonable overhead that makes it suitable for profiling long   running programs
  based on lsprof contributed by brett rosen   and ted czotter
 profile a pure python module whose interface is imitated by   cprofile but which adds significant overhead to profiled   programs
 if youre trying to extend the profiler in some way the   task might be easier with this module
  originally designed and   written by jim roskind
note  the profiler modules are designed to provide an execution profile  for a given program not for benchmarking purposes for that there  is timeit for reasonably accurate results
  this particularly  applies to benchmarking python code against c code the profilers  introduce overhead for python code but not for clevel functions  and so the c code would seem faster than any python one
instant users manual
profile and cprofile module reference
both the profile and cprofile modules provide the followingfunctionsprofile
 see context manager types      import cprofile      with cprofile
printstats   changed in version 3
8 added context manager support
   enable      start collecting profiling data
 only in cprofile
   disable      stop collecting profiling data
 only in cprofile
   createstats      stop collecting profiling data and record the results internally      as the current profile
   dumpstatsfilename      write the results of the current profile to filename
the stats class
   stats objects have the following methods   stripdirs      this method for the stats class removes all leading path      information from file names
      the following are the valid string and sortkey             valid string arg    valid enum arg         meaning                             calls           sortkey
calls          call count                          cumulative      sortkey
cumulative     cumulative time                     cumtime         na                    cumulative time                     file            na                    file name                           filename        sortkey
filename       file name                           module          na                    file name                           ncalls          na                    call count                          pcalls          sortkey
pcalls         primitive call count                line            sortkey
line           line number                         name            sortkey
name           function name                       nfl             sortkey
nfl            namefileline                      stdname         sortkey
stdname        standard name                       time            sortkey
time           internal time                       tottime         na                    internal time                      note that all sorts on statistics are in descending order      placing most time consuming items first where as name file      and line number searches are in ascending order alphabetical
      new in version 3
7 added the sortkey enum
            new in version 3
9 added the following dataclasses            statsprofile functionprofile
what is deterministic profiling
deterministic profiling is meant to reflect the fact that allfunction call function return and exception events aremonitored and precise timings are made for the intervals betweenthese events during which time the users code is executing
  incontrast statistical profiling which is not done by this modulerandomly samples the effective instruction pointer and deduces wheretime is being spent
  the latter technique traditionally involves lessoverhead as the code does not need to be instrumented but providesonly relative indications of where time is being spent
in python since there is an interpreter active during execution thepresence of instrumented code is not required in order to dodeterministic profiling
 python automatically provides a hookoptional callback for each event
 in addition the interpretednature of python tends to add so much overhead to execution thatdeterministic profiling tends to only add small processing overhead intypical applications
  the result is that deterministic profiling isnot that expensive yet provides extensive run time statistics aboutthe execution of a python program
call count statistics can be used to identify bugs in code surprisingcounts and to identify possible inlineexpansion points high callcounts
  internal time statistics can be used to identify hot loopsthat should be carefully optimized
  cumulative time statistics shouldbe used to identify high level errors in the selection of algorithms
note that the unusual handling of cumulative times in this profilerallows statistics for recursive implementations of algorithms to bedirectly compared to iterative implementations
limitations
one limitation has to do with accuracy of timing information
 there isa fundamental problem with deterministic profilers involving accuracy
the most obvious restriction is that the underlying clock is onlyticking at a rate typically of about 
001 seconds
  hence nomeasurements will be more accurate than the underlying clock
  ifenough measurements are taken then the error will tend to averageout
 unfortunately removing this first error induces a second sourceof error
the second problem is that it takes a while from when an event isdispatched until the profilers call to get the time actually getsthe state of the clock
  similarly there is a certain lag whenexiting the profiler event handler from the time that the clocksvalue was obtained and then squirreled away until the users codeis once again executing
  as a result functions that are called manytimes or call many functions will typically accumulate this error
the error that accumulates in this fashion is typically less than theaccuracy of the clock less than one clock tick but it canaccumulate and become very significant
the problem is more important with profile than with the loweroverhead cprofile
  for this reason profile provides a means ofcalibrating itself for a given platform so that this error can beprobabilistically on the average removed
 after the profiler iscalibrated it will be more accurate in a least square sense but itwill sometimes produce negative numbers when call counts areexceptionally low and the gods of probability work against you 
 do not be alarmed by negative numbers in the profile
  they shouldonly appear if you have calibrated your profiler and the resultsare actually better than without calibration
calibration
the profiler of the profile module subtracts a constant from eachevent handling time to compensate for the overhead of calling the timefunction and socking away the results
  by default the constant is0
 the following procedure can be used to obtain a better constant fora given platform see limitations
when you have a consistent answer there are three ways you can useit   import profile    1
using a custom timer
   be warned that you should calibrate the profiler class for the   timer function that you choose see calibration
  for most   machines a timer that returns a lone integer value will provide   the best results in terms of low overhead during profiling
   os
times is pretty bad as it returns a tuple of floating   point values
  if you want to substitute a better timer in the   cleanest fashion derive a class and hardwire a replacement   dispatch method that best handles your timer call along with the   appropriate calibration constant
sched  event scheduler
source code libsched
pythe sched module defines a class which implements a general purposeevent schedulerclass sched
sleep   the scheduler class defines a generic interface to scheduling   events
 it needs two functions to actually deal with the outside   world  timefunc should be callable without arguments and   return  a number the time in any units whatsoever
  the   delayfunc function should be callable with one argument   compatible with the output of timefunc and should delay that   many time units
 delayfunc will also be called with the argument   0 after each event is run to allow other threads an opportunity   to run in multithreaded applications
   changed in version 3
3 timefunc and delayfunc parameters are   optional
   changed in version 3
3 scheduler class can be safely used in   multithreaded environments
example    import sched time    s  sched
scheduler objects
scheduler instances have the following methods and attributesscheduler
enterabstime priority action argument kwargs   schedule a new event
 the time argument should be a numeric type   compatible with the return value of the timefunc function passed   to the constructor
 events scheduled for the same time will be   executed in the order of their priority
 a lower number   represents a higher priority
   executing the event means executing actionargument kwargs
   argument is a sequence holding the positional arguments for   action
 kwargs is a dictionary holding the keyword arguments   for action
   return value is an event which may be used for later cancellation   of the event see cancel
   changed in version 3
3 argument parameter is optional
   changed in version 3
3 kwargs parameter was added
enterdelay priority action argument kwargs   schedule an event for delay more time units
 other than the   relative time the other arguments the effect and the return value   are the same as those for enterabs
   changed in version 3
3 argument parameter is optional
   changed in version 3
3 kwargs parameter was added
cancelevent   remove the event from the queue
 if event is not an event   currently in the queue this method will raise a valueerror
empty   return true if the event queue is empty
runblockingtrue   run all scheduled events
 this method will wait  using the   delayfunc function passed to the constructor for the next   event then execute it and so on until there are no more scheduled   events
   if blocking is false executes the scheduled events due to expire   soonest if any and then return the deadline of the next scheduled   call in the scheduler if any
   either action or delayfunc can raise an exception
  in either   case the scheduler will maintain a consistent state and propagate   the exception
  if an exception is raised by action the event   will not be attempted in future calls to run
   if a sequence of events takes longer to run than the time available   before the next event the scheduler will simply fall behind
  no   events will be dropped the calling code is responsible for   canceling  events which are no longer pertinent
   changed in version 3
3 blocking parameter was added
queue   readonly attribute returning a list of upcoming events in the   order they will be run
  each event is shown as a named tuple   with the following fields  time priority action argument   kwargs
crypt  function to check unix passwords
hashing methods
new in version 3
3
   new in version 3
7
module attributes
new in version 3
3
module functions
   changed in version 3
3 accept crypt
method values in addition   to strings for salt
   new in version 3
3
   changed in version 3
7 added the rounds parameter
examples
structured markup processing tools
python supports a variety of modules to work with various forms ofstructured data markup
  this includes modules to work with thestandard generalized markup language sgml and the hypertext markuplanguage html and several interfaces for working with theextensible markup language xml
 html  hypertext markup language support html
parser  simple html and xhtml parser   example html parser application   htmlparser methods   examples html
entities  definitions of html general entities xml processing modules   xml vulnerabilities   the defusedxml package xml
elementtree  the elementtree xml api   tutorial     xml tree and elements     parsing xml     pull api for nonblocking parsing     finding interesting elements     modifying an xml file     building xml documents     parsing xml with namespaces     additional resources   xpath support     example     supported xpath syntax   reference     functions   xinclude support     example   reference     functions     element objects     elementtree objects     qname objects     treebuilder objects     xmlparser objects     xmlpullparser objects     exceptions xml
dom  the document object model api   module contents   objects in the dom     domimplementation objects     node objects     nodelist objects     documenttype objects     document objects     element objects     attr objects     namednodemap objects     comment objects     text and cdatasection objects     processinginstruction objects     exceptions   conformance     type mapping     accessor methods xml
handler  base classes for sax handlers   contenthandler objects   dtdhandler objects   entityresolver objects   errorhandler objects xml
saxutils  sax utilities xml
xmlreader  interface for xml parsers   xmlreader objects   incrementalparser objects   locator objects   inputsource objects   the attributes interface   the attributesns interface xml
expat  fast xml parsing using expat   xmlparser objects   expaterror exceptions   example   content model descriptions   expat error constants
uuid  uuid objects according to rfc
safeuuid   new in version 3
7
fields   a tuple of the six integer fields of the uuid which are also   available as six individual attributes and two derived attributes       field                           meaning                                timelow                      the first 32 bits of the uuid          timemid                      the next 16 bits of the uuid           timehiversion               the next 16 bits of the uuid           clockseqhivariant          the next 8 bits of the uuid            clockseqlow                 the next 8 bits of the uuid            node                          the last 48 bits of the uuid           time                          the 60bit timestamp                   clockseq                     the 14bit sequence number         uuid
   new in version 3
7
   changed in version 3
7 universally administered mac addresses are   preferred over locally administered mac addresses since the former   are guaranteed to be globally unique while the latter are not
see also  rfc 4122  a universally unique identifier uuid urn namespace     this specification defines a uniform resource name namespace for     uuids the internal format of uuids and methods of generating     uuids
example
htmlparser  simple html and xhtml parser
source code libhtmlparser
pythis module defines a class htmlparser which serves as the basis forparsing text files formatted in html hypertext markup language andxhtml
htmlparser convertcharrefstrue   create a parser instance able to parse invalid markup
   if convertcharrefs is true the default all character   references except the ones in scriptstyle elements are   automatically converted to the corresponding unicode characters
   an htmlparser instance is fed html data and calls handler methods   when start tags end tags text comments and other markup   elements are encountered
  the user should subclass htmlparser   and override its methods to implement the desired behavior
   this parser does not check that end tags match start tags or call   the endtag handler for elements which are closed implicitly by   closing an outer element
   changed in version 3
4 convertcharrefs keyword argument added
   changed in version 3
5 the default value for argument   convertcharrefs is now true
example html parser application
htmlparser methods
examples
cgitb  traceback manager for cgi scripts
source code libcgitb
pythe cgitb module provides a special exception handler for pythonscripts
 its name is a bit misleading
  it was originally designed todisplay extensive traceback information in html for cgi scripts
  itwas later generalized to also display this information in plain text
after this module is activated if an uncaught exception occurs adetailed formatted report will be displayed
  the report includes atraceback showing excerpts of the source code for each level as wellas the values of the arguments and local variables to currentlyrunning functions to help you debug the problem
  optionally you cansave this information to a file instead of sending it to the browser
to enable this feature simply add this to the top of your cgi script   import cgitb   cgitb
enablethe options to the enable function control whether the report isdisplayed in the browser and whether the report is logged to a filefor later analysis
enabledisplay1 logdirnone context5 formathtml   this function causes the cgitb module to take over the   interpreters default handling for exceptions by setting the value   of sys
excepthook
   the optional argument display defaults to 1 and can be set to   0 to suppress sending the traceback to the browser
 if the   argument logdir is present the traceback reports are written to   files
  the value of logdir should be a directory where these   files will be placed
 the optional argument context is the number   of lines of context to display around the current line of source   code in the traceback this defaults to 5
 if the optional   argument format is html the output is formatted as html
   any other value forces plain text output
  the default value is   html
textinfo context5   this function handles the exception described by info a 3tuple   containing the result of sys
excinfo formatting its   traceback as text and returning the result as a string
 the   optional argument context is the number of lines of context to   display around the current line of source code in the traceback   this defaults to 5
htmlinfo context5   this function handles the exception described by info a 3tuple   containing the result of sys
excinfo formatting its   traceback as html and returning the result as a string
 the   optional argument context is the number of lines of context to   display around the current line of source code in the traceback   this defaults to 5
handlerinfonone   this function handles an exception using the default settings that   is show a report in the browser but dont log to a file
 this   can be used when youve caught an exception and want to report it   using cgitb
  the optional info argument should be a 3tuple   containing an exception type exception value and traceback   object exactly like the tuple returned by sys
excinfo
  if   the info argument is not supplied the current exception is   obtained from sys
excinfo
unicodedata  unicode database
builtins  builtin objects
this module provides direct access to all builtin identifiers ofpython for example builtins
open is the full name for the builtinfunction open
  see builtin functions and builtin constants fordocumentation
this module is not normally accessed explicitly by most applicationsbut can be useful in modules that provide objects with the same nameas a builtin value but in which the builtin of that name is alsoneeded
  for example in a module that wants to implement an openfunction that wraps the builtin open this module can be useddirectly   import builtins   def openpath       f  builtins
as an implementation detail most modules have the name builtinsmade available as part of their globals
  the value of builtinsis normally either this module or the value of this modulesdict attribute
 since this is an implementation detail it maynot be used by alternate implementations of python
dis  disassembler for python bytecode
pythe dis module supports the analysis of cpython bytecode bydisassembling it
 the cpython bytecode which this module takes as aninput is defined in the file includeopcode
h and used by thecompiler and the interpreter
cpython implementation detail bytecode is an implementationdetail of the cpython interpreter
  no guarantees are made thatbytecode will not be added removed or changed between versions ofpython
  use of this module should not be considered to work acrosspython vms or python releases
changed in version 3
6 use 2 bytes for each instruction
 previouslythe number of bytes varied by instruction
example given the function myfunc   def myfuncalist       return lenalistthe following command can be used to display the disassembly ofmyfunc    dis
dismyfunc     2           0 loadglobal              0 len                 2 loadfast                0 alist                 4 callfunction            1                 6 returnvaluethe 2 is a line number
bytecode analysis
new in version 3
4
the bytecode analysis api allows pieces of python code to be wrappedin a bytecode object that provides easy access to details of thecompiled code
bytecodex  firstlinenone currentoffsetnone   analyse the bytecode corresponding to a function generator   asynchronous generator coroutine method string of source code   or a code object as returned by compile
   this is a convenience wrapper around many of the functions listed   below most notably getinstructions as iterating over a   bytecode instance yields the bytecode operations as instruction   instances
   if firstline is not none it indicates the line number that   should be reported for the first source line in the disassembled   code
  otherwise the source line information if any is taken   directly from the disassembled code object
   if currentoffset is not none it refers to an instruction   offset in the disassembled code
 setting this means dis will   display a current instruction marker against the specified   opcode
   classmethod fromtracebacktb      construct a bytecode instance from the given traceback      setting currentoffset to the instruction responsible for the      exception
   codeobj      the compiled code object
   firstline      the first source line of the code object if available   dis      return a formatted view of the bytecode operations the same as      printed by dis
dis but returned as a multiline string
   info      return a formatted multiline string with detailed information      about the code object like codeinfo
   changed in version 3
7 this can now handle coroutine and   asynchronous generator objects
example    bytecode  dis
analysis functions
python bytecode instructions
opcode collections
xmlsax  support for sax2 parsers
warning  the xml
  if you need to parse untrusted or unauthenticated data see  xml vulnerabilities
changed in version 3
1 the sax parser no longer processes generalexternal entities by default to increase security
 before the parsercreated network connections to fetch remote files or loaded localfiles from the file system for dtd and entities
 the feature can beenabled again with method setfeature on the parser object andargument featureexternalges
   changed in version 3
8 the parserlist argument can be any   iterable not just a list
   changed in version 3
5 added support of str instances
see also  sax the simple api for xml     this site is the focal point for the definition of the sax api
saxexception objects
python development mode
new in version 3
7
ctypes  a foreign function library for python
ctypes is a foreign function library for python
  it provides ccompatible data types and allows calling functions in dlls or sharedlibraries
  it can be used to wrap these libraries in pure python
ctypes tutorial
note the code samples in this tutorial use doctest to make surethat they actually work
  since some code samples behave differentlyunder linux windows or mac os x they contain doctest directives incomments
note some code samples reference the ctypes cint type
  onplatforms where sizeoflong  sizeofint it is an alias toclong
 so you should not be confused if clong is printed if youwould expect cint  they are actually the same type
loading dynamic link libraries
accessing functions from loaded dlls
calling functions
fundamental data types
ctypes defines a number of primitive c compatible data types ctypes type             c type                                      python type                   cbool                bool                                     bool 1                      cchar                char                                      1character bytes object      cwchar               wchart                                   1character string            cbyte                char                                      int                           cubyte               unsigned char                             int                           cshort               short                                     int                           cushort              unsigned short                            int                           cint                 int                                       int                           cuint                unsigned int                              int                           clong                long                                      int                           culong               unsigned long                             int                           clonglong            int64 or long long                    int                           culonglong           unsigned int64 or unsigned long long  int                           csizet              sizet                                    int                           cssizet             ssizet or pyssizet                   int                           cfloat               float                                     float                         cdouble              double                                    float                         clongdouble          long double                               float                         ccharp              char  nul terminated                   bytes object or none        cwcharp             wchart  nul terminated                string or none              cvoidp              void                                     int or none                1
 the constructor accepts any object with a truth value
all these types can be created by calling them with an optionalinitializer of the correct type and value    cint   clong0    cwcharphello world   cwcharp140018365411392    cushort3   cushort65533   since these types are mutable their value can also be changedafterwards    i  cint42    printi   clong42    printi
value   99   assigning a new value to instances of the pointer types ccharpcwcharp and cvoidp changes the memory location they pointto not the contents of the memory block of course not becausepython bytes objects are immutable    s  hello world    cs  cwcharps    printcs   cwcharp139966785747344    printcs
value   hi there    prints                 first object is unchanged   hello world   you should be careful however not to pass them to functionsexpecting pointers to mutable memory
 if you need mutable memoryblocks ctypes has a createstringbuffer function which createsthese in various ways
  the current memory block contents can beaccessed or changed with the raw property if you want to accessit as nul terminated string use the value property    from ctypes import     p  createstringbuffer3             create a 3 byte buffer initialized to nul bytes    printsizeofp reprp
raw   10 bhix00lox00x00x00x00x00   the createstringbuffer function replaces the cbufferfunction which is still available as an alias as well as thecstring function from earlier ctypes releases
  to create amutable memory block containing unicode characters of the c typewchart use the createunicodebuffer function
calling functions continued
calling functions with your own custom data types
specifying the required argument types function prototypes
it is possible to specify the required argument types of functionsexported from dlls by setting the argtypes attribute
argtypes must be a sequence of c data types the printf functionis probably not a good example here because it takes a variablenumber and different types of parameters depending on the formatstring on the other hand this is quite handy to experiment with thisfeature    printf
200000   37   specifying a format protects against incompatible argument types justas a prototype for a c function and tries to convert the argumentsto valid types    printfbd d d 1 2 3   traceback most recent call last     file stdin line 1 in module   argumenterror argument 2 exceptions
000000   13   if you have defined your own classes which you pass to function callsyou have to implement a fromparam class method for them to beable to use them in the argtypes sequence
 the fromparam classmethod receives the python object passed to the function call itshould do a typecheck or whatever is needed to make sure this objectis acceptable and then return the object itself its asparameterattribute or whatever you want to pass as the c function argument inthis case
 again the result should be an integer string bytes actypes instance or an object with an asparameter attribute
return types
passing pointers or passing parameters by reference
structures and unions
structureunion alignment and byte order
by default structure and union fields are aligned in the same way thec compiler does it
 it is possible to override this behavior byspecifying a pack class attribute in the subclass definition
 thismust be set to a positive integer and specifies the maximum alignmentfor the fields
 this is what pragma packn also does in msvc
ctypes uses the native byte order for structures and unions
  tobuild structures with nonnative byte order you can use one of thebigendianstructure littleendianstructure bigendianunion andlittleendianunion base classes
  these classes cannot containpointer fields
bit fields in structures and unions
it is possible to create structures and unions containing bit fields
bit fields are only possible for integer fields the bit width isspecified as the third item in the fields tuples    class intstructure   
arrays
pointers
pointer instances are created by calling the pointer function on actypes type    from ctypes import     i  cint42    pi  pointeri   pointer instances have a contents attribute which returns the objectto which the pointer points the i object above    pi
contents   clong42   note that ctypes does not have oor original object return itconstructs a new equivalent object each time you retrieve anattribute    pi
contents   false   assigning another cint instance to the pointers contents attributewould cause the pointer to point to the memory location where this isstored    i  cint99    pi
contents   clong99   pointer instances can also be indexed with integers    pi0   99   assigning to an integer index changes the pointed to value    printi   clong99    pi0  22    printi   clong22   it is also possible to use indexes different from 0 but you must knowwhat youre doing just as in c you can access or change arbitrarymemory locations
 generally you only use this feature if you receive apointer from a c function and you know that the pointer actuallypoints to an array instead of a single item
behind the scenes the pointer function does more than simplycreate pointer instances it has to create pointer types first
 thisis done with the pointer function which accepts any ctypestype and returns a new type    pi  pointercint    pi   class ctypes
   calling the pointer type without an argument creates a null pointer
null pointers have a false boolean value    nullptr  pointercint    printboolnullptr   false   ctypes checks for null when dereferencing pointers butdereferencing invalid nonnull pointers would crash python    nullptr0   traceback most recent call last       
type conversions
usually ctypes does strict type checking
  this means if you havepointercint in the argtypes list of a function or as the typeof a member field in a structure definition only instances of exactlythe same type are accepted
  there are some exceptions to this rulewhere ctypes accepts other objects
  for example you can passcompatible array instances instead of pointer types
  so forpointercint ctypes accepts an array of cint    class barstructure   
   1   2   3   in addition if a function argument is explicitly declared to be apointer type such as pointercint in argtypes an object ofthe pointed type cint in this case can be passed to the function
ctypes will apply the required byref conversion in this caseautomatically
to set a pointer type field to null you can assign none    bar
values  none   sometimes you have instances of incompatible types
  in c you cancast one type into another type
  ctypes provides a castfunction which can be used in the same way
  the bar structuredefined above accepts pointercint pointers or cint arrays forits values field but not instances of other types    bar
values  cbyte  4   traceback most recent call last     file stdin line 1 in module   typeerror incompatible types cbytearray4 instance instead of lpclong instance   for these cases the cast function is handy
the cast function can be used to cast a ctypes instance into apointer to a different ctypes data type
  cast takes twoparameters a ctypes object that is or can be converted to a pointerof some kind and a ctypes pointer type
  it returns an instance ofthe second argument which references the same memory block as thefirst argument    a  cbyte  4    casta pointercint   ctypes
   so cast can be used to assign to the values field of bar thestructure    bar  bar    bar
incomplete types
incomplete types are structures unions or arrays whose members arenot yet specified
 in c they are specified by forward declarationswhich are defined later   struct cell  forward declaration    struct cell        char name       struct cell next   the straightforward translation into ctypes code would be this but itdoes not work    class cellstructure   
   traceback most recent call last     file stdin line 1 in module     file stdin line 2 in cell   nameerror name cell is not defined   because the new class cell is not available in the class statementitself
 in ctypes we can define the cell class and set thefields attribute later after the class statement    from ctypes import     class cellstructure   
                  next pointercell   lets try it
 we create two instances of cell and let them point toeach other and finally follow the pointer chain a few times    c1  cell    c1
callback functions
accessing values exported from dlls
some shared libraries not only export functions they also exportvariables
 an example in the python library itself is thepyoptimizeflag an integer set to 0 1 or 2 depending on the oor oo flag given on startup
ctypes can access values like this with the indll class methodsof the type
  pythonapi is a predefined symbol giving access to thepython c api    optflag  cint
indllpythonapi pyoptimizeflag    printoptflag   clong0   if the interpreter would have been started with o the sample wouldhave printed clong1 or clong2 if oo would have beenspecified
an extended example which also demonstrates the use of pointersaccesses the pyimportfrozenmodules pointer exported by python
quoting the docs for that value   this pointer is initialized to point to an array of struct   frozen records terminated by one whose members are all null or   zero
  when a frozen module is imported it is searched in this   table
  thirdparty code could play tricks with this to provide a   dynamically created collection of frozen modules
so manipulating this pointer could even prove useful
 to restrict theexample size we show only how this table can be read with ctypes    from ctypes import        class structfrozenstructure   
   we have defined the struct frozen data type so we can get thepointer to the table    frozentable  pointerstructfrozen    table  frozentable
indllpythonapi pyimportfrozenmodules   since table is a pointer to the array of structfrozen recordswe can iterate over it but we just have to make sure that our loopterminates because pointers have no size
 sooner or later it wouldprobably crash with an access violation or whatever so its better tobreak out of the loop when we hit the null entry    for item in table   
spam 161   the fact that standard python has a frozen module and a frozen packageindicated by the negative size member is not well known it isonly used for testing
 try it out with import hello for example
surprises
there are some edges in ctypes where you might expect somethingother than what actually happens
consider the following example    from ctypes import     class pointstructure   
y   3 4 3 4   hm
 we certainly expected the last statement to print 3 4 1 2
 whathappened here are the steps of the rc
b  rc
a lineabove    temp0 temp1  rc
b  temp1   note that temp0 and temp1 are objects still using the internalbuffer of the rc object above
 so executing rc
a  temp0 copiesthe buffer contents of temp0 into rc s buffer
  this in turnchanges the contents of temp1
 so the last assignment rc
b temp1 doesnt have the expected effect
keep in mind that retrieving subobjects from structure unions andarrays doesnt copy the subobject instead it retrieves a wrapperobject accessing the rootobjects underlying buffer
another example that may behave differently from what one would expectis this    s  ccharp    s
value   false   note  objects instantiated from ccharp can only have their value set  to bytes or integers
why is it printing false  ctypes instances are objects containing amemory block plus some descriptors accessing the contents of thememory
 storing a python object in the memory block does not store theobject itself instead the contents of the object is stored
accessing the contents again constructs a new python object each time
variablesized data types
ctypes provides some support for variablesized arrays andstructures
   valueerror minimum size is 8    resizeshortarray 32    sizeofshortarray   32    sizeoftypeshortarray   8   this is nice and fine but how would one access the additionalelements contained in this array  since the type still only knowsabout 4 elements we get errors accessing other elements    shortarray   0 0 0 0    shortarray7   traceback most recent call last       
   indexerror invalid index   another way to use variablesized data types with ctypes is to usethe dynamic nature of python and redefine the data type after therequired size is already known on a case by case basis
ctypes reference
finding shared libraries
loading shared libraries
there are several ways to load shared libraries into the pythonprocess
  one way is to instantiate one of the following classesclass ctypes
cdllname modedefaultmode handlenone useerrnofalse uselasterrorfalse winmode0   instances of this class represent loaded shared libraries
   functions in these libraries use the standard c calling convention   and are assumed to return int
   on windows creating a cdll instance may fail even if the dll name   exists
 when a dependent dll of the loaded dll is not found a   oserror error is raised with the message winerror 126 the   specified module could not be found
 this error message does not   contain the name of the missing dll because the windows api does   not return this information making this error hard to diagnose
 to   resolve this error and determine which dll is not found you need   to find the list of dependent dlls and determine which one is not   found using windows debugging and tracing tools
see also microsoft dumpbin tool  a tool to find dll dependents
oledllname modedefaultmode handlenone useerrnofalse uselasterrorfalse winmode0   windows only instances of this class represent loaded shared   libraries functions in these libraries use the stdcall calling   convention and are assumed to return the windows specific   hresult code
  hresult values contain information specifying   whether the function call failed or succeeded together with   additional error code
  if the return value signals a failure an   oserror is automatically raised
   changed in version 3
3 windowserror used to be raised
windllname modedefaultmode handlenone useerrnofalse uselasterrorfalse winmode0   windows only instances of this class represent loaded shared   libraries functions in these libraries use the stdcall calling   convention and are assumed to return int by default
   on windows ce only the standard calling convention is used for   convenience the windll and oledll use the standard calling   convention on this platform
the python global interpreter lock is released before calling anyfunction exported by these libraries and reacquired afterwards
pydllname modedefaultmode handlenone   instances of this class behave like cdll instances except that   the python gil is not released during the function call and   after the function execution the python error flag is checked
 if   the error flag is set a python exception is raised
   thus this is only useful to call python c api functions directly
all these classes can be instantiated by calling them with at leastone argument the pathname of the shared library
  if you have anexisting handle to an already loaded shared library it can be passedas the handle named parameter otherwise the underlying platformsdlopen or loadlibrary function is used to load the library intothe process and to get a handle to it
the mode parameter can be used to specify how the library is loaded
for details consult the dlopen3 manpage
  on windows mode isignored
  on posix systems rtldnow is always added and is notconfigurable
the useerrno parameter when set to true enables a ctypesmechanism that allows accessing the system errno error number in asafe way
 ctypes maintains a threadlocal copy of the systemserrno variable if you call foreign functions created withuseerrnotrue then the errno value before the function call isswapped with the ctypes private copy the same happens immediatelyafter the function call
the function ctypes
geterrno returns the value of the ctypesprivate copy and the function ctypes
seterrno changes the ctypesprivate copy to a new value and returns the former value
the uselasterror parameter when set to true enables the samemechanism for the windows error code which is managed by thegetlasterror and setlasterror windows api functionsctypes
getlasterror and ctypes
setlasterror are used torequest and change the ctypes private copy of the windows error code
the winmode parameter is used on windows to specify how the libraryis loaded since mode is ignored
 it takes any value that is validfor the win32 api loadlibraryex flags parameter
 when omitted thedefault is to use the flags that result in the most secure dll load toavoiding issues such as dll hijacking
 passing the full path to thedll is the safest way to ensure the correct library and dependenciesare loaded
changed in version 3
8 added winmode parameter
rtldglobal   flag to use as mode parameter
  on platforms where this flag is   not available it is defined as the integer zero
defaultmode   the default mode which is used to load shared libraries
  on osx   10
3 this is rtldglobal otherwise it is the same as   rtldlocal
instances of these classes have no public methods
  functions exportedby the shared library can be accessed as attributes or by index
please note that accessing the function through an attribute cachesthe result and therefore accessing it repeatedly returns the sameobject each time
  on the other hand accessing it through an indexreturns a new object each time    from ctypes import cdll    libc  cdlllibc
time   true    libctime  libctime   falsethe following public attributes are available their name starts withan underscore to not clash with exported function namespydll
handle   the system handle used to access the library
name   the name of the library passed in the constructor
shared libraries can also be loaded by using one of the prefabricatedobjects which are instances of the libraryloader class either bycalling the loadlibrary method or by retrieving the library asattribute of the loader instance
libraryloaderdlltype   class which loads shared libraries
  dlltype should be one of the   cdll pydll windll or oledll types
   getattr has special behavior it allows loading a shared   library by accessing it as attribute of a library loader instance
   the result is cached so repeated attribute accesses return the   same library each time
   loadlibraryname      load a shared library into the process and return it
  this      method always returns a new instance of the library
these prefabricated library loaders are availablectypes
cdll   creates cdll instances
windll   windows only creates windll instances
oledll   windows only creates oledll instances
pydll   creates pydll instances
for accessing the c python api directly a readytouse python sharedlibrary object is availablectypes
pythonapi   an instance of pydll that exposes python c api functions as   attributes
  note that all these functions are assumed to return c   int which is of course not always the truth so you have to   assign the correct restype attribute to use these functions
loading a library through any of these objects raises an auditingevent ctypes
dlopen with string argument name the name used toload the library
accessing a function on a loaded library raises an auditing eventctypes
dlsym with arguments library the library object andname the symbols name as a string or integer
in cases when only the library handle is available rather than theobject accessing a function raises an auditing eventctypes
dlsymhandle with arguments handle the raw library handleand name
foreign functions
as explained in the previous section foreign functions can beaccessed as attributes of loaded shared libraries
  the functionobjects created in this way by default accept any number of argumentsaccept any ctypes data instances as arguments and return the defaultresult type specified by the library loader
 they are instances of aprivate classclass ctypes
funcptr   base class for c callable foreign functions
   instances of foreign functions are also c compatible data types   they represent c function pointers
   this behavior can be customized by assigning to special attributes   of the foreign function object
   restype      assign a ctypes type to specify the result type of the foreign      function
 use none for void a function not returning      anything
      it is possible to assign a callable python object that is not a      ctypes type in this case the function is assumed to return a c      int and the callable will be called with this integer      allowing further processing or error checking
  using this is      deprecated for more flexible post processing or error checking      use a ctypes data type as restype and assign a callable to the      errcheck attribute
   argtypes      assign a tuple of ctypes types to specify the argument types      that the function accepts
  functions using the stdcall      calling convention can only be called with the same number of      arguments as the length of this tuple functions using the c      calling convention accept additional unspecified arguments as      well
      when a foreign function is called each actual argument is      passed to the fromparam class method of the items in the      argtypes tuple this method allows adapting the actual      argument to an object that the foreign function accepts
  for      example a ccharp item in the argtypes tuple will convert      a string passed as argument into a bytes object using ctypes      conversion rules
      new it is now possible to put items in argtypes which are not      ctypes types but each item must have a fromparam method      which returns a value usable as argument integer string      ctypes instance
  this allows defining adapters that can adapt      custom objects as function parameters
   errcheck      assign a python function or another callable to this attribute
      the callable will be called with three or more arguments      callableresult func arguments         result is what the foreign function returns as specified         by the restype attribute
         func is the foreign function object itself this allows         reusing the same callable object to check or post process the         results of several functions
         arguments is a tuple containing the parameters originally         passed to the function call this allows specializing the         behavior on the arguments used
      the object that this function returns will be returned from the      foreign function call but it can also check the result value      and raise an exception if the foreign function call failed
exception ctypes
argumenterror   this exception is raised when a foreign function call cannot   convert one of the passed arguments
on windows when a foreign function call raises a system exceptionfor example due to an access violation it will be captured andreplaced with a suitable python exception
 further an auditing eventctypes
sehexception with argument code will be raised allowingan audit hook to replace the exception with its own
some ways to invoke foreign function calls may raise an auditing eventctypes
callfunction with arguments function pointer andarguments
function prototypes
utility functions
addressofobj   returns the address of the memory buffer as integer
  obj must be   an instance of a ctypes type
   raises an auditing event ctypes
addressof with argument obj
alignmentobjortype   returns the alignment requirements of a ctypes type
 objortype   must be a ctypes type or instance
byrefobj offset   returns a lightweight pointer to obj which must be an instance   of a ctypes type
  offset defaults to zero and must be an   integer that will be added to the internal pointer value
   byrefobj offset corresponds to this c code      char obj  offset   the returned object can only be used as a foreign function call   parameter
 it behaves similar to pointerobj but the   construction is a lot faster
castobj type   this function is similar to the cast operator in c
 it returns a   new instance of type which points to the same memory block as   obj
  type must be a pointer type and obj must be an object   that can be interpreted as a pointer
createstringbufferinitorsize sizenone   this function creates a mutable character buffer
 the returned   object is a ctypes array of cchar
   initorsize must be an integer which specifies the size of the   array or a bytes object which will be used to initialize the array   items
   if a bytes object is specified as first argument the buffer is   made one item larger than its length so that the last element in   the array is a nul termination character
 an integer can be passed   as second argument which allows specifying the size of the array if   the length of the bytes should not be used
   raises an auditing event ctypes
createstringbuffer with   arguments init size
createunicodebufferinitorsize sizenone   this function creates a mutable unicode character buffer
 the   returned object is a ctypes array of cwchar
   initorsize must be an integer which specifies the size of the   array or a string which will be used to initialize the array   items
   if a string is specified as first argument the buffer is made one   item larger than the length of the string so that the last element   in the array is a nul termination character
 an integer can be   passed as second argument which allows specifying the size of the   array if the length of the string should not be used
   raises an auditing event ctypes
createunicodebuffer with   arguments init size
dllcanunloadnow   windows only this function is a hook which allows implementing in   process com servers with ctypes
  it is called from the   dllcanunloadnow function that the ctypes extension dll exports
dllgetclassobject   windows only this function is a hook which allows implementing in   process com servers with ctypes
  it is called from the   dllgetclassobject function that the ctypes extension dll   exports
findlibraryname   try to find a library and return a pathname
  name is the library   name without any prefix like lib suffix like 
so 
dylib or   version number this is the form used for the posix linker option   l
  if no library can be found returns none
   the exact functionality is system dependent
findmsvcrt   windows only return the filename of the vc runtime library used by   python and by the extension modules
  if the name of the library   cannot be determined none is returned
   if you need to free memory for example allocated by an extension   module with a call to the freevoid  it is important that you   use the function in the same library that allocated the memory
formaterrorcode   windows only returns a textual description of the error code   code
  if no error code is specified the last error code is used   by calling the windows api function getlasterror
getlasterror   windows only returns the last error code set by windows in the   calling thread
 this function calls the windows getlasterror   function directly it does not return the ctypesprivate copy of   the error code
geterrno   returns the current value of the ctypesprivate copy of the system   errno variable in the calling thread
   raises an auditing event ctypes
geterrno with no arguments
getlasterror   windows only returns the current value of the ctypesprivate copy   of the system lasterror variable in the calling thread
   raises an auditing event ctypes
getlasterror with no arguments
memmovedst src count   same as the standard c memmove library function copies count   bytes from src to dst
 dst and src must be integers or   ctypes instances that can be converted to pointers
memsetdst c count   same as the standard c memset library function fills the memory   block at address dst with count bytes of value c
 dst must   be an integer specifying an address or a ctypes instance
pointertype   this factory function creates and returns a new ctypes pointer   type
 pointer types are cached and reused internally so calling   this function repeatedly is cheap
 type must be a ctypes type
pointerobj   this function creates a new pointer instance pointing to obj
   the returned object is of the type pointertypeobj
   note if you just want to pass a pointer to an object to a foreign   function call you should use byrefobj which is much faster
resizeobj size   this function resizes the internal memory buffer of obj which   must be an instance of a ctypes type
  it is not possible to make   the buffer smaller than the native size of the objects type as   given by sizeoftypeobj but it is possible to enlarge the   buffer
seterrnovalue   set the current value of the ctypesprivate copy of the system   errno variable in the calling thread to value and return the   previous value
   raises an auditing event ctypes
seterrno with argument errno
setlasterrorvalue   windows only set the current value of the ctypesprivate copy of   the system lasterror variable in the calling thread to value   and return the previous value
   raises an auditing event ctypes
setlasterror with argument   error
sizeofobjortype   returns the size in bytes of a ctypes type or instance memory   buffer
 does the same as the c sizeof operator
stringataddress size1   this function returns the c string starting at memory address   address as a bytes object
 if size is specified it is used as   size otherwise the string is assumed to be zeroterminated
   raises an auditing event ctypes
stringat with arguments   address size
winerrorcodenone descrnone   windows only this function is probably the worstnamed thing in   ctypes
 it creates an instance of oserror
  if code is not   specified getlasterror is called to determine the error code
 if   descr is not specified formaterror is called to get a   textual description of the error
   changed in version 3
3 an instance of windowserror used to be   created
wstringataddress size1   this function returns the wide character string starting at memory   address address as a string
  if size is specified it is used   as the number of characters of the string otherwise the string is   assumed to be zeroterminated
   raises an auditing event ctypes
wstringat with arguments   address size
data types
cdata   this nonpublic class is the common base class of all ctypes data   types
 among other things all ctypes type instances contain a   memory block that hold c compatible data the address of the memory   block is returned by the addressof helper function
 another   instance variable is exposed as objects this contains other   python objects that need to be kept alive in case the memory block   contains pointers
   common methods of ctypes data types these are all class methods   to be exact they are methods of the metaclass   frombuffersource offset      this method returns a ctypes instance that shares the buffer of      the source object
  the source object must support the      writeable buffer interface
  the optional offset parameter      specifies an offset into the source buffer in bytes the default      is zero
  if the source buffer is not large enough a      valueerror is raised
      raises an auditing event ctypes
cdatabuffer with arguments      pointer size offset
   frombuffercopysource offset      this method creates a ctypes instance copying the buffer from      the source object buffer which must be readable
  the optional      offset parameter specifies an offset into the source buffer in      bytes the default is zero
  if the source buffer is not large      enough a valueerror is raised
      raises an auditing event ctypes
cdatabuffer with arguments      pointer size offset
   fromaddressaddress      this method returns a ctypes type instance using the memory      specified by address which must be an integer
      this method and others that indirectly call this method raises      an auditing event ctypes
cdata with argument address
   fromparamobj      this method adapts obj to a ctypes type
  it is called with      the actual object used in a foreign function call when the type      is present in the foreign functions argtypes tuple it must      return an object that can be used as a function call parameter
      all ctypes data types have a default implementation of this      classmethod that normally returns obj if that is an instance      of the type
  some types accept other objects as well
   indlllibrary name      this method returns a ctypes type instance exported by a shared      library
 name is the name of the symbol that exports the data      library is the loaded shared library
   common instance variables of ctypes data types   bbase      sometimes ctypes data instances do not own the memory block they      contain instead they share part of the memory block of a base      object
  the bbase readonly member is the root ctypes      object that owns the memory block
   bneedsfree      this readonly variable is true when the ctypes data instance      has allocated the memory block itself false otherwise
   objects      this member is either none or a dictionary containing python      objects that need to be kept alive so that the memory block      contents is kept valid
  this object is only exposed for      debugging never modify the contents of this dictionary
fundamental data types
simplecdata   this nonpublic class is the base class of all fundamental ctypes   data types
 it is mentioned here because it contains the common   attributes of the fundamental ctypes data types
  simplecdata is   a subclass of cdata so it inherits their methods and   attributes
 ctypes data types that are not and do not contain   pointers can now be pickled
   instances have a single attribute   value      this attribute contains the actual value of the instance
 for      integer and pointer types it is an integer for character      types it is a single character bytes object or string for      character pointer types it is a python bytes object or string
      when the value attribute is retrieved from a ctypes instance      usually a new object is returned each time
  ctypes does not      implement original object return always a new object is      constructed
  the same is true for all other ctypes object      instances
fundamental data types when returned as foreign function callresults or for example by retrieving structure field members orarray items are transparently converted to native python types
  inother words if a foreign function has a restype of ccharp youwill always receive a python bytes object not a ccharpinstance
subclasses of fundamental data types do not inherit this behavior
so if a foreign functions restype is a subclass of cvoidp youwill receive an instance of this subclass from the function call
 ofcourse you can get the value of the pointer by accessing the valueattribute
these are the fundamental ctypes data typesclass ctypes
cbyte   represents the c signed char datatype and interprets the value   as small integer
  the constructor accepts an optional integer   initializer no overflow checking is done
cchar   represents the c char datatype and interprets the value as a   single character
  the constructor accepts an optional string   initializer the length of the string must be exactly one   character
ccharp   represents the c char  datatype when it points to a zero   terminated string
  for a general character pointer that may also   point to binary data pointercchar must be used
  the   constructor accepts an integer address or a bytes object
cdouble   represents the c double datatype
  the constructor accepts an   optional float initializer
clongdouble   represents the c long double datatype
  the constructor accepts   an optional float initializer
  on platforms where sizeoflong   double  sizeofdouble it is an alias to cdouble
cfloat   represents the c float datatype
  the constructor accepts an   optional float initializer
cint   represents the c signed int datatype
  the constructor accepts an   optional integer initializer no overflow checking is done
  on   platforms where sizeofint  sizeoflong it is an alias to   clong
cint8   represents the c 8bit signed int datatype
  usually an alias for   cbyte
cint16   represents the c 16bit signed int datatype
  usually an alias   for cshort
cint32   represents the c 32bit signed int datatype
  usually an alias   for cint
cint64   represents the c 64bit signed int datatype
  usually an alias   for clonglong
clong   represents the c signed long datatype
  the constructor accepts   an optional integer initializer no overflow checking is done
clonglong   represents the c signed long long datatype
  the constructor   accepts an optional integer initializer no overflow checking is   done
cshort   represents the c signed short datatype
  the constructor accepts   an optional integer initializer no overflow checking is done
csizet   represents the c sizet datatype
cssizet   represents the c ssizet datatype
   new in version 3
2
cubyte   represents the c unsigned char datatype it interprets the value   as small integer
  the constructor accepts an optional integer   initializer no overflow checking is done
cuint   represents the c unsigned int datatype
  the constructor accepts   an optional integer initializer no overflow checking is done
  on   platforms where sizeofint  sizeoflong it is an alias for   culong
cuint8   represents the c 8bit unsigned int datatype
  usually an alias   for cubyte
cuint16   represents the c 16bit unsigned int datatype
  usually an alias   for cushort
cuint32   represents the c 32bit unsigned int datatype
  usually an alias   for cuint
cuint64   represents the c 64bit unsigned int datatype
  usually an alias   for culonglong
culong   represents the c unsigned long datatype
  the constructor accepts   an optional integer initializer no overflow checking is done
culonglong   represents the c unsigned long long datatype
  the constructor   accepts an optional integer initializer no overflow checking is   done
cushort   represents the c unsigned short datatype
  the constructor   accepts an optional integer initializer no overflow checking is   done
cvoidp   represents the c void  type
  the value is represented as   integer
 the constructor accepts an optional integer initializer
cwchar   represents the c wchart datatype and interprets the value as a   single character unicode string
  the constructor accepts an   optional string initializer the length of the string must be   exactly one character
cwcharp   represents the c wchart  datatype which must be a pointer to a   zeroterminated wide character string
  the constructor accepts an   integer address or a string
cbool   represent the c bool datatype more accurately bool from   c99
  its value can be true or false and the constructor   accepts any object that has a truth value
hresult   windows only represents a hresult value which contains success   or error information for a function or method call
pyobject   represents the c pyobject  datatype
  calling this without an   argument creates a null pyobject  pointer
the ctypes
wintypes module provides quite some other windowsspecific data types for example hwnd wparam or dword
  someuseful structures like msg or rect are also defined
structured data types
unionargs kw   abstract base class for unions in native byte order
bigendianstructureargs kw   abstract base class for structures in big endian byte order
littleendianstructureargs kw   abstract base class for structures in little endian byte order
structures with nonnative byte order cannot contain pointer typefields or any other data types containing pointer type fields
structureargs kw   abstract base class for structures in native byte order
   concrete structure and union types must be created by subclassing   one of these types and at least define a fields class   variable
 ctypes will create descriptors which allow reading   and writing the fields by direct attribute accesses
  these are the   fields      a sequence defining the structure fields
  the items must be      2tuples or 3tuples
  the first item is the name of the field      the second item specifies the type of the field it can be any      ctypes data type
      for integer type fields like cint a third optional item can      be given
  it must be a small positive integer defining the bit      width of the field
      field names must be unique within one structure or union
  this      is not checked only one field can be accessed when names are      repeated
      it is possible to define the fields class variable after      the class statement that defines the structure subclass this      allows creating data types that directly or indirectly reference      themselves         class liststructure             pass         list
                               the fields class variable must however be defined before      the type is first used an instance is created sizeof is      called on it and so on
  later assignments to the fields      class variable will raise an attributeerror
      it is possible to define subsubclasses of structure types they      inherit the fields of the base class plus the fields defined      in the subsubclass if any
   pack      an optional small integer that allows overriding the alignment      of structure fields in the instance
  pack must already be      defined when fields is assigned otherwise it will have no      effect
   anonymous      an optional sequence that lists the names of unnamed anonymous      fields
 anonymous must be already defined when fields is      assigned otherwise it will have no effect
      the fields listed in this variable must be structure or union      type fields
 ctypes will create descriptors in the structure      type that allows accessing the nested fields directly without      the need to create the structure or union field
      here is an example type windows         class uunion             fields  lptdesc pointertypedesc                         lpadesc pointerarraydesc                         hreftype hreftype         class typedescstructure             anonymous  u             fields  u u                         vt vartype      the typedesc structure describes a com data type the vt      field specifies which one of the union fields is valid
  since      the u field is defined as anonymous field it is now possible      to access the members directly off the typedesc instance
      td
lptdesc and td
lptdesc are equivalent but the former      is faster since it does not need to create a temporary union      instance         td  typedesc         td
lptdesc  pointersometype   it is possible to define subsubclasses of structures they inherit   the fields of the base class
  if the subclass definition has a   separate fields variable the fields specified in this are   appended to the fields of the base class
   structure and union constructors accept both positional and keyword   arguments
  positional arguments are used to initialize member   fields in the same order as they are appear in fields
  keyword   arguments in the constructor are interpreted as attribute   assignments so they will initialize fields with the same name   or create new attributes for names not present in fields
arrays and pointers
arrayargs   abstract base class for arrays
   the recommended way to create concrete array types is by   multiplying any ctypes data type with a positive integer
   alternatively you can subclass this type and define length and   type class variables
 array elements can be read and written   using standard subscript and slice accesses for slice reads the   resulting object is not itself an array
   length      a positive integer specifying the number of elements in the      array
 outofrange subscripts result in an indexerror
 will      be returned by len
   type      specifies the type of each element in the array
   array subclass constructors accept positional arguments used to   initialize the elements in order
pointer   private abstract base class for pointers
   concrete pointer types are created by calling pointer with the   type that will be pointed to this is done automatically by   pointer
   if a pointer points to an array its elements can be read and   written using standard subscript and slice accesses
  pointer   objects have no size so len will raise typeerror
  negative   subscripts will read from the memory before the pointer as in   c and outofrange subscripts will probably crash with an access   violation if youre lucky
   type      specifies the type pointed to
   contents      returns the object to which to pointer points
  assigning to      this attribute changes the pointer to point to the assigned      object
bisect  array bisection algorithm
searching sorted lists
the above bisect functions are useful for finding insertion pointsbut can be tricky or awkward to use for common searching tasks
 thefollowing five functions show how to transform them into the standardlookups for sorted lists   def indexa x       locate the leftmost value exactly equal to x       i  bisectlefta x       if i  lena and ai  x           return i       raise valueerror   def findlta x       find rightmost value less than x       i  bisectlefta x       if i           return ai1       raise valueerror   def findlea x       find rightmost value less than or equal to x       i  bisectrighta x       if i           return ai1       raise valueerror   def findgta x       find leftmost value greater than x       i  bisectrighta x       if i  lena           return ai       raise valueerror   def findgea x       find leftmost item greater than or equal to x       i  bisectlefta x       if i  lena           return ai       raise valueerror
other examples
tkinterttk  tk themed widgets
source code libtkinterttk
see also  tk widget styling support     a document introducing theming support for tk
using ttk
to start using ttk import its module   from tkinter import ttkto override the basic tk widgets the import should follow the tkimport   from tkinter import    from tkinter
see also  converting existing applications to use tile widgets     a monograph using tcl terminology about differences typically     encountered when moving applications to use the new widgets
ttk widgets
ttk comes with 18 widgets twelve of which already existed in tkinterbutton checkbutton entry frame label labelframemenubutton panedwindow radiobutton scale scrollbar andspinbox
 the other six are new combobox notebookprogressbar separator sizegrip and treeview
 and all themare subclasses of widget
tk code   l1  tkinter
labeltexttest fgblack bgwhitettk code   style  ttk
tlabelfor more information about ttkstyling see the style classdocumentation
widget
widget defines standard options and methods supported by tkthemed widgets and is not supposed to be directly instantiated
standard options
all the ttk widgets accepts the following options       option       description                                                           class        specifies the window class
 the class is used when querying                     the option database for the windows other options to                          determine the default bindtags for the window and to select                    the widgets default layout and style
 this option is read                     only and may only be specified when the window is created
           cursor       specifies the mouse cursor to be used for the widget
 if set                    to the empty string the default the cursor is inherited for                  the parent widget
                                                    takefocus    determines whether the window accepts the focus during                          keyboard traversal
 0 1 or an empty string is returned
 if 0                   is returned it means that the window should be skipped                         entirely during keyboard traversal
 if 1 it means that the                     window should receive the input focus as long as it is                          viewable
 and an empty string means that the traversal scripts                  make the decision about whether or not to focus on the window
        style        may be used to specify a custom widget style
                     
scrollable widget options
the following options are supported by widgets that are controlled bya scrollbar
       option            description                                                      xscrollcommand    used to communicate with horizontal scrollbars
  when the                       view in the widgets window change the widget will                             generate a tcl command based on the scrollcommand
                              usually this option consists of the method                                      scrollbar
 this will cause the                        scrollbar to be updated whenever the view in the window                         changes
                                                         yscrollcommand    used to communicate with vertical scrollbars
 for some                          more information see above
                                 
label options
the following options are supported by labels buttons and otherbuttonlike widgets
       option          description                                                        text            specifies a text string to be displayed inside the widget
         textvariable    specifies a name whose value will be used in place of the                       text option resource
                                              underline       if set specifies the index 0based of a character to                         underline in the text string
                                      image           specifies an image to display
 valid                        values are   text display text only   image display                        image only   top bottom left right display image                           above below left of or right of the text respectively
                       none the default
 display the image if present                              otherwise the text
                                                width           if greater than zero specifies how much space in                              character widths to allocate for the text label if less                       than zero specifies a minimum width
compatibility options
    option    description                                                             state     may be set to normal or disabled to control the disabled                 state bit
widget states
the widget state is a bitmap of independent state flags
       flag          description                                                          active        the mouse cursor is over the widget and pressing a mouse                        button will cause some action to occur                               disabled      widget is disabled under program control                             focus         widget has keyboard focus                                            pressed       widget is being pressed                                              selected      on true or current for things like checkbuttons and                     radiobuttons                                                         background    windows and mac have a notion of an active or foreground                      window
 the background state is set for widgets in a                          background window and cleared for those in the foreground                      window                                                               readonly      widget should not allow user modification                            alternate     a widgetspecific alternate display format                           invalid       the widgets value is invalid                                    a state specification is a sequence of state names optionallyprefixed with an exclamation point indicating that the bit is off
ttkwidget
combobox
options
this widget accepts the following specific options       option             description                                                     exportselection    boolean value
                            state              one of normal readonly or disabled
                                        textvariable       specifies a name whose value is linked to the widget                            value
                                        values             specifies the list of values to display in the dropdown                        listbox
                                                        width              specifies an integer value indicating the desired width                         of the entry window in averagesize characters of the                          widgets font
virtual events
ttkcombobox
spinbox
options
this widget accepts the following specific options option                  description                                             from                    float value
                             to                      float value
              increment               float value
                                                 values                  sequence of string or float values
                                           format                  string value
                                                command                 python callable
virtual events
ttkspinbox
notebook
options
this widget accepts the following specific options       option     description                                                             height     if present and greater than zero specifies the desired height                  of the pane area not including internal padding or tabs
                                      width      if present and greater than zero specified the desired width of                the pane area not including internal padding
tab options
there are also specific options for tabs       option       description                                                           state        either normal disabled or hidden
                                          text         specifies a text to be displayed in the tab
                          image        specifies an image to display in the tab
                                             underline    specifies the index 0based of a character to underline in                    the text string
tab identifiers
virtual events
ttknotebook
progressbar
options
this widget accepts the following specific options       option      description                                                            orient      one of horizontal or vertical
                             mode        one of determinate or indeterminate
                value       the current value of the progress bar
ttkprogressbar
separator
options
this widget accepts the following specific option       option    description                                                             orient    one of horizontal or vertical
sizegrip
platformspecific notes
bugs
treeview
options
this widget accepts the following specific options       option            description                                                     columns           a list of column identifiers specifying the number of                         columns and their names
item options
       option    description                                                            text      the textual label to display for the item
                             image     a tk image displayed to the left of the label
                        values    the list of values associated with the item
tag options
the following options may be specified on tags       option        description                                                        foreground    specifies the text foreground color
                               background    specifies the cell or item background color
                       image         specifies the item image in case the items image option                     is empty
column identifiers
notes items option values may be displayed in a different order than the  order in which they are stored
virtual events
       event                 description                                               treeviewselect    generated whenever the selection changes
ttktreeview
       stretch truefalse           specifies whether the columns width should be adjusted           when the widget is resized
       width width           the width of the column in pixels
      to configure the tree column call this with column  0   deleteitems      delete all specified items and all their descendants
      changed in version 3
8 selection no longer takes arguments
      for changing the selection state use the following selection      methods
      changed in version 3
6 items can be passed as separate      arguments not just as a single tuple
      changed in version 3
6 items can be passed as separate      arguments not just as a single tuple
      changed in version 3
6 items can be passed as separate      arguments not just as a single tuple
      changed in version 3
6 items can be passed as separate      arguments not just as a single tuple
ttk styling
see also  tcl2004 conference presentation     this document explains how the theme engine worksclass tkinter
layouts
graphical user interfaces with tk
textwrap  text wrapping and filling
source code libtextwrap
pythe textwrap module provides some convenience functions as well astextwrapper the class that does all the work
 if youre justwrapping or filling one or two text strings the convenience functionsshould be good enough otherwise you should use an instance oftextwrapper for efficiency
wraptext width70 kwargs   wraps the single paragraph in text a string so every line is at   most width characters long
  returns a list of output lines   without final newlines
   optional keyword arguments correspond to the instance attributes of   textwrapper documented below
  width defaults to 70
   see the textwrapper
wrap method for additional details on how   wrap behaves
filltext width70 kwargs   wraps the single paragraph in text and returns a single string   containing the wrapped paragraph
  fill is shorthand for      n
   in particular fill accepts exactly the same keyword arguments   as wrap
shortentext width kwargs   collapse and truncate the given text to fit in the given width
   first the whitespace in text is collapsed all whitespace is   replaced by single spaces
  if the result fits in the width it   is returned
 otherwise enough words are dropped from the end so   that the remaining words plus the placeholder fit within width       textwrap
   optional keyword arguments correspond to the instance attributes of   textwrapper documented below
  note that the whitespace is   collapsed before the text is passed to the textwrapper fill   function so changing the value of tabsize expandtabs   dropwhitespace and replacewhitespace will have no effect
   new in version 3
4
dedenttext   remove any common leading whitespace from every line in text
   this can be used to make triplequoted strings line up with the   left edge of the display while still presenting them in the source   code in indented form
   note that tabs and spaces are both treated as whitespace but they   are not equal the lines   hello and thello are considered   to have no common leading whitespace
   lines containing only whitespace are ignored in the input and   normalized to a single newline character in the output
   for example      def test           end first line with  to avoid the empty line          s            hello            world                    printreprs           prints     hellon      worldn              printreprdedents   prints hellon  worldntextwrap
indenttext prefix predicatenone   add prefix to the beginning of selected lines in text
   lines are separated by calling text
splitlinestrue
   by default prefix is added to all lines that do not consist   solely of whitespace including any line endings
   for example       s  hellonn nworld       indents           hellonn n  world   the optional predicate argument can be used to control which   lines are indented
 for example it is easy to add prefix to even   empty and whitespaceonly lines       printindents   lambda line true       hello                   world   new in version 3
3
wrap fill and shorten work by creating a textwrapperinstance and calling a single method on it
  that instance is notreused so for applications that process many text strings usingwrap andor fill it may be more efficient to create your owntextwrapper object
text is preferably wrapped on whitespaces and right after the hyphensin hyphenated words only then will long words be broken if necessaryunless textwrapper
breaklongwords is set to false
textwrapperkwargs   the textwrapper constructor accepts a number of optional keyword   arguments
  each keyword argument corresponds to an instance   attribute so for example      wrapper  textwrapperinitialindent    is the same as      wrapper  textwrapper      wrapper
initialindent      you can reuse the same textwrapper object many times and you   can change any of its options through direct assignment to instance   attributes between uses
   the textwrapper instance attributes and keyword arguments to the   constructor are as follows   width      default 70 the maximum length of wrapped lines
  as long as      there are no individual words in the input text longer than      width textwrapper guarantees that no output line will be      longer than width characters
   expandtabs      default true if true then all tab characters in text      will be expanded to spaces using the expandtabs method of      text
   tabsize      default 8 if expandtabs is true then all tab characters      in text will be expanded to zero or more spaces depending on      the current column and the given tab size
      new in version 3
3
   replacewhitespace      default true if true after tab expansion but before      wrapping the wrap method will replace each whitespace      character with a single space
  the whitespace characters      replaced are as follows tab newline vertical tab formfeed      and carriage return tnvfr
      note        if expandtabs is false and replacewhitespace is true        each tab character will be replaced by a single space which        is not the same as tab expansion
      note        if replacewhitespace is false newlines may appear in the        middle of a line and cause strange output
 for this reason        text should be split into paragraphs using str
splitlines        or similar which are wrapped separately
   dropwhitespace      default true if true whitespace at the beginning and      ending of every line after wrapping but before indenting is      dropped
 whitespace at the beginning of the paragraph however      is not dropped if nonwhitespace follows it
  if whitespace      being dropped takes up an entire line the whole line is      dropped
   initialindent      default  string that will be prepended to the first line      of wrapped output
  counts towards the length of the first line
      the empty string is not indented
   subsequentindent      default  string that will be prepended to all lines of      wrapped output except the first
  counts towards the length of      each line except the first
   fixsentenceendings      default false if true textwrapper attempts to detect      sentence endings and ensure that sentences are always separated      by exactly two spaces
  this is generally desired for text in a      monospaced font
 however the sentence detection algorithm is      imperfect it assumes that a sentence ending consists of a      lowercase letter followed by one of 
  or       possibly followed by one of  or  followed by a space
      one problem with this is algorithm is that it is unable to      detect the difference between dr
 in         
      and spot
 in         
      fixsentenceendings is false by default
      since the sentence detection algorithm relies on      string
lowercase for the definition of lowercase letter and      a convention of using two spaces after a period to separate      sentences on the same line it is specific to englishlanguage      texts
   breaklongwords      default true if true then words longer than width will      be broken in order to ensure that no lines are longer than      width
  if it is false long words will not be broken and      some lines may be longer than width
  long words will be put      on a line by themselves in order to minimize the amount by      which width is exceeded
   breakonhyphens      default true if true wrapping will occur preferably on      whitespaces and right after hyphens in compound words as it is      customary in english
 if false only whitespaces will be      considered as potentially good places for line breaks but you      need to set breaklongwords to false if you want truly      insecable words
  default behaviour in previous versions was to      always allow breaking hyphenated words
   maxlines      default none if not none then the output will contain at      most maxlines lines with placeholder appearing at the end      of the output
      new in version 3
4
   placeholder      default  
 string that will appear at the end of the      output text if it has been truncated
      new in version 3
4
   textwrapper also provides some public methods analogous to the   modulelevel convenience functions   wraptext      wraps the single paragraph in text a string so every line is      at most width characters long
  all wrapping options are taken      from instance attributes of the textwrapper instance
  returns      a list of output lines without final newlines
  if the wrapped      output has no content the returned list is empty
   filltext      wraps the single paragraph in text and returns a single      string containing the wrapped paragraph
pkgutil  package extension utility
source code libpkgutil
pythis module provides utilities for the import system in particularpackage support
moduleinfomodulefinder name ispkg   a namedtuple that holds a brief summary of a modules info
   new in version 3
6
   deprecated since version 3
3 this emulation is no longer needed   as the standard import mechanism is now fully pep 302 compliant   and available in importlib
   deprecated since version 3
3 this emulation is no longer needed   as the standard import mechanism is now fully pep 302 compliant   and available in importlib
   changed in version 3
3 updated to be based directly on importlib   rather than relying on the package internal pep 302 import   emulation
   changed in version 3
4 updated to be based on pep 451pkgutil
   changed in version 3
3 updated to be based directly on importlib   rather than relying on the package internal pep 302 import   emulation
   changed in version 3
3 updated to be based directly on importlib   rather than relying on the package internal pep 302 import   emulation
   changed in version 3
4 updated to be based on pep 451pkgutil
   changed in version 3
3 updated to be based directly on importlib   rather than relying on the package internal pep 302 import   emulation
   note     only works for a finder which defines an itermodules     method
   changed in version 3
3 updated to be based directly on importlib   rather than relying on the package internal pep 302 import   emulation
   examples       list all modules python can access      walkpackages       list all submodules of ctypes      walkpackagesctypes
   note     only works for a finder which defines an itermodules     method
   changed in version 3
3 updated to be based directly on importlib   rather than relying on the package internal pep 302 import   emulation
getdatapackage resource   get a resource from a package
   new in version 3
9
distributing python modules
email   distutilssigpython
orgas a popular open source development project python has an activesupporting community of contributors and users that also make theirsoftware available for other python developers to use under opensource license terms
this allows python users to share and collaborate effectivelybenefiting from the solutions others have already created to commonand sometimes even rare problems as well as potentiallycontributing their own solutions to the common pool
this guide covers the distribution part of the process
 for a guide toinstalling other python projects refer to the installation guide
note  for corporate and other institutional users be aware that many  organisations have their own policies around using and contributing  to open source software
 please take such policies into account when  making use of the distribution and installation tools provided with  python
key terms
open source licensing and collaboration
in most parts of the world software is automatically covered bycopyright
 this means that other developers require explicitpermission to copy use modify and redistribute the software
open source licensing is a way of explicitly granting such permissionin a relatively consistent way allowing developers to share andcollaborate efficiently by making common solutions to various problemsfreely available
 this leaves many developers free to spend more timefocusing on the problems that are relatively unique to their specificsituation
the distribution tools provided with python are designed to make itreasonably straightforward for developers to make their owncontributions back to that common pool of software if they choose todo so
the same distribution tools can also be used to distribute softwarewithin an organisation regardless of whether that software ispublished as open source software or not
installing the tools
the standard library does not include build tools that support modernpython packaging standards as the core development team has foundthat it is important to have standard tools that work consistentlyeven on older versions of python
the currently recommended build and distribution tools can beinstalled by invoking the pip module at the command line   python m pip install setuptools wheel twinenote  for posix users including mac os x and linux users these  instructions assume the use of a virtual environment
for windows  users these instructions assume that the option to adjust the  system path environment variable was selected when installing  python
the python packaging user guide includes more details on the currentlyrecommended tools
reading the python packaging user guide
the python packaging user guide covers the various key steps andelements involved in creating and publishing a project project structure building and packaging the project uploading the project to the python packaging index the 
how do i
these are quick answers or links for some common tasks
choose a name for my project
this isnt an easy topic but here are a few tips check the python packaging index to see if the name is already in  use check popular hosting sites like github bitbucket etc to see if  there is already a project with that name check what comes up in a web search for the name youre considering avoid particularly common words especially ones with multiple  meanings as they can make it difficult for users to find your  software when searching for it
create and distribute binary extensions
this is actually quite a complex topic with a variety of alternativesavailable depending on exactly what youre aiming to achieve
 see thepython packaging user guide for more information and recommendations
see also python packaging user guide binary extensions
installing python modules
email   distutilssigpython
orgas a popular open source development project python has an activesupporting community of contributors and users that also make theirsoftware available for other python developers to use under opensource license terms
this allows python users to share and collaborate effectivelybenefiting from the solutions others have already created to commonand sometimes even rare problems as well as potentiallycontributing their own solutions to the common pool
this guide covers the installation part of the process
 for a guide tocreating and sharing your own python projects refer to thedistribution guide
note  for corporate and other institutional users be aware that many  organisations have their own policies around using and contributing  to open source software
 please take such policies into account when  making use of the distribution and installation tools provided with  python
key terms
 pip is the preferred installer program
 starting with python 3
4  it is included by default with the python binary installers
 a virtual environment is a semiisolated python environment that  allows packages to be installed for use by a particular application  rather than being installed system wide
 venv is the standard tool for creating virtual environments and  has been part of python since python 3
3
 starting with python 3
4  it defaults to installing pip into all created virtual  environments
 virtualenv is a third party alternative and predecessor to  venv
 it allows virtual environments to be used on versions of  python prior to 3
4 which either dont provide venv at all or  arent able to automatically install pip into created  environments
 the python packaging index is a public repository of open source  licensed packages made available for use by other python users
 the python packaging authority is the group of developers and  documentation authors responsible for the maintenance and evolution  of the standard packaging tools and the associated metadata and file  format standards
 they maintain a variety of tools documentation  and issue trackers on both github and bitbucket
 distutils is the original build and distribution system first  added to the python standard library in 1998
 while direct use of  distutils is being phased out it still laid the foundation for  the current packaging and distribution infrastructure and it not  only remains part of the standard library but its name lives on in  other ways such as the name of the mailing list used to coordinate  python packaging standards development
changed in version 3
5 the use of venv is now recommended forcreating virtual environments
see also  python packaging user guide creating and using virtual environments
basic usage
the standard packaging tools are all designed to be used from thecommand line
the following command will install the latest version of a module andits dependencies from the python packaging index   python m pip install somepackagenote  for posix users including mac os x and linux users the examples  in this guide assume the use of a virtual environment
for windows  users the examples in this guide assume that the option to adjust  the system path environment variable was selected when installing  python
its also possible to specify an exact or minimum version directly onthe command line
 when using comparator operators such as   orsome other special character which get interpreted by shell thepackage name and the version should be enclosed within double quotes   python m pip install somepackage1
4   minimum versionnormally if a suitable module is already installed attempting toinstall it again will have no effect
 upgrading existing modules mustbe requested explicitly   python m pip install upgrade somepackagemore information and resources regarding pip and its capabilitiescan be found in the python packaging user guide
creation of virtual environments is done through the venv module
installing packages into an active virtual environment uses thecommands shown above
see also  python packaging user guide installing python distribution packages
how do i 
these are quick answers or links for some common tasks
install pip in versions of python prior to python 34
python only started bundling pip with python 3
4
 for earlierversions pip needs to be bootstrapped as described in the pythonpackaging user guide
see also  python packaging user guide requirements for installing packages
install packages just for the current user
passing the user option to python m pip install will install apackage just for the current user rather than for all users of thesystem
install scientific python packages
a number of scientific python packages have complex binarydependencies and arent currently easy to install using pipdirectly
 at this point in time it will often be easier for users toinstall these packages by other means rather than attempting toinstall them with pip
see also python packaging user guide installing scientific packages
work with multiple versions of python installed in parallel
on linux mac os x and other posix systems use the versioned pythoncommands in combination with the m switch to run the appropriatecopy of pip   python2   m pip install somepackage   default python 2   python2
4appropriately versioned pip commands may also be available
on windows use the py python launcher in combination with the mswitch   py 2   m pip install somepackage   default python 2   py 2
common installation issues
installing into the system python on linux
on linux systems a python installation will typically be included aspart of the distribution
 installing into this python installationrequires root access to the system and may interfere with theoperation of the system package manager and other components of thesystem if a component is unexpectedly upgraded using pip
on such systems it is often better to use a virtual environment or aperuser installation when installing packages with pip
pip not installed
installing binary extensions
python has typically relied heavily on source based distribution withend users being expected to compile extension modules from source aspart of the installation process
with the introduction of support for the binary wheel format andthe ability to publish wheels for at least windows and mac os xthrough the python packaging index this problem is expected todiminish over time as users are more regularly able to install prebuilt extensions rather than needing to build them themselves
some of the solutions for installing scientific software that are notyet available as prebuilt wheel files may also help with obtainingother binary extensions without needing to build them locally
see also python packaging user guide binary extensions
command line and environment
the cpython interpreter scans the command line and the environment forvarious settings
cpython implementation detail other implementations command lineschemes may differ
  see alternate implementations for furtherresources
command line
when invoking python you may specify any of these options   python bbdehiioqssuvvwx c command  m modulename  script    argsthe most common use case is of course a simple invocation of ascript   python myscript
interface options
generic options
hhelp   print a short description of all command line options
vversion   print the python version number and exit
  example output could be      python 3
0b2   when given twice print more information about the build like      python 3
0 20161005   new in version 3
6 the vv option
miscellaneous options
options you shouldnt use
j   reserved for use by jython
environment variables
debugmode variables
setting these variables only has an effect in a debug build of python
pythonthreaddebug   if set python will print threading debug info
   need python configured with the withpydebug build option
pythondumprefs   if set python will dump objects and reference counts still alive   after shutting down the interpreter
   need python configured with the withtracerefs build option
using python on windows
this document aims to give an overview of windowsspecific behaviouryou should know about when using python on microsoft windows
unlike most unix systems and services windows does not include asystem supported installation of python
 to make python available thecpython team has compiled windows installers msi packages with everyrelease for many years
 these installers are primarily intended to adda peruser installation of python with the core interpreter andlibrary being used by a single user
 the installer is also able toinstall for all users of a single machine and a separate zip file isavailable for applicationlocal distributions
as specified in pep 11 a python release only supports a windowsplatform while microsoft considers the platform under extendedsupport
 this means that python 3
9 supports windows vista and newer
if you require windows xp support then please install python 3
there are a number of different installers available for windows eachwith certain benefits and downsides
the full installer contains all components and is the best option fordevelopers using python for any kind of project
the microsoft store package is a simple installation of python that issuitable for running scripts and packages and using idle or otherdevelopment environments
 it requires windows 10 but can be safelyinstalled without corrupting other programs
 it also provides manyconvenient commands for launching python and its tools
the nuget
org packages are lightweight installations intended forcontinuous integration systems
 it can be used to build pythonpackages or run scripts but is not updateable and has no userinterface tools
the embeddable package is a minimal package of python suitable forembedding into a larger application
the full installer
installation steps
four python 3
9 installers are available for download  two each forthe 32bit and 64bit versions of the interpreter
 the web installeris a small initial download and it will automatically download therequired components as necessary
 the offline installer includes thecomponents necessary for a default installation and only requires aninternet connection for optional features
 see installing withoutdownloading for other ways to avoid downloading during installation
after starting the installer one of two options may be selectedimageif you select install now you will not need to be an administrator unless a system update  for the c runtime library is required or you install the python  launcher for windows for all users python will be installed into your user directory the python launcher for windows will be installed according to the  option at the bottom of the first page the standard library test suite launcher and pip will be installed if selected the install directory will be added to your path shortcuts will only be visible for the current userselecting customize installation will allow you to select thefeatures to install the installation location and other options orpostinstall actions
 to install debugging symbols or binaries youwill need to use this option
to perform an allusers installation you should select customizeinstallation
 in this case you may be required to provide administrative credentials or  approval python will be installed into the program files directory the python launcher for windows will be installed into the windows  directory optional features may be selected during installation the standard library can be precompiled to bytecode if selected the install directory will be added to the system  path shortcuts are available for all users
removing the maxpath limitation
windows historically has limited path lengths to 260 characters
 thismeant that paths longer than this would not resolve and errors wouldresult
in the latest versions of windows this limitation can be expanded toapproximately 32000 characters
 your administrator will need toactivate the enable win32 long paths group policy or setlongpathsenabled to 1 in the registry keyhkeylocalmachinesystemcurrentcontrolsetcontrolfilesystem
this allows the open function the os module and most other pathfunctionality to accept and return paths longer than 260 characters
after changing the above option no further configuration is required
changed in version 3
6 support for long paths was enabled in python
installing without ui
installing without downloading
as some features of python are not included in the initial installerdownload selecting those features may require an internet connection
to avoid this need all possible components may be downloaded ondemand to create a complete layout that will no longer require aninternet connection regardless of the selected features
 note thatthis download may be bigger than required but where a large number ofinstallations are going to be performed it is very useful to have alocally cached copy
execute the following command from command prompt to download allpossible required files
  remember to substitute python3
exefor the actual name of your installer and to create layouts in theirown directories to avoid collisions between files with the same name
exe layout optional target directoryyou may also specify the quiet option to hide the progress display
modifying an install
the microsoft store package
new in version 3
2
the microsoft store package is an easily installable pythoninterpreter that is intended mainly for interactive use for exampleby students
to install the package ensure you have the latest windows 10 updatesand search the microsoft store app for python 3
9
 ensure that theapp you select is published by the python software foundation andinstall it
warning  python will always be available for free on the microsoft store
 if  you are asked to pay for it you have not selected the correct  package
after installation python may be launched by finding it in start
alternatively it will be available from any command prompt orpowershell session by typing python
 further pip and idle may beused by typing pip or idle
 idle can also be found in start
all three commands are also available with version number suffixesfor example as python3
exe and python3
exe as well aspython
exe where 3
x is the specific version you want to launchsuch as 3
9
 open manage app execution aliases through start toselect which version of python is associated with each command
 it isrecommended to make sure that pip and idle are consistent withwhichever version of python is selected
virtual environments can be created with python m venv andactivated and used as normal
if you have installed another version of python and added it to yourpath variable it will be available as python
exe rather than theone from the microsoft store
 to access the new installation usepython3
exe or python3
exe
the py
exe launcher will detect this python installation but willprefer installations from the traditional installer
to remove python open settings and use apps and features or elsefind python in start and rightclick to select uninstall
 uninstallingwill remove all packages you installed directly into this pythoninstallation but will not remove any virtual environments
known issues
because of restrictions on microsoft store apps python scripts maynot have full write access to shared locations such as temp and theregistry
 instead it will write to a private copy
 if your scriptsmust modify the shared locations you will need to install the fullinstaller
the nugetorg packages
new in version 3
2
the nuget
org package is a reduced size python environment intendedfor use on continuous integration and build systems that do not have asystemwide install of python
 while nuget is the package manager for
net it also works perfectly fine for packages containing buildtimetools
visit nuget
org for the most uptodate information on using nuget
what follows is a summary that is sufficient for python developers
the nuget
exe command line tool may be downloaded directly fromhttpsaka
msnugetclidl for example using curl or powershell
with the tool the latest version of python for 64bit or 32bitmachines is installed using   nuget
to select a particular version add a version 3
y
 the outputdirectory may be changed from 
 and the package will be installedinto a subdirectory
 by default the subdirectory is named the same asthe package and without the excludeversion option this name willinclude the specific version installed
 inside the subdirectory is atools directory that contains the python installation    without excludeversion    
2in general nuget packages are not upgradeable and newer versionsshould be installed sidebyside and referenced using the full path
alternatively delete the package directory manually and install itagain
 many ci systems will do this automatically if they do notpreserve files between builds
alongside the tools directory is a buildnative directory
 thiscontains a msbuild properties file python
props that can be used ina c project to reference the python install
 including the settingswill automatically use the headers and import libraries in your build
the package information pages on nuget
org arewww
orgpackagespython for the 64bit version andwww
orgpackagespythonx86 for the 32bit version
the embeddable package
python application
embedding python
applications written in native code often require some form ofscripting language and the embedded python distribution can be usedfor this purpose
 in general the majority of the application is innative code and some part will either invoke python
exe or directlyuse python3
dll
 for either case extracting the embeddeddistribution to a subdirectory of the application installation issufficient to provide a loadable python interpreter
as with the application use packages can be installed to any locationas there is an opportunity to specify search paths before initializingthe interpreter
 otherwise there is no fundamental differencesbetween using the embedded distribution and a regular installation
alternative bundles
besides the standard cpython distribution there are modified packagesincluding additional functionality
  the following is a list ofpopular versions and their key featuresactivepython   installer with multiplatform compatibility documentation pywin32anaconda   popular scientific modules such as numpy scipy and pandas and   the conda package manager
canopy   a comprehensive python analysis environment with editors and   other development tools
winpython   windowsspecific distribution with prebuilt scientific packages and   tools for building packages
note that these packages may not include the latest versions of pythonor other libraries and are not maintained or supported by the corepython team
configuring python
to run python conveniently from a command prompt you might considerchanging some default environment variables in windows
  while theinstaller provides an option to configure the path and pathextvariables for you this is only reliable for a single systemwideinstallation
  if you regularly use multiple versions of pythonconsider using the python launcher for windows
excursus setting environment variables
finding the python executable
changed in version 3
5
besides using the automatically created start menu entry for thepython interpreter you might want to start python in the commandprompt
 the installer has an option to set that up for you
on the first page of the installer an option labelled add python topath may be selected to have the installer add the install locationinto the path
  the location of the scripts folder is also added
this allows you to type python to run the interpreter and pipfor the package installer
 thus you can also execute your scriptswith command line options see command line documentation
if you dont enable this option at install time you can always rerunthe installer select modify and enable it
  alternatively you canmanually modify the path using the directions in excursus settingenvironment variables
  you need to set your path environmentvariable to include the directory of your python installationdelimited by a semicolon from other entries
  an example variablecould look like this assuming the first two entries already existed   cwindowssystem32cwindowscprogram filespython 3
utf8 mode
python launcher for windows
new in version 3
3
the python launcher for windows is a utility which aids in locatingand executing of different python versions
  it allows scripts or thecommandline to indicate a preference for a specific python versionand will locate and execute that version
unlike the path variable the launcher will correctly select themost appropriate version of python
 it will prefer peruserinstallations over systemwide ones and orders by language versionrather than using the most recently installed version
the launcher was originally specified in pep 397
getting started
shebang lines
arguments in shebang lines
the shebang lines can also specify additional options to be passed tothe python interpreter
  for example if you have a shebang line    usrbinpython vthen python will be started with the v option
customization
diagnostics
finding modules
additional modules
even though python aims to be portable among all platforms there arefeatures that are unique to windows
  a couple of modules both in thestandard library and external and snippets exist to use thesefeatures
the windowsspecific standard modules are documented in ms windowsspecific services
pywin
the pywin32 module by mark hammond is a collection of modules foradvanced windowsspecific support
  this includes utilities for component object model com win32 api calls registry event log microsoft foundation classes mfc user interfacespythonwin is a sample mfc application shipped with pywin32
  it is anembeddable ide with a builtin debugger
see also  win32 how do i
     by tim golden  python and com     by david and paul boddie
cxfreeze
cxfreeze is a distutils extension see extending distutils whichwraps python scripts into executable windows programs 
exefiles
  when you have done this you can distribute your applicationwithout requiring your users to install python
wconio
since pythons advanced terminal handling layer curses isrestricted to unixlike systems there is a library exclusive towindows as well windows console io for python
wconio is a wrapper for turbocs conio
h used to create text userinterfaces
compiling python on windows
other platforms
with ongoing development of python some platforms that used to besupported earlier are no longer supported due to the lack of users ordevelopers
 check pep 11 for details on all unsupportedplatforms
 windows ce is still supported
 the cygwin installer offers to install the python interpreter as  well cf
 cygwin package source maintainer releasessee python for windows for detailed information about platforms withprecompiled installers
editors and ides
there are a number of ides that support python programming language
many editors and ides provide syntax highlighting debugging toolsand pep 8 checks
please go to python editors and integrated development environmentsfor a comprehensive list
python setup and usage
this part of the documentation is devoted to general information onthe setup of the python environment on different platforms theinvocation of the interpreter and things that make working with pythoneasier
 command line and environment   1
 command line     1
 interface options     1
 generic options     1
 miscellaneous options     1
 options you shouldnt use   1
 environment variables     1
 debugmode variables 2
 using python on unix platforms   2
 getting and installing the latest version of python     2
 on linux     2
 on freebsd and openbsd     2
 on opensolaris   2
 building python   2
 pythonrelated paths and files   2
 miscellaneous 3
 using python on windows   3
 the full installer     3
 installation steps     3
 removing the maxpath limitation     3
 installing without ui     3
 installing without downloading     3
 modifying an install   3
 the microsoft store package     3
 known issues   3
 the nuget
org packages   3
 the embeddable package     3
 python application     3
 embedding python   3
 alternative bundles   3
 configuring python     3
 excursus setting environment variables     3
 finding the python executable   3
 utf8 mode   3
 python launcher for windows     3
 getting started       3
 from the commandline       3
 virtual environments       3
 from a script       3
 from file associations     3
 arguments in shebang lines     3
 customization       3
 customization via ini files       3
 customizing default python versions     3
 diagnostics   3
 finding modules   3
 additional modules     3
 compiling python on windows   3
 other platforms 4
 using python on a macintosh   4
 getting and installing macpython     4
 how to run a python script     4
 running scripts with a gui     4
 configuration   4
 the ide   4
 installing additional python packages   4
 gui programming on the mac   4
 distributing python applications on the mac   4
 other resources 5
 editors and ides
using python on unix platforms
getting and installing the latest version of python
on linux
python comes preinstalled on most linux distributions and isavailable as a package on all others
  however there are certainfeatures you might want to use that are not available on your distrospackage
  you can easily compile the latest version of python fromsource
in the event that python doesnt come preinstalled and isnt in therepositories as well you can easily make packages for your owndistro
  have a look at the following linkssee also  httpswww
html     for debian users  httpsen
orgportalpackaging     for opensuse users  httpsdocsold
html     for fedora users  httpwww
html     for slackware users
on freebsd and openbsd
 freebsd users to add the package use     pkg install python3 openbsd users to add the package use     pkgadd r python     pkgadd ftpftp
tgz  for example i386 users get the 2
1 version of python using     pkgadd ftpftp
on opensolaris
building python
if you want to compile cpython yourself first thing you should do isget the source
 you can download either the latest releases source orjust grab a fresh clone
  if you want to contribute patches you willneed a clone
the build process consists of the usual commands   
configure   make   make installconfiguration options and caveats for specific unix platforms areextensively documented in the readme
rst file in the root of thepython source tree
warning  make install can overwrite or masquerade the python3 binary
  make altinstall is therefore recommended instead of make install  since it only installs execprefixbinpythonversion
pythonrelated paths and files
miscellaneous
using python on a macintosh
author   bob savage bobsavagemac
compython on a macintosh running mac os x is in principle very similar topython on any other unix platform but there are a number ofadditional features such as the ide and the package manager that areworth pointing out
getting and installing macpython
8 comes with python 2
7 preinstalled by apple
  if youwish you are invited to install the most recent version of python 3from the python website httpswww
org
  a currentuniversal binary build of python which runs natively on the macsnew intel and legacy ppc cpus is available there
what you get after installing is a number of things a python 3
9 folder in your applications folder
 in here you  find idle the development environment that is a standard part of  official python distributions and pythonlauncher which handles  doubleclicking python scripts from the finder
 a framework libraryframeworkspython
framework which includes  the python executable and libraries
 the installer adds this  location to your shell path
 to uninstall macpython you can simply  remove these three things
 a symlink to the python executable is  placed in usrlocalbin
the appleprovided build of python is installed insystemlibraryframeworkspython
framework and usrbinpythonrespectively
 you should never modify or delete these as they areapplecontrolled and are used by apple or thirdparty software
remember that if you choose to install a newer python version frompython
org you will have two different but functional pythoninstallations on your computer so it will be important that yourpaths and usages are consistent with what you want to do
idle includes a help menu that allows you to access pythondocumentation
 if you are completely new to python you should startreading the tutorial introduction in that document
if you are familiar with python on other unix platforms you shouldread the section on running python scripts from the unix shell
how to run a python script
your best way to get started with python on mac os x is through theidle integrated development environment see section the ide and usethe help menu when the ide is running
if you want to run python scripts from the terminal window commandline or from the finder you first need an editor to create yourscript
 mac os x comes with a number of standard unix command lineeditors vim and emacs among them
 if you want a more maclikeeditor bbedit or textwrangler from bare bones software seehttpwww
html are good choicesas is textmate see httpsmacromates
com
 other editorsinclude gvim httpmacvimdev
iomacvim andaquamacs httpaquamacs
org
to run your script from the terminal window you must make sure thatusrlocalbin is in your shell search path
to run your script from the finder you have two options drag it to pythonlauncher select pythonlauncher as the default application to open your  script or any 
py script through the finder info window and  doubleclick it
 pythonlauncher has various preferences to  control how your script is launched
 optiondragging allows you to  change these for one invocation or use its preferences menu to  change things globally
running scripts with a gui
with older versions of python there is one mac os x quirk that youneed to be aware of programs that talk to the aqua window manager inother words anything that has a gui need to be run in a special way
use pythonw instead of python to start such scripts
with python 3
9 you can use either python or pythonw
configuration
python on os x honors all standard unix environment variables such aspythonpath but setting these variables for programs started fromthe finder is nonstandard as the finder does not read your 
profileor 
cshrc at startup
 you need to create a file
plist
 see apples technical document qa1067for details
for more information on installation python packages in macpython seesection installing additional python packages
the ide
macpython ships with the standard idle development environment
 a goodintroduction to using idle can be found athttpwww
html
installing additional python packages
there are several methods to install additional python packages packages can be installed via the standard python distutils mode  python setup
py install
 many packages can also be installed via the setuptools extension  or pip wrapper see httpspip
io
gui programming on the mac
there are several options for building gui applications on the macwith python
pyobjc is a python binding to apples objectiveccocoa frameworkwhich is the foundation of most modern mac development
 information onpyobjc is available from httpspypi
the standard python gui toolkit is tkinter based on the crossplatform tk toolkit httpswww
tk
 an aquanative version of tkis bundled with os x by apple and the latest version can bedownloaded and installed from httpswww
com it can alsobe built from source
wxpython is another popular crossplatform gui toolkit that runsnatively on mac os x
 packages and documentation are available fromhttpswww
org
pyqt is another popular crossplatform gui toolkit that runsnatively on mac os x
 more information can be found athttpsriverbankcomputing
comsoftwarepyqtintro
distributing python applications on the mac
the standard tool for deploying standalone python applications on themac is py2app
 more information on installing and using py2app canbe found at httpundefined
orgpythonpy2app
other resources
the macpython mailing list is an excellent support resource for pythonusers and developers on the machttpswww
orgcommunitysigscurrentpythonmacsiganother useful resource is the macpython wikihttpswiki
installing python modules legacy version
author   greg wardsee also  installing python modules     the up to date module installation documentation
 for regular     python usage you almost certainly want that document rather than     this one
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
note  this guide only covers the basic tools for building and distributing  extensions that are provided as part of this version of python
  third party tools offer easier to use and more secure alternatives
  refer to the quick recommendations section in the python packaging  user guide for more information
introduction
in python 2
0 the distutils api was first added to the standardlibrary
 this provided linux distro maintainers with a standard way ofconverting python projects into linux distro packages and systemadministrators with a standard way of installing them directly ontotarget systems
see installing python modules and distributing python modules for moredetails
distutils based source distributions
standard build and install
platform variations
splitting the job up
how building works
how installation works
  onunix and mac os x which is also unixbased it also depends onwhether the module distribution being installed is pure python orcontains extensions nonpure platform           standard installation location                         default value                                       notes    unix pure        prefixlibpythonx
ysitepackages          1      unix nonpure    execprefixlibpythonx
ysitepackages          1      windows            prefixlibsitepackages                           cpythonxylibsitepackages                   2     notes1
  if youwant to customize your installation directories more heavily seesection custom installation on custom installations
alternate installation
alternate installation the user scheme
 here are the values for unix including mac os x type of file     installation directory                                       modules          userbaselibpythonx
ysitepackages                   scripts          userbasebin                                             data             userbase                                                 c headers        userbaseincludepythonx
yabiflagsdistname       and here are the values used on windows type of file     installation directory                                       modules          userbasepythonxysitepackages                        scripts          userbasepythonxyscripts                              data             userbase                                                 c headers        userbasepythonxyincludedistname                   the advantage of using this scheme compared to the other onesdescribed below is that the user sitepackages directory is undernormal conditions always included in sys
alternate installation the home scheme
  filesare installed to the following directories under the installation baseas follows type of file     installation directory                                       modules          homelibpython                                          scripts          homebin                                                 data             home                                                     c headers        homeincludepythondistname                          mentally replace slashes with backslashes if youre on windows
alternate installation unix the prefix scheme
  files areinstalled as follows type of file       installation directory                                      python modules     prefixlibpythonx
ysitepackages                    extension modules  execprefixlibpythonx
ysitepackages               scripts            prefixbin                                              data               prefix                                                  c headers          prefixincludepythonx
alternate installation windows the prefix scheme
 files are installed as follows type of file     installation directory                                      modules          prefixlibsitepackages                                scripts          prefixscripts                                          data             prefix                                                  c headers        prefixincludedistname                               
custom installation
to create a custom installation scheme you start with one of thealternate schemes and override some of the installation directoriesused for the various types of files using these options type of file            override option          python modules          installpurelib      extension modules       installplatlib      all modules             installlib          scripts                 installscripts      data                    installdata         c headers               installheaders     these override options can be relative absolute or explicitlydefined in terms of one of the installation base directories
plat                            installscriptspythonscripts                           installdatapythondataor equivalently   python setup
plat   installscriptspythonscripts   installdatapythondataor equivalently   install   installbasehomepython   installpureliblib   installplatliblib
note  when a virtual environment is activated any options that change the  installation path will be ignored from all distutils configuration  files to prevent inadvertently installing projects outside of the  virtual environment
modifying pythons search path
distutils configuration files
location and names of config files
  on unix and mac os x the three configuration filesin the order they are processed are type of file    location and filename                                       notes    system          prefixlibpythonverdistutilsdistutils
cfg                                                 3     and on windows the configuration files are type of file    location and filename                              notes    system          prefixlibdistutilsdistutils
notes1
syntax of config files
building extensions tips and tricks
tweaking compilerlinker flags
using nonmicrosoft compilers on windows
see also  cbuilder compiler     information about the free c compiler from borland including     links to the download pages
see also  building python modules on ms windows platform with mingw     information about building the required libraries for the mingw     environment
 footnotes 1 this also means you could replace all existing cofflibraries with    omflibraries of the same name
2 check httpswww
orgcygwin and httpwww
org    for more information3 then you have no posix emulation available but you also dont    need cygwin1
descriptor objects
descriptors are objects that describe some attribute of an object
they are found in the dictionary of type objects
pytypeobject pypropertytype   the type object for the builtin descriptor types
int pydescrisdatapyobject descr   return true if the descriptor objects descr describes a data   attribute or false if it describes a method
  descr must be a   descriptor object there is no error checking
call protocol
cpython supports two different calling protocols tpcall andvectorcall
the tpcall protocol
instances of classes that set tpcall are callable
 the signature ofthe slot is   pyobject tpcallpyobject callable pyobject args pyobject kwargsa call is made using a tuple for the positional arguments and a dictfor the keyword arguments similarly to callableargs kwargs inpython code
the vectorcall protocol
new in version 3
9
this bears repeatingwarning  a class supporting vectorcall must also implement tpcall with  the same semantics
note  in cpython 3
recursion control
vectorcall support api
   new in version 3
8
   new in version 3
8
   new in version 3
8
object calling api
 function                                    callable            args                  kwargs           pyobjectcall                           pyobject         tuple                 dictnull      pyobjectcallnoargs                     pyobject                                          pyobjectcallonearg                     pyobject         1 object                            pyobjectcallobject                     pyobject         tuplenull                        pyobjectcallfunction                   pyobject         format                              pyobjectcallmethod                     obj  char       format                              pyobjectcallfunctionobjargs            pyobject         variadic                            pyobjectcallmethodobjargs              obj  name          variadic                            pyobjectcallmethodnoargs               obj  name                                           pyobjectcallmethodonearg               obj  name          1 object                            pyobjectvectorcall                     pyobject         vectorcall            vectorcall       pyobjectvectorcalldict                 pyobject         vectorcall            dictnull      pyobjectvectorcallmethod               arg  name          vectorcall            vectorcall      pyobject pyobjectcallpyobject callable pyobject args pyobject kwargs    return value new reference
   return the result of the call on success or raise an exception and   return null on failure
   return the result of the call on success or raise an exception and   return null on failure
   new in version 3
9
   return the result of the call on success or raise an exception and   return null on failure
   new in version 3
9
   return the result of the call on success or raise an exception and   return null on failure
   this is the equivalent of the python expression callableargs
   return the result of the call on success or raise an exception and   return null on failure
   this is the equivalent of the python expression callableargs
   changed in version 3
4 the type of format was changed from char   
   return the result of the call on success or raise an exception and   return null on failure
   changed in version 3
4 the types of name and format were   changed from char 
   return the result of the call on success or raise an exception and   return null on failure
   this is the equivalent of the python expression callablearg1   arg2 

   return the result of the call on success or raise an exception and   return null on failure
   return the result of the call on success or raise an exception and   return null on failure
   new in version 3
9
   return the result of the call on success or raise an exception and   return null on failure
   new in version 3
9
   return the result of the call on success or raise an exception and   return null on failure
   new in version 3
9
   new in version 3
9
   return the result of the call on success or raise an exception and   return null on failure
   new in version 3
9
call support api
set objects
this section details the public api for set and frozenset objects
any functionality not listed below is best accessed using the eitherthe abstract object protocol including pyobjectcallmethodpyobjectrichcomparebool pyobjecthash pyobjectreprpyobjectistrue pyobjectprint and pyobjectgetiter orthe abstract number protocol including pynumberandpynumbersubtract pynumberor pynumberxorpynumberinplaceand pynumberinplacesubtractpynumberinplaceor and pynumberinplacexor
pysetobject   this subtype of pyobject is used to hold the internal data for   both set and frozenset objects
  it is like a pydictobject in   that it is a fixed size for small sets much like tuple storage   and will point to a separate variable sized block of memory for   medium and large sized sets much like list storage
 none of the   fields of this structure should be considered public and are   subject to change
  all access should be done through the   documented api rather than by manipulating the values in the   structure
pytypeobject pysettype   this is an instance of pytypeobject representing the python set   type
pytypeobject pyfrozensettype   this is an instance of pytypeobject representing the python   frozenset type
the following type check macros work on pointers to any python object
likewise the constructor functions work with any iterable pythonobject
int pysetcheckpyobject p   return true if p is a set object or an instance of a subtype
int pyfrozensetcheckpyobject p   return true if p is a frozenset object or an instance of a   subtype
int pyanysetcheckpyobject p   return true if p is a set object a frozenset object or an   instance of a subtype
int pyanysetcheckexactpyobject p   return true if p is a set object or a frozenset object but   not an instance of a subtype
int pyfrozensetcheckexactpyobject p   return true if p is a frozenset object but not an instance of a   subtype
   return a new set containing objects returned by the iterable
   the iterable may be null to create a new empty set
  return the   new set on success or null on failure
  raise typeerror if   iterable is not actually iterable
  the constructor is also   useful for copying a set csets
   return a new frozenset containing objects returned by the   iterable
 the iterable may be null to create a new empty   frozenset
  return the new set on success or null on failure
   raise typeerror if iterable is not actually iterable
the following functions and macros are available for instances ofset or frozenset or instances of their subtypes
pyssizet pysetsizepyobject anyset   return the length of a set or frozenset object
 equivalent to   lenanyset
  raises a pyexcsystemerror if anyset is not a   set frozenset or an instance of a subtype
pyssizet pysetgetsizepyobject anyset   macro form of pysetsize without error checking
int pysetcontainspyobject anyset pyobject key   return 1 if found 0 if not found and 1 if an error is   encountered
  unlike the python contains method this   function does not automatically convert unhashable sets into   temporary frozensets
  raise a typeerror if the key is   unhashable
 raise pyexcsystemerror if anyset is not a set   frozenset or an instance of a subtype
int pysetaddpyobject set pyobject key   add key to a set instance
  also works with frozenset   instances like pytuplesetitem it can be used to fillin the   values of brand new frozensets before they are exposed to other   code
  return 0 on success or 1 on failure
 raise a   typeerror if the key is unhashable
 raise a memoryerror if   there is no room to grow
  raise a systemerror if set is not an   instance of set or its subtype
the following functions are available for instances of set or itssubtypes but not for instances of frozenset or its subtypes
int pysetdiscardpyobject set pyobject key   return 1 if found and removed 0 if not found no action   taken and 1 if an error is encountered
  does not raise   keyerror for missing keys
  raise a typeerror if the key is   unhashable
  unlike the python discard method this function   does not automatically convert unhashable sets into temporary   frozensets
 raise pyexcsystemerror if set is not an instance   of set or its subtype
   return a new reference to an arbitrary object in the set and   removes the object from the set
  return null on failure
   raise keyerror if the set is empty
 raise a systemerror if   set is not an instance of set or its subtype
int pysetclearpyobject set   empty an existing set of all elements
weak reference objects
python supports weak references as firstclass objects
  there aretwo specific object types which directly implement weak references
the first is a simple reference object and the second acts as a proxyfor the original object as much as it can
int pyweakrefcheckob   return true if ob is either a reference or proxy object
int pyweakrefcheckrefob   return true if ob is a reference object
int pyweakrefcheckproxyob   return true if ob is a proxy object
   return a weak reference object for the object ob
  this will   always return a new reference but is not guaranteed to create a   new object an existing reference object may be returned
  the   second parameter callback can be a callable object that   receives notification when ob is garbage collected it should   accept a single parameter which will be the weak reference object   itself
 callback may also be none or null
  if ob is not a   weaklyreferencable object or if callback is not callable   none or null this will return null and raise typeerror
   return a weak reference proxy object for the object ob
  this   will always return a new reference but is not guaranteed to create   a new object an existing proxy object may be returned
  the second   parameter callback can be a callable object that receives   notification when ob is garbage collected it should accept a   single parameter which will be the weak reference object itself
   callback may also be none or null
  if ob is not a weakly   referencable object or if callback is not callable none or   null this will return null and raise typeerror
   return the referenced object from a weak reference ref
  if the   referent is no longer live returns pynone
   note     this function returns a borrowed reference to the referenced     object
 this means that you should always call pyincref on     the object except if you know that it cannot be destroyed while     you are still using it
   similar to pyweakrefgetobject but implemented as a macro that   does no error checking
old buffer protocol
deprecated since version 3
0
these functions were part of the old buffer protocol api in python2
 in python 3 this protocol doesnt exist anymore but the functionsare still exposed to ease porting 2
x code
  they act as acompatibility wrapper around the new buffer protocol but they dontgive you control over the lifetime of the resources acquired when abuffer is exported
therefore it is recommended that you call pyobjectgetbuffer orthe y or w format codes with the pyargparsetuple family offunctions to get a buffer view over an object andpybufferrelease when the buffer view can be released
int pyobjectascharbufferpyobject obj const char buffer pyssizet bufferlen   returns a pointer to a readonly memory location usable as   characterbased input
  the obj argument must support the single   segment character buffer interface
  on success returns 0 sets   buffer to the memory location and bufferlen to the buffer   length
  returns 1 and sets a typeerror on error
int pyobjectasreadbufferpyobject obj const void buffer pyssizet bufferlen   returns a pointer to a readonly memory location containing   arbitrary data
 the obj argument must support the singlesegment   readable buffer interface
  on success returns 0 sets buffer   to the memory location and bufferlen to the buffer length
   returns 1 and sets a typeerror on error
int pyobjectcheckreadbufferpyobject o   returns 1 if o supports the singlesegment readable buffer   interface
 otherwise returns 0
  this function always succeeds
   note that this function tries to get and release a buffer and   exceptions which occur while calling corresponding functions will   get suppressed
 to get error reporting use pyobjectgetbuffer   instead
int pyobjectaswritebufferpyobject obj void buffer pyssizet bufferlen   returns a pointer to a writable memory location
  the obj   argument must support the singlesegment character buffer   interface
  on success returns 0 sets buffer to the memory   location and bufferlen to the buffer length
  returns 1 and   sets a typeerror on error
module objects
   new in version 3
3
   changed in version 3
4 package and loader are set to   none
   new in version 3
3
   new in version 3
2
   deprecated since version 3
2 pymodulegetfilename raises   unicodeencodeerror on unencodable filenames use   pymodulegetfilenameobject instead
initializing c modules
 see building c and c extensions orextending embedded python for details
      changed in version 3
5 prior to version 3
5 this member was      always set to null and was defined as         inquiry mreload   traverseproc mtraverse      a traversal function to call during gc traversal of the module      object or null if not needed
      changed in version 3
9 no longer called before the module state      is allocated
      changed in version 3
9 no longer called before the module state      is allocated
      changed in version 3
9 no longer called before the module state      is allocated
singlephase initialization
   note     most uses of this function should be using pymodulecreate     instead only use this if you are sure you need it
multiphase initialization
   new in version 3
5
   new in version 3
5
lowlevel module creation functions
   new in version 3
5
   note     most uses of this function should be using     pymodulefromdefandspec instead only use this if you are     sure you need it
   new in version 3
5
   new in version 3
5
   new in version 3
5
   new in version 3
5
support functions
   note     unlike other functions that steal references     pymoduleaddobject only decrements the reference count of     value on success
   new in version 3
9
module lookup
   new in version 3
3
   new in version 3
3
floating point objects
pyfloatobject   this subtype of pyobject represents a python floating point   object
pytypeobject pyfloattype   this instance of pytypeobject represents the python floating   point type
  this is the same object as float in the python   layer
int pyfloatcheckpyobject p   return true if its argument is a pyfloatobject or a subtype of   pyfloatobject
int pyfloatcheckexactpyobject p   return true if its argument is a pyfloatobject but not a subtype   of pyfloatobject
   create a pyfloatobject object based on the string value in str   or null on failure
   create a pyfloatobject object from v or null on failure
double pyfloatasdoublepyobject pyfloat   return a c double representation of the contents of pyfloat
   if pyfloat is not a python floating point object but has a   float method this method will first be called to convert   pyfloat into a float
 if float is not defined then it   falls back to index
 this method returns 1
0 upon   failure so one should call pyerroccurred to check for errors
   changed in version 3
8 use index if available
double pyfloatasdoublepyobject pyfloat   return a c double representation of the contents of pyfloat   but without error checking
   return a structseq instance which contains information about the   precision minimum and maximum values of a float
 its a thin   wrapper around the header file float
h
double pyfloatgetmax   return the maximum representable finite float dblmax as c   double
double pyfloatgetmin   return the minimum normalized positive float dblmin as c   double
mapping protocol
see also pyobjectgetitem pyobjectsetitem andpyobjectdelitem
int pymappingcheckpyobject o   return 1 if the object provides mapping protocol or supports   slicing and 0 otherwise
  note that it returns 1 for python   classes with a getitem method since in general case it is   impossible to determine what type of keys it supports
 this   function always succeeds
pyssizet pymappingsizepyobject opyssizet pymappinglengthpyobject o   returns the number of keys in object o on success and 1 on   failure
 this is equivalent to the python expression leno
   return element of o corresponding to the string key or null   on failure
 this is the equivalent of the python expression   okey
 see also pyobjectgetitem
int pymappingsetitemstringpyobject o const char key pyobject v   map the string key to the value v in object o
  returns 1   on failure
  this is the equivalent of the python statement okey    v
 see also pyobjectsetitem
  this function does not   steal a reference to v
int pymappingdelitempyobject o pyobject key   remove the mapping for the object key from the object o
   return 1 on failure
  this is equivalent to the python statement   del okey
 this is an alias of pyobjectdelitem
int pymappingdelitemstringpyobject o const char key   remove the mapping for the string key from the object o
   return 1 on failure
  this is equivalent to the python statement   del okey
int pymappinghaskeypyobject o pyobject key   return 1 if the mapping object has the key key and 0   otherwise
 this is equivalent to the python expression key in o
   this function always succeeds
   note that exceptions which occur while calling the getitem   method will get suppressed
 to get error reporting use   pyobjectgetitem instead
int pymappinghaskeystringpyobject o const char key   return 1 if the mapping object has the key key and 0   otherwise
 this is equivalent to the python expression key in o
   this function always succeeds
   note that exceptions which occur while calling the getitem   method and creating a temporary string object will get suppressed
   to get error reporting use pymappinggetitemstring instead
   on success return a list of the keys in object o
  on failure   return null
   changed in version 3
7 previously the function returned a list or   a tuple
   on success return a list of the values in object o
  on failure   return null
   changed in version 3
7 previously the function returned a list or   a tuple
   on success return a list of the items in object o where each   item is a tuple containing a keyvalue pair
  on failure return   null
   changed in version 3
7 previously the function returned a list or   a tuple
tuple objects
operating system utilities
   new in version 3
6
   warning     the c fork call should only be made from the main thread     of the main interpreter
   new in version 3
7
   warning     the c fork call should only be made from the main thread     of the main interpreter
   new in version 3
7
   warning     the c fork call should only be made from the main thread     of the main interpreter
   new in version 3
7
   see also     os
   deprecated since version 3
7 this function is superseded by   pyosafterforkchild
   see also     the pyunicodedecodefsdefaultandsize and     pyunicodedecodelocaleandsize functions
   new in version 3
5
   changed in version 3
7 the function now uses the utf8 encoding in   the utf8 mode
   changed in version 3
8 the function now uses the utf8 encoding on   windows if pylegacywindowsfsencodingflag is zerochar pyencodelocaleconst wchart text sizet errorpos   encode a wide character string to the locale encoding with the   surrogateescape error handler surrogate characters in the range   udc80
   see also     the pyunicodeencodefsdefault and pyunicodeencodelocale     functions
   new in version 3
5
   changed in version 3
7 the function now uses the utf8 encoding in   the utf8 mode
   changed in version 3
8 the function now uses the utf8 encoding on   windows if pylegacywindowsfsencodingflag is zero
codec registry and support functions
int pycodecregisterpyobject searchfunction   register a new codec search function
   as side effect this tries to load the encodings package if not   yet done to make sure that it is always first in the list of   search functions
int pycodecknownencodingconst char encoding   return 1 or 0 depending on whether there is a registered codec   for the given encoding
  this function always succeeds
   generic codec based encoding api
   object is passed through the encoder function found for the given   encoding using the error handling method defined by errors
   errors may be null to use the default method defined for the   codec
  raises a lookuperror if no encoder can be found
   generic codec based decoding api
   object is passed through the decoder function found for the given   encoding using the error handling method defined by errors
   errors may be null to use the default method defined for the   codec
  raises a lookuperror if no encoder can be found
codec lookup api
in the following functions the encoding string is looked upconverted to all lowercase characters which makes encodings lookedup through this mechanism effectively caseinsensitive
  if no codecis found a keyerror is set and null returned
   get an encoder function for the given encoding
   get a decoder function for the given encoding
   get an incrementalencoder object for the given encoding
   get an incrementaldecoder object for the given encoding
   get a streamreader factory function for the given encoding
   get a streamwriter factory function for the given encoding
registry api for unicode encoding error handlers
unicode objects and codecs
unicode objects
since the implementation of pep 393 in python 3
3 unicode objectsinternally use a variety of representations in order to allowhandling the complete range of unicode characters while staying memoryefficient
  there are special cases for strings where all code pointsare below 128 256 or 65536 otherwise code points must be below1114112 which is the full unicode range
note  the legacy unicode object will be removed in python 3
unicode type
   new in version 3
3
   changed in version 3
3 in previous versions this was a 16bit   type or a 32bit type depending on whether you selected a narrow   or wide unicode version of python at build time
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   changed in version 3
3 this macro is now inefficient  because in   many cases the pyunicode representation does not exist and needs   to be created  and can fail return null with an exception   set
  try to port the code to use the new pyunicodenbytedata   macros or use pyunicodewrite or pyunicoderead
int pyunicodeisidentifierpyobject o   return 1 if the string is a valid identifier according to the   language definition section identifiers and keywords
 return 0   otherwise
   changed in version 3
9 the function does not call   pyfatalerror anymore if the string is not ready
unicode character properties
   deprecated since version 3
3 this function uses simple case   mappings
   deprecated since version 3
3 this function uses simple case   mappings
   deprecated since version 3
3 this function uses simple case   mappings
creating and accessing unicode strings
   new in version 3
3
   new in version 3
3
 the   following format characters are allowed       format characters    type                   comment                                                    na                  the literal  character
                  c                 int                    a single character represented as                                                 a c int
                                  d                 int                    equivalent to printfd
 1         u                 unsigned int           equivalent to printfu
 1         ld                long                   equivalent to printfld
 1        li                long                   equivalent to printfli
 1        lu                unsigned long          equivalent to printflu
 1        lld               long long              equivalent to printflld
                                                    1                                       lli               long long              equivalent to printflli
                                                    1                                       llu               unsigned long long     equivalent to printfllu
                                                    1                                       zd                pyssizet             equivalent to printfzd
 1        zi                pyssizet             equivalent to printfzi
 1        zu                sizet                 equivalent to printfzu
 1        i                 int                    equivalent to printfi
 1         x                 int                    equivalent to printfx
 1         s                 const char            a nullterminated c character                                                      array
                                    p                 const void            the hex representation of a c                                                      pointer
 mostly equivalent to                                                      printfp except that it is                                                   guaranteed to start with the                                                       literal 0x regardless of what                                                    the platforms printf yields
           a                 pyobject              the result of calling ascii
          u                 pyobject              a unicode object
   note     the width formatter unit is number of characters rather than     bytes
   changed in version 3
2 support for lld and llu added
   changed in version 3
3 support for li lli and zi   added
   changed in version 3
4 support width and precision formatter for   s a u v s r added
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
   new in version 3
3
deprecated pyunicode apis
   new in version 3
3
   new in version 3
2
locale encoding
   see also the pydecodelocale function
   new in version 3
3
   changed in version 3
7 the function now also uses the current   locale encoding for the surrogateescape error handler except on   android
   new in version 3
3
   see also the pyencodelocale function
   new in version 3
3
   changed in version 3
7 the function now also uses the current   locale encoding for the surrogateescape error handler except on   android
file system encoding
   new in version 3
1
   changed in version 3
6 accepts a pathlike object
   new in version 3
2
   changed in version 3
6 accepts a pathlike object
   see also the pydecodelocale function
   changed in version 3
6 use pyfilesystemdefaultencodeerrors   error handler
   changed in version 3
6 use pyfilesystemdefaultencodeerrors   error handler
   see also the pyencodelocale function
   new in version 3
2
   changed in version 3
6 use pyfilesystemdefaultencodeerrors   error handler
wchart support
   new in version 3
2
   changed in version 3
7 raises a valueerror if size is null   and the wchart string contains null characters
builtin codecs
generic codecs
utf8 codecs
   new in version 3
3
   changed in version 3
7 the return type is now const char    rather of char 
   new in version 3
3
   changed in version 3
7 the return type is now const char    rather of char 
utf32 codecs
utf16 codecs
utf7 codecs
unicodeescape codecs
rawunicodeescape codecs
latin1 codecs
ascii codecs
character map codecs
mbcs codecs for windows
   new in version 3
3
methods  slots
methods and slot functions
   new in version 3
3
   changed in version 3
7 start and end are now adjusted to   behave like strstartend
code objects
code objects are a lowlevel detail of the cpython implementation
each one represents a chunk of executable code that hasnt yet beenbound into a function
pycodeobject   the c structure of the objects used to describe code objects
  the   fields of this type are subject to change at any time
pytypeobject pycodetype   this is an instance of pytypeobject representing the python   code type
int pycodecheckpyobject co   return true if co is a code object
int pycodegetnumfreepycodeobject co   return the number of free variables in co
   return a new code object
  if you need a dummy code object to   create a frame use pycodenewempty instead
  calling   pycodenew directly can bind you to a precise python version   since the definition of the bytecode changes often
   similar to pycodenew but with an extra posonlyargcount for   positionalonly arguments
   new in version 3
8
   return a new empty code object with the specified filename   function name and first line number
  it is illegal to exec or   eval the resulting code object
exception handling
note  the error indicator is not the result of sys
printing and clearing
raising exceptions
   new in version 3
5
   new in version 3
4
   availability windows
   availability windows
   availability windows
   availability windows
   availability windows
   new in version 3
4
   availability windows
   new in version 3
3
   new in version 3
4
   new in version 3
2
issuing warnings
 the standard python   warning categories are available as global variables whose names   are enumerated at standard warning categories
   new in version 3
6
   new in version 3
4
   new in version 3
2
   new in version 3
6
querying the error indicator
   note     do not compare the return value to a specific exception use     pyerrexceptionmatches instead shown below
   note     this function is normally only used by code that needs to catch     exceptions or by code that needs to save and restore the error     indicator temporarily e
   note     this function is normally only used by code that needs to save     and restore the error indicator temporarily
   note     this function does not implicitly set the traceback     attribute on the exception value
   note     this function is not normally used by code that wants to handle     exceptions
   new in version 3
3
   note     this function is not normally used by code that wants to handle     exceptions
   new in version 3
3
signal handling
   changed in version 3
5 on windows the function now also supports   socket handles
exception classes
   new in version 3
2
exception objects
unicode exception objects
   deprecated since version 3
3 3
11pyunicode is deprecated since   python 3
 please migrate to   pyobjectcallfunctionpyexcunicodeencodeerror sonns 
   deprecated since version 3
3 3
11pyunicode is deprecated since   python 3
 please migrate to   pyobjectcallfunctionpyexcunicodetranslateerror onns 
recursion control
   changed in version 3
9 this function is now also available in the   limited api
   changed in version 3
9 this function is now also available in the   limited api
standard exceptions
  for completenesshere are all the variables c name                                     python name                        notes       pyexcbaseexception                      baseexception                    1         pyexcexception                          exception                        1         pyexcarithmeticerror                    arithmeticerror                  1         pyexcassertionerror                     assertionerror                               pyexcattributeerror                     attributeerror                               pyexcblockingioerror                    blockingioerror                              pyexcbrokenpipeerror                    brokenpipeerror                              pyexcbuffererror                        buffererror                                  pyexcchildprocesserror                  childprocesserror                            pyexcconnectionabortederror             connectionabortederror                       pyexcconnectionerror                    connectionerror                              pyexcconnectionrefusederror             connectionrefusederror                       pyexcconnectionreseterror               connectionreseterror                         pyexceoferror                           eoferror                                     pyexcfileexistserror                    fileexistserror                              pyexcfilenotfounderror                  filenotfounderror                            pyexcfloatingpointerror                 floatingpointerror                           pyexcgeneratorexit                      generatorexit                                pyexcimporterror                        importerror                                  pyexcindentationerror                   indentationerror                             pyexcindexerror                         indexerror                                   pyexcinterruptederror                   interruptederror                             pyexcisadirectoryerror                  isadirectoryerror                            pyexckeyerror                           keyerror                                     pyexckeyboardinterrupt                  keyboardinterrupt                            pyexclookuperror                        lookuperror                      1         pyexcmemoryerror                        memoryerror                                  pyexcmodulenotfounderror                modulenotfounderror                          pyexcnameerror                          nameerror                                    pyexcnotadirectoryerror                 notadirectoryerror                           pyexcnotimplementederror                notimplementederror                          pyexcoserror                            oserror                          1         pyexcoverflowerror                      overflowerror                                pyexcpermissionerror                    permissionerror                              pyexcprocesslookuperror                 processlookuperror                           pyexcrecursionerror                     recursionerror                               pyexcreferenceerror                     referenceerror                   2         pyexcruntimeerror                       runtimeerror                                 pyexcstopasynciteration                 stopasynciteration                           pyexcstopiteration                      stopiteration                                pyexcsyntaxerror                        syntaxerror                                  pyexcsystemerror                        systemerror                                  pyexcsystemexit                         systemexit                                   pyexctaberror                           taberror                                     pyexctimeouterror                       timeouterror                                 pyexctypeerror                          typeerror                                    pyexcunboundlocalerror                  unboundlocalerror                            pyexcunicodedecodeerror                 unicodedecodeerror                           pyexcunicodeencodeerror                 unicodeencodeerror                           pyexcunicodeerror                       unicodeerror                                 pyexcunicodetranslateerror              unicodetranslateerror                        pyexcvalueerror                         valueerror                                   pyexczerodivisionerror                  zerodivisionerror                           new in version 3
3 pyexcblockingioerror pyexcbrokenpipeerrorpyexcchildprocesserror pyexcconnectionerrorpyexcconnectionabortederror pyexcconnectionrefusederrorpyexcconnectionreseterror pyexcfileexistserrorpyexcfilenotfounderror pyexcinterruptederrorpyexcisadirectoryerror pyexcnotadirectoryerrorpyexcpermissionerror pyexcprocesslookuperror andpyexctimeouterror were introduced following pep 3151
new in version 3
5 pyexcstopasynciteration andpyexcrecursionerror
new in version 3
6 pyexcmodulenotfounderror
these are compatibility aliases to pyexcoserror c name                                 notes       pyexcenvironmenterror                           pyexcioerror                                    pyexcwindowserror                   3        changed in version 3
3 these aliases used to be separate exceptiontypes
notes1
 this is a base class for other standard exceptions
standard warning categories
 forcompleteness here are all the variables c name                                      python name                        notes       pyexcwarning                             warning                          1         pyexcbyteswarning                        byteswarning                                 pyexcdeprecationwarning                  deprecationwarning                           pyexcfuturewarning                       futurewarning                                pyexcimportwarning                       importwarning                                pyexcpendingdeprecationwarning           pendingdeprecationwarning                    pyexcresourcewarning                     resourcewarning                              pyexcruntimewarning                      runtimewarning                               pyexcsyntaxwarning                       syntaxwarning                                pyexcunicodewarning                      unicodewarning                               pyexcuserwarning                         userwarning                                 new in version 3
2 pyexcresourcewarning
notes1
 this is a base class for other standard warning categories
stable application binary interface
allocating objects on the heap
   initialize a newlyallocated object op with its type and initial   reference
  returns the initialized object
  if type indicates   that the object participates in the cyclic garbage detector it is   added to the detectors set of observed objects
 other fields of   the object are not affected
   this does everything pyobjectinit does and also initializes   the length information for a variablesize object
   allocate a new python object using the c structure type type and   the python type object type
  fields not defined by the python   object header are not initialized the objects reference count   will be one
  the size of the memory allocation is determined from   the tpbasicsize field of the type object
   allocate a new python object using the c structure type type and   the python type object type
  fields not defined by the python   object header are not initialized
  the allocated memory allows for   the type structure plus size fields of the size given by the   tpitemsize field of type
  this is useful for implementing   objects like tuples which are able to determine their size at   construction time
  embedding the array of fields into the same   allocation decreases the number of allocations improving the   memory management efficiency
void pyobjectdelvoid op   releases memory allocated to an object using pyobjectnew or   pyobjectnewvar
  this is normally called from the tpdealloc   handler specified in the objects type
  the fields of the object   should not be accessed after this call as the memory is no longer a   valid python object
pyobject pynonestruct   object which is visible in python as none
  this should only be   accessed using the pynone macro which evaluates to a pointer to   this object
see also  pymodulecreate     to allocate and create extension modules
introduction
the application programmers interface to python gives c and cprogrammers access to the python interpreter at a variety of levels
the api is equally usable from c but for brevity it is generallyreferred to as the pythonc api
  there are two fundamentallydifferent reasons for using the pythonc api
 the first reason is towrite extension modules for specific purposes these are c modulesthat extend the python interpreter
  this is probably the most commonuse
  the second reason is to use python as a component in a largerapplication this technique is generally referred to as embeddingpython in an application
writing an extension module is a relatively wellunderstood processwhere a cookbook approach works well
  there are several tools thatautomate the process to some extent
  while people have embeddedpython in other applications since its early existence the process ofembedding python is less straightforward than writing an extension
many api functions are useful independent of whether youre embeddingor extending python moreover most applications that embed pythonwill need to provide a custom extension as well so its probably agood idea to become familiar with writing an extension beforeattempting to embed python in a real application
coding standards
if youre writing c code for inclusion in cpython you must followthe guidelines and standards defined in pep 7
  these guidelinesapply regardless of the version of python you are contributing to
following these conventions is not necessary for your own third partyextension modules unless you eventually expect to contribute them topython
include files
all function type and macro definitions needed to use the pythoncapi are included in your code by the following line   define pyssizetclean   include python
hthis implies inclusion of the following standard headers stdio
hstring
h errno
h limits
h assert
h and stdlib
hif available
note  since python may define some preprocessor definitions which affect  the standard headers on some systems you must include python
h  before any standard headers are included
it is recommended to always  define pyssizetclean before including python
  see parsing  arguments and building values for a description of this macro
all user visible names defined by python
h except those defined bythe included standard headers have one of the prefixes py or py
names beginning with py are for internal use by the pythonimplementation and should not be used by extension writers
 structuremember names do not have a reserved prefix
note  user code should never define names that begin with py or py
the header files are typically installed with python
  on unix theseare located in the directories prefixincludepythonversion andexecprefixincludepythonversion where prefix andexecprefix are defined by the corresponding parameters to pythonsconfigure script and version is d
d sys
  on windows the headers are installed inprefixinclude where prefix is the installation directoryspecified to the installer
to include the headers place both directories if different on yourcompilers search path for includes
  do not place the parentdirectories on the search path and then use includepythonx
h this will break on multiplatform builds sincethe platform independent headers under prefix include the platformspecific headers from execprefix
useful macros
objects types and reference counts
reference counts
types
exceptions
the python programmer only needs to deal with exceptions if specificerror handling is required unhandled exceptions are automaticallypropagated to the caller then to the callers caller and so onuntil they reach the toplevel interpreter where they are reported tothe  user accompanied by a stack traceback
embedding python
debugging builds
in addition to the reference count debugging described below thefollowing extra checks are performed extra checks are added to the object allocator
 extra checks are added to the parser and compiler
 a number of assertions are added to the dictionary and set  implementations
 in addition the set object acquires a  testcapi method
 sanity checks of the input arguments are added to frame creation
 the storage for ints is initialized with a known invalid pattern to  catch reference to uninitialized digits
 lowlevel tracing and extra exception checking are added to the  runtime virtual machine
 extra debugging is added to the thread module
there may be additional checks not mentioned here
please refer to miscspecialbuilds
txt in the python sourcedistribution for more detailed information
sequence protocol
int pysequencecheckpyobject o   return 1 if the object provides sequence protocol and 0   otherwise
 note that it returns 1 for python classes with a   getitem method unless they are dict subclasses since in   general case it is impossible to determine what the type of keys it   supports
  this function always succeeds
pyssizet pysequencesizepyobject opyssizet pysequencelengthpyobject o   returns the number of objects in sequence o on success and 1   on failure
  this is equivalent to the python expression leno
   return the concatenation of o1 and o2 on success and null on   failure
 this is the equivalent of the python expression o1  o2
   return the result of repeating sequence object o count times   or null on failure
  this is the equivalent of the python   expression o  count
   return the concatenation of o1 and o2 on success and null on   failure
 the operation is done inplace when o1 supports it
   this is the equivalent of the python expression o1  o2
   return the result of repeating sequence object o count times   or null on failure
  the operation is done inplace when o   supports it
  this is the equivalent of the python expression o    count
   return the ith element of o or null on failure
 this is the   equivalent of the python expression oi
   return the slice of sequence object o between i1 and i2 or   null on failure
 this is the equivalent of the python expression   oi1i2
int pysequencesetitempyobject o pyssizet i pyobject v   assign object v to the ith element of o
  raise an exception   and return 1 on failure return 0 on success
  this is the   equivalent of the python statement oi  v
  this function does   not steal a reference to v
   if v is null the element is deleted however this feature is   deprecated in favour of using pysequencedelitem
int pysequencedelitempyobject o pyssizet i   delete the ith element of object o
  returns 1 on failure
   this is the equivalent of the python statement del oi
int pysequencesetslicepyobject o pyssizet i1 pyssizet i2 pyobject v   assign the sequence object v to the slice in sequence object o   from i1 to i2
  this is the equivalent of the python statement   oi1i2  v
int pysequencedelslicepyobject o pyssizet i1 pyssizet i2   delete the slice in sequence object o from i1 to i2
  returns   1 on failure
  this is the equivalent of the python statement   del oi1i2
pyssizet pysequencecountpyobject o pyobject value   return the number of occurrences of value in o that is return   the number of keys for which okey  value
  on failure return   1
  this is equivalent to the python expression   o
countvalue
int pysequencecontainspyobject o pyobject value   determine if o contains value
  if an item in o is equal to   value return 1 otherwise return 0
 on error return 1
   this is equivalent to the python expression value in o
pyssizet pysequenceindexpyobject o pyobject value   return the first index i for which oi  value
  on error   return 1
    this is equivalent to the python expression   o
indexvalue
   return a list object with the same contents as the sequence or   iterable o or null on failure
  the returned list is   guaranteed to be new
  this is equivalent to the python expression   listo
   return a tuple object with the same contents as the sequence or   iterable o or null on failure
  if o is a tuple a new   reference will be returned otherwise a tuple will be constructed   with the appropriate contents
  this is equivalent to the python   expression tupleo
   return the sequence or iterable o as an object usable by the   other pysequencefast family of functions
 if the object is not   a sequence or iterable raises typeerror with m as the message   text
 returns null on failure
   the pysequencefast functions are thus named because they assume   o is a pytupleobject or a pylistobject and access the data   fields of o directly
   as a cpython implementation detail if o is already a sequence or   list it will be returned
pyssizet pysequencefastgetsizepyobject o   returns the length of o assuming that o was returned by   pysequencefast and that o is not null
  the size can also   be gotten by calling pysequencesize on o but   pysequencefastgetsize is faster because it can assume o is   a list or tuple
   return the ith element of o assuming that o was returned by   pysequencefast o is not null and that i is within   bounds
pyobject pysequencefastitemspyobject o   return the underlying array of pyobject pointers
  assumes that o   was returned by pysequencefast and o is not null
   note if a list gets resized the reallocation may relocate the   items array
 so only use the underlying array pointer in contexts   where the sequence cannot change
   return the ith element of o or null on failure
 faster form   of pysequencegetitem but without checking that   pysequencecheck on o is true and without adjustment for   negative indices
number protocol
int pynumbercheckpyobject o   returns 1 if the object o provides numeric protocols and false   otherwise
 this function always succeeds
   changed in version 3
8 returns 1 if o is an index integer
   returns the result of adding o1 and o2 or null on failure
   this is the equivalent of the python expression o1  o2
   returns the result of subtracting o2 from o1 or null on   failure
  this is the equivalent of the python expression o1    o2
   returns the result of multiplying o1 and o2 or null on   failure
  this is the equivalent of the python expression o1    o2
   returns the result of matrix multiplication on o1 and o2 or   null on failure
  this is the equivalent of the python expression   o1  o2
   new in version 3
5
   return the floor of o1 divided by o2 or null on failure
   this is equivalent to the classic division of integers
   return a reasonable approximation for the mathematical value of   o1 divided by o2 or null on failure
  the return value is   approximate because binary floating point numbers are   approximate it is not possible to represent all real numbers in   base two
  this function can return a floating point value when   passed two integers
   returns the remainder of dividing o1 by o2 or null on   failure
  this is the equivalent of the python expression o1    o2
   see the builtin function divmod
 returns null on failure
   this is the equivalent of the python expression divmodo1 o2
   see the builtin function pow
 returns null on failure
  this   is the equivalent of the python expression powo1 o2 o3 where   o3 is optional
 if o3 is to be ignored pass pynone in its   place passing null for o3 would cause an illegal memory   access
   returns the negation of o on success or null on failure
 this   is the equivalent of the python expression o
   returns o on success or null on failure
  this is the   equivalent of the python expression o
   returns the absolute value of o or null on failure
  this is   the equivalent of the python expression abso
   returns the bitwise negation of o on success or null on   failure
  this is the equivalent of the python expression o
   returns the result of left shifting o1 by o2 on success or   null on failure
  this is the equivalent of the python expression   o1  o2
   returns the result of right shifting o1 by o2 on success or   null on failure
  this is the equivalent of the python expression   o1  o2
   returns the bitwise and of o1 and o2 on success and null on   failure
 this is the equivalent of the python expression o1  o2
   returns the bitwise exclusive or of o1 by o2 on success or   null on failure
  this is the equivalent of the python expression   o1  o2
   returns the bitwise or of o1 and o2 on success or null on   failure
 this is the equivalent of the python expression o1  o2
   returns the result of adding o1 and o2 or null on failure
   the operation is done inplace when o1 supports it
  this is   the equivalent of the python statement o1  o2
   returns the result of subtracting o2 from o1 or null on   failure
  the operation is done inplace when o1 supports it
   this is the equivalent of the python statement o1  o2
   returns the result of multiplying o1 and o2 or null on   failure
  the operation is done inplace when o1 supports it
   this is the equivalent of the python statement o1  o2
   returns the result of matrix multiplication on o1 and o2 or   null on failure
  the operation is done inplace when o1   supports it
  this is the equivalent of the python statement o1    o2
   new in version 3
5
   returns the mathematical floor of dividing o1 by o2 or null   on failure
 the operation is done inplace when o1 supports it
   this is the equivalent of the python statement o1  o2
   return a reasonable approximation for the mathematical value of   o1 divided by o2 or null on failure
  the return value is   approximate because binary floating point numbers are   approximate it is not possible to represent all real numbers in   base two
  this function can return a floating point value when   passed two integers
  the operation is done inplace when o1   supports it
   returns the remainder of dividing o1 by o2 or null on   failure
  the operation is done inplace when o1 supports it
   this is the equivalent of the python statement o1  o2
   see the builtin function pow
 returns null on failure
  the   operation is done inplace when o1 supports it
  this is the   equivalent of the python statement o1  o2 when o3 is   pynone or an inplace variant of powo1 o2 o3 otherwise
   if o3 is to be ignored pass pynone in its place passing   null for o3 would cause an illegal memory access
   returns the result of left shifting o1 by o2 on success or   null on failure
  the operation is done inplace when o1   supports it
  this is the equivalent of the python statement o1    o2
   returns the result of right shifting o1 by o2 on success or   null on failure
  the operation is done inplace when o1   supports it
  this is the equivalent of the python statement o1    o2
   returns the bitwise and of o1 and o2 on success and null on   failure
 the operation is done inplace when o1 supports it
   this is the equivalent of the python statement o1  o2
   returns the bitwise exclusive or of o1 by o2 on success or   null on failure
  the operation is done inplace when o1   supports it
  this is the equivalent of the python statement o1    o2
   returns the bitwise or of o1 and o2 on success or null on   failure
  the operation is done inplace when o1 supports it
   this is the equivalent of the python statement o1  o2
   returns the o converted to an integer object on success or   null on failure
  this is the equivalent of the python expression   into
   returns the o converted to a float object on success or null   on failure
 this is the equivalent of the python expression   floato
   returns the o converted to a python int on success or null with   a typeerror exception raised on failure
   returns the integer n converted to base base as a string
  the   base argument must be one of 2 8 10 or 16
  for base 2 8 or   16 the returned string is prefixed with a base marker of 0b   0o or 0x respectively
  if n is not a python int it is   converted with pynumberindex first
pyssizet pynumberasssizetpyobject o pyobject exc   returns o converted to a pyssizet value if o can be   interpreted as an integer
  if the call fails an exception is   raised and 1 is returned
   if o can be converted to a python int but the attempt to convert   to a pyssizet value would raise an overflowerror then the   exc argument is the type of exception that will be raised   usually indexerror or overflowerror
  if exc is null   then the exception is cleared and the value is clipped to   pyssizetmin for a negative integer or pyssizetmax for a   positive integer
int pyindexcheckpyobject o   returns 1 if o is an index integer has the nbindex slot of   the tpasnumber structure filled in and 0 otherwise
 this   function always succeeds
complex number objects
pythons complex number objects are implemented as two distinct typeswhen viewed from the c api  one is the python object exposed topython programs and the other is a c structure which represents theactual complex number value
 the api provides functions for workingwith both
complex numbers as c structures
complex numbers as python objects
function objects
object protocol
  as outlined in   implementing descriptors data descriptors take preference over   instance attributes while nondata descriptors dont
  otherwise   an attributeerror is raised
   new in version 3
3
   new in version 3
3
note  if o1 and o2 are the same object pyobjectrichcomparebool  will always return 1 for pyeq and 0 for pyne
   changed in version 3
4 this function now includes a debug   assertion to help ensure that it does not silently discard an   active exception
   changed in version 3
4 this function now includes a debug   assertion to help ensure that it does not silently discard an   active exception
   changed in version 3
2 the return type is now pyhasht
  this is   a signed integer the same size as pyssizet
   new in version 3
4
python initialization configuration
new in version 3
8
structures pyconfig pypreconfig pystatus pywidestringlistfunctions pyconfigclear pyconfiginitisolatedconfig pyconfiginitpythonconfig pyconfigread pyconfigsetargv pyconfigsetbytesargv pyconfigsetbytesstring pyconfigsetstring pyconfigsetwidestringlist pypreconfiginitisolatedconfig pypreconfiginitpythonconfig pystatuserror pystatusexception pystatusexit pystatusiserror pystatusisexit pystatusnomemory pystatusok pywidestringlistappend pywidestringlistinsert pyexitstatusexception pyinitializefromconfig pypreinitialize pypreinitializefromargs pypreinitializefrombytesargs pyrunmain pygetargcargvthe preconfiguration pypreconfig type is stored inpyruntime
see also pep 587 python initialization configuration
pywidestringlist
   methods   pystatus pywidestringlistappendpywidestringlist list const wchart item      append item to list
   structure fields   pyssizet length      list length
   wchart items      list items
pystatus
pypreconfig
   int devmode      see pyconfig
   int isolated      see pyconfig
   int useenvironment      see pyconfig
preinitialization with pypreconfig
pyconfig
initialization with pyconfig
isolated configuration
python configuration
path configuration
pyconfig contains multiple fields for the path configuration path configuration inputs   pyconfig
pth windows only pybuilddir
txt unix onlythe pyvenvlauncher environment variable is used to setpyconfig
pyrunmain
pygetargcargv
multiphase initialization private provisional api
path   enable optional features like faulthandler and tracemalloc   import the site module   etc
generator objects
generator objects are what python uses to implement generatoriterators
 they are normally created by iterating over a function thatyields values rather than explicitly calling pygennew orpygennewwithqualname
pygenobject   the c structure used for generator objects
pytypeobject pygentype   the type object corresponding to generator objects
int pygencheckpyobject ob   return true if ob is a generator object ob must not be null
int pygencheckexactpyobject ob   return true if obs type is pygentype ob must not be   null
   create and return a new generator object based on the frame   object
 a reference to frame is stolen by this function
 the   argument must not be null
   create and return a new generator object based on the frame   object with name and qualname set to name and   qualname
 a reference to frame is stolen by this function
  the   frame argument must not be null
capsules
string conversion and formatting
type objects
in addition to the following quick reference the examples sectionprovides ataglance insight into the meaning and use ofpytypeobject
quick reference
tp slots
 pytypeobject slot   type                special             info 2           1                                     methodsattrs                                                                                                                                                  o   t   d   i                                                                               r tpname       const char         name            x   x           tpbasicsize      pyssizet                              x   x       x   tpitemsize       pyssizet                                  x       x   tpdealloc        destructor                            x   x       x   tpvectorcallof   pyssizet                                  x       x   fset                                                                       tpgetattr      getattrfunc       getattribute               g                                           getattr                         tpsetattr      setattrfunc       setattr                    g                                           delattr                         tpasasync       pyasyncmethods   subslots                          tprepr           reprfunc          repr            x   x       x   tpasnumber      pynumbermethods   subslots                                                                                                     tpassequence    pysequencemethod   subslots                                              s                                                     tpasmapping     pymappingmethods  subslots                                                                                                     tphash           hashfunc          hash            x           g   tpcall           ternaryfunc       call                x       x   tpstr            reprfunc          str             x           x   tpgetattro       getattrofunc      getattribute   x   x       g                                           getattr                         tpsetattro       setattrofunc      setattr        x   x       g                                           delattr                         tpasbuffer      pybufferprocs                                       tpflags          unsigned long                           x   x          tpdoc            const char         doc             x   x           tptraverse       traverseproc                              x       g   tpclear          inquiry                                   x       g   tprichcompare    richcmpfunc       lt le     x           g                                           eq ne                                                             gt ge                      tpweaklistoffse   pyssizet                                  x          t                                                                          tpiter           getiterfunc       iter                        x   tpiternext       iternextfunc      next                        x   tpmethods        pymethoddef                         x   x           tpmembers        pymemberdef                             x           tpgetset         pygetsetdef                         x   x           tpbase           pytypeobject     base                    x       tpdict           pyobject         dict                           tpdescrget      descrgetfunc      get                         x   tpdescrset      descrsetfunc      set                        x                                           delete                          tpdictoffset     pyssizet                                  x          tpinit           initproc          init            x   x       x   tpalloc          allocfunc                             x             tpnew            newfunc           new             x   x         tpfree           freefunc                              x   x         tpisgc          inquiry                                   x       x   tpbases        pyobject         bases                          tpmro          pyobject         mro                            tpcache        pyobject                                              tpsubclasses   pyobject         subclasses                       tpweaklist     pyobject                                              tpdel          destructor                                            tpversiontag  unsigned int                                             tpfinalize       destructor        del                         x   tpvectorcall     vectorcallfunc                                       1 a slot name in parentheses indicates it is effectively    deprecated
2 columns    o  set on pybaseobjecttype    t  set on pytypetype    d  default if slot is set to null       x  pytypeready sets this value if it is null         pytypeready always sets this value it should be null         pytypeready may set this value depending on other slots       also see the inheritance column i
subslots
 slot                        type               special                                                      methods       amawait                  unaryfunc        await     amaiter                  unaryfunc        aiter     amanext                  unaryfunc        anext                                                                    nbadd                    binaryfunc       add                                                      radd      nbinplaceadd            binaryfunc       iadd      nbsubtract               binaryfunc       sub                                                      rsub      nbinplacesubtract       binaryfunc       sub       nbmultiply               binaryfunc       mul                                                      rmul      nbinplacemultiply       binaryfunc       mul       nbremainder              binaryfunc       mod                                                      rmod      nbinplaceremainder      binaryfunc       mod       nbdivmod                 binaryfunc       divmod                                                   rdivmod   nbpower                  ternaryfunc      pow                                                      rpow      nbinplacepower          ternaryfunc      pow       nbnegative               unaryfunc        neg       nbpositive               unaryfunc        pos       nbabsolute               unaryfunc        abs       nbbool                   inquiry          bool      nbinvert                 unaryfunc        invert    nblshift                 binaryfunc       lshift                                                   rlshift   nbinplacelshift         binaryfunc       lshift    nbrshift                 binaryfunc       rshift                                                   rrshift   nbinplacershift         binaryfunc       rshift    nband                    binaryfunc       and                                                      rand      nbinplaceand            binaryfunc       and       nbxor                    binaryfunc       xor                                                      rxor      nbinplacexor            binaryfunc       xor       nbor                     binaryfunc       or                                                       ror       nbinplaceor             binaryfunc       or        nbint                    unaryfunc        int       nbreserved               void                            nbfloat                  unaryfunc        float     nbfloordivide           binaryfunc       floordiv  nbinplacefloordivide   binaryfunc       floordiv  nbtruedivide            binaryfunc       truediv   nbinplacetruedivide    binaryfunc       truediv   nbindex                  unaryfunc        index     nbmatrixmultiply        binaryfunc       matmul                                                   rmatmul   nbinplacematrixmultip   binaryfunc       matmul    ly                                                                                                                         mplength                 lenfunc          len       mpsubscript              binaryfunc       getitem   mpasssubscript          objobjargproc    setitem                                                 delitem                                                                  sqlength                 lenfunc          len       sqconcat                 binaryfunc       add       sqrepeat                 ssizeargfunc     mul       sqitem                   ssizeargfunc     getitem   sqassitem               ssizeobjargproc  setitem                                                  delitem   sqcontains               objobjproc       contains  sqinplaceconcat         binaryfunc       iadd      sqinplacerepeat         ssizeargfunc     imul                                                                     bfgetbuffer              getbufferproc                bfreleasebuffer          releasebufferpr                                             oc                           
slot typedefs
 typedef                        parameter types                return type             allocfunc                    pytypeobject  pyssizet    pyobject             destructor                   void                          void                    freefunc                     void                          void                    traverseproc                 void  visitproc void       int                     newfunc                      pyobject  pyobject       pyobject                                            pyobject                                            initproc                     pyobject  pyobject       int                                                    pyobject                                            reprfunc                     pyobject                    pyobject             getattrfunc                  pyobject  const char       pyobject             setattrfunc                  pyobject  const char       int                                                    pyobject                                            getattrofunc                 pyobject  pyobject       pyobject             setattrofunc                 pyobject  pyobject       int                                                    pyobject                                            descrgetfunc                 pyobject  pyobject       pyobject                                            pyobject                                            descrsetfunc                 pyobject  pyobject       int                                                    pyobject                                            hashfunc                     pyobject                    pyhasht               richcmpfunc                  pyobject  pyobject  int  pyobject             getiterfunc                  pyobject                    pyobject             iternextfunc                 pyobject                    pyobject             lenfunc                      pyobject                    pyssizet              getbufferproc                pyobject  pybuffer      int                                                    int                                                    releasebufferproc            pyobject  pybuffer      void                    inquiry                      void                          int                     unaryfunc                    pyobject                    pyobject             binaryfunc                   pyobject  pyobject       pyobject             ternaryfunc                  pyobject  pyobject       pyobject                                            pyobject                                            ssizeargfunc                 pyobject  pyssizet        pyobject             ssizeobjargproc              pyobject  pyssizet        int                     objobjproc                   pyobject  pyobject       int                     objobjargproc                pyobject  pyobject       int                                                    pyobject                                           see slot type typedefs below for more detail
pytypeobject definition
pyobject slots
pyvarobject slots
pytypeobject slots
   warning     it is not recommended for heap types to implement the vectorcall     protocol
   note     the semantics of the tpvectorcalloffset slot are provisional     and expected to be finalized in python 3
   changed in version 3
8 before version 3
8 this slot was named   tpprint
 in python 2
 in   python 3
0 to 3
   new in version 3
5 formerly known as tpcompare and   tpreserved
      more information in section supporting cyclic garbage      collection
  this bit also implies that the gcrelated fields      tptraverse and tpclear are present in the type object
      new in version 3
8
      new in version 3
4
      deprecated since version 3
8 this flag isnt necessary anymore      as the interpreter assumes the tpfinalize slot is always      present in the type structure
      new in version 3
9
  the signature is      int tptraversepyobject self visitproc visit void arg   more information about pythons garbage collection scheme can be   found in section supporting cyclic garbage collection
   warning     when implementing tptraverse only the members that the     instance owns by having strong references to them must be     visited
   changed in version 3
9 heapallocated types are expected to visit   pytypeself in tptraverse
   more information about pythons garbage collection scheme can be   found in section supporting cyclic garbage collection
   the following constants are defined to be used as the third   argument for tprichcompare and for pyobjectrichcompare       constant          comparison          pylt                            pyle                           pyeq                           pyne                           pygt                            pyge                          the following macro is defined to ease writing rich comparison   functions   pyreturnrichcomparevala valb op      return pytrue or pyfalse from the function depending on      the result of a comparison
      new in version 3
7
   note     slot initialization is subject to the rules of initializing     globals
   warning     it is not safe to use pydictsetitem on or otherwise modify     tpdict with the dictionary capi
   new in version 3
4
   see also safe object finalization pep 442vectorcallfunc pytypeobject
   new in version 3
9 the field exists since 3
8 but its only used   since 3
heap types
supporting cyclic garbage collection
the very high level layer
   new in version 3
8
   note     on windows fp should be opened as binary mode e
   changed in version 3
4 the result must be allocated by   pymemrawmalloc or pymemrawrealloc instead of being   allocated by pymemmalloc or pymemrealloc
   new in version 3
4
   new in version 3
2
   changed in version 3
4 this function now includes a debug   assertion to help ensure that it does not silently discard an   active exception
   changed in version 3
8 added cffeatureversion field
parsing arguments and building values
these functions are useful when creating your own extensions functionsand methods
  additional information and examples are available inextending and embedding the python interpreter
the first three of these functions described pyargparsetuplepyargparsetupleandkeywords and pyargparse all use formatstrings which are used to tell the function about the expectedarguments
  the format strings use the same syntax for each of thesefunctions
parsing arguments
a format string consists of zero or more format units
  a formatunit describes one python object it is usually a single character ora parenthesized sequence of format units
  with a few exceptions aformat unit that is not a parenthesized sequence normally correspondsto a single address argument to these functions
  in the followingdescription the quoted form is the format unit the entry in roundparentheses is the python object type that matches the format unitand the entry in square brackets is the type of the c variableswhose address should be passed
strings and buffers
numbers
b int unsigned char   convert a nonnegative python integer to an unsigned tiny int   stored in a c unsigned char
b int unsigned char   convert a python integer to a tiny int without overflow checking   stored in a c unsigned char
h int short int   convert a python integer to a c short int
h int unsigned short int   convert a python integer to a c unsigned short int without   overflow checking
i int int   convert a python integer to a plain c int
i int unsigned int   convert a python integer to a c unsigned int without overflow   checking
l int long int   convert a python integer to a c long int
k int unsigned long   convert a python integer to a c unsigned long without overflow   checking
l int long long   convert a python integer to a c long long
k int unsigned long long   convert a python integer to a c unsigned long long without   overflow checking
n int pyssizet   convert a python integer to a c pyssizet
c bytes or bytearray of length 1 char   convert a python byte represented as a bytes or bytearray   object of length 1 to a c char
   changed in version 3
3 allow bytearray objects
c str of length 1 int   convert a python character represented as a str object of length   1 to a c int
f float float   convert a python floating point number to a c float
d float double   convert a python floating point number to a c double
d complex pycomplex   convert a python complex number to a c pycomplex structure
other objects
o object pyobject    store a python object without any conversion in a c object   pointer
  the c program thus receives the actual object that was   passed
  the objects reference count is not increased
  the   pointer stored is not null
o object typeobject pyobject    store a python object in a c object pointer
  this is similar to   o but takes two c arguments the first is the address of a   python type object the second is the address of the c variable of   type pyobject into which the object pointer is stored
  if the   python object does not have the required type typeerror is   raised
o object converter anything   convert a python object to a c variable through a converter   function
  this takes two arguments the first is a function the   second is the address of a c variable of arbitrary type   converted to void 
  the converter function in turn is called   as follows      status  converterobject address   where object is the python object to be converted and address   is the void argument that was passed to the pyargparse   function
 the returned status should be 1 for a successful   conversion and 0 if the conversion has failed
  when the   conversion fails the converter function should raise an   exception and leave the content of address unmodified
   if the converter returns pycleanupsupported it may get   called a second time if the argument parsing eventually fails   giving the converter a chance to release any memory that it had   already allocated
 in this second call the object parameter will   be null address will have the same value as in the original   call
   changed in version 3
1 pycleanupsupported was added
p bool int   tests the value passed in for truth a boolean predicate and   converts the result to its equivalent c truefalse integer value
   sets the int to 1 if the expression was true and 0 if it was   false
 this accepts any valid python value
  see truth value   testing for more information about how python tests values for   truth
   new in version 3
3
items tuple matchingitems   the object must be a python sequence whose length is the number of   format units in items
  the c arguments must correspond to the   individual format units in items
  format units for sequences may   be nested
it is possible to pass long integers integers whose value exceedsthe platforms longmax however no proper range checking is done the most significant bits are silently truncated when thereceiving field is too small to receive the value actually thesemantics are inherited from downcasts in c  your mileage mayvary
a few other characters have a meaning in a format string
  these maynot occur inside nested parentheses
  they are   indicates that the remaining arguments in the python argument list   are optional
 the c variables corresponding to optional arguments   should be initialized to their default value  when an optional   argument is not specified pyargparsetuple does not touch the   contents of the corresponding c variables
   pyargparsetupleandkeywords only indicates that the remaining   arguments in the python argument list are keywordonly
  currently   all keywordonly arguments must also be optional arguments so    must always be specified before  in the format string
   new in version 3
3
   the list of format units ends here the string after the colon is   used as the function name in error messages the associated value   of the exception that pyargparsetuple raises
   the list of format units ends here the string after the semicolon   is used as the error message instead of the default error   message
   and  mutually exclude each other
note that any python object references which are provided to thecaller are borrowed references do not decrement their referencecountadditional arguments passed to these functions must be addresses ofvariables whose type is determined by the format string these areused to store values from the input tuple
  there are a few cases asdescribed in the list of format units above where these parametersare used as input values they should match what is specified for thecorresponding format unit in that case
for the conversion to succeed the arg object must match the formatand the format must be exhausted
  on success the pyargparsefunctions return true otherwise they return false and raise anappropriate exception
 when the pyargparse functions fail due toconversion failure in one of the format units the variables at theaddresses corresponding to that and the following format units areleft untouched
api functions
   parse the parameters of a function that takes only positional   parameters into local variables
  returns true on success on   failure it returns false and raises the appropriate exception
int pyargvaparsepyobject args const char format valist vargs   identical to pyargparsetuple except that it accepts a valist   rather than a variable number of arguments
   parse the parameters of a function that takes both positional and   keyword parameters into local variables
  the keywords argument   is a nullterminated array of keyword parameter names
  empty   names denote positionalonly parameters
 returns true on success   on failure it returns false and raises the appropriate exception
   changed in version 3
6 added support for positionalonly   parameters
int pyargvaparsetupleandkeywordspyobject args pyobject kw const char format char keywords valist vargs   identical to pyargparsetupleandkeywords except that it   accepts a valist rather than a variable number of arguments
int pyargvalidatekeywordargumentspyobject    ensure that the keys in the keywords argument dictionary are   strings
  this is only needed if pyargparsetupleandkeywords is   not used since the latter already does this check
   new in version 3
2
   function used to deconstruct the argument lists of oldstyle   functions  these are functions which use the metholdargs   parameter parsing method which has been removed in python 3
  this   is not recommended for use in parameter parsing in new code and   most code in the standard interpreter has been modified to no   longer use this for that purpose
  it does remain a convenient way   to decompose other tuples however and may continue to be used for   that purpose
   a simpler form of parameter retrieval which does not use a format   string to specify the types of the arguments
  functions which use   this method to retrieve their parameters should be declared as   methvarargs in function or method tables
  the tuple containing   the actual parameters should be passed as args it must actually   be a tuple
  the length of the tuple must be at least min and no   more than max min and max may be equal
  additional   arguments must be passed to the function each of which should be a   pointer to a pyobject variable these will be filled in with the   values from args they will contain borrowed references
  the   variables which correspond to optional parameters not given by   args will not be filled in these should be initialized by the   caller
 this function returns true on success and false if args   is not a tuple or contains the wrong number of elements an   exception will be set if there was a failure
   this is an example of the use of this function taken from the   sources for the weakref helper module for weak references      static pyobject       weakrefrefpyobject self pyobject args                pyobject object          pyobject callback  null          pyobject result  null          if pyargunpacktupleargs ref 1 2 object callback               result  pyweakrefnewrefobject callback                    return result         the call to pyargunpacktuple in this example is entirely   equivalent to this call to pyargparsetuple      pyargparsetupleargs ooref object callback
building values
   create a new value based on a format string similar to those   accepted by the pyargparse family of functions and a sequence   of values
  returns the value or null in the case of an error an   exception will be raised if null is returned
   pybuildvalue does not always build a tuple
  it builds a tuple   only if its format string contains two or more format units
  if   the format string is empty it returns none if it contains   exactly one format unit it returns whatever object is described by   that format unit
  to force it to return a tuple of size 0 or one   parenthesize the format string
   when memory buffers are passed as parameters to supply data to   build objects as for the s and s formats the required data   is copied
  buffers provided by the caller are never referenced by   the objects created by pybuildvalue
  in other words if your   code invokes malloc and passes the allocated memory to   pybuildvalue your code is responsible for calling free   for that memory once pybuildvalue returns
   in the following description the quoted form is the format unit   the entry in round parentheses is the python object type that the   format unit will return and the entry in square brackets is the   type of the c values to be passed
   the characters space tab colon and comma are ignored in format   strings but not within format units such as s
  this can be   used to make long format strings a tad more readable
   s str or none const char       convert a nullterminated c string to a python str object      using utf8 encoding
 if the c string pointer is null      none is used
   s str or none const char  int or pyssizet      convert a c string and its length to a python str object using      utf8 encoding
 if the c string pointer is null the      length is ignored and none is returned
   y bytes const char       this converts a c string to a python bytes object
  if the c      string pointer is null none is returned
   y bytes const char  int or pyssizet      this converts a c string and its lengths to a python object
  if      the c string pointer is null none is returned
   z str or none const char       same as s
   z str or none const char  int or pyssizet      same as s
   u str const wchart       convert a nullterminated wchart buffer of unicode utf16 or      ucs4 data to a python unicode object
  if the unicode buffer      pointer is null none is returned
   u str const wchart  int or pyssizet      convert a unicode utf16 or ucs4 data buffer and its length      to a python unicode object
   if the unicode buffer pointer is      null the length is ignored and none is returned
   u str or none const char       same as s
   u str or none const char  int or pyssizet      same as s
   i int int      convert a plain c int to a python integer object
   b int char      convert a plain c char to a python integer object
   h int short int      convert a plain c short int to a python integer object
   l int long int      convert a c long int to a python integer object
   b int unsigned char      convert a c unsigned char to a python integer object
   h int unsigned short int      convert a c unsigned short int to a python integer object
   i int unsigned int      convert a c unsigned int to a python integer object
   k int unsigned long      convert a c unsigned long to a python integer object
   l int long long      convert a c long long to a python integer object
   k int unsigned long long      convert a c unsigned long long to a python integer object
   n int pyssizet      convert a c pyssizet to a python integer
   c bytes of length 1 char      convert a c int representing a byte to a python bytes object      of length 1
   c str of length 1 int      convert a c int representing a character to python str      object of length 1
   d float double      convert a c double to a python floating point number
   f float float      convert a c float to a python floating point number
   d complex pycomplex       convert a c pycomplex structure to a python complex number
   o object pyobject       pass a python object untouched except for its reference count      which is incremented by one
  if the object passed in is a      null pointer it is assumed that this was caused because the      call producing the argument found an error and set an exception
      therefore pybuildvalue will return null but wont raise      an exception
  if no exception has been raised yet      systemerror is set
   s object pyobject       same as o
   n object pyobject       same as o except it doesnt increment the reference count on      the object
 useful when the object is created by a call to an      object constructor in the argument list
   o object converter anything      convert anything to a python object through a converter      function
  the function is called with anything which should      be compatible with void as its argument and should return a      new python object or null if an error occurred
   items tuple matchingitems      convert a sequence of c values to a python tuple with the same      number of items
   items list matchingitems      convert a sequence of c values to a python list with the same      number of items
   items dict matchingitems      convert a sequence of c values to a python dictionary
  each      pair of consecutive c values adds one item to the dictionary      serving as key and value respectively
   if there is an error in the format string the systemerror   exception is set and null returned
   identical to pybuildvalue except that it accepts a valist   rather than a variable number of arguments
list objects
pylistobject   this subtype of pyobject represents a python list object
pytypeobject pylisttype   this instance of pytypeobject represents the python list type
   this is the same object as list in the python layer
int pylistcheckpyobject p   return true if p is a list object or an instance of a subtype of   the list type
int pylistcheckexactpyobject p   return true if p is a list object but not an instance of a   subtype of the list type
   return a new list of length len on success or null on failure
   note     if len is greater than zero the returned list objects items     are set to null
  thus you cannot use abstract api functions     such as pysequencesetitem  or expose the object to python     code before setting all items to a real object with     pylistsetitem
pyssizet pylistsizepyobject list   return the length of the list object in list this is equivalent   to lenlist on a list object
pyssizet pylistgetsizepyobject list   macro form of pylistsize without error checking
   return the object at position index in the list pointed to by   list
  the position must be nonnegative indexing from the end   of the list is not supported
  if index is out of bounds 0 or   lenlist return null and set an indexerror exception
   macro form of pylistgetitem without error checking
int pylistsetitempyobject list pyssizet index pyobject item   set the item at index index in list to item
  return 0 on   success
 if index is out of bounds return 1 and set an   indexerror exception
   note     this function steals a reference to item and discards a     reference to an item already in the list at the affected     position
void pylistsetitempyobject list pyssizet i pyobject o   macro form of pylistsetitem without error checking
 this is   normally only used to fill in new lists where there is no previous   content
   note     this macro steals a reference to item and unlike     pylistsetitem does not discard a reference to any item     that is being replaced any reference in list at position i     will be leaked
int pylistinsertpyobject list pyssizet index pyobject item   insert the item item into list list in front of index index
   return 0 if successful return 1 and set an exception if   unsuccessful
 analogous to list
int pylistappendpyobject list pyobject item   append the object item at the end of list list
 return 0 if   successful return 1 and set an exception if unsuccessful
   analogous to list
   return a list of the objects in list containing the objects   between low and high
  return null and set an exception if   unsuccessful
  analogous to listlowhigh
  indexing from the   end of the list is not supported
int pylistsetslicepyobject list pyssizet low pyssizet high pyobject itemlist   set the slice of list between low and high to the contents of   itemlist
  analogous to listlowhigh  itemlist
 the   itemlist may be null indicating the assignment of an empty   list slice deletion
 return 0 on success 1 on failure
   indexing from the end of the list is not supported
int pylistsortpyobject list   sort the items of list in place
  return 0 on success 1 on   failure
  this is equivalent to list
int pylistreversepyobject list   reverse the items of list in place
  return 0 on success 1   on failure
  this is the equivalent of list
   return a new tuple object containing the contents of list   equivalent to tuplelist
reference counting
the none object
note that the pytypeobject for none is not directly exposed in thepythonc api
  since none is a singleton testing for objectidentity using  in c is sufficient
 there is no pynonecheckfunction for the same reason
pyobject pynone   the python none object denoting lack of value
  this object has   no methods
 it needs to be treated just like any other object with   respect to reference counts
pyreturnnone   properly handle returning pynone from within a c function that   is increment the reference count of none and return it

byte array objects
pybytearrayobject   this subtype of pyobject represents a python bytearray object
pytypeobject pybytearraytype   this instance of pytypeobject represents the python bytearray   type it is the same object as bytearray in the python layer
type check macros
int pybytearraycheckpyobject o   return true if the object o is a bytearray object or an instance   of a subtype of the bytearray type
int pybytearraycheckexactpyobject o   return true if the object o is a bytearray object but not an   instance of a subtype of the bytearray type
direct api functions
   return a new bytearray object from any object o that implements   the buffer protocol
   create a new bytearray object from string and its length len
   on failure null is returned
   concat bytearrays a and b and return a new bytearray with the   result
pyssizet pybytearraysizepyobject bytearray   return the size of bytearray after checking for a null pointer
char pybytearrayasstringpyobject bytearray   return the contents of bytearray as a char array after checking   for a null pointer
  the returned array always has an extra null   byte appended
int pybytearrayresizepyobject bytearray pyssizet len   resize the internal buffer of bytearray to len
macros
these macros trade safety for speed and they dont check pointers
char pybytearrayasstringpyobject bytearray   macro version of pybytearrayasstring
pyssizet pybytearraygetsizepyobject bytearray   macro version of pybytearraysize
memory management
overview
memory management in python involves a private heap containing allpython objects and data structures
 the management of this privateheap is ensured internally by the python memory manager
  the pythonmemory manager has different components which deal with variousdynamic storage management aspects like sharing segmentationpreallocation or caching
at the lowest level a raw memory allocator ensures that there isenough room in the private heap for storing all pythonrelated data byinteracting with the memory manager of the operating system
 on top ofthe raw memory allocator several objectspecific allocators operateon the same heap and implement distinct memory management policiesadapted to the peculiarities of every object type
 for exampleinteger objects are managed differently within the heap than stringstuples or dictionaries because integers imply different storagerequirements and speedspace tradeoffs
 the python memory manager thusdelegates some of the work to the objectspecific allocators butensures that the latter operate within the bounds of the private heap
it is important to understand that the management of the python heapis performed by the interpreter itself and that the user has nocontrol over it even if they regularly manipulate object pointers tomemory blocks inside that heap
  the allocation of heap space forpython objects and other internal buffers is performed on demand bythe python memory manager through the pythonc api functions listed inthis document
to avoid memory corruption extension writers should never try tooperate on python objects with the functions exported by the clibrary malloc calloc realloc and free
  this willresult in  mixed calls between the c allocator and the python memorymanager with fatal consequences because they implement differentalgorithms and operate on different heaps
  however one may safelyallocate and release memory blocks with the c library allocator forindividual purposes as shown in the following example   pyobject res   char buf  char  mallocbufsiz  for io    if buf  null       return pyerrnomemory   
   res  pybytesfromstringbuf   freebuf  malloced    return resin this example the memory request for the io buffer is handled bythe c library allocator
 the python memory manager is involved only inthe allocation of the bytes object returned as a result
in most situations however it is recommended to allocate memory fromthe python heap specifically because the latter is under control ofthe python memory manager
 for example this is required when theinterpreter is extended with new object types written in c
 anotherreason for using the python heap is the desire to inform the pythonmemory manager about the memory needs of the extension module
 evenwhen the requested memory is used exclusively for internal highlyspecific purposes delegating all memory requests to the python memorymanager causes the interpreter to have a more accurate image of itsmemory footprint as a whole
 consequently under certaincircumstances the python memory manager may or may not triggerappropriate actions like garbage collection memory compaction orother preventive procedures
 note that by using the c libraryallocator as shown in the previous example the allocated memory forthe io buffer escapes completely the python memory manager
see also  the pythonmalloc environment variable can be used to configure the  memory allocators used by python
  the pythonmallocstats environment variable can be used to print  statistics of the pymalloc memory allocator every time a new  pymalloc object arena is created and on shutdown
raw memory interface
memory interface
object allocators
the following function sets modeled after the ansi c standard butspecifying behavior when requesting zero bytes are available forallocating and releasing memory from the python heap
the default object allocator uses the pymalloc memory allocator
warning  the gil must be held when using these functions
void pyobjectmallocsizet n   allocates n bytes and returns a pointer of type void to the   allocated memory or null if the request fails
   requesting zero bytes returns a distinct nonnull pointer if   possible as if pyobjectmalloc1 had been called instead
 the   memory will not have been initialized in any way
void pyobjectcallocsizet nelem sizet elsize   allocates nelem elements each whose size in bytes is elsize and   returns a pointer of type void to the allocated memory or   null if the request fails
 the memory is initialized to zeros
   requesting zero elements or elements of size zero bytes returns a   distinct nonnull pointer if possible as if pyobjectcalloc1   1 had been called instead
   new in version 3
5
void pyobjectreallocvoid p sizet n   resizes the memory block pointed to by p to n bytes
 the   contents will be unchanged to the minimum of the old and the new   sizes
   if p is null the call is equivalent to pyobjectmallocn   else if n is equal to zero the memory block is resized but is   not freed and the returned pointer is nonnull
   unless p is null it must have been returned by a previous call   to pyobjectmalloc pyobjectrealloc or   pyobjectcalloc
   if the request fails pyobjectrealloc returns null and p   remains a valid pointer to the previous memory area
void pyobjectfreevoid p   frees the memory block pointed to by p which must have been   returned by a previous call to pyobjectmalloc   pyobjectrealloc or pyobjectcalloc
  otherwise or if   pyobjectfreep has been called before undefined behavior   occurs
   if p is null no operation is performed
default memory allocators
default memory allocators configuration                    name                  pymemrawmalloc     pymemmalloc           pyobjectmalloc       release build                    pymalloc          malloc            pymalloc             pymalloc            debug build                      pymallocdebug    malloc  debug    pymalloc  debug     pymalloc  debug    release build without pymalloc  malloc            malloc            malloc               malloc              debug build without pymalloc    mallocdebug      malloc  debug    malloc  debug       malloc  debug     legend name value for pythonmalloc environment variable malloc system allocators from the standard c library c  functions malloc calloc realloc and free pymalloc pymalloc memory allocator  debug with debug hooks installed by pymemsetupdebughooks
customize memory allocators
the pymalloc allocator
python has a pymalloc allocator optimized for small objects smalleror equal to 512 bytes with a short lifetime
 it uses memory mappingscalled arenas with a fixed size of 256 kib
 it falls back topymemrawmalloc and pymemrawrealloc for allocations largerthan 512 bytes
pymalloc is the default allocator of the pymemdomainmem expymemmalloc and pymemdomainobj ex pyobjectmallocdomains
the arena allocator uses the following functions virtualalloc and virtualfree on windows mmap and munmap if available malloc and free otherwise
customize pymalloc arena allocator
tracemalloc c api
new in version 3
7
int pytracemalloctrackunsigned int domain uintptrt ptr sizet size   track an allocated memory block in the tracemalloc module
   return 0 on success return 1 on error failed to allocate   memory to store the trace
 return 2 if tracemalloc is disabled
   if memory block is already tracked update the existing trace
int pytracemallocuntrackunsigned int domain uintptrt ptr   untrack an allocated memory block in the tracemalloc module
 do   nothing if the block was not tracked
   return 2 if tracemalloc is disabled otherwise return 0
examples
here is the example from section overview rewritten so that the iobuffer is allocated from the python heap by using the first functionset   pyobject res   char buf  char  pymemmallocbufsiz  for io    if buf  null       return pyerrnomemory    
    res  pybytesfromstringbuf   pymemfreebuf  allocated with pymemmalloc    return resthe same code using the typeoriented function set   pyobject res   char buf  pymemnewchar bufsiz  for io    if buf  null       return pyerrnomemory    
    res  pybytesfromstringbuf   pymemdelbuf  allocated with pymemnew    return resnote that in the two examples above the buffer is always manipulatedvia functions belonging to the same set
 indeed it is required to usethe same memory api family for a given memory block so that the riskof mixing different allocators is reduced to a minimum
 the followingcode sequence contains two errors one of which is labeled as fatalbecause it mixes two different allocators operating on differentheaps
   pymemdelbuf3   wrong  should be pymemfree    freebuf2        right  allocated via malloc    freebuf1        fatal  should be pymemdel  in addition to the functions aimed at handling raw memory blocks fromthe python heap objects in python are allocated and released withpyobjectnew pyobjectnewvar and pyobjectdel
these will be explained in the next chapter on defining andimplementing new object types in c
common object structures
base object types and macros
   new in version 3
9
   new in version 3
9
   new in version 3
9
   new in version 3
9
implementing functions and methods
 the   function signature is      pyobject pycmethodpyobject self                          pytypeobject definingclass                          pyobject const args                          pyssizet nargs                          pyobject kwnames   new in version 3
9
  this   structure has four fields       field               c type           meaning                                mlname           const char      name of the method                     mlmeth           pycfunction      pointer to the c implementation        mlflags          int              flag bits indicating how the                                             call should be constructed             mldoc            const char      points to the contents of the                                            docstring                          the mlmeth is a c function pointer
   new in version 3
7
   new in version 3
7
   new in version 3
9
accessing attributes of extension types
  its fields are       field               c type           meaning                                name              const char      name of the member                     type              int              the type of the member in the c                                          struct                                 offset            pyssizet       the offset in bytes that the                                             member is located on the types                                          object struct                          flags             int              flag bits indicating if the                                              field should be readonly or                                             writable                               doc               const char      points to the contents of the                                            docstring                             type can be one of many t macros corresponding to various c   types
       macro name       c type                    tshort          short                     tint            int                       tlong           long                      tfloat          float                     tdouble         double                    tstring         const char               tobject         pyobject                 tobjectex      pyobject                 tchar           char                      tbyte           char                      tubyte          unsigned char             tuint           unsigned int              tushort         unsigned short            tulong          unsigned long             tbool           char                      tlonglong       long long                 tulonglong      unsigned long long        tpyssizet       pyssizet               tobject and tobjectex differ in that tobject returns   none if the member is null and tobjectex raises an   attributeerror
       field          c type              meaning                                    name           const char         attribute name                             get            getter              c function to get the attribute            set            setter              optional c function to set or                                              delete the attribute if omitted                                           the attribute is readonly                  doc            const char         optional docstring                         closure        void               optional function pointer                                                 providing additional data for                                              getter and setter                         the get function takes one pyobject parameter the instance   and a function pointer the associated closure      typedef pyobject getterpyobject  void    it should return a new reference on success or null with a set   exception on failure
integer objects
context variables objects
datetime objects
various date and time objects are supplied by the datetime module
before using any of these functions the header file datetime
h mustbe included in your source note that this is not included bypython
h and the macro pydatetimeimport must be invokedusually as part of the module initialisation function
  the macro putsa pointer to a c structure into a static variable pydatetimeapithat is used by the following macros
macro for access to the utc singletonpyobject pydatetimetimezoneutc   returns the time zone singleton representing utc the same object   as datetime
utc
   new in version 3
7
typecheck macrosint pydatecheckpyobject ob   return true if ob is of type pydatetimedatetype or a subtype   of pydatetimedatetype
  ob must not be null
int pydatecheckexactpyobject ob   return true if ob is of type pydatetimedatetype
 ob must not   be null
int pydatetimecheckpyobject ob   return true if ob is of type pydatetimedatetimetype or a   subtype of pydatetimedatetimetype
  ob must not be null
int pydatetimecheckexactpyobject ob   return true if ob is of type pydatetimedatetimetype
 ob must   not be null
int pytimecheckpyobject ob   return true if ob is of type pydatetimetimetype or a subtype   of pydatetimetimetype
  ob must not be null
int pytimecheckexactpyobject ob   return true if ob is of type pydatetimetimetype
 ob must not   be null
int pydeltacheckpyobject ob   return true if ob is of type pydatetimedeltatype or a subtype   of pydatetimedeltatype
  ob must not be null
int pydeltacheckexactpyobject ob   return true if ob is of type pydatetimedeltatype
 ob must   not be null
int pytzinfocheckpyobject ob   return true if ob is of type pydatetimetzinfotype or a subtype   of pydatetimetzinfotype
  ob must not be null
int pytzinfocheckexactpyobject ob   return true if ob is of type pydatetimetzinfotype
 ob must   not be null
macros to create objectspyobject pydatefromdateint year int month int day    return value new reference
   return a datetime
date object with the specified year month and   day
   return a datetime
datetime object with the specified year month   day hour minute second and microsecond
   return a datetime
datetime object with the specified year month   day hour minute second microsecond and fold
   new in version 3
6
   return a datetime
time object with the specified hour minute   second and microsecond
   return a datetime
time object with the specified hour minute   second microsecond and fold
   new in version 3
6
   return a datetime
timedelta object representing the given number   of days seconds and microseconds
  normalization is performed so   that the resulting number of microseconds and seconds lie in the   ranges documented for datetime
timedelta objects
   return a datetime
timezone object with an unnamed fixed offset   represented by the offset argument
   new in version 3
7
   return a datetime
timezone object with a fixed offset represented   by the offset argument and with tzname name
   new in version 3
7
macros to extract fields from date objects
  the argument must be aninstance of pydatetimedate including subclasses such aspydatetimedatetime
  the argument must not be null and the typeis not checkedint pydatetimegetyearpydatetimedate o   return the year as a positive int
int pydatetimegetmonthpydatetimedate o   return the month as an int from 1 through 12
int pydatetimegetdaypydatetimedate o   return the day as an int from 1 through 31
macros to extract fields from datetime objects
  the argument must bean instance of pydatetimedatetime including subclasses
 theargument must not be null and the type is not checkedint pydatetimedategethourpydatetimedatetime o   return the hour as an int from 0 through 23
int pydatetimedategetminutepydatetimedatetime o   return the minute as an int from 0 through 59
int pydatetimedategetsecondpydatetimedatetime o   return the second as an int from 0 through 59
int pydatetimedategetmicrosecondpydatetimedatetime o   return the microsecond as an int from 0 through 999999
macros to extract fields from time objects
  the argument must be aninstance of pydatetimetime including subclasses
 the argument mustnot be null and the type is not checkedint pydatetimetimegethourpydatetimetime o   return the hour as an int from 0 through 23
int pydatetimetimegetminutepydatetimetime o   return the minute as an int from 0 through 59
int pydatetimetimegetsecondpydatetimetime o   return the second as an int from 0 through 59
int pydatetimetimegetmicrosecondpydatetimetime o   return the microsecond as an int from 0 through 999999
macros to extract fields from time delta objects
  the argument mustbe an instance of pydatetimedelta including subclasses
 theargument must not be null and the type is not checkedint pydatetimedeltagetdayspydatetimedelta o   return the number of days as an int from 999999999 to 999999999
   new in version 3
3
int pydatetimedeltagetsecondspydatetimedelta o   return the number of seconds as an int from 0 through 86399
   new in version 3
3
int pydatetimedeltagetmicrosecondspydatetimedelta o   return the number of microseconds as an int from 0 through 999999
   new in version 3
3
macros for the convenience of modules implementing the db apipyobject pydatetimefromtimestamppyobject args    return value new reference
   create and return a new datetime
datetime object given an   argument tuple suitable for passing to   datetime
   create and return a new datetime
date object given an argument   tuple suitable for passing to datetime
utilities
the functions in this chapter perform various utility tasks rangingfrom helping c code be more portable across platforms using pythonmodules from c and parsing function arguments and constructing pythonvalues from c values
 operating system utilities system functions process control importing modules data marshalling support parsing arguments and building values   parsing arguments     strings and buffers     numbers     other objects     api functions   building values string conversion and formatting reflection codec registry and support functions   codec lookup api   registry api for unicode encoding error handlers
memoryview objects
a memoryview object exposes the c level buffer interface as a pythonobject which can then be passed around like any other object
   create a memoryview object from an object that provides the buffer   interface
 if obj supports writable buffer exports the   memoryview object will be readwrite otherwise it may be either   readonly or readwrite at the discretion of the exporter
   create a memoryview object using mem as the underlying buffer
   flags can be one of pybufread or pybufwrite
   new in version 3
3
   create a memoryview object wrapping the given buffer structure   view
 for simple byte buffers pymemoryviewfrommemory is the   preferred function
   create a memoryview object to a contiguous chunk of memory in   either c or fortran order from an object that defines the   buffer interface
 if memory is contiguous the memoryview object   points to the original memory
 otherwise a copy is made and the   memoryview points to a new bytes object
int pymemoryviewcheckpyobject obj   return true if the object obj is a memoryview object
  it is not   currently allowed to create subclasses of memoryview
pybuffer pymemoryviewgetbufferpyobject mview   return a pointer to the memoryviews private copy of the exporters   buffer
 mview must be a memoryview instance this macro   doesnt check its type you must do it yourself or you will risk   crashes
pybuffer pymemoryviewgetbasepyobject mview   return either a pointer to the exporting object that the memoryview   is based on or null if the memoryview has been created by one of   the functions pymemoryviewfrommemory or   pymemoryviewfrombuffer
 mview must be a memoryview   instance
data marshalling support
these routines allow c code to work with serialized objects using thesame data format as the marshal module
  there are functions towrite data into the serialization format and additional functionsthat can be used to read the data back
  files used to storemarshalled data must be opened in binary mode
numeric values are stored with the least significant byte first
the module supports two versions of the data format version 0 is thehistorical version version 1 shares interned strings in the file andupon unmarshalling
  version 2 uses a binary format for floating pointnumbers
 pymarshalversion indicates the current file formatcurrently 2
void pymarshalwritelongtofilelong value file file int version   marshal a long integer value to file
  this will only write   the leastsignificant 32 bits of value regardless of the size of   the native long type
  version indicates the file format
void pymarshalwriteobjecttofilepyobject value file file int version   marshal a python object value to file
 version indicates   the file format
   return a bytes object containing the marshalled representation of   value
 version indicates the file format
the following functions allow marshalled values to be read back in
long pymarshalreadlongfromfilefile file   return a c long from the data stream in a file opened for   reading
  only a 32bit value can be read in using this function   regardless of the native size of long
   on error sets the appropriate exception eoferror and returns   1
int pymarshalreadshortfromfilefile file   return a c short from the data stream in a file opened for   reading
  only a 16bit value can be read in using this function   regardless of the native size of short
   on error sets the appropriate exception eoferror and returns   1
   return a python object from the data stream in a file opened for   reading
   on error sets the appropriate exception eoferror valueerror   or typeerror and returns null
   return a python object from the data stream in a file opened for   reading
  unlike pymarshalreadobjectfromfile this function   assumes that no further objects will be read from the file   allowing it to aggressively load file data into memory so that the   deserialization can operate from data in memory rather than   reading a byte at a time from the file
  only use these variant if   you are certain that you wont be reading anything else from the   file
   on error sets the appropriate exception eoferror valueerror   or typeerror and returns null
   return a python object from the data stream in a byte buffer   containing len bytes pointed to by data
   on error sets the appropriate exception eoferror valueerror   or typeerror and returns null
type objects
pytypeobject   the c structure of the objects used to describe builtin types
pyobject pytypetype   this is the type object for type objects it is the same object as   type in the python layer
int pytypecheckpyobject o   return nonzero if the object o is a type object including   instances of types derived from the standard type object
  return 0   in all other cases
   new in version 3
2
   changed in version 3
4 the return type is now unsigned long   rather than long
   new in version 3
4
   new in version 3
9
   new in version 3
9
creating heapallocated types
   new in version 3
9
   new in version 3
3
      changed in version 3
9 slots in pybufferprocs in may be set      in the unlimited api
object implementation support
this chapter describes the functions types and macros used whendefining new object types
 allocating objects on the heap common object structures   base object types and macros   implementing functions and methods   accessing attributes of extension types type objects   quick reference     tp slots     subslots     slot typedefs   pytypeobject definition   pyobject slots   pyvarobject slots   pytypeobject slots   heap types number object structures mapping object structures sequence object structures buffer object structures async object structures slot type typedefs examples supporting cyclic garbage collection
abstract objects layer
pythonc api reference manual
this manual documents the api used by c and c programmers who wantto write extension modules or embed python
  it is a companion toextending and embedding the python interpreter which describes thegeneral principles of extension writing but does not document the apifunctions in detail
 introduction   coding standards   include files   useful macros   objects types and reference counts   exceptions   embedding python   debugging builds stable application binary interface the very high level layer reference counting exception handling   printing and clearing   raising exceptions   issuing warnings   querying the error indicator   signal handling   exception classes   exception objects   unicode exception objects   recursion control   standard exceptions   standard warning categories utilities   operating system utilities   system functions   process control   importing modules   data marshalling support   parsing arguments and building values   string conversion and formatting   reflection   codec registry and support functions abstract objects layer   object protocol   call protocol   number protocol   sequence protocol   mapping protocol   iterator protocol   buffer protocol   old buffer protocol concrete objects layer   fundamental objects   numeric objects   sequence objects   container objects   function objects   other objects initialization finalization and threads   before python initialization   global configuration variables   initializing and finalizing the interpreter   processwide parameters   thread state and the global interpreter lock   subinterpreter support   asynchronous notifications   profiling and tracing   advanced debugger support   thread local storage support python initialization configuration   pywidestringlist   pystatus   pypreconfig   preinitialization with pypreconfig   pyconfig   initialization with pyconfig   isolated configuration   python configuration   path configuration   pyrunmain   pygetargcargv   multiphase initialization private provisional api memory management   overview   raw memory interface   memory interface   object allocators   default memory allocators   customize memory allocators   the pymalloc allocator   tracemalloc c api   examples object implementation support   allocating objects on the heap   common object structures   type objects   number object structures   mapping object structures   sequence object structures   buffer object structures   async object structures   slot type typedefs   examples   supporting cyclic garbage collection api and abi versioning
dictionary objects
iterator objects
python provides two generalpurpose iterator objects
  the first asequence iterator works with an arbitrary sequence supporting thegetitem method
  the second works with a callable object and asentinel value calling the callable for each item in the sequenceand ending the iteration when the sentinel value is returned
pytypeobject pyseqitertype   type object for iterator objects returned by pyseqiternew and   the oneargument form of the iter builtin function for built   in sequence types
int pyseqitercheckop   return true if the type of op is pyseqitertype
   return an iterator that works with a general sequence object   seq
  the iteration ends when the sequence raises indexerror   for the subscripting operation
pytypeobject pycallitertype   type object for iterator objects returned by pycalliternew and   the twoargument form of the iter builtin function
int pycallitercheckop   return true if the type of op is pycallitertype
   return a new iterator
  the first parameter callable can be any   python callable object that can be called with no parameters each   call to it should return the next item in the iteration
  when   callable returns a value equal to sentinel the iteration will   be terminated
instance method objects
an instance method is a wrapper for a pycfunction and the new way tobind a pycfunction to a class object
 it replaces the former callpymethodnewfunc null class
pytypeobject pyinstancemethodtype   this instance of pytypeobject represents the python instance   method type
 it is not exposed to python programs
int pyinstancemethodcheckpyobject o   return true if o is an instance method object has type   pyinstancemethodtype
  the parameter must not be null
   return a new instance method object with func being any callable   object func is the function that will be called when the instance   method is called
   return the function object associated with the instance method   im
   macro version of pyinstancemethodfunction which avoids error   checking
concrete objects layer
the functions in this chapter are specific to certain python objecttypes
 passing them an object of the wrong type is not a good idea ifyou receive an object from a python program and you are not sure thatit has the right type you must perform a type check first forexample to check that an object is a dictionary usepydictcheck
  the chapter is structured like the family tree ofpython object types
warning  while the functions described in this chapter carefully check the  type of the objects which are passed in many of them do not check  for null being passed instead of a valid object
  allowing null  to be passed in can cause memory access violations and immediate  termination of the interpreter
fundamental objects
this section describes python type objects and the singleton objectnone
 type objects   creating heapallocated types the none object
numeric objects
 integer objects boolean objects floating point objects complex number objects   complex numbers as c structures   complex numbers as python objects
sequence objects
generic operations on sequence objects were discussed in the previouschapter this section deals with the specific kinds of sequenceobjects that are intrinsic to the python language
 bytes objects byte array objects   type check macros   direct api functions   macros unicode objects and codecs   unicode objects     unicode type     unicode character properties     creating and accessing unicode strings     deprecated pyunicode apis     locale encoding     file system encoding     wchart support   builtin codecs     generic codecs     utf8 codecs     utf32 codecs     utf16 codecs     utf7 codecs     unicodeescape codecs     rawunicodeescape codecs     latin1 codecs     ascii codecs     character map codecs     mbcs codecs for windows     methods  slots   methods and slot functions tuple objects struct sequence objects list objects
container objects
 dictionary objects set objects
function objects
 function objects instance method objects method objects cell objects code objects
other objects
 file objects module objects   initializing c modules     singlephase initialization     multiphase initialization     lowlevel module creation functions     support functions   module lookup iterator objects descriptor objects slice objects ellipsis object memoryview objects weak reference objects capsules generator objects coroutine objects context variables objects datetime objects
api and abi versioning
pyversionhex is the python version number encoded in a singleinteger
for example if the pyversionhex is set to 0x030401a2 theunderlying version information can be found by treating it as a 32 bitnumber in the following manner       bytes    bits big endian order    meaning                                                 1      18                      pymajorversion the 3 in 3
1a2               2      916                     pyminorversion the 4 in 3
1a2               3      1724                    pymicroversion the 1 in 3
1a2               4      2528                    pyreleaselevel 0xa for alpha 0xb for                                           beta 0xc for release candidate and 0xf for                                          final in this case it is alpha
                                2932                    pyreleaseserial the 2 in 3
1a2 zero                                          for final releases                                 thus 3
1a2 is hexversion 0x030401a2
all the given macros are defined in includepatchlevel
reflection
   return a dictionary of the builtins in the current execution frame   or the interpreter of the thread state if no frame is currently   executing
   return a dictionary of the local variables in the current execution   frame or null if no frame is currently executing
   return a dictionary of the global variables in the current   execution frame or null if no frame is currently executing
   return the current thread states frame which is null if no   frame is currently executing
   see also pythreadstategetframe
int pyframegetbackpyframeobject frame   get the frame next outer frame
   return a strong reference or null if frame has no outer frame
   frame must not be null
   new in version 3
9
int pyframegetcodepyframeobject frame   get the frame code
   return a strong reference
   frame must not be null
 the result frame code cannot be   null
   new in version 3
9
int pyframegetlinenumberpyframeobject frame   return the line number that frame is currently executing
   frame must not be null
const char pyevalgetfuncnamepyobject func   return the name of func if it is a function class or instance   object else the name of funcs type
const char pyevalgetfuncdescpyobject func   return a description string depending on the type of func
   return values include  for functions and methods    constructor  instance and  object
  concatenated with the   result of pyevalgetfuncname the result will be a description   of func
bytes objects
importing modules
   this function always uses absolute imports
   this function is a deprecated alias of pyimportimportmodule
   changed in version 3
3 this function used to fail immediately when   the import lock was held by another thread
3 though   the locking scheme switched to permodule locks for most purposes   so this functions special behaviour isnt needed anymore
   new in version 3
3
   changed in version 3
3 negative values for level are no longer   accepted
   this function always uses absolute imports
   note     this function does not load or import the module if the module     wasnt already loaded you will get an empty module object
   new in version 3
3
   see also pyimportexeccodemodulewithpathnames
   new in version 3
3
   new in version 3
2
   changed in version 3
3 uses imp
sourcefromcache in   calculating the source path if only the bytecode path is provided
   changed in version 3
3 return value of 1 upon failure
   new in version 3
2
   new in version 3
7
   new in version 3
3
   changed in version 3
4 the file attribute is no longer set   on the module
h is      struct frozen           const char name          const unsigned char code          int size      const struct frozen pyimportfrozenmodules   this pointer is initialized to point to an array of struct   frozen records terminated by one whose members are all null or   zero
  when a frozen module is imported it is searched in this   table
  thirdparty code could play tricks with this to provide a   dynamically created collection of frozen modules
cell objects
cell objects are used to implement variables referenced by multiplescopes
 for each such variable a cell object is created to store thevalue the local variables of each stack frame that references thevalue contains a reference to the cells from outer scopes which alsouse that variable
  when the value is accessed the value contained inthe cell is used instead of the cell object itself
  this dereferencing of the cell object requires support from the generatedbytecode these are not automatically dereferenced when accessed
cell objects are not likely to be useful elsewhere
pycellobject   the c structure used for cell objects
pytypeobject pycelltype   the type object corresponding to cell objects
int pycellcheckob   return true if ob is a cell object ob must not be null
   create and return a new cell object containing the value ob
 the   parameter may be null
   return the contents of the cell cell
   return the contents of the cell cell but without checking that   cell is nonnull and a cell object
int pycellsetpyobject cell pyobject value   set the contents of the cell object cell to value
  this   releases the reference to any current content of the cell
 value   may be null
  cell must be nonnull if it is not a cell   object 1 will be returned
  on success 0 will be returned
void pycellsetpyobject cell pyobject value   sets the value of the cell object cell to value
  no reference   counts are adjusted and no checks are made for safety cell must   be nonnull and must be a cell object
boolean objects
coroutine objects
new in version 3
5
coroutine objects are what functions declared with an async keywordreturn
pycoroobject   the c structure used for coroutine objects
pytypeobject pycorotype   the type object corresponding to coroutine objects
int pycorocheckexactpyobject ob   return true if obs type is pycorotype ob must not be   null
   create and return a new coroutine object based on the frame   object with name and qualname set to name and   qualname
 a reference to frame is stolen by this function
  the   frame argument must not be null
slice objects
buffer protocol
certain objects available in python wrap access to an underlyingmemory array or buffer
  such objects include the builtin bytesand bytearray and some extension types like array
array
 thirdparty libraries may define their own types for special purposes suchas image processing or numeric analysis
while each of these types have their own semantics they share thecommon characteristic of being backed by a possibly large memorybuffer
  it is then desirable in some situations to access thatbuffer directly and without intermediate copying
python provides such a facility at the c level in the form of thebuffer protocol
  this protocol has two sides on the producer side a type can export a buffer interface which  allows objects of that type to expose information about their  underlying buffer
 this interface is described in the section buffer  object structures on the consumer side several means are available to obtain a  pointer to the raw underlying data of an object for example a  method parameter
simple objects such as bytes and bytearray expose their underlyingbuffer in byteoriented form
  other forms are possible for examplethe elements exposed by an array
array can be multibyte values
an example consumer of the buffer interface is the write method offile objects any object that can export a series of bytes through thebuffer interface can be written to a file
  while write only needsreadonly access to the internal contents of the object passed to itother methods such as readinto need write access to the contentsof their argument
  the buffer interface allows objects to selectivelyallow or reject exporting of readwrite and readonly buffers
there are two ways for a consumer of the buffer interface to acquire abuffer over a target object call pyobjectgetbuffer with the right parameters call pyargparsetuple or one of its siblings with one of the  y w or s format codes
in both cases pybufferrelease must be called when the bufferisnt needed anymore
  failure to do so could lead to various issuessuch as resource leaks
buffer structure
buffer structures or simply buffers are useful as a way to exposethe binary data from another object to the python programmer
  theycan also be used as a zerocopy slicing mechanism
  using theirability to reference a block of memory it is possible to expose anydata to the python programmer quite easily
  the memory could be alarge constant array in a c extension it could be a raw block ofmemory for manipulation before passing to an operating system libraryor it could be used to pass around structured data in its native inmemory format
contrary to most data types exposed by the python interpreter buffersare not pyobject pointers but rather simple c structures
  thisallows them to be created and copied very simply
  when a genericwrapper around a buffer is needed a memoryview object can be created
for short instructions how to write an exporting object see bufferobject structures
 for obtaining a buffer see pyobjectgetbuffer
pybuffer   void buf      a pointer to the start of the logical structure described by the      buffer fields
 this can be any location within the underlying      physical memory block of the exporter
 for example with      negative strides the value may point to the end of the memory      block
      for contiguous arrays the value points to the beginning of      the memory block
   void obj      a new reference to the exporting object
 the reference is owned      by the consumer and automatically decremented and set to null      by pybufferrelease
 the field is the equivalent of the      return value of any standard capi function
      as a special case for temporary buffers that are wrapped by      pymemoryviewfrombuffer or pybufferfillinfo this field      is null
 in general exporting objects must not use this      scheme
 for contiguous arrays this is the      length of the underlying memory block
 for noncontiguous      arrays it is the length that the logical structure would have      if it were copied to a contiguous representation
      accessing char buf0 up to char buflen1 is only      valid if the buffer has been obtained by a request that      guarantees contiguity
 in most cases such a request will be      pybufsimple or pybufwritable
   int readonly      an indicator of whether the buffer is readonly
 this field is      controlled by the pybufwritable flag
   pyssizet itemsize      item size in bytes of a single element
 same as the value of      struct
calcsize called on nonnull format values
      important exception if a consumer requests a buffer without the      pybufformat flag format will be set to  null  but      itemsize still has the value for the original format
      if shape is present the equality productshape  itemsize       len still holds and the consumer can use itemsize to      navigate the buffer
      if shape is null as a result of a pybufsimple or a      pybufwritable request the consumer must disregard itemsize      and assume itemsize  1
   const char format      a nul terminated string in struct module style syntax      describing the contents of a single item
 if this is null      b unsigned bytes is assumed
      this field is controlled by the pybufformat flag
      shape values are restricted to shapen  0
 the case      shapen  0 requires special attention
 see complex arrays      for further information
      the shape array is readonly for the consumer
      stride values can be any integer
 for regular arrays strides      are usually positive but a consumer must be able to handle the      case stridesn  0
 see complex arrays for further      information
      the strides array is readonly for the consumer
      this type of array representation is used by the python imaging      library pil
 see complex arrays for further information how to      access elements of such an array
      the suboffsets array is readonly for the consumer
buffer request types
requestindependent fields
readonly format
shape strides suboffsets
 request                        shape    strides    suboffsets    pybufindirect                 yes      yes        if needed     pybufstrides                  yes      yes        null          pybufnd                       yes      null       null          pybufsimple                   null     null       null         
contiguity requests
 request                              shape    strides    suboffsets    contig    pybufccontiguous                   yes      yes        null          c         pybuffcontiguous                   yes      yes        null          f         pybufanycontiguous                 yes      yes        null          c or f    pybufnd                           yes      null       null          c        
compound requests
all possible requests are fully defined by some combination of theflags in the previous section
 for convenience the buffer protocolprovides frequently used combinations as single flags
 request                          shape    strides    suboffsets    contig    readonly    format    pybuffull                       yes      yes        if needed     u         0           yes       pybuffullro                    yes      yes        if needed     u         1 or 0      yes       pybufrecords                    yes      yes        null          u         0           yes       pybufrecordsro                 yes      yes        null          u         1 or 0      yes       pybufstrided                    yes      yes        null          u         0           null      pybufstridedro                 yes      yes        null          u         1 or 0      null      pybufcontig                     yes      null       null          c         0           null      pybufcontigro                  yes      null       null          c         1 or 0      null     
complex arrays
numpystyle shape and strides
pilstyle shape strides and suboffsets
bufferrelated functions
   new in version 3
9
 otherwise raise pyexcbuffererror set viewobj to   null and return 1   if this function is used as part of a getbufferproc exporter   must be set to the exporting object and flags must be passed   unmodified
 otherwise exporter must be null
file objects
these apis are a minimal emulation of the python 2 c api for builtinfile objects which used to rely on the buffered io file supportfrom the c standard library
  in python 3 files and streams use thenew io module which defines several layers over the lowlevelunbuffered io of the operating system
  the functions described beloware convenience c wrappers over these new apis and meant mostly forinternal error reporting in the interpreter thirdparty code isadvised to access the io apis instead
   create a python file object from the file descriptor of an already   opened file fd
  the arguments name encoding errors and   newline can be null to use the defaults buffering can be   1 to use the default
 name is ignored and kept for backward   compatibility
 return null on failure
 for a more comprehensive   description of the arguments please refer to the io
open   function documentation
   warning     since python streams have their own buffering layer mixing them     with oslevel file descriptors can produce various issues such     as unexpected ordering of data
   changed in version 3
2 ignore name attribute
int pyobjectasfiledescriptorpyobject p   return the file descriptor associated with p as an int
  if the   object is an integer its value is returned
  if not the objects   fileno method is called if it exists the method must return an   integer which is returned as the file descriptor value
  sets an   exception and returns 1 on failure
   equivalent to p
readlinen this function reads one line from   the object p
  p may be a file object or any object with a   readline method
  if n is 0 exactly one line is read   regardless of the length of the line
  if n is greater than 0   no more than n bytes will be read from the file a partial line   can be returned
  in both cases an empty string is returned if the   end of the file is reached immediately
  if n is less than 0   however one line is read regardless of length but eoferror is   raised if the end of the file is reached immediately
int pyfilesetopencodehookpyopencodehookfunction handler   overrides the normal behavior of io
opencode to pass its   parameter through the provided handler
   the handler is a function of type pyobject pyobject path   void userdata where path is guaranteed to be   pyunicodeobject
   the userdata pointer is passed into the hook function
 since hook   functions may be called from different runtimes this pointer   should not refer directly to python state
   as this hook is intentionally used during import avoid importing   new modules during its execution unless they are known to be frozen   or available in sys
modules
   once a hook has been set it cannot be removed or replaced and   later calls to pyfilesetopencodehook will fail
 on failure   the function returns 1 and sets an exception if the interpreter   has been initialized
   this function is safe to call before pyinitialize
   raises an auditing event setopencodehook with no arguments
   new in version 3
8
int pyfilewriteobjectpyobject obj pyobject p int flags   write object obj to file object p
  the only supported flag for   flags is pyprintraw if given the str of the object is   written instead of the repr
  return 0 on success or 1 on   failure the appropriate exception will be set
int pyfilewritestringconst char s pyobject p   write string s to file object p
  return 0 on success or 1   on failure the appropriate exception will be set
initialization finalization and threads
see also python initialization configuration
before python initialization
the following functions can be safely called before python isinitialized configuration functions   pyimportappendinittab   pyimportextendinittab   pyinitfrozenextensions   pymemsetallocator   pymemsetupdebughooks   pyobjectsetarenaallocator   pysetpath   pysetprogramname   pysetpythonhome   pysetstandardstreamencoding   pysysaddwarnoption   pysysaddxoption   pysysresetwarnoptions informative functions   pyisinitialized   pymemgetallocator   pyobjectgetarenaallocator   pygetbuildinfo   pygetcompiler   pygetcopyright   pygetplatform   pygetversion utilities   pydecodelocale memory allocators   pymemrawmalloc   pymemrawrealloc   pymemrawcalloc   pymemrawfreenote  the following functions should not be called before  pyinitialize pyencodelocale pygetpath  pygetprefix pygetexecprefix pygetprogramfullpath  pygetpythonhome pygetprogramname and  pyevalinitthreads
global configuration variables
initializing and finalizing the interpreter
   note     on windows changes the console mode from otext to obinary     which will also affect nonpython uses of the console using the c     runtime
   new in version 3
6
processwide parameters
   new in version 3
4
   changed in version 3
8 the program full path is now used for   sys
   note     it is recommended that applications embedding the python     interpreter for purposes other than executing a single script     pass 0 as updatepath and update sys
pop0n   new in version 3
3
   changed in version 3
4 the updatepath value depends on i
thread state and the global interpreter lock
releasing the gil from extension code
note  calling system io functions is the most common use case for  releasing the gil but it can also be useful before calling long  running computations which dont need access to python objects such  as compression or cryptographic functions operating over memory  buffers
nonpython created threads
cautions about fork
 in addition it resets any lock objectsin the child
highlevel api
   changed in version 3
9 the function now does nothing
   changed in version 3
7 this function is now called by   pyinitialize so you dont have to call it yourself anymore
   changed in version 3
2 this function cannot be called before   pyinitialize anymore
   changed in version 3
7 the gil is now initialized by   pyinitialize
   note     calling this function from a thread when the runtime is     finalizing will terminate the thread even if the thread was not     created by python
   note     calling this function from a thread when the runtime is     finalizing will terminate the thread even if the thread was not     created by python
   new in version 3
4
lowlevel api
changed in version 3
7 pyinitialize now initializes the gil
   changed in version 3
9 this function now calls the   pythreadstate
   new in version 3
9
   new in version 3
9
   new in version 3
9
   new in version 3
9
   new in version 3
7
   new in version 3
8
   changed in version 3
9 the function now takes a tstate   parameter
   new in version 3
9
   new in version 3
9
   changed in version 3
7 the type of the id parameter changed from   long to unsigned long
   note     calling this function from a thread when the runtime is     finalizing will terminate the thread even if the thread was not     created by python
   changed in version 3
8 updated to be consistent with   pyevalrestorethread pyendallowthreads and   pygilstateensure and terminate the current thread if called   while the interpreter is finalizing
   deprecated since version 3
2 this function does not update the   current thread state
   note     calling this function from a thread when the runtime is     finalizing will terminate the thread even if the thread was not     created by python
   changed in version 3
8 updated to be consistent with   pyevalrestorethread pyendallowthreads and   pygilstateensure and terminate the current thread if called   while the interpreter is finalizing
   deprecated since version 3
2 this function does not update the   current thread state
subinterpreter support
bugs and caveats
asynchronous notifications
   warning     this is a lowlevel function only useful for very special cases
   changed in version 3
9 if this function is called in a   subinterpreter the function func is now scheduled to be called   from the subinterpreter rather than being called from the main   interpreter
 each subinterpreter now has its own list of scheduled   calls
   new in version 3
1
profiling and tracing
 the first parameter   is the object passed to the registration function as obj frame   is the frame object to which the event pertains what is one of   the constants pytracecall pytraceexception pytraceline   pytracereturn pytraceccall pytracecexception   pytracecreturn or pytraceopcode and arg depends on the   value of what       value of what                 meaning of arg                                pytracecall                  always pynone
                               pytraceexception             exception information as returned by                                         sys
excinfo
                               pytraceline                  always pynone
                               pytracereturn                value being returned to the caller or                                       null if caused by an exception
               pytraceccall                function object being called
                   pytracecexception           function object being called
                   pytracecreturn              function object being called
                   pytraceopcode                always pynone
                           int pytracecall   the value of the what parameter to a pytracefunc function when   a new call to a function or method is being reported or a new   entry into a generator
advanced debugger support
thread local storage support
note  none of these api functions handle memory management on behalf of  the void values
thread specific storage tss api
new in version 3
7
see also  a new capi for threadlocal storage in cpython pep 539pytsst   this data structure represents the state of a thread key the   definition of which may depend on the underlying tls   implementation and it has an internal field representing the keys   initialization state
   note     a freed key becomes a dangling pointer you should reset the key     to null
methodsthe parameter key of these functions must not be null
thread local storage tls api
deprecated since version 3
7 this api is superseded by threadspecific storage tss api
note  this version of the api does not support platforms where the native  tls key is defined in a way that cannot be safely cast to int
due to the compatibility problem noted above this version of the apishould not be used in new code
iterator protocol
there are two functions specifically for working with iterators
int pyitercheckpyobject o   return true if the object o supports the iterator protocol
   return the next value from the iteration o
  the object must be   an iterator it is up to the caller to check this
  if there are   no remaining values returns null with no exception set
  if an   error occurs while retrieving the item returns null and passes   along the exception
to write a loop which iterates over an iterator the c code shouldlook something like this   pyobject iterator  pyobjectgetiterobj   pyobject item   if iterator  null         propagate error       while item  pyiternextiterator         do something with item        
copyright
python and this documentation iscopyright © 20012020 python software foundation
 all rights reserved
copyright © 2000 beopen
 all rights reserved
copyright © 19952000 corporation for national research initiatives
all rights reserved
copyright © 19911995 stichting mathematisch centrum
 all rightsreserved
see history and license for complete license and permissionsinformation
whats new in python
release   3
0date   november 13 2020editor   łukasz langathis article explains the new features in python 3
9 compared to 3
8
python 3
9 was released on october 5th 2020
for full details see the changelog
see also pep 596  python 3
9 release schedule
summary  release highlights
you should check for deprecationwarning in your code
when python 2
7 was still supported a lot of functionality in python3 was kept for backward compatibility with python 2
7
 with the end ofpython 2 support these backward compatibility layers have beenremoved or will be removed soon
 most of them emitted adeprecationwarning warning for several years
 for example usingcollections
mapping instead of collections
mapping emits adeprecationwarning since python 3
3 released in 2012
test your application with the w default commandline option tosee deprecationwarning and pendingdeprecationwarning or even withw error to treat them as errors
 warnings filter can be used toignore warnings from thirdparty code
9 is the last version providing those python 2 backwardcompatibility layers to give more time to python projects maintainersto organize the removal of the python 2 support and add support forpython 3
9
aliases to abstract base classes in the collections module likecollections
mapping alias to collections
abc
mapping are kept forone last release for backward compatibility
 they will be removed frompython 3
10
more generally try to run your tests in the python development modewhich helps to prepare your code to make it compatible with the nextpython version
note a number of preexisting deprecatations were removed in thisversion of python as well
 consult the removed section
new features
dictionary merge  update operators
merge  and update  operators have been added to the builtin dict class
 those complement the existing dict
update andd1 d2 methods of merging dictionaries
example    x  key1 value1 from x key2 value2 from x    y  key2 value2 from y key3 value3 from y    x  y   key1 value1 from x key2 value2 from y key3 value3 from y    y  x   key2 value2 from x key3 value3 from y key1 value1 from xsee pep 584 for a full description
 contributed by brandt bucherin bpo36144

new string methods to remove prefixes and suffixes
str
removeprefixprefix and str
removesuffixsuffix have beenadded to easily remove an unneeded prefix or a suffix from a string
corresponding bytes bytearray and collections
userstringmethods have also been added
 see pep 616 for a full description
contributed by dennis sweeney in bpo39939

type hinting generics in standard collections
new parser
9 uses a new parser based on peg instead of ll1
  the newparsers performance is roughly comparable to that of the old parserbut the peg formalism is more flexible than ll1 when it comes todesigning new language features
  well start using this flexibilityin python 3
10 and later
the ast module uses the new parser and produces the same ast as theold parser
in python 3
10 the old parser will be deleted and so will allfunctionality that depends on it primarily the parser module whichhas long been deprecated
  in python 3
9 only you can switch backto the ll1 parser using a command line switch x oldparser or anenvironment variable pythonoldparser1
see pep 617 for more details
  contributed by guido van rossumpablo galindo and lysandros nikolaou in bpo40334

other language changes
 import now raises importerror instead of valueerror  which used to occur when a relative import went past its toplevel  package
 contributed by ngalim siregar in bpo37444
 python now gets the absolute path of the script filename specified  on the command line ex python3 script
py the file  attribute of the main module became an absolute path rather  than a relative path
 these paths now remain valid after the current  directory is changed by os
chdir
 as a side effect the  traceback also displays the absolute path for main module  frames in this case
 contributed by victor stinner in bpo20443
 in the python development mode and in debug build the encoding  and errors arguments are now checked for string encoding and  decoding operations
 examples open str
encode and  bytes
  by default for best performance the errors argument is only  checked at the first encodingdecoding error and the encoding  argument is sometimes ignored for empty strings
 contributed by  victor stinner in bpo37388
 
replace s n now returns s instead of an empty string  for all nonzero n
  it is now consistent with 
replace  s
 there are similar changes for bytes and bytearray objects
  contributed by serhiy storchaka in bpo28029
 any valid expression can now be used as a decorator
  previously  the grammar was much more restrictive
  see pep 614 for details
  contributed by brandt bucher in bpo39702
 improved help for the typing module
 docstrings are now shown for  all special forms and special generic aliases like union and  list
 using help with generic alias like listint will  show the help for the correspondent concrete type list in this  case
 contributed by serhiy storchaka in bpo40257
 parallel running of aclose  asend  athrow is now  prohibited and agrunning now reflects the actual running status  of the async generator
 contributed by yury selivanov in  bpo30773
 unexpected errors in calling the iter method are no longer  masked by typeerror in the in operator and functions  contains indexof and countof of the operator module
  contributed by serhiy storchaka in bpo40824

new modules
zoneinfo
the zoneinfo module brings support for the iana time zone databaseto the standard library
 it adds zoneinfo
zoneinfo a concretedatetime
tzinfo implementation backed by the systems time zonedata
example    from zoneinfo import zoneinfo    from datetime import datetime timedelta     daylight saving time    dt  datetime2020 10 31 12 tzinfozoneinfoamericalosangeles    printdt   20201031 1200000700    dt
tzname   pstas a fallback source of data for platforms that dont ship the ianadatabase the tzdata module was released as a firstparty package distributed via pypi and maintained by the cpython core team
see also  pep 615  support for the iana time zone database in the  standard library     pep written and implemented by paul ganssle
graphlib
a new module graphlib was added that contains thegraphlib
topologicalsorter class to offer functionality to performtopological sorting of graphs
 contributed by pablo galindo timpeters and larry hastings in bpo17005

improved modules
ast
added the indent option to dump which allows it to produce amultiline indented output
 contributed by serhiy storchaka inbpo37995
added ast
unparse as a function in the ast module that can beused to unparse an ast
ast object and produce a string with codethat would produce an equivalent ast
ast object when parsed
contributed by pablo galindo and batuhan taskaya in bpo38870
added docstrings to ast nodes that contains the asdl signature used toconstruct that node
 contributed by batuhan taskaya in bpo39638

asyncio
compileall
added new possibility to use hardlinks for duplicated 
pyc fileshardlinkdupes parameter and hardlinkdupes command line option
contributed by  lumír frenzy balhar in bpo40495
added new options for path manipulation in resulting 
pyc filesstripdir prependdir limitsldest parameters and s p ecommand line options
 added the possibility to specify the option foran optimization level multiple times
 contributed by lumír frenzybalhar in bpo38112

concurrentfutures
added a new cancelfutures parameter toconcurrent
shutdown that cancels all pendingfutures which have not started running instead of waiting for them tocomplete before shutting down the executor
 contributed by kylestanley in bpo39349
removed daemon threads from threadpoolexecutor andprocesspoolexecutor
 this improves compatibility withsubinterpreters and predictability in their shutdown processes
contributed by kyle stanley in bpo39812
workers in processpoolexecutor are now spawned on demand only whenthere are no available idle workers to reuse
 this optimizes startupoverhead and reduces the amount of lost cpu time to idle workers
contributed by kyle stanley in bpo39207

curses
added curses
gettabsize and curses
settabsize functions
contributed by anthony sottile in bpo38312

datetime
the isocalendar of datetime
date and isocalendar ofdatetime
datetime methods now returns a namedtuple instead of atuple
 contributed by donghee na in bpo24416

distutils
the upload command now creates sha2256 and blake2b256 hashdigests
 it skips md5 on platforms that block md5 digest
 contributedby christian heimes in bpo40698

fcntl
added constants fofdgetlk fofdsetlk and fofdsetlkw
contributed by donghee na in bpo38602

ftplib
ftp and ftptls now raise a valueerror if the given timeout fortheir constructor is zero to prevent the creation of a nonblockingsocket
 contributed by donghee na in bpo39259

gc
when the garbage collector makes a collection in which some objectsresurrect they are reachable from outside the isolated cycles afterthe finalizers have been executed do not block the collection of allobjects that are still unreachable
 contributed by pablo galindo andtim peters in bpo38379
added a new function gc
isfinalized to check if an object hasbeen finalized by the garbage collector
 contributed by pablo galindoin bpo39322

hashlib
http
http status codes 103 earlyhints 418 imateapot and 425tooearly are added to http
 contributed by donghee nain bpo39509 and ross rhodes in bpo39507

idle and idlelib
added option to toggle cursor blink off
  contributed by zackeryspytz in bpo4603
escape key now closes idle completion windows
  contributed by johnnynajera in bpo38944
added keywords to module name completion list
  contributed by terryj
 reedy in bpo37765
the changes above have been backported to 3
8 maintenance releases
imaplib
imap4 and imap4ssl now have an optional timeout parameter fortheir constructors
 also the open method now has an optionaltimeout parameter with this change
 the overridden methods ofimap4ssl and imap4stream were applied to this change
contributed by donghee na in bpo38615
imaplib
unselect is added
unselect freesservers resources associated with the selected mailbox and returnsthe server to the authenticated state
 this command performs the sameactions as imaplib
close except that no messages arepermanently removed from the currently selected mailbox
 contributedby donghee na in bpo40375

importlib
to improve consistency with import statementsimportlib
resolvename now raises importerror instead ofvalueerror for invalid relative import attempts
 contributed byngalim siregar in bpo37444
import loaders which publish immutable module objects can now publishimmutable packages in addition to individual modules
 contributed bydino viehland in bpo39336
added importlib
files function with support forsubdirectories in package data matching backport inimportlibresources version 1
5
 contributed by jason r
 coombs inbpo39791
refreshed importlib
metadata from importlibmetadata version1
6
1
inspect
arguments is changed from ordereddict toregular dict
  contributed by inada naoki in bpo36350 andbpo39775

ipaddress
ipaddress now supports ipv6 scoped addresses ipv6 address withsuffix scopeid
scoped ipv6 addresses can be parsed using ipaddress
ipv6address
 ifpresent scope zone id is available through the scopeid attribute
contributed by oleksandr pavliuk in bpo34788

math
expanded the math
gcd function to handle multiple arguments
formerly it only supported two arguments
 contributed by serhiystorchaka in bpo39648
added math
lcm return the least common multiple of specifiedarguments
 contributed by mark dickinson ananthakrishnan and serhiystorchaka in bpo39479 and bpo39648
added math
nextafter return the next floatingpoint value afterx towards y
 contributed by victor stinner in bpo39288
added math
ulp return the value of the least significant bit of afloat
 contributed by victor stinner in bpo39310

multiprocessing
the multiprocessing
simplequeue class has a new close method toexplicitly close the queue
 contributed by victor stinner inbpo30966

nntplib
nntp and nntpssl now raise a valueerror if the given timeoutfor their constructor is zero to prevent the creation of a nonblocking socket
 contributed by donghee na in bpo39259

os
added cldkilled and cldstopped for sicode
 contributed bydonghee na in bpo38493
exposed the linuxspecific os
pidfdopen bpo38692 andos
ppidfd bpo38713 for process management with file descriptors
the os
unsetenv function is now also available on windows
contributed by victor stinner in bpo39413
the os
putenv and os
unsetenv functions are now alwaysavailable
 contributed by victor stinner in bpo39395
added os
waitstatustoexitcode function convert a wait status toan exit code
 contributed by victor stinner in bpo40094

pathlib
pdb
on windows now pdb supports 
 contributed by tim hopperand dan lidralporter in bpo20523

poplib
pop3 and pop3ssl now raise a valueerror if the given timeoutfor their constructor is zero to prevent the creation of a nonblocking socket
 contributed by donghee na in bpo39259

pprint
pprint can now prettyprint types
 contributed bycarl bordum hansen in bpo37376

pydoc
the documentation string is now shown not only for class functionmethod etc but for any object that has its own doc attribute
contributed by serhiy storchaka in bpo40257

random
added a new random
randbytes method generate random bytes
contributed by victor stinner in bpo40286

signal
exposed the linuxspecific signal
pidfdsendsignal for sending tosignals to a process using a file descriptor instead of a pid
bpo38712
smtplib
smtp and smtpssl now raise a valueerror if the given timeoutfor their constructor is zero to prevent the creation of a nonblocking socket
 contributed by donghee na in bpo39259
lmtp constructor  now has an optional timeout parameter
contributed by donghee na in bpo39329

socket
the socket module now exports the canrawjoinfilters constant onlinux 4
1 and greater
 contributed by stefan tatschner and zackeryspytz in bpo25780
the socket module now supports the canj1939 protocol on platformsthat support it
  contributed by karl ding in bpo40291
the socket module now has the socket
sendfds andsocket
fds methods
 contributed by joannah nanjekye shinyaokano and victor stinner in bpo28724

time
sys
added a new sys
platlibdir attribute name of the platformspecificlibrary directory
 it is used to build the path of standard libraryand the paths of installed extension modules
 it is equal to libon most platforms
  on fedora and suse it is equal to lib64 on64bit platforms
 contributed by jan matějek matěj cepl charalamposstratakis and victor stinner in bpo1294959
previously sys
stderr was blockbuffered when noninteractive
 nowstderr defaults to always being linebuffered
 contributed byjendrik seipp in bpo13601

tracemalloc
added tracemalloc
resetpeak to set the peak size of traced memoryblocks to the current size to measure the peak of specific pieces ofcode
 contributed by huon wilson in bpo40630

typing
pep 593 introduced an typing
annotated type to decorate existingtypes with contextspecific metadata and new includeextrasparameter to typing
gettypehints to access the metadata atruntime
 contributed by till varoquaux and konstantin kashin

unicodedata
the unicode database has been updated to version 13
0
venv
the activation scripts provided by venv now all specify their promptcustomization consistently by always using the value specified byvenvprompt
 previously some scripts unconditionally usedvenvprompt others only if it happened to be set which was thedefault case and one used venvname instead
 contributed bybrett cannon in bpo37663

xml
white space characters within attributes are now preserved whenserializing xml
elementtree to xml file
 eolns are no longernormalized to n
 this is the result of discussion about how tointerpret section 2
11 of xml spec
 contributed by mefistotelis inbpo39011

optimizations
 optimized the idiom for assignment a temporary variable in  comprehensions
 now for y in expr in comprehensions is as fast  as a simple assignment y  expr
  for example     sums  s for s in 0 for x in data for s in s  x  unlike the  operator this idiom does not leak a variable to the  outer scope
  contributed by serhiy storchaka in bpo32856
 optimized signal handling in multithreaded applications
 if a thread  different than the main thread gets a signal the bytecode  evaluation loop is no longer interrupted at each bytecode  instruction to check for pending signals which cannot be handled
  only the main thread of the main interpreter can handle signals
  previously the bytecode evaluation loop was interrupted at each  instruction until the main thread handles signals
 contributed by  victor stinner in bpo40010
 optimized the subprocess module on freebsd using closefrom
  contributed by ed maste conrad meyer kyle evans kubilay kocak  and victor stinner in bpo38061
 pylongfromdouble is now up to 1
87x faster for values that fit  into long
 contributed by sergey fedoseev in bpo37986
 a number of python builtins range tuple set frozenset  list dict are now sped up by using pep 590 vectorcall  protocol
 contributed by donghee na mark shannon jeroen demeyer  and petr viktorin in bpo37207
 optimized differenceupdate for the case when the other set is  much larger than the base set
 suggested by evgeny kapun with code  contributed by michele orrù in bpo8425
 pythons small object allocator obmalloc
c now allows no more  than one empty arena to remain available for immediate reuse  without returning it to the os
  this prevents thrashing in simple  loops where an arena could be created and destroyed anew on each  iteration
 contributed by tim peters in bpo37257
 floor division of float operation now has a better performance
  also the message of zerodivisionerror for this operation is  updated
 contributed by donghee na in bpo39434
 decoding short ascii strings with utf8 and ascii codecs is now  about 15 faster
  contributed by inada naoki in bpo37348
heres a summary of performance improvements from python 3
4 throughpython 3
9   python version                       3
3these results were generated from the variable access benchmark scriptat toolsscriptsvaraccessbenchmark
 the benchmark scriptdisplays timings in nanoseconds
  the benchmarks were measured on anintel® core™ i74960hq processor running the macos 64bit builds foundat python
org
deprecated
removed
porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
changes in the python api
changes in the c api
 instances of heapallocated types such as those created with  pytypefromspec and similar apis hold a reference to their type  object since python 3
8
 as indicated in the changes in the c api  of python 3
8 for the vast majority of cases there should be no  side effect but for types that have a custom tptraverse function  ensure that all custom tptraverse functions of heapallocated  types visit the objects type
     example        int        footraversefoostruct self visitproc visit void arg          rest of the traverse function        if pyversionhex  0x03090000             this was not needed before python 3
9 python issue 35810 and 40217            pyvisitpytypeself        endif          if your traverse function delegates to tptraverse of its base  class or another type ensure that pytypeself is visited only  once
 note that only heap types are expected to visit the type in  tptraverse
     for example if your tptraverse function includes        basetptraverseself visit arg     then add        if pyversionhex  0x03090000             this was not needed before python 3
9 python issue 35810 and 40217            if basetpflags  pytpflagsheaptype                  a heap types tptraverse already visited pytypeself             else                 pyvisitpytypeself                    else  see bpo35810 and bpo40217 for more information
 the functions pyevalcallobject pyevalcallfunction  pyevalcallmethod and pyevalcallobjectwithkeywords are  deprecated
 use pyobjectcall and its variants instead
 see  more details in bpo29548

cpython bytecode changes
 the loadassertionerror opcode was added for handling the  assert statement
 previously the assert statement would not work  correctly if the assertionerror exception was being shadowed
  contributed by zackery spytz in bpo34880
 the compareop opcode was split into four distinct instructions   compareop for rich comparisons   isop for is and is not tests   containsop for in and not in tests   jumpifnotexcmatch for checking exceptions in tryexcept    statements
  contributed by mark shannon in bpo39156

build changes
 added withplatlibdir option to the configure script name of  the platformspecific library directory stored in the new  sys
platlibdir attribute
 see sys
platlibdir attribute for more  information
 contributed by jan matějek matěj cepl charalampos  stratakis and victor stinner in bpo1294959
 the countallocs special build macro has been removed
  contributed by victor stinner in bpo39489
 on nonwindows platforms the setenv and unsetenv functions  are now required to build python
 contributed by victor stinner in  bpo39395
 on nonwindows platforms creating bdistwininst installers is now  officially unsupported
  see bpo10945 for more details
 when building python on macos from source tkinter now links with  nonsystem tcl and tk frameworks if they are installed in  libraryframeworks as had been the case on older releases of  macos
 if a macos sdk is explicitly configured by using enable  universalsdk or isysroot only the sdk itself is searched
 the  default behavior can still be overridden with withtcltk  includes and withtcltklibs
 contributed by ned deily in  bpo34956
 python can now be built for windows 10 arm64
 contributed by steve  dower in bpo33125
 some individual tests are now skipped when pgo is used
  the  tests in question increased the pgo task time significantly and  likely didnt help improve optimization of the final executable
  this speeds up the task by a factor of about 15x
  running the full  unit test suite is slow
  this change may result in a slightly less  optimized build since not as many code branches will be executed
  if you are willing to wait for the much slower build the old  behavior can be restored using 
 profiletaskm  test pgoextended
  we make no guarantees as to which pgo task  set produces a faster build
  users who care should run their own  relevant benchmarks as results can depend on the environment  workload and compiler tool chain
 see bpo36044 and bpo37707 for  more details

c api changes
new features
 pep 573 added pytypefrommoduleandspec to associate a  module with a class pytypegetmodule and  pytypegetmodulestate to retrieve the module and its state and  pycmethod and methmethod to allow a method to access the class  it was defined in
 contributed by marcel plch and petr viktorin in  bpo38787
 added pyframegetcode function get a frame code
 added  pyframegetback function get the frame next outer frame
  contributed by victor stinner in bpo40421
 added pyframegetlinenumber to the limited c api
 contributed  by victor stinner in bpo40421
 added pythreadstategetinterpreter and  pyinterpreterstateget functions to get the interpreter
 added  pythreadstategetframe function to get the current frame of a  python thread state
 added pythreadstategetid function get the  unique identifier of a python thread state
 contributed by victor  stinner in bpo39947
 added a new public pyobjectcallnoargs function to the c api  which calls a callable python object without any arguments
 it is  the most efficient way to call a callable python object without any  argument
 contributed by victor stinner in bpo37194
 changes in the limited c api if pylimitedapi macro is defined   provide pyenterrecursivecall and pyleaverecursivecall as    regular functions for the limited api
 previously there were    defined as macros but these macros didnt compile with the    limited c api which cannot access pythreadstate
recursiondepth    field the structure is opaque in the limited c api
   pyobjectinit and pyobjectinitvar become regular    opaque function to hide implementation details
  contributed by victor stinner in bpo38644 and bpo39542
 the pymoduleaddtype function is added to help adding a type to  a module
 contributed by donghee na in bpo40024
 added the functions pyobjectgcistracked and  pyobjectgcisfinalized to the public api to allow to query if  python objects are being currently tracked or have been already  finalized by the garbage collector respectively
 contributed by  pablo galindo salgado in bpo40241
 added pyobjectfunctionstr to get a userfriendly string  representation of a functionlike object
 patch by jeroen demeyer  in bpo37645
 added pyobjectcallonearg for calling an object with one  positional argument patch by jeroen demeyer in bpo37483

porting to python
evalframe pep 523 now requires a new  mandatory tstate parameter pythreadstate
 contributed by  victor stinner in bpo38500
 extension modules mtraverse mclear and mfree functions of  pymoduledef are no longer called if the module state was requested  but is not allocated yet
 this is the case immediately after the  module is created and before the module is executed pymodexec  function
 more precisely these functions are not called if  msize is greater than 0 and the module state as returned by  pymodulegetstate is null
  extension modules without module state msize  0 are not  affected
 if pyaddpendingcall is called in a subinterpreter the function  is now scheduled to be called from the subinterpreter rather than  being called from the main interpreter
 each subinterpreter now has  its own list of scheduled calls
 contributed by victor stinner in  bpo39984
 the windows registry is no longer used to initialize sys
path when  the e option is used if pyconfig
useenvironment is set to  0
 this is significant when embedding python on windows
  contributed by zackery spytz in bpo8901
 the global variable pystructsequenceunnamedfield is now a  constant and refers to a constant string
 contributed by serhiy  storchaka in bpo38650
 the pygchead structure is now opaque
 it is only defined in the  internal c api pycoregc
h
 contributed by victor stinner in  bpo40241
 the pyunicodecopy pyunicodefill pyunicodewstrlength  pyunicodefromunicode pyunicodeasunicode  pyunicodeasunicode and pyunicodeasunicodeandsize are  marked as deprecated in c
  they have been deprecated by pep 393  since python 3
3
 contributed by inada naoki in bpo36346
 the pyfatalerror function is replaced with a macro which logs  automatically the name of the current function unless the  pylimitedapi macro is defined
 contributed by victor stinner in  bpo39882
 the vectorcall protocol now requires that the caller passes only  strings as keyword names
 see bpo37540 for more information
 implementation details of a number of macros and functions are now  hidden   pyobjectisgc macro was converted to a function
   the pyobjectnew macro becomes an alias to the    pyobjectnew macro and the pyobjectnewvar macro becomes    an alias to the pyobjectnewvar macro
 they no longer access    directly the pytypeobject
tpbasicsize member
   pytypehasfeature now always calls pytypegetflags
    previously it accessed directly the pytypeobject
tpflags    member when the limited c api was not used
   pyobjectgetweakrefslistptr macro was converted to a    function the macro accessed directly the    pytypeobject
tpweaklistoffset member
   pyobjectcheckbuffer macro was converted to a function the    macro accessed directly the pytypeobject
tpasbuffer member
   pyindexcheck is now always declared as an opaque function to    hide implementation details removed the pyindexcheck macro
    the macro accessed directly the pytypeobject
tpasnumber    member
  see bpo40170 for more details

removed
 excluded pyfpestartprotect and pyfpeendprotect macros of  pyfpe
h from the limited c api
 contributed by victor stinner in  bpo38835
 the tpprint slot of pytypeobject has been removed
 it was used  for printing objects to files in python 2
7 and before
 since python  3
0 it has been ignored and unused
 contributed by jeroen demeyer  in bpo36974
 changes in the limited c api if pylimitedapi macro is defined   excluded the following functions from the limited c api     pythreadstatedeletecurrent contributed by joannah nanjekye      in bpo37878
     pycheckrecursionlimit     pynewreference     pyforgetreference     pytracemallocnewreference     pygetreftotal     the trashcan mechanism which never worked in the limited c api
     pytrashunwindlevel     pytrashcanbegincondition     pytrashcanbegin     pytrashcanend     pytrashcansafebegin     pytrashcansafeend   moved following functions and definitions to the internal c api     pydebugprinttotalrefs     pyprintreferences     pyprintreferenceaddresses     pytracemallocconfig     pyaddtoallobjects specific to pytracerefs build  contributed by victor stinner in bpo38644 and bpo39542
 removed pyruntime
getframe hook and removed  pythreadstategetframe macro which was an alias to  pyruntime
getframe
 they were only exposed by the internal c api
  removed also pythreadframegetter type
 contributed by victor  stinner in bpo39946
 removed the following functions from the c api
 call  pygccollect explicitly to clear all free lists
 contributed by  inada naoki and victor stinner in bpo37340 bpo38896 and  bpo40428
   pyasyncgenclearfreelists   pycontextclearfreelist   pydictclearfreelist   pyfloatclearfreelist   pyframeclearfreelist   pylistclearfreelist   pymethodclearfreelist and pycfunctionclearfreelist the    free lists of bound method objects have been removed
   pysetclearfreelist the set free list has been removed in    python 3
4
   pytupleclearfreelist   pyunicodeclearfreelist the unicode free list has been    removed in python 3
3
 removed pyunicodeclearstaticstrings function
 contributed by  victor stinner in bpo39465
 removed pyunicodematch
 it has been deprecated by pep 393  and broken since python 3
3
 the pyunicodetailmatch function  can be used instead
 contributed by inada naoki in bpo36346
 cleaned header files of interfaces defined but with no  implementation
 the public api symbols being removed are  pybytesinsertthousandsgroupinglocale  pybytesinsertthousandsgrouping pyinitializefromargs  pyinitializefromwideargs pyfloatrepr pyfloatdigits  pyfloatdigitsinit pyframeextendstack  pyaiterwrappertype pynullimportertype pycmpwrappertype  pysortwrappertype pynoargsfunction
 contributed by pablo  galindo salgado in bpo39372

whats new in python
author   a
 kuchling and moshe zadka
introduction
what about python 16
new development process
unicode
list comprehensions
augmented assignment
string methods
garbage collection of cycles
other core changes
minor language changes
changes to builtin functions
porting to
extendingembedding changes
distutils making modules easy to install
xml modules
sax2 support
dom support
relationship to pyxml
module changes
new modules
idle improvements
deleted and deprecated modules
acknowledgements
the authors would like to thank the following people for offeringsuggestions on various drafts of this article david bolen markhammond gregg hauser jeremy hylton fredrik lundh detlef lannertaahz maruch skip montanaro vladimir marangozov tobias polzin guidovan rossum neil schemenauer and russ schmidt
whats new in python
author   a
pep 218 a standard set datatype
pep 255 simple generators
see also  pep 255  simple generators     written by neil schemenauer tim peters magnus lie hetland
pep 263 source code encodings
see also  pep 263  defining python source code encodings     written by marcandré lemburg and martin von löwis implemented     by suzuki hisao and martin von löwis
pep 273 importing modules from zip archives
see also  pep 273  import modules from zip archives     written by james c
pep 277 unicode file name support for windows nt
see also  pep 277  unicode file name support for windows nt     written by neil hodgson implemented by neil hodgson martin von     löwis and mark hammond
pep 278 universal newline support
see also  pep 278  universal newline support     written and implemented by jack jansen
pep 279 enumerate
       li  resultthis can be rewritten using enumerate as   for i item in enumeratel        
       li  resultsee also  pep 279  the enumerate builtin function     written and implemented by raymond d
 hettinger
pep 282 the logging package
see also  pep 282  a logging system     written by vinay sajip and trent mick implemented by vinay     sajip
pep 285 a boolean type
see also  pep 285  adding a bool type     written and implemented by gvr
pep 293 codec error handling callbacks
see also  pep 293  codec error handling callbacks     written and implemented by walter dörwald
pep 301 package index and metadata for distutils
see also  pep 301  package index and metadata for distutils     written and implemented by richard jones
pep 302 new import hooks
pep 305 commaseparated files
see also  pep 305  csv file api     written and implemented  by kevin altis dave cole andrew     mcnamara skip montanaro cliff wells
pep 307 pickle enhancements
see also  pep 307  extensions to the pickle protocol     written and implemented  by guido van rossum and tim peters
extended slices
other language changes
 two new constants true and false were added along with the  builtin bool type as described in section pep 285 a boolean  type of this document
 builtin types now support the extended slicing syntax as described  in section extended slices of this document
  also the dict constructor now accepts keyword arguments to  simplify creating small dictionaries      dictred1 blue2 green3 black4     blue 2 black 4 green 3 red 1  contributed by just van rossum
 the assert statement no longer checks the debug flag so you  can no longer disable assertions by assigning to debug
string changes
zfill6     0goofy  contributed by walter dörwald
 a new type object basestring has been added
optimizations
new improved and deprecated modules
gnugetoptf filename output v fv     f filename v  output  contributed by peter åstrand
 the grp pwd and resource modules now return enhanced tuples      import grp      g  grp
heappopheap     3      heap     5 7 11  contributed by kevin oconnor
 the idle integrated development environment has been updated using  the code from the idlefork project  httpidlefork
      s  seqdict      dirs       see that other dictionary methods are implemented     cmp contains delitem doc getitem      init iter len module repr      setitem clear get haskey items iteritems      iterkeys itervalues keylist keys pop popitem      setdefault update valuelist values  contributed by raymond hettinger
 the dom implementation in xml
datetime type
the optparse module
py options   options     h help            show this help message and exit     iinput inputinput                           set input filename     llength lengthlength                           set maximum length of output   see the modules documentation for more details
pymalloc a specialized object allocator
see also  httpshg
build and c api changes
portspecific changes
other changes and fixes
porting to python
acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle jeff bauer simon brunning brett cannon michael chermsideandrew dalke scott david daniels fred l
 david fraserkelly gerber raymond hettinger michael hudson chris lambert detleflannert martin von löwis andrew macintyre lalo martins chadnetzer gustavo niemeyer neal norwitz hans nowak chris reedyfrancesco ricciardi vinay sajip neil schemenauer roman suzi jasontishler just van rossum
whats new in python
editors   elvis pranskevichus elvismagic
see also pep 478  python 3
5 release schedule
summary  release highlights
new syntax features pep 492 coroutines with async and await syntax
 pep 465 a new matrix multiplication operator a  b
new library modules typing pep 484  type hints
 zipapp pep 441 improving python zip application support
new builtin features bytes  args bytearray  args pep 461  adding  formatting  to bytes and bytearray
cpython implementation improvements when the lctype locale is the posix locale c locale  sys
significant improvements in the standard library collections
security improvements sslv3 is now disabled throughout the standard library
windows improvements a new installer for windows has replaced the old msi
 see using  python on windows for more information
new features
pep 492  coroutines with async and await syntax
closewill output   coro 2 waiting for lock   coro 2 holding the lock   coro 1 waiting for lock   coro 2 releasing the lock   coro 1 holding the lock   coro 1 releasing the locknote that both async for and async with can only be used inside acoroutine function declared with async def
note  changed in version 3
2 starting with cpython 3
2 aiter  can directly return asynchronous iterators
  returning an  awaitable object will result in a pendingdeprecationwarning
see  more details in the asynchronous iterators documentation section
see also  pep 492  coroutines with async and await syntax     pep written and implemented by yury selivanov
pep 465  a dedicated infix operator for matrix multiplication
matrix multiplication is a notably common operation in many fields ofmathematics science engineering and the addition of  allowswriting cleaner code   s  h  beta  r
t  h  beta  rinstead of   s  dotdoth beta  r
10 has support for the new operator    import numpy    x  numpy
see also  pep 465  a dedicated infix operator for matrix multiplication     pep written by nathaniel j
 smith implemented by benjamin     peterson
pep 448  additional unpacking generalizations
    fna 1 c 3 b 2 d 4   1 2 3 4similarly tuple list set and dictionary displays allow multipleunpackings see expression lists and dictionary displays    range4 4   0 1 2 3 4    range4 4   0 1 2 3 4    range4 4 5 6 7   0 1 2 3 4 5 6 7    x 1 y 2   x 1 y 2see also  pep 448  additional unpacking generalizations     pep written by joshua landau implemented by neil girdhar thomas     wouters and joshua landau
pep 461  percent formatting support for bytes and bytearray
examples    bhello b  bworld   bhello world    bxi yf  1 2
see also  pep 461  adding  formatting to bytes and bytearray     pep written by ethan furman implemented by neil schemenauer and     ethan furman
pep 484  type hints
see also   typing module documentation   pep 484  type hints       pep written by guido van rossum jukka lehtosalo and łukasz       langa implemented by guido van rossum
   pep 483  the theory of type hints       pep written by guido van rossum
pep 471  osscandir function  a better and faster directory iterator
namesee also  pep 471  os
scandir function  a better and faster  directory iterator     pep written and implemented by ben hoyt with the help of victor     stinner
pep 475 retry system calls failing with eintr
  compare   printhello worldand   while true       try           printhello world           break       except interruptederror           continuepep 475 implements automatic retry of system calls on eintr
below is a list of functions which are now retried when interrupted bya signal open and io
open functions of the faulthandler module os functions fchdir fchmod fchown fdatasync  fstat fstatvfs fsync ftruncate mkfifo  mknod open posixfadvise posixfallocate  pread pwrite read readv sendfile wait3  wait4 wait waitid waitpid write writev special cases os
close and os
dup2 now ignore eintr  errors the syscall is not retried see the pep for the rationale select functions devpoll
poll  kqueue
control poll
poll select methods of the socket class accept connect except for  nonblocking sockets recv recvfrom recvmsg  send sendall sendmsg sendto signal
sigtimedwait and signal
see also  pep 475  retry system calls failing with eintr     pep and implementation written by charlesfrançois natali and     victor stinner with the help of antoine pitrou the french     connection
pep 479 change stopiteration handling inside generators
pep 485 a function for testing approximate equality
00001   falsesee also  pep 485  a function for testing approximate equality     pep written by christopher barker implemented by chris barker     and tal einat
pep 486 make the python launcher aware of virtual environments
see also  pep 486  make the python launcher aware of virtual  environments     pep written and implemented by paul moore
pep 488 elimination of pyo files
see also  pep 488  elimination of pyo files     pep written and implemented by brett cannon
pep 489 multiphase extension module initialization
see also  pep 489  multiphase extension module initialization     pep written by petr viktorin stefan behnel and nick coghlan     implemented by petr viktorin
other language changes
some smaller changes made to the core python language are added the namereplace error handlers
new modules
typing
zipapp
see also pep 441  improving python zip application support
improved modules
argparse
asyncio
updates in 3
1 the ensurefuture function and all functions that use it such  as loop
updates in 3
2 new loop
bz
cgi
cmath
code
collections
doc  ordinatecontributed by berker peksag in bpo24064
the userstring class now implements the getnewargsrmod casefold formatmap isprintable andmaketrans methods to match the corresponding methods of str
collectionsabc
compileall
concurrentfutures
configparser
example    import configparser    conv      convlist  lambda v e
getlistlist   a b c d e f gcontributed by łukasz langa in bpo18159

contextlib
getvalue   warningrootwarningncontributed by berker peksag in bpo22389

csv
curses
dbm
difflib
distutils
doctest
email
enum
dog 11contributed by ethan furman in bpo21706

faulthandler
functools
glob
gzip
heapq
mergereverseda reversedb keylen reversetrue   55555 6666 777 88 9contributed by raymond hettinger in bpo13742

http
httpclient
remotedisconnected           passcontributed by martin panter in bpo3566

idlelib and idle
imaplib
imghdr
importlib
inspect
arguments   ordereddicta spam b ham args contributed by yury selivanov in bpo24190
a new class method signature
io
ipaddress
08contributed by peter moody and antoine pitrou in bpo16531
a new reversepointer attribute for the ipv4network andipv6network classes returns the name of the reverse dns ptr record    import ipaddress    addr  ipaddress
arpacontributed by leon weber in bpo20480

json
linecache
locale
56contributed by cédric krier in bpo13918

logging
errorexception excinfoex   errorrootexceptioncontributed by yury selivanov in bpo20537
the handlers
lzma
math
multiprocessing
operator
os
commonpathusrlib usrlocallib   usrcontributed by rafik draoui and serhiy storchaka in bpo10395

pathlib
samefilep2   truecontributed by vajrasky kok and antoine pitrou in bpo19775
the path
writetextham   3contributed by christopher welborn in bpo20218

pickle
poplib
re
srematch object span0 3 matchbbccontributed by serhiy storchaka in bpo9179
the number of capturing groups in regular expressions is no longerlimited to 100
error multiple repeat at position 16 line 3 column 7contributed by serhiy storchaka in bpo22578

readline
selectors
shutil
signal
smtpd
smtplib
sndhdr
socket
ssl
memory bio supportcontributed by geert jansen in bpo21965
the new sslobject class has been added to provide ssl protocolsupport for cases when the network io capabilities of sslsocket arenot necessary or are suboptimal
applicationlayer protocol negotiation supportcontributed by benjamin peterson in bpo20188
where openssl support is present the ssl module now implements theapplicationlayer protocol negotiation tls extension as described inrfc 7301
sqlite
subprocess
examples    subprocess
sys
sysconfig
tarfile
threading
time
timeit
tkinter
traceback
types
unicodedata
unittest
unittestmock
urllib
wsgiref
xmlrpc
xmlsax
zipfile
other modulelevel changes
optimizations
build and c api changes
new calloc functions were added pymemrawcalloc pymemcalloc pyobjectcalloc
contributed by victor stinner in bpo21233
new encodingdecoding helper functions pydecodelocale replaced pychar2wchar pyencodelocale replaced pywchar2char
contributed by victor stinner in bpo18395
a new pycodecnamereplaceerrors function to replace the unicodeencode error with n
deprecated
new keywords
deprecated python behavior
unsupported operating systems
deprecated python modules functions and methods
removed
api and feature removals
porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
changes in python behavior
 due to an oversight earlier python versions erroneously accepted  the following syntax     f1 for x in 1 args     f1 for x in 1 kwargs  python 3
changes in the python api
changes in the c api
  refer to  coroutine objects for new types structures and functions
notable changes in python
new make regenall build target
contributed by victor stinner in bpo23404
new in version 3
4
removal of make touch build target
contributed by victor stinner in bpo23404
changed in version 3
4
whats new in python
editor   elvis pranskevichus elvismagic
iothis article explains the new features in python 3
7 compared to 3
6
7 was released on june 27 2018
 for full details see thechangelog
summary  release highlights
new syntax features pep 563 postponed evaluation of type annotations
backwards incompatible syntax changes async and await are now reserved keywords
new library modules contextvars pep 567  context variables dataclasses pep 557  data classes importlib
resourcesnew builtin features pep 553 the new breakpoint function
python data model improvements pep 562 customization of access to module attributes
 pep 560 core support for typing module and generic types
 the insertionorder preservation nature of dict objects has been  declared to be an official part of the python language spec
significant improvements in the standard library the asyncio module has received new features significant  usability and performance improvements
 the time module gained support for functions with nanosecond  resolution
cpython implementation improvements avoiding the use of ascii as a default text encoding   pep 538 legacy c locale coercion   pep 540 forced utf8 runtime mode pep 552 deterministic 
pycs new python development mode pep 565 improved deprecationwarning handlingc api improvements pep 539 new c api for threadlocal storagedocumentation improvements pep 545 python documentation translations new documentation translations japanese french and korean
this release features notable performance improvements in many areas
the optimizations section lists them in detail
for a list of changes that may affect compatibility with previouspython releases please refer to the porting to python 3
7 section
new features
pep 563 postponed evaluation of annotations
the advent of type hints in python uncovered two glaring usabilityissues with the functionality of annotations added in pep 3107 andrefined further in pep 526 annotations could only use names which were already available in the  current scope in other words they didnt support forward references  of any kind and annotating source code had adverse effects on startup time of python  programs
both of these issues are fixed by postponing the evaluation ofannotations
  instead of compiling code which executes expressions inannotations at their definition time the compiler stores theannotation in a string form equivalent to the ast of the expression inquestion
 if needed annotations can be resolved at runtime usingtyping
gettypehints
  in the common case where this is notrequired the annotations are cheaper to store since short stringsare interned by the interpreter and make startup time faster
usabilitywise annotations now support forward references making thefollowing syntax valid   class c       classmethod       def fromstringcls source str  c           
since this change breaks compatibility the new behavior needs to beenabled on a permodule basis in python 3
7 using a futureimport   from future import annotationsit will become the default in python 3
10
see also  pep 563  postponed evaluation of annotations     pep written and implemented by łukasz langa
pep 538 legacy c locale coercion
an ongoing challenge within the python 3 series has been determining asensible default strategy for handling the 7bit ascii text encodingassumption currently implied by the use of the default c or posixlocale on nonwindows platforms
pep 538 updates the default interpreter command line interface toautomatically coerce that locale to an available utf8 based locale asdescribed in the documentation of the new pythoncoerceclocaleenvironment variable
 automatically setting lcctype this way meansthat both the core interpreter and localeaware c extensions such asreadline will assume the use of utf8 as the default text encodingrather than ascii
the platform support definition in pep 11 has also been updated tolimit full text handling support to suitably configured nonasciibased locales
as part of this change the default error handler for stdin andstdout is now surrogateescape rather than strict when usingany of the defined coercion target locales currently c
utf8c
utf8 and utf8
  the default error handler for stderrcontinues to be backslashreplace regardless of locale
locale coercion is silent by default but to assist in debuggingpotentially locale related integration problems explicit warningsemitted directly on stderr can be requested by settingpythoncoerceclocalewarn
 this setting will also cause the pythonruntime to emit a warning if the legacy c locale remains active whenthe core interpreter is initialized
while pep 538s locale coercion has the benefit of also affectingextension modules such as gnu readline as well as child processesincluding those running nonpython applications and older versions ofpython it has the downside of requiring that a suitable targetlocale be present on the running system
 to better handle the casewhere no suitable target locale is available as occurs on rhelcentos7 for example python 3
7 also implements pep 540 forced utf8runtime mode
see also  pep 538  coercing the legacy c locale to a utf8 based locale     pep written and implemented by nick coghlan
pep 540 forced utf8 runtime mode
the new x utf8 command line option and pythonutf8 environmentvariable can be used to enable the cpython utf8 mode
when in utf8 mode cpython ignores the locale settings and uses theutf8 encoding by default
  the error handlers for sys
stdin andsys
stdout streams are set to surrogateescape
the forced utf8 mode can be used to change the text handling behaviorin an embedded python interpreter without changing the locale settingsof an embedding application
while pep 540s utf8 mode has the benefit of working regardlessof which locales are available on the running system it has thedownside of having no effect on extension modules such as gnureadline child processes running nonpython applications andchild processes running older versions of python
 to reduce the riskof corrupting text data when communicating with such componentspython 3
7 also implements pep 540 forced utf8 runtime mode
the utf8 mode is enabled by default when the locale is c orposix and the pep 538 locale coercion feature fails to changeit to a utf8 based alternative whether that failure is due topythoncoerceclocale0 being set lcall being set or the lack ofa suitable target locale
see also  pep 540  add a new utf8 mode     pep written and implemented by victor stinner
pep 553 builtin breakpoint
7 includes the new builtin breakpoint function as aneasy and consistent way to enter the python debugger
builtin breakpoint calls sys
  by default thelatter imports pdb and then calls pdb
settrace but by bindingsys
breakpointhook to the function of your choosingbreakpoint can enter any debugger
 additionally the environmentvariable pythonbreakpoint can be set to the callable of yourdebugger of choice
  set pythonbreakpoint0 to completely disablebuiltin breakpoint
see also  pep 553  builtin breakpoint     pep written and implemented by barry warsaw
pep 539 new c api for threadlocal storage
while python provides a c api for threadlocal storage support theexisting thread local storage tls api has used int to representtls keys across all platforms
  this has not generally been a problemfor officiallysupport platforms but that is neither posixcompliantnor portable in any practical sense
pep 539 changes this by providing a new thread specific storagetss api to cpython which supersedes use of the existing tls apiwithin the cpython interpreter while deprecating the existing api
the tss api uses a new type pytsst instead of int to representtss keysan opaque type the definition of which may depend on theunderlying tls implementation
  therefore this will allow to buildcpython on platforms where the native tls key is defined in a way thatcannot be safely cast to int
note that on platforms where the native tls key is defined in a waythat cannot be safely cast to int all functions of the existing tlsapi will be noop and immediately return failure
 this indicatesclearly that the old api is not supported on platforms where it cannotbe used reliably and that no effort will be made to add such support
see also  pep 539  a new capi for threadlocal storage in cpython     pep written by erik m
 bray implementation by masayuki yamamoto
pep 562 customization of access to module attributes
7 allows defining getattr on modules and will call itwhenever a module attribute is otherwise not found
  definingdir on modules is now also allowed
a typical example of where this may be useful is module attributedeprecation and lazy loading
see also  pep 562  module getattr and dir     pep written and implemented by ivan levkivskyi
pep 564 new time functions with nanosecond resolution
the resolution of clocks in modern systems can exceed the limitedprecision of a floating point number returned by the time
timefunction and its variants
  to avoid loss of precision pep 564adds six new nanosecond variants of the existing timer functions tothe time module time
timensthe new functions return the number of nanoseconds as an integervalue
measurements show that on linux and windows the resolution oftime
timens is approximately 3 times better than that oftime
time
see also  pep 564  add new time functions with nanosecond resolution     pep written and implemented by victor stinner
pep 565 show deprecationwarning in main
pep 560 core support for typing module and generic types
initially pep 484 was designed in such way that it would notintroduce any changes to the core cpython interpreter
 now typehints and the typing module are extensively used by the communityso this restriction is removed
 the pep introduces two special methodsclassgetitem and mroentries these methods are nowused by most classes and special constructs in typing
 as a resultthe speed of various operations with types increased up to 7 timesthe generic types can be used without metaclass conflicts and severallong standing bugs in typing module are fixed
see also  pep 560  core support for typing module and generic types     pep written and implemented by ivan levkivskyi
pep 552 hashbased pyc files
pep 545 python documentation translations
pep 545 describes the process of creating and maintaining pythondocumentation translations
three new translations have been added japanese httpsdocs
orgja french httpsdocs
orgfr korean httpsdocs
orgkosee also  pep 545  python documentation translations     pep written and implemented by julien palard inada naoki and     victor stinner
python development mode x dev
the new x dev command line option or the new pythondevmodeenvironment variable can be used to enable python development mode
when in development mode python performs additional runtime checksthat are too expensive to be enabled by default
 see pythondevelopment mode documentation for the full description
other language changes
 an await expression and comprehensions containing an async for  clause were illegal in the expressions in formatted string literals  due to a problem with the implementation
  in python 3
7 this  restriction was lifted
 more than 255 arguments can now be passed to a function and a  function can now have more than 255 parameters
 contributed by  serhiy storchaka in bpo12844 and bpo18896
 bytes
fromhex and bytearray
fromhex now ignore all ascii  whitespace not only spaces
 contributed by robert xiao in  bpo28927
 str bytes and bytearray gained support for the new  isascii method which can be used to test if a string or bytes  contain only the ascii characters
 contributed by inada naoki in  bpo32677
 importerror now displays module name and module file path  when from 
 fails
 contributed by matthias  bussonnier in bpo29546
 circular imports involving absolute imports with binding a submodule  to a name are now supported
 contributed by serhiy storchaka in  bpo30024
 object
formatx  is now equivalent to strx rather than  formatstrself 
 contributed by serhiy storchaka in  bpo28974
 in order to better support dynamic creation of stack traces  types
tracebacktype can now be instantiated from python code and  the tbnext attribute on tracebacks is now writable
 contributed  by nathaniel j
 smith in bpo30579
 when using the m switch sys
path0 is now eagerly expanded to  the full starting directory path rather than being left as the  empty directory which allows imports from the current working  directory at the time when an import occurs contributed by nick  coghlan in bpo33053
 the new x importtime option or the pythonprofileimporttime  environment variable can be used to show the timing of each module  import
 contributed by victor stinner in bpo31415

new modules
contextvars
the new contextvars module and a set of new c apis introduce supportfor context variables
  context variables are conceptually similarto threadlocal variables
  unlike tls context variables supportasynchronous code correctly
the asyncio and decimal modules have been updated to use andsupport context variables out of the box
  particularly the activedecimal context is now stored in a context variable which allowsdecimal operations to work with the correct context in asynchronouscode
see also  pep 567  context variables     pep written and implemented by yury selivanov
dataclasses
the new dataclass decorator provides a way to declare dataclasses
  a data class describes its attributes using class variableannotations
  its constructor and other magic methods such asrepr eq and hash are generatedautomatically
example   dataclass   class point       x float       y float       z float  0
0see also  pep 557  data classes     pep written and implemented by eric v
 smith
importlibresources
the new importlib
resources module provides several new apis and onenew abc for access to opening and reading resources insidepackages
 resources are roughly similar to files inside packages butthey neednt be actual files on the physical file system
  moduleloaders can provide a getresourcereader function which returns aimportlib
resourcereader instance to support this new api
builtin file path loaders and zip file loaders both support this
contributed by barry warsaw and brett cannon in bpo32248
see also  importlibresources  a pypi backport for earlier python versions
improved modules
argparse
the new argumentparser
parseintermixedargs method allowsintermixing options and positional arguments
 contributed by paul
j3in bpo14191

asyncio
the asyncio module has received many new features usability andperformance improvements
  notable changes include the new provisional asyncio
run function can be used to run a  coroutine from synchronous code by automatically creating and  destroying the event loop
 contributed by yury selivanov in  bpo32314
 asyncio gained support for contextvars
calllater  loop
callat and future
adddonecallback have a new  optional keywordonly context parameter
 tasks now track their  context automatically
 see pep 567 for more details
  contributed by yury selivanov in bpo32436
 the new asyncio
createtask function has been added as a  shortcut to asyncio
createtask
 contributed  by andrew svetlov in bpo32311
 the new loop
starttls method can be used to upgrade an existing  connection to tls
 contributed by yury selivanov in bpo23749
 the new loop
sockrecvinto method allows reading data from a  socket directly into a provided buffer making it possible to reduce  data copies
 contributed by antoine pitrou in bpo31819
 the new asyncio
currenttask function returns the currently  running task instance and the new asyncio
alltasks function  returns a set of all existing task instances in a given loop
 the  task
currenttask and task
alltasks methods have been  deprecated
 contributed by andrew svetlov in bpo32250
 the new provisional bufferedprotocol class allows implementing  streaming protocols with manual control over the receive buffer
  contributed by yury selivanov in bpo32251
 the new asyncio
getrunningloop function returns the currently  running loop and raises a runtimeerror if no loop is running
  this is in contrast with asyncio
geteventloop which will  create a new event loop if none is running
 contributed by yury  selivanov in bpo32269
 the new streamwriter
waitclosed coroutine method allows waiting  until the stream writer is closed
  the new  streamwriter
isclosing method can be used to determine if the  writer is closing
 contributed by andrew svetlov in bpo32391
 the new loop
socksendfile coroutine method allows sending files  using os
sendfile when possible
 contributed by andrew svetlov in  bpo32410
 the new future
getloop and task
getloop methods return the  instance of the loop on which a task or a future were created
  server
getloop allows doing the same for asyncio
server  objects
 contributed by yury selivanov in bpo32415 and srinivas  reddy thatiparthy in bpo32418
 it is now possible to control how instances of asyncio
server  begin serving
  previously the server would start serving  immediately when created
 the new startserving keyword argument  to loop
createserver and loop
createunixserver as well  as server
startserving and server
serveforever can be  used to decouple server instantiation and serving
  the new  server
isserving method returns true if the server is  serving
  server objects are now asynchronous context managers     srv  await loop
  contributed by yury selivanov in bpo32662
 callback objects returned by loop
calllater gained the new  when method which returns an absolute scheduled callback  timestamp
 contributed by andrew svetlov in bpo32741
 the loop
createdatagramendpoint  method gained support for  unix sockets
 contributed by quentin dawans in bpo31245
 the asyncio
createacceptedsocket methods and their corresponding unix  socket variants now accept the sslhandshaketimeout keyword  argument
 contributed by neil aspinall in bpo29970
 the new handle
cancelled method returns true if the callback  was cancelled
 contributed by marat sharafutdinov in bpo31943
 the asyncio source has been converted to use the asyncawait  syntax
 contributed by andrew svetlov in bpo32193
 the new readtransport
isreading method can be used to determine  the reading state of the transport
 additionally calls to  readtransport
resumereading and readtransport
pausereading  are now idempotent
 contributed by yury selivanov in bpo32356
 loop methods which accept socket paths now support passing path  like objects
 contributed by yury selivanov in bpo32066
 in asyncio tcp sockets on linux are now created with tcpnodelay  flag set by default
 contributed by yury selivanov and victor  stinner in bpo27456
 exceptions occurring in cancelled tasks are no longer logged
  contributed by yury selivanov in bpo30508
 new windowsselectoreventlooppolicy and  windowsproactoreventlooppolicy classes
 contributed by yury  selivanov in bpo33792
several asyncio apis have been deprecated
binascii
the b2auu function now accepts an optional backtick keywordargument
  when its true zeros are represented by  instead ofspaces
  contributed by xiang zhang in bpo30103

calendar
the htmlcalendar class has new class attributes which ease thecustomization of css classes in the produced html calendar
contributed by oz tiram in bpo30095

collections
namedtuple now supports default values
 contributedby raymond hettinger in bpo32320

compileall
compiledir learned the new invalidationmodeparameter which can be used to enable hashbased 
pyc invalidation
the invalidation mode can also be specified on the command line usingthe new invalidationmode argument
 contributed by benjaminpeterson in bpo31650

concurrentfutures
processpoolexecutor and threadpoolexecutor now support the newinitializer and initargs constructor arguments
 contributed byantoine pitrou in bpo21423
the processpoolexecutor can now take the multiprocessing context viathe new mpcontext argument
 contributed by thomas moreau inbpo31540

contextlib
the new nullcontext is a simpler and faster noop context managerthan exitstack
 contributed by jessebakker in bpo10049
the new asynccontextmanager abstractasynccontextmanager andasyncexitstack have been added to complement their synchronouscounterparts
  contributed by jelle zijlstra in bpo29679 andbpo30241 and by alexander mohr and ilya kulakov in bpo29302

cprofile
the cprofile command line now accepts m modulename as analternative to script path
  contributed by sanyam khurana inbpo21862

crypt
the crypt module now supports the blowfish hashing method
contributed by serhiy storchaka in bpo31664
the mksalt function now allows specifying the number of rounds forhashing
  contributed by serhiy storchaka in bpo31702

datetime
the new datetime
fromisoformat method constructs a datetimeobject from a string in one of the formats output bydatetime
isoformat
 contributed by paul ganssle in bpo15873
the tzinfo class now supports subminute offsets
 contributed byalexander belopolsky in bpo5288

dbm
dumb now supports reading readonly files and no longer writesthe index file when it is not changed
decimal
the decimal module now uses context variables to store the decimalcontext
 contributed by yury selivanov in bpo32630

dis
the dis function is now able to disassemble nested code objectsthe code of comprehensions generator expressions and nestedfunctions and the code used for building nested classes
  themaximum depth of disassembly recursion is controlled by the newdepth parameter
 contributed by serhiy storchaka in bpo11822

distutils
rst is now included in the list of distutils standard readmesand therefore included in source distributions
 contributed by ryangonzalez in bpo11913

enum
functools
singledispatch now supports registering implementationsusing type annotations
 contributed by łukasz langa in bpo32227

gc
the new gc
freeze function allows freezing all objects tracked bythe garbage collector and excluding them from future collections
 thiscan be used before a posix fork call to make the gc copyonwritefriendly or to speed up collection
  the new gc
unfreeze functionsreverses this operation
  additionally gc
getfreezecount can beused to obtain the number of frozen objects
 contributed by li zekunin bpo31558

hmac
the hmac module now has an optimized oneshot digest functionwhich is up to three times faster than hmac
 contributed bychristian heimes in bpo32433

httpclient
httpconnection and httpsconnection now support the new blocksizeargument for improved upload throughput
 contributed by nir soffer inbpo31945

httpserver
simplehttprequesthandler now supports the http ifmodifiedsinceheader
  the server returns the 304 response status if the target filewas not modified after the time specified in the header
 contributedby pierre quentel in bpo29654
simplehttprequesthandler accepts the new directory argument inaddition to the new directory command line argument
 with thisparameter the server serves the specified directory by default ituses the current working directory
 contributed by stéphane wirteland julien palard in bpo28707
the new threadinghttpserver class uses threads to handle requestsusing threadingmixin
 it is used when http
server is run withm
 contributed by julien palard in bpo31639

idlelib and idle
multiple fixes for autocompletion
 contributed by louie lu inbpo15786
module browser on the file menu formerly called class browser nowdisplays nested functions and classes in addition to toplevelfunctions and classes
 contributed by guilherme polo cheryl sabellaand terry jan reedy in bpo1612262
the settings dialog options configure idle has been partlyrewritten to improve both appearance and function
 contributed bycheryl sabella and terry jan reedy in multiple issues
the font sample now includes a selection of nonlatin characters sothat users can better see the effect of selecting a particular font
contributed by terry jan reedy in bpo13802
 the sample can beedited to include other characters
 contributed by serhiy storchakain bpo31860
the idle features formerly implemented as extensions have beenreimplemented as normal features
  their settings have been moved fromthe extensions tab to other dialog tabs
 contributed by charleswohlganger and terry jan reedy in bpo27099
editor code context option revised
  box displays all context lines upto maxlines
  clicking on a context line jumps the editor to thatline
  context colors for custom themes is added to highlights tab ofsettings dialog
 contributed by cheryl sabella and terry jan reedy inbpo33642 bpo33768 and bpo33679
on windows a new api call tells windows that tk scales for dpi
 onwindows 8
1 or 10 with dpi compatibility properties of the pythonbinary unchanged and a monitor resolution greater than 96 dpi thisshould make text and lines sharper
  it should otherwise have noeffect
 contributed by terry jan reedy in bpo33656
new in 3
1output over n lines 50 by default is squeezed down to a button
 ncan be changed in the pyshell section of the general page of thesettings dialog
  fewer but possibly extra long lines can besqueezed by right clicking on the output
  squeezed output can beexpanded in place by doubleclicking the button or into the clipboardor a separate window by rightclicking the button
  contributed bytal einat in bpo1529353
the changes above have been backported to 3
6 maintenance releases
new in 3
4add run customized to the run menu to run a module with customizedsettings
 any command line arguments entered are added to sys
they reappear in the box for the next customized run
  one can alsosuppress the normal shell main module restart
  contributed by cherylsabella terry jan reedy and others in bpo5680 and bpo37627
new in 3
5add optional line numbers for idle editor windows
 windows openwithout line numbers unless set otherwise in the general tab of theconfiguration dialog
  line numbers for an existing window are shownand hidden in the options menu
 contributed by tal einat andsaimadhav heblikar in bpo17535

importlib
io
the new textiowrapper
reconfigure method can be used toreconfigure the text stream with the new settings
 contributed byantoine pitrou in bpo30526 and inada naoki in bpo15216

ipaddress
the new subnetof and supernetof methods ofipaddress
ipv6network and ipaddress
ipv4network can be used fornetwork containment tests
 contributed by michel albert and cherylsabella in bpo20825

itertools
islice now accepts integerlike objects as startstop and slice arguments
 contributed by will roberts in bpo30537

locale
the new monetary argument to locale
formatstring can be used tomake the conversion use monetary thousands separators and groupingstrings
  contributed by garvit in bpo10379
the locale
getpreferredencoding function now always returnsutf8 on android or when in the forced utf8 mode
logging
logger instances can now be pickled
 contributed by vinay sajip inbpo30520
the new streamhandler
setstream method can be used to replace thelogger stream after handler creation
 contributed by vinay sajip inbpo30522
it is now possible to specify keyword arguments to handlerconstructors in configuration passed to logging
fileconfig
contributed by preston landers in bpo31080
math
the new math
remainder function implements the ieee 754styleremainder operation
  contributed by mark dickinson in bpo29962

mimetypes
msilib
the new database
close method can be used to close the msi lastin firstout database
 contributed by berker peksag in bpo20486

multiprocessing
the new process
close method explicitly closes the process objectand releases all resources associated with it
  valueerror is raisedif the underlying process is still running
 contributed by antoinepitrou in bpo30596
the new process
kill method can be used to terminate the processusing the sigkill signal on unix
 contributed by vitor pereira inbpo30794
nondaemonic threads created by process are now joined on processexit
 contributed by antoine pitrou in bpo18966

os
fwalk now accepts the path argument as bytes
 contributedby serhiy storchaka in bpo28682
os
scandir gained support for file descriptors
 contributed byserhiy storchaka in bpo25996
the new registeratfork function allows registering pythoncallbacks to be executed at process fork
 contributed by antoinepitrou in bpo16500
added os
preadv combine the functionality of os
readv andos
pread and os
pwritev functions combine the functionalityof os
writev and os
pwrite
 contributed by pablo galindo inbpo31368
the mode argument of os
makedirs no longer affects the filepermission bits of newlycreated intermediatelevel directories
contributed by serhiy storchaka in bpo19930
os
dup2 now returns the new file descriptor
  previously nonewas always returned
 contributed by benjamin peterson in bpo32441
the structure returned by os
stat now contains the stfstypeattribute on solaris and its derivatives
 contributed by jesús ceaavión in bpo32659

pathlib
the new path
ismount method is now available on posix systems andcan be used to determine whether a path is a mount point
 contributedby cooper ry lees in bpo30897

pdb
settrace now takes an optional header keywordonlyargument
  if given it is printed to the console just beforedebugging begins
  contributed by barry warsaw in bpo31389
pdb command line now accepts m modulename as an alternative toscript file
  contributed by mario corchero in bpo32206

pycompile
compile  and by extension compileall  nowrespects the sourcedateepoch environment variable byunconditionally creating 
pyc files for hashbased validation
 thisallows for guaranteeing reproducible builds of 
pyc files when theyare created eagerly
 contributed by bernhard m
 wiedemann inbpo29708

pydoc
the pydoc server can now bind to an arbitrary hostname specified bythe new n commandline argument
 contributed by feanil patel inbpo31128

queue
the new simplequeue class is an unbounded fifo lastin firstoutqueue
 contributed by antoine pitrou in bpo14976

re
the flags re
locale and re
unicode can be set withinthe scope of a group
 contributed by serhiy storchaka in bpo31690
re
split now supports splitting on a pattern like rb or  that matches an empty string
 contributed by serhiystorchaka in bpo25054
regular expressions compiled with the re
locale flag no longerdepend on the locale at compile time
  locale settings are appliedonly when the compiled regular expression is used
 contributed byserhiy storchaka in bpo30215
futurewarning is now emitted if a regular expression containscharacter set constructs that will change semantically in the futuresuch as nested sets and set operations
 contributed by serhiystorchaka in bpo30349
compiled regular expression and match objects can now be copied usingcopy
copy and copy
deepcopy
 contributed by serhiy storchakain bpo10076

signal
the new warnonfullbuffer argument to the signal
setwakeupfdfunction makes it possible to specify whether python prints a warningon stderr when the wakeup buffer overflows
 contributed by nathanielj
 smith in bpo30050

socket
the new socket
getblocking method returns true if the socket isin blocking mode and false otherwise
 contributed by yury selivanovin bpo32373
the new socket
close function closes the passed socket filedescriptor
 this function should be used instead of os
close forbetter compatibility across platforms
 contributed by christianheimes in bpo32454
the socket module now exposes the socket
tcpcongestion linux2
13 socket
37 andsocket
12 constants
 contributed byomar sandoval in bpo26273 and nathaniel j
 smith in bpo29728
support for socket
afvsock sockets has been added to allowcommunication between virtual machines and their hosts
 contributedby cathy avery in bpo27584
sockets now autodetect family type and protocol from file descriptorby default
 contributed by christian heimes in bpo28134

socketserver
serverclose now waits until all nondaemon threads complete
serverclosenow waits until all child processes complete
add a new socketserver
forkingmixin
blockonclose class attributeto socketserver
forkingmixin and socketserver
threadingmixinclasses
 set the class attribute to false to get the pre3
7behaviour
sqlite
sqlite3
connection now exposes the backup method when theunderlying sqlite library is at version 3
6
11 or higher
 contributedby lele gaifax in bpo27645
the database argument of sqlite3
connect now accepts any pathlike object instead of just a string
 contributed by anderslorentsen in bpo31843

ssl
string
template now lets you to optionally modify the regularexpression pattern for braced placeholders and nonbraced placeholdersseparately
  contributed by barry warsaw in bpo1198569

subprocess
the subprocess
run function accepts the new captureoutputkeyword argument
  when true stdout and stderr will be captured
 thisis equivalent to passing subprocess
pipe as stdout and stderrarguments
 contributed by bo bayles in bpo32102
the subprocess
run function and the subprocess
popen constructornow accept the text keyword argument as an alias touniversalnewlines
 contributed by andrew clegg in bpo31756
on windows the default for closefds was changed from false totrue when redirecting the standard handles
  its now possible toset closefds to true when redirecting the standard handles
  seesubprocess
  this means that closefds now defaults totrue on all supported platforms
 contributed by segev finer inbpo19764
the subprocess module is now more graceful when handlingkeyboardinterrupt during subprocess
run orin a popen context manager
  it now waits a short amount of time forthe child to exit before continuing the handling of thekeyboardinterrupt exception
 contributed by gregory p
 smith inbpo25942

sys
the new sys
breakpointhook hook function is called by the builtinbreakpoint
 contributed by barry warsaw in bpo31353
on android the new sys
getandroidapilevel returns the buildtimeandroid api version
 contributed by victor stinner in bpo28740
the new sys
getcoroutineorigintrackingdepth function returnsthe current coroutine origin tracking depth as set by the newsys
setcoroutineorigintrackingdepth
  asyncio has beenconverted to use this new api instead of the deprecatedsys
 contributed by nathaniel j
 smith inbpo32591

time
pep 564 adds six new functions with nanosecond resolution to thetime module time
timensnew clock identifiers have been added time
clockboottime linux identical to time
clockmonotonic  except it also includes any time that the system is suspended
clockprof freebsd netbsd and openbsd highresolution  perprocess cpu timer
clockuptime freebsd openbsd time whose absolute value is  the time the system has been running and not suspended providing  accurate uptime measurement
the new time
threadtime and time
threadtimens functions canbe used to get perthread cpu time measurements
 contributed byantoine pitrou in bpo32025
the new time
pthreadgetcpuclockid function returns the clock idof the threadspecific cputime clock
tkinter
the new tkinter
spinbox class is now available
 contributed byalan moore in bpo32585

tracemalloc
traceback behaves more like regular tracebacks sortingthe frames from oldest to most recent
format nowaccepts negative limit truncating the result to the abslimitoldest frames
  to get the old behaviour use the newmostrecentfirst argument to traceback
format
 contributed byjesse bakker in bpo32121

types
the new wrapperdescriptortype methodwrappertypemethoddescriptortype and classmethoddescriptortype classes arenow available
 contributed by manuel krebber and guido van rossum inbpo29377 and serhiy storchaka in bpo32265
the new types
resolvebases function resolves mro entriesdynamically as specified by pep 560
 contributed by ivanlevkivskyi in bpo32717

unicodedata
the internal unicodedata database has been upgraded to use unicode11
 contributed by benjamin peterson

unittest
the new k commandline option allows filtering tests by a namesubstring or a unix shelllike pattern
 for example python munittest k foo runs footests
testsomethingbartests
testfoo but notbartests
 contributed by jonas haag inbpo32071

unittestmock
the sentinel attributes now preserve their identity when they arecopied or pickled
 contributed by serhiy storchaka in bpo20804
the new seal function allows sealing mock instances which willdisallow further creation of attribute mocks
  the seal is appliedrecursively to all attributes that are themselves mocks
 contributedby mario corchero in bpo30541

urllibparse
quote has been updated from rfc 2396 to rfc3986 adding  to the set of characters that are never quoted bydefault
 contributed by christian theune and ratnadeep debnath inbpo16285

uu
the uu
encode function now accepts an optional backtick keywordargument
  when its true zeros are represented by  instead ofspaces
  contributed by xiang zhang in bpo30103

uuid
the new uuid
issafe attribute relays information from the platformabout whether generated uuids are generated with a multiprocessingsafe method
 contributed by barry warsaw in bpo22807
uuid
getnode now prefers universally administered mac addressesover locally administered mac addresses
 this makes a better guaranteefor global uniqueness of uuids returned from uuid
uuid1
  if onlylocally administered mac addresses are available the first such onefound is returned
 contributed by barry warsaw in bpo32107

warnings
xmletree
elementpath predicates in the find methods can now compare text ofthe current node with 
  text not only text in children
predicates also allow adding spaces for better readability
contributed by stefan behnel in bpo31648

xmlrpcserver
registerfunction can now be used as adecorator
  contributed by xiang zhang in bpo7769

zipapp
function createarchive now accepts an optional filter argumentto allow the user to select which files should be included in thearchive
  contributed by irmen de jong in bpo31072
function createarchive now accepts an optional compressedargument to generate a compressed archive
  a command line option compress has also been added to support compression
 contributed byzhiming wang in bpo31638

zipfile
zipfile now accepts the new compresslevel parameter to control thecompression level
 contributed by bo bayles in bpo21417
subdirectories in archives created by zipfile are now stored inalphabetical order
 contributed by bernhard m
 wiedemann inbpo30693

c api changes
a new api for threadlocal storage has been implemented
  see pep 539new c api for threadlocal storage for an overview and thread specificstorage tss api for a complete reference
 contributed by masayukiyamamoto in bpo25658
the new context variables functionality exposes a number of new capis
the new pyimportgetmodule function returns the previouslyimported module with the given name
 contributed by eric snow inbpo28411
the new pyreturnrichcompare macro eases writing rich comparisonfunctions
 contributed by petr victorin in bpo23699
the new pyunreachable macro can be used to mark unreachable codepaths
 contributed by barry warsaw in bpo31338
the tracemalloc now exposes a c api through the newpytracemalloctrack and pytracemallocuntrack functions
contributed by victor stinner in bpo30054
the new importfindloadstart and importfindloaddonestatic markers can be used to trace module imports
 contributed bychristian heimes in bpo31574
the fields name and doc of structures pymemberdefpygetsetdef pystructsequencefield pystructsequencedesc andwrapperbase are now of type const char  rather of char 
contributed by serhiy storchaka in bpo28761
the result of pyunicodeasutf8andsize and pyunicodeasutf8 isnow of type const char  rather of char 
 contributed by serhiystorchaka in bpo28769
the result of pymappingkeys pymappingvalues andpymappingitems is now always a list rather than a list or atuple
 contributed by oren milman in bpo28280
added functions pysliceunpack and pysliceadjustindices
contributed by serhiy storchaka in bpo27867
pyosafterfork is deprecated in favour of the new functionspyosbeforefork pyosafterforkparent andpyosafterforkchild
  contributed by antoine pitrou inbpo16500
the pyexcrecursionerrorinst singleton that was part of the publicapi has been removed as its members being never cleared may cause asegfault during finalization of the interpreter
 contributed by xavierde gaye in bpo22898 and bpo30697
added c api support for timezones with timezone constructorspytimezonefromoffset and pytimezonefromoffsetandname andaccess to the utc singleton with pydatetimetimezoneutc
contributed by paul ganssle in bpo10381
the type of results of pythreadstartnewthread andpythreadgetthreadident and the id parameter ofpythreadstatesetasyncexc changed from long to unsigned long
contributed by serhiy storchaka in bpo6532
pyunicodeaswidecharstring now raises a valueerror if the secondargument is null and the wchart string contains null characters
contributed by serhiy storchaka in bpo30708
changes to the startup sequence and the management of dynamic memoryallocators mean that the long documented requirement to callpyinitialize before calling most c api functions is now relied onmore heavily and failing to abide by it may lead to segfaults inembedding applications
 see the porting to python 3
7 section in thisdocument and the before python initialization section in the c apidocumentation for more details
the new pyinterpreterstategetid returns the unique id for a giveninterpreter
 contributed by eric snow in bpo29102
pydecodelocale pyencodelocale now use the utf8 encodingwhen the utf8 mode is enabled
 contributed by victor stinner inbpo29240
pyunicodedecodelocaleandsize and pyunicodeencodelocale nowuse the current locale encoding for surrogateescape error handler
contributed by victor stinner in bpo29240
the start and end parameters of pyunicodefindchar are nowadjusted to behave like string slices
 contributed by xiang zhang inbpo28822

build changes
optimizations
other cpython implementation changes
 trace hooks may now opt out of receiving the line and opt into  receiving the opcode events from the interpreter by setting the  corresponding new ftracelines and ftraceopcodes attributes  on the frame being traced
 contributed by nick coghlan in  bpo31344
 fixed some consistency problems with namespace package module  attributes
 namespace module objects now have an file that is  set to none previously unset and their spec
origin is  also set to none previously the string namespace
  see  bpo32305
  also the namespace module objects spec
loader is  set to the same value as loader previously the former was  set to none
  see bpo32303
 the locals dictionary now displays in the lexical order that  variables were defined
  previously the order was undefined
  contributed by raymond hettinger in bpo32690
 the distutils upload command no longer tries to change cr end  ofline characters to crlf
  this fixes a corruption issue with  sdists that ended with a byte equivalent to cr
 contributed by bo  bayles in bpo32304

deprecated python behavior
yield expressions both yield and yield from clauses are nowdeprecated in comprehensions and generator expressions aside from theiterable expression in the leftmost for clause
 this ensures thatcomprehensions always immediately return a container of theappropriate type rather than potentially returning a generatoriterator object while generator expressions wont attempt tointerleave their implicit output with the output from any explicityield expressions
  in python 3
7 such expressions emitdeprecationwarning when compiled in python 3
8 this will be asyntaxerror
 contributed by serhiy storchaka in bpo10544
returning a subclass of complex from object
complex isdeprecated and will be an error in future python versions
  this makescomplex consistent with object
int andobject
float
 contributed by serhiy storchaka in bpo28894

deprecated python modules functions and methods
aifc
openfp has been deprecated and will be removed in python 3
9
use aifc
open instead
 contributed by brian curtin in bpo31985

asyncio
support for directly awaiting instances of asyncio
lock and otherasyncio synchronization primitives has been deprecated
  anasynchronous context manager must be used in order to acquire andrelease the synchronization resource
 contributed by andrew svetlovin bpo32253
the asyncio
currenttask and asyncio
alltasksmethods have been deprecated
 contributed by andrew svetlov inbpo32250

collections
in python 3
8 the abstract base classes in collections
abc will nolonger be exposed in the regular collections module
  this will helpcreate a clearer distinction between the concrete classes and theabstract base classes
 contributed by serhiy storchaka in bpo25988

dbm
dumb now supports reading readonly files and no longer writesthe index file when it is not changed
  a deprecation warning is nowemitted if the index file is missing and recreated in the r andw modes this will be an error in future python releases
contributed by serhiy storchaka in bpo28847

enum
gettext
using noninteger value for selecting a plural form in gettext isnow deprecated
  it never correctly worked
 contributed by serhiystorchaka in bpo28692

importlib
methods metapathfinder
findmodule replaced bymetapathfinder
findspec and pathentryfinder
findloaderreplaced by pathentryfinder
findspec both deprecated in python3
4 now emit deprecationwarning
 contributed by matthias bussonnierin bpo29576the importlib
resourceloader abc has been deprecated in favourof importlib
locale
format has been deprecated use locale
formatstringinstead
  contributed by garvit in bpo10379

macpath
the macpath is now deprecated and will be removed in python 3
8
contributed by chi hsuan yen in bpo9850

threading
dummythreading and dummythread have been deprecated
  it is nolonger possible to build python with threading disabled
 usethreading instead
 contributed by antoine pitrou in bpo31370

socket
the silent argument value truncation in socket
htons andsocket
ntohs has been deprecated
  in future versions of pythonif the passed argument is larger than 16 bits an exception will beraised
 contributed by oren milman in bpo28332

ssl
wrapsocket is deprecated
  use ssl
wrapsocketinstead
 contributed by christian heimes in bpo28124

sunau
openfp has been deprecated and will be removed in python3
9
 use sunau
open instead
 contributed by brian curtin inbpo31985

sys
deprecated sys
setcoroutinewrapper andsys
the undocumented sys
callstats function has been deprecated andwill be removed in a future python version
 contributed by victorstinner in bpo28799

wave
openfp has been deprecated and will be removed in python 3
9
use wave
open instead
 contributed by brian curtin in bpo31985

deprecated functions and types of the c api
function pyslicegetindicesex is deprecated and replaced with amacro if pylimitedapi is not set or set to a value in the rangebetween 0x03050400 and 0x03060000 not inclusive or is0x03060100 or higher
  contributed by serhiy storchaka inbpo27867
pyosafterfork has been deprecated
  use pyosbeforeforkpyosafterforkparent or pyosafterforkchild instead
contributed by antoine pitrou in bpo16500

platform support removals
api and feature removals
the following features and apis have been removed from python 3
7 the os
statfloattimes function has been removed
 it was  introduced in python 2
3 for backward compatibility with python 2
2  and was deprecated since python 3
1
 unknown escapes consisting of  and an ascii letter in  replacement templates for re
sub were deprecated in python 3
5  and will now cause an error
 removed support of the exclude argument in  tarfile
add
 it was deprecated in python 2
7 and 3
2
  use the filter argument instead
 the splitunc function in the ntpath module was deprecated in  python 3
1 and has now been removed
  use the splitdrive  function instead
namedtuple no longer supports the verbose  parameter or source attribute which showed the generated source  code for the named tuple class
  this was part of an optimization  designed to speedup class creation
  contributed by jelle zijlstra  with further improvements by inada naoki serhiy storchaka and  raymond hettinger in bpo28638
 functions bool float list and tuple no longer take  keyword arguments
  the first argument of int can now be passed  only as positional argument
 removed previously deprecated in python 2
4 classes plist dict  and internaldict in the plistlib module
  dict values in the  result of functions readplist and readplistfrombytes are now  normal dicts
  you no longer can use attribute access to access  items of these dictionaries
 the asyncio
socketpair function has been removed
  use the socket
socketpair function instead it is available on  all platforms since python 3
5
 asyncio
socketpair  was just an alias to socket
socketpair on python 3
5 and newer
 asyncio no longer exports the selectors and overlapped  modules as asyncio
selectors and asyncio
 replace  from asyncio import selectors with import selectors
 direct instantiation of ssl
sslsocket and ssl
sslobject objects  is now prohibited
 the constructors were never documented tested  or designed as public constructors
  users were supposed to use  ssl
wrapsocket or ssl
 contributed by christian  heimes in bpo32951
 the unused distutils installmisc command has been removed
  contributed by eric n
 vander weele in bpo29218

module removals
the fpectl module has been removed
  it was never enabled bydefault never worked correctly on x8664 and it changed the pythonabi in ways that caused unexpected breakage of c extensions
contributed by nathaniel j
 smith in bpo29137

windowsonly changes
the python launcher py
exe can accept 32  64 bit specifierswithout having to specify a minor version as well
 so py 332and py 364 become valid as well as py 3
732 also the m64and m
n64 forms are now accepted to force 64 bit python even if 32bit would have otherwise been used
 if the specified version is notavailable py
exe will error exit
 contributed by steve barnes inbpo30291
the launcher can be run as py 0 to produce a list of the installedpythons with default marked with an asterisk
 running py 0p willinclude the paths
 if py is run with a version specifier that cannotbe matched it will also print the short form list of availablespecifiers
 contributed by steve barnes in bpo30362

porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
changes in python behavior
changes in the python api
changes in the c api
the function pyslicegetindicesex is considered unsafe forresizable sequences
  if the slice indices are not instances of intbut objects that implement the index method the sequence canbe resized after passing its length to pyslicegetindicesex
  thiscan lead to returning indices out of the length of the sequence
  foravoiding possible problems use new functions pysliceunpack andpysliceadjustindices
 contributed by serhiy storchaka inbpo27867

cpython bytecode changes
there are two new opcodes loadmethod and callmethod
contributed by yury selivanov and inada naoki in bpo26110
the storeannotation opcode has been removed
 contributed by markshannon in bpo32550

windowsonly changes
the file used to override sys
path is now called pythonexecutable
pth instead of sys
 see finding modules formore information
 contributed by steve dower in bpo28137

other cpython implementation changes
in preparation for potential future changes to the public cpythonruntime initialization api see pep 432 for an initial butsomewhat outdated draft cpythons internal startup andconfiguration management logic has been significantly refactored
while these updates are intended to be entirely transparent to bothembedding applications and users of the regular cpython cli theyrebeing mentioned here as the refactoring changes the internal order ofvarious operations during interpreter startup and hence may uncoverpreviously latent defects either in embedding applications or incpython itself
 initially contributed by nick coghlan and eric snowas part of bpo22257 and further updated by nick eric and victorstinner in a number of other issues
 some known details affected pysysaddwarnoptionunicode is not currently usable by embedding  applications due to the requirement to create a unicode object prior  to calling pyinitialize
 use pysysaddwarnoption instead
 warnings filters added by an embedding application with  pysysaddwarnoption should now more consistently take precedence  over the default filters set by the interpreterdue to changes in the way the default warnings filters are configuredsetting pybyteswarningflag to a value greater than one is no longersufficient to both emit byteswarning messages and have themconverted to exceptions
  instead the flag must be set to cause thewarnings to be emitted in the first place and an expliciterrorbyteswarning warnings filter added to convert them toexceptions
due to a change in the way docstrings are handled by the compiler theimplicit return none in a function body consisting solely of adocstring is now marked as occurring on the same line as thedocstring not on the functions header line
the current exception state has been moved from the frame object tothe coroutine
 this simplified the interpreter and fixed a couple ofobscure bugs caused by having swap exception state when entering orexiting a generator
 contributed by mark shannon in bpo25612

notable changes in python
starting in 3
1 pyinitialize now consistently reads andrespects all of the same environment settings as pymain inearlier python versions it respected an illdefined subset of thoseenvironment variables while in python 3
0 it didnt read any ofthem due to bpo34247
 if this behavior is unwanted setpyignoreenvironmentflag to 1 before calling pyinitialize
in 3
1 the c api for context variables was updated to use pyobjectpointers
  see also bpo34762
in 3
1 the tokenize module now implicitly emits a newline tokenwhen provided with input that does not have a trailing new line
  thisbehavior now matches what the c tokenizer does internally
contributed by ammar askar in bpo33899

notable changes in python
in 3
2 venv on windows no longer copies the original binariesbut creates redirector scripts named python
exe and pythonw
exeinstead
 this resolves a long standing issue where all virtualenvironments would have to be upgraded or recreated with each pythonupdate
 however note that this release will still require recreationof virtual environments in order to get the new scripts
notable changes in python
due to significant security concerns the reuseaddress parameter ofasyncio
createdatagramendpoint is no longer supported
 thisis because of the behavior of the socket option soreuseaddr in udp
for more details see the documentation forloop
createdatagramendpoint
 contributed by kyle stanleyantoine pitrou and yury selivanov in bpo37228

whats new in python
this article explains the new features in python 3
3 compared to 3
2
3 was released on september 29 2012
  for full details seethe changelog
see also pep 398  python 3
3 release schedule
summary  release highlights
pep 405 virtual environments
see also  pep 405  python virtual environments     pep written by carl meyer implementation by carl meyer and vinay     sajip
pep 420 implicit namespace packages
py marker files and can automatically span multiple pathsegments inspired by various third party approaches to namespacepackages as described in pep 420see also  pep 420  implicit namespace packages     pep written by eric v
 smith implementation by eric v
 smith and     barry warsaw
pep 3118 new memoryview implementation and buffer protocol documentation
features
api changes
contributed by stefan krah in bpo10181
see also pep 3118  revising the buffer protocol
pep 393 flexible string representation
functionality
performance and resource usage
see also  pep 393  flexible string representation     pep written by martin von löwis implementation by torsten becker     and martin von löwis
pep 397 python launcher for windows
see also  pep 397  python launcher for windows     pep written by mark hammond and martin v
 löwis implementation     by vinay sajip
  launcher documentation python launcher for windows  installer path modification finding the python executable
pep 3151 reworking the os and io exception hierarchy
txtsee also  pep 3151  reworking the os and io exception hierarchy     pep written and implemented by antoine pitrou
pep 380 syntax for delegating to a subgenerator
pep 409 suppressing exception context
   keyerrorxsee also  pep 409  suppressing exception context     pep written by ethan furman implemented by ethan furman and nick     coghlan
pep 414 explicit unicode literals
see also  pep 414  explicit unicode literals     pep written by armin ronacher
pep 3155 qualified name for classes and functions
meth at 0x7f46b9fe31e0see also  pep 3155  qualified name for classes and functions     pep written and implemented by antoine pitrou
pep 412 keysharing dictionary
see also  pep 412  keysharing dictionary     pep written and implemented by mark shannon
pep 362 function signature object
see also  pep 362   function signature object     pep written by brett cannon yury selivanov larry hastings     jiwon seo implemented by yury selivanov
pep 421 adding sysimplementation
simplenamespace
see also  pep 421  adding sys
implementation     pep written and implemented by eric snow
using importlib as the implementation of import
new apis
visible changes
other language changes
some smaller changes made to the core python language are added support for unicode name aliases and named sequences
  contributed by ezio melotti in bpo12753
 unicode database updated to ucd version 6
  contributed by petri lehtinen in bpo12170
 the rjust ljust and center methods of bytes and  bytearray now accept a bytearray for the fill argument
  contributed by antoine pitrou in bpo13748
 dict
  contributed by filip gruszczyński in bpo13521
 the error messages produced when a function call does not match the  function signature have been significantly improved
  contributed by benjamin peterson

a finergrained import lock
contributed by antoine pitrou in bpo9260

builtin functions and types
new modules
faulthandler
ipaddress
contributed by google and peter moody in pep 3144

lzma
contributed by nadeem vawda and per øyvind karlsen in bpo6715

improved modules
abc
contributed by darren dale in bpo11610
abc
array
contributed by oren tirosh and hirokazu yamamoto in bpo1172711

base
binascii
bz
  contributed by nadeem vawda in bpo5863
 bz2
  contributed by nir aides in bpo1625
 bz2
codecs
collections
contextlib
crypt
curses
window class has a new getwch method to get a     wide character    the curses module has a new ungetwch function to push a     wide character so the next getwch will return itcontributed by iñigo serna in bpo6755

datetime
decimal
py     decimal        speedup              pi         42
02s         0
345s          120x                 telco      172
19s        5
68s           30x                  psycopg    3
57s          0
29s           12x              features the floatoperation signal optionally enables stricter semantics  for mixing floats and decimals
api changes the c module has the following context limits depending on the  machine architecture                                32bit                 64bit                                    maxprec           425000000            999999999999999999                      maxemax           425000000            999999999999999999                      minemin           425000000           999999999999999999                in the context templates defaultcontext basiccontext and  extendedcontext the magnitude of emax and emin has changed to  999999
email
ftplib
functools
gc
hmac
http
html
imaplib
contributed by sijin joseph in bpo8808

inspect
contributed by meador inge and nick coghlan in bpo13062
a new getgeneratorlocals function has been added
contributed by meador inge in bpo15153

io
contributed by david townshend in bpo12760
the constructor of the textiowrapper class has a new writethroughoptional argument
itertools
logging
math
mmap
multiprocessing
nntplib
committers   contributed by giampaolo rodolà in bpo9795

os
pdb
contributed by georg brandl in bpo14210
pickle
contributed by richard oudkerk in bpo14166

pydoc
re
contributed by serhiy storchaka in bpo3665

sched
select
shlex
shutil
 new functions   diskusage provides total used and free disk space    statistics
signal
smtpd
smtplib
socket
socketserver
sqlite
ssl
  contributed by victor stinner in bpo12049
 the ssl module now exposes a finergrained exception hierarchy in  order to make it easier to inspect the various kinds of errors
stat
contributed by giampaolo rodolà in bpo14807

struct
subprocess
sys
tarfile
tempfile
textwrap
threading
time
types
unittest
urllib
webbrowser
xmletreeelementtree
zlib
optimizations
build and c api changes
changes to pythons build process and to the c api include new pep 3118 related function   pymemoryviewfrommemory pep 393 added new unicode types macros and functions   highlevel api     pyunicodecopycharacters     pyunicodefindchar     pyunicodegetlength pyunicodegetlength     pyunicodenew     pyunicodesubstring     pyunicodereadchar pyunicodewritechar   lowlevel api     pyucs1 pyucs2 pyucs4 types     pyasciiobject and pycompactunicodeobject structures     pyunicodeready     pyunicodefromkindanddata     pyunicodeasucs4 pyunicodeasucs4copy     pyunicodedata pyunicode1bytedata      pyunicode2bytedata pyunicode4bytedata     pyunicodekind with pyunicodekind enum      pyunicodewcharkind pyunicode1bytekind      pyunicode2bytekind pyunicode4bytekind     pyunicoderead pyunicodereadchar pyunicodewrite     pyunicodemaxcharvalue pyargparsetuple now accepts a bytearray for the c format  bpo12380
deprecated
unsupported operating systems
os2 and vms are no longer supported due to the lack of a maintainer
windows 2000 and windows platforms which set comspec tocommand
com are no longer supported due to maintenance burden
osf support which was deprecated in 3
2 has been completely removed
deprecated python modules functions and methods
 check especially  the replacing older functions with the subprocess module section  bpo11377
deprecated functions and types of the c api
the pyunicode has been deprecated by pep 393 and will beremoved in python 4
 all functions using this type are deprecatedunicode functions and methods using pyunicode and pyunicodetypes pyunicodefromunicode use pyunicodefromwidechar or  pyunicodefromkindanddata pyunicodeasunicode pyunicodeasunicode  pyunicodeasunicodeandsize use pyunicodeaswidecharstring pyunicodeasdata use pyunicodedata with pyunicoderead and  pyunicodewrite pyunicodegetsize pyunicodegetsize use  pyunicodegetlength or pyunicodegetlength pyunicodegetdatasize use pyunicodegetlengthstr   pyunicodekindstr only work on ready strings pyunicodeasunicodecopy use pyunicodeasucs4copy or  pyunicodeaswidecharstring pyunicodegetmaxfunctions and macros manipulating pyunicode strings pyunicodestrlen use pyunicodegetlength or  pyunicodegetlength pyunicodestrcat use pyunicodecopycharacters or  pyunicodefromformat pyunicodestrcpy pyunicodestrncpy pyunicodecopy use  pyunicodecopycharacters or pyunicodesubstring pyunicodestrcmp use pyunicodecompare pyunicodestrncmp use pyunicodetailmatch pyunicodestrchr pyunicodestrrchr use  pyunicodefindchar pyunicodefill use pyunicodefill pyunicodematchencoders pyunicodeencode use pyunicodeasencodedobject pyunicodeencodeutf7 pyunicodeencodeutf8 use pyunicodeasutf8 or  pyunicodeasutf8string pyunicodeencodeutf32 pyunicodeencodeutf16 pyunicodeencodeunicodeescape use  pyunicodeasunicodeescapestring pyunicodeencoderawunicodeescape use  pyunicodeasrawunicodeescapestring pyunicodeencodelatin1 use pyunicodeaslatin1string pyunicodeencodeascii use pyunicodeasasciistring pyunicodeencodecharmap pyunicodetranslatecharmap pyunicodeencodembcs use pyunicodeasmbcsstring or  pyunicodeencodecodepage with cpacp codepage pyunicodeencodedecimal pyunicodetransformdecimaltoascii
deprecated features
porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
porting python code
porting c code
building c extensions
command line switch changes
  bpo10998 contributed by éric araujo
 when python is started with s import site will no longer  add sitespecific paths to the module search paths
whats new in python
author   raymond hettingerthis article explains the new features in python 3
pep 372 ordered dictionaries
pep 378 format specifier for thousands separator
see also  pep 378  format specifier for thousands separator     pep written by raymond hettinger and implemented by eric smith     and mark dickinson
other language changes
new improved and deprecated modules
optimizations
  contributed by amaury forgeot darc and antoine pitrou
 added a heuristic so that tuples and dicts containing only  untrackable objects are not tracked by the garbage collector
  contributed by antoine pitrou bpo4688
 enabling a configure option named withcomputedgotos on  compilers that support it notably gcc sunpro icc the bytecode  evaluation loop is compiled with a new dispatch mechanism which  gives speedups of up to 20 depending on the system the compiler  and the benchmark
  contributed by antoine pitrou along with a number of other  participants bpo4753
 the decoding of utf8 utf16 and latin1 is now two to four times  faster
  contributed by antoine pitrou and amaury forgeot darc bpo4868
 the json module now has a c extension to substantially improve its  performance
  contributed by bob ippolito and converted to py3
1 by antoine  pitrou and benjamin peterson bpo4136
 unpickling now interns the attribute names of pickled objects
  contributed by jake mcguire and antoine pitrou bpo5084

idle
  contributed by roger d
 serwy bpo5150

build and c api changes
porting to python
whats new in python
author   a
python
see also  the 3xxx series of peps which contains proposals for python 3
changes to the development process
new issue tracker roundup
new documentation format restructuredtext using sphinx
see also  documenting python     describes how to write for pythons documentation
  sphinx     documentation and code for the sphinx toolchain
  docutils     the underlying restructuredtext parser and toolset
pep 343 the with statement
note  in this case f is the same object created by open because  file
writing context managers
the contextlib module
writelinesee also  pep 343  the with statement     pep written by guido van rossum and nick coghlan implemented by     mike bland guido van rossum and neal norwitz
  the documentation  for the contextlib module
pep 366 explicit relative imports from a main module
pep 370 peruser sitepackages directory
see also  pep 370  peruser sitepackages directory     pep written and implemented by christian heimes
pep 371 the multiprocessing package
see also  the documentation for the multiprocessing module
  pep 371  addition of the multiprocessing package     pep written by jesse noller and richard oudkerk implemented by     richard oudkerk and jesse noller
pep 3101 advanced string formatting
pep 3105 print as a function
see also  pep 3105  make print a function     pep written by georg brandl
pep 3110 exceptionhandling changes
see also  pep 3110  catching exceptions in python 3000     pep written and implemented by collin winter
pep 3112 byte literals
see also  pep 3112  bytes literals in python 3000     pep written by jason orendorff backported to 2
6 by christian     heimes
pep 3116 new io library
see also  pep 3116  new io     pep written by daniel stutzbach mike verdone and guido van     rossum
pep 3118 revised buffer protocol
see also  pep 3118  revising the buffer protocol     pep written by travis oliphant and carl banks implemented by     travis oliphant
pep 3119 abstract base classes
see also  pep 3119  introducing abstract base classes     pep written by guido van rossum and talin
pep 3127 integer literal support and syntax
oct42   0o52    bin173   0b10101101the int and long builtins will now accept the 0o and 0bprefixes when base8 or base2 are requested or when the baseargument is zero signalling that the base used should be determinedfrom the string    int 0o52 0   42    int1101 2   13    int0b1101 2   13    int0b1101 0   13see also  pep 3127  integer literal support and syntax     pep written by patrick maupin backported to 2
pep 3129 class decorators
  its nowlegal to write   foo   bar   class a     passthis is equivalent to   class a     pass   a  foobarasee also  pep 3129  class decorators     pep written by collin winter
pep 3141 a type hierarchy for numbers
the fractions module
other language changes
some smaller changes made to the core python language are directories and zip archives containing a main
userdict      uda  1      udb  string      fud     a b  contributed by alexander belopolsky bpo1686487
  its also become legal to provide keyword arguments after a args  argument to a function call
count0     2  contributed by raymond hettinger the builtin types now have improved support for extended slicing  syntax accepting various combinations of start stop step
difference246 789     set1 0 3 5  contributed by raymond hettinger
 many floatingpoint features were added
optimizations
interpreter changes
new and improved modules
  contributed by raymond hettinger
 another change to the collections module is that the deque type  now supports an optional maxlen parameter if supplied the  deques size will be restricted to no more than maxlen items
append4      dq     deque2 3 4 maxlen3  contributed by raymond hettinger
 the cookie modules morsel objects now support an httponly  attribute
  contributed by christian heimes and mark dickinson
 mmap objects now have a rfind method that searches for a  substring beginning at the end of the string and searching  backwards
methodcallerreplace old new      replacerold wine in old bottles     new wine in new bottles  contributed by georg brandl after a suggestion by gregory  petrosyan
  the attrgetter function now accepts dotted names and performs  the corresponding attribute lookups      instname  operator
name      instname     str      instnamehelp     helper  contributed by georg brandl after a suggestion by barry warsaw
 the os module now wraps several new system calls
  contributed by paul moore bpo2439
 the pyexpat modules parser objects now allow setting their  buffersize attribute to change the size of the buffer used to  hold character data
svn  contributed by tarek ziadé bpo2663
 integrating signal handling with gui handling event loops like those  used by tkinter or gtk has long been a problem most software ends  up polling waking up every fraction of a second to check if any gui  events have occurred
  contributed by adam olsen bpo1583
  the siginterrupt function is now available from python code and  allows changing whether signals can interrupt system calls or not
warnings  1 multiple warnings raised  contributed by brett cannon
 the textwrap module can now preserve existing whitespace at the  beginnings and ends of the newlycreated lines by specifying  dropwhitespacefalse as an argument      s  this  sentence  has a bunch   of     
       contributed by dwayne bailey bpo1581073
 the threading module api is being changed to use properties such  as daemon instead of setdaemon and isdaemon methods and  some methods have been renamed to use underscores instead of camel  case for example the activecount method is renamed to  activecount
extractall  contributed by alan mcintyre bpo467924
  the open read and extract methods can now take either a  filename or a zipinfo object
the ast module
the futurebuiltins module
the json module javascript object notation
the plistlib module a propertylist parser
ctypes enhancements
improved ssl support
see also the documentation for the ssl module
deprecations and removals
 the gopherlib module has been removed
 the rgbimg module has been removed
build and c api changes
portspecific changes windows
portspecific changes mac os x
 when compiling a framework build of python you can now specify the  framework name to be used by providing the withframeworkname  option to the configure script
 the macfs module has been removed
  this in turn required the  macostools
touched function to be removed because it depended on  the macfs module
  bpo1490190 many other mac os modules have been deprecated and will be removed  in python 3
0 builtinsuites aepack aetools aetypes  applesingle appletrawmain appletrunner argvemulator  audiomac autogil carbon cfmfile codewarrior  colorpicker easydialogs explorer finder framework  findertools ic icglue icopen macerrors macos  macfs macostools macresource miniaeframe nav  netscape osaterminology pimp pixmapwrapper stdsuites  systemevents terminal and terminalcommand
portspecific changes irix
a number of old irixspecific modules were deprecated and will beremoved in python 3
0 al and al cd cddb cdplayer cland cl device errno file fl and fl flp fmget glws gl and gl in ioctl jpeg panelparserreadcd sv and sv torgb videoreader and wait
porting to python
acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle georg brandl steve brown nick coghlan ralph corderoy jimjewett kent johnson chris lambacher  martin michlmayr antoinepitrou brian warner
whats new in python
editor   raymond hettingerthis article explains the new features in python 3
8 compared to 3
7
for full details see the changelog
summary  release highlights
new features
assignment expressions
there is new syntax  that assigns values to variables as part of alarger expression
 it is affectionately known as the walrus operatordue to its resemblance to the eyes and tusks of a walrus
in this example the assignment expression helps avoid calling lentwice   if n  lena  10       printflist is too long n elements expected  10a similar benefit arises during regular expression matching wherematch objects are needed twice once to test whether a match occurredand another to extract a subgroup   discount  0
0the operator is also useful with whileloops that compute a value totest loop termination and then need that same value again in the bodyof the loop    loop over fixed length blocks   while block  f
read256         processblockanother motivating use case arises in list comprehensions where avalue computed in a filtering condition is also needed in theexpression body   cleanname
title for name in names    if cleanname  normalizenfc name in allowednamestry to limit use of the walrus operator to clean cases that reducecomplexity and improve readability
see pep 572 for a full description
contributed by emily morehouse in bpo35224

positionalonly parameters
there is a new function parameter syntax  to indicate that somefunction parameters must be specified positionally and cannot be usedas keyword arguments
  this is the same notation shown by help forc functions annotated with larry hastings argument clinic tool
in the following example parameters a and b are positionalonlywhile c or d can be positional or keyword and e or f arerequired to be keywords   def fa b  c d  e f       printa b c d e fthe following is a valid call   f10 20 30 d40 e50 f60however these are invalid calls   f10 b20 c30 d40 e50 f60    b cannot be a keyword argument   f10 20 30 40 50 f60            e must be a keyword argumentone use case for this notation is that it allows pure python functionsto fully emulate behaviors of existing c coded functions
  forexample the builtin divmod function does not accept keywordarguments   def divmoda b        emulate the built in divmod function       return a  b a  banother use case is to preclude keyword arguments when the parametername is not helpful
  for example the builtin len function hasthe signature lenobj 
  this precludes awkward calls such as   lenobjhello   the obj keyword argument impairs readabilitya further benefit of marking a parameter as positionalonly is that itallows the parameter name to be changed in the future without risk ofbreaking client code
  for example in the statistics module theparameter name dist may be changed in the future
  this was madepossible with the following function specification   def quantilesdist   n4 methodexclusive       
since the parameters to the left of  are not exposed as possiblekeywords the parameters names remain available for use in kwargs    def fa b  kwargs   
    f10 20 a1 b2 c3          a and b are used in two ways   10 20 a 1 b 2 c 3this greatly simplifies the implementation of functions and methodsthat need to accept arbitrary keyword arguments
  for example here isan excerpt from code in the collections module   class counterdict       def initself iterablenone  kwds            note iterable is a possible keyword argumentsee pep 570 for a full description
contributed by pablo galindo in bpo36540

parallel filesystem cache for compiled bytecode files
the new pythonpycacheprefix setting also available as xpycacheprefix configures the implicit bytecode cache to use aseparate parallel filesystem tree rather than the defaultpycache subdirectories within each source directory
the location of the cache is reported in sys
pycacheprefix noneindicates the default location in pycache subdirectories
contributed by carl meyer in bpo33499

debug build uses the same abi as release build
python now uses the same abi whether its built in release or debugmode
 on unix when python is built in debug mode it is now possibleto load c extensions built in release mode and c extensions builtusing the stable abi
release builds and debug builds are now abi compatible defining thepydebug macro no longer implies the pytracerefs macro whichintroduces the only abi incompatibility
 the pytracerefs macrowhich adds the sys
getobjects function and the pythondumprefsenvironment variable can be set using the new 
configure withtracerefs build option
 contributed by victor stinner inbpo36465
on unix c extensions are no longer linked to libpython except onandroid and cygwin
 it is now possible for a statically linked pythonto load a c extension built using a shared library python
contributed by victor stinner in bpo21536
on unix when python is built in debug mode import now also looks forc extensions compiled in release mode and for c extensions compiledwith the stable abi
 contributed by victor stinner in bpo36722
to embed python into an application a new embed option must bepassed to python3config libs embed to get lpython3
8 linkthe application to libpython
 to support both 3
8 and older trypython3config libs embed first and fallback to python3configlibs without embed if the previous command fails
add a pkgconfig python3
8embed module to embed python into anapplication pkgconfig python3
8embed libs includeslpython3
 to support both 3
8 and older try pkgconfigpythonx
yembed libs first and fallback to pkgconfig pythonx
ylibs without embed if the previous command fails replacex
y with the python version
on the other hand pkgconfig python3
8 libs no longer containslpython3
 c extensions must not be linked to libpython except onandroid and cygwin whose cases are handled by the script thischange is backward incompatible on purpose
 contributed by victorstinner in bpo36721

fstrings support  for selfdocumenting expressions and debugging
added an  specifier to fstrings
 an fstring such asfexpr will expand to the text of the expression an equal signthen the representation of the evaluated expression
  for example user  ericidle membersince  date1975 7 31 fuser membersinceuserericidle membersincedatetime
date1975 7 31the usual fstring format specifiers allow more control over how theresult of the expression is displayed    delta  date
days16075the  specifier will display the whole expression so thatcalculations can be shown    printftheta  cosradianstheta
866contributed by eric v
 smith and larry hastings in bpo36817

pep 578 python runtime audit hooks
pep 587 python initialization configuration
the pep 587 adds a new c api to configure the pythoninitialization providing finer control on the whole configuration andbetter error reporting
new structures pyconfig pypreconfig pystatus pywidestringlistnew functions pyconfigclear pyconfiginitisolatedconfig pyconfiginitpythonconfig pyconfigread pyconfigsetargv pyconfigsetbytesargv pyconfigsetbytesstring pyconfigsetstring pypreconfiginitisolatedconfig pypreconfiginitpythonconfig pystatuserror pystatusexception pystatusexit pystatusiserror pystatusisexit pystatusnomemory pystatusok pywidestringlistappend pywidestringlistinsert pybytesmain pyexitstatusexception pyinitializefromconfig pypreinitialize pypreinitializefromargs pypreinitializefrombytesargs pyrunmainthis pep also adds pyruntimestate
preconfig pypreconfig typeand pyinterpreterstate
config pyconfig type fields to theseinternal structures
config becomes the newreference configuration replacing global configuration variables andother private variables
see python initialization configuration for the documentation
see pep 587 for a full description
contributed by victor stinner in bpo36763

pep 590 vectorcall a fast calling protocol for cpython
pickle protocol 5 with outofband data buffers
when pickle is used to transfer large data between python processesin order to take advantage of multicore or multimachine processingit is important to optimize the transfer by reducing memory copiesand possibly by applying custom techniques such as datadependentcompression
the pickle protocol 5 introduces support for outofband bufferswhere pep 3118compatible data can be transmitted separately fromthe main pickle stream at the discretion of the communication layer
see pep 574 for a full description
contributed by antoine pitrou in bpo36785

other language changes
 a continue statement was illegal in the finally clause due to a  problem with the implementation
  in python 3
8 this restriction was  lifted
 contributed by serhiy storchaka in bpo32489
 the bool int and fractions
fraction types now have an  asintegerratio method like that found in float and  decimal
decimal
  this minor api extension makes it possible to  write numerator denominator  x
asintegerratio and have it  work across multiple numeric types
 contributed by lisa roach in  bpo33073 and raymond hettinger in bpo37819
 constructors of int float and complex will now use the  index special method if available and the corresponding  method int float or complex is not  available
 contributed by serhiy storchaka in bpo20092
 added support of nname escapes in regular expressions      notice  copyright © 2019      copyrightyearpattern  re
group1     2019  contributed by jonathan eunice and serhiy storchaka in bpo30688
 dict and dictviews are now iterable in reversed insertion order  using reversed
 contributed by rémi lapeyre in bpo33462
 the syntax allowed for keyword names in function calls was further  restricted
 in particular fkeywordarg is no longer allowed
  it was never intended to permit more than a bare name on the left  hand side of a keyword argument assignment term
 contributed by  benjamin peterson in bpo34641
 generalized iterable unpacking in yield and return statements no  longer requires enclosing parentheses
 this brings the yield and  return syntax into better agreement with normal assignment syntax      def parsefamily             lastname members  family
upper members      parsesimpsons homer marge bart lisa maggie     simpsons homer marge bart lisa maggie  contributed by david cuthbert and jordan chapman in bpo32117
 when a comma is missed in code such as 10 20 30 40 the  compiler displays a syntaxwarning with a helpful suggestion
 this  improves on just having a typeerror indicating that the first  tuple was not callable
  contributed by serhiy storchaka in  bpo15248
 arithmetic operations between subclasses of datetime
date or  datetime
datetime and datetime
timedelta objects now return an  instance of the subclass rather than the base class
 this also  affects the return type of operations whose implementation directly  or indirectly uses datetime
timedelta arithmetic such as  astimezone
 contributed by paul ganssle in bpo32417
 when the python interpreter is interrupted by ctrlc sigint and  the resulting keyboardinterrupt exception is not caught the  python process now exits via a sigint signal or with the correct  exit code such that the calling process can detect that it died due  to a ctrlc
  shells on posix and windows use this to properly  terminate scripts in interactive sessions
 contributed by google  via gregory p
 smith in bpo1054041
 some advanced styles of programming require updating the  types
codetype object for an existing function
  since code  objects are immutable a new code object needs to be created one  that is modeled on the existing code object
  with 19 parameters  this was somewhat tedious
  now the new replace method makes it  possible to create a clone with a few altered parameters
  heres an example that alters the statistics
mean function to  prevent the data parameter from being used as a keyword argument      from statistics import mean      meandata10 20 90     40      mean
     typeerror mean got some positionalonly arguments passed as keyword arguments data  contributed by victor stinner in bpo37032
 for integers the threeargument form of the pow function now  permits the exponent to be negative in the case where the base is  relatively prime to the modulus
 it then computes a modular inverse  to the base when the exponent is 1 and a suitable power of that  inverse for other negative exponents
  for example to compute the  modular multiplicative inverse of 38 modulo 137 write      pow38 1 137     119      119  38  137     1  modular inverses arise in the solution of linear diophantine  equations
 for example to find integer solutions for 4258𝑥  147𝑦   369 first rewrite as 4258𝑥 ≡ 369 mod 147 then solve   x  369  pow4258 1 147  147   y  4258  x  369  147   4258  x  147  y  369  contributed by mark dickinson in bpo36027
 dict comprehensions have been syncedup with dict literals so that  the key is computed first and the value second       dict comprehension      cast  inputrole  inputactor  for i in range2     role king arthur     actor chapman     role black knight     actor cleese       dict literal      cast  inputrole  inputactor      role sir robin     actor eric idle  the guaranteed execution order is helpful with assignment  expressions because variables assigned in the key expression will be  available in the value expression      names  martin von löwis łukasz langa walter dörwald      n  normalizenfc name
casefold  n for name in names     martin von löwis martin von löwis      łukasz langa łukasz langa      walter dörwald walter dörwald  contributed by jörn heissler in bpo35224
 the object
reduce method can now return a tuple from two to  six elements long
 formerly five was the limit
  the new optional  sixth element is a callable with a obj state signature
  this  allows the direct control over the stateupdating behavior of a  specific object
  if not none this callable will have priority  over the objects setstate method
 contributed by pierre  glaser and olivier grisel in bpo35900

new modules
improved modules
ast
ast nodes now have endlineno and endcoloffset attributes whichgive the precise location of the end of the node
  this only appliesto nodes that have lineno and coloffset attributes
new function ast
getsourcesegment returns the source code for aspecific ast node
contributed by ivan levkivskyi in bpo33416
the ast
parse function has some new flags typecommentstrue causes it to return the text of pep 484 and  pep 526 type comments associated with certain ast nodes modefunctype can be used to parse pep 484 signature type  comments returned for function definition ast nodes featureversion3 n allows specifying an earlier python 3  version
  for example featureversion3 4 will treat async  and await as nonreserved words
contributed by guido van rossum in bpo35766

asyncio
run has graduated from the provisional to stable api
 thisfunction can be used to execute a coroutine and return the resultwhile automatically managing the event loop
 for example   import asyncio   async def main       await asyncio
runmainthis is roughly equivalent to   import asyncio   async def main       await asyncio
closethe actual implementation is significantly more complex
 thusasyncio
run should be the preferred way of running asyncioprograms
contributed by yury selivanov in bpo32314
running python m asyncio launches a natively async repl
  thisallows rapid experimentation with code that has a toplevel await
there is no longer a need to directly call asyncio
run which wouldspawn a new event loop on every invocation    python m asyncio   asyncio repl 3
sleep10 resulthello   hellocontributed by yury selivanov in bpo37028
the exception asyncio
cancellederror now inherits frombaseexception rather than exception and no longer inherits fromconcurrent
 contributed by yury selivanov inbpo32528
on windows the default event loop is now proactoreventloop
contributed by victor stinner in bpo34687
proactoreventloop now also supports udp
 contributed by adam meilyand andrew svetlov in bpo29883
proactoreventloop can now be interrupted by keyboardinterruptctrlc
 contributed by vladimir matveev in bpo23057
added asyncio
getcoro for getting the wrapped coroutinewithin an asyncio
task
 contributed by alex grönholm in bpo36999
asyncio tasks can now be named either by passing the name keywordargument to asyncio
createtask or the createtask event loopmethod or by calling the setname method on the task object
 thetask name is visible in the repr output of asyncio
task and canalso be retrieved using the getname method
 contributed by alexgrönholm in bpo34270
added support for happy eyeballs toasyncio
 to specify the behavior two newparameters have been added happyeyeballsdelay and interleave
the happy eyeballs algorithm improves responsiveness in applicationsthat support ipv4 and ipv6 by attempting to simultaneously connectusing both
 contributed by twisteroid ambassador in bpo33530

builtins
collections
the asdict method for collections
namedtuple now returns adict instead of a collections
 this works becauseregular dicts have guaranteed ordering since python 3
7
 if the extrafeatures of ordereddict are required the suggested remediation isto cast the result to the desired type ordereddictnt
contributed by raymond hettinger in bpo35864

cprofile
the cprofile
profile class can now be used as a context manager
profile a block of code by running   import cprofile   with cprofile
contributed by scott sanderson in bpo29235

csv
the csv
dictreader now returns instances of dict instead of acollections
  the tool is now faster and uses lessmemory while still preserving the field order
 contributed by michaelselik in bpo34003

curses
added a new variable holding structured version information for theunderlying ncurses library ncursesversion
 contributed by serhiystorchaka in bpo31680

ctypes
on windows cdll and subclasses now accept a winmode parameter tospecify flags for the underlying loadlibraryex call
 the defaultflags are set to only load dll dependencies from trusted locationsincluding the path where the dll is stored if a full or partial pathis used to load the initial dll and paths added byadddlldirectory
 contributed by steve dower in bpo36085

datetime
added new alternate constructors datetime
fromisocalendar anddatetime
fromisocalendar which construct date anddatetime objects respectively from iso year week number andweekday these are the inverse of each classs isocalendar method
contributed by paul ganssle in bpo36004

functools
lrucache can now be used as a straight decorator ratherthan as a function returning a decorator
  so both of these are nowsupported   lrucache   def fx       
contributed by raymond hettinger in bpo36772
added a new functools
cachedproperty decorator for computedproperties cached for the life of the instance
datacontributed by carl meyer in bpo21145added a new functools
singledispatchmethod decorator that convertsmethods into generic functions using single dispatch   from functools import singledispatchmethod   from contextlib import suppress   class taskmanager       def initself tasks           self
tasks if x not in targetscontributed by ethan smith in bpo32380
gc
getobjects can now receive an optional generation parameterindicating a generation to get objects from
 contributed by pablogalindo in bpo36016

gettext
added pgettext and its variants
 contributed by franz glasneréric araujo and cheryl sabella in bpo2504

gzip
added the mtime parameter to gzip
compress for reproducibleoutput
 contributed by guo ci teo in bpo34898
a badgzipfile exception is now raised instead of oserror forcertain types of invalid or corrupt gzip files
 contributed by filipgruszczyński michele orrù and zackery spytz in bpo6584

idle and idlelib
output over n lines 50 by default is squeezed down to a button
 ncan be changed in the pyshell section of the general page of thesettings dialog
  fewer but possibly extra long lines can besqueezed by right clicking on the output
  squeezed output can beexpanded in place by doubleclicking the button or into the clipboardor a separate window by rightclicking the button
  contributed bytal einat in bpo1529353
add run customized to the run menu to run a module with customizedsettings
 any command line arguments entered are added to sys
they also reappear in the box for the next customized run
  one canalso suppress the normal shell main module restart
  contributed bycheryl sabella terry jan reedy and others in bpo5680 andbpo37627
added optional line numbers for idle editor windows
 windows openwithout line numbers unless set otherwise in the general tab of theconfiguration dialog
  line numbers for an existing window are shownand hidden in the options menu
 contributed by tal einat andsaimadhav heblikar in bpo17535
os native encoding is now used for converting between python stringsand tcl objects
 this allows idle to work with emoji and other nonbmpcharacters
 these characters can be displayed or copied and pasted toor from the clipboard
  converting strings from tcl to python and backnow never fails
 many people worked on this for eight years but theproblem was finally solved by serhiy storchaka in bpo13153
new in 3
1add option to toggle cursor blink off
  contributed by zackery spytzin bpo4603
escape key now closes idle completion windows
  contributed by johnnynajera in bpo38944
the changes above have been backported to 3
7 maintenance releases
add keywords to module name completion list
  contributed by terry j
reedy in bpo37765

inspect
the inspect
getdoc function can now find docstrings forslots if that attribute is a dict where the values aredocstrings
 this provides documentation options similar to what wealready have for property classmethod and staticmethod   class audioclip       slots  bitrate expressed in kilohertz to one decimal place                    duration in seconds rounded up to an integer       def initself bitrate duration           self
duration  ceildurationcontributed by raymond hettinger in bpo36326

io
in development mode x env and in debug build the io
iobasefinalizer now logs the exception if the close method fails
 theexception is ignored silently by default in release build
contributed by victor stinner in bpo18748

itertools
the itertools
accumulate function added an option initialkeyword argument to specify an initial value    from itertools import accumulate    listaccumulate10 5 30 15 initial1000   1000 1010 1015 1045 1060contributed by lisa roach in bpo34659

jsontool
add option jsonlines to parse every input line as a separate jsonobject
 contributed by weipeng hong in bpo31553

logging
added a force keyword argument to logging
basicconfig when setto true any existing handlers attached to the root logger are removedand closed before carrying out the configuration specified by theother arguments
this solves a longstanding problem
  once a logger or basicconfighad been called subsequent calls to basicconfig were silentlyignored
 this made it difficult to update experiment with or teachthe various logging configuration options using the interactive promptor a jupyter notebook
suggested by raymond hettinger implemented by donghee na andreviewed by vinay sajip in bpo33897

math
added new function math
dist for computing euclidean distancebetween two points
  contributed by raymond hettinger in bpo33089
expanded the math
hypot function to handle multiple dimensions
formerly it only supported the 2d case
 contributed by raymondhettinger in bpo33089
added new function math
prod as analogous function to sumthat returns the product of a start value default 1 times aniterable of numbers    prior  0
126contributed by pablo galindo in bpo35606
added two new combinatoric functions math
perm and math
comb10 3     combinations of 10 things taken 3 at a time   120contributed by yash aggarwal keller fuchs serhiy storchaka andraymond hettinger in bpo37128 bpo37178 and bpo35431
added a new function math
isqrt for computing accurate integersquare roots without conversion to floating point
  the new functionsupports arbitrarily large integers
  it is faster thanfloorsqrtn but slower than math
sqrt    r  650320427    s  r  2    isqrts  1          correct   650320426    floorsqrts  1    incorrect   650320427contributed by mark dickinson in bpo36887
the function math
factorial no longer accepts arguments that arenot intlike
 contributed by pablo galindo in bpo33083

mmap
the mmap
mmap class now has an madvise method to access themadvise system call
 contributed by zackery spytz in bpo32941

multiprocessing
added new multiprocessing
sharedmemory module
 contributed bydavin potts in bpo35813
on macos the spawn start method is now used by default
contributed by victor stinner in bpo33725

os
added new function adddlldirectory on windows for providingadditional search paths for native dependencies when importingextension modules or loading dlls using ctypes
 contributed bysteve dower in bpo36085
a new os
memfdcreate function was added to wrap thememfdcreate syscall
 contributed by zackery spytz and christianheimes in bpo26836
on windows much of the manual logic for handling reparse pointsincluding symlinks and directory junctions has been delegated to theoperating system
 specifically os
stat will now traverse anythingsupported by the operating system while os
lstat will only openreparse points that identify as name surrogates while others areopened as for os
stat
 in all cases statresult
stmode willonly have siflnk set for symbolic links and not other kinds ofreparse points
 to identify other kinds of reparse point check thenew statresult
streparsetag attribute
on windows os
readlink is now able to read directory junctions
note that islink will return false for directory junctions andso code that checks islink first will continue to treat junctions asdirectories while code that handles errors from os
readlink maynow treat junctions as links
contributed by steve dower in bpo37834

ospath
os
path functions that return a boolean result like existslexists isdir isfile islink and ismount nowreturn false instead of raising valueerror or its subclassesunicodeencodeerror and unicodedecodeerror for paths that containcharacters or bytes unrepresentable at the os level
 contributed byserhiy storchaka in bpo33721
expanduser on windows now prefers the userprofile environmentvariable and does not use home which is not normally set forregular user accounts
 contributed by anthony sottile in bpo36264
isdir on windows no longer returns true for a link to a nonexistent directory
realpath on windows now resolves reparse points includingsymlinks and directory junctions
contributed by steve dower in bpo37834

pathlib
pickle
pickle extensions subclassing the coptimized pickler can nowoverride the pickling logic of functions and classes by defining thespecial reduceroverride method
 contributed by pierre glaser andolivier grisel in bpo35900

plistlib
added new plistlib
uid and enabled support for reading and writingnskeyedarchiverencoded binary plists
 contributed by jon janzen inbpo26707

pprint
the pprint module added a sortdicts parameter to severalfunctions
 by default those functions continue to sort dictionariesbefore rendering or printing
  however if sortdicts is set tofalse the dictionaries retain the order that keys were inserted
this can be useful for comparison to json inputs during debugging
in addition there is a convenience new function pprint
pp thatis like pprint
pprint but with sortdicts defaulting to false    from pprint import pprint pp    d  dictsourceinput
txtcontributed by rémi lapeyre in bpo30670

pycompile
compile now supports silent mode
 contributed byjoannah nanjekye in bpo22640

shlex
the new shlex
join function acts as the inverse ofshlex
split
 contributed by bo bayles in bpo32102

shutil
copytree now accepts a new dirsexistok keywordargument
 contributed by josh bronson in bpo20849
shutil
makearchive now defaults to the modern pax posix
12001format for new archives to improve portability and standardsconformance inherited from the corresponding change to the tarfilemodule
 contributed by c
 gerlach in bpo30661
shutil
rmtree on windows now removes directory junctions withoutrecursively removing their contents first
 contributed by steve dowerin bpo37834

socket
added createserver and hasdualstackipv6 conveniencefunctions to automate the necessary tasks usually involved whencreating a server socket including accepting both ipv4 and ipv6connections on the same socket
  contributed by giampaolo rodolà inbpo17561
the socket
ifnametoindex andsocket
ifindextoname functions have been implemented on windows
contributed by zackery spytz in bpo37007

ssl
added posthandshakeauth to enable andverifyclientposthandshake to initiate tls 1
3 posthandshakeauthentication
 contributed by christian heimes in bpo34670

statistics
sys
add new sys
unraisablehook function which can be overridden tocontrol how unraisable exceptions are handled
 it is called when anexception has occurred but there is no way for python to handle it
for example when a destructor raises an exception or during garbagecollection gc
collect
 contributed by victor stinner inbpo36829

tarfile
the tarfile module now defaults to the modern pax posix
12001format for new archives instead of the previous gnuspecific one
this improves crossplatform portability with a consistent encodingutf8 in a standardized and extensible format and offers severalother benefits
 contributed by c
 gerlach in bpo36268

threading
add a new threading
excepthook function which handles uncaughtthreading
run exception
 it can be overridden to controlhow uncaught threading
run exceptions are handled
contributed by victor stinner in bpo1230540
add a new threading
getnativeid function and a nativeidattribute to the threading
thread class
 these return the nativeintegral thread id of the current thread assigned by the kernel
 thisfeature is only available on certain platforms see getnativeidfor more information
 contributed by jake tesler in bpo36084

tokenize
the tokenize module now implicitly emits a newline token whenprovided with input that does not have a trailing new line
  thisbehavior now matches what the c tokenizer does internally
contributed by ammar askar in bpo33899

tkinter
added methods selectionfrom selectionpresentselectionrange and selectionto in the tkinter
spinboxclass
 contributed by juliette monsel in bpo34829
added method moveto in the tkinter
canvas class
 contributed byjuliette monsel in bpo23831
the tkinter
photoimage class now has transparencyget andtransparencyset methods
  contributed by zackery spytz inbpo25451

time
added new clock clockuptimeraw for macos 10
12
 contributed byjoannah nanjekye in bpo35702

typing
the typing module incorporates several new features a dictionary type with perkey types
  see pep 589 and  typing
 typeddict uses only string keys
  by default  every key is required to be present
 specify totalfalse to allow  keys to be optional     class locationtypeddict totalfalse         latlong tuple         gridsquare str         xycoordinate tuple literal types
  see pep 586 and typing
 literal types  indicate that a parameter or return value is constrained to one or  more specific literal values     def getstatusport int  literalconnected disconnected         
 final variables functions methods and classes
  see pep 591  typing
final and typing
 the final qualifier instructs a  static type checker to restrict subclassing overriding or  reassignment     pi finalfloat  3
1415926536 protocol definitions
  see pep 544 typing
protocol and  typing
  simple abcs like typing
supportsint  are now protocol subclasses
 new protocol class typing
 new functions typing
getorigin and typing
unicodedata
unittest
added asyncmock to support an asynchronous version of mock
appropriate new assert functions for testing have been added as well
contributed by lisa roach in bpo26467
added addmodulecleanup and addclasscleanup to unittest tosupport cleanups for setupmodule and setupclass
 contributedby lisa roach in bpo24412
several mock assert functions now also print a list of actual callsupon failure
 contributed by petter strandmark in bpo35047
unittest module gained support for coroutines to be used as testcases with unittest
isolatedasynciotestcase
 contributed by andrewsvetlov in bpo32972
example   import unittest   class testrequestunittest
venv
venv now includes an activate
ps1 script on all platforms foractivating virtual environments under powershell core 6
1
contributed by brett cannon in bpo32718

weakref
the proxy objects returned by weakref
proxy now support the matrixmultiplication operators  and  in addition to the other numericoperators
 contributed by mark dickinson in bpo36669

xml
as mitigation against dtd and external entity retrieval thexml
minidom and xml
sax modules no longer process externalentities by default
 contributed by christian heimes in bpo17239
the 
find methods in the xml
etree
elementtree module supportwildcard searches like tag which ignores the namespace andnamespace which returns all tags in the given namespace
contributed by stefan behnel in bpo28238
the xml
elementtree module provides a new function–xml
etree
elementtree
canonicalize that implements c14n 2
0
contributed by stefan behnel in bpo13611
the target object of xml
xmlparser can receivenamespace declaration events through the new callback methodsstartns and endns
  additionally thexml
treebuilder target can be configured toprocess events about comments and processing instructions to includethem in the generated tree
 contributed by stefan behnel in bpo36676and bpo36673

xmlrpc
serverproxy now supports an optional headers keywordargument for a sequence of http headers to be sent with each request
among other things this makes it possible to upgrade from defaultbasic authentication to faster session authentication
 contributed bycédric krier in bpo35153

optimizations
build and c api changes
 default sys
abiflags became an empty string the m flag for  pymalloc became useless builds with and without pymalloc are abi  compatible and so has been removed
 contributed by victor stinner  in bpo36707
  example of changes   only python3
8 program is installed python3
8m program is    gone
   only python3
8config script is installed python3
8mconfig    script is gone
   the m flag has been removed from the suffix of dynamic library    filenames extension modules in the standard library as well as    those produced and installed by thirdparty packages like those    downloaded from pypi
 on linux for example the python 3
7 suffix    
so became 
cpython38x8664    linuxgnu
so in python 3
8
 the header files have been reorganized to better separate the  different kinds of apis   include
h should be the portable public stable c api
h should be the unstable c api specific to    cpython public api with some private api prefixed by py or    py
h is the private internal c api very specific    to cpython
 this api comes with no backward compatibility warranty    and should not be used outside cpython
 it is only exposed for    very specific needs like debuggers and profiles which has to    access to cpython internals without calling functions
 this api is    now installed by make install
  contributed by victor stinner in bpo35134 and bpo35081 work  initiated by eric snow in python 3
7
 some macros have been converted to static inline functions  parameter types and return type are well defined they dont have  issues specific to macros variables have a local scopes
 examples   pyincref pydecref   pyxincref pyxdecref   pyobjectinit pyobjectinitvar   private functions pyobjectgctrack    pyobjectgcuntrack pydealloc  contributed by victor stinner in bpo35059
 the pybytearrayinit and pybytearrayfini functions have  been removed
 they did nothing since python 2
4 and python 3
0  were excluded from the limited api stable abi and were not  documented
 contributed by victor stinner in bpo35713
 the result of pyexceptionclassname is now of type const char   rather of char 
 contributed by serhiy storchaka in  bpo33818
 the duality of modulessetup
dist and modulessetup has been  removed
  previously when updating the cpython source tree one had  to manually copy modulessetup
dist inside the source tree to  modulessetup inside the build tree in order to reflect any  changes upstream
  this was of a small benefit to packagers at the  expense of a frequent annoyance to developers following cpython  development as forgetting to copy the file could produce build  failures
  now the build system always reads from modulessetup inside the  source tree
  people who want to customize that file are encouraged  to maintain their changes in a git fork of cpython or as patch  files as they would do for any other change to the source tree
  contributed by antoine pitrou in bpo32430
 functions that convert python number to c integer like  pylongaslong and argument parsing functions like  pyargparsetuple with integer converting format units like i  will now use the index special method instead of  int if available
  the deprecation warning will be emitted  for objects with the int method but without the  index method like decimal and fraction
  pynumbercheck will now return 1 for objects implementing  index
 pynumberlong pynumberfloat and  pyfloatasdouble also now use the index method if  available
 contributed by serhiy storchaka in bpo36048 and  bpo20092
 heapallocated type objects will now increase their reference count  in pyobjectinit and its parallel macro pyobjectinit  instead of in pytypegenericalloc
 types that modify instance  allocation or deallocation may need to be adjusted
 contributed by  eddie elizondo in bpo35810
 the new function pycodenewwithposonlyargs allows to create code  objects like pycodenew but with an extra posonlyargcount  parameter for indicating the number of positionalonly arguments
  contributed by pablo galindo in bpo37221
 pysetpath now sets sys
executable to the program full path  pygetprogramfullpath rather than to the program name  pygetprogramname
 contributed by victor stinner in  bpo38234

deprecated
api and feature removals
porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
changes in python behavior
changes in the python api
 the os
getcwdb function now uses the utf8 encoding on windows  rather than the ansi code page see pep 529 for the rationale
  the function is no longer deprecated on windows
 contributed by  victor stinner in bpo37412
 subprocess
popen can now use os
posixspawn in some cases for  better performance
 on windows subsystem for linux and qemu user  emulation the popen constructor using os
posixspawn no  longer raises an exception on errors like missing program
  instead the child process fails with a nonzero returncode
  contributed by joannah nanjekye and victor stinner in bpo35537
 the preexecfn argument of  subprocess
 the imap
logout method no longer silently ignores  arbitrary exceptions
 contributed by victor stinner in bpo36348
 the function platform
popen has been removed after having been  deprecated since python 3
3 use os
popen instead
 contributed  by victor stinner in bpo35345
 the statistics
mode function no longer raises an exception when  given multimodal data
  instead it returns the first mode  encountered in the input data
  contributed by raymond hettinger in  bpo35892
 the selection method of the tkinter
treeview class no  longer takes arguments
  using it with arguments for changing the  selection was deprecated in python 3
6
  use specialized methods  like selectionset for changing the selection
  contributed by  serhiy storchaka in bpo31508
 the writexml toxml and toprettyxml methods of  xml
minidom and the write method of xml
etree now  preserve the attribute order specified by the user
 contributed by  diego rojas and raymond hettinger in bpo34160
 a dbm
dumb database opened with flags r is now readonly
  dbm
open with flags r and w no longer creates a  database if it does not exist
 contributed by serhiy storchaka in  bpo32749
 the doctype method defined in a subclass of xmlparser will no  longer be called and will emit a runtimewarning instead of a  deprecationwarning
 define the doctype method on a target for  handling an xml doctype declaration
 contributed by serhiy  storchaka in bpo29209
 a runtimeerror is now raised when the custom metaclass doesnt  provide the classcell entry in the namespace passed to  type
new
  a deprecationwarning was emitted in python 3
6  3
7
  contributed by serhiy storchaka in bpo23722
 the cprofile
profile class can now be used as a context manager
  contributed by scott sanderson in bpo29235
 shutil
copytree and shutil
move use platformspecific fast  copy syscalls see platformdependent efficient copy operations  section
copyfile default buffer size on windows was changed from  16 kib to 1 mib
 the pygchead struct has changed completely
  all code that  touched the struct member should be rewritten
  see bpo33597
 the pyinterpreterstate struct has been moved into the internal  header files specifically includeinternalpycorepystate
h
  an  opaque pyinterpreterstate is still available as part of the public  api and stable abi
  the docs indicate that none of the structs  fields are public so we hope no one has been using them
  however  if you do rely on one or more of those private fields and have no  alternative then please open a bpo issue
  well work on helping you  adjust possibly including adding accessor functions to the public  api
  see bpo35886
 the mmap
flush method now returns none on success and raises  an exception on error under all platforms
  previously its behavior  was platformdependent a nonzero value was returned on success  zero was returned on error under windows
  a zero value was returned  on success an exception was raised on error under unix
  contributed by berker peksag in bpo2122
 xml
minidom and xml
sax modules no longer process external  entities by default
 contributed by christian heimes in bpo17239
 deleting a key from a readonly dbm database dbm
dumb  dbm
gnu or dbm
ndbm raises error dbm
error  dbm
error or dbm
error instead of keyerror
  contributed by xiang zhang in bpo33106
 simplified ast for literals
  all constants will be represented as  ast
constant instances
  instantiating old classes num str  bytes nameconstant and ellipsis will return an instance of  constant
 contributed by serhiy storchaka in bpo32892
 expanduser on windows now prefers the userprofile environment  variable and does not use home which is not normally set for  regular user accounts
 contributed by anthony sottile in  bpo36264
 the exception asyncio
cancellederror now inherits from  baseexception rather than exception and no longer inherits from  concurrent
 contributed by yury selivanov  in bpo32528
 the function asyncio
waitfor now correctly waits for  cancellation when using an instance of asyncio
task
 previously  upon reaching timeout it was cancelled and immediately returned
  contributed by elvis pranskevichus in bpo32751
 the function asyncio
getextrainfo now returns a  safe to use socket object when socket is passed to the name  parameter
 contributed by yury selivanov in bpo37027
 asyncio
bufferedprotocol has graduated to the stable api
 dll dependencies for extension modules and dlls loaded with ctypes  on windows are now resolved more securely
 only the system paths  the directory containing the dll or pyd file and directories added  with adddlldirectory are searched for loadtime dependencies
  specifically path and the current working directory are no longer  used and modifications to these will no longer have any effect on  normal dll resolution
 if your application relies on these  mechanisms you should check for adddlldirectory and if it  exists use it to add your dlls directory while loading your  library
 note that windows 7 users will need to ensure that windows  update kb2533623 has been installed this is also verified by the  installer
 contributed by steve dower in bpo36085
 the header files and functions related to pgen have been removed  after its replacement by a pure python implementation
 contributed  by pablo galindo in bpo36623
 types
codetype has a new parameter in the second position of the  constructor posonlyargcount to support positionalonly arguments  defined in pep 570
 the first argument argcount now  represents the total number of positional arguments including  positionalonly arguments
 the new replace method of  types
codetype can be used to make the code futureproof
changes in the c api
cpython bytecode changes
 the interpreter loop  has been simplified by moving the logic of  unrolling the stack of blocks into the compiler
  the compiler emits  now explicit instructions for adjusting the stack of values and  calling the cleaningup code for break continue and return
  removed opcodes breakloop continueloop setuploop and  setupexcept
  added new opcodes rotfour beginfinally  callfinally and popfinally
  changed the behavior of  endfinally and withcleanupstart
  contributed by mark shannon antoine pitrou and serhiy storchaka in  bpo17611
 added new opcode endasyncfor for handling exceptions raised when  awaiting a next item in an async for loop
 contributed by serhiy  storchaka in bpo33041
 the mapadd now expects the value as the first element in the  stack and the key as the second element
 this change was made so the  key is always evaluated before the value in dictionary  comprehensions as proposed by pep 572
 contributed by jörn  heissler in bpo35224

demos and tools
added a benchmark script for timing various ways to access variablestoolsscriptsvaraccessbenchmark
 contributed by raymondhettinger in bpo35884
heres a summary of performance improvements since python 3
3   python version                       3
3the benchmarks were measured on an intel® core™ i74960hq processorrunning the macos 64bit builds found at python
org
 the benchmarkscript displays timings in nanoseconds
notable changes in python
due to significant security concerns the reuseaddress parameter ofasyncio
createdatagramendpoint is no longer supported
 thisis because of the behavior of the socket option soreuseaddr in udp
for more details see the documentation forloop
createdatagramendpoint
 contributed by kyle stanleyantoine pitrou and yury selivanov in bpo37228

whats new in python
author   r
see also pep 429  python 3
4 release schedule
summary  release highlights
new syntax features no new syntax features were added in python 3
other new features pip should always be available pep 453
new library modules asyncio new provisional api for asynchronous io pep 3156
 the ipaddress module api has been declared stablesecurity improvements secure and interchangeable hash algorithm pep 456
cpython implementation improvements safe object finalization pep 442
new features
pep 453 explicit bootstrapping of pip in python installations
note  to avoid conflicts between parallel python 2 and python 3  installations only the versioned pip3 and pip3
documentation changesas part of this change the installing python modules and distributingpython modules sections of the documentation have been completelyredesigned as short getting started and faq documents
 most packagingdocumentation has now been moved out to the python packaging authoritymaintained python packaging user guide and the documentation of theindividual projects
however as this migration is currently still incomplete the legacyversions of those guides remaining available as installing pythonmodules legacy version and distributing python modules legacyversion
see also  pep 453  explicit bootstrapping of pip in python installations     pep written by donald stufft and nick coghlan implemented by     donald stufft nick coghlan martin von löwis and ned deily
pep 446 newly created file descriptors are noninheritable
setinheritablesee also  pep 446  make newly created file descriptors noninheritable     pep written and implemented by victor stinner
improvements to codec handling
 this means that encodingbinary data to and from its hexadecimal representation for examplecan now be written as    from codecs import encode decode    encodebhello hex   b68656c6c6f    decodeb68656c6c6f hex   bhellothe binary and text transforms provided in the standard library aredetailed in binary transforms and text transforms
pep 451 a modulespec type for the import system
  see the deprecated section for a list ofmethods that should be replaced and their replacements
other language changes
some smaller changes made to the core python language are unicode database updated to ucd version 6
new modules
asyncio
see also  pep 3156  asynchronous io support rebooted the asyncio  module     pep written and implementation led by guido van rossum
ensurepip
enum
see also  pep 435  adding an enum type to the python standard library     pep written by barry warsaw eli bendersky and ethan furman     implemented by ethan furman
pathlib
see also  pep 428  the pathlib module  objectoriented filesystem  paths     pep written and implemented by antoine pitrou
selectors
statistics
see also  pep 450  adding a statistics module to the standard library     pep written and implemented by steven daprano
tracemalloc
 it provides the followinginformation trace where an object was allocated statistics on allocated memory blocks per filename and per line  number total size number and average size of allocated memory  blocks compute the differences between two snapshots to detect memory leakssee also  pep 454  add a new tracemalloc module to trace python memory  allocations     pep written and implemented by victor stinner
improved modules
abc
aifc
argparse
audioop
base
collections
colorsys
contextlib
dbm
dis
doctest
email
  for details see the contentmanagerdocumentation and the email examples
  these api additions completethe bulk of the work that was planned as part of the email6 project
the currently provisional api is scheduled to become final in python3
5 possibly with a few minor additions in the area of errorhandling
  contributed by r
filecmp
functools
see also  pep 443  singledispatch generic functions     pep written and implemented by łukasz langa
gc
glob
hashlib
hmac
html
http
idlelib and idle
importlib
inspect
ipaddress
logging
marshal
mmap
multiprocessing
operator
os
pdb
pickle
see also  pep 3154  pickle protocol 4     pep written by antoine pitrou and implemented by alexandre     vassalotti
plistlib
poplib
pprint
pty
pydoc
re
resource
select
shelve
shutil
smtpd
smtplib
socket
sqlite
ssl
stat
struct
subprocess
sunau
sys
tarfile
the tarfile module now supports a simple commandline interface whencalled as a script directly or via m
  this can be used to createand extract tarfile archives
  contributed by berker peksag inbpo13477
textwrap
threading
traceback
types
urllib
unittest
venv
wave
weakref
xmletree
  an example can be seen at pull api for nonblocking parsing
zipfile
cpython implementation changes
pep 445 customization of cpython memory allocators
see also  pep 445  add new apis to customize python memory allocators     pep written and implemented by victor stinner
pep 442 safe object finalization
see also  pep 442  safe object finalization     pep written and implemented by antoine pitrou
pep 456 secure and interchangeable hash algorithm
pep 436 argument clinic
note  the argument clinic pep is not fully up to date with the state of  the implementation
see also  pep 436  the argument clinic dsl     pep written and implemented by larry hastings
other build and c api changes
other improvements
significant optimizations
deprecated
deprecations in the python api
deprecated features
removed
operating systems no longer supported
support for the following operating systems has been removed from thesource and build tools os2 bpo16135
 windows 2000 changeset e52df05b496a
 windows systems where comspec points to command
com bpo14470
api and feature removals
code cleanups
porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
changes in python command behavior
 the python command and most stdlib scripts as well as argparse  now output version information to stdout instead of stderr  for issue list see other improvements above
changes in the python api
changes in the c api
changed in
pep 476 enabling certificate verification by default for stdlib http clients
whats new in python
author   a
 kuchlingthis article explains the new features in python 2
1 released onmarch 30 2005
pep 218 builtin set objects
see also  pep 218  adding a builtin set object type     originally proposed by greg wilson and ultimately implemented by     raymond hettinger
pep 237 unifying long integers and integers
pep 289 generator expressions
instead of   for link in getalllinks       if link
see also  pep 289  generator expressions     proposed by raymond hettinger and implemented by jiwon seo with     early efforts steered by hyeshik chang
pep 292 simpler string substitutions
safesubstitutepage3   3 titlesee also  pep 292  simpler string substitutions     written and implemented  by barry warsaw
pep 318 decorators for functions and methods
see also  pep 318  decorators for functions methods and classes     written  by kevin d
orgmoinpythondecoratorlibrary     this wiki page contains several examples of decorators
pep 322 reverse iteration
see also  pep 322  reverse iteration     written and implemented by raymond hettinger
pep 324 new subprocess module
see also  pep 324  subprocess  new process module     written and implemented by peter åstrand with assistance from     fredrik lundh and others
pep 327 decimal data type
why is decimal needed
hence the decimal type was created
the decimal type
the context type
see also  pep 327  decimal data type     written by facundo batista and implemented by facundo batista     eric price raymond hettinger aahz and tim peters
pep 328 multiline imports
pep 331 localeindependent floatstring conversions
see also  pep 331  localeindependent floatstring conversions     written by christian r
 reis and implemented by gustavo     carneiro
other language changes
     black 4     blue 2     green 3     red 1     yellow 5  contributed by raymond hettinger
 integer operations will no longer trigger an overflowwarning
      transpose123 456     1 4 2 5 3 6      transpose       contributed by raymond hettinger
 encountering a failure while importing a module no longer leaves a  partiallyinitialized module object in sys
optimizations
new improved and deprecated modules
cookielib
this module was contributed by john j
 lee
doctest
build and c api changes
portspecific changes
porting to python
acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle koray can hyeshik chang michael dyck raymond hettingerbrian hurt hamish lawson fredrik lundh sean reifschneidersadruddin rejeb
whats new in python
author   guido van rossumthis article explains the new features in python 3
common stumbling blocks
print is a function
   printthere are  232  possibilities sepwhich produces   there are 4294967296 possibilitiesnote the print function doesnt support the softspace feature of  the old print statement
views and iterators instead of lists
ordering comparisons
integers
text vs data instead of unicode vs 8bit
 see also the unicode howto which was updated for python 3
overview of syntax changes
new syntax
changed syntax
removed syntax
changes already present in python
  the corresponding sections in whats new in python 2
6 should beconsulted for longer descriptions
 pep 343 the with statement
  the with statement is now a  standard feature and no longer needs to be imported from the  future
 also check out writing context managers and the  contextlib module
 pep 366 explicit relative imports from a main module
  this  enhances the usefulness of the m option when the referenced  module lives in a package
 pep 370 peruser sitepackages directory
 pep 371 the multiprocessing package
 pep 3101 advanced string formatting
6 description  mentions the format method for both 8bit and unicode strings
0 only the str type text strings with unicode support  supports this method the bytes type does not
  the plan is to  eventually make this the only api for string formatting and to  start deprecating the  operator in python 3
 pep 3105 print as a function
  this is now a standard feature and  no longer needs to be imported from future
 pep 3110 exceptionhandling changes
  the except exc as var  syntax is now standard and except exc var is no longer  supported
  of course the as var part is still optional
 pep 3112 byte literals
 string literal notation and  its variants like b
 now  produces a literal of type bytes
 pep 3116 new io library
  the io module is now the standard way  of doing file io
  the builtin open function is now an alias  for io
 pep 3118 revised buffer protocol
  the old builtin buffer is  now really gone the new builtin memoryview provides mostly  similar functionality
 pep 3119 abstract base classes
  the abc module and the abcs  defined in the collections module plays a somewhat more prominent  role in the language now and builtin collection types like dict  and list conform to the collections
 pep 3127 integer literal support and syntax
  as mentioned above  the new octal literal notation is the only one supported and binary  literals have been added
 pep 3129 class decorators
library changes
  heres the list     old name                 new name                     winreg                  winreg                       configparser             configparser                 copyreg                 copyreg                      queue                    queue                        socketserver             socketserver                 markupbase               markupbase                  repr                     reprlib                      test
pep 3101 a new approach to string formatting
changes to exceptions
miscellaneous other changes
operators and special methods
builtins
build and c api changes
performance
porting to python
  see 2to3  automated python 2 to 3 code translation for more  on this tool
0 please see porting extensionmodules to python 3
whats new in python
author   a
cathis article explains the new features in python 2
7
  python 2
7 wasreleased on july 3 2010
the future for python 2x
changes to the handling of deprecation warnings
python 31 features
much as python 2
6 incorporated features from python 3
0 version 2
7incorporates some of the new features in python 3
1
  the 2
x seriescontinues to provide tools for migrating to the 3
x series
a partial list of 3
1 features that were backported to 2
7 the syntax for set literals 123 is a mutable set
 the new  format specifier described in pep 378 format  specifier for thousands separator
pep 372 adding an ordered dictionary to collections
see also  pep 372  adding an ordered dictionary to collections     pep written by armin ronacher and raymond hettinger implemented     by raymond hettinger
pep 378 format specifier for thousands separator
see also  pep 378  format specifier for thousands separator     pep written by raymond hettinger implemented by eric smith
pep 389 the argparse module for parsing command lines
see also  argparse documentation     the documentation page of the argparse module
  upgrading optparse code     part of the python documentation describing how to convert code     that uses optparse
  pep 389  argparse  new command line parsing module     pep written and implemented by steven bethard
pep 391 dictionarybased configuration for logging
  for moreinformation see configuration functions
see also  pep 391  dictionarybased configuration for logging     pep written and implemented by vinay sajip
pep 3106 dictionary views
see also  pep 3106  revamping dict
values and 
pep 3137 the memoryview object
   bytearraybbcde   see also  pep 3137  immutable bytes and mutable buffer     pep written by guido van rossum
other language changes
some smaller changes made to the core python language are the syntax for set literals has been backported from python 3
  is equivalent to     with a as a         with b as b             
interpreter changes
optimizations
new and improved modules
new module importlib
here are some examples    from importlib import importmodule    anydbm  importmoduleanydbm   standard absolute import    anydbm   module anydbm from ppythonlibanydbm
new module sysconfig
ttk themed widgets for tk
updated module unittest
see also  httpwww
updated module elementtree
build and c api changes
capsules
  refer to providing a c api foran extension module for more information on using these objects
portspecific changes windows
portspecific changes mac os x
     changed in version 2
13 as of 2
portspecific changes freebsd
other changes and fixes
porting to python
for c extensions c extensions that use integer format codes with the pyargparse  family of functions will now raise a typeerror exception instead  of triggering a deprecationwarning bpo5080
for applications that embed python the pysyssetargvex function was added letting applications  close a security hole when the existing pysyssetargv function  was used
new features added to python 27 maintenance releases
two new environment variables for debug mode
new in version 2
15
pep 434 idle enhancement exception for all branches
pep 466 network security enhancements for python
pep 466 related features added in python 2
7 hmac
pep 466 related features added in python 2
8 hashlib
 contributed by zachary ware in bpo21671  for cve20140224pep 466 related features added in python 2
9 most of python 3
pep 477 backport ensurepip pep 453 to python
documentation changesas part of this change the installing python modules and distributingpython modules sections of the documentation have been completelyredesigned as short getting started and faq documents
 most packagingdocumentation has now been moved out to the python packaging authoritymaintained python packaging user guide and the documentation of theindividual projects
however as this migration is currently still incomplete the legacyversions of those guides remaining available as installing pythonmodules legacy version and distributing python modules legacyversion
see also  pep 453  explicit bootstrapping of pip in python installations     pep written by donald stufft and nick coghlan implemented by     donald stufft nick coghlan martin von löwis and ned deily
pep 476 enabling certificate verification by default for stdlib http clients
pep 493 https verification migration tools for python
new make regenall build target
contributed by victor stinner in bpo23404
new in version 2
14
removal of make touch build target
contributed by victor stinner in bpo23404
changed in version 2
14
acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle nick coghlan philip jenvey ryan lovett r
 david murrayhugh seckerwalker
whats new in python
author   a
introduction
peps 252 and 253 type and class changes
old and new classes
descriptors
multiple inheritance the diamond rule
attribute access
related links
pep 234 iterators
see also  pep 234  iterators     written by kaping yee and gvr implemented  by the python labs     crew mostly by gvr and tim peters
pep 255 simple generators
see also  pep 255  simple generators     written by neil schemenauer tim peters magnus lie hetland
pep 237 unifying long integers and integers
pep 238 changing the division operator
unicode changes
see also  pep 261  support for wide unicode characters     written by paul prescod
pep 227 nested scopes
see also  pep 227  statically nested scopes     written and implemented by jeremy hylton
new and improved modules
interpreter changes and fixes
other changes and fixes
acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle fred bremmer keith briggs andrew dalke fred l
carel fellinger david goodger mark hammond stephen hansen michaelhudson jack jansen marcandré lemburg martin von löwis fredriklundh michael mclay nick mathewson paul moore gustavo niemeyerdon odonnell joonas paalasma tim peters jens quade tom reinhardtneil schemenauer guido van rossum greg ward edward welbourne
whats new in python
whats new in python
author   raymond hettingerthis article explains the new features in python 3
see also pep 392  python 3
2 release schedule
pep 384 defining a stable abi
see also  pep 384  defining a stable abi     pep written by martin von löwis
pep 389 argparse command line parsing module
pep 391  dictionary based configuration for logging
criticalabnormal termination   20110217 111436694 root            critical abnormal terminationsee also  pep 391  dictionary based configuration for logging     pep written by vinay sajip
pep 3148  the concurrentfutures module
pep 3147  pyc repository directories
see also  pep 3147  pyc repository directories     pep written by barry warsaw
pep 3149 abi version tagged so files
sosee also  pep 3149  abi version tagged 
so files     pep written by barry warsaw
pep 3333 python web server gateway interface v
see also  pep 3333  python web server gateway interface v1
1     pep written by phillip eby
other language changes
new improved and deprecated modules
email
elementtree
doctype handles a doctype  declarationtwo methods have been deprecated xml
getchildren use listelem instead
getiterator use element
iter instead
contributed by florent xicluna and fredrik lundh bpo6472

functools
  contributed by raymond hettinger
 to aid in porting programs from python 2 the  functools
  contributed by raymond hettinger

itertools
collections
subtractdogs2 cats8       regular subtraction   tally  counterdogs 3 cats 5  contributed by raymond hettinger
 the collections
movetoendx   listd  a b d e x  contributed by raymond hettinger
 the collections
reverse   d  dequem i b a l a s m i s  contributed by raymond hettinger

threading
datetime and time
math
abc
io
getvalue   bg3805  showroom   main chassis       bx7899  warehouse  reserve cog        bl6988  receiving  primary sprocketcontributed by antoine pitrou in bpo5506

reprlib
xcontributed by raymond hettinger in bpo9826 and bpo9840

logging
csv
contextlib
contributed by michael foord in bpo9110

decimal and fractions
contributed by mark dickinson and raymond hettinger

ftp
txt as f       for line in f           processlinecontributed by tarek ziadé and giampaolo rodolà in bpo4972 and bygeorg brandl in bpo8046 and bpo1286
the ftptls class now accepts a context parameter which is assl
contributed by giampaolo rodolà bpo8806

popen
contributed by antoine pitrou and brian curtin in bpo7461 andbpo10554

select
gzip and zipfile
decode42       decompress and convert to textthree shall be the number thou shalt countcontributed by anand b
 pillai in bpo3488 and by antoine pitrounir aides and brian curtin in bpo9962 bpo1675951 bpo7471 andbpo2846
also the zipfile
tarfile
hashlib
algorithmsavailable   md2 sha256 sha512 dsawithsha mdc2 sha224 md4 sha256   sha512 ripemd160 sha1 mdc2 sha sha384 md2   ecdsawithsha1md4 md5 sha1 dsasha sha224   dsaencryption dsa ripemd160 sha md5 sha384suggested by carl chenet in bpo7418

ast
call object at 0x101739a10implemented by benjamin peterson and georg brandl

os
contributed by victor stinner

shutil
contributed by tarek ziadé
in addition the shutil module now supports archiving operations forzipfiles uncompressed tarfiles gzipped tarfiles and bzippedtarfiles
 contributed by tarek ziadé

sqlite
contributed by r
 david murray and shashwat anand bpo8845

html
socket
ssl
contributed by antoine pitrou in bpo8850 bpo1589 bpo8322bpo5639 bpo4870 bpo8484 and bpo8321

nntp
contributed by antoine pitrou in bpo9360 and andrew vant inbpo1926

certificates
imaplib
contributed by lorenzo m
 catucci and antoine pitrou bpo4471

httpclient
unittest
random
contributed by raymond hettinger bpo9025

poplib
contributed by giampaolo rodolà bpo8807

asyncore
contributed by giampaolo rodolà bpo6706

tempfile
temporarydirectory as tmpdirname       printcreated temporary dir tmpdirnamecontributed by neil schemenauer and nick coghlan bpo5178

inspect
pydoc
2 bcontributed by ron adam bpo2001

dis
contributed by nick coghlan in bpo9147

dbm
suggested by ray allen in bpo9523

ctypes
site
2sitepackagescontributed by tarek ziadé in bpo6693

sysconfig
there is also a convenient commandline interface   cpython32python m sysconfig   platform win32   python version 3
2           srcdir  cpython32           userbase  cdocuments and settingsraymondapplication datapythonmoved out of distutils by tarek ziadé

pdb
contributed by georg brandl antonio cuni and ilya sandler

configparser
urllibparse
      encodinglatin1   typetelenovelanamebfdf3ndeeste1elisa3fas detailed in parsing ascii encoded bytes all the urllib
parsefunctions now accept asciiencoded byte strings as input so long asthey are not mixed with regular strings
  if asciiencoded bytestrings are given as parameters the return types will also be anasciiencoded byte strings urllib
mailbox
turtledemo
multithreading
  contributed by antoine pitrou
 regular and recursive locks now accept an optional timeout  argument to their acquire method
optimizations
  contributed by alexandre vassalotti antoine pitrou and the unladen  swallow team in bpo9410 and bpo3873
 the timsort algorithm used in list
  contributed by antoine pitrou in bpo7451 and by raymond hettinger  and antoine pitrou in bpo10314
 recursive locks created with the threading
  contributed by antoine pitrou bpo3001
 the fastsearch algorithm in stringlib is now used by the split  rsplit splitlines and replace methods on bytes  bytearray and str objects
unicode
codecs
documentation
idle
  contributed by raymond hettinger bpo5150
 idle on mac os x now works with both carbon aquatk and cocoa aquatk
  contributed by kevin walzer ned deily and ronald oussoren  bpo6075

code repository
build and c api changes
  contributed by antoine pitrou bpo9203
 the option withwctypefunctions was removed
  contributed by amaury forgeot darc bpo9210
 hash values are now values of a new type pyhasht which is  defined to be the same size as a pointer
porting to python
whats new in python
editors   elvis pranskevichus elvismagic
iothis article explains the new features in python 3
6 compared to 3
5
python 3
6 was released on december 23 2016
  see the changelog for afull list of changes
see also pep 494  python 3
6 release schedule
summary  release highlights
new features
pep 498 formatted string literals
pep 526 syntax for variable annotations
pep 515 underscores in numeric literals
pep 525 asynchronous generators
see also  pep 525  asynchronous generators     pep written and implemented by yury selivanov
pep 530 asynchronous comprehensions
pep 530 adds support for using async for in list set dictcomprehensions and generator expressions   result  i async for i in aiter if i  2additionally await expressions are supported in all kinds ofcomprehensions   result  await fun for fun in funcs if await conditionsee also  pep 530  asynchronous comprehensions     pep written and implemented by yury selivanov
pep 487 simpler customization of class creation
new as described in creating the class object
see also  pep 487  simpler customization of class creation     pep written and implemented by martin teichmann
pep 487 descriptor protocol enhancements
name  name   class model       intfield  intfieldsee also  pep 487  simpler customization of class creation     pep written and implemented by martin teichmann
pep 519 adding a file system path protocol
see also  pep 519  adding a file system path protocol     pep written by brett cannon and koos zevenhoven
pep 495 local time disambiguation
see also  pep 495  local time disambiguation     pep written by alexander belopolsky and tim peters     implementation by alexander belopolsky
pep 529 change windows filesystem encoding to utf
see pep 529 for more information and discussion of codemodifications that may be required
pep 528 change windows console encoding to utf
see also  pep 528  change windows console encoding to utf8     pep written and implemented by steve dower
pep 520 preserving class attribute definition order
see also  pep 520  preserving class attribute definition order     pep written and implemented by eric snow
pep 468 preserving keyword argument order
see also  pep 468  preserving keyword argument order     pep written and implemented by eric snow
new dict implementation
pep 523 adding a frame evaluation api to cpython
see also  pep 523  adding a frame evaluation api to cpython     pep written by brett cannon and dino viehland
pythonmalloc environment variable
 effectsof debug hooks newly allocated memory is filled with the byte 0xcb freed memory is filled with the byte 0xdb detect violations of the python memory allocator api
 detect writes before the start of a buffer buffer underflows detect writes after the end of a buffer buffer overflows check that the gil is held when allocator functions of  pymemdomainobj ex pyobjectmalloc and pymemdomainmem  ex pymemmalloc domains are called
checking if the gil is held is also a new feature of python 3
6
contributed by victor stinner in bpo26516 and bpo26564

dtrace and systemtap probing support
python can now be built withdtrace which enables static markersfor the following events in the interpreter function callreturn garbage collection startedfinished line of code executed
more details in instrumenting cpython with dtrace and systemtap
the current implementation is tested on linux and macos
  additionalmarkers may be added in the future
other language changes
some smaller changes made to the core python language are a global or nonlocal statement must now textually appear before  the first use of the affected name in the same scope
new modules
secrets
warning  note that the pseudorandom generators in the random module should  not be used for security purposes
see also  pep 506  adding a secrets module to the standard library     pep written and implemented by steven daprano
improved modules
array
contributed by serhiy storchaka in bpo26492
ast
contributed by victor stinner in bpo26146
asyncio
binascii
cmath
collections
concurrentfutures
contextlib
datetime
decimal
asintegerratio   157 50contributed by stefan krah amd mark dickinson in bpo25928

distutils
email
encodings
enum
faulthandler
fileinput
hashlib
httpclient
idlelib and idle
new in 3
2multiple fixes for autocompletion
 contributed by louie lu inbpo15786
new in 3
3module browser on the file menu formerly called class browser nowdisplays nested functions and classes in addition to toplevelfunctions and classes
 contributed by guilherme polo cheryl sabellaand terry jan reedy in bpo1612262
the idle features formerly implemented as extensions have beenreimplemented as normal features
  their settings have been moved fromthe extensions tab to other dialog tabs
 contributed by charleswohlganger and terry jan reedy in bpo27099
the settings dialog options configure idle has been partlyrewritten to improve both appearance and function
 contributed bycheryl sabella and terry jan reedy in multiple issues
new in 3
4the font sample now includes a selection of nonlatin characters sothat users can better see the effect of selecting a particular font
contributed by terry jan reedy in bpo13802
 the sample can beedited to include other characters
 contributed by serhiy storchakain bpo31860
new in 3
6editor code context option revised
  box displays all context lines upto maxlines
  clicking on a context line jumps the editor to thatline
  context colors for custom themes is added to highlights tab ofsettings dialog
 contributed by cheryl sabella and terry jan reedy inbpo33642 bpo33768 and bpo33679
on windows a new api call tells windows that tk scales for dpi
 onwindows 8
1 or 10 with dpi compatibility properties of the pythonbinary unchanged and a monitor resolution greater than 96 dpi thisshould make text and lines sharper
  it should otherwise have noeffect
 contributed by terry jan reedy in bpo33656
new in 3
7output over n lines 50 by default is squeezed down to a button
 ncan be changed in the pyshell section of the general page of thesettings dialog
  fewer but possibly extra long lines can besqueezed by right clicking on the output
  squeezed output can beexpanded in place by doubleclicking the button or into the clipboardor a separate window by rightclicking the button
  contributed bytal einat in bpo1529353

importlib
inspect
json
logging
math
multiprocessing
os
pathlib
pdb
pickle
pickletools
pydoc
random
re
readline
rlcompleter
shlex
site
sqlite
socket
socketserver
ssl
statistics
struct
subprocess
sys
telnetlib
time
timeit
tkinter
traceback
    f   traceback most recent call last     file stdin line 1 in module     file stdin line 1 in f     file stdin line 1 in f     file stdin line 1 in f     previous line repeated 995 more times   recursionerror maximum recursion depth exceededcontributed by emanuel barry in bpo26823

tracemalloc
contributed by victor stinner in bpo26588

typing
unicodedata
unittestmock
urllibrequest
urllibrobotparser
venv
warnings
winreg
winsound
xmlrpcclient
zipfile
zlib
optimizations
build and c api changes
other improvements
deprecated
new keywords
deprecated python behavior
deprecated python modules functions and methods
deprecated functions and types of the c api
deprecated build options
removed
api and feature removals
porting to python
this section lists previously described changes and other bugfixesthat may require changes to your code
changes in python command behavior
changes in the python api
 subclasses of type which dont override type
new may no  longer use the oneargument form to get the type of an object
changes in the c api
cpython bytecode changes
notable changes in python
new make regenall build target
contributed by victor stinner in bpo23404
new in version 3
2
removal of make touch build target
contributed by victor stinner in bpo23404
changed in version 3
2
notable changes in python
notable changes in python
notable changes in python
notable changes in python
due to significant security concerns the reuseaddress parameter ofasyncio
createdatagramendpoint is no longer supported
 thisis because of the behavior of the socket option soreuseaddr in udp
for more details see the documentation forloop
createdatagramendpoint
 contributed by kyle stanleyantoine pitrou and yury selivanov in bpo37228

whats new in python
0a0date   may 20 2020this article explains the new features in python 3
note  prerelease users should be aware that this document is currently in  draft form
summary  release highlights
new features
other language changes
new modules
improved modules
optimizations
build and c api changes
deprecated
removed
porting to python
changelog
python next
release date xxxxxxxx
security
 bpo42051 the plistlib module no longer accepts entity  declarations in xml plist files to avoid xml vulnerabilities
 this  should not affect users as entity declarations are not used in  regular plist files
core and builtins
 bpo42218 fixed a bug in the peg parser that was causing crashes in  debug mode
 now errors are checked in leftrecursive rules to avoid  cases where such errors do not get handled in time and appear as  longdistance crashes in other places
 bpo42214 fixed a possible crash in the peg parser when checking  for the  token in the barryasflufl rule
 patch by pablo  galindo
 bpo41910 document the default implementation of object
eq
 bpo42057 fix peephole optimizer misoptimize conditional jump   jumpifnotexcmatch pair
 bpo41984 the garbage collector now tracks all userdefined  classes
 patch by brandt bucher
library
documentation
tests
build
windows
macos
idle
c api
python 390 final
library
tests
build
python 390 release candidate
core and builtins
library
documentation
 bpo40979 refactored typing
rst arranging more than 70 classes  functions and decorators into new subsections
tests
build
windows
c api
python 390 release candidate
release date 20200811
core and builtins
 bpo38156 handle interrupts that come after eof correctly in  pyosstdioreadline
library
 bpo41497 fix potential unicodedecodeerror in dis module
 bpo41490 update ensurepip to install pip 20
1 and setuptools  49
 bpo41467 on windows fix asyncio recvinto return value when  the socketpipe is closed brokenpipeerror return 0 rather  than an empty byte string b
 bpo41425 make tkinter doc example runnable
 bpo41384 raise tclerror instead of typeerror when an unknown  option is passed to tkinter
optionmenu
 bpo38731 fix nameerror in commandline interface of  pycompile
 bpo41317 use adddonecallback in asyncio
sockaccept to  unsubscribe reader early on cancellation
 bpo41364 reduce import overhead of uuid
 bpo41341 recursive evaluation of typing
forwardref in  gettypehints
 bpo41182 selector use defaultselector based upon implementation bpo40726 handle cases where the endlineno is none on  ast
incrementlineno
documentation
 bpo41045 add documentation for debug feature of fstrings
 bpo41314 changed the release when from future import  annotations becomes the default from 4
0 to 3
10 following a  change in pep 563
windows
 bpo41492 fixes the description that appears in uac prompts
 bpo40741 update windows release to include sqlite 3
32
3
idle
 bpo41468 improve idle run crash error message which users should  never see
python 390 beta
security
core and builtins
library
documentation
macos
idle
c api
python 390 beta
security
core and builtins
library
tests
build
windows
macos
idle
c api
python 390 beta
library
build
python 390 beta
core and builtins
library
tests
build
windows
macos
idle
c api
python 390 beta
security
core and builtins
library
documentation
tests
build
windows
macos
toolsdemos
c api
python 390 alpha
security
core and builtins
library
documentation
 bpo39879 updated data model docs to include dict insertion  order preservation
tests
build
windows
macos
idle
toolsdemos
c api
python 390 alpha
security
core and builtins
library
documentation
tests
build
windows
macos
idle
toolsdemos
c api
  extension modules without module state msize  0 are not  affected
python 390 alpha
security
core and builtins
library
documentation
tests
build
windows
idle
c api
python 390 alpha
core and builtins
library
documentation
build
idle
c api
python 390 alpha
release date 20191218
security
core and builtins
library
documentation
tests
build
windows
macos
idle
c api
python 390 alpha
security
 bpo38418 fixes audit event for os
system to be named  os
system
 bpo38243 escape the server title of  xmlrpc
docxmlrpcserver when rendering the document page as  html
 contributed by donghee na in bpo38243
 bpo38174 update vendorized expat library version to 2
8 which  resolves cve201915903
 bpo37764 fixes email
getunstructured going  into an infinite loop for a specific case in which the email header  does not have trailing whitespace and the case in which it contains  an invalid encoded word
 patch by ashwin ramaswami
 bpo37363 adds audit events for the range of supported run commands  see command line and environment
 bpo34631 updated openssl to 1
1c in windows installer bpo34155 fix parsing of invalid email addresses with more than one   e
core and builtins
library
documentation
tests
 bpo38117 test with openssl 1
1d bpo38018 increase code coverage for multiprocessing
build
windows
 bpo38492 remove pythonw
exe dependency on the microsoft c  runtime
 bpo38117 update bundled openssl to 1
 bpo10945 officially drop support for creating bdistwininst  installers on nonwindows systems
 bpo35360 update windows builds to use sqlite 3
macos
 bpo38117 updated openssl to 1
1d in macos installer
 bpo35360 update macos installer to use sqlite 3
 bpo34631 updated openssl to 1
1c in macos installer
idle
toolsdemos
c api
python 380 beta
release date 20190604
security
core and builtins
library
documentation
tests
 bpo37081 test with openssl 1
1c bpo36829 add test
build
  add a pkgconfig python3
8embed module to embed python into an  application pkgconfig python3
8embed libs includes  lpython3
 to support both 3
8 and older try pkgconfig  pythonx
yembed libs first and fallback to pkgconfig  pythonx
y libs without embed if the previous command fails  replace x
y with the python version
windows
macos
idle
toolsdemos
c api
python 380 alpha
release date 20190506
security
 bpo36742 fixes mishandling of prenormalization characters in  urlsplit
core and builtins
library
semaphoretracker so it is reused  by child processes bpo31292 fix setup
py check restructuredtext for files  containing include directives
documentation
 bpo36425 new documentation translation simplified chinese
tests
build
windows
macos
idle
toolsdemos
c api
python 380 alpha
release date 20190325
security
core and builtins
 bpo36236 at python initialization the current directory is no  longer prepended to sys
path if it has been removed
 bpo36262 fix an unlikely memory leak on conversion from string to  float in the function pydgstrtod used by floatstr  complexstr pickle
load marshal
load etc
library
documentation
tests
build
windows
idle
 bpo36176 fix idle autocomplete  calltip popup colors
 prevent  conflicts with linux dark themes and slightly darken calltip  background
 bpo23216 add docstrings to idle search modules
toolsdemos
c api
python 380 alpha
release date 20190225
core and builtins
library
documentation
tests
windows
idle
 bpo24310 idle  document settings dialog font tab sample
python 380 alpha
release date 20190203
security
core and builtins
library
documentation
 bpo33604 update hmac md5 default to a deprecationwarning bump  removal to 3
8
 bpo33503 fix broken pypi link bpo33421 add missing documentation for  typing
asynccontextmanager
tests
 bpo26704 added test demonstrating doublepatching of an instance  method
 patch by anthony sottile
 bpo33655 ignore testposixfallocate failures on bsd platforms  that might be due to running on zfs
build
windows
 bpo35402 update windows build to use tcl and tk 8
9 bpo35401 updates windows build to openssl 1
 bpo33316 pythreadreleaselock always fails bpo33184 update windows installer to use openssl 1
macos
 bpo35401 update macos installer to use openssl 1
 bpo34405 update to openssl 1
0i for macos installer builds
 bpo33184 update macos installer build to use openssl 1
idle
 bpo35769 change idles new file name from untitled to untitled bpo35660 fix imports in idlelib
 bpo35641 proper format calltip when the function has no  docstring
toolsdemos
c api
 bpo35259 conditionally declare pyfinalizeex new in 3
6  based on pylimitedapi
 patch by arthur neufeld
python 370 final
release date 20180627
library
c api
python 370 release candidate
release date 20180612
core and builtins
library
documentation
build
windows
idle
python 370 beta
release date 20180530
core and builtins
library
documentation
 bpo33604 update hmac md5 default to a deprecationwarning bump  removal to 3
8
 bpo33503 fix broken pypi link bpo33421 add missing documentation for  typing
asynccontextmanager
tests
 bpo33655 ignore testposixfallocate failures on bsd platforms  that might be due to running on zfs
 bpo32604 remove the xxsubinterpreters module meant for testing  and associated helpers
  this module was originally added recently  in 3
7b1
build
macos
idle
python 370 beta
release date 20180502
core and builtins
 bpo33363 raise a syntaxerror for async with and async for  statements outside of async functions
 bpo33128 fix a bug that causes pathfinder to appear twice on  sys
metapath
 patch by pablo galindo salgado
 bpo33231 fix potential memory leak in normalizestring
library
documentation
tests
build
windows
 bpo33184 update windows installer to use openssl 1
macos
 bpo33184 update macos installer build to use openssl 1
idle
toolsdemos
python 370 beta
release date 20180329
security
core and builtins
library
documentation
tests
build
windows
macos
idle
toolsdemos
c api
python 370 beta
release date 20180227
security
core and builtins
library
documentation
tests
build
windows
macos
idle
toolsdemos
python 370 beta
release date 20180130
core and builtins
library
documentation
tests
build
 bpo32593 drop support of freebsd 9 and older
windows
macos
c api
python 370 alpha
release date 20180108
core and builtins
library
documentation
tests
windows
toolsdemos
c api
python 370 alpha
release date 20171205
core and builtins
library
documentation
tests
build
 bpo28791 update windows builds to use sqlite 3
 bpo28791 update os x installer to use sqlite 3
windows
macos
 bpo31392 update macos installer to use openssl 1
idle
toolsdemos
c api
python 370 alpha
release date 20171016
core and builtins
 bpo31709 drop support of asynchronous aiter
library
documentation
build
 bpo31624 remove support for bsdos
idle
c api
python 370 alpha
release date 20170919
security
core and builtins
library
documentation
tests
build
 bpo29572 update windows build and os x installers to use openssl  1
 bpo28208 update windows build and os x installers to use sqlite  3
 bpo28248 update windows build and os x installers to use openssl  1
windows
 bpo31392 update windows build to use openssl 1
idle
toolsdemos
c api
python 366 final
release date 20180627there were no new changes in version 3
6
python 366 release candidate
release date 20180611
core and builtins
 bpo33231 fix potential memory leak in normalizestring
library
 bpo33127 the ssl module now compiles with libressl 2
1
documentation
 bpo33503 fix broken pypi link bpo33421 add missing documentation for  typing
asynccontextmanager
tests
 bpo33655 ignore testposixfallocate failures on bsd platforms  that might be due to running on zfs
build
windows
 bpo33184 update windows installer to openssl 1
macos
 bpo33184 update macos installer build to use openssl 1
idle
toolsdemos
c api
python 365 final
release date 20180328
tests
build
python 365 release candidate
release date 20180313
security
core and builtins
library
documentation
tests
build
windows
macos
idle
toolsdemos
c api
python 364 final
release date 20171218there were no new code changes in version 3
4 since v3
4rc1
python 364 release candidate
release date 20171205
core and builtins
library
documentation
tests
build
 bpo28791 update windows builds to use sqlite 3
 bpo28791 update os x installer to use sqlite 3
windows
macos
 bpo31392 update macos installer to use openssl 1
idle
toolsdemos
c api
python 363 final
release date 20171003
library
build
python 363 release candidate
release date 20170918
security
core and builtins
library
documentation
tests
build
windows
idle
toolsdemos
python 362 final
release date 20170717no changes since release candidate 2
python 362 release candidate
release date 20170707
security
python 362 release candidate
release date 20170617
core and builtins
library
security
library
idle
c api
build
documentation
toolsdemos
tests
windows
python 361 final
release date 20170321
core and builtins
build
python 361 release candidate
release date 20170304
core and builtins
library
idle
windows
c api
documentation
tests
build
 bpo29572 update windows build and os x installers to use openssl  1
python 360 final
release date 20161223no changes since release candidate 2
python 360 release candidate
release date 20161216
core and builtins
toolsdemos
windows
build
python 360 release candidate
release date 20161206
core and builtins
library
c api
documentation
toolsdemos
python 360 beta
release date 20161121
core and builtins
library
documentation
tests
build
python 360 beta
release date 20161031
core and builtins
library
windows
build
 bpo28208 update windows build and os x installers to use sqlite  3
 bpo28248 update windows build and os x installers to use openssl  1
tests
python 360 beta
release date 20161010
core and builtins
library
windows
c api
build
tests
python 360 beta
release date 20160912
core and builtins
library
idle
c api
tests
build
 update os x installer to use sqlite 3
1 and xz 5
2
toolsdemos
windows
 bpo27883 update sqlite to 3
0 on windows
python 360 alpha
release date 20160815
core and builtins
library
idle
tests
windows
build
python 360 alpha
release date 20160711
core and builtins
library
security
library
security
library
idle
c api
build
 bpo26930 update windows builds to use openssl 1
 dont use largefile support for gnuhurd
toolsdemos
documentation
tests
python 360 alpha
release date 20160613
core and builtins
library
security
library
security
library
idle
documentation
tests
windows
build
 bpo26930 update os x 10
5 32bitonly installer to build and link  with openssl 1
windows
c api
toolsdemos
python 360 alpha
release date 20160516
core and builtins
library
security
library
security
library
security
library
idle
documentation
tests
build
 bpo26465 update windows builds to use openssl 1
 bpo26465 update os x 10
5 32bitonly installer to build and link  with openssl 1
 bpo26268 update windows builds to use openssl 1
windows
toolsdemos
c api
python 355 final
release date 20180204there were no new changes in version 3
5
python 355 release candidate
release date 20180123
security
core and builtins
library
python 354 final
release date 20170807
library
python 354 release candidate
release date 20170723
security
core and builtins
library
documentation
tests
build
windows
c api
python 353 final
release date 20170117there were no code changes between 3
python 353 release candidate
release date 20170102
core and builtins
library
security
library
security
library
idle
c api
documentation
tests
toolsdemos
windows
build
 bpo28248 update windows build and os x installers to use openssl  1
python 352 final
release date 20160626
core and builtins
 bpo26930 update windows builds to use openssl 1
tests
idle
python 352 release candidate
release date 20160612
core and builtins
security
library
security
library
security
library
security
library
security
library
idle
documentation
tests
build
 bpo26465 update windows builds to use openssl 1
 bpo26930 update os x 10
5 32bitonly installer to build and link  with openssl 1
 bpo26268 update windows builds to use openssl 1
windows
toolsdemos
windows
python 351 final
release date 20151206
core and builtins
windows
python 351 release candidate
release date 20151122
core and builtins
library
idle
documentation
tests
build
windows
toolsdemos
python 350 final
release date 20150913
build
python 350 release candidate
release date 20150909
library
build
python 350 release candidate
release date 20150907
core and builtins
library
python 350 release candidate
release date 20150825
core and builtins
library
python 350 release candidate
release date 20150809
core and builtins
library
idle
documentation
tests
python 350 beta
release date 20150726
core and builtins
library
build
 bpo24603 update windows builds and os x 10
5 installer to use  openssl 1
python 350 beta
release date 20150705
core and builtins
library
tests
documentation
build
 bpo24432 update windows builds and os x 10
5 installer to use  openssl 1
python 350 beta
release date 20150531
core and builtins
library
python 350 beta
release date 20150524
core and builtins
library
idle
tests
documentation
toolsdemos
python 350 alpha
release date 20150419
core and builtins
library
build
tests
toolsdemos
c api
python 350 alpha
release date 20150328
core and builtins
library
build
tests
toolsdemos
python 350 alpha
release date 20150309
core and builtins
library
build
 bpo23686 update os x 10
5 installer build to use openssl 1
c api
windows
python 350 alpha
release date 20150208
core and builtins
 upgrade unicode database to unicode 7
0
library
 bpo23248 update ssl error codes from latest openssl git master
 add an all to html
entities
 bpo22085 dropped support of tk 8
3 in tkinter
idle
build
 bpo22592 drop support of the borland c compiler to build python
  the distutils module still supports it to build extensions
 bpo22591 drop support of msdos especially of the djgpp compiler  msdos port of gcc
c api
documentation
tests
 bpo21275 fix a socket test on kfreebsd
 bpo20635 added tests for tk geometry managers
 add test case for freeze
 bpo20743 fix a reference leak in testtcl
 bpo21097 move testnamespacepkgs into testimportlib
toolsdemos
 bpo21906 make toolsscriptsmd5sum
py work in python 3
 patch by  zachary ware
 add support for yield from to 2to3
windows
 bpo23260 update windows installer the bundled version of tcltk has been updated to 8
 bpo22644 the bundled version of openssl has been updated to  1
for information about older versions consult the history file
whats new in python
author   a
 conditional expressions were finally added to the languageusing a novel syntax see section pep 308 conditional expressions
the new with statement will make writing cleanup code easiersection pep 343 the with statement
  values can now be passedinto generators section pep 342 new generator features
  importsare now visible as either absolute or relative section pep 328absolute and relative imports
  some corner cases of exceptionhandling are handled better section pep 341 unifiedtryexceptfinally
pep 308 conditional expressions
pep 309 partial function application
heres a small but realistic example   import functools   def log message subsystem       write the contents of message to the specified subsystem
wrapsf       def wrapperargs kwds           print calling decorated function           return fargs kwds       return wrappersee also  pep 309  partial function application     pep proposed and written by peter harris implemented by hyeshik     chang and nick coghlan with adaptations by raymond hettinger
pep 314 metadata for python software packages v
see also  pep 314  metadata for python software packages v1
1     pep proposed and written by a
 kuchling richard jones and     fred drake implemented by richard jones and fred drake
pep 328 absolute and relative imports
see also  pep 328  imports multiline and absoluterelative     pep written by aahz implemented by thomas wouters
pep 338 executing modules as scripts
see also  pep 338  executing modules as scripts     pep written and  implemented by nick coghlan
pep 341 unified tryexceptfinally
see also  pep 341  unifying tryexcept and tryfinally     pep written by georg brandl  implementation by thomas lee
pep 342 new generator features
the cumulative effect of these changes is to turn generators from oneway producers of information into both producers and consumers
see also  pep 342  coroutines via enhanced generators     pep written by  guido van rossum and phillip j
 eby implemented     by phillip j
 eby
  includes examples of  some fancier uses of     generators as coroutines
     earlier versions of these features were proposed in  pep 288     by raymond hettinger and pep 325 by samuele pedroni
orgwikicoroutine     the wikipedia entry for  coroutines
pep 343 the with statement
5 you need to add the followingdirective to your module   from future import withstatementthe statement will always be enabled in python 2
6
note  in this case f is the same object created by open because  file
writing context managers
the contextlib module
writelinesee also  pep 343  the with statement     pep written by guido van rossum and nick coghlan implemented by     mike bland guido van rossum and neal norwitz
  the documentation  for the contextlib module
pep 352 exceptions as newstyle classes
see also  pep 352  required superclass for exceptions     pep written by  brett cannon and guido van rossum implemented by     brett cannon
pep 353 using ssizet as the index type
see also  pep 353  using ssizet as the index type     pep written and implemented by martin von löwis
pep 357 the index method
see also  pep 357  allowing any object to be used for slicing     pep written  and implemented by travis oliphant
other language changes
  some examples      httpwww
  for example to find the longest string in a list you can do     l  medium longest short      prints longest     print maxl keylen      prints short because lexicographically short has the largest value     print maxl  contributed by steven bethard and raymond hettinger
 two new builtin functions any and all evaluate whether an  iterator contains any true or false values
  implemented by marcandré lemburg
 one error that python programmers sometimes make is forgetting to  include an init
  as an example this is now legal     class c         pass  implemented by brett cannon

interactive interpreter changes
optimizations
new improved and removed modules
the ctypes package
see also  httpstarship
netcrewthellerctypes     the ctypes web page with a tutorial reference and faq
  the documentation  for the ctypes module
the elementtree package
the hashlib package
see also the documentation  for the hashlib module
the sqlite3 package
the wsgiref package
serveforeversee also  httpwww
org     a central web site for wsgirelated resources
  pep 333  python web server gateway interface v1
0     pep written by phillip j
 eby
build and c api changes
  see the earlier section pep 353 using ssizet as  the index type for a discussion of this change
portspecific changes
porting to python
  because of the pep 342 changes described in  section pep 342 new generator features its now possible for  giframe to be none
  see the earlier section pep 353 using ssizet as the  index type for a discussion of this change
acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle georg brandl nick coghlan phillip j
 eby lars gustäbelraymond hettinger ralf w
 grossekunstleve kent johnson iain lowemartin von löwis fredrik lundh andrew mcnamara skip montanarogustavo niemeyer paul prescod james pryor mike rovner scottweikart barry warsaw thomas wouters
whats new in python
author   a
introduction
the final release of python 2
1 was made on april 17 2001
pep 227 nested scopes
see also  pep 227  statically nested scopes     written and implemented by jeremy hylton
pep 236 future directives
see also  pep 236  back to the future     written by tim peters and primarily implemented by jeremy     hylton
pep 207 rich comparisons
  the new magic methodnames are operation    method name                 lt                 le                  gt                 ge                 eq                 ne       the magic methods are named after the corresponding fortran operators
see also  pep 207  rich comparisons     written by guido van rossum heavily based on earlier work by     david ascher and implemented by guido van rossum
pep 230 warning framework
see also  pep 5  guidelines for language evolution     written by paul prescod to specify procedures to be followed     when removing old features from python
  pep 230  warning framework     written and implemented by guido van rossum
pep 229 new build system
see also  pep 229  using distutils to build python     written and implemented by a
 kuchling
pep 205 weak references
referenceerrorsee also  pep 205  weak references     written and implemented by fred l
 drake jr
pep 232 function attributes
see also  pep 232  function attributes     written and implemented by barry warsaw
pep 235 importing modules on caseinsensitive platforms
pep 217 interactive display hook
pprint    l   1 2 3  recursion on list with id135143996   see also  pep 217  display hook for interactive use     written and implemented by moshe zadka
pep 208 new coercion model
see also  pep 208  reworking the coercion model     written and implemented by neil schemenauer heavily based upon     earlier work by marcandré lemburg
pep 241 metadata in python packages
see also  pep 241  metadata for python software packages     written and implemented by a
 kuchling
new and improved modules
other changes and fixes
acknowledgements
the author would like to thank the following people for offeringsuggestions on various drafts of this article graeme cross davidgoodger jay graves michael hudson marcandré lemburg fredriklundh neil schemenauer thomas wouters
python documentation contents
descriptor howto guide
author   raymond hettingercontact   python at rcn dot comcontents descriptor howto guide   primer     simple example a descriptor that returns a constant     dynamic lookups     managed attributes     customized names     closing thoughts   complete practical example     validator class     custom validators     practical use   technical tutorial     abstract     definition and introduction     descriptor protocol     overview of descriptor invocation     invocation from an instance     invocation from a class     invocation from super     summary of invocation logic     automatic name notification     orm example   pure python equivalents     properties     functions and methods     static methods     class methods     member objects and slotsdescriptors let objects customize attribute lookup storage anddeletion
primer
simple example a descriptor that returns a constant
dynamic lookups
managed attributes
customized names
closing thoughts
complete practical example
validator class
custom validators
practical use
technical tutorial
abstract
learning about descriptors not only provides access to a largertoolset it creates a deeper understanding of how python works and anappreciation for the elegance of its design
definition and introduction
descriptor protocol
deleteself obj  nonethat is all there is to it
  define any of these methods and an objectis considered a descriptor and can override default behavior uponbeing looked up as an attribute
if an object defines set or delete it is considered adata descriptor
  descriptors that only define get are callednondata descriptors they are typically used for methods but otheruses are possible
data and nondata descriptors differ in how overrides are calculatedwith respect to entries in an instances dictionary
  if an instancesdictionary has an entry with the same name as a data descriptor thedata descriptor takes precedence
  if an instances dictionary has anentry with the same name as a nondata descriptor the dictionaryentry takes precedence
to make a readonly data descriptor define both get andset with the set raising an attributeerror whencalled
  defining the set method with an exception raisingplaceholder is enough to make it a data descriptor
overview of descriptor invocation
invocation from an instance
invocation from a class
invocation from super
summary of invocation logic
the important points to remember are descriptors are invoked by the getattribute method
automatic name notification
orm example
pure python equivalents
properties
  itssignature is   propertyfgetnone fsetnone fdelnone docnone  propertythe documentation shows a typical use to define a managed attributex   class c       def getxself return self
to see how property is implemented in terms of the descriptorprotocol here is a pure python equivalent   class property       emulate pypropertytype in objectsdescrobject
docthe property builtin helps whenever a user interface has grantedattribute access and then subsequent changes require the interventionof a method
for instance a spreadsheet class may grant access to a cell valuethrough cellb10
value
 subsequent improvements to the programrequire the cell to be recalculated on every access however theprogrammer does not want to affect existing client code accessing theattribute directly
  the solution is to wrap access to the valueattribute in a property data descriptor   class cell       
functions and methods
pythons object oriented features are built upon a function basedenvironment
 using nondata descriptors the two are mergedseamlessly
static methods
nondata descriptors provide a simple mechanism for variations on theusual patterns of binding functions into methods
this chart summarizes the binding and its two most useful variants       transformation     called from an object   called from a                                                     class                     function           fobj args           fargs                  staticmethod       fargs                fargs                  classmethod        ftypeobj args     fcls args         static methods return the underlying function without changes
calling either c
f or c
f is the equivalent of a direct lookupinto object
getattributec f or object
getattributecf
 as a result the function becomes identically accessible fromeither an object or a class
good candidates for static methods are methods that do not referencethe self variable
for instance a statistics package may include a container class forexperimental data
  the class provides normal methods for computingthe average mean median and other descriptive statistics thatdepend on the data
 however there may be useful functions which areconceptually related but do not depend on the data
  for instanceerfx is handy conversion routine that comes up in statistical workbut does not directly depend on a particular dataset
 it can be calledeither from an object or the class  s
5  
9332 orsample
f3   3using the nondata descriptor protocol a pure python version ofstaticmethod would look like this   class staticmethod       emulate pystaticmethodtype in objectsfuncobject
class methods
unlike static methods class methods prepend the class reference tothe argument list before calling the function
  this format is thesame for whether the caller is an object or a class   class f       classmethod       def fcls x           return cls
c           d  cls           for key in iterable               dkey  value           return dnow a new dictionary of unique keys can be constructed like this    dict
fromkeysabracadabra   a none r none b none c none d noneusing the nondata descriptor protocol a pure python version ofclassmethod would look like this   class classmethod       emulate pyclassmethodtype in objectsfuncobject
member objects and slots
argument clinic howto
author   larry hastingsabstractargument clinic is a preprocessor for cpython c files
the goals of argument clinic
basic concepts and usage
converting your first function
  for more on format units please  see parsing arguments and building values
advanced topics
symbolic default values
  currently the following are explicitly supported numeric constants integer and float string constants true false and none simple symbolic constants like sys
renaming the c functions and variables generated by argument clinic
converting functions using pyargunpacktuple
optional groups
note  optional groups are only intended for use when converting  functions that make multiple calls to pyargparsetuple  functions that use any other approach for parsing arguments should  almost never be converted to argument clinic using optional  groups
notes for every optional group one additional parameter will be passed  into the impl function representing the group
using real argument clinic converters instead of legacy converters
below is a table showing the mapping of legacy converters into realargument clinic converters
  on the left is the legacy converter onthe right is the text youd replace it with
pybuffer
advanced converters
parameter default values
the null default value
expressions specified as default values
using a return converter
cloning existing functions
calling python code
using a self converter
writing a custom converter
writing a custom return converter
metho and methnoargs
tpnew and tpinit functions
changing and redirecting clinics output
the ifdef trick
using argument clinic in python files
logging cookbook
author   vinay sajip vinaysajip at reddove dot comthis page contains a number of recipes related to logging which havebeen found useful in the past
using logging in multiple modules
multiple calls to logging
getloggersomelogger return a referenceto the same logger object
  this is true not only within the samemodule but also across modules as long as it is in the same pythoninterpreter process
  it is true for references to the same objectadditionally application code can define and configure a parentlogger in one module and create but not configure a child logger ina separate module and all logger calls to the child will pass up tothe parent
  here is a main module   import logging   import auxiliarymodule    create logger with spamapplication   logger  logging
somefunctionhere is the auxiliary module   import logging    create logger   modulelogger  logging
inforeceived a call to somefunctionthe output looks like this   20050323 234711663  spamapplication  info       creating an instance of auxiliarymodule
logging from multiple threads
multiple handlers and formatters
logging to multiple destinations
configuration server example
here is an example of a module using the logging configuration server   import logging   import logging
joinand here is a script that takes a filename and sends that file to theserver properly preceded with the binaryencoded length as the newlogging configuration   usrbinenv python   import socket sys struct   with opensys
dealing with handlers that block
sometimes you have to get your logging handlers to do their workwithout blocking the thread youre logging from
 this is common in webapplications though of course it also occurs in other scenarios
a common culprit which demonstrates sluggish behaviour is thesmtphandler sending emails can take a long time for a number ofreasons outside the developers control for example a poorlyperforming mail or network infrastructure
 but almost any networkbased handler can block even a sockethandler operation may do a dnsquery under the hood which is too slow and this query can be deep inthe socket library code below the python layer and outside yourcontrol
one solution is to use a twopart approach
 for the first part attachonly a queuehandler to those loggers which are accessed fromperformancecritical threads
 they simply write to their queue whichcan be sized to a large enough capacity or initialized with no upperbound to their size
 the write to the queue will typically be acceptedquickly though you will probably need to catch the queue
fullexception as a precaution in your code
 if you are a library developerwho has performancecritical threads in their code be sure todocument this together with a suggestion to attach onlyqueuehandlers to your loggers for the benefit of other developerswho will use your code
the second part of the solution is queuelistener which has beendesigned as the counterpart to queuehandler
  a queuelistener isvery simple its passed a queue and some handlers and it fires up aninternal thread which listens to its queue for logrecords sent fromqueuehandlers or any other source of logrecords for thatmatter
 the logrecords are removed from the queue and passed to thehandlers for processing
the advantage of having a separate queuelistener class is that youcan use the same instance to service multiple queuehandlers
 this ismore resourcefriendly than say having threaded versions of theexisting handler classes which would eat up one thread per handlerfor no particular benefit
an example of using these two classes follows imports omitted   que  queue
stopwhich when run will produce   mainthread look outchanged in version 3
5 prior to python 3
5 the queuelisteneralways passed every message received from the queue to every handlerit was initialized with
 this was because it was assumed that levelfiltering was all done on the other side where the queue is filled
from 3
5 onwards this behaviour can be changed by passing a keywordargument respecthandlerleveltrue to the listeners constructor
when this is done the listener compares the level of each messagewith the handlers level and only passes a message to a handler ifits appropriate to do so
sending and receiving logging events across a network
lets say you want to send logging events across a network and handlethem at the receiving end
 a simple way of doing this is attaching asockethandler instance to the root logger at the sending end   import logging logging
at the receiving end you can set up a receiver using thesocketserver module
 here is a basic working example   import pickle   import logging   import logging
serveuntilstopped   if name  main       mainfirst run the server and then the client
 on the client side nothingis printed on the console on the server side you should seesomething like   about to start tcp server
note that there are some security issues with pickle in somescenarios
 if these affect you you can use an alternativeserialization scheme by overriding the makepickle method andimplementing your alternative there as well as adapting the abovescript to use your alternative serialization
adding contextual information to your logging output
using loggeradapters to impart contextual information
using filters to impart contextual information
logging to a single file from multiple processes
using concurrentfuturesprocesspoolexecutor
using file rotation
use of alternative formatting styles
when logging was added to the python standard library the only way offormatting messages with variable content was to use the formattingmethod
 since then python has gained two new formatting approachesstring
template added in python 2
4 and str
format added inpython 2
6
logging as of 3
2 provides improved support for these two additionalformatting styles
 the formatter class been enhanced to take anadditional optional keyword parameter named style
 this defaults to but other possible values are  and  which correspondto the other two formatting styles
 backwards compatibility ismaintained by default as you would expect but by explicitlyspecifying a style parameter you get the ability to specify formatstrings which work with str
format or string
 heres anexample console session to show the possibilities    import logging    root  logging
bar critical this is a critical message   note that the formatting of logging messages for final output to logsis completely independent of how an individual logging message isconstructed
 that can still use formatting as shown here    logger
customizing logrecord
subclassing queuehandler  a zeromq example
subclassing queuelistener  a zeromq example
makelogrecordmsgsee also  module logging     api reference for the logging module
  module logging
config     configuration api for the logging module
  module logging
handlers     useful handlers included with the logging module
an example dictionarybased configuration
using a rotator and namer to customize log rotation processing
a more elaborate multiprocessing example
inserting a bom into messages sent to a sysloghandler
implementing structured logging
customizing handlers with dictconfig
using particular formatting styles throughout your application
using logrecord factories
using custom message objects
 you may recallfrom using arbitrary objects as messages that when logging you canuse an arbitrary object as a message format string and that thelogging package will call str on that object to get the actualformat string
 consider the following two classes   class bracemessage       def initself fmt  args kwargs           self
configuring filters with dictconfig
 as described in access to external objects
 for  example you could have used the text extmain
myfilter  instead of myfilter in the above example
 see userdefined objects for more  information on how logging supports using userdefined objects in  its configuration and see the other cookbook recipe customizing  handlers with dictconfig above
customized exception formatting
speaking logging messages
buffering logging messages and outputting them conditionally
there might be situations where you want to log messages in atemporary area and only output them if a certain condition occurs
 forexample you may want to start logging debug events in a function andif the function completes without errors you dont want to clutterthe log with the collected debug information but if there is anerror you want all the debug information to be output as well as theerror
here is an example which shows how you could do this using a decoratorfor your functions where you want logging to behave this way
 it makesuse of the logging
memoryhandler which allows buffering oflogged events until some condition occurs at which point the bufferedevents are flushed  passed to another handler the targethandler for processing
 by default the memoryhandler flushed whenits buffer gets filled up or an event whose level is greater than orequal to a specified threshold is seen
 you can use this recipe with amore specialised subclass of memoryhandler if you want customflushing behavior
the example script has a simple function foo which just cyclesthrough all the logging levels writing to sys
stderr to say whatlevel its about to log at and then actually logging a message atthat level
 you can pass a parameter to foo which if true will logat error and critical levels  otherwise it only logs at debug infoand warning levels
the script just arranges to decorate foo with a decorator which willdo the conditional logging thats required
 the decorator takes alogger as a parameter and attaches a memory handler for the durationof the call to the decorated function
 the decorator can beadditionally parameterised using a target handler a level at whichflushing should occur and a capacity for the buffer number ofrecords buffered
 these default to a streamhandler which writes tosys
stderr logging
error and 100 respectively
heres the script   import logging   from logging
debug       writelinecalling undecorated foo with false       assert not foofalse       writelinecalling undecorated foo with true       assert footrue       writelinecalling decorated foo with false       assert not decoratedfoofalse       writelinecalling decorated foo with true       assert decoratedfootruewhen this script is run the following output should be observed   calling undecorated foo with false   about to log at debug 
   actually logged at criticalas you can see actual logging output only occurs when an event islogged whose severity is error or greater but in that case anyprevious events at lower severities are also logged
you can of course use the conventional means of decoration   logiferrorslogger   def foofailfalse       
formatting times using utc gmt via configuration
sometimes you want to format times using utc which can be done usinga class such as utcformatter shown below   import logging   import time   class utcformatterlogging
gmtimeand you can then use the utcformatter in your code instead offormatter
 if you want to do that via configuration you can use thedictconfig api with an approach illustrated by the followingcomplete example   import logging   import logging
asctimewhen this script is run it should print something like   20151017 125329501 the local time is sat oct 17 135329 2015   20151017 135329501 the local time is sat oct 17 135329 2015showing how the time is formatted both as local time and utc one foreach handler
using a context manager for selective logging
there are times when it would be useful to temporarily change thelogging configuration and revert it back after doing something
 forthis a context manager is the most obvious way of saving andrestoring the logging context
 here is a simple example of such acontext manager which allows you to optionally change the logginglevel and add a logging handler purely in the scope of the contextmanager   import logging   import sys   class loggingcontext       def initself logger levelnone handlernone closetrue           self
close            implicit return of none  dont swallow exceptionsif you specify a level value the loggers level is set to that valuein the scope of the with block covered by the context manager
 if youspecify a handler it is added to the logger on entry to the block andremoved on exit from the block
 you can also ask the manager to closethe handler for you on block exit  you could do this if you dontneed the handler any more
to illustrate how it works we can add the following block of code tothe above   if name  main       logger  logging
we initially set the loggers level to info so message 1 appearsand message 2 doesnt
 we then change the level to debugtemporarily in the following with block and so message 3 appears
after the block exits the loggers level is restored to info and somessage 4 doesnt appear
 in the next with block we set the levelto debug again but also add a handler writing to sys
stdout
 thusmessage 5 appears twice on the console once via stderr and oncevia stdout
 after the with statements completion the status isas it was before so message 6 appears like message 1 whereasmessage 7 doesnt just like message 2
if we run the resulting script the result is as follows    python logctx
if we run it again but pipe stderr to devnull we see thefollowing which is the only message written to stdout    python logctx
once again but piping stdout to devnull we get    python logctx
in this case the message 5 printed to stdout doesnt appear asexpected
of course the approach described here can be generalised for exampleto attach logging filters temporarily
 note that the above code worksin python 2 as well as python 3
a cli application starter template
a qt gui for logging
unicode howto
release   1
12this howto discusses pythons support for the unicode specificationfor representing textual data and explains various problems thatpeople commonly encounter when trying to work with unicode
introduction to unicode
definitions
encodings
to summarize the previous section a unicode string is a sequence ofcode points which are numbers from 0 through 0x10ffff 1114111decimal
  this sequence of code points needs to be represented inmemory as a set of code units and code units are then mappedto 8bit bytes
  the rules for translating a unicode string into asequence of bytes are called a character encoding or just anencoding
the first encoding you might think of is using 32bit integers as thecode unit and then using the cpus representation of 32bit integers
in this representation the string python might look like this      p           y           t           h           o           n   0x50 00 00 00 79 00 00 00 74 00 00 00 68 00 00 00 6f 00 00 00 6e 00 00 00      0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23this representation is straightforward but using it presents a numberof problems
 its not portable different processors order the bytes   differently
 its very wasteful of space
  in most texts the majority of the   code points are less than 127 or less than 255 so a lot of space   is occupied by 0x00 bytes
  the above string takes 24 bytes   compared to the 6 bytes needed for an ascii representation
   increased ram usage doesnt matter too much desktop computers have   gigabytes of ram and strings arent usually that large but   expanding our usage of disk and network bandwidth by a factor of 4   is intolerable
references
pythons unicode support
the string type
python comes with roughly 100 different encodings see the pythonlibrary reference at standard encodings for a list
  some encodingshave multiple names for example latin1 iso88591 and8859 are all synonyms for the same encoding
converting to bytes
unicode literals in python source code
unicode properties
comparing strings
unicode regular expressions
references
the str type is described in the python library reference at textsequence type  str
reading and writing unicode data
unicode filenames
tips for writing unicodeaware programs
references
acknowledgements
logging howto
author   vinay sajip vinaysajip at reddove dot com
basic logging tutorial
when to use logging
a simple example
logging to a file
logging from multiple modules
if your program consists of multiple modules heres an example of howyou could organize logging in it    myapp
infodoing somethingif you run myapp
py you should see this in myapp
log   inforootstarted   inforootdoing something   inforootfinishedwhich is hopefully what you were expecting to see
 you can generalizethis to multiple modules using the pattern in mylib
py
 note thatfor this simple usage pattern you wont know by looking in the logfile where in your application your messages came from apart fromlooking at the event description
 if you want to track the location ofyour messages youll need to refer to the documentation beyond thetutorial level  see advanced logging tutorial
logging variable data
to log variable data use a format string for the event descriptionmessage and append the variable data as arguments
 for example   import logging   logging
warnings before you s look leapwill display   warningrootlook before you leapas you can see merging of variable data into the event descriptionmessage uses the old style of string formatting
 this is forbackwards compatibility the logging package predates newerformatting options such as str
format and string
 thesenewer formatting options are supported but exploring them isoutside the scope of this tutorial see using particular formattingstyles throughout your application for more information
changing the format of displayed messages
to change the format which is used to display messages you need tospecify the format you want to use   import logging   logging
warningand this toowhich would print   debugthis message should appear on the console   infoso should this   warningand this toonotice that the root which appeared in earlier examples hasdisappeared
 for a full set of things that can appear in formatstrings you can refer to the documentation for logrecord attributesbut for simple usage you just need the levelname severitymessage event description including variable data and perhaps todisplay when the event occurred
 this is described in the nextsection
displaying the datetime in messages
to display the date and time of an event you would placeasctimes in your format string   import logging   logging
which should print something like this   20101212 114142612 is when this event was logged
the default format for datetime display shown above is like iso8601or rfc 3339
 if you need more control over the formatting of thedatetime provide a datefmt argument to basicconfig as in thisexample   import logging   logging
which would display something like this   12122010 114636 am is when this event was logged
the format of the datefmt argument is the same as supported bytime
strftime
next steps
that concludes the basic tutorial
 it should be enough to get you upand running with logging
 theres a lot more that the logging packageoffers but to get the best out of it youll need to invest a littlemore of your time in reading the following sections
 if youre readyfor that grab some of your favourite beverage and carry on
if your logging needs are simple then use the above examples toincorporate logging into your own scripts and if you run intoproblems or dont understand something please post a question on thecomp
python usenet group available athttpsgroups
python and youshould receive help before too long
still here you can carry on reading the next few sections whichprovide a slightly more advancedindepth tutorial than the basic oneabove
 after that you can take a look at the logging cookbook
advanced logging tutorial
the logging library takes a modular approach and offers severalcategories of components loggers handlers filters and formatters
 loggers expose the interface that application code directly uses
 handlers send the log records created by loggers to the  appropriate destination
 filters provide a finer grained facility for determining which log  records to output
 formatters specify the layout of log records in the final output
log event information is passed between loggers handlers filters andformatters in a logrecord instance
logging is performed by calling methods on instances of the loggerclass hereafter called loggers
 each instance has a name and theyare conceptually arranged in a namespace hierarchy using dotsperiods as separators
 for example a logger named scan is theparent of loggers scan
text scan
html and scan
pdf
 loggernames can be anything you want and indicate the area of anapplication in which a logged message originates
a good convention to use when naming loggers is to use a modulelevellogger in each module which uses logging named as follows   logger  logging
getloggernamethis means that logger names track the packagemodule hierarchy andits intuitively obvious where events are logged just from the loggername
the root of the hierarchy of loggers is called the root logger
 thatsthe logger used by the functions debug info warningerror and critical which just call the samenamed method ofthe root logger
 the functions and the methods have the samesignatures
 the root loggers name is printed as root in the loggedoutput
it is of course possible to log messages to different destinations
support is included in the package for writing log messages to fileshttp getpost locations email via smtp generic sockets queues orosspecific logging mechanisms such as syslog or the windows nt eventlog
 destinations are served by handler classes
 you can create yourown log destination class if you have special requirements not met byany of the builtin handler classes
by default no destination is set for any logging messages
 you canspecify a destination such as console or file by usingbasicconfig as in the tutorial examples
 if you call the functionsdebug info warning error and critical theywill check to see if no destination is set and if one is not setthey will set a destination of the console sys
stderr and adefault format for the displayed message before delegating to the rootlogger to do the actual message output
the default format set by basicconfig for messages is   severitylogger namemessageyou can change this by passing a format string to basicconfig withthe format keyword argument
 for all options regarding how a formatstring is constructed see formatter objects
logging flow
the flow of log event information in loggers and handlers isillustrated in the following diagram
image
loggers
handlers
handler objects are responsible for dispatching the appropriate logmessages based on the log messages severity to the handlersspecified destination
  logger objects can add zero or more handlerobjects to themselves with an addhandler method
  as an examplescenario an application may want to send all log messages to a logfile all log messages of error or higher to stdout and all messagesof critical to an email address
 this scenario requires threeindividual handlers where each handler is responsible for sendingmessages of a specific severity to a specific location
the standard library includes quite a few handler types see usefulhandlers the tutorials use mainly streamhandler and filehandlerin its examples
there are very few methods in a handler for application developers toconcern themselves with
  the only handler methods that seem relevantfor application developers who are using the builtin handler objectsthat is not creating custom handlers are the followingconfiguration methods the setlevel method just as in logger objects specifies the  lowest severity that will be dispatched to the appropriate  destination
  why are there two setlevel methods  the level set  in the logger determines which severity of messages it will pass to  its handlers
  the level set in each handler determines which  messages that handler will send on
 setformatter selects a formatter object for this handler to use
 addfilter and removefilter respectively configure and  deconfigure filter objects on handlers
application code should not directly instantiate and use instances ofhandler
  instead the handler class is a base class that definesthe interface that all handlers should have and establishes somedefault behavior that child classes can use or override
formatters
formatter objects configure the final order structure and contentsof the log message
  unlike the base logging
handler classapplication code may instantiate formatter classes although you couldlikely subclass the formatter if your application needs specialbehavior
  the constructor takes three optional arguments  a messageformat string a date format string and a style indicator
initfmtnone datefmtnone styleif there is no message format string the default is to use the rawmessage
  if there is no date format string the default date formatis   ymd hmswith the milliseconds tacked on at the end
 the style is one of  or 
 if one of these is not specified then  will be used
if the style is  the message format string uses dictionarykeys styled string substitution the possible keys are documentedin logrecord attributes
 if the style is  the message formatstring is assumed to be compatible with str
format using keywordarguments while if the style is  then the message format stringshould conform to what is expected by string
substitute
changed in version 3
2 added the style parameter
the following message format string will log the time in a humanreadable format the severity of the message and the contents of themessage in that order   asctimes  levelnames  messagesformatters use a userconfigurable function to convert the creationtime of a record to a tuple
 by default time
localtime is usedto change this for a particular formatter instance set theconverter attribute of the instance to a function with the samesignature as time
localtime or time
gmtime
 to change it forall formatters for example if you want all logging times to be shownin gmt set the converter attribute in the formatter class totime
gmtime for gmt display
configuring logging
programmers can configure logging in three ways1
 creating loggers handlers and formatters explicitly using python   code that calls the configuration methods listed above
 creating a logging config file and reading it using the   fileconfig function
 creating a dictionary of configuration information and passing it   to the dictconfig function
for the reference documentation on the last two options seeconfiguration functions
  the following example configures a verysimple logger a console handler and a simple formatter using pythoncode   import logging    create logger   logger  logging
criticalcritical messagerunning this module from the command line produces the followingoutput    python simpleloggingmodule
py   20050319 151026618  simpleexample  debug  debug message   20050319 151026620  simpleexample  info  info message   20050319 151026695  simpleexample  warning  warn message   20050319 151026697  simpleexample  error  error message   20050319 151026773  simpleexample  critical  critical messagethe following python module creates a logger handler and formatternearly identical to those in the example listed above with the onlydifference being the names of the objects   import logging   import logging
criticalcritical messagehere is the logging
conf file   loggers   keysrootsimpleexample   handlers   keysconsolehandler   formatters   keyssimpleformatter   loggerroot   leveldebug   handlersconsolehandler   loggersimpleexample   leveldebug   handlersconsolehandler   qualnamesimpleexample   propagate0   handlerconsolehandler   classstreamhandler   leveldebug   formattersimpleformatter   argssys
stdout   formattersimpleformatter   formatasctimes  names  levelnames  messages   datefmtthe output is nearly identical to that of the nonconfigfilebasedexample    python simpleloggingconfig
py   20050319 153855977  simpleexample  debug  debug message   20050319 153855979  simpleexample  info  info message   20050319 153856054  simpleexample  warning  warn message   20050319 153856055  simpleexample  error  error message   20050319 153856130  simpleexample  critical  critical messageyou can see that the config file approach has a few advantages overthe python code approach mainly separation of configuration and codeand the ability of noncoders to easily modify the logging properties
warning  the fileconfig function takes a default parameter  disableexistingloggers which defaults to true for reasons of  backward compatibility
 this may or may not be what you want since  it will cause any nonroot loggers existing before the  fileconfig call to be disabled unless they or an ancestor are  explicitly named in the configuration
 please refer to the reference  documentation for more information and specify false for this  parameter if you wish
the dictionary passed to dictconfig can  also specify a boolean value with key disableexistingloggers  which if not specified explicitly in the dictionary also defaults to  being interpreted as true
 this leads to the loggerdisabling  behaviour described above which may not be what you want  in which  case provide the key explicitly with a value of false
note that the class names referenced in config files need to be eitherrelative to the logging module or absolute values which can beresolved using normal import mechanisms
 thus you could use eitherwatchedfilehandler relative to the logging module ormypackage
myhandler for a class defined in packagemypackage and module mymodule where mypackage is available onthe python import path
in python 3
2 a new means of configuring logging has been introducedusing dictionaries to hold configuration information
 this provides asuperset of the functionality of the configfilebased approachoutlined above and is the recommended configuration method for newapplications and deployments
 because a python dictionary is used tohold configuration information and since you can populate thatdictionary using different means you have more options forconfiguration
 for example you can use a configuration file in jsonformat or if you have access to yaml processing functionality afile in yaml format to populate the configuration dictionary
 or ofcourse you can construct the dictionary in python code receive it inpickled form over a socket or use whatever approach makes sense foryour application
heres an example of the same configuration as above in yaml formatfor the new dictionarybased approach   version 1   formatters     simple       format asctimes  names  levelnames  messages   handlers     console       class logging
stdout   loggers     simpleexample       level debug       handlers console       propagate no   root     level debug     handlers consolefor more information about logging using a dictionary seeconfiguration functions
what happens if no configuration is provided
if no logging configuration is provided it is possible to have asituation where a logging event needs to be output but no handlerscan be found to output the event
 the behaviour of the logging packagein these circumstances is dependent on the python version
for versions of python prior to 3
2 the behaviour is as follows if logging
raiseexceptions is false production mode the event  is silently dropped
 if logging
raiseexceptions is true development mode a message  no handlers could be found for logger x
z is printed once
in python 3
2 and later the behaviour is as follows the event is output using a handler of last resort stored in  logging
lastresort
 this internal handler is not associated with  any logger and acts like a streamhandler which writes the event  description message to the current value of sys
stderr therefore  respecting any redirections which may be in effect
 no formatting  is done on the message  just the bare event description message is  printed
 the handlers level is set to warning so all events at  this and greater severities will be output
to obtain the pre3
2 behaviour logging
lastresort can be set tonone
configuring logging for a library
logging levels
the numeric values of logging levels are given in the following table
these are primarily of interest if you want to define your own levelsand need them to have specific values relative to the predefinedlevels
 if you define a level with the same numeric value itoverwrites the predefined value the predefined name is lost
 level           numeric value    critical      50               error         40               warning       30               info          20               debug         10               notset        0               levels can also be associated with loggers being set either by thedeveloper or through loading a saved logging configuration
 when alogging method is called on a logger the logger compares its ownlevel with the level associated with the method call
 if the loggerslevel is higher than the method calls no logging message is actuallygenerated
 this is the basic mechanism controlling the verbosity oflogging output
logging messages are encoded as instances of the logrecord class
when a logger decides to actually log an event a logrecord instanceis created from the logging message
logging messages are subjected to a dispatch mechanism through the useof handlers which are instances of subclasses of the handlerclass
 handlers are responsible for ensuring that a logged message inthe form of a logrecord ends up in a particular location or set oflocations which is useful for the target audience for that messagesuch as end users support desk staff system administratorsdevelopers
 handlers are passed logrecord instances intended forparticular destinations
 each logger can have zero one or morehandlers associated with it via the addhandler method oflogger
 in addition to any handlers directly associated with alogger all handlers associated with all ancestors of the logger arecalled to dispatch the message unless the propagate flag for alogger is set to a false value at which point the passing to ancestorhandlers stops
just as for loggers handlers can have levels associated with them
 ahandlers level acts as a filter in the same way as a loggers leveldoes
 if a handler decides to actually dispatch an event the emitmethod is used to send the message to its destination
 most userdefined subclasses of handler will need to override this emit
custom levels
defining your own levels is possible but should not be necessary asthe existing levels have been chosen on the basis of practicalexperience
 however if you are convinced that you need custom levelsgreat care should be exercised when doing this and it is possibly avery bad idea to define custom levels if you are developing alibrary
 thats because if multiple library authors all define theirown custom levels there is a chance that the logging output from suchmultiple libraries used together will be difficult for the usingdeveloper to control andor interpret because a given numeric valuemight mean different things for different libraries
useful handlers
exceptions raised during logging
the logging package is designed to swallow exceptions which occurwhile logging in production
 this is so that errors which occur whilehandling logging events  such as logging misconfiguration network orother similar errors  do not cause the application using logging toterminate prematurely
systemexit and keyboardinterrupt exceptions are never swallowed
other exceptions which occur during the emit method of a handlersubclass are passed to its handleerror method
the default implementation of handleerror in handler checks tosee if a modulelevel variable raiseexceptions is set
 if set atraceback is printed to sys
stderr
 if not set the exception isswallowed
note  the default value of raiseexceptions is true
 this is because  during development you typically want to be notified of any  exceptions that occur
 its advised that you set raiseexceptions  to false for production usage
using arbitrary objects as messages
optimization
argparse tutorial
author   tshepang lekhonkhobethis tutorial is intended to be a gentle introduction to argparsethe recommended commandline parsing module in the python standardlibrary
note  there are two other modules that fulfill the same task namely  getopt an equivalent for getopt from the c language and the  deprecated optparse
 note also that argparse is based on  optparse and therefore very similar in terms of usage
concepts
lets show the sort of functionality that we are going to explore inthis introductory tutorial by making use of the ls command    ls   cpython  devguide  prog
a few concepts we can learn from the four commands the ls command is useful when run without any options at all
 it  defaults to displaying the contents of the current directory
 if we want beyond what it provides by default we tell it a bit  more
 in this case we want it to display a different directory  pypy
 what we did is specify what is known as a positional  argument
 its named so because the program should know what to do  with the value solely based on where it appears on the command  line
 this concept is more relevant to a command like cp whose  most basic usage is cp src dest
 the first position is what you  want copied and the second position is where you want it copied  to
 now say we want to change behaviour of the program
 in our example  we display more info for each file instead of just showing the file  names
 the l in that case is known as an optional argument
 thats a snippet of the help text
 its very useful in that you can  come across a program you have never used before and can figure out  how it works simply by reading its help text
the basics
introducing positional arguments
introducing optional arguments
so far we have been playing with positional arguments
 let us have alook on how to add optional ones   import argparse   parser  argparse
verbosity       printverbosity turned onand the output    python3 prog
py error argument verbosity expected one argumenthere is what is happening the program is written so as to display something when verbosity  is specified and display nothing when not
 to show that the option is actually optional there is no error when  running the program without it
 note that by default if an optional  argument isnt used the relevant variable in this case  args
verbosity is given none as a value which is the reason it  fails the truth test of the if statement
 the help message is a bit different
 when using the verbosity option one must also specify some  value any value
the above example accepts arbitrary integer values for verbositybut for our simple program only two values are actually usefultrue or false
 lets modify the code accordingly   import argparse   parser  argparse
verbose       printverbosity turned onand the output    python3 prog
py h verbose   optional arguments     h help  show this help message and exit     verbose   increase output verbosityhere is what is happening the option is now more of a flag than something that requires a  value
 we even changed the name of the option to match that idea
  note that we now specify a new keyword action and give it the  value storetrue
 this means that if the option is specified  assign the value true to args
verbose
 not specifying it implies  false
 it complains when you specify a value in true spirit of what flags  actually are
 notice the different help text
short options
if you are familiar with command line usage you will notice that ihavent yet touched on the topic of short versions of the options
its quite simple   import argparse   parser  argparse
verbose       printverbosity turned onand here goes    python3 prog
py h v   optional arguments     h help     show this help message and exit     v verbose  increase output verbositynote that the new ability is also reflected in the help text
combining positional and optional arguments
getting a little more advanced
what if we wanted to expand our tiny program to perform other powersnot just squares   import argparse   parser  argparse
y answer   else       printansweroutput    python3 prog
py 4 2 v   42  16notice that so far weve been using verbosity level to change thetext that gets displayed
 the following example instead uses verbositylevel to display more text instead   import argparse   parser  argparse
y end   printansweroutput    python3 prog
conflicting options
conclusion
the argparse module offers a lot more than shown here
 its docs arequite detailed and thorough and full of examples
 having gone throughthis tutorial you should easily digest them without feelingoverwhelmed
functional programming howto
introduction
formal provability
a theoretical benefit is that its easier to construct a mathematicalproof that a functional program is correct
for a long time researchers have been interested in finding ways tomathematically prove programs correct
  this is different from testinga program on numerous inputs and concluding that its output is usuallycorrect or reading a programs source code and concluding that thecode looks right the goal is instead a rigorous proof that a programproduces the right result for all possible inputs
the technique used to prove programs correct is to write downinvariants properties of the input data and of the programsvariables that are always true
  for each line of code you then showthat if invariants x and y are true before the line is executedthe slightly different invariants x and y are true after theline is executed
  this continues until you reach the end of theprogram at which point the invariants should match the desiredconditions on the programs output
functional programmings avoidance of assignments arose becauseassignments are difficult to handle with this technique assignmentscan break invariants that were true before the assignment withoutproducing any new invariants that can be propagated onward
unfortunately proving programs correct is largely impractical and notrelevant to python software
 even trivial programs require proofs thatare several pages long the proof of correctness for a moderatelycomplicated program would be enormous and few or none of the programsyou use daily the python interpreter your xml parser your webbrowser could be proven correct
  even if you wrote down or generateda proof there would then be the question of verifying the proofmaybe theres an error in it and you wrongly believe youve provedthe program correct
modularity
ease of debugging and testing
testing and debugging a functionalstyle program is easier
debugging is simplified because functions are generally small andclearly specified
  when a program doesnt work each function is aninterface point where you can check that the data are correct
  youcan look at the intermediate inputs and outputs to quickly isolate thefunction thats responsible for a bug
testing is easier because each function is a potential subject for aunit test
 functions dont depend on system state that needs to bereplicated before running a test instead you only have to synthesizethe right input and then check that the output matches expectations
composability
as you work on a functionalstyle program youll write a number offunctions with varying inputs and outputs
  some of these functionswill be unavoidably specialized to a particular application butothers will be useful in a wide variety of programs
  for example afunction that takes a directory path and returns all the xml files inthe directory or a function that takes a filename and returns itscontents can be applied to many different situations
over time youll form a personal library of utilities
  often youllassemble new programs by arranging existing functions in a newconfiguration and writing a few functions specialized for the currenttask
iterators
data types that support iterators
weve already seen how lists and tuples support iterators
  in factany python sequence type such as strings will automatically supportcreation of an iterator
calling iter on a dictionary returns an iterator that will loopover the dictionarys keys    m  jan 1 feb 2 mar 3 apr 4 may 5 jun 6   
     printkey mkey   jan 1   feb 2   mar 3   apr 4   may 5   jun 6   jul 7   aug 8   sep 9   oct 10   nov 11   dec 12note that starting with python 3
7 dictionary iteration order isguaranteed to be the same as the insertion order
 in earlier versionsthe behaviour was unspecified and could vary between implementations
applying iter to a dictionary always loops over the keys butdictionaries have methods that return other iterators
  if you want toiterate over values or keyvalue pairs you can explicitly call thevalues or items methods to get an appropriate iterator
the dict constructor can accept an iterator that returns a finitestream of key value tuples l  italy rome france paris us washington dc dictiterlitaly rome france paris us washington dcfiles also support iteration by calling the readline method untilthere are no more lines in the file
  this means you can read eachline of a file like this   for line in file        do something for each line       
sets can take their contents from an iterable and let you iterate overthe sets elements   s  2 3 5 7 11 13   for i in s       printi
generator expressions and list comprehensions
two common operations on an iterators output are 1 performing someoperation for every element 2 selecting a subset of elements thatmeet some condition
 for example given a list of strings you mightwant to strip off trailing whitespace from each line or extract allthe strings containing a given substring
list comprehensions and generator expressions short form listcompsand genexps are a concise notation for such operations borrowedfrom the functional programming language haskellhttpswww
org
  you can strip all the whitespace from astream of strings with the following code   linelist    line 1n line 2  n 
strip for line in linelistyou can select only certain elements by adding an if condition   strippedlist  line
strip for line in linelist                    if line  with a list comprehension you get back a python list strippedlistis a list containing the resulting lines not an iterator
  generatorexpressions return an iterator that computes the values as necessarynot needing to materialize all the values at once
  this means thatlist comprehensions arent useful if youre working with iteratorsthat return an infinite stream or a very large amount of data
generator expressions are preferable in these situations
generator expressions are surrounded by parentheses  and listcomprehensions are surrounded by square brackets 
  generatorexpressions have the form    expression for expr in sequence1                if condition1                for expr2 in sequence2                if condition2                for expr3 in sequence3 
                if condition3                for exprn in sequencen                if conditionn again for a list comprehension only the outside brackets aredifferent square brackets instead of parentheses
the elements of the generated output will be the successive values ofexpression
  the if clauses are all optional if presentexpression is only evaluated and added to the result whencondition is true
generator expressions always have to be written inside parenthesesbut the parentheses signalling a function call also count
  if youwant to create an iterator that will be immediately passed to afunction you can write   objtotal  sumobj
count for obj in listallobjectsthe for
in clauses contain the sequences to be iterated over
  thesequences do not have to be the same length because they are iteratedover from left to right not in parallel
  for each element insequence1 sequence2 is looped over from the beginning
sequence3 is then looped over for each resulting pair of elementsfrom sequence1 and sequence2
to put it another way a list comprehension or generator expression isequivalent to the following python code   for expr1 in sequence1       if not condition1           continue    skip this element       for expr2 in sequence2           if not condition2               continue    skip this element           
this means that when there are multiple for
in clauses but no ifclauses the length of the resulting output will be equal to theproduct of the lengths of all the sequences
  if you have two lists oflength 3 the output list is 9 elements long seq1  abc seq2  1 2 3 x y for x in seq1 for y in seq2  a 1 a 2 a 3 b 1 b 2 b 3 c 1 c 2 c 3to avoid introducing an ambiguity into pythons grammar ifexpression is creating a tuple it must be surrounded withparentheses
  the first list comprehension below is a syntax errorwhile the second one is correct    syntax error   x y for x in seq1 for y in seq2    correct   x y for x in seq1 for y in seq2
generators
passing values into a generator
builtin functions
the itertools module
the itertools module contains a number of commonlyused iterators aswell as functions for combining several iterators
  this section willintroduce the modules contents by showing small examples
the modules functions fall into a few broad classes functions that create a new iterator based on an existing iterator
 functions for treating an iterators elements as function arguments
 functions for selecting portions of an iterators output
 a function for grouping an iterators output
creating new iterators
countstart step returns an infinite stream of evenlyspaced values
  you can optionally supply the starting number whichdefaults to 0 and the interval between numbers which defaults to 1   itertools
cycleiter saves a copy of the contents of a providediterable and returns a new iterator that returns its elements fromfirst to last
  the new iterator will repeat these elementsinfinitely
   itertools
repeatelem n returns the provided element n timesor returns the element endlessly if n is not provided
 takes an arbitrary number ofiterables as input and returns all the elements of the firstiterator then all the elements of the second and so on until all ofthe iterables have been exhausted
isliceiter start stop step returns a streamthats a slice of the iterator
  with a single stop argument itwill return the first stop elements
  if you supply a startingindex youll get stopstart elements and if you supply a value forstep elements will be skipped accordingly
  unlike pythons stringand list slicing you cant use negative values for start stopor step
   itertools
teeiter n replicates an iterator it returns nindependent iterators that will all return the contents of the sourceiterator
 if you dont supply a value for n the default is 2
replicating iterators requires saving some of the contents of thesource iterator so this can consume significant memory if theiterator is large and one of the new iterators is consumed more thanthe others
calling functions on elements
the operator module contains a set of functions corresponding topythons operators
  some examples are operator
adda b adds twovalues operator
nea b same as a  b andoperator
attrgetterid returns a callable that fetches the 
idattribute
starmapfunc iter assumes that the iterable will returna stream of tuples and calls func using these tuples as thearguments   itertools
selecting elements
another group of functions chooses a subset of an iterators elementsbased on a predicate
filterfalsepredicate iter is the opposite offilter returning all elements for which the predicate returnsfalse   itertools
takewhilepredicate iter returns elements for as long asthe predicate returns true
  once the predicate returns false theiterator will signal the end of its results
   def lessthan10x       return x  10   itertools
dropwhilepredicate iter discards elements while thepredicate returns true and then returns the rest of the iterablesresults
   itertools
compressdata selectors takes two iterators and returnsonly those elements of data for which the corresponding element ofselectors is true stopping whenever either one is exhausted   itertools
combinatoric functions
the itertools
combinationsiterable r returns an iterator givingall possible rtuple combinations of the elements contained initerable
   itertools
combinations1 2 3 4 5 3      1 2 3 1 2 4 1 2 5 1 3 4 1 3 5 1 4 5     2 3 4 2 3 5 2 4 5     3 4 5the elements within each tuple remain in the same order as iterablereturned them
  for example the number 1 is always before 2 3 4 or5 in the examples above
  a similar functionitertools
permutationsiterable rnone removes this constraint onthe order returning all possible arrangements of length r   itertools
     5 4 3 2 1if you dont supply a value for r the length of the iterable isused meaning that all the elements are permuted
note that these functions produce all of the possible combinations byposition and dont require that the contents of iterable are unique   itertools
permutationsaba 3      a b a a a b b a a     b a a a a b a b athe identical tuple a a b occurs twice but the two astrings came from different positions
the itertools
combinationswithreplacementiterable r functionrelaxes a different constraint elements can be repeated within asingle tuple
  conceptually an element is selected for the firstposition of each tuple and then is replaced before the second elementis selected
   itertools
grouping elements
the last function ill discuss itertools
groupbyiterkeyfuncnone is the most complicated
  keyfuncelem is afunction that can compute a key value for each element returned by theiterable
  if you dont supply a key function the key is simply eachelement itself
groupby collects all the consecutive elements from the underlyingiterable that have the same key value and returns a stream of2tuples containing a key value and an iterator for the elements withthat key
   where   iterator1      decatur al huntsville al selma al   iterator2      anchorage ak nome ak   iterator3      flagstaff az phoenix az tucson azgroupby assumes that the underlying iterables contents willalready be sorted based on the key
  note that the returned iteratorsalso use the underlying iterable so you have to consume the resultsof iterator1 before requesting iterator2 and its corresponding key
the functools module
the functools module in python 2
5 contains some higherorderfunctions
 a higherorder function takes one or more functions asinput and returns a new function
  the most useful tool in this moduleis the functools
partial function
for programs written in a functional style youll sometimes want toconstruct variants of existing functions that have some of theparameters filled in
 consider a python function fa b c you maywish to create a new function gb c thats equivalent to f1 bc youre filling in a value for one of fs parameters
  this iscalled partial function application
the constructor for partial takes the arguments function arg1arg2 
 kwarg1value1 kwarg2value2
  the resulting object iscallable so you can just call it to invoke function with thefilledin arguments
heres a small but realistic example   import functools   def logmessage subsystem       write the contents of message to the specified subsystem
reducefunc iter initialvalue cumulatively performsan operation on all the iterables elements and therefore cant beapplied to infinite iterables
 func must be a function that takestwo elements and returns a single value
  functools
reduce takesthe first two elements a and b returned by the iterator and calculatesfunca b
  it then requests the third element c calculatesfuncfunca b c combines this result with the fourth elementreturned and continues until the iterable is exhausted
  if theiterable returns no values at all a typeerror exception is raised
if the initial value is supplied its used as a starting point andfuncinitialvalue a is the first calculation
    import operator functools    functools
mul  1   1if you use operator
add with functools
reduce youll add upall the elements of the iterable
  this case is so common that theresa special builtin called sum to compute it import functools operator functools
add 1 2 3 4 010 sum1 2 3 410 sum0for many uses of functools
reduce though it can be clearer tojust write the obvious for loop   import functools    instead of   product  functools
mul 1 2 3 1    you can write   product  1   for i in 1 2 3       product  ia related function is itertools
accumulateiterablefuncoperator
  it performs the same calculation but instead ofreturning only the final result accumulate returns an iteratorthat also yields each partial result   itertools
the operator module
the operator module was mentioned earlier
  it contains a set offunctions corresponding to pythons operators
  these functions areoften useful in functionalstyle code because they save you fromwriting trivial functions that perform a single operation
some of the functions in this module are math operations add sub mul floordiv abs  
 logical operations not truth
 bitwise operations and or invert
 comparisons eq ne lt le gt and ge
 object identity is isnot
consult the operator modules documentation for a complete list
small functions and the lambda expression
when writing functionalstyle programs youll often need littlefunctions that act as predicates or that combine elements in some way
if theres a python builtin or a module function thats suitable youdont need to define a new function at all   strippedlines  line
exists filelistif the function you need doesnt exist you need to write it
  one wayto write small functions is to use the lambda expression
  lambdatakes a number of parameters and an expression combining theseparameters and creates an anonymous function that returns the valueof the expression   adder  lambda x y xy   printassign  lambda name value name    strvaluean alternative is to just use the def statement and define afunction in the usual way   def adderx y       return x  y   def printassignname value       return name    strvaluewhich alternative is preferable  thats a style question my usualcourse is to avoid using lambda
one reason for my preference is that lambda is quite limited in thefunctions it can define
  the result has to be computable as a singleexpression which means you cant have multiway if
 elsecomparisons or try
 except statements
  if you try to do too muchin a lambda statement youll end up with an overly complicatedexpression thats hard to read
  quick whats the following codedoing   import functools   total  functools
reducelambda a b 0 a1  b1 items1you can figure it out but it takes time to disentangle the expressionto figure out whats going on
  using a short nested def statementsmakes things a little bit better   import functools   def combinea b       return 0 a1  b1   total  functools
reducecombine items1but it would be best of all if i had simply used a for loop   total  0   for a b in items       total  bor the sum builtin and a generator expression   total  sumb for a b in itemsmany uses of functools
reduce are clearer when written as forloops
fredrik lundh once suggested the following set of rules forrefactoring uses of lambda1
 write a lambda function
 write a comment explaining what the heck that lambda does
 study the comment for a while and think of a name that captures   the essence of the comment
 convert the lambda to a def statement using that name
 remove the comment
i really like these rules but youre free to disagree about whetherthis lambdafree style is better
revision history and acknowledgements
the author would like to thank the following people for offeringsuggestions corrections and assistance with various drafts of thisarticle ian bicking nick coghlan nick efford raymond hettingerjim jewett mike krell leandro lameiro jussi salmela collin winterblake winton
version 0
1 posted june 30 2006
version 0
11 posted july 1 2006
  typo fixes
version 0
2 posted july 10 2006
  merged genexp and listcomp sectionsinto one
 typo fixes
version 0
21 added more references suggested on the tutor mailinglist
version 0
30 adds a section on the functional module written bycollin winter adds short section on the operator module a few otheredits
references
general
structure and interpretation of computer programs by haroldabelson and gerald jay sussman with julie sussman
  full text athttpsmitpress
edusicp
  in this classic textbook of computerscience chapters 2 and 3 discuss the use of sequences and streams toorganize the data flow inside a program
  the book uses scheme for itsexamples but many of the design approaches described in thesechapters are applicable to functionalstyle python code
html a general introduction tofunctional programming that uses java examples and has a lengthyhistorical introduction
orgwikifunctionalprogramming generalwikipedia entry describing functional programming
orgwikicoroutine entry for coroutines
orgwikicurrying entry for the concept ofcurrying
pythonspecific
cxtpip the first chapter of david mertzs book textprocessing in python discusses functional programming for textprocessing in the section titled utilizing higherorder functions intext processing
mertz also wrote a 3part series of articles on functional programmingfor ibms developerworks site see part 1 part 2 and part 3
python documentation
documentation for the itertools module
documentation for the functools module
documentation for the operator module
pep 289 generator expressionspep 342 coroutines via enhanced generators describes the newgenerator features in python 2
5
instrumenting cpython with dtrace and systemtap
author   david malcolmauthor   łukasz langadtrace and systemtap are monitoring tools each providing a way toinspect what the processes on a computer system are doing
  they bothuse domainspecific languages allowing a user to write scripts which    filter which processes are to be observed    gather data from the processes of interest    generate reports on the dataas of python 3
6 cpython can be built with embedded markers alsoknown as probes that can be observed by a dtrace or systemtapscript making it easier to monitor what the cpython processes on asystem are doing
cpython implementation detail dtrace markers are implementationdetails of the cpython interpreter
 no guarantees are made about probecompatibility between versions of cpython
 dtrace scripts can stopworking or work incorrectly without warning when changing cpythonversions
enabling the static markers
macos comes with builtin support for dtrace
  on linux in order tobuild cpython with the embedded markers for systemtap the systemtapdevelopment tools must be installed
on a linux machine this can be done via    yum install systemtapsdtdevelor    sudo aptget install systemtapsdtdevcpython must then be configured withdtrace   checking for withdtrace
 yeson macos you can list available dtrace probes by running a pythonprocess in the background and listing all probes made available by thepython provider    python3
6                 maybedtraceline lineon linux you can verify if the systemtap static markers are presentin the built binary by seeing if it contains a 
stapsdtsection
stapsdt        note         0000000000000000 00308d78if youve built python as a shared library with enableshared youneed to look instead within the shared library
  for example    readelf s libpython3
stapsdt        note         0000000000000000 00365b68sufficiently modern readelf can print the metadata    readelf n 
32   displaying notes found at file offset 0x00000274 with length 0x00000024       owner                 data size          description       gnu                  0x00000014          ntgnubuildid unique build id bitstring           build id df924a2b08a7e89f6e11251d4602022977af2670   displaying notes found at file offset 0x002d6c30 with length 0x00000144       owner                 data size          description       stapsdt              0x00000031          ntstapsdt systemtap probe descriptors           provider python           name gcstart           location 0x00000000004371c3 base 0x0000000000630ce2 semaphore 0x00000000008d6bf6           arguments 4ebx       stapsdt              0x00000030          ntstapsdt systemtap probe descriptors           provider python           name gcdone           location 0x00000000004374e1 base 0x0000000000630ce2 semaphore 0x00000000008d6bf8           arguments 8rax       stapsdt              0x00000045          ntstapsdt systemtap probe descriptors           provider python           name functionentry           location 0x000000000053db6c base 0x0000000000630ce2 semaphore 0x00000000008d6be8           arguments 8rbp 8r12 4eax       stapsdt              0x00000046          ntstapsdt systemtap probe descriptors           provider python           name functionreturn           location 0x000000000053dba8 base 0x0000000000630ce2 semaphore 0x00000000008d6bea           arguments 8rbp 8r12 4eaxthe above metadata contains information for systemtap describing howit can patch strategicallyplaced machine code instructions to enablethe tracing hooks used by a systemtap script
static dtrace probes
static systemtap markers
the lowlevel way to use the systemtap integration is to use thestatic markers directly
  this requires you to explicitly state thebinary file containing them
for example this systemtap script can be used to show the callreturnhierarchy of a python script   probe processpython
markfunctionreturn        filename  userstringarg1       funcname  userstringarg2       lineno  arg3       printfs  s in sdn              threadindent1 funcname filename lineno   it can be invoked like this    stap      showcallhierarchy
pythe output looks like this   11408 python8274         contains in libabcoll
py366where the columns are    time in microseconds since start of script    name of executable    pid of processand the remainder indicates the callreturn hierarchy as the scriptexecutes
for a enableshared build of cpython the markers are containedwithin the libpython shared library and the probes dotted path needsto reflect this
 for example this line from the above example   probe processpython
markfunctionentry should instead read   probe processpython
markfunctionentry assuming a debug build of cpython 3
6
available static markers
systemtap tapsets
examples
python howtos
python howtos are documents that cover a single specific topic andattempt to cover it fairly completely
 modelled on the linuxdocumentation projects howto collection this collection is an effortto foster documentation thats more detailed than the python libraryreference
currently the howtos are porting python 2 code to python 3 porting extension modules to python 3 curses programming with python descriptor howto guide functional programming howto logging howto logging cookbook regular expression howto socket programming howto sorting how to unicode howto howto fetch internet resources using the urllib package argparse tutorial an introduction to the ipaddress module argument clinic howto instrumenting cpython with dtrace and systemtap
regular expression howto
author   a
caabstractthis document is an introductory tutorial to using regular expressionsin python with the re module
  it provides a gentler introductionthan the corresponding section in the library reference
introduction
regular expressions called res or regexes or regex patterns areessentially a tiny highly specialized programming language embeddedinside python and made available through the re module
 using thislittle language you specify the rules for the set of possible stringsthat you want to match this set might contain english sentences oremail addresses or tex commands or anything you like
  you can thenask questions such as does this string match the pattern or isthere a match for the pattern anywhere in this string
  you can alsouse res to modify a string or to split it apart in various ways
regular expression patterns are compiled into a series of bytecodeswhich are then executed by a matching engine written in c
  foradvanced use it may be necessary to pay careful attention to how theengine will execute a given re and write the re in a certain way inorder to produce bytecode that runs faster
 optimization isnt coveredin this document because it requires that you have a goodunderstanding of the matching engines internals
the regular expression language is relatively small and restricted sonot all possible string processing tasks can be done using regularexpressions
  there are also tasks that can be done with regularexpressions but the expressions turn out to be very complicated
  inthese cases you may be better off writing python code to do theprocessing while python code will be slower than an elaborate regularexpression it will also probably be more understandable
simple patterns
well start by learning about the simplest possible regularexpressions
  since regular expressions are used to operate onstrings well begin with the most common task matching characters
for a detailed explanation of the computer science underlying regularexpressions deterministic and nondeterministic finite automata youcan refer to almost any textbook on writing compilers
matching characters
most letters and characters will simply match themselves
  forexample the regular expression test will match the string testexactly
  you can enable a caseinsensitive mode that would let thisre match test or test as well more about this later
there are exceptions to this rule some characters are specialmetacharacters and dont match themselves
  instead they signalthat some outoftheordinary thing should be matched or they affectother portions of the re by repeating them or changing their meaning
much of this document is devoted to discussing various metacharactersand what they do
heres a complete list of the metacharacters their meanings will bediscussed in the rest of this howto
             the first metacharacters well look at are  and 
 theyre usedfor specifying a character class which is a set of characters thatyou wish to match
  characters can be listed individually or a rangeof characters can be indicated by giving two characters and separatingthem by a 
  for example abc will match any of thecharacters a b or c this is the same as ac which uses arange to express the same set of characters
  if you wanted to matchonly lowercase letters your re would be az
metacharacters are not active inside classes
  for example akmwill match any of the characters a k m or  is usually a metacharacter but inside a character class its strippedof its special nature
you can match the characters not listed within the class bycomplementing the set
  this is indicated by including a  asthe first character of the class
 for example 5 will match anycharacter except 5
  if the caret appears elsewhere in a characterclass it does not have special meaning
 for example 5 willmatch either a 5 or a 
perhaps the most important metacharacter is the backslash 
   asin python string literals the backslash can be followed by variouscharacters to signal various special sequences
  its also used toescape all the metacharacters so you can still match them in patternsfor example if you need to match a  or   you can precede themwith a backslash to remove their special meaning  or 
some of the special sequences beginning with  representpredefined sets of characters that are often useful such as the setof digits the set of letters or the set of anything that isntwhitespace
lets take an example w matches any alphanumeric character
  ifthe regex pattern is expressed in bytes this is equivalent to theclass azaz09
  if the regex pattern is a string w willmatch all the characters marked as letters in the unicode databaseprovided by the unicodedata module
  you can use the more restricteddefinition of w in a string pattern by supplying the re
asciiflag when compiling the regular expression
the following list of special sequences isnt complete
 for a completelist of sequences and expanded class definitions for unicode stringpatterns see the last part of regular expression syntax in thestandard library reference
  in general the unicode versions matchany character thats in the appropriate category in the unicodedatabase
d   matches any decimal digit this is equivalent to the class 09
d   matches any nondigit character this is equivalent to the class   09
s   matches any whitespace character this is equivalent to the class    tnrfv
s   matches any nonwhitespace character this is equivalent to the   class  tnrfv
w   matches any alphanumeric character this is equivalent to the class   azaz09
w   matches any nonalphanumeric character this is equivalent to the   class azaz09
these sequences can be included inside a character class
  forexample s
 is a character class that will match any whitespacecharacter or  or 
the final metacharacter in this section is 

  it matches anythingexcept a newline character and theres an alternate modere
dotall where it will match even a newline
  
 is often usedwhere you want to match any character
repeating things
being able to match varying sets of characters is the first thingregular expressions can do that isnt already possible with themethods available on strings
  however if that was the onlyadditional capability of regexes they wouldnt be much of an advance
another capability is that you can specify that portions of the remust be repeated a certain number of times
the first metacharacter for repeating things that well look at is
   doesnt match the literal character  instead itspecifies that the previous character can be matched zero or moretimes instead of exactly once
for example cat will match ct 0 a characters cat 1a caaat 3 a characters and so forth
repetitions such as  are greedy when repeating a re thematching engine will try to repeat it as many times as possible
 iflater portions of the pattern dont match the matching engine willthen back up and try again with fewer repetitions
a stepbystep example will make this more obvious
  lets considerthe expression abcdb
  this matches the letter a zero ormore letters from the class bcd and finally ends with a b
now imagine matching this re against the string abcbd
 step    matched      explanation                        1       a          the a in the re matches
         2       abcbd      the engine matches bcd                            going as far as it can which is                        to the end of the string
          3       failure    the engine tries to match b                          but the current position is at                          the end of the string so it                            fails
                             4       abcb       back up so that  bcd                              matches one less character
        5       failure    try b again but the current                          position is at the last                                 character which is a d
       6       abc        back up again so that bcd                         is only matching bc
             6       abcb       try b again
  this time the                           character at the current position                       is b so it succeeds
         the end of the re has now been reached and it has matched abcb
this demonstrates how the matching engine goes as far as it can atfirst and if no match is found it will then progressively back up andretry the rest of the re again and again
  it will back up until ithas tried zero matches for bcd and if that subsequently failsthe engine will conclude that the string doesnt match the re at all
another repeating metacharacter is  which matches one or moretimes
  pay careful attention to the difference between  and  matches zero or more times so whatevers being repeated may notbe present at all while  requires at least one occurrence
  touse a similar example cat will match cat 1 a caaat3 as but wont match ct
there are two more repeating qualifiers
  the question mark character matches either once or zero times you can think of it as markingsomething as being optional
  for example homebrew matches eitherhomebrew or homebrew
the most complicated repeated qualifier is mn where m and nare decimal integers
  this qualifier means there must be at least mrepetitions and at most n
  for example a13b will matchab ab and ab
  it wont match ab which has noslashes or ab which has four
you can omit either m or n in that case a reasonable value isassumed for the missing value
  omitting m is interpreted as a lowerlimit of 0 while omitting n results in an upper bound of infinity
readers of a reductionist bent may notice that the three otherqualifiers can all be expressed using this notation
  0 is thesame as  1 is equivalent to  and 01 is the same as
  its better to use   or  when you can simply becausetheyre shorter and easier to read
using regular expressions
now that weve looked at some simple regular expressions how do weactually use them in python  the re module provides an interface tothe regular expression engine allowing you to compile res intoobjects and then perform matches with them
compiling regular expressions
regular expressions are compiled into pattern objects which havemethods for various operations such as searching for pattern matchesor performing string substitutions
    import re    p  re
compile also accepts an optional flags argument used toenable various special features and syntax variations
  well go overthe available settings later but for now a single example will do    p  re
ignorecasethe re is passed to re
compile as a string
  res are handled asstrings because regular expressions arent part of the core pythonlanguage and no special syntax was created for expressing them
there are applications that dont need res at all so theres no needto bloat the language specification by including them
 instead there module is simply a c extension module included with python justlike the socket or zlib modules
putting res in strings keeps the python language simpler but has onedisadvantage which is the topic of the next section
the backslash plague
performing matches
once you have an object representing a compiled regular expressionwhat do you do with it  pattern objects have several methods andattributes
 only the most significant ones will be covered hereconsult the re docs for a complete listing
 methodattribute    purpose                                          match           determine if the re matches at the beginning of                      the string
                                      search          scan through a string looking for any location                      where this re matches
                           findall         find all substrings where the re matches and                        returns them as a list
                          finditer        find all substrings where the re matches and                        returns them as an iterator
                  match and search return none if no match can be found
  iftheyre successful a match object instance is returned containinginformation about the match where it starts and ends the substringit matched and more
you can learn about this by interactively experimenting with the remodule
  if you have tkinter available you may also want to look attoolsdemoredemo
py a demonstration program included with the pythondistribution
  it allows you to enter res and strings and displayswhether the re matches or fails
 redemo
py can be quite useful whentrying to debug a complicated re
this howto uses the standard python interpreter for its examples
first run the python interpreter import the re module and compilea re    import re    p  re
compileaznow you can try matching various strings against the re az
  anempty string shouldnt match at all since  means one or morerepetitions
 match should return none in this case which willcause the interpreter to print no output
  you can explicitly printthe result of match to make this clear
    p
match   nonenow lets try it on a string that it should match such as tempo
in this case match will return a match object so you shouldstore the result in a variable for later use
match object span0 5 matchtemponow you can query the match object for information about the matchingstring
  match object instances also have several methods andattributes the most important ones are methodattribute    purpose                                       group           return the string matched by the re           start           return the starting position of the match     end             return the ending position of the match       span            return a tuple containing the start end                        positions  of the match                      trying these methods will soon clarify their meaning    m
span   0 5group returns the substring that was matched by the re
  startand end return the starting and ending index of the match
span returns both start and end indexes in a single tuple
  sincethe match method only checks if the re matches at the start of astring start will always be zero
  however the search methodof patterns scans through the string so  the match may not start atzero in that case
    printp
span   4 11in actual programs the most common style is to store the match objectin a variable and then check if it was none
  this usually lookslike   p  re
group   else       printno matchtwo pattern methods return all of the matches for a pattern
findall returns a list of matching strings    p  re
findall12 drummers drumming 11 pipers piping 10 lords aleaping   12 11 10the r prefix making the literal a raw string literal is needed inthis example because escape sequences in a normal cooked stringliteral that are not recognized by python as opposed to regularexpressions now result in a deprecationwarning and will eventuallybecome a syntaxerror
  see the backslash plague
findall has to create the entire list before it can be returned asthe result
  the finditer method returns a sequence of matchobject instances as an iterator    iterator  p
modulelevel functions
you dont have to create a pattern object and call its methods there module also provides toplevel functions called matchsearch findall sub and so forth
  these functions takethe same arguments as the corresponding pattern method with the restring added as the first argument and still return either none ora match object instance
    printre
match object span0 5 matchfrom under the hood these functions simply create a pattern object for youand call the appropriate method on it
  they also store the compiledobject in a cache so future calls using the same re wont need toparse the pattern again and again
should you use these modulelevel functions or should you get thepattern and call its methods yourself  if youre accessing a regexwithin a loop precompiling it will save a few function calls
outside of loops theres not much difference thanks to the internalcache
compilation flags
compilation flags let you modify some aspects of how regularexpressions work
 flags are available in the re module under twonames a long name such as ignorecase and a short oneletter formsuch as i
  if youre familiar with perls pattern modifiers theoneletter forms use the same letters the short form of re
verboseis re
x for example
 multiple flags can be specified by bitwiseoring them re
m sets both the i and m flags forexample
heres a table of the available flags followed by a more detailedexplanation of each one
 flag                               meaning                                       ascii a                       makes several escapes like w b s                                      and d match only on ascii characters with                                     the respective property
                      dotall s                      make 
 match any character including                                          newlines
                                     ignorecase i                  do caseinsensitive matches
                  locale l                      do a localeaware match
                      multiline m                   multiline matching affecting  and 
   verbose x for extended    enable verbose res which can be organized                                       more cleanly and understandably
             iignorecase   perform caseinsensitive matching character class and literal   strings will match letters by ignoring case
  for example az   will match lowercase letters too
 full unicode matching also works   unless the ascii flag is used to disable nonascii matches
  when   the unicode patterns az or az are used in combination   with the ignorecase flag they will match the 52 ascii letters   and 4 additional nonascii letters i̇ u0130 latin capital   letter i with dot above ı u0131 latin small letter dotless   i ſ u017f latin small letter long s and k u212a kelvin   sign
  spam will match spam spam spam or ſpam   the latter is matched only in unicode mode
 this lowercasing   doesnt take the current locale into account it will if you also   set the locale flag
llocale   make w w b b and caseinsensitive matching dependent   on the current locale instead of the unicode database
   locales are a feature of the c library intended to help in writing   programs that take account of language differences
  for example   if youre processing encoded french text youd want to be able to   write w to match words but w only matches the character   class azaz in bytes patterns it wont match bytes   corresponding to é or ç
 if your system is configured properly   and a french locale is selected certain c functions will tell the   program that the byte corresponding to é should also be   considered a letter
 setting the locale flag when compiling a   regular expression will cause the resulting compiled object to use   these c functions for w this is slower but also enables w   to match french words as youd expect
 the use of this flag is   discouraged in python 3 as the locale mechanism is very unreliable   it only handles one culture at a time and it only works with   8bit locales
  unicode matching is already enabled by default in   python 3 for unicode str patterns and it is able to handle   different localeslanguages
mmultiline    and  havent been explained yet  theyll be introduced in   section more metacharacters
   usually  matches only at the beginning of the string and    matches only at the end of the string and immediately before the   newline if any at the end of the string
 when this flag is   specified  matches at the beginning of the string and at the   beginning of each line within the string immediately following   each newline
  similarly the  metacharacter matches either at   the end of the string and at the end of each line immediately   preceding each newline
sdotall   makes the 
 special character match any character at all   including a newline without this flag 
 will match anything   except a newline
aascii   make w w b b s and s perform asciionly   matching instead of full unicode matching
 this is only meaningful   for unicode patterns and is ignored for byte patterns
xverbose   this flag allows you to write regular expressions that are more   readable by granting you more flexibility in how you can format   them
  when this flag has been specified whitespace within the re   string is ignored except when the whitespace is in a character   class or preceded by an unescaped backslash this lets you organize   and indent the re more clearly
  this flag also lets you put   comments within a re that will be ignored by the engine comments   are marked by a  thats neither in a character class or   preceded by an unescaped backslash
   for example heres a re that uses re
verbose see how much   easier it is to read      charref  re
verbose   without the verbose setting the re would look like this      charref  re
compile007                           09                           x09afaf   in the above example pythons automatic concatenation of string   literals has been used to break up the re into smaller pieces but   its still more difficult to understand than the version using   re
verbose
more pattern power
so far weve only covered a part of the features of regularexpressions
  in this section well cover some new metacharactersand how to use groups to retrieve portions of the text that wasmatched
more metacharacters
there are some metacharacters that we havent covered yet
  most ofthem will be covered in this section
some of the remaining metacharacters to be discussed are zerowidthassertions
  they dont cause the engine to advance through thestring instead they consume no characters at all and simply succeedor fail
  for example b is an assertion that the current positionis located at a word boundary the position isnt changed by the bat all
  this means that zerowidth assertions should never berepeated because if they match once at a given location they canobviously be matched an infinite number of times
   alternation or the or operator
   if a and b are regular   expressions ab will match any string that matches either a or   b
  has very low precedence in order to make it work   reasonably when youre alternating multicharacter strings
   crowservo will match either crow or servo not cro   a w or an s and ervo
   to match a literal  use  or enclose it inside a   character class as in 
   matches at the beginning of lines
  unless the multiline flag has   been set this will only match at the beginning of the string
  in   multiline mode this also matches immediately after each newline   within the string
   for example if you wish to match the word from only at the   beginning of a line the re to use is from
       printre
searchfrom reciting from memory      none   to match a literal  use 
   matches at the end of a line which is defined as either the end of   the string or any location followed by a newline character
       printre
match object span6 7 match   to match a literal  use  or enclose it inside a character   class as in  
a   matches only at the start of the string
  when not in multiline   mode a and  are effectively the same
  in multiline mode   theyre different a still matches only at the beginning of the   string but  may match at any location inside the string that   follows a newline character
z   matches only at the end of the string
b   word boundary
  this is a zerowidth assertion that matches only at   the beginning or end of a word
  a word is defined as a sequence of   alphanumeric characters so the end of a word is indicated by   whitespace or a nonalphanumeric character
   the following example matches class only when its a complete   word it wont match when its contained inside another word
searchone subclass is      none   there are two subtleties you should remember when using this   special sequence
 first this is the worst collision between   pythons string literals and regular expression sequences
  in   pythons string literals b is the backspace character ascii   value 8
  if youre not using raw strings then python will convert   the b to a backspace and your re wont match as you expect it   to
 the following example looks the same as our previous re but   omits the r in front of the re string
       p  re
match object span0 7 matchx08classx08   second inside a character class where theres no use for this   assertion b represents the backspace character for   compatibility with pythons string literals
b   another zerowidth assertion this is the opposite of b only   matching when the current position is not at a word boundary
grouping
frequently you need to obtain more information than just whether there matched or not
  regular expressions are often used to dissectstrings by writing a re divided into several subgroups which matchdifferent components of interest
 for example an rfc822 header lineis divided into a header name and a value separated by a  likethis   from authorexample
comthis can be handled by writing a regular expression which matches anentire header line and has one group which matches the header nameand another group which matches the headers value
groups are marked by the   metacharacters
  and have much the same meaning as they do in mathematical expressionsthey group together the expressions contained inside them and you canrepeat the contents of a group with a repeating qualifier such as   or mn
  for example ab will match zero ormore repetitions of ab
    p  re
span   0 10groups indicated with   also capture the starting andending index of the text that they match this can be retrieved bypassing an argument to group start end and span
groups are numbered starting with 0
  group 0 is always present itsthe whole re so match object methods all have group 0 as theirdefault argument
  later well see how to express groups that dontcapture the span of text that they match
    p  re
group0   absubgroups are numbered from left to right from 1 upward
  groups canbe nested to determine the number just count the opening parenthesischaracters going from left to right
    p  re
group2   bgroup can be passed multiple group numbers at a time in whichcase it will return a tuple containing the corresponding values forthose groups
    m
group212   b abc bthe groups method returns a tuple containing the strings for allthe subgroups from 1 up to however many there are
    m
groups   abc bbackreferences in a pattern allow you to specify that the contents ofan earlier capturing group must also be found at the current locationin the string
  for example 1 will succeed if the exact contentsof group 1 can be found at the current position and fails otherwise
remember that pythons string literals also use a backslash followedby numbers to allow including arbitrary characters in a string so besure to use a raw string when incorporating backreferences in a re
for example the following re detects doubled words in a string
    p  re
group   the thebackreferences like this arent often useful for just searchingthrough a string  there are few text formats which repeat data inthis way  but youll soon find out that theyre very useful whenperforming string substitutions
noncapturing and named groups
elaborate res may use many groups both to capture substrings ofinterest and to group and structure the re itself
  in complex resit becomes difficult to keep track of the group numbers
  there aretwo features which help with this problem
  both of them use a commonsyntax for regular expression extensions so well look at that first
perl 5 is well known for its powerful additions to standard regularexpressions
 for these new features the perl developers couldntchoose new singlekeystroke metacharacters or new special sequencesbeginning with  without making perls regular expressionsconfusingly different from standard res
  if they chose  as a newmetacharacter for example old expressions would be assuming that was a regular character and wouldnt have escaped it by writing or 
the solution chosen by the perl developers was to use 
 as theextension syntax
   immediately after a parenthesis was a syntaxerror because the  would have nothing to repeat so this didntintroduce any compatibility problems
  the characters immediatelyafter the   indicate what extension is being used so foo isone thing a positive lookahead assertion and foo is somethingelse a noncapturing group containing the subexpression foo
python supports several of perls extensions and adds an extensionsyntax to perls extension syntax
  if the first character after thequestion mark is a p you know that its an extension thatsspecific to python
now that weve looked at the general extension syntax we can returnto the features that simplify working with groups in complex res
sometimes youll want to use a group to denote a part of a regularexpression but arent interested in retrieving the groups contents
you can make this fact explicit by using a noncapturing group
 where you can replace the 
 with any other regularexpression
    m  re
groups   except for the fact that you cant retrieve the contents of what thegroup matched a noncapturing group behaves exactly the same as acapturing group you can put anything inside it repeat it with arepetition metacharacter such as  and nest it within other groupscapturing or noncapturing
 is particularly useful whenmodifying an existing pattern since you can add new groups withoutchanging how all the other groups are numbered
  it should bementioned that theres no performance difference in searching betweencapturing and noncapturing groups neither form is any faster thanthe other
a more significant feature is named groups instead of referring tothem by numbers groups can be referenced by a name
the syntax for a named group is one of the pythonspecific extensionspname
  name is obviously the name of the group
  namedgroups behave exactly like capturing groups and additionallyassociate a name with a group
  the match object methods that dealwith capturing groups all accept either integers that refer to thegroup by number or strings that contain the desired groups name
named groups are still given numbers so you can retrieve informationabout a group in two ways    p  re
group1   lotsadditionally you can retrieve named groups as a dictionary withgroupdict    m  re
groupdict   first jane last doenamed groups are handy because they let you use easilyrememberednames instead of having to remember numbers
  heres an example refrom the imaplib module   internaldate  re
compilerinternaldate            rpday 12309pmonazazaz           rpyear09090909           r phour0909pmin0909psec0909           r pzonenpzoneh0909pzonem0909           rits obviously much easier to retrieve m
groupzonem instead ofhaving to remember to retrieve group 9
the syntax for backreferences in an expression such as 
1refers to the number of the group
  theres naturally a variant thatuses the group name instead of the number
 this is another pythonextension pname indicates that the contents of the group calledname should again be matched at the current point
  the regularexpression for finding doubled words bws1b can also bewritten as bpwordwspwordb    p  re
lookahead assertions
modifying strings
up to this point weve simply performed searches against a staticstring
 regular expressions are also commonly used to modify stringsin various ways using the following pattern methods methodattribute    purpose                                          split           split the string into a list splitting it                           wherever the re matches                          sub             find all substrings where the re matches and                        replace them with a different string             subn            does the same thing as sub  but returns                         the new string and the number of replacements   
splitting strings
the split method of a pattern splits a string apart wherever there matches returning a list of the pieces
 its similar to thesplit method of strings but provides much more generality in thedelimiters that you can split by string split only supportssplitting by whitespace or by a fixed string
  as youd expecttheres a modulelevel re
split function too
splitstring maxsplit0   split string by the matches of the regular expression
  if   capturing parentheses are used in the re then their contents will   also be returned as part of the resulting list
  if maxsplit is   nonzero at most maxsplit splits are performed
you can limit the number of splits made by passing a value formaxsplit
 when maxsplit is nonzero at most maxsplit splits willbe made and the remainder of the string is returned as the finalelement of the list
  in the following example the delimiter is anysequence of nonalphanumeric characters
    p  re
sometimes youre not only interested in what the text betweendelimiters is but also need to know what the delimiter was
  ifcapturing parentheses are used in the re then their values are alsoreturned as part of the list
  compare the following calls    p  re
 the modulelevel function re
split adds the re to be used as thefirst argument but is otherwise the same
    re
search and replace
common problems
regular expressions are a powerful tool for some applications but insome ways their behaviour isnt intuitive and at times they dontbehave the way you may expect them to
  this section will point outsome of the most common pitfalls
use string methods
sometimes using the re module is a mistake
  if youre matching afixed string or a single character class and youre not using anyre features such as the ignorecase flag then the full power ofregular expressions may not be required
 strings have several methodsfor performing operations with fixed strings and theyre usually muchfaster because the implementation is a single small c loop thatsbeen optimized for the purpose instead of the large more generalizedregular expression engine
one example might be replacing a single fixed string with another onefor example you might replace word with deed
  re
sub seemslike the function to use for this but consider the replacemethod
  note that replace will also replace word inside wordsturning swordfish into sdeedfish but the  naive re word wouldhave done that too
  to avoid performing the substitution on partsof words the pattern would have to be bwordb in order to requirethat word have a word boundary on either side
  this takes the jobbeyond  replaces abilities
another common task is deleting every occurrence of a single characterfrom a string or replacing it with another single character
  youmight do this with something like re
subn   s buttranslate is capable of doing both tasks and will be faster thanany regular expression operation can be
in short before turning to the re module consider whether yourproblem can be solved with a faster and simpler string method
match versus search
matchsuper insuperable   noneon the other hand search will scan forward through the stringreporting the first match it finds
    printre
span   2 7sometimes youll be tempted to keep using re
match and just add
 to the front of your re
  resist this temptation and usere
search instead
  the regular expression compiler does someanalysis of res in order to speed up the process of looking for amatch
  one such analysis figures out what the first character of amatch must be for example a pattern starting with crow must matchstarting with a c
  the analysis lets the engine quickly scanthrough the string looking for the starting character only trying thefull match if a c is found
adding 
 defeats this optimization requiring scanning to the endof the string and then backtracking to find a match for the rest ofthe re
  use re
search instead
greedy versus nongreedy
when repeating a regular expression as in a the resulting actionis to consume as much of the pattern as possible
  this fact oftenbites you when youre trying to match a pair of balanced delimiterssuch as the angle brackets surrounding an html tag
  the naive patternfor matching a single html tag doesnt work because of the greedynature of 

group   htmlheadtitletitletitlethe re matches the  in html and the 
 consumes the restof the string
  theres still more left in the re though and the cant match at the end of the string so the regular expression enginehas to backtrack character by character until it finds a match for the
   the final match extends from the  in html to the in title which isnt what you want
in this case the solution is to use the nongreedy qualifiers   or mn which match as little text as possible
  inthe above example the  is tried immediately after the first matches and when it fails the engine advances a character at atime retrying the  at every step
  this produces just the rightresult    printre
group   htmlnote that parsing html or xml with regular expressions is painful
quickanddirty patterns will handle common cases but html and xmlhave special cases that will break the obvious regular expression bythe time youve written a regular expression that handles all of thepossible cases the patterns will be very complicated
  use an htmlor xml parser module for such tasks

using reverbose
by now youve probably noticed that regular expressions are a verycompact notation but theyre not terribly readable
  res of moderatecomplexity can become lengthy collections of backslashes parenthesesand metacharacters making them difficult to read and understand
for such res specifying the re
verbose flag when compiling theregular expression can be helpful because it allows you to format theregular expression more clearly
the re
verbose flag has several effects
  whitespace in the regularexpression that isnt inside a character class is ignored
  thismeans that an expression such as dog  cat is equivalent to the lessreadable dogcat but a b will still match the characters ab or a space
  in addition you can also put comments inside are comments extend from a  character to the next newline
  whenused with triplequoted strings this enables res to be formatted moreneatly   pat  re
verbosethis is far more readable than   pat  re
feedback
regular expressions are a complicated topic
  did this document helpyou understand them  were there parts that were unclear or problemsyou encountered that werent covered here  if so please sendsuggestions for improvements to the author
the most complete book on regular expressions is almost certainlyjeffrey friedls mastering regular expressions published by oreilly
unfortunately it exclusively concentrates on perl and javas flavoursof regular expressions and doesnt contain any python material atall so it wont be useful as a reference for programming in python
the first edition covered pythons nowremoved regex module whichwont help you much
  consider checking it out from your library
sorting how to
author   andrew dalke and raymond hettingerrelease   0
1python lists have a builtin list
sort method that modifies thelist inplace
  there is also a sorted builtin function thatbuilds a new sorted list from an iterable
in this document we explore the various techniques for sorting datausing python
sorting basics
key functions
both list
sort and sorted have a key parameter to specify afunction or other callable to be called on each list element priorto making comparisons
for example heres a caseinsensitive string comparison sortedthis is a test string from andrew
lowera andrew from is string test thisthe value of the key parameter should be a function or othercallable that takes a single argument and returns a key to use forsorting purposes
 this technique is fast because the key function iscalled exactly once for each input record
a common pattern is to sort complex objects using some of the objectsindices as keys
 for example studenttuples  
  sortedstudenttuples keylambda student student2    sort by agedave b 10 jane b 12 john a 15the same technique works for objects with named attributes
 forexample class student
operator module functions
the keyfunction patterns shown above are very common so pythonprovides convenience functions to make accessor functions easier andfaster
 the operator module has itemgetter attrgetter anda methodcaller function
using those functions the above examples become simpler and faster from operator import itemgetter attrgetter sortedstudenttuples keyitemgetter2dave b 10 jane b 12 john a 15 sortedstudentobjects keyattrgetteragedave b 10 jane b 12 john a 15the operator module functions allow multiple levels of sorting
 forexample to sort by grade then by age sortedstudenttuples keyitemgetter12john a 15 dave b 10 jane b 12 sortedstudentobjects keyattrgettergrade agejohn a 15 dave b 10 jane b 12
ascending and descending
both list
sort and sorted accept a reverse parameter with aboolean value
 this is used to flag descending sorts
 for example toget the student data in reverse age order sortedstudenttuples keyitemgetter2 reversetruejohn a 15 jane b 12 dave b 10 sortedstudentobjects keyattrgetterage reversetruejohn a 15 jane b 12 dave b 10
sort stability and complex sorts
sorts are guaranteed to be stable
 that means that when multiplerecords have the same key their original order is preserved
 data  red 1 blue 1 red 2 blue 2 sorteddata keyitemgetter0blue 1 blue 2 red 1 red 2notice how the two records for blue retain their original order sothat blue 1 is guaranteed to precede blue 2
this wonderful property lets you build complex sorts in a series ofsorting steps
 for example to sort the student data by descendinggrade and then ascending age do the age sort first and thensort again using grade s  sortedstudentobjects keyattrgetterage      sort on secondary key sorteds keyattrgettergrade reversetrue        now sort on primary key descendingdave b 10 jane b 12 john a 15this can be abstracted out into a wrapper function that can take alist and tuples of field and order to sort them on multiple passes
     return xs multisortliststudentobjects grade true age falsedave b 10 jane b 12 john a 15the timsort algorithm used in python does multiple sorts efficientlybecause it can take advantage of any ordering already present in adataset
the old way using decoratesortundecorate
this idiom is called decoratesortundecorate after its three steps first the initial list is decorated with new values that control  the sort order
 second the decorated list is sorted
 finally the decorations are removed creating a list that contains  only the initial values in the new order
for example to sort the student data by grade using the dsuapproach decorated  student
sort student for grade i student in decorated                undecoratejohn a 15 jane b 12 dave b 10this idiom works because tuples are compared lexicographically thefirst items are compared if they are the same then the second itemsare compared and so on
it is not strictly necessary in all cases to include the index i inthe decorated list but including it gives two benefits the sort is stable  if two items have the same key their order  will be preserved in the sorted list
 the original items do not have to be comparable because the ordering  of the decorated tuples will be determined by at most the first two  items
 so for example the original list could contain complex  numbers which cannot be sorted directly
another name for this idiom is schwartzian transform after randal l
schwartz who popularized it among perl programmers
now that python sorting provides keyfunctions this technique is notoften needed
the old way using the cmp parameter
many constructs given in this howto assume python 2
4 or later
 beforethat there was no sorted builtin and list
sort took nokeyword arguments
 instead all of the py2
x versions supported acmp parameter to handle user specified comparison functions
in py3
0 the cmp parameter was removed entirely as part of alarger effort to simplify and unify the language eliminating theconflict between rich comparisons and the cmp magic method
in py2
x sort allowed an optional function which can be called fordoing the comparisons
 that function should take two arguments to becompared and then return a negative value for lessthan return zeroif they are equal or return a positive value for greaterthan
 forexample we can do def numericcomparex y
     return x  y sorted5 2 4 1 3 cmpnumericcompare 1 2 3 4 5or you can reverse the order of comparison with def reversenumericx y
     return y  x sorted5 2 4 1 3 cmpreversenumeric 5 4 3 2 1when porting code from python 2
x to 3
x the situation can arise whenyou have the user supplying a comparison function and you need toconvert that to a key function
 the following wrapper makes that easyto do   def cmptokeymycmp       convert a cmp function into a key function       class k           def initself obj args               self
obj  0       return kto convert to a key function just wrap the old comparison function    sorted5 2 4 1 3 keycmptokeyreversenumeric   5 4 3 2 1in python 3
2 the functools
cmptokey function was added to thefunctools module in the standard library
odd and ends
 for locale aware sorting use locale
strxfrm for a key function  or locale
strcoll for a comparison function
 the reverse parameter still maintains sort stability so that  records with equal keys retain the original order
 interestingly  that effect can be simulated without the parameter by using the  builtin reversed function twice   data  red 1 blue 1 red 2 blue 2   standardway  sorteddata keyitemgetter0 reversetrue   doublereversed  listreversedsortedreverseddata keyitemgetter0   assert standardway  doublereversed   standardway  red 1 red 2 blue 1 blue 2 the sort routines are guaranteed to use lt when making  comparisons between two objects
 so it is easy to add a standard  sort order to a class by defining an lt method      student
age      sortedstudentobjects     dave b 10 jane b 12 john a 15 key functions need not depend directly on the objects being sorted
  a key function can also access external resources
 for instance if  the student grades are stored in a dictionary they can be used to  sort a separate list of student names   students  dave john jane   newgrades  john f janea dave c   sortedstudents keynewgrades
curses programming with python
author   a
 raymondrelease   2
04abstractthis document describes how to use the curses extension module tocontrol textmode displays
what is curses
the python curses module
the python module is a fairly simple wrapper over the c functionsprovided by curses if youre already familiar with curses programmingin c its really easy to transfer that knowledge to python
  thebiggest difference is that the python interface makes things simplerby merging different c functions such as addstr mvaddstr andmvwaddstr into a single addstr method
  youll see thiscovered in more detail later
this howto is an introduction to writing textmode programs withcurses and python
 it doesnt attempt to be a complete guide to thecurses api for that see the python library guides section onncurses and the c manual pages for ncurses
  it will however giveyou the basic ideas
starting and ending a curses application
windows and pads
displaying text
attributes and color
user input
the c curses library offers only very simple input mechanisms
pythons curses module adds a basic textinput widget
  otherlibraries such as urwid have more extensive collections of widgets
there are two methods for getting input from a window getch refreshes the screen and then waits for the user to hit a  key displaying the key if echo has been called earlier
  you  can optionally specify a coordinate to which the cursor should be  moved before pausing
 getkey does the same thing but converts the integer to a string
  individual characters are returned as 1character strings and  special keys such as function keys return longer strings containing  a key name such as keyup or g
its possible to not wait for the user using the nodelay windowmethod
 after nodelaytrue getch and getkey for the windowbecome nonblocking
 to signal that no input is ready getchreturns curses
err a value of 1 and getkey raises anexception
 theres also a halfdelay function which can be used toin effect set a timer on each getch if no input becomesavailable within a specified delay measured in tenths of a secondcurses raises an exception
the getch method returns an integer if its between 0 and 255 itrepresents the ascii code of the key pressed
  values greater than 255are special keys such as page up home or the cursor keys
 you cancompare the value returned to constants such as curses
keyppagecurses
keyhome or curses
keyleft
  the main loop of yourprogram may look something like this   while true       c  stdscr
keyhome           x  y  0the curses
ascii module supplies ascii class membership functionsthat take either integer or 1character string arguments these may beuseful in writing more readable tests for such loops
  it alsosupplies conversion functions  that take either integer or 1characterstring arguments and return the same type
  for examplecurses
ctrl returns the control character corresponding toits argument
theres also a method to retrieve an entire string getstr
  itisnt used very often because its functionality is quite limited theonly editing keys available are the backspace key and the enter keywhich terminates the string
  it can optionally be limited to a fixednumber of characters
getstr00 15the curses
textpad module supplies a text box that supports anemacslike set of keybindings
  various methods of the textbox classsupport editing with input validation and gathering the edit resultseither with or without trailing spaces
  heres an example   import curses   from curses
gathersee the library documentation on curses
textpad for more details
for more information
porting python 2 code to python
author   brett cannonabstractwith python 3 being the future of python while python 2 is still inactive use it is good to have your project available for both majorreleases of python
 this guide is meant to help you figure out howbest to support both python 2  3 simultaneously
if you are looking to port an extension module instead of pure pythoncode please see porting extension modules to python 3
if you would like to read one core python developers take on whypython 3 came into existence you can read nick coghlans python 3 q a or brett cannons why python 3 exists
for help with porting you can email the pythonporting mailing listwith questions
the short explanation
 learn the differences between python 2  34
note  note using python m pip install guarantees that the pip you  invoke is the one installed for the python currently in use whether  it be a systemwide pip or one installed within a virtual  environment
details
drop support for python 26 and older
make sure you specify the proper version support in your setuppy file
have good test coverage
learn the differences between python 2 
update your code
divisionin python 3 5  2  2
text versus binary datain python 2 you could use the str type for both text and binarydata
 text data             binary data                                  decode                 encode                                           format                                           isdecimal                                        isnumeric                                       making the distinction easier to handle can be accomplished byencoding and decoding between binary data and text at the edge of yourcode
prevent compatibility regressions
check which dependencies block your transition
update your setuppy file to denote python 3 compatibility
use continuous integration to stay compatible
consider using optional static type checking
socket programming howto
author   gordon mcmillanabstractsockets are used nearly everywhere but are one of the most severelymisunderstood technologies around
 this is a 10000 foot overview ofsockets
 its not really a tutorial  youll still have work to do ingetting things operational
 it doesnt cover the fine points andthere are a lot of them but i hope it will give you enoughbackground to begin using them decently
sockets
history
creating a socket
ipc
using a socket
binary data
it is perfectly possible to send binary data over a socket
 the majorproblem is that not all machines use the same formats for binary data
for example a motorola chip will represent a 16 bit integer with thevalue 1 as the two hex bytes 00 01
 intel and dec however are bytereversed  that same 1 is 01 00
 socket libraries have calls forconverting 16 and 32 bit integers  ntohl htonl ntohs htons wheren means network and h means host s means short and lmeans long
 where network order is host order these do nothing butwhere the machine is bytereversed these swap the bytes aroundappropriately
in these days of 32 bit machines the ascii representation of binarydata is frequently smaller than the binary representation
 thatsbecause a surprising amount of the time all those longs have thevalue 0 or maybe 1
 the string 0 would be two bytes while binaryis four
 of course this doesnt fit well with fixedlength messages
decisions decisions
disconnecting
strictly speaking youre supposed to use shutdown on a socketbefore you close it
  the shutdown is an advisory to the socket atthe other end
 depending on the argument you pass it it can mean imnot going to send anymore but ill still listen or im notlistening good riddance
  most socket libraries however are soused to programmers neglecting to use this piece of etiquette thatnormally a close is the same as shutdown close
  so in mostsituations an explicit shutdown is not needed
one way to use shutdown effectively is in an httplike exchange
 theclient sends a request and then does a shutdown1
 this tells theserver this client is done sending but can still receive
  theserver can detect eof by a receive of 0 bytes
 it can assume it hasthe complete request
  the server sends a reply
 if the sendcompletes successfully then indeed the client was still receiving
python takes the automatic shutdown a step further and says that whena socket is garbage collected it will automatically do a close ifits needed
 but relying on this is a very bad habit
 if your socketjust disappears without doing a close the socket at the other endmay hang indefinitely thinking youre just being slow
 pleaseclose your sockets when youre done
when sockets die
probably the worst thing about using blocking sockets is what happenswhen the other side comes down hard without doing a close
 yoursocket is likely to hang
 tcp is a reliable protocol and it will waita long long time before giving up on a connection
 if youre usingthreads the entire thread is essentially dead
 theres not much youcan do about it
 as long as you arent doing something dumb likeholding a lock while doing a blocking read the thread isnt reallyconsuming much in the way of resources
 do not try to kill thethread  part of the reason that threads are more efficient thanprocesses is that they avoid the overhead associated with theautomatic recycling of resources
 in other words if you do manage tokill the thread your whole process is likely to be screwed up
nonblocking sockets
an introduction to the ipaddress module
author   peter moodyauthor   nick coghlanoverviewthis document aims to provide a gentle introduction to the ipaddressmodule
 it is aimed primarily at users that arent already familiarwith ip networking terminology but may also be useful to networkengineers wanting an overview of how ipaddress represents ip networkaddressing concepts
creating addressnetworkinterface objects
since ipaddress is a module for inspecting and manipulating ipaddresses the first thing youll want to do is create some objects
you can use ipaddress to create objects from strings and integers
a note on ip versions
for readers that arent particularly familiar with ip addressing itsimportant to know that the internet protocol is currently in theprocess of moving from version 4 of the protocol to version 6
 thistransition is occurring largely because version 4 of the protocoldoesnt provide enough addresses to handle the needs of the wholeworld especially given the increasing number of devices with directconnections to the internet
explaining the details of the differences between the two versions ofthe protocol is beyond the scope of this introduction but readersneed to at least be aware that these two versions exist and it willsometimes be necessary to force the use of one version or the other
ip host addresses
defining networks
host addresses are usually grouped together into ip networks soipaddress provides a way to create inspect and manipulate networkdefinitions
 ip network objects are constructed from strings thatdefine the range of host addresses that are part of that network
 thesimplest form for that information is a network addressnetworkprefix pair where the prefix defines the number of leading bits thatare compared to determine whether or not an address is part of thenetwork and the network address defines the expected value of thosebits
as for addresses a factory function is provided that determines thecorrect ip version automatically    ipaddress
ipnetwork2001db8096   ipv6network2001db896network objects cannot have any host bits set
  the practical effectof this is that 192
124 does not describe a network
  suchdefinitions are referred to as interface objects since the iponanetwork notation is commonly used to describe network interfacesof a computer on a given network and are described further in the nextsection
by default attempting to create a network object with host bits setwill result in valueerror being raised
 to request that theadditional bits instead be coerced to zero the flag strictfalsecan be passed to the constructor    ipaddress
024while the string form offers significantly more flexibility networkscan also be defined with integers just like host addresses
 in thiscase the network is considered to contain only the single addressidentified by the integer so the network prefix includes the entirenetwork address    ipaddress
ipnetwork42540766411282592856903984951653826560   ipv6network2001db8128as with addresses creation of a particular kind of network can beforced by calling the class constructor directly instead of using thefactory function
host interfaces
inspecting addressnetworkinterface objects
networks as lists of addresses
its sometimes useful to treat networks as lists
  this means it ispossible to index them like this    net41   ipv4address192
255    net61   ipv6address2001db81    net61   ipv6address2001db8ffffffffit also means that network objects lend themselves to using the listmembership test syntax like this   if address in network        do somethingcontainment testing is done efficiently based on the network prefix    addr4  ipaddress
comparisons
ipaddress provides some simple hopefully intuitive ways to compareobjects where it makes sense    ipaddress
2   truea typeerror exception is raised if you try to compare objects ofdifferent versions or different types
using ip addresses with other modules
other modules that use ip addresses such as socket usually wontaccept objects from this module directly
 instead they must becoerced to an integer or string that the other module will accept    addr4  ipaddress
getting more detail when instance creation fails
when creating addressnetworkinterface objects using the versionagnostic factory functions any errors will be reported asvalueerror with a generic error message that simply says the passedin value was not recognized as an object of that type
 the lack of aspecific error is because its necessary to know whether the value issupposed to be ipv4 or ipv6 in order to provide more detail on whyit has been rejected
to support use cases where it is useful to have access to thisadditional detail the individual class constructors actually raisethe valueerror subclasses ipaddress
addressvalueerror andipaddress
netmaskvalueerror to indicate exactly which part of thedefinition failed to parse correctly
the error messages are significantly more detailed when using theclass constructors directly
 for example    ipaddress
netmaskvalueerror 64 is not a valid netmaskhowever both of the module specific exceptions have valueerror astheir parent class so if youre not concerned with the particulartype of error you can still write code like the following   try       network  ipaddress
howto fetch internet resources using the urllib package
author   michael foordnote  there is a french translation of an earlier revision of this howto  available at urllib2  le manuel manquant
introduction
fetching urls
data
sometimes you want to send data to a url often the url will refer toa cgi common gateway interface script or other web application
with http this is often done using whats known as a postrequest
 this is often what your browser does when you submit a htmlform that you filled in on the web
 not all posts have to come fromforms you can use a post to transmit arbitrary data to your ownapplication
 in the common case of html forms the data needs to beencoded in a standard way and then passed to the request object asthe data argument
 the encoding is done using a function from theurllib
parse library
this is done as follows    import urllib
headers
handling exceptions
the exception classes are exported from the urllib
error module
urlerror
httperror
wrapping it up
number 1   from urllib
reason   else        everything is finenote  the except httperror must come first otherwise except  urlerror will also catch an httperror
info and geturl
the response returned by urlopen or the httperror instance has twouseful methods info and geturl and is defined in the moduleurllib
response
geturl  this returns the real url of the page fetched
 this isuseful because urlopen or the opener object used may have followeda redirect
 the url of the page fetched may not be the same as the urlrequested
info  this returns a dictionarylike object that describes thepage fetched particularly the headers sent by the server
 it iscurrently an http
httpmessage instance
openers and handlers
basic authentication
proxies
installopeneropenernote  currently urllib
note  httpproxy will be ignored if a variable requestmethod is set  see the documentation on getproxies
sockets and layers
footnotes
this document was reviewed and revised by john lee
1 google for example
porting extension modules to python
we recommend the following resources for porting extension modules topython 3 the migrating c extensions chapter from supporting python 3 an in  depth guide a book on moving from python 2 to python 3 in general  guides the reader through porting an extension module
 the porting guide from the py3c project provides opinionated  suggestions with supporting code
 the cython and cffi libraries offer abstractions over pythons c  api
 extensions generally need to be rewritten to use one of them  but the library then handles differences between various python  versions and implementations
history and license
history of the software
python was created in the early 1990s by guido van rossum at stichtingmathematisch centrum cwi see httpswww
nl in the netherlandsas a successor of a language called abc
  guido remains pythonsprincipal author although it includes many contributions from others
in 1995 guido continued his work on python at the corporation fornational research initiatives cnri seehttpswww
us in reston virginia where he releasedseveral versions of the software
in may 2000 guido and the python core development team moved tobeopen
com to form the beopen pythonlabs team
  in october of the sameyear the pythonlabs team moved to digital creations now zopecorporation see httpswww
  in 2001 the python softwarefoundation psf see httpswww
orgpsf was formed a nonprofit organization created specifically to own pythonrelatedintellectual property
  zope corporation is a sponsoring member of thepsf
all python releases are open source see httpsopensource
org forthe open source definition
 historically most but not all pythonreleases have also been gplcompatible the table below summarizes thevarious releases
 release           derived from    year          owner         gpl compatible    0
0 thru 1
2    na             19911995     cwi           yes                1
3 thru 1
2    1
2             19951999     cnri          yes                1
2           2000          cnri          no                 2
com    no                 1
6             2001          cnri          no                 2
1       2001          psf           no                 2
1       2001          psf           yes                2
1       2001          psf           yes                2
1           2002          psf           yes                2
2           2002          psf           yes                2
2 and above     2
1           2001now      psf           yes               note  gplcompatible doesnt mean that were distributing python under the  gpl
  all python licenses unlike the gpl let you distribute a  modified version without making your changes open source
 the gpl  compatible licenses make it possible to combine python with other  software that is released under the gpl the others dont
thanks to the many outside volunteers who have worked under guidosdirection to make these releases possible
terms and conditions for accessing or otherwise using python
python software and documentation are licensed under the psf licenseagreement
starting with python 3
6 examples recipes and other code in thedocumentation are dual licensed under the psf license agreement andthe zeroclause bsd license
some software incorporated into python is under different licenses
the licenses are listed with code falling under that license
 seelicenses and acknowledgements for incorporated software for anincomplete list of these licenses
psf license agreement for python
beopencom license agreement for python
beopen python open source license agreement version 1   1
cnri license agreement for python
cwi license agreement for python 090 through
zeroclause bsd license for code in the python 390 documentation
licenses and acknowledgements for incorporated software
this section is an incomplete but growing list of licenses andacknowledgements for thirdparty software incorporated in the pythondistribution
mersenne twister
the random module includes code based on a download from httpwww
html
 thefollowing are the verbatim comments from the original code   a cprogram for mt19937 with initialization improved 2002126
sockets
the socket module uses the functions getaddrinfo andgetnameinfo which are coded in separate source files from thewide project httpwww
jp
asynchronous socket services
the asynchat and asyncore modules contain the following notice   copyright 1996 by sam rushing                           all rights reserved   permission to use copy modify and distribute this software and   its documentation for any purpose and without fee is hereby   granted provided that the above copyright notice appear in all   copies and that both that copyright notice and this permission   notice appear in supporting documentation and that the name of sam   rushing not be used in advertising or publicity pertaining to   distribution of the software without specific written prior   permission
cookie management
the http
cookies module contains the following notice   copyright 2000 by timothy omalley timoalum
execution tracing
the trace module contains the following notice   portions copyright 2001 autonomous zones industries inc
uuencode and uudecode functions
the uu module contains the following notice   copyright 1994 by lance ellinghouse   cathedral city california republic united states of america
xml remote procedure calls
the xmlrpc
client module contains the following notice       the xmlrpc client interface is   copyright c 19992002 by secret labs ab   copyright c 19992002 by fredrik lundh   by obtaining using andor copying this software andor its   associated documentation you agree that you have read understood   and will comply with the following terms and conditions   permission to use copy modify and distribute this software and   its associated documentation for any purpose and without fee is   hereby granted provided that the above copyright notice appears in   all copies and that both that copyright notice and this permission   notice appear in supporting documentation and that the name of   secret labs ab or the author not be used in advertising or publicity   pertaining to distribution of the software without specific written   prior permission
testepoll
the testepoll module contains the following notice   copyright c 20012006 twisted matrix laboratories
select kqueue
the select module contains the following notice for the kqueueinterface   copyright c 2000 doug white 2006 james knight 2007 christian heimes   all rights reserved
siphash
the file pythonpyhash
c contains marek majkowski implementation ofdan bernsteins siphash24 algorithm
 it contains the following note   mit license   copyright c 2013  marek majkowski marekpopcount
strtod and dtoa
the file pythondtoa
c which supplies c functions dtoa and strtodfor conversion of c doubles to and from strings is derived from thefile of the same name by david m
 gay currently available fromhttpwww
orgfp
  the original file as retrieved on march16 2009 contains the following copyright and licensing notice            the author of this software is david m
openssl
the modules hashlib posix ssl crypt use the openssl libraryfor added performance if made available by the operating system
additionally the windows and mac os x installers for python mayinclude a copy of the openssl libraries so we include a copy of theopenssl license here    license issues        the openssl toolkit stays under a dual license i
expat
the pyexpat extension is built using an included copy of the expatsources unless the build is configured withsystemexpat   copyright c 1998 1999 2000 thai open source software center ltd                                  and clark cooper   permission is hereby granted free of charge to any person obtaining   a copy of this software and associated documentation files the   software to deal in the software without restriction including   without limitation the rights to use copy modify merge publish   distribute sublicense andor sell copies of the software and to   permit persons to whom the software is furnished to do so subject to   the following conditions   the above copyright notice and this permission notice shall be included   in all copies or substantial portions of the software
libffi
the ctypes extension is built using an included copy of the libffisources unless the build is configured withsystemlibffi   copyright c 19962008  red hat inc and others
zlib
the zlib extension is built using an included copy of the zlibsources if the zlib version found on the system is too old to be usedfor the build   copyright c 19952011 jeanloup gailly and mark adler   this software is provided asis without any express or implied   warranty
cfuhash
the implementation of the hash table used by the tracemalloc isbased on the cfuhash project   copyright c 2005 don owens   all rights reserved
libmpdec
w3c c14n test suite
the c14n 2
0 test suite in the test packagelibtestxmltestdatac14n20 was retrieved from the w3c websiteat httpswww
orgtrxmlc14n2testcases and is distributed underthe 3clause bsd license   copyright c 2013 w3cr mit ercim keio beihang all rights   reserved
creating a source distribution
specifying the files to distribute
changed in version 3
1 an existing generated manifest will beregenerated without sdist comparing its modification time to theone of manifest
changed in version 3
3 manifest files start with a commentindicating they are generated
 files without this comment are notoverwritten or removed
changed in version 3
2 sdist will read a manifest file if nomanifest
changed in version 3
7 readme
rst is now included in the list ofdistutils standard readmes
  there are several other commands available in themanifest template minilanguage see section creating a sourcedistribution the sdist command
 include all python source files in the distutils and   distutilscommand subdirectories because packages corresponding   to those two directories were mentioned in the packages option in   the setup scriptsee section writing the setup script2
manifestrelated options
writing the setup script
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
  as we saw in section a simple exampleabove the setup script consists mainly of a call to setup andmost information supplied to the distutils by the module developer issupplied as keyword arguments to setup
command        there are only two differences between this and the trivial onefiledistribution presented in section a simple example more metadata andthe specification of pure python modules by package rather than bymodule
listing whole packages
listing individual modules
  thissimplest case was shown in section a simple example here is aslightly more involved example   pymodules  mod1 pkg
describing extension modules
extension names and packages
extension source files
preprocessor options
for example   extension
library options
other options
relationships between distributions and packages
lets look at a bunch of examples requires expression        explanation                                     1
some examples provides expression    explanation                                     mypkg                provide mypkg using the distribution                                version                                         mypkg 1
installing scripts
         scriptsscriptsxmlprocparse scriptsxmlprocval         changed in version 3
1 all the scripts will also be added to themanifest file if no template is provided
  see specifying the filesto distribute
installing package data
dat         changed in version 3
1 all the files that match packagedata willbe added to the manifest file if no template is provided
  seespecifying the files to distribute
installing additional files
changed in version 3
1 all the files that match datafiles will beadded to the manifest file if no template is provided
  seespecifying the files to distribute
additional metadata
 this information includes metadata               description                  value              notes     name                  name of the package          short string       1       version               version of this release      short string       12    author                package authors name        short string       3       authoremail          email address of the         email address      3                               package author                                            maintainer            package maintainers name    short string       3       maintaineremail      email address of the         email address      3                               package maintainer                                        url                   home page for the package    url                1       description           short summary description   short string                                         of the package                                            longdescription      longer description of the    long string        4                               package                                                   downloadurl          location where the package   url                                                  may be downloaded                                         classifiers           a list of classifiers        list of strings    67    platforms             a list of platforms          list of strings    68    keywords              a list of keywords           list of strings    68    license               license for the package      short string       5      notes1
         classifiers             development status  4  beta             environment  console             environment  web environment             intended audience  end usersdesktop             intended audience  developers             intended audience  system administrators             license  osi approved  python software foundation license             operating system  macos  macos x             operating system  microsoft  windows             operating system  posix             programming language  python             topic  communications  email             topic  officebusiness             topic  software development  bug tracking                      changed in version 3
7 setup now warns when classifierskeywords or platforms fields are not specified as a list or astring
debugging the setup script
command reference
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
installing modules the install command family
the install command ensures that the build commands have been run andthen runs the subcommands installlib installdata andinstallscripts
installdata
this command installs all data files provided with the distribution
installscripts
this command installs all python scripts in the distribution
creating a source distribution the sdist command
uploading packages to the package index
references to up to date pypi documentation can be found at readingthe python packaging user guide
creating built distributions
creating rpm packages
spec file option or section          distutils setup script option                   name                                        name                                          summary in preamble                       description                                   version                                     version                                       vendor                                      author and authoremail or                                                         maintainer and maintaineremail             copyright                                   license                                       url                                         url                                           description section                      longdescription                             additionally there are many options in 
spec file option or       bdistrpm option           default value              section                                                                                    release                          release                      1                        group                            group                        developmentlibraries    vendor                           vendor                       see above                packager                         packager                     none                     provides                         provides                     none                     requires                         requires                     none                     conflicts                        conflicts                    none                     obsoletes                        obsoletes                    none                     distribution                     distributionname            none                     buildrequires                    buildrequires               none                     icon                             icon                         none                    obviously supplying even a few of these options on the commandlinewould be tedious and errorprone so its usually best to put them inthe setup configuration file setup
cfgsee section writing thesetup configuration file
  if you distribute or package many pythonmodule distributions you might want to put options that apply to allof them in your personal distutils configuration file
  if you want to temporarily disable this fileyou can pass the nousercfg option to setup
creating windows installers
crosscompiling on windows
the postinstallation script
vista user access control uac
distutils examples
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
this chapter provides a number of basic examples to help get startedwith distutils
  additional information about using distutils can befound in the distutils cookbook
see also  distutils cookbook     collection of recipes showing how to achieve more control over     distutils
pure python distribution by module
pure python distribution by package
single extension module
extension modules are specified using the extmodules option
packagedir has no effect on where extension source files are foundit only affects the source for pure python modules
  the simplestcase a single extension module in a single c source file is   root           setup
cif the foo extension belongs in the root package the setup scriptfor this could be   from distutils
c         if the extension actually belongs in a package say foopkg thenwith exactly the same source tree layout this extension can be put inthe foopkg package simply by changing the name of the extension   from distutils
checking a package
the check command allows you to verify if your package metadatameet the minimum requirements to build a distribution
to run it just call it using your setup
py script
 if something ismissing check will display a warning
lets take an example with a simple script   from distutils
core import setup   setupnamefoobarrunning the check command will display some warnings    python setup
py check   running check   warning check missing required metadata version url   warning check missing metadata either author and authoremail or            maintainer and maintaineremail should be suppliedif you use the restructuredtext syntax in the longdescription fieldand docutils  is installed you can check if the syntax is fine withthe check command using the restructuredtext option
for example if the setup
py script is changed like this   from distutils
com longdescriptiondescwhere the long description is broken check will be able to detectit by using the docutils parser    python setup
reading the metadata
the distutils
setup function provides a commandlineinterface that allows you to query the metadata fields of a projectthrough the setup
py script of a given project    python setup
py name   distributethis call reads the name metadata by running thedistutils
setup  function
 although when a source or binarydistribution is created with distutils the metadata fields arewritten in a static file called pkginfo
 when a distutilsbasedproject is installed in python the pkginfo file is copiedalongside the modules and packages of the distribution under nameversionpyx
egginfo where name is the name of the projectversion its version as defined in the metadata and pyx
x themajor and minor version of python like 2
7 or 3
you can read back this static file by using thedistutils
distributionmetadata class and its readpkgfilemethod    from distutils
description   easily download build install upgrade and uninstall python packagesnotice that the class can also be instantiated with a metadata filepath to loads its values    pkginfopath  distribute0
writing the setup configuration file
distributing python modules legacy version
api reference
see also  new and changed setup
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
distutilscore  core distutils functionality
core module is the only module that needs to beinstalled to use the distutils
 it provides the setup which iscalled from the setup script
 indirectly provides thedistutils
distribution and distutils
command class
       argument name         value                             type                                                                 name                the name of the package           a string                                                             version             the version number of the         a string                                                                                package see distutils
version                                                                       description         a single line describing the      a string                                                                                package                                                                                                longdescription    longer description of the         a string                                                                                package                                                                                                author              the name of the package author    a string                                                             authoremail        the email address of the package  a string                                                                                author                                                                                                 maintainer          the name of the current           a string                                                                                maintainer if different from                                                                                             the author
 note that if the                                                                                              maintainer is provided                                                                                                   distutils will use it as the                                                                                              author in pkginfo                                                                                   maintaineremail    the email address of the current  a string                                                                                maintainer if different from                                                                                             the author                                                                                             url                 a url for the package homepage  a string                                                             downloadurl        a url to download the package     a string                                                             packages            a list of python packages that    a list of strings                                                                       distutils will manipulate                                                                              pymodules          a list of python modules that     a list of strings                                                                       distutils will manipulate                                                                              scripts             a list of standalone script       a list of strings                                                                       files to be built and installed                                                                        extmodules         a list of python extensions to    a list of instances of distutils
extension                                       be built                                                                                               classifiers         a list of categories for the      a list of strings valid classifiers are listed on pypi
                                package                                                                                                distclass           the distribution class to use   a subclass of distutils
distribution                          scriptname         the name of the setup
py script   a string                                                                                 defaults to sys
argv0                                                                            scriptargs         arguments to supply to the setup  a list of strings                                                                       script                                                                                                 options             default options for the setup     a dictionary                                                                            script                                                                                                 license             the license for the package       a string                                                             keywords            descriptive metadata see pep  a list of strings or a commaseparated string                                           314                                                                                                  platforms                                             a list of strings or a commaseparated string                        cmdclass            a mapping of command names to     a dictionary                                                                            command subclasses                                                                                   datafiles          a list of data files to install   a list                                                               packagedir         a mapping of package to           a dictionary                                                                            directory names                                                                                    distutils
   stopafter tells setup when to stop processing possible   values       value            description                                          init           stop after the distribution instance has                         been created  and populated with the keyword                       arguments to setup                               config         stop after config files have been parsed and                      their data stored in the distribution                            instance                                            commandline    stop after the commandline sys
 it accepts the following keyword arguments in its   constructor       argument name             value                             type                               name                    the full name of the extension   a string                                                  including any packages  ie
                                                              not a filename or pathname                                                               but python dotted name                                               sources                 list of source filenames         a list of strings                                         relative to the distribution                                                                root where the setup script                                                                lives in unix form slash                                                                separated for portability
                                              includedirs            list of directories to search     a list of strings                                         for cc header files in unix                                                             form for portability                                                definemacros           list of macros to define each    a list of tuples                                          macro is defined using a 2tuple                                                            name value where value                                                              is either the string to define                                                              it to or none to define it                                                                without a particular value                                                                  equivalent of define foo in                                                             source or dfoo on unix c                                                                 compiler command line                                               undefmacros            list of macros to undefine        a list of strings                                         explicitly                                                           librarydirs            list of directories to search     a list of strings                                         for cc libraries at link time                                     libraries               list of library names not        a list of strings                                         filenames or paths to link                                                                 against                                                              runtimelibrarydirs    list of directories to search     a list of strings                                         for cc libraries at run time                                                             for shared extensions this is                                                             when the extension is loaded                                        extraobjects           list of extra files to link with  a list of strings                                         eg
                                         extracompileargs      any extra platform and           a list of strings                                         compilerspecific information to                                                            use when compiling the source                                                               files in sources
                                      extralinkargs         any extra platform and           a list of strings                                         compilerspecific information to                                                            use when linking object files                                                               together to create the extension                                                            or to create a new static                                                                  python interpreter
                                                exportsymbols          list of symbols to be exported    a list of strings                                         from a shared extension
                                             depends                 list of files that the extension  a list of strings                                         depends on                                                           language                extension language i
 c   a string                                                  c objc
                                          optional                specifies that a build failure    a boolean                                                 in the extension should not                                                                 abort the build process but                                                                simply skip the extension
                                          changed in version 3
8 on unix c extensions are no longer linked   to libpython except on android and cygwin
   changed in version 3
7 distribution now warns if classifiers   keywords and platforms fields are not specified as a list or a   string
distutilsccompiler  ccompiler base class
  the exact set of      executables that may be specified here depends on the compiler      class via the executables class attribute but most will      have             attribute       description                                             compiler      the cc compiler                                      linkerso     linker used to create shared objects and                          libraries                                               linkerexe    linker used to create binary executables                archiver      static library creator                                 on platforms with a commandline unix doswindows each of      these is a string that will be split into executable name and      optional list of arguments
distutilsunixccompiler  unix c compiler
distutilsmsvccompiler  microsoft compiler
distutilsbcppcompiler  borland compiler
distutilscygwincompiler  cygwin compiler
distutilsarchiveutil   archiving utilities
distutilsdeputil  dependency checking
distutilsdirutil  directory tree operations
   changed in version 3
1 nfs files are ignored
distutilsfileutil  single file operations
   warning     handles crossdevice moves on unix using copyfile
distutilsutil  miscellaneous other utility functions
   examples of returned values    linuxi586    linuxalpha    solaris2
8 and     earlier   changed in version 3
9 the aix platform string format now also   includes the technology level build date and abi bitsize
   changed in version 3
3 create 
pyc files with an import magic   tag in their name in a pycache subdirectory instead of   files without tag in the current directory
   changed in version 3
5 create 
pyc files according to pep   488
distutilsdist  the distribution class
distutilsextension  the extension class
distutilsdebug  distutils debug mode
this module provides the debug flag
distutilserrors  distutils exceptions
distutilsfancygetopt  wrapper around the standard getopt module
distutilsfilelist  the filelist class
distutilslog  simple pep 282style logging
distutilsspawn  spawn a subprocess
distutilssysconfig  system configuration information
distutilstextfile  the textfile class
   the options are all boolean and affect the values returned by   readline       option name         description                       default          stripcomments    strip from  to endofline  true                              as well as any whitespace                                           leading up to the unless                                    it is escaped by a backslash                       lstripws         strip leading whitespace from     false                             each line before returning it                      rstripws         strip trailing whitespace         true                              including line terminator                                        from each line before returning                                     it
distutilsversion  version number classes
distutilscmd  abstract base class for distutils commands
creating a new distutils command
distutilscommand  individual distutils commands
distutilscommandbdist  build a binary installer
distutilscommandbdistpackager  abstract base class for packagers
distutilscommandbdistdumb  build a dumb installer
distutilscommandbdistmsi  build a microsoft installer binary package
bdistmsideprecated since version 3
9 use bdistwheel wheel packagesinstead
builds a windows installer 
in mostcases the bdistmsi installer is a better choice than thebdistwininst installer because it provides better support forwin64 platforms allows administrators to perform noninteractiveinstallations and allows installation through group policies
distutilscommandbdistrpm  build a binary distribution as a redhat rpm and srpm
distutilscommandbdistwininst  build a windows installer
deprecated since version 3
8 use bdistwheel wheel packagesinstead
distutilscommandsdist  build a source distribution
distutilscommandbuild  build all files of a package
distutilscommandbuildclib  build any c libraries in a package
distutilscommandbuildext  build any extensions in a package
distutilscommandbuildpy  build the pypyc files of a package
distutilscommandbuildscripts  build the scripts of a package
distutilscommandclean  clean a package build area
distutilscommandconfig  perform package configuration
distutilscommandinstall  install a package
distutilscommandinstalldata  install data files from a package
distutilscommandinstallheaders  install cc header files from a package
distutilscommandinstalllib  install library files from a package
distutilscommandinstallscripts  install script files from a package
distutilscommandregister  register a module with the python package index
distutilscommandcheck  check the metadata of a package
extending distutils
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
distutils can be extended in various ways
  most extensions take theform of new commands or replacements for existing commands
  newcommands may be written to support new types of platformspecificpackaging for example while replacements for existing commands maybe made to modify details of how the command operates on a package
most extensions of the distutils are made within setup
py scriptsthat want to modify existing commands many simply add a few fileextensions that should be copied into packages in addition to 
pyfiles as a convenience
most distutils command implementations are subclasses of thedistutils
command class
  new commands may directly inherit fromcommand while replacements often derive from command indirectlydirectly subclassing the command they are replacing
  commands arerequired to derive from command
integrating new commands
there are different ways to integrate new command implementations intodistutils
  the most difficult is to lobby for the inclusion of thenew features in distutils itself and wait for and require a versionof python that provides that support
  this is really hard for manyreasons
the most common and possibly the most reasonable for most needs isto include the new implementations with your setup
py script andcause the distutils
setup function use them   from distutils
this approach is most valuable if the new implementations must be usedto use a particular package as everyone interested in the packagewill need to have the new command implementation
beginning with python 2
4 a third option is available intended toallow new commands to be added which can support existing setup
pyscripts without requiring modifications to the python installation
this is expected to allow thirdparty extensions to provide supportfor additional packaging systems but the commands can be used foranything distutils commands can be used for
  a new configurationoption commandpackages commandline option commandpackagescan be used to specify additional packages to be searched for modulesimplementing commands
  like all distutils options this can bespecified on the command line or in a configuration file
  this optioncan only be set in the global section of a configuration file orbefore any commands on the command line
  if set in a configurationfile it can be overridden from the command line setting it to anempty string on the command line causes the default to be used
  thisshould never be set in a configuration file provided with a package
this new option can be used to add any number of packages to the listof packages searched for command implementations multiple packagenames should be separated by commas
  when not specified the searchis only performed in the distutils
command package
  when setup
pyis run with the option commandpackages distcmdsbuildcmdshowever the packages distutils
command distcmds and buildcmdswill be searched in that order
  new commands are expected to beimplemented in modules of the same name as the command by classessharing the same name
  given the example command line option abovethe command bdistopenpkg could be implemented by the classdistcmds
bdistopenpkg orbuildcmds
bdistopenpkg
adding new distribution types
commands that create distributions files in the dist directoryneed to add command filename pairs toself
distfiles so that upload can upload it topypi
  the filename in the pair contains no path information onlythe name of the file itself
  in dryrun mode pairs should still beadded to represent what would have been created
the python package index pypi
the python package index pypi stores metadata describingdistributions packaged with distutils and other publishing tools aswell the distribution archives themselves
references to up to date pypi documentation can be found at readingthe python packaging user guide
an introduction to distutils
note  this document is being retained solely until the setuptools  documentation at  httpssetuptools
html  independently covers all of the relevant information currently  included here
this document covers using the distutils to distribute your pythonmodules concentrating on the role of developerdistributor if yourelooking for information on installing python modules you should referto the installing python modules legacy version chapter
concepts  terminology
  as adeveloper your responsibilities apart from writing solid welldocumented and welltested code of course are write a setup script setup
py by convention optional write a setup configuration file create a source distribution optional create one or more built binary distributionseach of these tasks is covered in this document
a simple example
general python terminology
  nevertheless just to be surethat everyone is operating from a common starting point we offer thefollowing glossary of common python termsmodule   the basic unit of code reusability in python a block of code   imported by some other code
extension module   a module written in the lowlevel language of the python   implementation cc for python java for jython
package   a module that contains other modules typically contained in a   directory in the filesystem and distinguished from other   directories by the presence of a file init
distutilsspecific terminology
python on windows faq
how do i run a python program under windows
how do i make python scripts executable
on windows the standard python installer already associates the 
pyextension with a file type python
file and gives that file type anopen command that runs the interpreter dprogramfilespythonpython
exe 1 
  this is enough to make scriptsexecutable from the command prompt as foo
py
  if youd rather beable to execute the script by simple typing foo with no extensionyou need to add 
py to the pathext environment variable
why does python sometimes take so long to start
usually python starts very quickly on windows but occasionally thereare bug reports that python suddenly begins to take a long time tostart up
  this is made even more puzzling because python will workfine on other windows systems which appear to be configuredidentically
the problem may be caused by a misconfiguration of virus checkingsoftware on the problem machine
  some virus scanners have been knownto introduce startup overhead of two orders of magnitude when thescanner is configured to monitor all reads from the filesystem
  trychecking the configuration of virus scanning software on your systemsto ensure that they are indeed configured identically
 mcafee whenconfigured to scan all file system read activity is a particularoffender
how do i make an executable from a python script
see cxfreeze for a distutils extension that allows you to createconsole and gui executables from python code
 py2exe the most popularextension for building python 2
xbased executables does not yetsupport python 3 but a version that does is in development
is a pyd file the same as a dll
how can i embed python into a windows application
embedding the python interpreter in a windows app can be summarized asfollows1
 do not build python into your 
exe file directly
  on windows   python must be a dll to handle importing modules that are   themselves dlls
  this is the first key undocumented fact
   instead link to pythonnn
dll it is typically installed in   cwindowssystem
  nn is the python version a number such as   33 for python 3
3
   you can link to python in two different ways
  loadtime linking   means linking against pythonnn
lib while runtime linking   means linking against pythonnn
dll
  general note   pythonnn
lib is the socalled import lib corresponding to   pythonnn
dll
  it merely defines symbols for the linker
   runtime linking greatly simplifies link options everything   happens at run time
  your code must load pythonnn
dll using   the windows loadlibraryex routine
  the code must also use   access routines and data in pythonnn
dll that is pythons c   apis using pointers obtained by the windows getprocaddress   routine
  macros can make using these pointers transparent to any c   code that calls routines in pythons c api
   borland note convert pythonnn
lib to omf format using   coff2omf
exe first
 if you use swig it is easy to create a python extension module   that will make the apps data and methods available to python
   swig will handle just about all the grungy details for you
  the   result is c code that you link into your 
exe file   you do   not have to create a dll file and this also simplifies linking
 swig will create an init function a c function whose name depends   on the name of the extension module
  for example if the name of   the module is leo the init function will be called initleo
  if   you use swig shadow classes as you should the init function will   be called initleoc
  this initializes a mostly hidden helper   class used by the shadow class
   the reason you can link the c code in step 2 into your 
exe file is   that calling the initialization function is equivalent to importing   the module into python this is the second key undocumented fact
4
 in short you can use the following code to initialize the python   interpreter with your extension module
 there are two problems with pythons c api which will become   apparent if you use a compiler other than msvc the compiler used   to build pythonnn
dll
   problem 1 the socalled very high level functions that take file    arguments will not work in a multicompiler environment because   each compilers notion of a struct file will be different
  from an   implementation standpoint these are very low level functions
   problem 2 swig generates the following code when generating   wrappers to void functions      pyincrefpynone      resultobj  pynone      return resultobj   alas pynone is a macro that expands to a reference to a complex   data structure called pynonestruct inside pythonnn
dll
  again   this code will fail in a multcompiler environment
  replace such   code by      return pybuildvalue   it may be possible to use swigs typemap command to make the   change automatically though i have not been able to get this to   work im a complete swig newbie
 using a python shell script to put up a python interpreter window   from inside your windows app is not a good idea the resulting   window will be independent of your apps windowing system
  rather   you or the wxpythonwindow class should create a native   interpreter window
  it is easy to connect that window to the   python interpreter
  you can redirect pythons io to any object   that supports read and write so all you need is a python object   defined in your extension module that contains read and write   methods
how do i keep editors from inserting tabs into my python source
the faq does not recommend using tabs and the python style guidepep 8 recommends 4 spaces for distributed python code this isalso the emacs pythonmode default
under any editor mixing tabs and spaces is a bad idea
  msvc is nodifferent in this respect and is easily configured to use spacestake tools ‣ options ‣ tabs and for file type default set tabsize and indent size to 4 and select the insert spaces radiobutton
python raises indentationerror or taberror if mixed tabs andspaces are causing problems in leading whitespace
 you may also runthe tabnanny module to check a directory tree in batch mode
how do i check for a keypress without blocking
use the msvcrt module
  this is a standard windowsspecificextension module
 it defines a function kbhit which checks whethera keyboard hit is present and getch which gets one characterwithout echoing it
programming faq
general questions
is there a source code level debugger with breakpoints singlestepping etc
yes
several debuggers for python are described below and the builtinfunction breakpoint allows you to drop into any of them
the pdb module is a simple but adequate consolemode debugger forpython
 it is part of the standard python library and is documentedin the library reference manual
 you can also write your own debuggerby using the code for pdb as an example
the idle interactive development environment which is part of thestandard python distribution normally available astoolsscriptsidle includes a graphical debugger
pythonwin is a python ide that includes a gui debugger based on pdb
the pythonwin debugger colors breakpoints and has quite a few coolfeatures such as debugging nonpythonwin programs
  pythonwin isavailable as part of the python for windows extensions project and asa part of the activepython distribution seehttpswww
comactivepython
eric is an ide built on pyqt and the scintilla editing component
pydb is a version of the standard python debugger pdb modified foruse with ddd data display debugger a popular graphical debuggerfront end
  pydb can be found at httpbashdb
netpydband ddd can be found at httpswww
orgsoftwareddd
there are a number of commercial python ides that include graphicaldebuggers
 they include wing ide httpswingware
are there tools to help find bugs or perform static analysis
yes
pylint and pyflakes do basic checking that will help you catch bugssooner
static type checkers such as mypy pyre and pytype can check typehints in python source code
how can i create a standalone binary from a python script
you dont need the ability to compile python to c code if all you wantis a standalone program that users can download and run withouthaving to install the python distribution first
  there are a numberof tools that determine the set of modules required by a program andbind these modules together with a python binary to produce a singleexecutable
one is to use the freeze tool which is included in the python sourcetree as toolsfreeze
 it converts python byte code to c arrays a ccompiler you can embed all your modules into a new program which isthen linked with the standard python modules
it works by scanning your source recursively for import statements inboth forms and looking for the modules in the standard python path aswell as in the source directory for builtin modules
  it then turnsthe bytecode for modules written in python into c code arrayinitializers that can be turned into code objects using the marshalmodule and creates a custommade config file that only contains thosebuiltin modules which are actually used in the program
  it thencompiles the generated c code and links it with the rest of the pythoninterpreter to form a selfcontained binary which acts exactly likeyour script
obviously freeze requires a c compiler
  there are several otherutilities which dont
 one is thomas hellers py2exe windows only at   httpwww
organother tool is anthony tuiningas cxfreeze
are there coding standards or a style guide for python programs
yes
  the coding style required for standard library modules isdocumented as pep 8
core language
why am i getting an unboundlocalerror when the variable has a value
it can be a surprise to get the unboundlocalerror in previouslyworking code when it is modified by adding an assignment statementsomewhere in the body of a function
this code x  10 def bar
     printx bar10works but this code x  10 def foo
     x  1results in an unboundlocalerror footraceback most recent call last  
unboundlocalerror local variable x referenced before assignmentthis is because when you make an assignment to a variable in a scopethat variable becomes local to that scope and shadows any similarlynamed variable in the outer scope
  since the last statement in fooassigns a new value to x the compiler recognizes it as a localvariable
  consequently when the earlier printx attempts to printthe uninitialized local variable and an error results
in the example above you can access the outer scope variable bydeclaring it global x  10 def foobar
     x  1 foobar10this explicit declaration is required in order to remind you thatunlike the superficially analogous situation with class and instancevariables you are actually modifying the value of the variable in theouter scope printx11you can do a similar thing in a nested scope using the nonlocalkeyword def foo
what are the rules for local and global variables in python
in python variables that are only referenced inside a function areimplicitly global
  if a variable is assigned a value anywhere withinthe functions body its assumed to be a local unless explicitlydeclared as global
though a bit surprising at first a moments consideration explainsthis
  on one hand requiring global for assigned variables providesa bar against unintended sideeffects
  on the other hand if globalwas required for all global references youd be using global allthe time
  youd have to declare as global every reference to a builtin function or to a component of an imported module
  this clutterwould defeat the usefulness of the global declaration foridentifying sideeffects
why do lambdas defined in a loop with different values all return the same result
how do i share global variables across modules
the canonical way to share information across modules within a singleprogram is to create a special module often called config or cfg
just import the config module in all modules of your application themodule then becomes available as a global name
  because there is onlyone instance of each module any changes made to the module object getreflected everywhere
  for exampleconfig
xnote that using a module is also the basis for implementing thesingleton design pattern for the same reason
what are the best practices for using import in a module
why are default values shared between objects
this type of bug commonly bites neophyte programmers
  consider thisfunction   def foomydict   danger shared reference to one dict for all calls       
       mydictkey  value       return mydictthe first time you call this function mydict contains a singleitem
  the second time mydict contains two items because whenfoo begins executing mydict starts out with an item already init
it is often expected that a function call creates new objects fordefault values
 this is not what happens
 default values are createdexactly once when the function is defined
  if that object ischanged like the dictionary in this example subsequent calls to thefunction will refer to this changed object
by definition immutable objects such as numbers strings tuples andnone are safe from change
 changes to mutable objects such asdictionaries lists and class instances can lead to confusion
because of this feature it is good programming practice to not usemutable objects as default values
  instead use none as the defaultvalue and inside the function check if the parameter is none andcreate a new listdictionarywhatever if it is
  for example dontwrite   def foomydict       
but   def foomydictnone       if mydict is none           mydict     create a new dict for local namespacethis feature can be useful
  when you have a function thats timeconsuming to compute a common technique is to cache the parametersand the resulting value of each call to the function and return thecached value if the same value is requested again
  this is calledmemoizing and can be implemented like this    callers can only provide two parameters and optionally pass cache by keyword   def expensivearg1 arg2  cache       if arg1 arg2 in cache           return cachearg1 arg2        calculate the value       result  
       cachearg1 arg2  result            store result in the cache       return resultyou could use a global variable containing a dictionary instead of thedefault value its a matter of taste
how can i pass optional or keyword parameters from one function to another
collect the arguments using the  and  specifiers in thefunctions parameter list this gives you the positional arguments asa tuple and the keyword arguments as a dictionary
  you can then passthese arguments when calling another function by using  and    def fx args kwargs       
what is the difference between arguments and parameters
parameters are defined by the names that appear in a functiondefinition whereas arguments are the values actually passed to afunction when calling it
  parameters define what types of arguments afunction can accept
  for example given the function definition   def funcfoo barnone kwargs       passfoo bar and kwargs are parameters of func
  however whencalling func for example   func42 bar314 extrasomevarthe values 42 314 and somevar are arguments
why did changing list y also change list x
how do i write a function with output parameters call by reference
remember that arguments are passed by assignment in python
  sinceassignment just creates references to objects theres no aliasbetween an argument name in the caller and callee and so no callbyreference per se
  you can achieve the desired effect in a number ofways
 by returning a tuple of the results       def func1a b      
       x y  oldvalue 99       func1x y      newvalue 100   this is almost always the clearest solution
 by using global variables
  this isnt threadsafe and is not   recommended
 by passing a mutable changeable inplace object       def func2a      
 by passing in a dictionary that gets mutated       def func3args      
 or bundle up values in a class instance       class namespace      
       args  namespaceaoldvalue b99       func4args       varsargs      a newvalue b 100   theres almost never a good reason to get this complicated
your best choice is to return a tuple containing the multiple results
how do you make a higher order function in python
you have two choices you can use nested scopes or you can usecallable objects
 for example suppose you wanted to definelinearab which returns a function fx that computes the valueaxb
  using nested scopes   def lineara b       def resultx           return a  x  b       return resultor using a callable object   class linear       def initself a b           self
bin both cases   taxes  linear0
3 2gives a callable object where taxes10e6  0
the callable object approach has the disadvantage that it is a bitslower and results in slightly longer code
  however note that acollection of callables can share their signature via inheritance   class exponentiallinear        init inherited       def callself x           return self
bobject can encapsulate state for several methods   class counter       value  0       def setself x           self
sethere inc dec and reset act like functions which share thesame counting variable
how do i copy an object in python
in general try copy
copy or copy
deepcopy for the generalcase
 not all objects can be copied but most can
some objects can be copied more easily
  dictionaries have a copymethod   newdict  olddict
copysequences can be copied by slicing   newl  l
how can i find the methods or attributes of an object
for an instance x of a userdefined class dirx returns analphabetized list of the names containing the instance attributes andmethods and attributes defined by its class
how can my code discover the name of an object
whats up with the comma operators precedence
comma is not an operator in python
  consider this session    a in b a   false asince the comma is not an operator but a separator betweenexpressions the above is evaluated as if you had entered   a in b anot   a in b athe same is true of the various assignment operators   etc
they are not truly operators but syntactic delimiters in assignmentstatements
is there an equivalent of cs  ternary operator
yes there is
 the syntax is as follows   ontrue if expression else onfalse   x y  50 25   small  x if x  y else ybefore this syntax was introduced in python 2
5 a common idiom was touse logical operators   expression and ontrue or onfalsehowever this idiom is unsafe as it can give wrong results whenontrue has a false boolean value
  therefore it is always betterto use the 
 form
is it possible to write obfuscated oneliners in python
yes
  usually this is done by nesting lambda within lambda
  seethe following three examples due to ulf bartelt   from functools import reduce    primes  1000   printlistfilternonemaplambda yyreducelambda xyxy0   maplambda xyyyxrange2intpowy0
2 30 80 24                    lines on screen           v          v          columns on screen                            maximum of iterations                      range on y axis            range on x axisdont try this at home kids
what does the slash in the parameter list of a function mean
a slash in the argument list of a function denotes that the parametersprior to it are positionalonly
  positionalonly parameters are theones without an externallyusable name
  upon calling a function thataccepts positionalonly parameters arguments are mapped to parametersbased solely on their position
 for example divmod is a functionthat accepts positionalonly parameters
 its documentation looks likethis    helpdivmod   help on builtin function divmod in module builtins   divmodx y        return the tuple xy xy
the slash at the end of the parameter list means that both parametersare positionalonly
 thus calling divmod with keyword argumentswould lead to an error    divmodx3 y4   traceback most recent call last     file stdin line 1 in module   typeerror divmod takes no keyword arguments
numbers and strings
how do i specify hexadecimal and octal integers
to specify an octal digit precede the octal value with a zero andthen a lower or uppercase o
  for example to set the variable ato the octal value 10 8 in decimal type    a  0o10    a   8hexadecimal is just as easy
  simply precede the hexadecimal numberwith a zero and then a lower or uppercase x
  hexadecimal digitscan be specified in lower or uppercase
  for example in the pythoninterpreter    a  0xa5    a   165    b  0xb2    b   178
why does 22  10 return 3
how do i convert a string to a number
how do i convert a number to a string
how do i modify a string in place
you cant because strings are immutable
  in most situations youshould simply construct a new string from the various parts you wantto assemble it from
  however if you need an object with the abilityto modify inplace unicode data try using an io
stringio object orthe array module    import io    s  hello world    sio  io
how do i use strings to call functionsmethods
there are various techniques
 the best is to use a dictionary that maps strings to functions
  the  primary advantage of this technique is that the strings do not need  to match the names of the functions
  this is also the primary  technique used to emulate a case construct     def a         pass     def b         pass     dispatch  go a stop b   note lack of parens for funcs     dispatchgetinput   note trailing parens to call function use the builtin function getattr     import foo     getattrfoo bar  note that getattr works on any object including classes class  instances modules and so on
  this is used in several places in the standard library like this     class foo         def dofooself             
     f  getattrfooinstance do  opname     f use locals to resolve the function name     def myfunc         printhello     fname  myfunc     f  localsfname     f
is there an equivalent to perls chomp for removing trailing newlines from strings
you can use s
rstriprn to remove all occurrences of any lineterminator from the end of the string s without removing othertrailing whitespace
  if the string s represents more than one linewith several empty lines at the end the line terminators for all theblank lines will be removed    lines  line 1 rn   
rstripnr   line 1 since this is typically only desired when reading text one line at atime using s
rstrip this way works well
is there a scanf or sscanf equivalent
not as such
for simple input parsing the easiest approach is usually to split theline into whitespacedelimited words using the split method ofstring objects and then convert decimal strings to numeric valuesusing int or float
  split supports an optional sepparameter which is useful if the line uses something other thanwhitespace as a separator
for more complicated input parsing regular expressions are morepowerful than cs sscanf and better suited for the task
what does unicodedecodeerror or unicodeencodeerror error  mean
see the unicode howto
performance
my program is too slow how do i speed it up
thats a tough one in general
  first here are a list of things toremember before diving further performance characteristics vary across python implementations
  this faq focuses on cpython
 behaviour can vary across operating systems especially when talking  about io or multithreading
 you should always find the hot spots in your program before  attempting to optimize any code see the profile module
 writing benchmark scripts will allow you to iterate quickly when  searching for improvements see the timeit module
 it is highly recommended to have good code coverage through unit  testing or any other technique before potentially introducing  regressions hidden in sophisticated optimizations
that being said there are many tricks to speed up python code
  hereare some general principles which go a long way towards reachingacceptable performance levels making your algorithms faster or changing to faster ones can yield  much larger benefits than trying to sprinkle microoptimization  tricks all over your code
 use the right data structures
  study documentation for the builtin  types and the collections module
 when the standard library provides a primitive for doing something  it is likely although not guaranteed to be faster than any  alternative you may come up with
  this is doubly true for  primitives written in c such as builtins and some extension types
  for example be sure to use either the list
sort builtin method  or the related sorted function to do sorting and see the  sorting how to for examples of moderately advanced usage
 abstractions tend to create indirections and force the interpreter  to work more
  if the levels of indirection outweigh the amount of  useful work done your program will be slower
  you should avoid  excessive abstraction especially under the form of tiny functions  or methods which are also often detrimental to readability
if you have reached the limit of what pure python can allow there aretools to take you further away
  for example cython can compile aslightly modified version of python code into a c extension and canbe used on many different platforms
  cython can take advantage ofcompilation and optional type annotations to make your codesignificantly faster than when interpreted
  if you are confident inyour c programming skills you can also write a c extension moduleyourself
see also the wiki page devoted to performance tips
what is the most efficient way to concatenate many strings together
str and bytes objects are immutable therefore concatenating manystrings together is inefficient as each concatenation creates a newobject
  in the general case the total runtime cost is quadratic inthe total string length
to accumulate many str objects the recommended idiom is to placethem into a list and call str
join at the end   chunks     for s in mystrings       chunks
joinchunksanother reasonably efficient idiom is to use io
stringioto accumulate many bytes objects the recommended idiom is to extenda bytearray object using inplace concatenation the  operator   result  bytearray   for b in mybytesobjects       result  b
sequences tupleslists
how do i convert between tuples and lists
the type constructor tupleseq converts any sequence actually anyiterable into a tuple with the same items in the same order
for example tuple1 2 3 yields 1 2 3 and tupleabcyields a b c
  if the argument is a tuple it does notmake a copy but returns the same object so it is cheap to calltuple when you arent sure that an object is already a tuple
the type constructor listseq converts any sequence or iterableinto a list with the same items in the same order
  for examplelist1 2 3 yields 1 2 3 and listabc yields ab c
  if the argument is a list it makes a copy just likeseq would
whats a negative index
python sequences are indexed with positive numbers and negativenumbers
  for positive numbers 0 is the first index 1 is the secondindex and so forth
  for negative indices 1 is the last index and 2is the penultimate next to last index and so forth
  think ofseqn as the same as seqlenseqn
using negative indices can be very convenient
  for example s1is all of the string except for its last character which is usefulfor removing the trailing newline from a string
how do i iterate over a sequence in reverse order
use the reversed builtin function   for x in reversedsequence       
this wont touch your original sequence but build a new copy withreversed order to iterate over
how do you remove duplicates from a list
how do you remove multiple items from a list
as with removing duplicates explicitly iterating in reverse with adelete condition is one possibility
  however it is easier and fasterto use slice replacement with an implicit or explicit forwarditeration
 here are three variations
   mylist  filterkeepfunction mylist   mylist  x for x in mylist if keepcondition   mylist  x for x in mylist if keepconditionthe list comprehension may be fastest
how do you make an array in python
use a list   this 1 is an arraylists are equivalent to c or pascal arrays in their time complexitythe primary difference is that a python list can contain objects ofmany different types
the array module also provides methods for creating arrays of fixedtypes with compact representations but they are slower to index thanlists
  also note that the numeric extensions and others define arraylike structures with various characteristics as well
to get lispstyle linked lists you can emulate cons cells usingtuples   lisplist  like  this  example none  if mutability is desired you could use lists instead of tuples
  herethe analogue of lisp car is lisplist0 and the analogue of cdr islisplist1
  only do this if youre sure you really need tobecause its usually a lot slower than using python lists
how do i create a multidimensional list
you probably tried to make a multidimensional array like this    a  none  2  3this looks correct if you print it    a   none none none none none nonebut when you assign a value it shows up in multiple places    a00  5    a   5 none 5 none 5 nonethe reason is that replicating a list with  doesnt create copiesit only creates references to the existing objects
  the 3 createsa list containing 3 references to the same list of length two
changes to one row will show in all rows which is almost certainlynot what you want
the suggested approach is to create a list of the desired length firstand then fill in each element with a newly created list   a  none  3   for i in range3       ai  none  2this generates a list containing 3 different lists of length two
  youcan also use a list comprehension   w h  2 3   a  none  w for i in rangehor you can use an extension that provides a matrix datatype numpy isthe best known
how do i apply a method to a sequence of objects
use a list comprehension   result  obj
why does atuplei  item raise an exception when the addition works
this is because of a combination of the fact that augmented assignmentoperators are assignment operators and the difference betweenmutable and immutable objects in python
this discussion applies in general when augmented assignment operatorsare applied to elements of a tuple that point to mutable objects butwell use a list and  as our exemplar
if you wrote    atuple  1 2    atuple0  1   traceback most recent call last      
   typeerror tuple object does not support item assignmentthe reason for the exception should be immediately clear 1 is addedto the object atuple0 points to 1 producing the resultobject 2 but when we attempt to assign the result of thecomputation 2 to element 0 of the tuple we get an error becausewe cant change what an element of a tuple points to
under the covers what this augmented assignment statement is doing isapproximately this    result  atuple0  1    atuple0  result   traceback most recent call last     
   typeerror tuple object does not support item assignmentit is the assignment part of the operation that produces the errorsince a tuple is immutable
when you write something like    atuple  foo bar    atuple0  item   traceback most recent call last     
   typeerror tuple object does not support item assignmentthe exception is a bit more surprising and even more surprising isthe fact that even though there was an error the append worked    atuple0   foo itemto see why this happens you need to know that a if an objectimplements an iadd magic method it gets called when the augmented assignment is executed and its return value is what getsused in the assignment statement and b for lists iadd isequivalent to calling extend on the list and returning the list
thats why we say that for lists  is a shorthand forlist
extend    alist      alist  1    alist   1this is equivalent to    result  alist
iadd1    alist  resultthe object pointed to by alist has been mutated and the pointer tothe mutated object is assigned back to alist
  the end result ofthe assignment is a noop since it is a pointer to the same objectthat alist was previously pointing to but the assignment stillhappens
thus in our tuple example what is happening is equivalent to    result  atuple0
   typeerror tuple object does not support item assignmentthe iadd succeeds and thus the list is extended but eventhough result points to the same object that atuple0 alreadypoints to that final assignment still results in an error becausetuples are immutable
i want to do a complicated sort can you do a schwartzian transform in python
the technique attributed to randal schwartz of the perl communitysorts the elements of a list by a metric which maps each element toits sort value
 in python use the key argument for thelist
sort method   isorted  l   isorted
how can i sort one list by values from another list
merge them into an iterator of tuples sort the resulting list andthen pick out the element you want
objects
what is a class
what is a method
what is self
self is merely a conventional name for the first argument of a method
a method defined as methself a b c should be called asx
metha b c for some instance x of the class in which thedefinition occurs the called method will think it is called asmethx a b c
see also why must self be used explicitly in method definitions andcalls
how do i check if an object is an instance of a given class or of a subclass of it
what is delegation
delegation is an object oriented technique also called a designpattern
 lets say you have an object x and want to change thebehaviour of just one of its methods
  you can create a new class thatprovides a new implementation of the method youre interested inchanging and delegates all other methods to the corresponding methodof x
python programmers can easily implement delegation
  for example thefollowing class implements a class that behaves like a file butconverts all written data to uppercase   class upperout       def initself outfile           self
outfile namehere the upperout class redefines the write method to convertthe argument string to uppercase before calling the underlyingself
write method
  all other methods are delegated tothe underlying self
outfile object
  the delegation is accomplishedvia the getattr method consult the language reference for moreinformation about controlling attribute access
note that for more general cases delegation can get trickier
 whenattributes must be set as well as retrieved the class must define asetattr method too and it must do so carefully
  the basicimplementation of setattr is roughly equivalent to thefollowing   class x       
most setattr implementations must modify self
dict tostore local state for self without causing an infinite recursion
how do i call a method defined in a base class from a derived class that overrides it
use the builtin super function   class derivedbase       def methself           superderived self
methfor version prior to 3
0 you may be using classic classes for aclass definition such as class derivedbase 
 you can callmethod meth defined in base or one of bases base classes asbase
  here base
meth is an unboundmethod so you need to provide the self argument
how can i organize my code to make it easier to change the base class
how do i create static class data and static class methods
both static data and static methods in the sense of c or java aresupported in python
for static data simply define a class attribute
  to assign a newvalue to the attribute you have to explicitly use the class name inthe assignment   class c       count  0    number of times c
countc
count also refers to c
count for any c such thatisinstancec c holds unless overridden by c itself or by someclass on the baseclass search path from c
class back to c
caution within a method of c an assignment like self
count  42creates a new and unrelated instance named count in selfs owndict
  rebinding of a classstatic data name must always specify theclass whether inside a method or not   c
count  314static methods are possible   class c       staticmethod       def staticarg1 arg2 arg3            no self parameter           
however a far more straightforward way to get the effect of a staticmethod is via a simple modulelevel function   def getcount       return c
countif your code is structured so as to define one class or tightlyrelated class hierarchy per module this supplies the desiredencapsulation
how can i overload constructors or methods in python
i try to use spam and i get an error about someclassnamespam
variable names with double leading underscores are mangled toprovide a simple but effective way to define class private variables
any identifier of the form spam at least two leading underscoresat most one trailing underscore is textually replaced withclassnamespam where classname is the current class name withany leading underscores stripped
this doesnt guarantee privacy an outside user can still deliberatelyaccess the classnamespam attribute and private values arevisible in the objects dict
  many python programmers neverbother to use private variable names at all
my class defines del but it is not called when i delete the object
how do i get a list of all instances of a given class
python does not keep track of all instances of a class or of a builtin type
 you can program the classs constructor to keep track of allinstances by keeping a list of weak references to each instance
why does the result of id appear to be not unique
the id builtin returns an integer that is guaranteed to be uniqueduring the lifetime of the object
  since in cpython this is theobjects memory address it happens frequently that after an object isdeleted from memory the next freshly created object is allocated atthe same position in memory
  this is illustrated by this example id1000 13901272 id2000 13901272the two ids belong to different integer objects that are createdbefore and deleted immediately after execution of the id call
to be sure that objects whose id you want to examine are still alivecreate another reference to the object a  1000 b  2000 ida 13901272 idb 13891296
modules
how do i create a pyc file
how do i find the current module name
a module can find out its own module name by looking at the predefinedglobal variable name
  if this has the value main theprogram is running as a script
  many modules that are usually used byimporting them also provide a commandline interface or a selftestand only execute this code after checking name   def main       printrunning test
how can i have modules that mutually import each other
suppose you have the following modulesfoo
py   from foo import foovar   barvar  2the problem is that the interpreter will perform the following steps main imports foo empty globals for foo are created foo is compiled and starts executing foo imports bar empty globals for bar are created bar is compiled and starts executing bar imports foo which is a noop since there already is a module  named foo bar
foovarthe last step fails because python isnt done with interpreting fooyet and the global symbol dictionary for foo is still empty
the same thing happens when you use import foo and then try toaccess foo
foovar in global code
there are at least three possible workarounds for this problem
guido van rossum recommends avoiding all uses of from module import
 and placing all code inside functions
  initializations ofglobal variables and class variables should use constants or builtinfunctions only
  this means everything from an imported module isreferenced as module
name
jim roskind suggests performing steps in the following order in eachmodule exports globals functions and classes that dont need imported  base classes import statements active code including globals that are initialized from imported  values
van rossum doesnt like this approach much because the imports appearin a strange place but it does work
matthias urlichs recommends restructuring your code so that therecursive import is not necessary in the first place
these solutions are not mutually exclusive
importxyz returns module x how do i get z
consider using the convenience function importmodule fromimportlib instead   z  importlib
when i edit an imported module and reimport it the changes dont show up  why does this happen
for reasons of efficiency as well as consistency python only readsthe module file on the first time a module is imported
  if it didntin a program consisting of many modules where each one imports thesame basic module the basic module would be parsed and reparsed manytimes
  to force rereading of a changed module do this   import importlib   import modname   importlib
reloadmodnamewarning this technique is not 100 foolproof
  in particularmodules containing statements like   from modname import someobjectswill continue to work with the old version of the imported objects
if the module contains class definitions existing class instanceswill not be updated to use the new class definition
  this canresult in the following paradoxical behaviour    import importlib    import cls    c  cls
c        isinstance is false   falsethe nature of the problem is made clear if you print out theidentity of the class objects    hexidc
library and extension faq
general library questions
how do i find a module or application to perform task x
where is the mathpy socketpy regexpy etc source file
if you cant find a source file for a module it may be a builtin ordynamically loaded module implemented in c c or other compiledlanguage
 in this case you may not have the source file or it may besomething like mathmodule
c somewhere in a c source directory noton the python path
there are at least three kinds of modules in python1
 modules written in python 
py2
 modules written in c and dynamically loaded 
dll 
pyd 
so 
sl   etc3
 modules written in c and linked with the interpreter to get a list   of these type      import sys      printsys
how do i make a python script executable on unix
is there a cursestermcap package for python
for unix variants the standard python source distribution comes witha curses module in the modules subdirectory though its not compiledby default
 note that this is not available in the windowsdistribution  there is no curses module for windows
the curses module supports basic curses features as well as manyadditional functions from ncurses and sysv curses such as colouralternative character set support pads and mouse support
 this meansthe module isnt compatible with operating systems that only have bsdcurses but there dont seem to be any currently maintained oses thatfall into this category
for windows use the consolelib module
is there an equivalent to cs onexit in python
the atexit module provides a register function that is similar tocs onexit
why dont my signal handlers work
the most common problem is that the signal handler is declared withthe wrong argument list
  it is called as   handlersignum frameso it should be declared with two parameters   def handlersignum frame       
common tasks
how do i test a python program or component
python comes with two testing frameworks
  the doctest module findsexamples in the docstrings for a module and runs them comparing theoutput with the expected output given in the docstring
the unittest module is a fancier testing framework modelled on javaand smalltalk testing frameworks
to make testing easier you should use good modular design in yourprogram
 your program should have almost all functionalityencapsulated in either functions or class methods  and thissometimes has the surprising and delightful effect of making theprogram run faster because local variable accesses are faster thanglobal accesses
  furthermore the program should avoid depending onmutating global variables since this makes testing much moredifficult to do
the global main logic of your program may be as simple as   if name  main       mainlogicat the bottom of the main module of your program
once your program is organized as a tractable collection of functionand class behaviours you should write test functions that exercisethe behaviours
  a test suite that automates a sequence of tests canbe associated with each module
 this sounds like a lot of work butsince python is so terse and flexible its surprisingly easy
  you canmake coding much more pleasant and fun by writing your test functionsin parallel with the production code since this makes it easy tofind bugs and even design flaws earlier
support modules that are not intended to be the main module of aprogram may include a selftest of the module
   if name  main       selftesteven programs that interact with complex external interfaces may betested when the external interfaces are unavailable by using fakeinterfaces implemented in python
how do i create documentation from doc strings
the pydoc module can create html from the doc strings in your pythonsource code
  an alternative for creating api documentation purelyfrom docstrings is epydoc
  sphinx can also include docstring content
how do i get a single keypress at a time
for unix variants there are several solutions
  its straightforwardto do this using curses but curses is a fairly large module to learn
threads
how do i program using threads
be sure to use the threading module and not the thread module
the threading module builds convenient abstractions on top of thelowlevel primitives provided by the thread module
aahz has a set of slides from his threading tutorial that are helpfulsee httpwww
comoscon2001
none of my threads seem to run why
how do i parcel out work among a bunch of worker threads
the easiest way is to use the concurrent
futures module especiallythe threadpoolexecutor class
or if you want fine control over the dispatching algorithm you canwrite your own logic manually
  use the queue module to create aqueue containing a list of jobs
  the queue class maintains a listof objects and has a 
putobj method that adds items to the queueand a 
get method to return them
  the class will take care of thelocking necessary to ensure that each job is handed out exactly once
heres a trivial example   import threading queue time    the worker thread gets jobs off the queue
sleep5when run this will produce the following output   running worker   running worker   running worker   running worker   running worker   main thread sleeping   worker threadworker 1 started 130283832797456 running with argument 0   worker threadworker 2 started 130283824404752 running with argument 1   worker threadworker 3 started 130283816012048 running with argument 2   worker threadworker 4 started 130283807619344 running with argument 3   worker threadworker 5 started 130283799226640 running with argument 4   worker threadworker 1 started 130283832797456 running with argument 5   
consult the modules documentation for more details the queue classprovides a featureful interface
what kinds of global value mutation are threadsafe
a global interpreter lock gil is used internally to ensure thatonly one thread runs in the python vm at a time
  in general pythonoffers to switch among threads only between bytecode instructions howfrequently it switches can be set via sys
setswitchinterval
  eachbytecode instruction and therefore all the c implementation codereached from each instruction is therefore atomic from the point ofview of a python program
in theory this means an exact accounting requires an exactunderstanding of the pvm bytecode implementation
  in practice itmeans that operations on shared variables of builtin data typesints lists dicts etc that look atomic really are
for example the following operations are all atomic l l1 l2 arelists d d1 d2 are dicts x y are objects i j are ints   l
keysthese arent   i  i1   l
appendl1   li  lj   dx  dx  1operations that replace other objects may invoke those other objectsdel method when their reference count reaches zero and thatcan affect things
  this is especially true for the mass updates todictionaries and lists
  when in doubt use a mutex
cant we get rid of the global interpreter lock
the global interpreter lock gil is often seen as a hindrance topythons deployment on highend multiprocessor server machinesbecause a multithreaded python program effectively only uses one cpudue to the insistence that almost all python code can only run whilethe gil is held
back in the days of python 1
5 greg stein actually implemented acomprehensive patch set the free threading patches that removedthe gil and replaced it with finegrained locking
  adam olsenrecently did a similar experiment in his pythonsafethread project
unfortunately both experiments exhibited a sharp drop in singlethread performance at least 30 slower due to the amount of finegrained locking necessary to compensate for the removal of the gil
this doesnt mean that you cant make good use of python on multicpumachines you just have to be creative with dividing the work upbetween multiple processes rather than multiple threads
  theprocesspoolexecutor class in the new concurrent
futures moduleprovides an easy way of doing so the multiprocessing moduleprovides a lowerlevel api in case you want more control overdispatching of tasks
judicious use of c extensions will also help if you use a c extensionto perform a timeconsuming task the extension can release the gilwhile the thread of execution is in the c code and allow other threadsto get some work done
  some standard library modules such as zliband hashlib already do this
it has been suggested that the gil should be a perinterpreterstatelock rather than truly global interpreters then wouldnt be able toshare objects
 unfortunately this isnt likely to happen either
  itwould be a tremendous amount of work because many objectimplementations currently have global state
 for example smallintegers and short strings are cached these caches would have to bemoved to the interpreter state
  other object types have their ownfree list these free lists would have to be moved to the interpreterstate
 and so on
and i doubt that it can even be done in finite time because the sameproblem exists for 3rd party extensions
  it is likely that 3rd partyextensions are being written at a faster rate than you can convertthem to store all their global state in the interpreter state
and finally once you have multiple interpreters not sharing anystate what have you gained over running each interpreter in aseparate process
input and output
how do i delete a file and other file questions
how do i copy a file
the shutil module contains a copyfile function
  note that onmacos 9 it doesnt copy the resource fork and finder info
how do i read or write binary data
i cant seem to use osread on a pipe created with ospopen why
read is a lowlevel function which takes a file descriptor asmall integer representing the opened file
  os
popen creates ahighlevel file object the same type returned by the builtinopen function
 thus to read n bytes from a pipe p createdwith os
popen you need to use p
how do i access the serial rs232 port
why doesnt closing sysstdout stdin stderr really close it
networkinternet programming
what www tools are there for python
see the chapters titled internet protocols and support and internetdata handling in the library reference manual
  python has manymodules that will help you build serverside and clientside websystems
a summary of available frameworks is maintained by paul boddie athttpswiki
orgmoinwebprogramming
cameron laird maintains a useful set of pages about python webtechnologies at httpphaseit
pythonwebpython
how can i mimic cgi form submission methodpost
what module should i use to help with generating html
you can find a collection of useful links on the web programming wikipage
how do i send mail from a python script
use the standard library module smtplib
heres a very simple interactive mail sender that uses it
  thismethod will work on any host that supports an smtp listener
quita unixonly alternative uses sendmail
  the location of the sendmailprogram varies between systems sometimes it is usrlibsendmailsometimes usrsbinsendmail
  the sendmail manual page will helpyou out
  heres some sample code   import os   sendmail  usrsbinsendmail   sendmail location   p  os
how do i avoid blocking in the connect method of a socket
the select module is commonly used to help with asynchronous io onsockets
to prevent the tcp connect from blocking you can set the socket tononblocking mode
  then when you do the socket
connect you willeither connect immediately unlikely or get an exception thatcontains the error number as 
errno
einprogress indicatesthat the connection is in progress but hasnt finished yet
different oses will return different values so youre going to haveto check whats returned on your system
you can use the socket
connectex method to avoid creating anexception
  it will just return the errno value
  to poll you cancall socket
connectex again later  0 or errno
eisconnindicate that youre connected  or you can pass this socket toselect
select to check if its writable
note  the asyncio module provides a general purpose singlethreaded and  concurrent asynchronous library which can be used for writing non  blocking network code
 the thirdparty twisted library is a popular  and featurerich alternative
databases
are there any interfaces to database packages in python
yes
interfaces to diskbased hashes such as dbm and gdbm are alsoincluded with standard python
  there is also the sqlite3 modulewhich provides a lightweight diskbased relational database
support for most relational databases is available
  see thedatabaseprogramming wiki page for details
how do you implement persistent objects in python
the pickle library module solves this in a very general way thoughyou still cant store things like open files sockets or windows andthe shelve library module uses pickle and gdbm to createpersistent mappings containing arbitrary python objects
mathematics and numerics
how do i generate random numbers in python
design and history faq
why does python use indentation for grouping of statements
guido van rossum believes that using indentation for grouping isextremely elegant and contributes a lot to the clarity of the averagepython program
 most people learn to love this feature after a while
since there are no beginend brackets there cannot be a disagreementbetween grouping perceived by the parser and the human reader
occasionally c programmers will encounter a fragment of code likethis   if x  y           x           y   zonly the x statement is executed if the condition is true but theindentation leads many to believe otherwise
  even experienced cprogrammers will sometimes stare at it a long time wondering as to whyy is being decremented even for x  y
because there are no beginend brackets python is much less prone tocodingstyle conflicts
  in c there are many different ways to placethe braces
 after becoming used to reading and writing code using aparticular style it is normal to feel somewhat uneasy when readingor being required to write in a different one
many coding styles place beginend brackets on a line by themselves
this makes programs considerably longer and wastes valuable screenspace making it harder to get a good overview of a program
  ideallya function should fit on one screen say 2030 lines
  20 lines ofpython can do a lot more work than 20 lines of c
  this is not solelydue to the lack of beginend brackets  the lack of declarations andthe highlevel data types are also responsible  but the indentationbased syntax certainly helps
why am i getting strange results with simple arithmetic operations
see the next question
why are floatingpoint calculations so inaccurate
users are often surprised by results like this    1
19999999999999996and think it is a bug in python
  its not
  this has little to dowith python and much more to do with how the underlying platformhandles floatingpoint numbers
the float type in cpython uses a c double for storage
  a floatobjects value is stored in binary floatingpoint with a fixedprecision typically 53 bits and python uses c operations which inturn rely on the hardware implementation in the processor to performfloatingpoint operations
 this means that as far as floatingpointoperations are concerned python behaves like many popular languagesincluding c and java
many numbers that can be written easily in decimal notation cannot beexpressed exactly in binary floatingpoint
  for example after    x  1
2the value stored for x is a very good approximation to the decimalvalue 1
2 but is not exactly equal to it
  on a typical machinethe actual stored value is   1
0011001100110011001100110011001100110011001100110011 binarywhich is exactly   1
1999999999999999555910790149937383830547332763671875 decimalthe typical precision of 53 bits provides python floats with 1516decimal digits of accuracy
for a fuller explanation please see the floating point arithmeticchapter in the python tutorial
why are python strings immutable
there are several advantages
one is performance knowing that a string is immutable means we canallocate space for it at creation time and the storage requirementsare fixed and unchanging
  this is also one of the reasons for thedistinction between tuples and lists
another advantage is that strings in python are considered aselemental as numbers
  no amount of activity will change the value 8to anything else and in python no amount of activity will change thestring eight to anything else
why must self be used explicitly in method definitions and calls
the idea was borrowed from modula3
  it turns out to be very usefulfor a variety of reasons
first its more obvious that you are using a method or instanceattribute instead of a local variable
  reading self
x orself
meth makes it absolutely clear that an instance variable ormethod is used even if you dont know the class definition by heart
in c you can sort of tell by the lack of a local variabledeclaration assuming globals are rare or easily recognizable  butin python there are no local variable declarations so youd have tolook up the class definition to be sure
  some c and java codingstandards call for instance attributes to have an m prefix so thisexplicitness is still useful in those languages too
second it means that no special syntax is necessary if you want toexplicitly reference or call the method from a particular class
  inc if you want to use a method from a base class which is overriddenin a derived class you have to use the  operator  in python youcan write baseclass
methodnameself argument list
  this isparticularly useful for init methods and in general in caseswhere a derived class method wants to extend the base class method ofthe same name and thus has to call the base class method somehow
finally for instance variables it solves a syntactic problem withassignment since local variables in python are by definition thosevariables to which a value is assigned in a function body and thatarent explicitly declared global there has to be some way to tellthe interpreter that an assignment was meant to assign to an instancevariable instead of to a local variable and it should preferably besyntactic for efficiency reasons
  c does this throughdeclarations but python doesnt have declarations and it would be apity having to introduce them just for this purpose
  using theexplicit self
var solves this nicely
  similarly for using instancevariables having to write self
var means that references tounqualified names inside a method dont have to search the instancesdirectories
  to put it another way local variables and instancevariables live in two different namespaces and you need to tellpython which namespace to use
why cant i use an assignment in an expression
starting in python 3
8 you canassignment expressions using the walrus operator  assign avariable in an expression   while chunk  fp
read200      printchunksee pep 572 for more information
why does python use methods for some functionality eg listindex but functions for other eg lenlist
as guido said   a for some operations prefix notation just reads better than   postfix  prefix and infix operations have a long tradition in   mathematics which likes notations where the visuals help the   mathematician thinking about a problem
 compare the easy with which   we rewrite a formula like xab into xa  xb to the clumsiness   of doing the same thing using a raw oo notation
   b when i read code that says lenx i know that it is asking   for the length of something
 this tells me two things the result   is an integer and the argument is some kind of container
 to the   contrary when i read x
len i have to already know that x is   some kind of container implementing an interface or inheriting from   a class that has a standard len
 witness the confusion we   occasionally have when a class that is not implementing a mapping   has a get or keys method or something that isnt a file has a   write method
why is join a string method instead of a list or tuple method
strings became much more like other standard types starting in python1
6 when methods were added which give the same functionality thathas always been available using the functions of the string module
most of these new methods have been widely accepted but the one whichappears to make some programmers feel uncomfortable is    
join1 2 4 8 16which gives the result   1 2 4 8 16there are two common arguments against this usage
the first runs along the lines of it looks really ugly using amethod of a string literal string constant to which the answer isthat it might but a string literal is just a fixed value
 if themethods are to be allowed on names bound to strings there is nological reason to make them unavailable on literals
the second objection is typically cast as i am really telling asequence to join its members together with a string constant
  sadlyyou arent
  for some reason there seems to be much less difficultywith having split as a string method since in that case it iseasy to see that   1 2 4 8 16
split is an instruction to a string literal to return the substringsdelimited by the given separator or by default arbitrary runs ofwhite space
join is a string method because in using it you are telling theseparator string to iterate over a sequence of strings and insertitself between adjacent elements
  this method can be used with anyargument which obeys the rules for sequence objects including any newclasses you might define yourself
 similar methods exist for bytes andbytearray objects
how fast are exceptions
a tryexcept block is extremely efficient if no exceptions are raised
actually catching an exception is expensive
  in versions of pythonprior to 2
0 it was common to use this idiom   try       value  mydictkey   except keyerror       mydictkey  getvaluekey       value  mydictkeythis only made sense when you expected the dict to have the key almostall the time
  if that wasnt the case you coded it like this   if key in mydict       value  mydictkey   else       value  mydictkey  getvaluekeyfor this specific case you could also use value dict
setdefaultkey getvaluekey but only if the getvaluecall is cheap enough because it is evaluated in all cases
why isnt there a switch or case statement in python
cant you emulate threads in the interpreter instead of relying on an osspecific thread implementation
answer 1 unfortunately the interpreter pushes at least one c stackframe for each python stack frame
  also extensions can call backinto python at almost random moments
  therefore a complete threadsimplementation requires thread support for c
answer 2 fortunately there is stackless python which has acompletely redesigned interpreter loop that avoids the c stack
why cant lambda expressions contain statements
python lambda expressions cannot contain statements because pythonssyntactic framework cant handle statements nested inside expressions
however in python this is not a serious problem
  unlike lambdaforms in other languages where they add functionality python lambdasare only a shorthand notation if youre too lazy to define a function
functions are already first class objects in python and can bedeclared in a local scope
  therefore the only advantage of using alambda instead of a locallydefined function is that you dont need toinvent a name for the function  but thats just a local variable towhich the function object which is exactly the same type of objectthat a lambda expression yields is assigned
can python be compiled to machine code c or some other language
cython compiles a modified version of python with optional annotationsinto c extensions
  nuitka is an upandcoming compiler of python intoc code aiming to support the full python language
 for compiling tojava you can consider voc
how does python manage memory
the details of python memory management depend on the implementation
the standard implementation of python cpython uses referencecounting to detect inaccessible objects and another mechanism tocollect reference cycles periodically executing a cycle detectionalgorithm which looks for inaccessible cycles and deletes the objectsinvolved
 the gc module provides functions to perform a garbagecollection obtain debugging statistics and tune the collectorsparameters
other implementations such as jython or pypy however can rely on adifferent mechanism such as a fullblown garbage collector
  thisdifference can cause some subtle porting problems if your python codedepends on the behavior of the reference counting implementation
in some python implementations the following code which is fine incpython will probably run out of file descriptors   for file in verylonglistoffiles       f  openfile       c  f
read1indeed using cpythons reference counting and destructor scheme eachnew assignment to f closes the previous file
  with a traditionalgc however those file objects will only get collected and closedat varying and possibly long intervals
if you want to write code that will work with any pythonimplementation you should explicitly close the file or use the withstatement this will work regardless of memory management scheme   for file in verylonglistoffiles       with openfile as f           c  f
why doesnt cpython use a more traditional garbage collection scheme
for one thing this is not a c standard feature and hence its notportable
 yes we know about the boehm gc library
  it has bits ofassembler code for most common platforms not for all of them andalthough it is mostly transparent it isnt completely transparentpatches are required to get python to work with it
traditional gc also becomes a problem when python is embedded intoother applications
  while in a standalone python its fine to replacethe standard malloc and free with versions provided by the gclibrary an application embedding python may want to have its ownsubstitute for malloc and free and may not want pythons
  rightnow cpython works with anything that implements malloc and freeproperly
why isnt all memory freed when cpython exits
why are there separate tuple and list data types
lists and tuples while similar in many respects are generally usedin fundamentally different ways
  tuples can be thought of as beingsimilar to pascal records or c structs theyre small collections ofrelated data which may be of different types which are operated on asa group
  for example a cartesian coordinate is appropriatelyrepresented as a tuple of two or three numbers
lists on the other hand are more like arrays in other languages
they tend to hold a varying number of objects all of which have thesame type and which are operated on onebyone
  for exampleos
 returns a list of strings representing the files inthe current directory
  functions which operate on this output wouldgenerally not break if you added another file or two to the directory
tuples are immutable meaning that once a tuple has been created youcant replace any of its elements with a new value
  lists aremutable meaning that you can always change a lists elements
  onlyimmutable elements can be used as dictionary keys and hence onlytuples and not lists can be used as keys
how are lists implemented in cpython
cpythons lists are really variablelength arrays not lispstylelinked lists
 the implementation uses a contiguous array of referencesto other objects and keeps a pointer to this array and the arrayslength in a list head structure
this makes indexing a list ai an operation whose cost isindependent of the size of the list or the value of the index
when items are appended or inserted the array of references isresized
  some cleverness is applied to improve the performance ofappending items repeatedly when the array must be grown some extraspace is allocated so the next few times dont require an actualresize
how are dictionaries implemented in cpython
cpythons dictionaries are implemented as resizable hash tables
compared to btrees this gives better performance for lookup themost common operation by far under most circumstances and theimplementation is simpler
dictionaries work by computing a hash code for each key stored in thedictionary using the hash builtin function
  the hash code varieswidely depending on the key and a perprocess seed for examplepython could hash to 539294296 while python a string thatdiffers by a single bit could hash to 1142331976
  the hash code isthen used to calculate a location in an internal array where the valuewill be stored
  assuming that youre storing keys that all havedifferent hash values this means that dictionaries take constant time o1 in bigo notation  to retrieve a key
why must dictionary keys be immutable
why doesnt listsort return the sorted list
in situations where performance matters making a copy of the listjust to sort it would be wasteful
 therefore list
sort sorts thelist in place
 in order to remind you of that fact it does not returnthe sorted list
  this way you wont be fooled into accidentallyoverwriting a list when you need a sorted copy but also need to keepthe unsorted version around
if you want to return a new list use the builtin sorted functioninstead
  this function creates a new list from a provided iterablesorts it and returns it
  for example heres how to iterate over thekeys of a dictionary in sorted order   for key in sortedmydict       
how do you specify and enforce an interface spec in python
why is there no goto
you can use exceptions to provide a structured goto that even worksacross function calls
  many feel that exceptions can convenientlyemulate all reasonable uses of the go or goto constructs of cfortran and other languages
  for example   class labelexception pass   declare a label   try       
this doesnt allow you to jump into the middle of a loop but thatsusually considered an abuse of goto anyway
  use sparingly
why cant raw strings rstrings end with a backslash
why doesnt python have a with statement for attribute assignments
python has a with statement that wraps the execution of a blockcalling code on the entrance and exit from the block
  some languageshave a construct that looks like this   with obj       a  1                equivalent to obj
total  1in python such a construct would be ambiguous
other languages such as object pascal delphi and c use statictypes so its possible to know in an unambiguous way what member isbeing assigned to
 this is the main point of static typing  thecompiler always knows the scope of every variable at compile time
python uses dynamic types
 it is impossible to know in advance whichattribute will be referenced at runtime
 member attributes may beadded or removed from objects on the fly
 this makes it impossible toknow from a simple reading what attribute is being referenced alocal one a global one or a member attributefor instance take the following incomplete snippet   def fooa       with a           printxthe snippet assumes that a must have a member attribute called x
however there is nothing in python that tells the interpreter this
what should happen if a is let us say an integer  if there is aglobal variable named x will it be used inside the with block  asyou see the dynamic nature of python makes such choices much harder
the primary benefit of with and similar language features reductionof code volume can however easily be achieved in python byassignment
  instead of   functionargs
c  63write this   ref  functionargs
c  63this also has the sideeffect of increasing execution speed becausename bindings are resolved at runtime in python and the secondversion only needs to perform the resolution once
why are colons required for the ifwhiledefclass statements
the colon is required primarily to enhance readability one of theresults of the experimental abc language
  consider this   if a  b       printaversus   if a  b       printanotice how the second one is slightly easier to read
  notice furtherhow a colon sets off the example in this faq answer its a standardusage in english
another minor reason is that the colon makes it easier for editorswith syntax highlighting they can look for colons to decide whenindentation needs to be increased instead of having to do a moreelaborate parsing of the program text
why does python allow commas at the end of lists and tuples
python lets you add a trailing comma at the end of lists tuples anddictionaries   1 2 3   a b c   d         a 1 5       b 6 7   last trailing comma is optional but good style   there are several reasons to allow this
when you have a literal value for a list tuple or dictionary spreadacross multiple lines its easier to add more elements because youdont have to remember to add a comma to the previous line
  the linescan also be reordered without creating a syntax error
accidentally omitting the comma can lead to errors that are hard todiagnose
 for example   x       fee     fie     foo     fum   this list looks like it has four elements but it actually containsthree fee fiefoo and fum
  always adding the comma avoids thissource of error
allowing the trailing comma may also make programmatic code generationeasier
python frequently asked questions
 general python faq programming faq design and history faq library and extension faq extendingembedding faq python on windows faq graphic user interface faq why is python installed on my computer faq
extendingembedding faq
can i create my own functions in c
yes you can create builtin modules containing functions variablesexceptions and even new types in c
  this is explained in the documentextending and embedding the python interpreter
most intermediate or advanced python books will also cover this topic
can i create my own functions in c
yes using the c compatibility features found in c
  place externc  
  around the python include files and put extern cbefore each function that is going to be called by the pythoninterpreter
  global or static c objects with constructors areprobably not a good idea
writing c is hard are there any alternatives
there are a number of alternatives to writing your own c extensionsdepending on what youre trying to do
cython and its relative pyrex are compilers that accept a slightlymodified form of python and generate the corresponding c code
  cythonand pyrex make it possible to write an extension without having tolearn pythons c api
if you need to interface to some c or c library for which no pythonextension currently exists you can try wrapping the librarys datatypes and functions with a tool such as swig
  sip cxx boost orweave are also alternatives for wrapping c libraries
how can i execute arbitrary python statements from c
the highestlevel function to do this is pyrunsimplestring whichtakes a single string argument to be executed in the context of themodule main and returns 0 for success and 1 when anexception occurred including syntaxerror
  if you want morecontrol use pyrunstring see the source forpyrunsimplestring in pythonpythonrun
c
how can i evaluate an arbitrary python expression from c
call the function pyrunstring from the previous question with thestart symbol pyevalinput it parses an expression evaluates itand returns its value
how do i extract c values from a python object
how do i use pybuildvalue to create a tuple of arbitrary length
you cant
  use pytuplepack instead
how do i call an objects method from c
how do i catch the output from pyerrprint or anything that prints to stdoutstderr
in python code define an object that supports the write method
assign this object to sys
stdout and sys
  callprinterror or just allow the standard traceback mechanism to work
then the output will go wherever your write method sends it
the easiest way to do this is to use the io
stringio class    import io sys    sys
getvalue   foo   hello worlda custom object to do the same would look like this    import io sys    class stdoutcatcherio
how do i access a module written in python from c
how do i interface to c objects from python
depending on your requirements there are many approaches
  to do thismanually begin by reading the extending and embedding document
realize that for the python runtime system there isnt a whole lotof difference between c and c  so the strategy of building a newpython type around a c structure pointer type will also work for cobjects
for c libraries see writing c is hard are there any alternatives
i added a module using the setup file and the make fails why
setup must end in a newline if there is no newline there the buildprocess fails
  fixing this requires some ugly shell script hackeryand this bug is so minor that it doesnt seem worth the effort
how do i debug an extension
when using gdb with dynamically loaded extensions you cant set abreakpoint in your extension until your extension is loaded
in your 
gdbinit file or interactively add the command   br pyimportloaddynamicmodulethen when you run gdb    gdb localbinpython   gdb run myscript
i want to compile a python module on my linux system but some files are missing why
most packaged versions of python dont include theusrlibpython2
xconfig directory which contains various filesrequired for compiling python extensions
for red hat install the pythondevel rpm to get the necessary files
for debian run aptget install pythondev
how do i tell incomplete input from invalid input
how do i find undefined g symbols builtinnew or purevirtual
can i create an object class with some methods implemented in c and others in python eg through inheritance
general python faq
general information
what is python
python is an interpreted interactive objectoriented programminglanguage
  it incorporates modules exceptions dynamic typing veryhigh level dynamic data types and classes
  it supports multipleprogramming paradigms beyond objectoriented programming such asprocedural and functional programming
 python combines remarkablepower with very clear syntax
 it has interfaces to many system callsand libraries as well as to various window systems and is extensiblein c or c
  it is also usable as an extension language forapplications that need a programmable interface
 finally python isportable it runs on many unix variants including linux and macos andon windows
to find out more start with the python tutorial
  the beginnersguide to python links to other introductory tutorials and resourcesfor learning python
what is the python software foundation
the python software foundation is an independent nonprofitorganization that holds the copyright on python versions 2
1 andnewer
  the psfs mission is to advance open source technology relatedto the python programming language and to publicize the use of python
the psfs home page is at httpswww
donations to the psf are taxexempt in the us
  if you use python andfind it helpful please contribute via the psf donation page
are there copyright restrictions on the use of python
you can do anything you want with the source as long as you leave thecopyrights in and display those copyrights in any documentation aboutpython that you produce
  if you honor the copyright rules its ok touse python for commercial use to sell copies of python in source orbinary form modified or unmodified or to sell products thatincorporate python in some form
  we would still like to know aboutall commercial use of python of course
see the psf license page to find further explanations and a link tothe full text of the license
the python logo is trademarked and in certain cases permission isrequired to use it
  consult the trademark usage policy for moreinformation
why was python created in the first place
heres a very brief summary of what started it all written by guidovan rossum   i had extensive experience with implementing an interpreted   language in the abc group at cwi and from working with this group   i had learned a lot about language design
  this is the origin of   many python features including the use of indentation for   statement grouping and the inclusion of veryhighlevel data types   although the details are all different in python
   i had a number of gripes about the abc language but also liked   many of its features
  it was impossible to extend the abc language   or its implementation to remedy my complaints  in fact its lack   of extensibility was one of its biggest problems
  i had some   experience with using modula2 and talked with the designers of   modula3 and read the modula3 report
 modula3 is the origin of   the syntax and semantics used for exceptions and some other python   features
   i was working in the amoeba distributed operating system group at   cwi
  we needed a better way to do system administration than by   writing either c programs or bourne shell scripts since amoeba had   its own system call interface which wasnt easily accessible from   the bourne shell
  my experience with error handling in amoeba made   me acutely aware of the importance of exceptions as a programming   language feature
   it occurred to me that a scripting language with a syntax like abc   but with access to the amoeba system calls would fill the need
  i   realized that it would be foolish to write an amoebaspecific   language so i decided that i needed a language that was generally   extensible
   during the 1989 christmas holidays i had a lot of time on my hand   so i decided to give it a try
  during the next year while still   mostly working on it in my own time python was used in the amoeba   project with increasing success and the feedback from colleagues   made me add many early improvements
   in february 1991 after just over a year of development i decided   to post to usenet
  the rest is in the mischistory file
what is python good for
python is a highlevel generalpurpose programming language that canbe applied to many different classes of problems
the language comes with a large standard library that covers areassuch as string processing regular expressions unicode calculatingdifferences between files internet protocols http ftp smtp xmlrpc pop imap cgi programming software engineering unit testinglogging profiling parsing python code and operating systeminterfaces system calls filesystems tcpip sockets
  look at thetable of contents for the python standard library to get an idea ofwhats available
  a wide variety of thirdparty extensions are alsoavailable
  consult the python package index to find packages ofinterest to you
how does the python version numbering scheme work
how do i obtain a copy of the python source
the latest python source distribution is always available frompython
org at httpswww
  the latestdevelopment sources can be obtained athttpsgithub
compythoncpython
the source distribution is a gzipped tar file containing the completec source sphinxformatted documentation python library modulesexample programs and several useful pieces of freely distributablesoftware
  the source will compile and run out of the box on most unixplatforms
consult the getting started section of the python developers guidefor more information on getting the source code and compiling it
how do i get documentation on python
the standard documentation for the current stable version of python isavailable at httpsdocs
org3
  pdf plain text anddownloadable html versions are also available athttpsdocs
html
the documentation is written in restructuredtext and processed by thesphinx documentation tool
  the restructuredtext source for thedocumentation is part of the python source distribution
ive never programmed before is there a python tutorial
there are numerous tutorials and books available
  the standarddocumentation includes the python tutorial
consult the beginners guide to find information for beginning pythonprogrammers including lists of tutorials
is there a newsgroup or mailing list devoted to python
there is a newsgroup comp
python and a mailing list pythonlist
  the newsgroup and mailing list are gatewayed into each other if you can read news its unnecessary to subscribe to the mailinglist
 comp
python is hightraffic receiving hundreds ofpostings every day and usenet readers are often more able to copewith this volume
announcements of new software releases and events can be found incomp
announce a lowtraffic moderated list that receivesabout five postings per day
  its available as the pythonannouncemailing list
more info about other mailing lists and newsgroups can be found athttpswww
orgcommunitylists
how do i get a beta test version of python
alpha and beta releases are available fromhttpswww
orgdownloads
  all releases are announced on thecomp
python and comp
announce newsgroups and on thepython home page at httpswww
org an rss feed of news isavailable
you can also access the development version of python through git
see the python developers guide for details
how do i submit bug reports and patches for python
to report a bug or submit a patch please use the roundup installationat httpsbugs
org
you must have a roundup account to report bugs this makes it possiblefor us to contact you if we have followup questions
  it will alsoenable roundup to send you updates as we act on your bug
 if you hadpreviously used sourceforge to report bugs to python you can obtainyour roundup password through roundups password reset procedure
for more information on how python is developed consult the pythondevelopers guide
are there any published articles about python that i can reference
its probably best to cite your favorite book about python
the very first article about python was written in 1991 and is nowquite outdated
   guido van rossum and jelke de boer interactively testing remote   servers using the python programming language cwi quarterly   volume 4 issue 4 december 1991 amsterdam pp 283303
are there any books on python
yes there are many and more are being published
  see the python
orgwiki at httpswiki
orgmoinpythonbooks for a list
you can also search online bookstores for python and filter out themonty python references or perhaps search for python andlanguage
where in the world is wwwpythonorg located
the python projects infrastructure is located all over the world andis managed by the python infrastructure team
 details here
why is it called python
when he began implementing python guido van rossum was also readingthe published scripts from monty pythons flying circus a bbccomedy series from the 1970s
  van rossum thought he needed a namethat was short unique and slightly mysterious so he decided to callthe language python
do i have to like monty pythons flying circus
no but it helps
  
python in the real world
how stable is python
how many people are using python
there are probably millions of users though its difficult to obtainan exact count
python is available for free download so there are no sales figuresand its available from many different sites and packaged with manylinux distributions so download statistics dont tell the whole storyeither
the comp
python newsgroup is very active but not all pythonusers post to the group or even read it
have any significant projects been done in python
see httpswww
orgaboutsuccess for a list of projects thatuse python
 consulting the proceedings for past python conferenceswill reveal contributions from many different companies andorganizations
highprofile python projects include the mailman mailing list managerand the zope application server
  several linux distributions mostnotably red hat have written part or all of their installer andsystem administration software in python
  companies that use pythoninternally include google yahoo and lucasfilm ltd
what new developments are expected for python in the future
see httpswww
orgdevpeps for the python enhancementproposals peps
 peps are design documents describing a suggested newfeature for python providing a concise technical specification and arationale
  look for a pep titled python x
y release schedule wherex
y is a version that hasnt been publicly released yet
new development is discussed on the pythondev mailing list
is it reasonable to propose incompatible changes to python
in general no
  there are already millions of lines of python codearound the world so any change in the language that invalidates morethan a very small fraction of existing programs has to be frownedupon
  even if you can provide a conversion program theres still theproblem of updating all documentation many books have been writtenabout python and we dont want to invalidate them all at a singlestroke
providing a gradual upgrade path is necessary if a feature has to bechanged
 pep 5 describes the procedure followed for introducingbackwardincompatible changes while minimizing disruption for users
is python a good language for beginning programmers
yes
it is still common to start students with a procedural and staticallytyped language such as pascal c or a subset of c or java
students may be better served by learning python as their firstlanguage
  python has a very simple and consistent syntax and a largestandard library and most importantly using python in a beginningprogramming course lets students concentrate on important programmingskills such as problem decomposition and data type design
  withpython students can be quickly introduced to basic concepts such asloops and procedures
  they can probably even work with userdefinedobjects in their very first course
for a student who has never programmed before using a staticallytyped language seems unnatural
  it presents additional complexitythat the student must master and slows the pace of the course
  thestudents are trying to learn to think like a computer decomposeproblems design consistent interfaces and encapsulate data
  whilelearning to use a statically typed language is important in the longterm it is not necessarily the best topic to address in the studentsfirst programming course
many other aspects of python make it a good first language
  likejava python has a large standard library so that students can beassigned programming projects very early in the course that dosomething
  assignments arent restricted to the standard fourfunction calculator and check balancing programs
  by using thestandard library students can gain the satisfaction of working onrealistic applications as they learn the fundamentals of programming
using the standard library also teaches students about code reuse
thirdparty modules such as pygame are also helpful in extending thestudents reach
pythons interactive interpreter enables students to test languagefeatures while theyre programming
  they can keep a window with theinterpreter running while they enter their programs source in anotherwindow
  if they cant remember the methods for a list they can dosomething like this    l      dirl    add class contains delattr delitem   dir doc eq format ge   getattribute getitem gt hash iadd   imul init iter le len lt   mul ne new reduce reduceex   repr reversed rmul setattr setitem   sizeof str subclasshook append clear   copy count extend index insert pop remove   reverse sort    d for d in dirl if  not in d   append clear copy count extend index insert pop remove reverse sort    helpl
append1    l   1with the interpreter documentation is never far from the student asthey are programming
there are also good ides for python
  idle is a crossplatform ide forpython that is written in python using tkinter
  pythonwin is awindowsspecific ide
 emacs users will be happy to know that there isa very good python mode for emacs
  all of these programmingenvironments provide syntax highlighting autoindenting and accessto the interactive interpreter while coding
  consult the python wikifor a full list of python editing environments
if you want to discuss pythons use in education you may beinterested in joining the edusig mailing list
why is python installed on my computer faq
what is python
why is python installed on my machine
if you find python installed on your system but dont rememberinstalling it there are several possible ways it could have gottenthere
 perhaps another user on the computer wanted to learn programming and  installed it youll have to figure out whos been using the machine  and might have installed it
 a thirdparty application installed on the machine might have been  written in python and included a python installation
  there are  many such applications from gui programs to network servers and  administrative scripts
 some windows machines also have python installed
  at this writing  were aware of computers from hewlettpackard and compaq that  include python
  apparently some of hpcompaqs administrative tools  are written in python
 many unixcompatible operating systems such as mac os x and some  linux distributions have python installed by default its included  in the base installation
can i delete python
graphic user interface faq
general gui questions
what platformindependent gui toolkits exist for python
tkinter
wxwidgets
qt
there are bindings available for the qt toolkit using either pyqt orpyside and for kde pykde4
 pyqt is currently more mature thanpyside but you must buy a pyqt license from riverbank computing ifyou want to write proprietary applications
  pyside is free for allapplications
5 upwards is licensed under the lgpl license also commerciallicenses are available from the qt company
gtk
kivy
kivy is a crossplatform gui library supporting both desktop operatingsystems windows macos linux and mobile devices android ios
  itis written in python and cython and can use a range of windowingbackends
kivy is free and open source software distributed under the mitlicense
fltk
python bindings for the fltk toolkit a simple yet powerful and maturecrossplatform windowing system are available from the pyfltkproject
opengl
for opengl bindings see pyopengl
what platformspecific gui toolkits exist for python
by installing the pyobjc objectivec bridge python programs can usemac os xs cocoa libraries
pythonwin by mark hammond includes an interface to the microsoftfoundation classes and a python programming environment thats writtenmostly in python using the mfc classes
tkinter questions
how do i freeze tkinter applications
can i have tk events handled while waiting for io
on platforms other than windows yes and you dont even need threadsbut youll have to restructure your io code a bit
  tk has theequivalent of xts xtaddinput call which allows you to register acallback function which will be called from the tk mainloop when iois possible on a file descriptor
  see file handlers
i cant get key bindings to work in tkinter why
an oftenheard complaint is that event handlers bound to events withthe bind method dont get handled even when the appropriate key ispressed
the most common cause is that the widget to which the binding appliesdoesnt have keyboard focus
  check out the tk documentation for thefocus command
 usually a widget is given the keyboard focus byclicking in it but not for labels see the takefocus option
dealing with bugs
python is a mature programming language which has established areputation for stability
  in order to maintain this reputation thedevelopers would like to know of any deficiencies you find in python
it can be sometimes faster to fix bugs yourself and contribute patchesto python as it streamlines the process and involves less people
learn how to contribute
documentation bugs
using the python issue tracker
bug reports for python itself should be submitted via the python bugtracker httpsbugs
org
  the bug tracker offers a web formwhich allows pertinent information to be entered and submitted to thedevelopers
the first step in filing a report is to determine whether the problemhas already been reported
  the advantage in doing so aside fromsaving the developers time is that you learn what has been done tofix it it may be that the problem has already been fixed for the nextrelease or additional information is needed in which case you arewelcome to provide it if you can
 to do this search the bugdatabase using the search box on the top of the page
if the problem youre reporting is not already in the bug tracker goback to the python bug tracker and log in
  if you dont already havea tracker account select the register link or if you use openidone of the openid provider logos in the sidebar
  it is not possibleto submit a bug report anonymously
being now logged in you can submit a bug
  select the create newlink in the sidebar to open the bug reporting form
the submission form has a number of fields
  for the title fieldenter a very short description of the problem less than ten wordsis good
  in the type field select the type of your problem alsoselect the component and versions to which the bug relates
in the comment field describe the problem in detail including whatyou expected to happen and what did happen
  be sure to includewhether any extension modules were involved and what hardware andsoftware platform you were using including version information asappropriate
each bug report will be assigned to a developer who will determinewhat needs to be done to correct the problem
  you will receive anupdate each time action is taken on the bug
see also  how to report bugs effectively     article which goes into some detail about how to create a useful     bug report
 this describes what kind of information is useful and     why it is useful
  bug report writing guidelines     information about writing a good bug report
  some of this is     specific to the mozilla project but describes general good     practices
getting started contributing to python yourself
beyond just reporting bugs that you find you are also welcome tosubmit patches to fix them
  you can find more information on how toget started patching python in the python developers guide
  if youhave questions the corementorship mailing list is a friendly placeto get answers to any and all questions pertaining to the process offixing issues in python
defining extension types assorted topics
finalization and deallocation
destructor tpdeallocthis function is called when the reference count of the instance ofyour type is reduced to zero and the python interpreter wants toreclaim it
  if your type has memory to free or other cleanup toperform you can put it here
  the object itself needs to be freedhere as well
  here is an example of this function   static void   newdatatypedeallocnewdatatypeobject obj          freeobjobjunderlyingdatatypeptr       pytypeobjtpfreeobj   one important requirement of the deallocator function is that itleaves any pending exceptions alone
  this is important sincedeallocators are frequently called as the interpreter unwinds thepython stack when the stack is unwound due to an exception ratherthan normal returns nothing is done to protect the deallocators fromseeing that an exception has already been set
  any actions which adeallocator performs which may cause additional python code to beexecuted may detect that an exception has been set
  this can lead tomisleading errors from the interpreter
  the proper way to protectagainst this is to save a pending exception before performing theunsafe action and restoring it when done
  this can be done using thepyerrfetch and pyerrrestore functions   static void   mydeallocpyobject obj          myobject self  myobject  obj       pyobject cbresult       if selfmycallback  null            pyobject errtype errvalue errtraceback            this saves the current exception state            pyerrfetcherrtype errvalue errtraceback           cbresult  pyobjectcallnoargsselfmycallback           if cbresult  null               pyerrwriteunraisableselfmycallback           else               pydecrefcbresult            this restores the saved exception state            pyerrrestoreerrtype errvalue errtraceback           pydecrefselfmycallback              pytypeobjtpfreepyobjectself   note  there are limitations to what you can safely do in a deallocator  function
starting with python 3
4  it is recommended not to put any complex finalization code in  tpdealloc and instead use the new tpfinalize type method
  see also pep 442 explains the new finalization scheme
object presentation
in python there are two ways to generate a textual representation ofan object the repr function and the str function
  theprint function just calls str
  these handlers are bothoptional
   reprfunc tprepr   reprfunc tpstrthe tprepr handler should return a string object containing arepresentation of the instance for which it is called
  here is asimple example   static pyobject    newdatatypereprnewdatatypeobject  obj          return pyunicodefromformatreprifiednewdatatypesized                                   objobjunderlyingdatatypeptrsize   if no tprepr handler is specified the interpreter will supply arepresentation that uses the types tpname and a uniquelyidentifying value for the object
here is a simple example   static pyobject    newdatatypestrnewdatatypeobject  obj          return pyunicodefromformatstringifiednewdatatypesized                                   objobjunderlyingdatatypeptrsize   
attribute management
generic attribute management
typespecific attribute management
here is an example   static pyobject    newdatatypegetattrnewdatatypeobject obj char name          if strcmpname data  0                  return pylongfromlongobjdata              pyerrformatpyexcattributeerror                    
object comparison
abstract protocol support
python supports a variety of abstract protocols the specificinterfaces provided to use these interfaces are documented in abstractobjects layer
weak reference support
see also documentation for the weakref module
more suggestions
  asample of its use might be something like the following   if pyobjecttypechecksomeobject mytype        pyerrsetstringpyexctypeerror arg 1 not a mything       return null   see also  download cpython source releases
orgdownloadssource  the cpython project on github where the cpython source code is  developed
building c and c extensions on windows
this chapter briefly explains how to create a windows extension modulefor python using microsoft visual c and follows with more detailedbackground information on how it works
  the explanatory material isuseful for both the windows programmer learning to build pythonextensions and the unix programmer interested in producing softwarewhich can be successfully built on both unix and windows
module authors are encouraged to use the distutils approach forbuilding extension modules instead of the one described in thissection
 you will still need the c compiler that was used to buildpython typically microsoft visual c
note  this chapter mentions a number of filenames that include an encoded  python version number
  these filenames are represented with the  version number shown as xy in practice x will be the major  version number and y will be the minor version number of the  python release youre working with
  for example if you are using  python 2
1 xy will actually be 22
a cookbook approach
there are two approaches to building extension modules on windowsjust as there are on unix use the distutils package to control thebuild process or do things manually
  the distutils approach workswell for most extensions documentation on using distutils to buildand package extension modules is available in distributing pythonmodules legacy version
  if you find you really need to do thingsmanually it may be instructive to study the project file for thewinsound standard library module
differences between unix and windows
unix and windows use completely different paradigms for runtimeloading of code
  before you try to build a module that can bedynamically loaded be aware of how your system works
in unix a shared object 
so file contains code to be used by theprogram and also the names of functions and data that it expects tofind in the program
  when the file is joined to the program allreferences to those functions and data in the files code are changedto point to the actual locations in the program where the functionsand data are placed in memory
 this is basically a link operation
in windows a dynamiclink library 
dll file has no danglingreferences
  instead an access to functions or data goes through alookup table
  so the dll code does not have to be fixed up at runtimeto refer to the programs memory instead the code already uses thedlls lookup table and the lookup table is modified at runtime topoint to the functions and data
in unix there is only one type of library file 
a which containscode from several object files 
o
  during the link step to createa shared object file 
so the linker may find that it doesnt knowwhere an identifier is defined
  the linker will look for it in theobject files in the libraries if it finds it it will include all thecode from that object file
in windows there are two types of library a static library and animport library both called 
  a static library is like a unix
a file it contains code to be included as necessary
 an importlibrary is basically used only to reassure the linker that a certainidentifier is legal and will be present in the program when the dllis loaded
  so the linker uses the information from the import libraryto build the lookup table for using identifiers that are not includedin the dll
  when an application or a dll is linked an import librarymay be generated which will need to be used for all future dlls thatdepend on the symbols in the application or dll
suppose you are building two dynamicload modules b and c whichshould share another block of code a
  on unix you would not passa
a to the linker for b
so and c
so that would cause it to beincluded twice so that b and c would each have their own copy
  inwindows building a
dll will also build a
  you do passa
lib to the linker for b and c
  a
lib does not contain code itjust contains information which will be used at runtime to access ascode
in windows using an import library is sort of like using importspam it gives you access to spams names but does not create aseparate copy
  on unix linking with a library is more like fromspam import  it does create a separate copy
using dlls in practice
windows python is built in microsoft visual c using other compilersmay or may not work though borland seems to
  the rest of thissection is msvc specific
when creating dlls in windows you must pass pythonxy
lib to thelinker
 to build two dlls spam and ni which uses c functions foundin spam you could use these commands   cl ld ipythoninclude spam
libthe first command created three files spam
dll andspam
  spam
dll does not contain any python functions such aspyargparsetuple but it does know how to find the python codethanks to pythonxy
lib
the second command created ni
dll and 
obj and 
lib whichknows how to find the necessary functions from spam and also from thepython executable
not every identifier is exported to the lookup table
  if you want anyother modules including python to be able to see your identifiersyou have to say declspecdllexport as in voiddeclspecdllexport initspamvoid or pyobject declspecdllexportnigetspamdatavoid
developer studio will throw in a lot of import libraries that you donot really need adding about 100k to your executable
  to get rid ofthem use the project settings dialog link tab to specify ignoredefault libraries
  add the correct msvcrtxx
lib to the list oflibraries
embedding python in another application
see also  pythonc api reference manual     the details of pythons c interface are given in this manual
very high level embedding
beyond very high level embedding an overview
 convert data values from python to c2
 convert data values from c to python2
pure embedding
  if you compile and link this programlets call the finished executable call and use it to execute apython script such as   def multiplyab       printwill compute a times b       c  0       for i in range0 a           c  c  b       return cthen the result should be    call multiply multiply 3 2   will compute 3 times 2   result of call 6although the program is quite large for its functionality most of thecode is for data conversion between python and c and for errorreporting
extending embedded python
embedding python in c
compiling and linking under unixlike systems
4m xlinker exportdynamicnote  to avoid confusion between several python installations and  especially between the system python and your own compiled python  it is recommended that you use the absolute path to  pythonx
defining extension types tutorial
python allows the writer of a c extension module to define new typesthat can be manipulated from python code much like the builtin strand list types
  the code for all extension types follows a patternbut there are some details that you need to understand before you canget started
  this document is a gentle introduction to the topic
the basics
adding data and methods to the basic example
note  the explicit cast to destructor above is needed because we defined  customdealloc to take a customobject  argument but the  tpdealloc function pointer expects to receive a pyobject   argument
note  tpnew shouldnt call tpinit explicitly as the interpreter  will do it itself
note  we didnt fill the tpalloc slot ourselves
note  if you are creating a cooperative tpnew one that calls a base  types tpnew or new you must not try to determine  what method to call using method resolution order at runtime
  see the generic attribute managementsection below for details
providing finer control over data attributes
supporting cyclic garbage collection
  with pyvisit we can minimize the amount ofboilerplate in customtraverse   static int   customtraversecustomobject self visitproc visit void arg          pyvisitselffirst       pyvisitselflast       return 0   note  the tptraverse implementation must name its arguments exactly  visit and arg in order to use pyvisit
note  you could emulate pyclear by writing     pyobject tmp     tmp  selffirst     selffirst  null     pyxdecreftmp  nevertheless it is much easier and less errorprone to always use  pyclear when deleting an attribute
subclassing other types
 footnotes 1 this is true when we know that the object is a basic type like a    string or a float
extending and embedding the python interpreter
this document describes how to write modules in c or c to extend thepython interpreter with new modules
  those modules can not onlydefine new functions but also new object types and their methods
  thedocument also describes how to embed the python interpreter in anotherapplication for use as an extension language
  finally it shows howto compile and link extension modules so that they can be loadeddynamically at run time into the interpreter if the underlyingoperating system supports this feature
this document assumes basic knowledge about python
  for an informalintroduction to the language see the python tutorial
  the pythonlanguage reference gives a more formal definition of the language
the python standard library documents the existing object typesfunctions and modules both builtin and written in python that givethe language its wide application range
for a detailed description of the whole pythonc api see the separatepythonc api reference manual
recommended third party tools
this guide only covers the basic tools for creating extensionsprovided as part of this version of cpython
 third party tools likecython cffi swig and numba offer both simpler and more sophisticatedapproaches to creating c and c extensions for python
see also  python packaging user guide binary extensions     the python packaging user guide not only covers several available     tools that simplify the creation of binary extensions but also     discusses the various reasons why creating an extension module     may be desirable in the first place
creating extensions without third party tools
this section of the guide covers creating c and c extensions withoutassistance from third party tools
 it is intended primarily forcreators of those tools rather than being a recommended way to createyour own c extensions
 extending python with c or c   1
 a simple example   1
 intermezzo errors and exceptions   1
 back to the example   1
 the modules method table and initialization function   1
 compilation and linkage   1
 calling python functions from c   1
 extracting parameters in extension functions   1
 keyword parameters for extension functions   1
 building arbitrary values   1
 reference counts   1
 writing extensions in c   1
 providing a c api for an extension module 2
 defining extension types tutorial   2
 the basics   2
 defining extension types assorted topics   3
 finalization and deallocation   3
 object presentation   3
 attribute management   3
 more suggestions 4
 building c and c extensions   4
 building c and c extensions with distutils   4
 distributing your extension modules 5
 building c and c extensions on windows   5
 a cookbook approach   5
 differences between unix and windows   5
 using dlls in practice
embedding the cpython runtime in a larger application
sometimes rather than creating an extension that runs inside thepython interpreter as the main application it is desirable to insteadembed the cpython runtime inside a larger application
 this sectioncovers some of the details involved in doing that successfully
 embedding python in another application   1
 pure embedding   1
 embedding python in c   1
 compiling and linking under unixlike systems
building c and c extensions
building c and c extensions with distutils
extension modules can be built using distutils  which is included inpython
 since distutils also supports creation of binary packagesusers dont necessarily need a compiler and distutils to install theextension
a distutils package contains a driver script setup
py
 this is aplain python file which in the most simple case could look likethis   from distutils
0          description  this is a demo package          extmodules  module1with this setup
py and a file demo
c running   python setup
py buildwill compile demo
c and produce an extension module named demo inthe build directory
 depending on the system the module file willend up in a subdirectory buildlib
system and may have a name likedemo
so or demo
pyd
in the setup
py all execution is performed by calling the setupfunction
 this takes a variable number of keyword arguments of whichthe example above uses only a subset
 specifically the examplespecifies metainformation to build packages and it specifies thecontents of the package
  normally a package will contain additionalmodules like python source modules documentation subpackages etc
please refer to the distutils documentation in distributing pythonmodules legacy version to learn more about the features ofdistutils this section explains building extension modules only
it is common to precompute arguments to setup to betterstructure the driver script
 in the example above the extmodulesargument to setup is a list of extension modules each of which isan instance of the extension
 in the example the instance definesan extension named demo which is build by compiling a single sourcefile demo
c
in many cases building an extension is more complex since additionalpreprocessor defines and libraries may be needed
 this is demonstratedin the example below
             extmodules  module1in this example setup is called with additional metainformationwhich is recommended when distribution packages have to be built
 forthe extension itself it specifies preprocessor defines includedirectories library directories and libraries
 depending on thecompiler distutils passes this information in different ways to thecompiler
 for example on unix this may result in the compilationcommands   gcc dndebug g o3 wall wstrictprototypes fpic dmajorversion1 dminorversion0 iusrlocalinclude iusrlocalincludepython2
sothese lines are for demonstration purposes only distutils usersshould trust that distutils gets the invocations right
distributing your extension modules
extending python with c or c
a simple example
lets create an extension module called spam the favorite food ofmonty python fans
 and lets say we want to create a pythoninterface to the c library function system 1
 this functiontakes a nullterminated character string as argument and returns aninteger
  we want this function to be callable from python as follows    import spam    status  spam
systemls lbegin by creating a file spammodule
c
  historically if a moduleis called spam the c file containing its implementation is calledspammodule
c if the module name is very long like spammify themodule name can be just spammify
the first two lines of our file can be   define pyssizetclean   include python
hwhich pulls in the python api you can add a comment describing thepurpose of the module and a copyright notice if you like
note  since python may define some preprocessor definitions which affect  the standard headers on some systems you must include python
h  before any standard headers are included
it is recommended to always  define pyssizetclean before including python
h
  see  extracting parameters in extension functions for a description of  this macro
all uservisible symbols defined by python
h have a prefix of pyor py except those defined in standard header files
 forconvenience and since they are used extensively by the pythoninterpreter python
h includes a few standard header filesstdio
h string
h errno
h and stdlib
  if thelatter header file does not exist on your system it declares thefunctions malloc free and realloc directly
the next thing we add to our module file is the c function that willbe called when the python expression spam
systemstring isevaluated well see shortly how it ends up being called   static pyobject    spamsystempyobject self pyobject args          const char command       int sts       if pyargparsetupleargs s command           return null       sts  systemcommand       return pylongfromlongsts   there is a straightforward translation from the argument list inpython for example the single expression ls l to the argumentspassed to the c function
  the c function always has two argumentsconventionally named self and args
the self argument points to the module object for modulelevelfunctions for a method it would point to the object instance
the args argument will be a pointer to a python tuple objectcontaining the arguments
  each item of the tuple corresponds to anargument in the calls argument list
  the arguments are pythonobjects  in order to do anything with them in our c function wehave to convert them to c values
  the function pyargparsetuplein the python api checks the argument types and converts them to cvalues
  it uses a template string to determine the required types ofthe arguments as well as the types of the c variables into which tostore the converted values
  more about this later
pyargparsetuple returns true nonzero if all arguments have theright type and its components have been stored in the variables whoseaddresses are passed
  it returns false zero if an invalid argumentlist was passed
  in the latter case it also raises an appropriateexception so the calling function can return null immediately as wesaw in the example
intermezzo errors and exceptions
back to the example
going back to our example function you should now be able tounderstand this statement   if pyargparsetupleargs s command       return nullit returns null the error indicator for functions returning objectpointers if an error is detected in the argument list relying on theexception set by pyargparsetuple
  otherwise the string value ofthe argument has been copied to the local variable command
  this isa pointer assignment and you are not supposed to modify the string towhich it points so in standard c the variable command shouldproperly be declared as const char command
the next statement is a call to the unix function system passingit the string we just got from pyargparsetuple   sts  systemcommandour spam
system function must return the value of sts as apython object
  this is done using the function pylongfromlong
   return pylongfromlongstsin this case it will return an integer object
  yes even integersare objects on the heap in pythonif you have a c function that returns no useful argument a functionreturning void the corresponding python function must returnnone
   you need this idiom to do so which is implemented by thepyreturnnone macro   pyincrefpynone   return pynonepynone is the c name for the special python object none
  it is agenuine python object rather than a null pointer which meanserror in most contexts as we have seen
the modules method table and initialization function
compilation and linkage
there are two more things to do before you can use your new extensioncompiling and linking it with the python system
  if you use dynamicloading the details may depend on the style of dynamic loading yoursystem uses see the chapters about building extension moduleschapter building c and c extensions and additional informationthat pertains only to building on windows chapter building c and cextensions on windows for more information about this
if you cant use dynamic loading or if you want to make your module apermanent part of the python interpreter you will have to change theconfiguration setup and rebuild the interpreter
  luckily this isvery simple on unix just place your file spammodule
c for examplein the modules directory of an unpacked source distribution add aline to the file modulessetup
local describing your file   spam spammodule
oand rebuild the interpreter by running make in the topleveldirectory
  you can also run make in the modules subdirectorybut then you must first rebuild makefile there by running makemakefile
  this is necessary each time you change the setup file
if your module requires additional libraries to link with these canbe listed on the line in the configuration file as well for instance   spam spammodule
calling python functions from c
extracting parameters in extension functions
the pyargparsetuple function is declared as follows   int pyargparsetuplepyobject arg const char format 
the arg argument must be a tuple object containing an argument listpassed from python to a c function
  the format argument must be aformat string whose syntax is explained in parsing arguments andbuilding values in the pythonc api reference manual
  the remainingarguments must be addresses of variables whose type is determined bythe format string
note that while pyargparsetuple checks that the python argumentshave the required types it cannot check the validity of the addressesof c variables passed to the call if you make mistakes there yourcode will probably crash or at least overwrite random bits in memory
so be carefulnote that any python object references which are provided to thecaller are borrowed references do not decrement their referencecountsome example calls   define pyssizetclean   make s use pyssizet rather than int
keyword parameters for extension functions
the pyargparsetupleandkeywords function is declared as follows   int pyargparsetupleandkeywordspyobject arg pyobject kwdict                                   const char format char kwlist 
the arg and format parameters are identical to those of thepyargparsetuple function
  the kwdict parameter is thedictionary of keywords received as the third parameter from the pythonruntime
  the kwlist parameter is a nullterminated list ofstrings which identify the parameters the names are matched with thetype information from format from left to right
  on successpyargparsetupleandkeywords returns true otherwise it returnsfalse and raises an appropriate exception
note  nested tuples cannot be parsed when using keyword arguments  keyword parameters passed in which are not present in the kwlist  will cause typeerror to be raised
here is an example module which uses keywords based on an example bygeoff philbrick philbrickhks
building arbitrary values
reference counts
reference counting in python
ownership rules
thin ice
null pointers
in general functions that take object references as arguments do notexpect you to pass them null pointers and will dump core or causelater core dumps if you do so
  functions that return objectreferences generally return null only to indicate that an exceptionoccurred
  the reason for not testing for null arguments is thatfunctions often pass the objects they receive on to other function if each function were to test for null there would be a lot ofredundant tests and the code would run more slowly
it is better to test for null only at the source when a pointerthat may be null is received for example from malloc or from afunction that may raise an exception
the macros pyincref and pydecref do not check for nullpointers  however their variants pyxincref and pyxdecrefdo
the macros for checking for a particular object typepytypecheck dont check for null pointers  again there ismuch code that calls several of these in a row to test an objectagainst various different expected types and this would generateredundant tests
  there are no variants with null checking
the c function calling mechanism guarantees that the argument listpassed to c functions args in the examples is never null  infact it guarantees that it is always a tuple 4
it is a severe error to ever let a null pointer escape to thepython user
writing extensions in c
providing a c api for an extension module
data structures
this chapter describes some things youve learned about already inmore detail and adds some new things as well
more on lists
the list data type has some more methods
  here are all of the methodsof list objectslist
appendx   add an item to the end of the list
  equivalent to alena    x
extenditerable   extend the list by appending all the items from the iterable
   equivalent to alena  iterable
inserti x   insert an item at a given position
  the first argument is the   index of the element before which to insert so a
insert0 x   inserts at the front of the list and a
insertlena x is   equivalent to a
appendx
removex   remove the first item from the list whose value is equal to x
   it raises a valueerror if there is no such item
popi   remove the item at the given position in the list and return it
   if no index is specified a
pop removes and returns the last   item in the list
  the square brackets around the i in the   method signature denote that the parameter is optional not that   you should type square brackets at that position
  you will see   this notation frequently in the python library reference
list
clear   remove all items from the list
  equivalent to del a
indexx start end   return zerobased index in the list of the first item whose value   is equal to x
 raises a valueerror if there is no such item
   the optional arguments start and end are interpreted as in the   slice notation and are used to limit the search to a particular   subsequence of the list
  the returned index is computed relative   to the beginning of the full sequence rather than the start   argument
countx   return the number of times x appears in the list
sortkeynone reversefalse   sort the items of the list in place the arguments can be used for   sort customization see sorted for their explanation
reverse   reverse the elements of the list in place
copy   return a shallow copy of the list
  equivalent to a
an example that uses most of the list methods    fruits  orange apple pear banana kiwi apple banana    fruits
pop   pearyou might have noticed that methods like insert remove or sortthat only modify the list have no return value printed  they returnthe default none
 1  this is a design principle for all mutabledata structures in python
another thing you might notice is that not all data can be sorted orcompared
  for instance none hello 10 doesnt sort becauseintegers cant be compared to strings and none cant be compared toother types
  also there are some types that dont have a definedordering relation
  for example 34j  57j isnt a validcomparison
using lists as stacks
the list methods make it very easy to use a list as a stack where thelast element added is the first element retrieved lastin firstout
  to add an item to the top of the stack use append
  toretrieve an item from the top of the stack use pop without anexplicit index
  for example    stack  3 4 5    stack
using lists as queues
it is also possible to use a list as a queue where the first elementadded is the first element retrieved firstin firstout howeverlists are not efficient for this purpose
  while appends and pops fromthe end of list are fast doing inserts or pops from the beginning ofa list is slow because all of the other elements have to be shiftedby one
to implement a queue use collections
deque which was designed tohave fast appends and pops from both ends
  for example    from collections import deque    queue  dequeeric john michael    queue
list comprehensions
nested list comprehensions
the initial expression in a list comprehension can be any arbitraryexpression including another list comprehension
consider the following example of a 3x4 matrix implemented as a listof 3 lists of length 4    matrix     
 the following list comprehension will transpose rows and columns    rowi for row in matrix for i in range4   1 5 9 2 6 10 3 7 11 4 8 12as we saw in the previous section the nested listcomp is evaluated inthe context of the for that follows it so this example isequivalent to    transposed      for i in range4   
    transposed   1 5 9 2 6 10 3 7 11 4 8 12which in turn is the same as    transposed      for i in range4   
    transposed   1 5 9 2 6 10 3 7 11 4 8 12in the real world you should prefer builtin functions to complexflow statements
 the zip function would do a great job for thisuse case    listzipmatrix   1 5 9 2 6 10 3 7 11 4 8 12see unpacking argument lists for details on the asterisk in this line
the del statement
there is a way to remove an item from a list given its index insteadof its value the del statement
  this differs from the popmethod which returns a value
  the del statement can also be used toremove slices from a list or clear the entire list which we didearlier by assignment of an empty list to the slice
  for example    a  1 1 66
5    del a    a   del can also be used to delete entire variables    del areferencing the name a hereafter is an error at least until anothervalue is assigned to it
  well find other uses for del later
tuples and sequences
sets
python also includes a data type for sets
  a set is an unorderedcollection with no duplicate elements
  basic uses include membershiptesting and eliminating duplicate entries
  set objects also supportmathematical operations like union intersection difference andsymmetric difference
curly braces or the set function can be used to create sets
note to create an empty set you have to use set not  thelatter creates an empty dictionary a data structure that we discussin the next section
here is a brief demonstration    basket  apple orange apple pear orange banana    printbasket                       show that duplicates have been removed   orange banana pear apple    orange in basket                  fast membership testing   true    crabgrass in basket   false     demonstrate set operations on unique letters from two words   
    a  setabracadabra    b  setalacazam    a                                   unique letters in a   a r b c d    a  b                               letters in a but not in b   r d b    a  b                               letters in a or b or both   a c r d b m z l    a  b                               letters in both a and b   a c    a  b                               letters in a or b but not both   r d b m z lsimilarly to list comprehensions set comprehensions are alsosupported    a  x for x in abracadabra if x not in abc    a   r d
dictionaries
looping techniques
more on conditions
comparing sequences and other types
sequence objects typically may be compared to other objects with thesame sequence type
 the comparison uses lexicographical orderingfirst the first two items are compared and if they differ thisdetermines the outcome of the comparison if they are equal the nexttwo items are compared and so on until either sequence is exhausted
if two items to be compared are themselves sequences of the same typethe lexicographical comparison is carried out recursively
  if allitems of two sequences compare equal the sequences are consideredequal
 if one sequence is an initial subsequence of the other theshorter sequence is the smaller lesser one
  lexicographicalordering for strings uses the unicode code point number to orderindividual characters
 some examples of comparisons between sequencesof the same type   1 2 3               1 2 4   1 2 3               1 2 4   abc  c  pascal  python   1 2 3 4            1 2 4   1 2                  1 2 1   1 2 3              1
0   1 2 aa ab    1 2 abc a 4note that comparing objects of different types with  or  islegal provided that the objects have appropriate comparison methods
for example mixed numeric types are compared according to theirnumeric value so 0 equals 0
0 etc
  otherwise rather than providingan arbitrary ordering the interpreter will raise a typeerrorexception
 footnotes 1 other languages may return the mutated object which allows method    chaining such as dinsertaremovebsort
whetting your appetite
if you do much work on computers eventually you find that theressome task youd like to automate
  for example you may wish toperform a searchandreplace over a large number of text files orrename and rearrange a bunch of photo files in a complicated way
perhaps youd like to write a small custom database or a specializedgui application or a simple game
if youre a professional software developer you may have to work withseveral ccjava libraries but find the usual writecompiletestrecompile cycle is too slow
  perhaps youre writing a test suite forsuch a library and find writing the testing code a tedious task
  ormaybe youve written a program that could use an extension languageand you dont want to design and implement a whole new language foryour application
python is just the language for you
you could write a unix shell script or windows batch files for some ofthese tasks but shell scripts are best at moving around files andchanging text data not wellsuited for gui applications or games
 youcould write a ccjava program but it can take a lot of developmenttime to get even a firstdraft program
  python is simpler to useavailable on windows mac os x and unix operating systems and willhelp you get the job done more quickly
python is simple to use but it is a real programming languageoffering much more structure and support for large programs than shellscripts or batch files can offer
  on the other hand python alsooffers much more error checking than c and being a veryhighlevellanguage it has highlevel data types built in such as flexiblearrays and dictionaries
  because of its more general data typespython is applicable to a much larger problem domain than awk or evenperl yet many things are at least as easy in python as in thoselanguages
python allows you to split your program into modules that can bereused in other python programs
  it comes with a large collection ofstandard modules that you can use as the basis of your programs  oras examples to start learning to program in python
  some of thesemodules provide things like file io system calls sockets and eveninterfaces to graphical user interface toolkits like tk
python is an interpreted language which can save you considerabletime during program development because no compilation and linking isnecessary
  the interpreter can be used interactively which makes iteasy to experiment with features of the language to write throwawayprograms or to test functions during bottomup program development
it is also a handy desk calculator
python enables programs to be written compactly and readably
programs written in python are typically much shorter than equivalentc  c or java programs for several reasons the highlevel data types allow you to express complex operations in  a single statement statement grouping is done by indentation instead of beginning and  ending brackets no variable or argument declarations are necessary
python is extensible if you know how to program in c it is easy toadd a new builtin function or module to the interpreter either toperform critical operations at maximum speed or to link pythonprograms to libraries that may only be available in binary form suchas a vendorspecific graphics library
 once you are really hookedyou can link the python interpreter into an application written in cand use it as an extension or command language for that application
by the way the language is named after the bbc show monty pythonsflying circus and has nothing to do with reptiles
  making referencesto monty python skits in documentation is not only allowed it isencouragednow that you are all excited about python youll want to examine itin some more detail
  since the best way to learn a language is to useit the tutorial invites you to play with the python interpreter asyou read
in the next chapter the mechanics of using the interpreter areexplained
  this is rather mundane information but essential fortrying out the examples shown later
the rest of the tutorial introduces various features of the pythonlanguage and system through examples beginning with simpleexpressions statements and data types through functions and modulesand finally touching upon advanced concepts like exceptions and userdefined classes
more control flow tools
besides the while statement just introduced python uses the usualflow control statements known from other languages with some twists
if statements
perhaps the most wellknown statement type is the if statement
  forexample    x  intinputplease enter an integer    please enter an integer 42    if x  0   
   morethere can be zero or more elif parts and the else part isoptional
  the keyword elif is short for else if and is usefulto avoid excessive indentation
  an  if 
 elif 
sequence is a substitute for the switch or case statements foundin other languages
for statements
the for statement in python differs a bit from what you may be usedto in c or pascal
  rather than always iterating over an arithmeticprogression of numbers like in pascal or giving the user theability to define both the iteration step and halting condition asc pythons for statement iterates over the items of any sequencea list or a string in the order that they appear in the sequence
for example no pun intended     measure some strings   
   cat 3   window 6   defenestrate 12code that modifies a collection while iterating over that samecollection can be tricky to get right
  instead it is usually morestraightforward to loop over a copy of the collection or to create anew collection    strategy  iterate over a copy   for user status in users
the range function
if you do need to iterate over a sequence of numbers the builtinfunction range comes in handy
  it generates arithmeticprogressions    for i in range5   
   0   1   2   3   4the given end point is never part of the generated sequencerange10 generates 10 values the legal indices for items of asequence of length 10
  it is possible to let the range start atanother number or to specify a different increment even negativesometimes this is called the step   range5 10      5 6 7 8 9   range0 10 3      0 3 6 9   range10 100 30     10 40 70to iterate over the indices of a sequence you can combine rangeand len as follows    a  mary had a little lamb    for i in rangelena   
   0 mary   1 had   2 a   3 little   4 lambin most such cases however it is convenient to use the enumeratefunction see looping techniques
a strange thing happens if you just print a range    printrange10   range0 10in many ways the object returned by range behaves as if it is alist but in fact it isnt
 it is an object which returns thesuccessive items of the desired sequence when you iterate over it butit doesnt really make the list thus saving space
we say such an object is iterable that is suitable as a target forfunctions and constructs that expect something from which they canobtain successive items until the supply is exhausted
  we have seenthat the for statement is such a construct while an example of afunction that takes an iterable is sum    sumrange4   0  1  2  3   6later we will see more functions that return iterables and takeiterables as arguments
  lastly maybe you are curious about how toget a list from a range
 here is the solution    listrange4   0 1 2 3in chapter data structures we will discuss in more detail aboutlist
break and continue statements and else clauses on loops
the break statement like in c breaks out of the innermostenclosing for or while loop
loop statements may have an else clause it is executed when theloop terminates through exhaustion of the iterable with for orwhen the condition becomes false with while but not when the loopis terminated by a break statement
  this is exemplified by thefollowing loop which searches for prime numbers    for n in range2 10   
   2 is a prime number   3 is a prime number   4 equals 2  2   5 is a prime number   6 equals 2  3   7 is a prime number   8 equals 2  4   9 equals 3  3yes this is the correct code
  look closely the else clausebelongs to the for loop not the if statement
when used with a loop the else clause has more in common with theelse clause of a try statement than it does with that of ifstatements a try statements else clause runs when no exceptionoccurs and a loops else clause runs when no break occurs
 formore on the try statement and exceptions see handling exceptions
the continue statement also borrowed from c continues with thenext iteration of the loop    for num in range2 10   
pass statements
the pass statement does nothing
 it can be used when a statement isrequired syntactically but the program requires no action
 forexample    while true   
this is commonly used for creating minimal classes    class myemptyclass   
another place pass can be used is as a placeholder for a functionor conditional body when you are working on new code allowing you tokeep thinking at a more abstract level
  the pass is silentlyignored    def initlogargs   
defining functions
more on defining functions
it is also possible to define functions with a variable number ofarguments
 there are three forms which can be combined
default argument values
keyword arguments
special parameters
arbitrary argument lists
finally the least frequently used option is to specify that afunction can be called with an arbitrary number of arguments
  thesearguments will be wrapped up in a tuple see tuples and sequences
before the variable number of arguments zero or more normal argumentsmay occur
   def writemultipleitemsfile separator args       file
joinargsnormally these variadic arguments will be last in the list offormal parameters because they scoop up all remaining input argumentsthat are passed to the function
 any formal parameters which occurafter the args parameter are keywordonly arguments meaning thatthey can only be used as keywords rather than positional arguments
    def concatargs sep   
unpacking argument lists
the reverse situation occurs when the arguments are already in a listor tuple but need to be unpacked for a function call requiringseparate positional arguments
  for instance the builtin rangefunction expects separate start and stop arguments
  if they arenot available separately write the function call with theoperator to unpack the arguments out of a list or tuple    listrange3 6             normal call with separate arguments   3 4 5    args  3 6    listrangeargs             call with arguments unpacked from a list   3 4 5in the same fashion dictionaries can deliver keyword arguments withthe operator    def parrotvoltage statea stiff actionvoom   
lambda expressions
small anonymous functions can be created with the lambda keyword
this function returns the sum of its two arguments lambda a bab
 lambda functions can be used wherever function objects arerequired
  they are syntactically restricted to a single expression
semantically they are just syntactic sugar for a normal functiondefinition
  like nested function definitions lambda functions canreference variables from the containing scope    def makeincrementorn   
    f  makeincrementor42    f0   42    f1   43the above example uses a lambda expression to return a function
another use is to pass a small function as an argument    pairs  1 one 2 two 3 three 4 four    pairs
documentation strings
here are some conventions about the content and formatting ofdocumentation strings
the first line should always be a short concise summary of theobjects purpose
  for brevity it should not explicitly state theobjects name or type since these are available by other meansexcept if the name happens to be a verb describing a functionsoperation
  this line should begin with a capital letter and end witha period
if there are more lines in the documentation string the second lineshould be blank visually separating the summary from the rest of thedescription
  the following lines should be one or more paragraphsdescribing the objects calling conventions its side effects etc
the python parser does not strip indentation from multiline stringliterals in python so tools that process documentation have to stripindentation if desired
  this is done using the following convention
the first nonblank line after the first line of the stringdetermines the amount of indentation for the entire documentationstring
  we cant use the first line since it is generally adjacentto the strings opening quotes so its indentation is not apparent inthe string literal
  whitespace equivalent to this indentation isthen stripped from the start of all lines of the string
  lines thatare indented less should not occur but if they occur all theirleading whitespace should be stripped
  equivalence of whitespaceshould be tested after expansion of tabs to 8 spaces normally
here is an example of a multiline docstring    def myfunction   
function annotations
function annotations are completely optional metadata informationabout the types used by userdefined functions see pep 3107 andpep 484 for more information
annotations are stored in the annotations attribute of thefunction as a dictionary and have no effect on any other part of thefunction
  parameter annotations are defined by a colon after theparameter name followed by an expression evaluating to the value ofthe annotation
  return annotations are defined by a literal followed by an expression between the parameter list and the colondenoting the end of the def statement
  the following example has apositional argument a keyword argument and the return valueannotated    def fham str eggs str  eggs  str   
intermezzo coding style
now that you are about to write longer more complex pieces of pythonit is a good time to talk about coding style
  most languages can bewritten or more concise formatted in different styles some aremore readable than others
 making it easy for others to read your codeis always a good idea and adopting a nice coding style helpstremendously for that
for python pep 8 has emerged as the style guide that mostprojects adhere to it promotes a very readable and eyepleasingcoding style
  every python developer should read it at some pointhere are the most important points extracted for you use 4space indentation and no tabs
  4 spaces are a good compromise between small indentation allows  greater nesting depth and large indentation easier to read
  tabs  introduce confusion and are best left out
 wrap lines so that they dont exceed 79 characters
  this helps users with small displays and makes it possible to have  several code files sidebyside on larger displays
 use blank lines to separate functions and classes and larger blocks  of code inside functions
 when possible put comments on a line of their own
 use docstrings
 use spaces around operators and after commas but not directly  inside bracketing constructs a  f1 2  g3 4
 name your classes and functions consistently the convention is to  use uppercamelcase for classes and lowercasewithunderscores  for functions and methods
  always use self as the name for the  first method argument see a first look at classes for more on  classes and methods
 dont use fancy encodings if your code is meant to be used in  international environments
  pythons default utf8 or even plain  ascii work best in any case
 likewise dont use nonascii characters in identifiers if there is  only the slightest chance people speaking a different language will  read or maintain the code
 footnotes 1 actually call by object reference would be a better    description since if a mutable object is passed the caller will    see any changes the callee makes to it items inserted into a    list
using the python interpreter
invoking the interpreter
argument passing
when known to the interpreter the script name and additionalarguments thereafter are turned into a list of strings and assigned tothe argv variable in the sys module
  you can access this list byexecuting import sys
  the length of the list is at least one whenno script and no arguments are given sys
argv0 is an emptystring
  when the script name is given as  meaning  standardinput sys
argv0 is set to 
  when c command is usedsys
argv0 is set to c
  when m module is usedsys
argv0  is set to the full name of the located module
  optionsfound after  c command or m module are not consumed  by thepython interpreters option processing but left in sys
argv for  thecommand or module to handle
interactive mode
when commands are read from a tty the interpreter is said to be ininteractive mode
  in this mode it prompts for the next command withthe primary prompt usually three greaterthan signs  forcontinuation lines it prompts with the secondary prompt by defaultthree dots 

 the interpreter prints a welcome message statingits version number and a copyright notice before printing the firstprompt    python3
   continuation lines are needed when entering a multiline construct
 asan example take a look at this if statement    theworldisflat  true    if theworldisflat   
   be careful not to fall offfor more on interactive mode see interactive mode
the interpreter and its environment
source code encoding
by default python source files are treated as encoded in utf8
  inthat encoding characters of most languages in the world can be usedsimultaneously in string literals identifiers and comments although the standard library only uses ascii characters foridentifiers a convention that any portable code should follow
  todisplay all these characters properly your editor must recognize thatthe file is utf8 and it must use a font that supports all thecharacters in the file
to declare an encoding other than the default one a special commentline should be added as the first line of the file
  the syntax isas follows     coding encoding where encoding is one of the valid codecs supported by python
for example to declare that windows1252 encoding is to be used thefirst line of your source code file should be     coding cp1252 one exception to the first line rule is when the source code startswith a unix shebang line
  in this case the encoding declarationshould be added as the second line of the file
  for example   usrbinenv python3     coding cp1252  footnotes 1 on unix the python 3
x interpreter is by default not installed    with the executable named python so that it does not conflict    with a simultaneously installed python 2
x executable
floating point arithmetic  issues and limitations
representation error
this section explains the 0
1 example in detail and shows how youcan perform an exact analysis of cases like this yourself
  basicfamiliarity with binary floatingpoint representation is assumed
representation error refers to the fact that some most actuallydecimal fractions cannot be represented exactly as binary base 2fractions
 this is the chief reason why python or perl c c javafortran and many others often wont display the exact decimal numberyou expect
why is that  110 is not exactly representable as a binary fraction
almost all machines today november 2000 use ieee754 floating pointarithmetic and almost all platforms map python floats to ieee754double precision
  754 doubles contain 53 bits of precision so oninput the computer strives to convert 0
1 to the closest fraction itcan of the form j2n where j is an integer containing exactly53 bits
  rewriting   1  10  j  2nas   j  2n  10and recalling that j has exactly 53 bits is  252 but 253 the best value for n is 56    252   256  10   253   truethat is 56 is the only value for n that leaves j with exactly 53bits
  the best possible value for j is then that quotient rounded    q r  divmod256 10    r   6since the remainder is more than half of 10 the best approximation isobtained by rounding up    q1   7205759403792794therefore the best possible approximation to 110 in 754 doubleprecision is   7205759403792794  2  56dividing both the numerator and denominator by two reduces thefraction to   3602879701896397  2  55note that since we rounded up this is actually a little bit largerthan 110 if we had not rounded up the quotient would have been alittle bit smaller than 110
  but in no case can it be exactly110so the computer never sees 110  what it sees is the exact fractiongiven above the best 754 double approximation it can get    0
0if we multiply that fraction by 1055 we can see the value out to 55decimal digits    3602879701896397  10  55  2  55   1000000000000000055511151231257827021181583404541015625meaning that the exact number stored in the computer is equal to thedecimal value0
 instead ofdisplaying the full decimal value many languages including olderversions of python round the result to 17 significant digits    format0
10000000000000001the fractions and decimal modules make these calculations easy    from decimal import decimal    from fractions import fraction    fraction
errors and exceptions
until now error messages havent been more than mentioned but if youhave tried out the examples you have probably seen some
  there areat least two distinguishable kinds of errors syntax errors andexceptions
syntax errors
syntax errors also known as parsing errors are perhaps the mostcommon kind of complaint you get while you are still learning python    while true printhello world     file stdin line 1       while true printhello world                         syntaxerror invalid syntaxthe parser repeats the offending line and displays a little arrowpointing at the earliest point in the line where the error wasdetected
  the error is caused by or at least detected at the tokenpreceding the arrow in the example the error is detected at thefunction print since a colon  is missing before it
  filename and line number are printed so you know where to look in case theinput came from a script
exceptions
even if a statement or expression is syntactically correct it maycause an error when an attempt is made to execute it
 errors detectedduring execution are called exceptions and are not unconditionallyfatal you will soon learn how to handle them in python programs
most exceptions are not handled by programs however and result inerror messages as shown here    10  10   traceback most recent call last     file stdin line 1 in module   zerodivisionerror division by zero    4  spam3   traceback most recent call last     file stdin line 1 in module   nameerror name spam is not defined    2  2   traceback most recent call last     file stdin line 1 in module   typeerror cant convert int object to str implicitlythe last line of the error message indicates what happened
 exceptionscome in different types and the type is printed as part of themessage the types in the example are zerodivisionerror nameerrorand typeerror
 the string printed as the exception type is the nameof the builtin exception that occurred
  this is true for all builtin exceptions but need not be true for userdefined exceptionsalthough it is a useful convention
 standard exception names arebuiltin identifiers not reserved keywords
the rest of the line provides detail based on the type of exceptionand what caused it
the preceding part of the error message shows the context where theexception occurred in the form of a stack traceback
 in general itcontains a stack traceback listing source lines however it will notdisplay lines read from standard input
builtin exceptions lists the builtin exceptions and their meanings
handling exceptions
raising exceptions
the raise statement allows the programmer to force a specifiedexception to occur
 for example    raise nameerrorhithere   traceback most recent call last     file stdin line 1 in module   nameerror hitherethe sole argument to raise indicates the exception to be raised
this must be either an exception instance or an exception class aclass that derives from exception
  if an exception class ispassed it will be implicitly instantiated by calling its constructorwith no arguments   raise valueerror   shorthand for raise valueerrorif you need to determine whether an exception was raised but dontintend to handle it a simpler form of the raise statement allowsyou to reraise the exception    try   
exception chaining
   raise runtimeerror from excthis can be useful when you are transforming exceptions
 for example    def func   
traceback most recent call last  file stdin line 4 in moduleruntimeerrorfor more information about chaining mechanics see builtinexceptions
userdefined exceptions
programs may name their own exceptions by creating a new exceptionclass see classes for more about python classes
  exceptions shouldtypically be derived from the exception class either directly orindirectly
exception classes can be defined which do anything any other class cando but are usually kept simple often only offering a number ofattributes that allow information about the error to be extracted byhandlers for the exception
  when creating a module that can raiseseveral distinct errors a common practice is to create a base classfor exceptions defined by that module and subclass that to createspecific exception classes for different error conditions   class errorexception       base class for exceptions in this module
message  messagemost exceptions are defined with names that end in error similar tothe naming of the standard exceptions
many standard modules define their own exceptions to report errorsthat may occur in functions they define
  more information on classesis presented in chapter classes
defining cleanup actions
the try statement has another optional clause which is intended todefine cleanup actions that must be executed under all circumstances
for example    try   
   goodbye world   traceback most recent call last     file stdin line 2 in module   keyboardinterruptif a finally clause is present the finally clause will execute asthe last task before the try statement completes
 the finallyclause runs whether or not the try statement produces an exception
the following points discuss more complex cases when an exceptionoccurs if an exception occurs during execution of the try clause the  exception may be handled by an except clause
 if the exception is  not handled by an except clause the exception is reraised after  the finally clause has been executed
 an exception could occur during execution of an except or else  clause
 again the exception is reraised after the finally clause  has been executed
 if the try statement reaches a break continue or return  statement the finally clause will execute just prior to the  break continue or return statements execution
 if a finally clause includes a return statement the returned  value will be the one from the finally clauses return  statement not the value from the try clauses return statement
for example    def boolreturn   
    boolreturn   falsea more complicated example    def dividex y   
0   executing finally clause    divide2 0   division by zero   executing finally clause    divide2 1   executing finally clause   traceback most recent call last     file stdin line 1 in module     file stdin line 3 in divide   typeerror unsupported operand types for  str and stras you can see the finally clause is executed in any event
  thetypeerror raised by dividing two strings is not handled by theexcept clause and therefore reraised after the finally clause hasbeen executed
in real world applications the finally clause is useful forreleasing external resources such as files or network connectionsregardless of whether the use of the resource was successful
predefined cleanup actions
some objects define standard cleanup actions to be undertaken whenthe object is no longer needed regardless of whether or not theoperation using the object succeeded or failed
 look at the followingexample which tries to open a file and print its contents to thescreen
   for line in openmyfile
txt       printline endthe problem with this code is that it leaves the file open for anindeterminate amount of time after this part of the code has finishedexecuting
 this is not an issue in simple scripts but can be aproblem for larger applications
 the with statement allows objectslike files to be used in a way that ensures they are always cleaned uppromptly and correctly
   with openmyfile
txt as f       for line in f           printline endafter the statement is executed the file f is always closed evenif a problem was encountered while processing the lines
 objectswhich like files provide predefined cleanup actions will indicatethis in their documentation
brief tour of the standard library  part ii
this second tour covers more advanced modules that supportprofessional programming needs
  these modules rarely occur in smallscripts
output formatting
the reprlib module provides a version of repr customized forabbreviated displays of large or deeply nested containers    import reprlib    reprlib
the pprint module offers more sophisticated control over printingboth builtin and user defined objects in a way that is readable bythe interpreter
 when the result is longer than one line the prettyprinter adds line breaks and indentation to more clearly reveal datastructure    import pprint    t  black cyan white green red magenta   
pprintt width30   black cyan      white      green red     magenta yellow      bluethe textwrap module formats paragraphs of text to fit a given screenwidth    import textwrap    doc  the wrap method is just like fill except that it returns   
the locale module accesses a database of culture specific dataformats
 the grouping attribute of locales format function provides adirect way of formatting numbers with group separators    import locale    locale
templating
working with binary data record layouts
the struct module provides pack and unpack functions forworking with variable length binary record formats
  the followingexample shows how to loop through header information in a zip filewithout using the zipfile module
  pack codes h and irepresent two and four byte unsigned numbers respectively
  the indicates that they are standard size and in littleendian byte order   import struct   with openmyfile
multithreading
threading is a technique for decoupling tasks which are notsequentially dependent
  threads can be used to improve theresponsiveness of applications that accept user input while othertasks run in the background
  a related use case is running io inparallel with computations in another thread
the following code shows how the high level threading module can runtasks in background while the main program continues to run   import threading zipfile   class asynczipthreading
the principal challenge of multithreaded applications is coordinatingthreads that share data or other resources
  to that end thethreading module provides a number of synchronization primitivesincluding locks events condition variables and semaphores
while those tools are powerful minor design errors can result inproblems that are difficult to reproduce
  so the preferred approachto task coordination is to concentrate all access to a resource in asingle thread and then use the queue module to feed that thread withrequests from other threads
 applications using queue objects forinterthread communication and coordination are easier to design morereadable and more reliable
logging
the logging module offers a full featured and flexible loggingsystem
 at its simplest log messages are sent to a file or tosys
stderr   import logging   logging
criticalcritical error  shutting downthis produces the following output   warningrootwarningconfig file server
conf not found   errorrooterror occurred   criticalrootcritical error  shutting downby default informational and debugging messages are suppressed andthe output is sent to standard error
  other output options includerouting messages through email datagrams sockets or to an httpserver
  new filters can select different routing based on messagepriority debug info warning error and critical
the logging system can be configured directly from python or can beloaded from a user editable configuration file for customized loggingwithout altering the application
weak references
python does automatic memory management reference counting for mostobjects and garbage collection to eliminate cycles
  the memory isfreed shortly after the last reference to it has been eliminated
this approach works fine for most applications but occasionally thereis a need to track objects only as long as they are being used bysomething else
 unfortunately just tracking them creates a referencethat makes them permanent
 the weakref module provides tools fortracking objects without creating a reference
  when the object is nolonger needed it is automatically removed from a weakref table and acallback is triggered for weakref objects
  typical applicationsinclude caching objects that are expensive to create    import weakref gc    class a   
tools for working with lists
many data structure needs can be met with the builtin list type
however sometimes there is a need for alternative implementationswith different performance tradeoffs
the array module provides an array object that is like a listthat stores only homogeneous data and stores it more compactly
  thefollowing example shows an array of numbers stored as two byteunsigned binary numbers typecode h rather than the usual 16bytes per entry for regular lists of python int objects    from array import array    a  arrayh 4000 10 700 22222    suma   26932    a13   arrayh 10 700the collections module provides a deque object that is like alist with faster appends and pops from the left side but slowerlookups in the middle
 these objects are well suited for implementingqueues and breadth first tree searches    from collections import deque    d  dequetask1 task2 task3    d
appendmin addition to alternative list implementations the library alsooffers other tools such as the bisect module with functions formanipulating sorted lists    import bisect    scores  100 perl 200 tcl 400 lua 500 python    bisect
insortscores 300 ruby    scores   100 perl 200 tcl 300 ruby 400 lua 500 pythonthe heapq module provides functions for implementing heaps based onregular lists
  the lowest valued entry is always kept at positionzero
  this is useful for applications which repeatedly access thesmallest element but do not want to run a full list sort    from heapq import heapify heappop heappush    data  1 3 5 7 9 2 4 6 8 0    heapifydata                       rearrange the list into heap order    heappushdata 5                  add a new entry    heappopdata for i in range3   fetch the three smallest entries   5 0 1
decimal floating point arithmetic
the decimal module offers a decimal datatype for decimal floatingpoint arithmetic
  compared to the builtin float implementation ofbinary floating point the class is especially helpful for financial applications and other uses which require exact decimal  representation control over precision control over rounding to meet legal or regulatory requirements tracking of significant decimal places or applications where the user expects the results to match  calculations done by hand
for example calculating a 5 tax on a 70 cent phone charge givesdifferent results in decimal floating point and binary floating point
the difference becomes significant if the results are rounded to thenearest cent    from decimal import     rounddecimal0
73the decimal result keeps a trailing zero automatically inferringfour place significance from multiplicands with two placesignificance
  decimal reproduces mathematics as done by hand andavoids issues that can arise when binary floating point cannot exactlyrepresent decimal quantities
exact representation enables the decimal class to perform modulocalculations and equality tests that are unsuitable for binaryfloating point    decimal1
0   falsethe decimal module provides arithmetic with as much precision asneeded    getcontext
virtual environments and packages
introduction
python applications will often use packages and modules that dontcome as part of the standard library
  applications will sometimesneed a specific version of a library because the application mayrequire that a particular bug has been fixed or the application may bewritten using an obsolete version of the librarys interface
this means it may not be possible for one python installation to meetthe requirements of every application
  if application a needs version1
0 of a particular module but application b needs version 2
0 thenthe requirements are in conflict and installing either version 1
0 or2
0 will leave one application unable to run
the solution for this problem is to create a virtual environment aselfcontained directory tree that contains a python installation fora particular version of python plus a number of additional packages
different applications can then use different virtual environments
 toresolve the earlier example of conflicting requirements application acan have its own virtual environment with version 1
0 installed whileapplication b has another virtual environment with version 2
0
 ifapplication b requires a library be upgraded to version 3
0 this willnot affect application as environment
creating virtual environments
the module used to create and manage virtual environments is calledvenv
  venv will usually install the most recent version of pythonthat you have available
 if you have multiple versions of python onyour system you can select a specific python version by runningpython3 or whichever version you want
to create a virtual environment decide upon a directory where youwant to place it and run the venv module as a script with thedirectory path   python3 m venv tutorialenvthis will create the tutorialenv directory if it doesnt exist andalso create directories inside it containing a copy of the pythoninterpreter the standard library and various supporting files
a common directory location for a virtual environment is 
 thisname keeps the directory typically hidden in your shell and thus outof the way while giving it a name that explains why the directoryexists
 it also prevents clashing with 
env environment variabledefinition files that some tooling supports
once youve created a virtual environment you may activate it
on windows run   tutorialenvscriptsactivate
baton unix or macos run   source tutorialenvbinactivatethis script is written for the bash shell
  if you use the csh orfish shells there are alternate activate
csh andactivate
fish scripts you should use instead
activating the virtual environment will change your shells prompt toshow what virtual environment youre using and modify the environmentso that running python will get you that particular version andinstallation of python
 for example    source envstutorialenvbinactivate   tutorialenv  python   python 3
managing packages with pip
you can install upgrade and remove packages using a program calledpip
  by default pip will install packages from the pythonpackage index httpspypi
org
  you can browse the python packageindex by going to it in your web browser or you can use pipslimited search feature   tutorialenv  pip search astronomy   skyfield                elegant astronomy for python   gary                    galactic astronomy and gravitational dynamics
pip has a number of subcommands search install uninstallfreeze etc
  consult the installing python modules guide forcomplete documentation for pip
you can install the latest version of a package by specifying apackages name   tutorialenv  python m pip install novas   collecting novas     downloading novas3
3you can also install a specific version of a package by giving thepackage name  followed by  and the version number   tutorialenv  python m pip install requests2
0if you rerun this command pip will notice that the requestedversion is already installed and do nothing
  you can supply adifferent version number to get that version or you can run pipinstall upgrade to upgrade the package to the latest version   tutorialenv  python m pip install upgrade requests   collecting requests   installing collected packages requests     found existing installation requests 2
0pip uninstall followed by one or more package names will remove thepackages from the virtual environment
pip show will display information about a particular package   tutorialenv  pip show requests      metadataversion 2
4sitepackages   requirespip list will display all of the packages installed in the virtualenvironment   tutorialenv  pip list   novas 3
0pip freeze will produce a similar list of the installed packagesbut the output uses the format that pip install expects
 a commonconvention is to put this list in a requirements
txt file   tutorialenv  pip freeze  requirements
0the requirements
txt can then be committed to version control andshipped as part of an application
  users can then install all thenecessary packages with install r   tutorialenv  python m pip install r requirements
0pip has many more options
  consult the installing python modulesguide for complete documentation for pip
  when youve written apackage and want to make it available on the python package indexconsult the distributing python modules guide
appendix
interactive mode
error handling
when an error occurs the interpreter prints an error message and astack trace
 in interactive mode it then returns to the primaryprompt when input came from a file it exits with a nonzero exitstatus after printing the stack trace
 exceptions handled by anexcept clause in a try statement are not errors in this context
some errors are unconditionally fatal and cause an exit with a nonzeroexit this applies to internal inconsistencies and some cases ofrunning out of memory
  all error messages are written to the standarderror stream normal output from executed commands is written tostandard output
typing the interrupt character usually controlc or delete tothe primary or secondary prompt cancels the input and returns to theprimary prompt
 1 typing an interrupt while a command is executingraises the keyboardinterrupt exception which may be handled by atry statement
executable python scripts
on bsdish unix systems python scripts can be made directlyexecutable like shell scripts by putting the line   usrbinenv python3
5assuming that the interpreter is on the users path at thebeginning of the script and giving the file an executable mode
  the must be the first two characters of the file
  on some platformsthis first line must end with a unixstyle line ending n not awindows rn line ending
  note that the hash or poundcharacter  is used to start a comment in python
the script can be given an executable mode or permission using thechmod command
pyon windows systems there is no notion of an executable mode
  thepython installer automatically associates 
py files withpython
exe so that a doubleclick on a python file will run it as ascript
  the extension can also be 
pyw in that case the consolewindow that normally appears is suppressed
the interactive startup file
when you use python interactively it is frequently handy to have somestandard commands executed every time the interpreter is started
  youcan do this by setting an environment variable named pythonstartupto the name of a file containing your startup commands
  this issimilar to the 
profile feature of the unix shells
this file is only read in interactive sessions not when python readscommands from a script and not when devtty is given as theexplicit source of commands which otherwise behaves like aninteractive session
  it is executed in the same namespace whereinteractive commands are executed so that objects that it defines orimports can be used without qualification in the interactive session
you can also change the prompts sys
ps1 and sys
ps2 in this file
if you want to read an additional startup file from the currentdirectory you can program this in the global startup file using codelike if os
pyexecopen
read
 if you want to use the startupfile in a script you must do this explicitly in the script   import os   filename  os
the customization modules
python provides two hooks to let you customize it sitecustomize andusercustomize
  to see how it works you need first to find thelocation of your user sitepackages directory
  start python and runthis code    import site    site
5sitepackagesnow you can create a file named usercustomize
py in that directoryand put anything you want in it
  it will affect every invocation ofpython unless it is started with the s option to disable theautomatic import
sitecustomize works in the same way but is typically created by anadministrator of the computer in the global sitepackages directoryand is imported before usercustomize
  see the documentation of thesite module for more details
 footnotes 1 a problem with the gnu readline package may prevent this
the python tutorial
what now
reading this tutorial has probably reinforced your interest in usingpython  you should be eager to apply python to solving your realworld problems
 where should you go to learn morethis tutorial is part of pythons documentation set
   some otherdocuments in the set are the python standard library  you should browse through this manual which gives complete though  terse reference material about types functions and the modules in  the standard library
  the standard python distribution includes a  lot of additional code
 there are modules to read unix mailboxes  retrieve documents via http generate random numbers parse command  line options write cgi programs compress data and many other  tasks
 skimming through the library reference will give you an idea  of whats available
 installing python modules explains how to install additional modules  written by other python users
 the python language reference a detailed explanation of pythons  syntax and semantics
  its heavy reading but is useful as a  complete guide to the language itself
more python resources httpswww
org  the major python web site
  it contains  code documentation and pointers to pythonrelated pages around the  web
  this web site is mirrored in various places around the world  such as europe japan and australia a mirror may be faster than  the main site depending on your geographical location
org  fast access to pythons  documentation
org the python package index previously also  nicknamed the cheese shop 1 is an index of usercreated python  modules that are available for download
  once you begin releasing  code you can register it here so that others can find it
comrecipeslangspython the python  cookbook is a sizable collection of code examples larger modules  and useful scripts
 particularly notable contributions are collected  in a book also titled python cookbook oreilly  associates isbn  0596007973
 httpwww
org collects links to pythonrelated videos from  conferences and usergroup meetings
org the scientific python project includes modules  for fast array computations and manipulations plus a host of  packages for such things as linear algebra fourier transforms non  linear solvers random number distributions statistical analysis  and the like
for pythonrelated questions and problem reports you can post to thenewsgroup comp
python or send them to the mailing list atpythonlistpython
  the newsgroup and mailing list are gatewayedso messages posted to one will automatically be forwarded to theother
  there are hundreds of postings a day asking and answeringquestions suggesting new features and announcing new modules
mailing list archives are available athttpsmail
orgpipermail
before posting be sure to check the list of frequently askedquestions also called the faq
  the faq answers many of thequestions that come up again and again and may already contain thesolution for your problem
 footnotes 1 cheese shop is a monty pythons sketch a customer enters a    cheese shop but whatever cheese he asks for the clerk says its    missing
brief tour of the standard library
operating system interface
the os module provides dozens of functions for interacting with theoperating system    import os    os
systemmkdir today    run the command mkdir in the system shell   0be sure to use the import os style instead of from os import 
this will keep os
open from shadowing the builtin openfunction which operates much differently
the builtin dir and help functions are useful as interactiveaids for working with large modules like os    import os    diros   returns a list of all module functions    helpos   returns an extensive manual page created from the modules docstringsfor daily file and directory management tasks the shutil moduleprovides a higher level interface that is easier to use    import shutil    shutil
file wildcards
the glob module provides a function for making file lists fromdirectory wildcard searches    import glob    glob
command line arguments
common utility scripts often need to process command line arguments
these arguments are stored in the sys modules argv attribute as alist
  for instance the following output results from running pythondemo
py one two three at the command line    import sys    printsys
py one two threethe argparse module provides a more sophisticated mechanism toprocess command line arguments
  the following script extracts one ormore filenames and an optional number of lines to be displayed   import argparse   parser  argparse
parseargs   printargswhen run at the command line with python top
txtbeta
txt the script sets args
lines to 5 and args
filenames toalpha
error output redirection and program termination
the sys module also has attributes for stdin stdout andstderr
 the latter is useful for emitting warnings and errormessages to make them visible even when stdout has been redirected    sys
writewarning log file not found starting a new onen   warning log file not found starting a new onethe most direct way to terminate a script is to use sys
exit
string pattern matching
the re module provides regular expression tools for advanced stringprocessing
 for complex matching and manipulation regular expressionsoffer succinct optimized solutions    import re    re
subrbaz 1 r1 cat in the the hat   cat in the hatwhen only simple capabilities are needed string methods are preferredbecause they are easier to read and debug    tea for too
mathematics
internet access
there are a number of modules for accessing the internet andprocessing internet protocols
 two of the simplest areurllib
request for retrieving data from urls and smtplib forsending mail    from urllib
quitnote that the second example needs a mailserver running onlocalhost

dates and times
the datetime module supplies classes for manipulating dates andtimes in both simple and complex ways
 while date and time arithmeticis supported the focus of the implementation is on efficient memberextraction for output formatting and manipulation
  the module alsosupports objects that are timezone aware
data compression
common data archiving and compression formats are directly supportedby modules including zlib gzip bz2 lzma zipfile andtarfile
    import zlib    s  bwitch which has which witches wrist watch    lens   41    t  zlib
performance measurement
some python users develop a deep interest in knowing the relativeperformance of different approaches to the same problem
 pythonprovides a measurement tool that answers those questions immediately
for example it may be tempting to use the tuple packing and unpackingfeature instead of the traditional approach to swapping arguments
 thetimeit module quickly demonstrates a modest performance advantage    from timeit import timer    timerta ab bt a1 b2
54962537085770791in contrast to timeits fine level of granularity the profile andpstats modules provide tools for identifying time critical sectionsin larger blocks of code
quality control
one approach for developing high quality software is to write testsfor each function as it is developed and to run those tests frequentlyduring the development process
the doctest module provides a tool for scanning a module andvalidating tests embedded in a programs docstrings
  testconstruction is as simple as cuttingandpasting a typical call alongwith its results into the docstring
 this improves the documentationby providing the user with an example and it allows the doctest moduleto make sure the code remains true to the documentation   def averagevalues       computes the arithmetic mean of a list of numbers
testmod    automatically validate the embedded teststhe unittest module is not as effortless as the doctest modulebut it allows a more comprehensive set of tests to be maintained in aseparate file   import unittest   class teststatisticalfunctionsunittest
batteries included
python has a batteries included philosophy
  this is best seenthrough the sophisticated and robust capabilities of its largerpackages
 for example the xmlrpc
client and xmlrpc
server modules make implementing  remote procedure calls into an almost trivial task
  despite the  modules names no direct knowledge or handling of xml is needed
 the email package is a library for managing email messages  including mime and other rfc 2822based message documents
  unlike smtplib and poplib which actually send and receive  messages the email package has a complete toolset for building or  decoding complex message structures including attachments and for  implementing internet encoding and header protocols
 the json package provides robust support for parsing this popular  data interchange format
  the csv module supports direct reading  and writing of files in commaseparated value format commonly  supported by databases and spreadsheets
  xml processing is  supported by the xml
elementtree xml
dom and xml
sax  packages
 together these modules and packages greatly simplify data  interchange between python applications and other tools
 the sqlite3 module is a wrapper for the sqlite database library  providing a persistent database that can be updated and accessed  using slightly nonstandard sql syntax
 internationalization is supported by a number of modules including  gettext locale and the codecs package
interactive input editing and history substitution
some versions of the python interpreter support editing of the currentinput line and history substitution similar to facilities found inthe korn shell and the gnu bash shell
  this is implemented using thegnu readline library which supports various styles of editing
  thislibrary has its own documentation which we wont duplicate here
tab completion and history editing
alternatives to the interactive interpreter
classes
a word about names and objects
objects have individuality and multiple names in multiple scopescan be bound to the same object
  this is known as aliasing in otherlanguages
  this is usually not appreciated on a first glance atpython and can be safely ignored when dealing with immutable basictypes numbers strings tuples
  however aliasing has a possiblysurprising effect on the semantics of python code involving mutableobjects such as lists dictionaries and most other types
 this isusually used to the benefit of the program since aliases behave likepointers in some respects
  for example passing an object is cheapsince only a pointer is passed by the implementation and if afunction modifies an object passed as an argument the caller will seethe change  this eliminates the need for two different argumentpassing mechanisms as in pascal
python scopes and namespaces
scopes and namespaces example
this is an example demonstrating how to reference the different scopesand namespaces and how global and nonlocal affect variablebinding   def scopetest       def dolocal           spam  local spam       def dononlocal           nonlocal spam           spam  nonlocal spam       def doglobal           global spam           spam  global spam       spam  test spam       dolocal       printafter local assignment spam       dononlocal       printafter nonlocal assignment spam       doglobal       printafter global assignment spam   scopetest   printin global scope spamthe output of the example code is   after local assignment test spam   after nonlocal assignment nonlocal spam   after global assignment nonlocal spam   in global scope global spamnote how the local assignment which is default didnt changescopetests binding of spam
  the nonlocal assignment changedscopetests binding of spam and the global assignment changedthe modulelevel binding
you can also see that there was no previous binding for spam beforethe global assignment
a first look at classes
classes introduce a little bit of new syntax three new object typesand some new semantics
class definition syntax
the simplest form of class definition looks like this   class classname       statement1       
       statementnclass definitions like function definitions def statements mustbe executed before they have any effect
  you could conceivably placea class definition in a branch of an if statement or inside afunction
in practice the statements inside a class definition will usually befunction definitions but other statements are allowed and sometimesuseful  well come back to this later
  the function definitionsinside a class normally have a peculiar form of argument listdictated by the calling conventions for methods  again this isexplained later
when a class definition is entered a new namespace is created andused as the local scope  thus all assignments to local variablesgo into this new namespace
  in particular function definitions bindthe name of the new function here
when a class definition is left normally via the end a classobject is created
  this is basically a wrapper around the contentsof the namespace created by the class definition well learn moreabout class objects in the next section
  the original local scopethe one in effect just before the class definition was entered isreinstated and the class object is bound here to the class name givenin the class definition header classname in the example
class objects
class objects support two kinds of operations attribute referencesand instantiation
attribute references use the standard syntax used for all attributereferences in python obj
  valid attribute names are all thenames that were in the classs namespace when the class object wascreated
  so if the class definition looked like this   class myclass       a simple example class       i  12345       def fself           return hello worldthen myclass
i and myclass
f are valid attribute referencesreturning an integer and a function object respectively
 classattributes can also be assigned to so you can change the value ofmyclass
i by assignment
 doc is also a valid attributereturning the docstring belonging to the class a simple exampleclass
class instantiation uses function notation
  just pretend that theclass object is a parameterless function that returns a new instanceof the class
 for example assuming the above class   x  myclasscreates a new instance of the class and assigns this object to thelocal variable x
the instantiation operation calling a class object creates anempty object
 many classes like to create objects with instancescustomized to a specific initial state
 therefore a class may define aspecial method named init like this   def initself       self
data  when a class defines an init method class instantiationautomatically invokes init for the newlycreated classinstance
  so in this example a new initialized instance can beobtained by   x  myclassof course the init method may have arguments for greaterflexibility
  in that case arguments given to the class instantiationoperator are passed on to init
  for example    class complex   
instance objects
now what can we do with instance objects  the only operationsunderstood by instance objects are attribute references
  there aretwo kinds of valid attribute names data attributes and methods
data attributes correspond to instance variables in smalltalk andto data members in c
  data attributes need not be declared likelocal variables they spring into existence when they are firstassigned to
  for example if x is the instance of myclass createdabove the following piece of code will print the value 16 withoutleaving a trace   x
counterthe other kind of instance attribute reference is a method
 a methodis a function that belongs to an object
  in python the termmethod is not unique to class instances other object types can havemethods as well
  for example list objects have methods calledappend insert remove sort and so on
 however in the followingdiscussion well use the term method exclusively to mean methods ofclass instance objects unless explicitly stated otherwise
valid method names of an instance object depend on its class
  bydefinition all attributes of a class that are function  objectsdefine corresponding methods of its instances
  so in our examplex
f is a valid method reference since myclass
f is a functionbut x
i is not since myclass
i is not
  but x
f is not the samething as myclass
f  it is a method object not a functionobject
method objects
usually a method is called right after it is bound   x
fin the myclass example this will return the string hello world
however it is not necessary to call a method right away x
f is amethod object and can be stored away and called at a later time
  forexample   xf  x
f   while true       printxfwill continue to print hello world until the end of time
what exactly happens when a method is called  you may have noticedthat x
f was called without an argument above even though thefunction definition for f specified an argument
  what happened tothe argument surely python raises an exception when a function thatrequires an argument is called without any  even if the argumentisnt actually used
actually you may have guessed the answer the special thing aboutmethods is that the instance object is passed as the first argument ofthe function
  in our example the call x
f is exactly equivalentto myclass
  in general calling a method with a list of narguments is equivalent to calling the corresponding function with anargument list that is created by inserting the methods instanceobject before the first argument
if you still dont understand how methods work a look at theimplementation can perhaps clarify matters
  when a nondata attributeof an instance is referenced the instances class is searched
  ifthe name denotes a valid class attribute that is a function object amethod object is created by packing pointers to the instance objectand the function object just found together in an abstract objectthis is the method object
  when the method object is called with anargument list a new argument list is constructed from the instanceobject and the argument list and the function object is called withthis new argument list
class and instance variables
generally speaking instance variables are for data unique to eachinstance and class variables are for attributes and methods shared byall instances of the class   class dog       kind  canine          class variable shared by all instances       def initself name           self
name                   unique to e   buddyas discussed in a word about names and objects shared data can havepossibly surprising effects with involving mutable objects such aslists and dictionaries
 for example the tricks list in thefollowing code should not be used as a class variable because just asingle list would be shared by all dog instances   class dog       tricks                mistaken use of a class variable       def initself name           self
tricks                 unexpectedly shared by all dogs   roll over play deadcorrect design of the class should use an instance variable instead   class dog       def initself name           self
random remarks
inheritance
of course a language feature would not be worthy of the name classwithout supporting inheritance
  the syntax for a derived classdefinition looks like this   class derivedclassnamebaseclassname       statement1       
       statementnthe name baseclassname must be defined in a scope containing thederived class definition
  in place of a base class name otherarbitrary expressions are also allowed
  this can be useful forexample when the base class is defined in another module   class derivedclassnamemodname
baseclassnameexecution of a derived class definition proceeds the same as for abase class
 when the class object is constructed the base class isremembered
  this is used for resolving attribute references if arequested attribute is not found in the class the search proceeds tolook in the base class
  this rule is applied recursively if the baseclass itself is derived from some other class
theres nothing special about instantiation of derived classesderivedclassname creates a new instance of the class
  methodreferences are resolved as follows the corresponding class attributeis searched descending down the chain of base classes if necessaryand the method reference is valid if this yields a function object
derived classes may override methods of their base classes
  becausemethods have no special privileges when calling other methods of thesame object a method of a base class that calls another methoddefined in the same base class may end up calling a method of aderived class that overrides it
  for c programmers all methods inpython are effectively virtual
an overriding method in a derived class may in fact want to extendrather than simply replace the base class method of the same name
there is a simple way to call the base class method directly justcall baseclassname
  this isoccasionally useful to clients as well
  note that this only works ifthe base class is accessible as baseclassname in the global scope
python has two builtin functions that work with inheritance use isinstance to check an instances type isinstanceobj  int will be true only if obj
class is int or some class  derived from int
 use issubclass to check class inheritance issubclassbool  int is true since bool is a subclass of int
  however  issubclassfloat int is false since float is not a subclass  of int
multiple inheritance
python supports a form of multiple inheritance as well
  a classdefinition with multiple base classes looks like this   class derivedclassnamebase1 base2 base3       statement1       
       statementnfor most purposes in the simplest cases you can think of the searchfor attributes inherited from a parent class as depthfirst lefttoright not searching twice in the same class where there is an overlapin the hierarchy
 thus if an attribute is not found inderivedclassname it is searched for in base1 then recursivelyin the base classes of base1 and if it was not found there it wassearched for in base2 and so on
in fact it is slightly more complex than that the method resolutionorder changes dynamically to support cooperative calls to super
this approach is known in some other multipleinheritance languages ascallnextmethod and is more powerful than the super call found insingleinheritance languages
dynamic ordering is necessary because all cases of multipleinheritance exhibit one or more diamond relationships where at leastone of the parent classes can be accessed through multiple paths fromthe bottommost class
  for example all classes inherit fromobject so any case of multiple inheritance provides more than onepath to reach object
  to keep the base classes from being accessedmore than once the dynamic algorithm linearizes the search order in away that preserves the lefttoright ordering specified in each classthat calls each parent only once and that is monotonic meaning thata class can be subclassed without affecting the precedence order ofits parents
 taken together these properties make it possible todesign reliable and extensible classes with multiple inheritance
  formore detail see httpswww
private variables
odds and ends
sometimes it is useful to have a data type similar to the pascalrecord or c struct bundling together a few named data items
  anempty class definition will do nicely   class employee       pass   john  employee   create an empty employee record    fill the fields of the record   john
salary  1000a piece of python code that expects a particular abstract data typecan often be passed a class that emulates the methods of that datatype instead
  for instance if you have a function that formats somedata from a file object you can define a class with methods readand readline that get the data from a string buffer instead andpass it as an argument
instance method objects have attributes too m
self is theinstance object with the method m and m
func is thefunction object corresponding to the method
iterators
by now you have probably noticed that most container objects can belooped over using a for statement   for element in 1 2 3       printelement   for element in 1 2 3       printelement   for key in one1 two2       printkey   for char in 123       printchar   for line in openmyfile
txt       printline endthis style of access is clear concise and convenient
  the use ofiterators pervades and unifies python
  behind the scenes the forstatement calls iter on the container object
  the functionreturns an iterator object that defines the method next whichaccesses elements in the container one at a time
  when there are nomore elements next raises a stopiteration exception whichtells the for loop to terminate
  you can call the nextmethod using the next builtin function this example shows how itall works    s  abc    it  iters    it   iterator object at 0x00a1db50    nextit   a    nextit   b    nextit   c    nextit   traceback most recent call last     file stdin line 1 in module       nextit   stopiterationhaving seen the mechanics behind the iterator protocol it is easy toadd iterator behavior to your classes
  define an iter methodwhich returns an object with a next method
  if the classdefines next then iter can just return self   class reverse       iterator for looping over a sequence backwards
generators
generators are a simple and powerful tool for creating iterators
they are written like regular functions but use the yield statementwhenever they want to return data
  each time next is called onit the generator resumes where it left off it remembers all the datavalues and which statement was last executed
  an example shows thatgenerators can be trivially easy to create   def reversedata       for index in rangelendata1 1 1           yield dataindex    for char in reversegolf   
   f   l   o   ganything that can be done with generators can also be done with classbased iterators as described in the previous section
  what makesgenerators so compact is that the iter and nextmethods are created automatically
another key feature is that the local variables and execution stateare automatically saved between calls
  this made the function easierto write and much more clear than an approach using instance variableslike self
index and self
data
in addition to automatic method creation and saving program statewhen generators terminate they automatically raise stopiteration
in combination these features make it easy to create iterators withno more effort than writing a regular function
generator expressions
some simple generators can be coded succinctly as expressions using asyntax similar to list comprehensions but with parentheses instead ofsquare brackets
 these expressions are designed for situations wherethe generator is used right away by an enclosing function
  generatorexpressions are more compact but less versatile than full generatordefinitions and tend to be more memory friendly than equivalent listcomprehensions
examples    sumii for i in range10                  sum of squares   285    xvec  10 20 30    yvec  7 5 3    sumxy for xy in zipxvec yvec          dot product   260    uniquewords  setword for line in page  for word in line
name for student in graduates    data  golf    listdatai for i in rangelendata1 1 1   f l o g footnotes 1 except for one thing
  module objects have a secret readonly    attribute called dict which returns the dictionary used to    implement the modules namespace the name dict is an    attribute but not a global name
 obviously using this violates    the abstraction of namespace implementation and should be    restricted to things like postmortem debuggers
modules
if you quit from the python interpreter and enter it again thedefinitions you have made functions and variables are lost
therefore if you want to write a somewhat longer program you arebetter off using a text editor to prepare the input for theinterpreter and running it with that file as input instead
  this isknown as creating a script
  as your program gets longer you maywant to split it into several files for easier maintenance
  you mayalso want to use a handy function that youve written in severalprograms without copying its definition into each program
to support this python has a way to put definitions in a file and usethem in a script or in an interactive instance of the interpreter
such a file is called a module definitions from a module can beimported into other modules or into the main module thecollection of variables that you have access to in a script executedat the top level and in calculator mode
a module is a file containing python definitions and statements
  thefile name is the module name with the suffix 
py appended
  within amodule the modules name as a string is available as the value ofthe global variable name
  for instance use your favorite texteditor to create a file called fibo
py in the current directory withthe following contents    fibonacci numbers module   def fibn     write fibonacci series up to n       a b  0 1       while a  n           printa end            a b  b ab       print   def fib2n    return fibonacci series up to n       result         a b  0 1       while a  n           result
appenda           a b  b ab       return resultnow enter the python interpreter and import this module with thefollowing command    import fibothis does not enter the names of the functions defined in fibodirectly in the current symbol table it only enters the module namefibo there
 using the module name you can access the functions    fibo
name   fiboif you intend to use a function often you can assign it to a localname    fib  fibo
more on modules
executing modules as scripts
when you run a python module with   python fibo
py argumentsthe code in the module will be executed just as if you imported itbut with the name set to main
  that means that byadding this code at the end of your module   if name  main       import sys       fibintsys
argv1you can make the file usable as a script as well as an importablemodule because the code that parses the command line only runs if themodule is executed as the main file    python fibo
py 50   0 1 1 2 3 5 8 13 21 34if the module is imported the code is not run    import fibo   this is often used either to provide a convenient user interface to amodule or for testing purposes running the module as a scriptexecutes a test suite
the module search path
compiled python files
standard modules
python comes with a library of standard modules described in aseparate document the python library reference library referencehereafter
  some modules are built into the interpreter theseprovide access to operations that are not part of the core of thelanguage but are nevertheless built in either for efficiency or toprovide access to operating system primitives such as system calls
the set of such modules is a configuration option which also dependson the underlying platform
  for example the winreg module is onlyprovided on windows systems
 one particular module deserves someattention sys which is built into every python interpreter
  thevariables sys
ps1 and sys
ps2 define the strings used as primaryand secondary prompts    import sys    sys
ps1  c    c printyuck   yuck   cthese two variables are only defined if the interpreter is ininteractive mode
the variable sys
path is a list of strings that determines theinterpreters search path for modules
 it is initialized to a defaultpath taken from the environment variable pythonpath or from abuiltin default if pythonpath is not set
  you can modify it usingstandard list operations    import sys    sys
the dir function
the builtin function dir is used to find out which names a moduledefines
  it returns a sorted list of strings    import fibo sys    dirfibo   name fib fib2    dirsys     breakpointhook displayhook doc excepthook    interactivehook loader name package spec    stderr stdin stdout unraisablehook    cleartypecache currentframes debugmallocstats framework    getframe git home xoptions abiflags addaudithook    apiversion argv audit baseexecprefix baseprefix    breakpointhook builtinmodulenames byteorder calltracing    callstats copyright displayhook dontwritebytecode excinfo    excepthook execprefix executable exit flags floatinfo    floatreprstyle getasyncgenhooks getcoroutineorigintrackingdepth    getallocatedblocks getdefaultencoding getdlopenflags    getfilesystemencodeerrors getfilesystemencoding getprofile    getrecursionlimit getrefcount getsizeof getswitchinterval    gettrace hashinfo hexversion implementation intinfo    intern isfinalizing lasttraceback lasttype lastvalue    maxsize maxunicode metapath modules path pathhooks    pathimportercache platform prefix ps1 ps2 pycacheprefix    setasyncgenhooks setcoroutineorigintrackingdepth setdlopenflags    setprofile setrecursionlimit setswitchinterval settrace stderr    stdin stdout threadinfo unraisablehook version versioninfo    warnoptionswithout arguments dir lists the names you have defined currently    a  1 2 3 4 5    import fibo    fib  fibo
fib    dir   builtins name a fib fibo sysnote that it lists all types of names variables modules functionsetc
dir does not list the names of builtin functions and variables
if you want a list of those they are defined in the standard modulebuiltins    import builtins    dirbuiltins     arithmeticerror assertionerror attributeerror baseexception    blockingioerror brokenpipeerror buffererror byteswarning    childprocesserror connectionabortederror connectionerror    connectionrefusederror connectionreseterror deprecationwarning    eoferror ellipsis environmenterror exception false    fileexistserror filenotfounderror floatingpointerror    futurewarning generatorexit ioerror importerror    importwarning indentationerror indexerror interruptederror    isadirectoryerror keyerror keyboardinterrupt lookuperror    memoryerror nameerror none notadirectoryerror notimplemented    notimplementederror oserror overflowerror    pendingdeprecationwarning permissionerror processlookuperror    referenceerror resourcewarning runtimeerror runtimewarning    stopiteration syntaxerror syntaxwarning systemerror    systemexit taberror timeouterror true typeerror    unboundlocalerror unicodedecodeerror unicodeencodeerror    unicodeerror unicodetranslateerror unicodewarning userwarning    valueerror warning zerodivisionerror  buildclass    debug doc import name package abs    all any ascii bin bool bytearray bytes callable    chr classmethod compile complex copyright credits    delattr dict dir divmod enumerate eval exec exit    filter float format frozenset getattr globals hasattr    hash help hex id input int isinstance issubclass    iter len license list locals map max memoryview    min next object oct open ord pow print property    quit range repr reversed round set setattr slice    sorted staticmethod str sum super tuple type vars    zip
packages
packages are a way of structuring pythons module namespace by usingdotted module names
  for example the module name a
b designatesa submodule named b in a package named a
  just like the use ofmodules saves the authors of different modules from having to worryabout each others global variable names the use of dotted modulenames saves the authors of multimodule packages like numpy or pillowfrom having to worry about each others module names
suppose you want to design a collection of modules a package forthe uniform handling of sound files and sound data
  there are manydifferent sound file formats usually recognized by their extensionfor example 
wav 
aiff 
au so you may need to create andmaintain a growing collection of modules for the conversion betweenthe various file formats
 there are also many different operations youmight want to perform on sound data such as mixing adding echoapplying an equalizer function creating an artificial stereo effectso in addition you will be writing a neverending stream of modules toperform these operations
  heres a possible structure for yourpackage expressed in terms of a hierarchical filesystem   sound                          toplevel package         init
when importing the package python searches through the directories onsys
path looking for the package subdirectory
the init
py files are required to make python treat directoriescontaining the file as packages
  this prevents directories with acommon name such as string unintentionally hiding valid modulesthat occur later on the module search path
 in the simplest caseinit
py can just be an empty file but it can also executeinitialization code for the package or set the all variabledescribed later
users of the package can import individual modules from the packagefor example   import sound
echothis loads the submodule sound
echo
  it must be referencedwith its full name
7 atten4an alternative way of importing the submodule is   from sound
effects import echothis also loads the submodule echo and makes it available withoutits package prefix so it can be used as follows   echo
7 atten4yet another variation is to import the desired function or variabledirectly   from sound
echo import echofilteragain this loads the submodule echo but this makes its functionechofilter directly available   echofilterinput output delay0
7 atten4note that when using from package import item the item can beeither a submodule or subpackage of the package or some  other namedefined in the package like a function class or variable
  theimport statement first tests whether the item is defined in thepackage if not it assumes it is a module and attempts to load it
if it fails to find it an importerror exception is raised
contrarily when using syntax like import item
subsubitemeach item except for the last must be a package the last item can bea module or a package but cant be a class or function or variabledefined in the previous item
importing  from a package
now what happens when the user writes from sound
effects import ideally one would hope that this somehow goes out to the filesystemfinds which submodules are present in the package and imports themall
  this could take a long time and importing submodules might haveunwanted sideeffects that should only happen when the submodule isexplicitly imported
the only solution is for the package author to provide an explicitindex of the package
  the import statement uses the followingconvention if a packages init
py code defines a list namedall it is taken to be the list of module names that should beimported when from package import  is encountered
  it is up to thepackage author to keep this list uptodate when a new version of thepackage is released
  package authors may also decide not to supportit if they dont see a use for importing  from their package
  forexample the file soundeffectsinit
py could contain thefollowing code   all  echo surround reversethis would mean that from sound
effects import  would import thethree named submodules of the sound package
if all is not defined the statement from sound
effects import does not import all submodules from the package sound
effectsinto the current namespace it only ensures that the packagesound
effects has been imported possibly running any initializationcode in init
py and then imports whatever names are defined inthe package
  this includes any names defined and submodulesexplicitly loaded by init
py
  it also includes any submodulesof the package that were explicitly loaded by previous importstatements
  consider this code   import sound
effects import in this example the echo and surround modules are imported in thecurrent namespace because they are defined in the sound
effectspackage when the from
import statement is executed
  this alsoworks when all is defined
although certain modules are designed to export only names that followcertain patterns when you use import  it is still considered badpractice in production code
remember there is nothing wrong with using from package importspecificsubmodule  in fact this is the recommended notation unlessthe importing module needs to use submodules with the same name fromdifferent packages
intrapackage references
when packages are structured into subpackages as with the soundpackage in the example you can use absolute imports to refer tosubmodules of siblings packages
  for example if the modulesound
vocoder needs to use the echo module in thesound
effects package it can use from sound
effects import echo
you can also write relative imports with the from module importname form of import statement
  these imports use leading dots toindicate the current and parent packages involved in the relativeimport
  from the surround module for example you might use   from 
filters import equalizernote that relative imports are based on the name of the currentmodule
  since the name of the main module is always mainmodules intended for use as the main module of a python applicationmust always use absolute imports
packages in multiple directories
packages support one more special attribute path
  this isinitialized to be a list containing the name of the directory holdingthe packages init
py before the code in that file is executed
this variable can be modified doing so affects future searches formodules and subpackages contained in the package
while this feature is not often needed it can be used to extend theset of modules found in a package
 footnotes 1 in fact function definitions are also statements that are    executed the execution of a modulelevel function definition    enters the function name in the modules global symbol table
an informal introduction to python
in the following examples input and output are distinguished by thepresence or absence of prompts  and 
 to repeat theexample you must type everything after the prompt when the promptappears lines that do not begin with a prompt are output from theinterpreter
 note that a secondary prompt on a line by itself in anexample means you must type a blank line this is used to end a multiline command
many of the examples in this manual even those entered at theinteractive prompt include comments
  comments in python start withthe hash character  and extend to the end of the physical line
a comment may appear at the start of a line or following whitespace orcode but not within a string literal
  a hash character within astring literal is just a hash character
 since comments are to clarifycode and are not interpreted by python they may be omitted whentyping in examples
some examples    this is the first comment   spam  1   and this is the second comment              
using python as a calculator
numbers
strings
lists
first steps towards programming
of course we can use python for more complicated tasks than addingtwo and two together
  for instance we can write an initial subsequence of the fibonacci series as follows     fibonacci series   
   0   1   1   2   3   5   8this example introduces several new features
 the first line contains a multiple assignment the variables a  and b simultaneously get the new values 0 and 1
  on the last line  this is used again demonstrating that the expressions on the right  hand side are all evaluated first before any of the assignments take  place
  the righthand side expressions are evaluated  from the left  to the right
 the while loop executes as long as the condition here a  10  remains true
  in python like in c any nonzero integer value is  true zero is false
  the condition may also be a string or list  value in fact any sequence anything with a nonzero length is  true empty sequences are false
  the test used in the example is a  simple comparison
  the standard comparison operators are written  the same as in c  less than  greater than  equal  to  less than or equal to  greater than or equal to  and  not equal to
 the body of the loop is indented indentation is pythons way of  grouping statements
  at the interactive prompt you have to type a  tab or spaces for each indented line
  in practice you will  prepare more complicated input for python with a text editor all  decent text editors have an autoindent facility
  when a compound  statement is entered interactively it must be followed by a blank  line to indicate completion since the parser cannot guess when you  have typed the last line
  note that each line within a basic block  must be indented by the same amount
 the print function writes the value of the arguments it is  given
 it differs from just writing the expression you want to write  as we did earlier in the calculator examples in the way it handles  multiple arguments floating point quantities and strings
  strings  are printed without quotes and a space is inserted between items  so you can format things nicely like this      i  256256      printthe value of i is i     the value of i is 65536  the keyword argument end can be used to avoid the newline after  the output or end the output with a different string      a b  0 1      while a  1000     
     01123581321345589144233377610987 footnotes 1 since  has higher precedence than  32 will be    interpreted as 32 and thus result in 9
  to avoid this    and get 9 you can use 32
2 unlike other languages special characters such as n have the    same meaning with both single 
 and double 
    quotes
 the only difference between the two is that within single    quotes you dont need to escape  but you have to escape     and vice versa
input and output
there are several ways to present the output of a program data can beprinted in a humanreadable form or written to a file for future use
this chapter will discuss some of the possibilities
fancier output formatting
formatted string literals
formatted string literals also called fstrings for short let youinclude the value of python expressions inside a string by prefixingthe string with f or f and writing expressions as expression
an optional format specifier can follow the expression
 this allowsgreater control over how the value is formatted
 the following examplerounds pi to three places after the decimal    import math    printfthe value of pi is approximately math
passing an integer after the  will cause that field to be aminimum number of characters wide
  this is useful for making columnsline up
    table  sjoerd 4127 jack 4098 dcab 7678    for name phone in table
   sjoerd            4127   jack              4098   dcab              7678other modifiers can be used to convert the value before it isformatted
 a applies ascii s applies str andr applies repr    animals  eels    printfmy hovercraft is full of animals
for a reference on these format specifications see the referenceguide for the format specification minilanguage
the string format method
basic usage of the str
format method looks like this    printwe are the  who say 
formatknights ni   we are the knights who say nithe brackets and characters within them called format fields arereplaced with the objects passed into the str
format method
  anumber in the brackets can be used to refer to the position of theobject passed into the str
format method
formatspam eggs   eggs and spamif keyword arguments are used in the str
format method theirvalues are referred to by using the name of the argument
    printthis food is adjective
positional and keyword arguments can be arbitrarily combined    printthe story of 0 1 and other
if you have a really long format string that you dont want to splitup it would be nice if you could reference the variables to beformatted by name instead of by position
  this can be done by simplypassing the dict and using square brackets  to access the keys
formattable   jack 4098 sjoerd 4127 dcab 8637678this could also be done by passing the table as keyword arguments withthe  notation
formattable   jack 4098 sjoerd 4127 dcab 8637678this is particularly useful in combination with the builtin functionvars which returns a dictionary containing all local variables
as an example the following lines produce a tidilyaligned set ofcolumns giving integers and their squares and cubes    for x in range1 11   
    1   1    1    2   4    8    3   9   27    4  16   64    5  25  125    6  36  216    7  49  343    8  64  512    9  81  729   10 100 1000for a complete overview of string formatting with str
format seeformat string syntax
manual string formatting
old string formatting
the  operator modulo can also be used for string formatting
 givenstring  values instances of  in string are replaced withzero or more elements of values
 this operation is commonly known asstring interpolation
 for example    import math    printthe value of pi is approximately 5
more information can be found in the printfstyle string formattingsection
reading and writing files
open returns a file object and is most commonly used with twoarguments openfilename mode
    f  openworkfile wthe first argument is a string containing the filename
  the secondargument is another string containing a few characters describing theway in which the file will be used
  mode can be r when the filewill only be read w for only writing an existing file with thesame name will be erased and a opens the file for appending anydata written to the file is automatically added to the end
  ropens the file for both reading and writing
 the mode argument isoptional r will be assumed if its omitted
normally files are opened in text mode that means you read andwrite strings from and to the file which are encoded in a specificencoding
 if encoding is not specified the default is platformdependent see open
 b appended to the mode opens the file inbinary mode now the data is read and written in the form of bytesobjects
  this mode should be used for all files that dont containtext
in text mode the default when reading is to convert platformspecificline endings n on unix rn on windows to just n
  whenwriting in text mode the default is to convert occurrences of nback to platformspecific line endings
  this behindthescenesmodification to file data is fine for text files but will corruptbinary data like that in jpeg or exe files
  be very careful touse binary mode when reading and writing such files
it is good practice to use the with keyword when dealing with fileobjects
  the advantage is that the file is properly closed after itssuite finishes even if an exception is raised at some point
  usingwith is also much shorter than writing equivalent tryfinallyblocks    with openworkfile as f   
closed   trueif youre not using the with keyword then you should callf
close to close the file and immediately free up any systemresources used by it
 if you dont explicitly close a file pythonsgarbage collector will eventually destroy the object and close theopen file for you but the file may stay open for a while
  anotherrisk is that different python implementations will do this cleanup atdifferent times
after a file object is closed either by a with statement or bycalling f
close attempts to use the file object willautomatically fail
    f
methods of file objects
the rest of the examples in this section will assume that a fileobject called f has already been created
to read a files contents call f
readsize which reads somequantity of data and returns it as a string in text mode or bytesobject in binary mode
 size is an optional numeric argument
  whensize is omitted or negative the entire contents of the file will beread and returned its your problem if the file is twice as large asyour machines memory
 otherwise at most size characters in textmode or size bytes in binary mode are read and returned
 if theend of the file has been reached f
read will return an emptystring 
readline reads a single line from the file a newline charactern is left at the end of the string and is only omitted on thelast line of the file if the file doesnt end in a newline
  thismakes the return value unambiguous if f
readline returns an emptystring the end of the file has been reached while a blank line isrepresented by n a string containing only a single newline
    f
readline   for reading lines from a file you can loop over the file object
 thisis memory efficient fast and leads to simple code    for line in f   
   second line of the fileif you want to read all the lines of a file in a list you can also uselistf or f
writestring writes the contents of string to the filereturning the number of characters written
    f
writethis is a testn   15other types of objects need to be converted  either to a string intext mode or a bytes object in binary mode  before writing them    value  the answer 42    s  strvalue   convert the tuple to string    f
tell returns an integer giving the file objects currentposition in the file represented as number of bytes from the beginningof the file when in binary mode and an opaque number when in textmode
to change the file objects position use f
the position is computed from adding offset to a reference pointthe reference point is selected by the whence argument
  a whencevalue of 0 measures from the beginning of the file 1 uses the currentfile position and 2 uses the end of the file as the reference point
whence can be omitted and defaults to 0 using the beginning of thefile as the reference point
read1   bdin text files those opened without a b in the mode string onlyseeks relative to the beginning of the file are allowed the exceptionbeing seeking to the very file end with seek0 2 and the onlyvalid offset values are those returned from the f
tell or zero
any other offset value produces undefined behaviour
file objects have some additional methods such as isatty andtruncate which are less frequently used consult the libraryreference for a complete guide to file objects
saving structured data with json
strings can easily be written to and read from a file
  numbers take abit more effort since the read method only returns strings whichwill have to be passed to a function like int which takes astring like 123 and returns its numeric value 123
  when you wantto save more complex data types like nested lists and dictionariesparsing and serializing by hand becomes complicated
rather than having users constantly writing and debugging code to savecomplicated data types to files python allows you to use the populardata interchange format called json javascript object notation
  thestandard module called json can take python data hierarchies andconvert them to string representations this process is calledserializing
  reconstructing the data from the string representationis called deserializing
  between serializing and deserializing thestring representing the object may have been stored in a file or dataor sent over a network connection to some distant machine
note  the json format is commonly used by modern applications to allow for  data exchange
  many programmers are already familiar with it which  makes it a good choice for interoperability
if you have an object x you can view its json string representationwith a simple line of code    import json    json
dumps1 simple list   1 simple listanother variant of the dumps function called dump simplyserializes the object to a text file
  so if f is a text fileobject opened for writing we can do this   json
dumpx fto decode the object again if f is a text file object which hasbeen opened for reading   x  json
loadfthis simple serialization technique can handle lists and dictionariesbut serializing arbitrary class instances in json requires a bit ofextra effort
 the reference for the json module contains anexplanation of this
see also  pickle  the pickle module  contrary to json pickle is a protocol which allows the  serialization of arbitrarily complex python objects
  as such it is  specific to python and cannot be used to communicate with  applications written in other languages
  it is also insecure by  default deserializing pickle data coming from an untrusted source  can execute arbitrary code if the data was crafted by a skilled  attacker
toplevel components
the python interpreter can get its input from a number of sourcesfrom a script passed to it as standard input or as program argumenttyped in interactively from a module source file etc
  this chaptergives the syntax used in these cases
complete python programs
while a language specification need not prescribe how the languageinterpreter is invoked it is useful to have a notion of a completepython program
  a complete python program is executed in a minimallyinitialized environment all builtin and standard modules areavailable but none have been initialized except for sys varioussystem services builtins builtin functions exceptions andnone and main
  the latter is used to provide the local andglobal namespace for execution of the complete program
the syntax for a complete python program is that for file inputdescribed in the next section
the interpreter may also be invoked in interactive mode in this caseit does not read and execute a complete program but reads and executesone statement possibly compound at a time
  the initial environmentis identical to that of a complete program each statement is executedin the namespace of main
a complete program can be passed to the interpreter in three formswith the c string command line option as a file passed as thefirst command line argument or as standard input
  if the file orstandard input is a tty device the interpreter enters interactivemode otherwise it executes the file as a complete program
file input
all input read from noninteractive files has the same form   fileinput  newline  statementthis syntax is used in the following situations when parsing a complete python program from a file or from a  string when parsing a module when parsing a string passed to the exec function
interactive input
input in interactive mode is parsed using the following grammar   interactiveinput  stmtlist newline  compoundstmt newlinenote that a toplevel compound statement must be followed by a blankline in interactive mode this is needed to help the parser detect theend of the input
expression input
eval is used for expression input
  it ignores leading whitespace
the string argument to eval must have the following form   evalinput  expressionlist newline
compound statements
compound statements contain groups of other statements they affector control the execution of those other statements in some way
  ingeneral compound statements span multiple lines although in simpleincarnations a whole compound statement may be contained in one line
the if while and for statements implement traditional controlflow constructs
  try specifies exception handlers andor cleanupcode for a group of statements while the with statement allows theexecution of initialization and finalization code around a block ofcode
  function and class definitions are also syntactically compoundstatements
a compound statement consists of one or more clauses
  a clauseconsists of a header and a suite
  the clause headers of aparticular compound statement are all at the same indentation level
each clause header begins with a uniquely identifying keyword and endswith a colon
  a suite is a group of statements controlled by aclause
  a suite can be one or more semicolonseparated simplestatements on the same line as the header following the headerscolon or it can be one or more indented statements on subsequentlines
  only the latter form of a suite can contain nested compoundstatements the following is illegal mostly because it wouldnt beclear to which if clause a following else clause would belong   if test1 if test2 printxalso note that the semicolon binds tighter than the colon in thiscontext so that in the following example either all or none of theprint calls are executed   if x  y  z printx printy printzsummarizing   compoundstmt  ifstmt                      whilestmt                      forstmt                      trystmt                      withstmt                      funcdef                      classdef                      asyncwithstmt                      asyncforstmt                      asyncfuncdef   suite          stmtlist newline  newline indent statement dedent   statement      stmtlist newline  compoundstmt   stmtlist      simplestmt  simplestmt note that statements always end in a newline possibly followed by adedent
  also note that optional continuation clauses always beginwith a keyword that cannot start a statement thus there are noambiguities the dangling else problem is solved in python byrequiring nested if statements to be indented
the formatting of the grammar rules in the following sections placeseach clause on a separate line for clarity
the if statement
the if statement is used for conditional execution   ifstmt  if assignmentexpression  suite               elif assignmentexpression  suite               else  suiteit selects exactly one of the suites by evaluating the expressions oneby one until one is found to be true see section boolean operationsfor the definition of true and false then that suite is executedand no other part of the if statement is executed or evaluated
if all expressions are false the suite of the else clause ifpresent is executed
the while statement
the while statement is used for repeated execution as long as anexpression is true   whilestmt  while assignmentexpression  suite                  else  suitethis repeatedly tests the expression and if it is true executes thefirst suite if the expression is false which may be the first timeit is tested the suite of the else clause if present is executedand the loop terminates
a break statement executed in the first suite terminates the loopwithout executing the else clauses suite
  a continue statementexecuted in the first suite skips the rest of the suite and goes backto testing the expression
the for statement
the try statement
the try statement specifies exception handlers andor cleanup codefor a group of statements   trystmt   try1stmt  try2stmt   try1stmt  try  suite                 except expression as identifier  suite                 else  suite                 finally  suite   try2stmt  try  suite                 finally  suitethe except clauses specify one or more exception handlers
 when noexception occurs in the try clause no exception handler isexecuted
 when an exception occurs in the try suite a search for anexception handler is started
  this search inspects the except clausesin turn until one is found that matches the exception
  an expressionless except clause if present must be last it matches anyexception
  for an except clause with an expression that expressionis evaluated and the clause matches the exception if the resultingobject is compatible with the exception
  an object is compatiblewith an exception if it is the class or a base class of the exceptionobject or a tuple containing an item compatible with the exception
if no except clause matches the exception the search for an exceptionhandler continues in the surrounding code and on the invocation stack
1if the evaluation of an expression in the header of an except clauseraises an exception the original search for a handler is canceled anda search starts for the new exception in the surrounding code and onthe call stack it is treated as if the entire try statement raisedthe exception
when a matching except clause is found the exception is assigned tothe target specified after the as keyword in that except clause ifpresent and the except clauses suite is executed
  all exceptclauses must have an executable block
  when the end of this block isreached execution continues normally after the entire try statement
this means that if two nested handlers exist for the same exceptionand the exception occurs in the try clause of the inner handler theouter handler will not handle the exception
when an exception has been assigned using as target it is clearedat the end of the except clause
  this is as if   except e as n       foowas translated to   except e as n       try           foo       finally           del nthis means the exception must be assigned to a different name to beable to refer to it after the except clause
  exceptions are clearedbecause with the traceback attached to them they form a referencecycle with the stack frame keeping all locals in that frame aliveuntil the next garbage collection occurs
before an except clauses suite is executed details about theexception are stored in the sys module and can be accessed viasys
excinfo
excinfo returns a 3tuple consisting of theexception class the exception instance and a traceback object seesection the standard type hierarchy identifying the point in theprogram where the exception occurred
  sys
excinfo values arerestored to their previous values before the call when returningfrom a function that handled an exception
the optional else clause is executed if the control flow leaves thetry suite no exception was raised and no return continue orbreak statement was executed
  exceptions in the else clause arenot handled by the preceding except clauses
if finally is present it specifies a cleanup handler
  the tryclause is executed including any except and else clauses
  if anexception occurs in any of the clauses and is not handled theexception is temporarily saved
 the finally clause is executed
  ifthere is a saved exception it is reraised at the end of the finallyclause
  if the finally clause raises another exception the savedexception is set as the context of the new exception
 if the finallyclause executes a return break or continue statement the savedexception is discarded    def f   
    f   42the exception information is not available to the program duringexecution of the finally clause
when a return break or continue statement is executed in thetry suite of a try
finally statement the finally clause isalso executed on the way out
the return value of a function is determined by the last returnstatement executed
  since the finally clause always executes areturn statement executed in the finally clause will always be thelast one executed    def foo   
    foo   finallyadditional information on exceptions can be found in sectionexceptions and information on using the raise statement to generateexceptions may be found in section the raise statement
changed in version 3
8 prior to python 3
8 a continue statementwas illegal in the finally clause due to a problem with theimplementation
the with statement
the with statement is used to wrap the execution of a block withmethods defined by a context manager see section with statementcontext managers
 this allows common try
finallyusage patterns to be encapsulated for convenient reuse
   withstmt  with withitem  withitem  suite   withitem  expression as targetthe execution of the with statement with one item proceeds asfollows1
 the context expression the expression given in the withitem is   evaluated to obtain a context manager
 the context managers enter is loaded for later use
 the context managers exit is loaded for later use
 the context managers enter method is invoked
 if a target was included in the with statement the return value   from enter is assigned to it
   note     the with statement guarantees that if the enter method     returns without an error then exit will always be     called
 thus if an error occurs during the assignment to the     target list it will be treated the same as an error occurring     within the suite would be
 see step 6 below
 the suite is executed
 the context managers exit method is invoked
  if an   exception caused the suite to be exited its type value and   traceback are passed as arguments to exit
 otherwise three   none arguments are supplied
   if the suite was exited due to an exception and the return value   from the exit method was false the exception is reraised
   if the return value was true the exception is suppressed and   execution continues with the statement following the with   statement
   if the suite was exited for any reason other than an exception the   return value from exit is ignored and execution proceeds   at the normal location for the kind of exit that was taken
the following code   with expression as target       suiteis semantically equivalent to   manager  expression   enter  typemanager
excinfo           raise   finally       if not hitexcept           exitmanager none none nonewith more than one item the context managers are processed as ifmultiple with statements were nested   with a as a b as b       suiteis semantically equivalent to   with a as a       with b as b           suitechanged in version 3
1 support for multiple context expressions
see also  pep 343  the with statement     the specification background and examples for the python with     statement
function definitions
class definitions
a class definition defines a class object see section the standardtype hierarchy   classdef     decorators class classname inheritance  suite   inheritance   argumentlist    classname    identifiera class definition is an executable statement
  the inheritance listusually gives a list of base classes see metaclasses for moreadvanced uses so each item in the list should evaluate to a classobject which allows subclassing
  classes without an inheritance listinherit by default from the base class object hence   class foo       passis equivalent to   class fooobject       passthe classs suite is then executed in a new execution frame seenaming and binding using a newly created local namespace and theoriginal global namespace
 usually the suite contains mostlyfunction definitions
  when the classs suite finishes execution itsexecution frame is discarded but its local namespace is saved
 3 aclass object is then created using the inheritance list for the baseclasses and the saved local namespace for the attribute dictionary
the class name is bound to this class object in the original localnamespace
the order in which attributes are defined in the class body ispreserved in the new classs dict
  note that this is reliableonly right after the class is created and only for classes that weredefined using the definition syntax
class creation can be customized heavily using metaclasses
classes can also be decorated just like when decorating functions   f1arg   f2   class foo passis roughly equivalent to   class foo pass   foo  f1argf2foothe evaluation rules for the decorator expressions are the same as forfunction decorators
  the result is then bound to the class name
changed in version 3
9 classes may be decorated with any validassignmentexpression
 previously the grammar was much morerestrictive see pep 614 for details
programmers note variables defined in the class definition areclass attributes they are shared by instances
  instance attributescan be set in a method with self
name  value
  both class andinstance attributes are accessible through the notation self
nameand an instance attribute hides a class attribute with the same namewhen accessed in this way
  class attributes can be used as defaultsfor instance attributes but using mutable values there can lead tounexpected results
  descriptors can be used to create instancevariables with different implementation details
see also  pep 3115  metaclasses in python 3000     the proposal that changed the declaration of metaclasses to the     current syntax and the semantics for how classes with     metaclasses are constructed
  pep 3129  class decorators     the proposal that added class decorators
  function and method     decorators were introduced in pep 318
coroutines
new in version 3
5
coroutine function definition
asyncfuncdef  decorators async def funcname  parameterlist                       expression  suiteexecution of python coroutines can be suspended and resumed at manypoints see coroutine
  inside the body of a coroutine functionawait and async identifiers become reserved keywords awaitexpressions async for and async with can only be used incoroutine function bodies
functions defined with async def syntax are always coroutinefunctions even if they do not contain await or async keywords
it is a syntaxerror to use a yield from expression inside the bodyof a coroutine function
an example of a coroutine function   async def funcparam1 param2       dostuff       await somecoroutine
the async for statement
asyncforstmt  async forstmtan asynchronous iterable is able to call asynchronous code in itsiter implementation and asynchronous iterator can callasynchronous code in its next method
the async for statement allows convenient iteration overasynchronous iterators
the following code   async for target in iter       suite   else       suite2is semantically equivalent to   iter  iter   iter  typeiter
anextiter       except stopasynciteration           running  false       else           suite   else       suite2see also aiter and anext for details
it is a syntaxerror to use an async for statement outside the bodyof a coroutine function
the async with statement
asyncwithstmt  async withstmtan asynchronous context manager is a context manager that is ableto suspend execution in its enter and exit methods
the following code   async with expression as target       suiteis semantically equivalent to   manager  expression   aenter  typemanager
excinfo           raise   finally       if not hitexcept           await aexitmanager none none nonesee also aenter and aexit for details
it is a syntaxerror to use an async with statement outside thebody of a coroutine function
see also  pep 492  coroutines with async and await syntax     the proposal that made coroutines a proper standalone concept in     python and added supporting syntax
 footnotes 1 the exception is propagated to the invocation stack unless there    is a finally clause which happens to raise another exception
    that new exception causes the old one to be lost
2 a string literal appearing as the first statement in the function    body is transformed into the functions doc attribute and    therefore the functions docstring
3 a string literal appearing as the first statement in the class    body is transformed into the namespaces doc item and    therefore the classs docstring
lexical analysis
line structure
a python program is divided into a number of logical lines
logical lines
physical lines
a physical line is a sequence of characters terminated by an endofline sequence
  in source files and strings any of the standardplatform line termination sequences can be used  the unix form usingascii lf linefeed the windows form using the ascii sequence cr lfreturn followed by linefeed or the old macintosh form using theascii cr return character
  all of these forms can be used equallyregardless of platform
 the end of input also serves as an implicitterminator for the final physical line
when embedding python source code strings should be passed to pythonapis using the standard c conventions for newline characters the ncharacter representing ascii lf is the line terminator
comments
a comment starts with a hash character  that is not part of astring literal and ends at the end of the physical line
  a commentsignifies the end of the logical line unless the implicit line joiningrules are invoked
 comments are ignored by the syntax
encoding declarations
if a comment in the first or second line of the python script matchesthe regular expression codingsw
 this comment isprocessed as an encoding declaration the first group of thisexpression names the encoding of the source code file
 the encodingdeclaration must appear on a line of its own
 if it is the secondline the first line must also be a commentonly line
 the recommendedforms of an encoding expression are     coding encodingname which is recognized also by gnu emacs and    vimfileencodingencodingnamewhich is recognized by bram moolenaars vim
if no encoding declaration is found the default encoding is utf8
in addition if the first bytes of the file are the utf8 byteordermark bxefxbbxbf the declared file encoding is utf8 this issupported among others by microsofts notepad
if an encoding is declared the encoding name must be recognized bypython
 the encoding is used for all lexical analysis includingstring literals comments and identifiers
explicit line joining
implicit line joining
expressions in parentheses square brackets or curly braces can besplit over more than one physical line without using backslashes
 forexample   monthnames  januari februari maart       these are the                  april   mei      juni        dutch names                  juli    augustus september   for the months                  oktober november december    of the yearimplicitly continued lines can carry comments
  the indentation of thecontinuation lines is not important
  blank continuation lines areallowed
 there is no newline token between implicit continuationlines
  implicitly continued lines can also occur within triplequotedstrings see below in that case they cannot carry comments
blank lines
indentation
leading whitespace spaces and tabs at the beginning of a logicalline is used to compute the indentation level of the line which inturn is used to determine the grouping of statements
tabs are replaced from left to right by one to eight spaces suchthat the total number of characters up to and including thereplacement is a multiple of eight this is intended to be the samerule as used by unix
  the total number of spaces preceding the firstnonblank character then determines the lines indentation
indentation cannot be split over multiple physical lines usingbackslashes the whitespace up to the first backslash determines theindentation
indentation is rejected as inconsistent if a source file mixes tabsand spaces in a way that makes the meaning dependent on the worth of atab in spaces a taberror is raised in that case
crossplatform compatibility note because of the nature of texteditors on nonunix platforms it is unwise to use a mixture of spacesand tabs for the indentation in a single source file
  it should alsobe noted that different platforms may explicitly limit the maximumindentation level
a formfeed character may be present at the start of the line it willbe ignored for the indentation calculations above
  formfeedcharacters occurring elsewhere in the leading whitespace have anundefined effect for instance they may reset the space count tozero
the indentation levels of consecutive lines are used to generateindent and dedent tokens using a stack as follows
before the first line of the file is read a single zero is pushed onthe stack this will never be popped off again
  the numbers pushed onthe stack will always be strictly increasing from bottom to top
  atthe beginning of each logical line the lines indentation level iscompared to the top of the stack
 if it is equal nothing happens
 ifit is larger it is pushed on the stack and one indent token isgenerated
  if it is smaller it must be one of the numbersoccurring on the stack all numbers on the stack that are larger arepopped off and for each number popped off a dedent token isgenerated
  at the end of the file a dedent token is generated foreach number remaining on the stack that is larger than zero
here is an example of a correctly though confusingly indented pieceof python code   def perml            compute the list of all permutations of l       if lenl  1                     return l       r         for i in rangelenl                s  li  li1                p  perms                for x in p                 r
appendlii1  x       return rthe following example shows various indentation errors    def perml                        error first line indented   for i in rangelenl              error not indented       s  li  li1           p  permli  li1    error unexpected indent           for x in p                   r
appendlii1  x               return r                 error inconsistent dedentactually the first three errors are detected by the parser only thelast error is found by the lexical analyzer  the indentation ofreturn r does not match a level popped off the stack
whitespace between tokens
other tokens
besides newline indent and dedent the following categories of tokensexist identifiers keywords literals operators anddelimiters
 whitespace characters other than line terminatorsdiscussed earlier are not tokens but serve to delimit tokens
 whereambiguity exists a token comprises the longest possible string thatforms a legal token when read from left to right
identifiers and keywords
identifiers also referred to as names are described by thefollowing lexical definitions
the syntax of identifiers in python is based on the unicode standardannex uax31 with elaboration and changes as defined below see alsopep 3131 for further details
within the ascii range u0001
u007f the valid characters foridentifiers are the same as in python 2
x the uppercase and lowercaseletters a through z the underscore  and except for the firstcharacter the digits 0 through 9
0 introduces additional characters from outside the asciirange see pep 3131
  for these characters the classificationuses the version of the unicode character database as included in theunicodedata module
identifiers are unlimited in length
  case is significant
   identifier    xidstart xidcontinue   idstart      all characters in general categories lu ll lt lm lo nl the underscore and characters with the otheridstart property   idcontinue   all characters in idstart plus characters in the categories mn mc nd pc and others with the otheridcontinue property   xidstart     all characters in idstart whose nfkc normalization is in idstart xidcontinue   xidcontinue  all characters in idcontinue whose nfkc normalization is in idcontinuethe unicode category codes mentioned above stand for lu  uppercase letters ll  lowercase letters lt  titlecase letters lm  modifier letters lo  other letters nl  letter numbers mn  nonspacing marks mc  spacing combining marks nd  decimal numbers pc  connector punctuations otheridstart  explicit list of characters in proplist
txt to  support backwards compatibility otheridcontinue  likewiseall identifiers are converted into the normal form nfkc while parsingcomparison of identifiers is based on nfkc
a nonnormative html file listing all valid identifier characters forunicode 4
1 can be found athttpswww
keywords
reserved classes of identifiers
certain classes of identifiers besides keywords have specialmeanings
  these classes are identified by the patterns of leading andtrailing underscore characters   not imported by from module import 
  the special identifier    is used in the interactive interpreter to store the result of the   last evaluation it is stored in the builtins module
  when not   in interactive mode  has no special meaning and is not defined
   see section the import statement
   note     the name  is often used in conjunction with     internationalization refer to the documentation for the     gettext module for more information on this convention
   systemdefined names informally known as dunder names
 these   names are defined by the interpreter and its implementation   including the standard library
 current system names are   discussed in the special method names section and elsewhere
 more   will likely be defined in future versions of python
  any use of    names in any context that does not follow explicitly   documented use is subject to breakage without warning
   classprivate names
  names in this category when used within the   context of a class definition are rewritten to use a mangled form   to help avoid name clashes between private attributes of base and   derived classes
 see section identifiers names
literals
literals are notations for constant values of some builtin types
string and bytes literals
string literal concatenation
multiple adjacent string or bytes literals delimited by whitespacepossibly using different quoting conventions are allowed and theirmeaning is the same as their concatenation
  thus hello worldis equivalent to helloworld
  this feature can be used to reducethe number of backslashes needed to split long strings convenientlyacross long lines or even to add comments to parts of strings forexample   re
compileazaz        letter or underscore              azaz09    letter digit or underscore             note that this feature is defined at the syntactical level butimplemented at compile time
  the  operator must be used toconcatenate string expressions at run time
  also note that literalconcatenation can use different quoting styles for each componenteven mixing raw strings and triple quoted strings and formattedstring literals may be concatenated with plain string literals
formatted string literals
numeric literals
there are three types of numeric literals integers floating pointnumbers and imaginary numbers
  there are no complex literalscomplex numbers can be formed by adding a real number and animaginary number
note that numeric literals do not include a sign a phrase like 1is actually an expression composed of the unary operator  and theliteral 1
integer literals
integer literals are described by the following lexical definitions   integer       decinteger  bininteger  octinteger  hexinteger   decinteger    nonzerodigit  digit  0  0   bininteger    0 b  b  bindigit   octinteger    0 o  o  octdigit   hexinteger    0 x  x  hexdigit   nonzerodigit  1
fthere is no limit for the length of integer literals apart from whatcan be stored in available memory
underscores are ignored for determining the numeric value of theliteral
  they can be used to group digits for enhanced readability
one underscore can occur between digits and after base specifierslike 0x
note that leading zeros in a nonzero decimal number are not allowed
this is for disambiguation with cstyle octal literals which pythonused before version 3
0
some examples of integer literals   7     2147483647                        0o177    0b100110111   3     79228162514264337593543950336     0o377    0xdeadbeef         100000000000                   0b11100101changed in version 3
6 underscores are now allowed for groupingpurposes in literals
floating point literals
floating point literals are described by the following lexicaldefinitions   floatnumber    pointfloat  exponentfloat   pointfloat     digitpart fraction  digitpart 
 digitpart   exponent       e  e    digitpartnote that the integer and exponent parts are always interpreted usingradix 10
 for example 077e010 is legal and denotes the same numberas 77e10
 the allowed range of floating point literals isimplementationdependent
  as in integer literals underscores aresupported for digit grouping
some examples of floating point literals   3
141593changed in version 3
6 underscores are now allowed for groupingpurposes in literals
imaginary literals
operators
the following tokens are operators                                                                                                                               
delimiters
the following tokens serve as delimiters in the grammar                                                       
                                                                                                 the period can also occur in floatingpoint and imaginary literals
  asequence of three periods has a special meaning as an ellipsisliteral
 the second half of the list the augmented assignmentoperators serve lexically as delimiters but also perform anoperation
the following printing ascii characters have special meaning as partof other tokens or are otherwise significant to the lexical analyzer                        the following printing ascii characters are not used in python
  theiroccurrence outside string literals and comments is an unconditionalerror                  footnotes 1 httpswww
the python language reference
this reference manual describes the syntax and core semantics of thelanguage
 it is terse but attempts to be exact and complete
 thesemantics of nonessential builtin object types and of the builtinfunctions and modules are described in the python standard library
for an informal introduction to the language see the python tutorial
for c or c programmers two additional manuals exist extending andembedding the python interpreter describes the highlevel picture ofhow to write a python extension module and the pythonc api referencemanual describes the interfaces available to cc programmers indetail
 introduction   1
 alternate implementations   1
 notation 2
 lexical analysis   2
 line structure   2
 other tokens   2
 identifiers and keywords   2
 literals   2
 operators   2
 delimiters 3
 data model   3
 objects values and types   3
 the standard type hierarchy   3
 special method names   3
 coroutines 4
 execution model   4
 structure of a program   4
 naming and binding   4
 exceptions 5
 the import system   5
 packages   5
 searching   5
 loading   5
 the path based finder   5
 replacing the standard import system   5
 package relative imports   5
 special considerations for main   5
 open issues   5
 references 6
 expressions   6
 arithmetic conversions   6
 atoms   6
 primaries   6
 await expression   6
 the power operator   6
 unary arithmetic and bitwise operations   6
 binary arithmetic operations   6
 shifting operations   6
 binary bitwise operations   6
 comparisons   6
 boolean operations   6
 assignment expressions   6
 conditional expressions   6
 lambdas   6
 expression lists   6
 evaluation order   6
 operator precedence 7
 simple statements   7
 expression statements   7
 assignment statements   7
 the assert statement   7
 the pass statement   7
 the del statement   7
 the return statement   7
 the yield statement   7
 the raise statement   7
 the break statement   7
 the continue statement   7
 the import statement   7
 the global statement   7
 the nonlocal statement 8
 compound statements   8
 the if statement   8
 the while statement   8
 the for statement   8
 the try statement   8
 the with statement   8
 function definitions   8
 class definitions   8
 coroutines 9
 toplevel components   9
 complete python programs   9
 file input   9
 interactive input   9
 expression input 10
 full grammar specification
data model
objects values and types
the standard type hierarchy
special method names
a class can implement certain operations that are invoked by specialsyntax such as arithmetic operations or subscripting and slicing bydefining methods with special names
 this is pythons approach tooperator overloading allowing classes to define their own behaviorwith respect to language operators
  for instance if a class definesa method named getitem and x is an instance of this classthen xi is roughly equivalent to typex
except where mentioned attempts to execute an operation raise anexception when no appropriate method is defined typicallyattributeerror or typeerror
setting a special method to none indicates that the correspondingoperation is not available
  for example if a class sets iterto none the class is not iterable so calling iter on itsinstances will raise a typeerror without falling back togetitem
 2when implementing a class that emulates any builtin type it isimportant that the emulation only be implemented to the degree that itmakes sense for the object being modelled
  for example somesequences may work well with retrieval of individual elements butextracting a slice may not make sense
  one example of this is thenodelist interface in the w3cs document object model
basic customization
customizing attribute access
customizing class creation
customizing instance and subclass checks
the following methods are used to override the default behavior of theisinstance and issubclass builtin functions
in particular the metaclass abc
abcmeta implements these methods inorder to allow the addition of abstract base classes abcs asvirtual base classes to any class or type including builtintypes including other abcs
instancecheckself instance   return true if instance should be considered a direct or   indirect instance of class
 if defined called to implement   isinstanceinstance class
subclasscheckself subclass   return true if subclass should be considered a direct or   indirect subclass of class
  if defined called to implement   issubclasssubclass class
note that these methods are looked up on the type metaclass of aclass
  they cannot be defined as class methods in the actual class
this is consistent with the lookup of special methods that are calledon instances only in this case the instance is itself a class
see also  pep 3119  introducing abstract base classes     includes the specification for customizing isinstance and     issubclass behavior through instancecheck and     subclasscheck with motivation for this functionality in     the context of adding abstract base classes see the abc     module to the language
emulating generic types
one can implement the generic class syntax as specified by pep 484for example listint by defining a special methodclassmethod object
classgetitemcls key   return an object representing the specialization of a generic class   by type arguments found in key
this method is looked up on the class object itself and when definedin the class body this method is implicitly a class method
  notethis mechanism is primarily reserved for use with static type hintsother usage is discouraged
see also  pep 560  core support for typing module and generic types
emulating callable objects
   called when the instance is called as a function if this method   is defined xarg1 arg2 
 roughly translates to   typex
callx arg1 
emulating container types
the following methods can be defined to implement container objects
containers usually are sequences such as lists or tuples or mappingslike dictionaries but can represent other containers as well
  thefirst set of methods is used either to emulate a sequence or toemulate a mapping the difference is that for a sequence theallowable keys should be the integers k for which 0  k  n wheren is the length of the sequence or slice objects which define arange of items
  it is also recommended that mappings provide themethods keys values items get clearsetdefault pop popitem copy and updatebehaving similar to those for pythons standard dictionary objects
the collections
abc module provides a mutablemapping abstract baseclass to help create those methods from a base set of getitemsetitem delitem and keys
 mutable sequencesshould provide methods append count index extendinsert pop remove reverse and sort like pythonstandard list objects
  finally sequence types should implementaddition meaning concatenation and multiplication meaningrepetition by defining the methods add raddiadd mul rmul and imul describedbelow they should not define other numerical operators
  it isrecommended that both mappings and sequences implement thecontains method to allow efficient use of the in operatorfor mappings in should search the mappings keys for sequences itshould search through the values
  it is further recommended that bothmappings and sequences implement the iter method to allowefficient iteration through the container for mappings itershould iterate through the objects keys for sequences it shoulditerate through the values
lenself   called to implement the builtin function len
  should return   the length of the object an integer  0
  also an object that   doesnt define a bool method and whose len method   returns zero is considered to be false in a boolean context
   cpython implementation detail in cpython the length is   required to be at most sys
 if the length is larger than   sys
maxsize some features such as len may raise   overflowerror
  to prevent raising overflowerror by truth value   testing an object must define a bool method
lengthhintself   called to implement operator
 should return an   estimated length for the object which may be greater or less than   the actual length
 the length must be an integer  0
 the   return value may also be notimplemented which is treated the   same as if the lengthhint method didnt exist at all
 this   method is purely an optimization and is never required for   correctness
   new in version 3
4
note  slicing is done exclusively with the following three methods
  a  call like     a12  b  is translated to     aslice1 2 none  b  and so forth
  missing slice items are always filled in with none
getitemself key   called to implement evaluation of selfkey
 for sequence types   the accepted keys should be integers and slice objects
  note that   the special interpretation of negative indexes if the class wishes   to emulate a sequence type is up to the getitem method
 if   key is of an inappropriate type typeerror may be raised if of   a value outside the set of indexes for the sequence after any   special interpretation of negative values indexerror should be   raised
 for mapping types if key is missing not in the   container keyerror should be raised
   note     for loops expect that an indexerror will be raised for     illegal indexes to allow proper detection of the end of the     sequence
setitemself key value   called to implement assignment to selfkey
  same note as for   getitem
  this should only be implemented for mappings if   the objects support changes to the values for keys or if new keys   can be added or for sequences if elements can be replaced
  the   same exceptions should be raised for improper key values as for   the getitem method
delitemself key   called to implement deletion of selfkey
  same note as for   getitem
  this should only be implemented for mappings if   the objects support removal of keys or for sequences if elements   can be removed from the sequence
  the same exceptions should be   raised for improper key values as for the getitem method
missingself key   called by dict
getitem to implement selfkey for dict   subclasses when key is not in the dictionary
iterself   this method is called when an iterator is required for a container
   this method should return a new iterator object that can iterate   over all the objects in the container
  for mappings it should   iterate over the keys of the container
   iterator objects also need to implement this method they are   required to return themselves
  for more information on iterator   objects see iterator types
reversedself   called if present by the reversed builtin to implement   reverse iteration
  it should return a new iterator object that   iterates over all the objects in the container in reverse order
   if the reversed method is not provided the reversed   builtin will fall back to using the sequence protocol len   and getitem
  objects that support the sequence protocol   should only provide reversed if they can provide an   implementation that is more efficient than the one provided by   reversed
the membership test operators in and not in are normallyimplemented as an iteration through a container
 however containerobjects can supply the following special method with a more efficientimplementation which also does not require the object be iterable
containsself item   called to implement membership test operators
  should return true   if item is in self false otherwise
  for mapping objects this   should consider the keys of the mapping rather than the values or   the keyitem pairs
   for objects that dont define contains the membership test   first tries iteration via iter then the old sequence   iteration protocol via getitem see this section in the   language reference
emulating numeric types
with statement context managers
special method lookup
coroutines
awaitable objects
an awaitable object generally implements an await method
coroutine objects returned from async def functions are awaitable
note  the generator iterator objects returned from generators decorated  with types
coroutine or asyncio
coroutine are also  awaitable but they do not implement await
awaitself   must return an iterator
  should be used to implement awaitable   objects
  for instance asyncio
future implements this method to   be compatible with the await expression
new in version 3
5
see also  pep 492 for additional information about awaitable objects
coroutine objects
coroutine objects are awaitable objects
 a coroutines executioncan be controlled by calling await and iterating over theresult
  when the coroutine has finished executing and returns theiterator raises stopiteration and the exceptions value attributeholds the return value
  if the coroutine raises an exception it ispropagated by the iterator
  coroutines should not directly raiseunhandled stopiteration exceptions
coroutines also have the methods listed below which are analogous tothose of generators see generatoriterator methods
  however unlikegenerators coroutines do not directly support iteration
changed in version 3
2 it is a runtimeerror to await on acoroutine more than once
sendvalue   starts or resumes execution of the coroutine
  if value is   none this is equivalent to advancing the iterator returned by   await
  if value is not none this method delegates to   the send method of the iterator that caused the coroutine to   suspend
  the result return value stopiteration or other   exception is the same as when iterating over the await   return value described above
throwtype value traceback   raises the specified exception in the coroutine
  this method   delegates to the throw method of the iterator that caused the   coroutine to suspend if it has such a method
  otherwise the   exception is raised at the suspension point
  the result return   value stopiteration or other exception is the same as when   iterating over the await return value described above
  if   the exception is not caught in the coroutine it propagates back to   the caller
close   causes the coroutine to clean itself up and exit
  if the coroutine   is suspended this method first delegates to the close method   of the iterator that caused the coroutine to suspend if it has   such a method
  then it raises generatorexit at the suspension   point causing the coroutine to immediately clean itself up
   finally the coroutine is marked as having finished executing even   if it was never started
   coroutine objects are automatically closed using the above process   when they are about to be destroyed
asynchronous iterators
an asynchronous iterator can call asynchronous code in itsanext method
asynchronous iterators can be used in an async for statement
aiterself   must return an asynchronous iterator object
anextself   must return an awaitable resulting in a next value of the   iterator
  should raise a stopasynciteration error when the   iteration is over
an example of an asynchronous iterable object   class reader       async def readlineself           
readline           if val  b               raise stopasynciteration           return valnew in version 3
5
changed in version 3
7 prior to python 3
7 aiter could returnan awaitable that would resolve to an asynchronousiterator
starting with python 3
7 aiter must return anasynchronous iterator object
  returning anything else will result ina typeerror error
asynchronous context managers
an asynchronous context manager is a context manager that is ableto suspend execution in its aenter and aexit methods
asynchronous context managers can be used in an async withstatement
aenterself   semantically similar to enter the only difference being   that it must return an awaitable
aexitself exctype excvalue traceback   semantically similar to exit the only difference being   that it must return an awaitable
an example of an asynchronous context manager class   class asynccontextmanager       async def aenterself           await logentering context       async def aexitself exctype exc tb           await logexiting contextnew in version 3
5
 footnotes 1 it is possible in some cases to change an objects type under    certain controlled conditions
 it generally isnt a good idea    though since it can lead to some very strange behaviour if it is    handled incorrectly
2 the hash iter reversed and    contains methods have special handling for this others    will still raise a typeerror but may do so by relying on the    behavior that none is not callable
3 does not support here means that the class has no such method    or the method returns notimplemented
  do not set the method to    none if you want to force fallback to the right operands    reflected method—that will instead have the opposite effect of    explicitly blocking such fallback
4 for operands of the same type it is assumed that if the non    reflected method  such as add  fails then the overall    operation is not supported which is why the reflected method is    not called
execution model
structure of a program
a python program is constructed from code blocks
 a block is a pieceof python program text that is executed as a unit
 the following areblocks a module a function body and a class definition
 eachcommand typed interactively is a block
  a script file a file givenas standard input to the interpreter or specified as a command lineargument to the interpreter is a code block
  a script command acommand specified on the interpreter command line with the coption is a code block
 a module run as a top level script as modulemain from the command line using a m argument is also a codeblock
 the string argument passed to the builtin functions evaland exec is a code block
a code block is executed in an execution frame
  a frame containssome administrative information used for debugging and determineswhere and how execution continues after the code blocks execution hascompleted
naming and binding
binding of names
names refer to objects
  names are introduced by name bindingoperations
the following constructs bind names formal parameters to functionsimport statements class and function definitions these bind theclass or function name in the defining block and targets that areidentifiers if occurring in an assignment for loop header or afteras in a with statement or except clause
 the import statementof the form from 
 import  binds all names defined in theimported module except those beginning with an underscore
  this formmay only be used at the module level
a target occurring in a del statement is also considered bound forthis purpose though the actual semantics are to unbind the name
each assignment or import statement occurs within a block defined by aclass or function definition or at the module level the toplevelcode block
if a name is bound in a block it is a local variable of that blockunless declared as nonlocal or global
  if a name is bound at themodule level it is a global variable
  the variables of the modulecode block are local and global
  if a variable is used in a codeblock but not defined there it is a free variable
each occurrence of a name in the program text refers to the bindingof that name established by the following name resolution rules
resolution of names
builtins and restricted execution
cpython implementation detail users should not touchbuiltins it is strictly an implementation detail
  userswanting to override values in the builtins namespace should importthe builtins module and modify its attributes appropriately
the builtins namespace associated with the execution of a code blockis actually found by looking up the name builtins in its globalnamespace this should be a dictionary or a module in the latter casethe modules dictionary is used
  by default when in the mainmodule builtins is the builtin module builtins when in anyother module builtins is an alias for the dictionary of thebuiltins module itself
interaction with dynamic features
name resolution of free variables occurs at runtime not at compiletime
 this means that the following code will print 42   i  10   def f       printi   i  42   fthe eval and exec functions do not have access to the fullenvironment for resolving names
  names may be resolved in the localand global namespaces of the caller
  free variables are not resolvedin the nearest enclosing namespace but in the global namespace
  1the exec and eval functions have optional arguments tooverride the global and local namespace
  if only one namespace isspecified it is used for both
exceptions
exceptions are a means of breaking out of the normal flow of controlof a code block in order to handle errors or other exceptionalconditions
  an exception is raised at the point where the error isdetected it may be handled by the surrounding code block or by anycode block that directly or indirectly invoked the code block wherethe error occurred
the python interpreter raises an exception when it detects a runtimeerror such as division by zero
  a python program can alsoexplicitly raise an exception with the raise statement
 exceptionhandlers are specified with the try 
 except statement
  thefinally clause of such a statement can be used to specify cleanupcode which does not handle the exception but is executed whether anexception occurred or not in the preceding code
python uses the termination model of error handling an exceptionhandler can find out what happened and continue execution at an outerlevel but it cannot repair the cause of the error and retry thefailing operation except by reentering the offending piece of codefrom the top
when an exception is not handled at all the interpreter terminatesexecution of the program or returns to its interactive main loop
  ineither case it prints a stack traceback except when the exception issystemexit
exceptions are identified by class instances
  the except clause isselected depending on the class of the instance it must reference theclass of the instance or a base class thereof
  the instance can bereceived by the handler and can carry additional information about theexceptional condition
note  exception messages are not part of the python api
  their contents  may change from one version of python to the next without warning  and should not be relied on by code which will run under multiple  versions of the interpreter
see also the description of the try statement in section the trystatement and raise statement in section the raise statement
 footnotes 1 this limitation occurs because the code that is executed by these    operations is not available at the time the module is compiled
full grammar specification
the import system
python code in one module gains access to the code in another moduleby the process of importing it
  the import statement is the mostcommon way of invoking the import machinery but it is not the onlyway
  functions such as importlib
importmodule and builtinimport can also be used to invoke the import machinery
the import statement combines two operations it searches for thenamed module then it binds the results of that search to a name inthe local scope
  the search operation of the import statement isdefined as a call to the import function with the appropriatearguments
 the return value of import is used to perform thename binding operation of the import statement
  see the importstatement for the exact details of that name binding operation
a direct call to import performs only the module search andif found the module creation operation
  while certain sideeffectsmay occur such as the importing of parent packages and the updatingof various caches including sys
modules only the importstatement performs a name binding operation
when an import statement is executed the standard builtinimport function is called
 other mechanisms for invoking theimport system such as importlib
importmodule may choose tobypass import and use their own solutions to implement importsemantics
when a module is first imported python searches for the module and iffound it creates a module object 1 initializing it
  if the namedmodule cannot be found a modulenotfounderror is raised
  pythonimplements various strategies to search for the named module when theimport machinery is invoked
  these strategies can be modified andextended by using various hooks described in the sections below
changed in version 3
3 the import system has been updated to fullyimplement the second phase of pep 302
 there is no longer anyimplicit import machinery  the full import system is exposed throughsys
metapath
 in addition native namespace package support hasbeen implemented see pep 420
importlib
the importlib module provides a rich api for interacting with theimport system
  for example importlib
importmodule provides arecommended simpler api than builtin import for invoking theimport machinery
  refer to the importlib library documentation foradditional detail
packages
python has only one type of module object and all modules are of thistype regardless of whether the module is implemented in python c orsomething else
  to help organize modules and provide a naminghierarchy python has a concept of packages
you can think of packages as the directories on a file system andmodules as files within directories but dont take this analogy tooliterally since packages and modules need not originate from the filesystem
  for the purposes of this documentation well use thisconvenient analogy of directories and files
  like file systemdirectories packages are organized hierarchically and packages maythemselves contain subpackages as well as regular modules
its important to keep in mind that all packages are modules but notall modules are packages
  or put another way packages are just aspecial kind of module
  specifically any module that contains apath attribute is considered a package
all modules have a name
  subpackage names are separated from theirparent package name by a dot akin to pythons standard attributeaccess syntax
  thus you might have a module called sys and apackage called email which in turn has a subpackage calledemail
mime and a module within that subpackage calledemail
text
regular packages
python defines two types of packages regular packages andnamespace packages
  regular packages are traditional packages asthey existed in python 3
2 and earlier
 a regular package is typicallyimplemented as a directory containing an init
py file
  when aregular package is imported this init
py file is implicitlyexecuted and the objects it defines are bound to names in thepackages namespace
  the init
py file can contain the samepython code that any other module can contain and python will addsome additional attributes to the module when it is imported
for example the following file system layout defines a top levelparent package with three subpackages   parent       init
pyimporting parent
one will implicitly execute parentinit
pyand parentoneinit
  subsequent imports of parent
two orparent
three will execute parenttwoinit
py andparentthreeinit
py respectively
namespace packages
a namespace package is a composite of various portions where eachportion contributes a subpackage to the parent package
  portions mayreside in different locations on the file system
  portions may alsobe found in zip files on the network or anywhere else that pythonsearches during import
  namespace packages may or may not corresponddirectly to objects on the file system they may be virtual modulesthat have no concrete representation
namespace packages do not use an ordinary list for their pathattribute
 they instead use a custom iterable type which willautomatically perform a new search for package portions on the nextimport attempt within that package if the path of their parent packageor sys
path for a top level package changes
with namespace packages there is no parentinit
py file
  infact there may be multiple parent directories found during importsearch where each one is provided by a different portion
  thusparentone may not be physically located next to parenttwo
  inthis case python will create a namespace package for the toplevelparent package whenever it or one of its subpackages is imported
see also pep 420 for the namespace package specification
searching
the module cache
the first place checked during import search is sys
  thismapping serves as a cache of all modules that have been previouslyimported including the intermediate paths
  so if foo
baz waspreviously imported sys
modules will contain entries for foofoo
bar and foo
baz
  each key will have as its value thecorresponding module object
during import the module name is looked up in sys
modules and ifpresent the associated value is the module satisfying the import andthe process completes
  however if the value is none then amodulenotfounderror is raised
  if the module name is missingpython will continue searching for the module
modules is writable
  deleting a key may not destroy theassociated module as other modules may hold references to it but itwill invalidate the cache entry for the named module causing pythonto search anew for the named module upon its next import
 the key canalso be assigned to none forcing the next import of the module toresult in a modulenotfounderror
beware though as if you keep a reference to the module objectinvalidate its cache entry in sys
modules and then reimport thenamed module the two module objects will not be the same
 bycontrast importlib
reload will reuse the same module objectand simply reinitialise the module contents by rerunning the modulescode
finders and loaders
if the named module is not found in sys
modules then pythonsimport protocol is invoked to find and load the module
  this protocolconsists of two conceptual objects finders and loaders
 afinders job is to determine whether it can find the named moduleusing whatever strategy it knows about
 objects that implement both ofthese interfaces are referred to as importers  they returnthemselves when they find that they can load the requested module
python includes a number of default finders and importers
  the firstone knows how to locate builtin modules and the second knows how tolocate frozen modules
  a third default finder searches an importpath for modules
  the import path is a list of locations that mayname file system paths or zip files
  it can also be extended tosearch for any locatable resource such as those identified by urls
the import machinery is extensible so new finders can be added toextend the range and scope of module searching
finders do not actually load modules
  if they can find the namedmodule they return a module spec an encapsulation of the modulesimportrelated information which the import machinery then uses whenloading the module
the following sections describe the protocol for finders and loadersin more detail including how you can create and register new ones toextend the import machinery
changed in version 3
4 in previous versions of python findersreturned loaders directly whereas now they return module specswhich contain loaders
 loaders are still used during import but havefewer responsibilities
import hooks
the import machinery is designed to be extensible the primarymechanism for this are the import hooks
  there are two types ofimport hooks meta hooks and import path hooks
meta hooks are called at the start of import processing before anyother import processing has occurred other than sys
modules cachelook up
 this allows meta hooks to override sys
path processingfrozen modules or even builtin modules
  meta hooks are registeredby adding new finder objects to sys
metapath as described below
import path hooks are called as part of sys
path orpackage
path processing at the point where their associatedpath item is encountered
  import path hooks are registered by addingnew callables to sys
pathhooks as described below
the meta path
loading
if and when a module spec is found the import machinery will use itand the loader it contains when loading the module
  here is anapproximation of what happens during the loading portion of import   module  none   if spec
namenote the following details    if there is an existing module object with the given name in     sys
modules import will have already returned it
    the module will exist in sys
modules before the loader executes     the module code
  this is crucial because the module code may     directly or indirectly import itself adding it to     sys
modules beforehand prevents unbounded recursion in the     worst case and multiple loading in the best
    if loading fails the failing module  and only the failing     module  gets removed from sys
modules
  any module already in     the sys
modules cache and any module that was successfully     loaded as a sideeffect must remain in the cache
  this     contrasts with reloading where even the failing module is left in     sys
modules
    after the module is created but before execution the import     machinery sets the importrelated module attributes     initmoduleattrs in the pseudocode example above as     summarized in a later section
    module execution is the key moment of loading in which the     modules namespace gets populated
  execution is entirely     delegated to the loader which gets to decide what gets populated     and how
    the module created during loading and passed to execmodule may     not be the one returned at the end of import 2
changed in version 3
4 the import system has taken over theboilerplate responsibilities of loaders
  these were previouslyperformed by the importlib
loadmodule method
loaders
module loaders provide the critical function of loading moduleexecution
 the import machinery calls theimportlib
execmodule method with a single argumentthe module object to execute
  any value returned from execmoduleis ignored
loaders must satisfy the following requirements    if the module is a python module as opposed to a builtin module     or a dynamically loaded extension the loader should execute the     modules code in the modules global name space     module
dict
    if the loader cannot execute the module it should raise an     importerror although any other exception raised during     execmodule will be propagated
in many cases the finder and loader can be the same object in suchcases the findspec method would just return a spec with theloader set to self
module loaders may opt in to creating the module object during loadingby implementing a createmodule method
 it takes one argument themodule spec and returns the new module object to use during loading
createmodule does not need to set any attributes on the moduleobject
  if the method returns none the import machinery willcreate the new module itself
new in version 3
4 the createmodule method of loaders
changed in version 3
4 the loadmodule method was replaced byexecmodule and the import machinery assumed all the boilerplateresponsibilities of loading
for compatibility with existing loadersthe import machinery will use the loadmodule method of loaders ifit exists and the loader does not also implement execmodule
however loadmodule has been deprecated and loaders shouldimplement execmodule instead
the loadmodule method mustimplement all the boilerplate loading functionality described above inaddition to executing the module
  all the same constraints applywith some additional clarification    if there is an existing module object with the given name in     sys
modules the loader must use that existing module
     otherwise importlib
reload will not work correctly
  if     the named module does not exist in sys
modules the loader must     create a new module object and add it to sys
    the module must exist in sys
modules before the loader     executes the module code to prevent unbounded recursion or     multiple loading
    if loading fails the loader must remove any modules it has     inserted into sys
modules but it must remove only the     failing modules and only if the loader itself has loaded the     modules explicitly
changed in version 3
5 a deprecationwarning is raised whenexecmodule is defined but createmodule is not
changed in version 3
6 an importerror is raised whenexecmodule is defined but createmodule is not
submodules
module spec
importrelated module attributes
modulepath
module reprs
by default all modules have a usable repr however depending on theattributes set above and in the modules spec you can moreexplicitly control the repr of module objects
if the module has a spec spec the import machinery will tryto generate a repr from it
  if that fails or there is no spec theimport system will craft a default repr using whatever information isavailable on the module
  it will try to use the module
namemodule
file and module
loader as input into the reprwith defaults for whatever information is missing
here are the exact rules used    if the module has a spec attribute the information in the     spec is used to generate the repr
  the name loader     origin and haslocation attributes are consulted
    if the module has a file attribute this is used as part of     the modules repr
    if the module has no file but does have a loader that     is not none then the loaders repr is used as part of the     modules repr
    otherwise just use the modules name in the repr
changed in version 3
4 use of loader
modulerepr has beendeprecated and the module spec is now used by the import machinery togenerate a module repr
for backward compatibility with python 3
3 themodule repr will be generated by calling the loaders modulereprmethod if defined before trying either approach described above
however the method is deprecated
cached bytecode invalidation
before python loads cached bytecode from a 
pyc file it checkswhether the cache is uptodate with the source 
py file
 bydefault python does this by storing the sources lastmodifiedtimestamp and size in the cache file when writing it
 at runtime theimport system then validates the cache file by checking the storedmetadata in the cache file against the sources metadata
python also supports hashbased cache files which store a hash ofthe source files contents rather than its metadata
 there are twovariants of hashbased 
pyc files checked and unchecked
 forchecked hashbased 
pyc files python validates the cache file byhashing the source file and comparing the resulting hash with the hashin the cache file
 if a checked hashbased cache file is found to beinvalid python regenerates it and writes a new checked hashbasedcache file
 for unchecked hashbased 
pyc files python simplyassumes the cache file is valid if it exists
 hashbased 
pyc filesvalidation behavior may be overridden with the checkhashbasedpycs flag
changed in version 3
7 added hashbased 
pyc files
 previouslypython only supported timestampbased invalidation of bytecode caches
the path based finder
path entry finders
path entry finder protocol
in order to support imports of modules and initialized packages andalso to contribute portions to namespace packages path entry findersmust implement the findspec method
findspec takes two arguments the fully qualified name of themodule being imported and the optional target module
findspec returns a fully populated spec for the module
 this specwill always have loader set with one exception
to indicate to the import machinery that the spec represents anamespace portion the path entry finder setssubmodulesearchlocations to a list containing the portion
changed in version 3
4 findspec replaced findloader andfindmodule both of which are now deprecated but will be used iffindspec is not defined
older path entry finders may implementone of these two deprecated methods instead of findspec
  themethods are still respected for the sake of backward compatibility
however if findspec is implemented on the path entry finder thelegacy methods are ignored
findloader takes one argument thefully qualified name of the module being imported
  findloaderreturns a 2tuple where the first item is the loader and the seconditem is a namespace portion
for backwards compatibility with otherimplementations of the import protocol many path entry finders alsosupport the same traditional findmodule method that meta pathfinders support
 however path entry finder findmodule methods arenever called with a path argument they are expected to record theappropriate path information from the initial call to the pathhook
the findmodule method on path entry finders is deprecatedas it does not allow the path entry finder to contribute portions tonamespace packages
  if both findloader and findmodule existon a path entry finder the import system will always callfindloader in preference to findmodule
replacing the standard import system
the most reliable mechanism for replacing the entire import system isto delete the default contents of sys
metapath replacing thementirely with a custom meta path hook
if it is acceptable to only alter the behaviour of import statementswithout affecting other apis that access the import system thenreplacing the builtin import function may be sufficient
 thistechnique may also be employed at the module level to only alter thebehaviour of import statements within that module
to selectively prevent the import of some modules from a hook early onthe meta path rather than disabling the standard import systementirely it is sufficient to raise modulenotfounderror directlyfrom findspec instead of returning none
 the latter indicatesthat the meta path search should continue while raising an exceptionterminates it immediately
package relative imports
relative imports use leading dots
 a single leading dot indicates arelative import starting with the current package
 two or moreleading dots indicate a relative import to the parents of thecurrent package one level per dot after the first
 for example giventhe following package layout   package       init
pyin either subpackage1modulex
py or subpackage1init
py thefollowing are valid relative imports   from 
modulea import fooabsolute imports may use either the import  or from  import syntax but relative imports may only use the second form the reasonfor this is that   import xxx
zzzshould expose xxx
zzz as a usable expression but 
moduley isnot a valid expression
special considerations for main
the main module is a special case relative to pythons importsystem
  as noted elsewhere the main module is directlyinitialized at interpreter startup much like sys and builtins
however unlike those two it doesnt strictly qualify as a builtinmodule
  this is because the manner in which main is initializeddepends on the flags and other options with which the interpreter isinvoked
mainspec
depending on how main is initialized main
spec getsset appropriately or to none
when python is started with the m option spec is set to themodule spec of the corresponding module or package
 spec is alsopopulated when the main module is loaded as part of executing adirectory zipfile or other sys
path entry
in the remaining cases main
spec is set to none as thecode used to populate the main does not correspond directly withan importable module interactive prompt c option running from stdin running directly from a source or bytecode filenote that main
spec is always none in the last case evenif the file could technically be imported directly as a moduleinstead
 use the m switch if valid module metadata is desired inmain
note also that even when main corresponds with an importablemodule and main
spec is set accordingly theyre stillconsidered distinct modules
 this is due to the fact that blocksguarded by if name  main checks only execute when themodule is used to populate the main namespace and not duringnormal import
open issues
references
the import machinery has evolved considerably since pythons earlydays
  the original specification for packages is still available toread although some details have changed since the writing of thatdocument
the original specification for sys
metapath was pep 302 withsubsequent extension in pep 420
pep 420 introduced namespace packages for python 3
3
  pep420 also introduced the findloader protocol as an alternativeto findmodule
pep 366 describes the addition of the package attribute forexplicit relative imports in main modules
pep 328 introduced absolute and explicit relative imports andinitially proposed name for semantics pep 366 wouldeventually specify for package
pep 338 defines executing modules as scripts
pep 451 adds the encapsulation of permodule import state in specobjects
  it also offloads most of the boilerplate responsibilitiesof loaders back onto the import machinery
  these changes allow thedeprecation of several apis in the import system and also addition ofnew methods to finders and loaders
 footnotes 1 see types
2 the importlib implementation avoids using the return value    directly
 instead it gets the module object by looking the module    name up in sys
modules
  the indirect effect of this is that an    imported module may replace itself in sys
modules
  this is    implementationspecific behavior that is not guaranteed to work in    other python implementations
3 in legacy code it is possible to find instances of    imp
nullimporter in the sys
pathimportercache
  it is    recommended that code be changed to use none instead
  see    porting python code for more details
simple statements
a simple statement is comprised within a single logical line
 severalsimple statements may occur on a single line separated by semicolons
the syntax for simple statements is   simplestmt  expressionstmt                    assertstmt                    assignmentstmt                    augmentedassignmentstmt                    annotatedassignmentstmt                    passstmt                    delstmt                    returnstmt                    yieldstmt                    raisestmt                    breakstmt                    continuestmt                    importstmt                    futurestmt                    globalstmt                    nonlocalstmt
expression statements
expression statements are used mostly interactively to compute andwrite a value or usually to call a procedure a function thatreturns no meaningful result in python procedures return the valuenone
  other uses of expression statements are allowed andoccasionally useful
  the syntax for an expression statement is   expressionstmt  starredexpressionan expression statement evaluates the expression list which may be asingle expression
in interactive mode if the value is not none it is converted to astring using the builtin repr function and the resulting stringis written to standard output on a line by itself except if theresult is none so that procedure calls do not cause any output

assignment statements
assignment statements are used to rebind names to values and tomodify attributes or items of mutable objects   assignmentstmt  targetlist  starredexpression  yieldexpression   targetlist      target  target    target           identifier                targetlist                 targetlist                attributeref               subscription               slicing                targetsee section primaries for the syntax definitions for attributerefsubscription and slicing
an assignment statement evaluates the expression list remember thatthis can be a single expression or a commaseparated list the latteryielding a tuple and assigns the single resulting object to each ofthe target lists from left to right
assignment is defined recursively depending on the form of the targetlist
 when a target is part of a mutable object an attributereference subscription or slicing the mutable object mustultimately perform the assignment and decide about its validity andmay raise an exception if the assignment is unacceptable
  the rulesobserved by various types and the exceptions raised are given with thedefinition of the object types see section the standard typehierarchy
assignment of an object to a target list optionally enclosed inparentheses or square brackets is recursively defined as follows
 if the target list is a single target with no trailing comma  optionally in parentheses the object is assigned to that target
 else the object must be an iterable with the same number of items  as there are targets in the target list and the items are assigned  from left to right to the corresponding targets
   if the target list contains one target prefixed with an asterisk    called a starred target the object must be an iterable with at    least as many items as there are targets in the target list minus    one
  the first items of the iterable are assigned from left to    right to the targets before the starred target
  the final items    of the iterable are assigned to the targets after the starred    target
  a list of the remaining items in the iterable is then    assigned to the starred target the list can be empty
   else the object must be an iterable with the same number of items    as there are targets in the target list and the items are    assigned from left to right to the corresponding targets
assignment of an object to a single target is recursively defined asfollows
 if the target is an identifier name   if the name does not occur in a global or nonlocal statement    in the current code block the name is bound to the object in the    current local namespace
   otherwise the name is bound to the object in the global namespace    or the outer namespace determined by nonlocal respectively
  the name is rebound if it was already bound
  this may cause the  reference count for the object previously bound to the name to reach  zero causing the object to be deallocated and its destructor if it  has one to be called
 if the target is an attribute reference the primary expression in  the reference is evaluated
  it should yield an object with  assignable attributes if this is not the case typeerror is  raised
  that object is then asked to assign the assigned object to  the given attribute if it cannot perform the assignment it raises  an exception usually but not necessarily attributeerror
  note if the object is a class instance and the attribute reference  occurs on both sides of the assignment operator the righthand side  expression a
x can access either an instance attribute or if no  instance attribute exists a class attribute
  the lefthand side  target a
x is always set as an instance attribute creating it if  necessary
  thus the two occurrences of a
x do not necessarily  refer to the same attribute if the righthand side expression  refers to a class attribute the lefthand side creates a new  instance attribute as the target of the assignment     class cls         x  3              class variable     inst  cls     inst
x as 3  this description does not necessarily apply to descriptor  attributes such as properties created with property
 if the target is a subscription the primary expression in the  reference is evaluated
  it should yield either a mutable sequence  object such as a list or a mapping object such as a dictionary
  next the subscript expression is evaluated
  if the primary is a mutable sequence object such as a list the  subscript must yield an integer
  if it is negative the sequences  length is added to it
  the resulting value must be a nonnegative  integer less than the sequences length and the sequence is asked  to assign the assigned object to its item with that index
  if the  index is out of range indexerror is raised assignment to a  subscripted sequence cannot add new items to a list
  if the primary is a mapping object such as a dictionary the  subscript must have a type compatible with the mappings key type  and the mapping is then asked to create a keydatum pair which maps  the subscript to the assigned object
  this can either replace an  existing keyvalue pair with the same key value or insert a new  keyvalue pair if no key with the same value existed
  for userdefined objects the setitem method is called with  appropriate arguments
 if the target is a slicing the primary expression in the reference  is evaluated
  it should yield a mutable sequence object such as a  list
  the assigned object should be a sequence object of the same  type
  next the lower and upper bound expressions are evaluated  insofar they are present defaults are zero and the sequences  length
  the bounds should evaluate to integers
 if either bound is  negative the sequences length is added to it
  the resulting  bounds are clipped to lie between zero and the sequences length  inclusive
  finally the sequence object is asked to replace the  slice with the items of the assigned sequence
  the length of the  slice may be different from the length of the assigned sequence  thus changing the length of the target sequence if the target  sequence allows it
cpython implementation detail in the current implementation thesyntax for targets is taken to be the same as for expressions andinvalid syntax is rejected during the code generation phase causingless detailed error messages
although the definition of assignment implies that overlaps betweenthe lefthand side and the righthand side are simultaneous forexample a b  b a swaps two variables overlaps within thecollection of assignedto variables occur lefttoright sometimesresulting in confusion
  for instance the following program prints0 2   x  0 1   i  0   i xi  1 2          i is updated then xi is updated   printxsee also  pep 3132  extended iterable unpacking     the specification for the target feature
augmented assignment statements
augmented assignment is the combination in a single statement of abinary operation and an assignment statement   augmentedassignmentstmt  augtarget augop expressionlist  yieldexpression   augtarget                  identifier  attributeref  subscription  slicing   augop                                                          see section primaries for the syntax definitions of the last threesymbols
an augmented assignment evaluates the target which unlike normalassignment statements cannot be an unpacking and the expressionlist performs the binary operation specific to the type of assignmenton the two operands and assigns the result to the original target
the target is only evaluated once
an augmented assignment expression like x  1 can be rewritten asx  x  1 to achieve a similar but not exactly equal effect
 in theaugmented version x is only evaluated once
 also when possiblethe actual operation is performed inplace meaning that rather thancreating a new object and assigning that to the target the old objectis modified instead
unlike normal assignments augmented assignments evaluate the lefthand side before evaluating the righthand side
  for example ai fx first looksup ai then it evaluates fx and performsthe addition and lastly it writes the result back to ai
with the exception of assigning to tuples and multiple targets in asingle statement the assignment done by augmented assignmentstatements is handled the same way as normal assignments
 similarlywith the exception of the possible inplace behavior the binaryoperation performed by augmented assignment is the same as the normalbinary operations
for targets which are attribute references the same caveat aboutclass and instance attributes applies as for regular assignments
annotated assignment statements
annotation assignment is the combination in a single statement ofa variable or attribute annotation and an optional assignmentstatement   annotatedassignmentstmt  augtarget  expression                                  starredexpression  yieldexpressionthe difference from normal assignment statements is that only singletarget is allowed
for simple names as assignment targets if in class or module scopethe annotations are evaluated and stored in a special class or moduleattribute annotations that is a dictionary mapping from variablenames mangled if private to evaluated annotations
 this attribute iswritable and is automatically created at the start of class or modulebody execution if annotations are found statically
for expressions as assignment targets the annotations are evaluatedif in class or module scope but not stored
if a name is annotated in a function scope then this name is localfor that scope
 annotations are never evaluated and stored in functionscopes
if the right hand side is present an annotated assignment performsthe actual assignment before evaluating annotations whereapplicable
 if the right hand side is not present for an expressiontarget then the interpreter evaluates the target except for the lastsetitem or setattr call
see also  pep 526  syntax for variable annotations     the proposal that added syntax for annotating the types of     variables including class variables and instance variables     instead of expressing them through comments
  pep 484  type hints     the proposal that added the typing module to provide a standard     syntax for type annotations that can be used in static analysis     tools and ides
changed in version 3
8 now annotated assignments allow sameexpressions in the right hand side as the regular assignments
previously some expressions like unparenthesized tuple expressionscaused a syntax error
the assert statement
assert statements are a convenient way to insert debugging assertionsinto a program   assertstmt  assert expression  expressionthe simple form assert expression is equivalent to   if debug       if not expression raise assertionerrorthe extended form assert expression1 expression2 is equivalent to   if debug       if not expression1 raise assertionerrorexpression2these equivalences assume that debug and assertionerror referto the builtin variables with those names
  in the currentimplementation the builtin variable debug is true undernormal circumstances false when optimization is requested commandline option o
  the current code generator emits no code for anassert statement when optimization is requested at compile time
  notethat it is unnecessary to include the source code for the expressionthat failed in the error message it will be displayed as part of thestack trace
assignments to debug are illegal
  the value for the builtinvariable is determined when the interpreter starts
the pass statement
passstmt  passpass is a null operation  when it is executed nothing happens
it is useful as a placeholder when a statement is requiredsyntactically but no code needs to be executed for example   def farg pass     a function that does nothing yet   class c pass        a class with no methods yet
the del statement
delstmt  del targetlistdeletion is recursively defined very similar to the way assignment isdefined
 rather than spelling it out in full details here are somehints
deletion of a target list recursively deletes each target from leftto right
deletion of a name removes the binding of that name from the local orglobal namespace depending on whether the name occurs in a globalstatement in the same code block
  if the name is unbound anameerror exception will be raised
deletion of attribute references subscriptions and slicings is passedto the primary object involved deletion of a slicing is in generalequivalent to assignment of an empty slice of the right type but eventhis is determined by the sliced object
changed in version 3
2 previously it was illegal to delete a namefrom the local namespace if it occurs as a free variable in a nestedblock
the return statement
returnstmt  return expressionlistreturn may only occur syntactically nested in a function definitionnot within a nested class definition
if an expression list is present it is evaluated else none issubstituted
return leaves the current function call with the expression list ornone as return value
when return passes control out of a try statement with a finallyclause that finally clause is executed before really leaving thefunction
in a generator function the return statement indicates that thegenerator is done and will cause stopiteration to be raised
 thereturned value if any is used as an argument to constructstopiteration and becomes the stopiteration
value attribute
in an asynchronous generator function an empty return statementindicates that the asynchronous generator is done and will causestopasynciteration to be raised
  a nonempty return statement isa syntax error in an asynchronous generator function
the yield statement
yieldstmt  yieldexpressiona yield statement is semantically equivalent to a yield expression
the yield statement can be used to omit the parentheses that wouldotherwise be required in the equivalent yield expression statement
for example the yield statements   yield expr   yield from exprare equivalent to the yield expression statements   yield expr   yield from expryield expressions and statements are only used when defining agenerator function and are only used in the body of the generatorfunction
  using yield in a function definition is sufficient to causethat definition to create a generator function instead of a normalfunction
for full details of yield semantics refer to the yield expressionssection
the raise statement
raisestmt  raise expression from expressionif no expressions are present raise reraises the last exceptionthat was active in the current scope
  if no exception is active inthe current scope a runtimeerror exception is raised indicatingthat this is an error
otherwise raise evaluates the first expression as the exceptionobject
  it must be either a subclass or an instance ofbaseexception
 if it is a class the exception instance will beobtained when needed by instantiating the class with no arguments
the type of the exception is the exception instances class thevalue is the instance itself
a traceback object is normally created automatically when an exceptionis raised and attached to it as the traceback attribute whichis writable
 you can create an exception and set your own traceback inone step using the withtraceback exception method which returnsthe same exception instance with its traceback set to its argumentlike so   raise exceptionfoo occurred
withtracebacktracebackobjthe from clause is used for exception chaining if given the secondexpression must be another exception class or instance which willthen be attached to the raised exception as the cause attributewhich is writable
  if the raised exception is not handled bothexceptions will be printed    try   
   traceback most recent call last     file stdin line 2 in module   zerodivisionerror division by zero   the above exception was the direct cause of the following exception   traceback most recent call last     file stdin line 4 in module   runtimeerror something bad happeneda similar mechanism works implicitly if an exception is raised insidean exception handler or a finally clause the previous exception isthen attached as the new exceptions context attribute    try   
   traceback most recent call last     file stdin line 2 in module   zerodivisionerror division by zero   during handling of the above exception another exception occurred   traceback most recent call last     file stdin line 4 in module   runtimeerror something bad happenedexception chaining can be explicitly suppressed by specifying nonein the from clause    try   
   traceback most recent call last     file stdin line 4 in module   runtimeerror something bad happenedadditional information on exceptions can be found in sectionexceptions and information about handling exceptions is in sectionthe try statement
changed in version 3
3 none is now permitted as y in raise xfrom y
new in version 3
3 the suppresscontext attribute to suppressautomatic display of the exception context
the break statement
breakstmt  breakbreak may only occur syntactically nested in a for or whileloop but not nested in a function or class definition within thatloop
it terminates the nearest enclosing loop skipping the optional elseclause if the loop has one
if a for loop is terminated by break the loop control targetkeeps its current value
when break passes control out of a try statement with a finallyclause that finally clause is executed before really leaving theloop
the continue statement
continuestmt  continuecontinue may only occur syntactically nested in a for or whileloop but not nested in a function or class definition within thatloop
  it continues with the next cycle of the nearest enclosing loop
when continue passes control out of a try statement with afinally clause that finally clause is executed before reallystarting the next loop cycle
the import statement
future statements
a future statement is a directive to the compiler that a particularmodule should be compiled using syntax or semantics that will beavailable in a specified future release of python where the featurebecomes standard
the future statement is intended to ease migration to future versionsof python that introduce incompatible changes to the language
  itallows use of the new features on a permodule basis before therelease in which the feature becomes standard
   futurestmt  from future import feature as identifier                    feature as identifier                    from future import  feature as identifier                    feature as identifier     feature      identifiera future statement must appear near the top of the module
  the onlylines that can appear before a future statement are the module docstring if any comments blank lines and other future statements
the only feature that requires using the future statement isannotations see pep 563
all historical features enabled by the future statement are stillrecognized by python 3
  the list includes absoluteimportdivision generators generatorstop unicodeliteralsprintfunction nestedscopes and withstatement
  they are allredundant because they are always enabled and only kept for backwardscompatibility
a future statement is recognized and treated specially at compiletime changes to the semantics of core constructs are oftenimplemented by generating different code
  it may even be the casethat a new feature introduces new incompatible syntax such as a newreserved word in which case the compiler may need to parse themodule differently
  such decisions cannot be pushed off untilruntime
for any given release the compiler knows which feature names havebeen defined and raises a compiletime error if a future statementcontains a feature not known to it
the direct runtime semantics are the same as for any import statementthere is a standard module future described later and it willbe imported in the usual way at the time the future statement isexecuted
the interesting runtime semantics depend on the specific featureenabled by the future statement
note that there is nothing special about the statement   import future as namethat is not a future statement its an ordinary import statement withno special semantics or syntax restrictions
code compiled by calls to the builtin functions exec andcompile that occur in a module m containing a future statementwill by default use the new syntax or semantics associated with thefuture statement
  this can be controlled by optional arguments tocompile  see the documentation of that function for details
a future statement typed at an interactive interpreter prompt willtake effect for the rest of the interpreter session
  if aninterpreter is started with the i option is passed a script nameto execute and the script includes a future statement it will be ineffect in the interactive session started after the script isexecuted
see also  pep 236  back to the future     the original proposal for the future mechanism
the global statement
globalstmt  global identifier  identifierthe global statement is a declaration which holds for the entirecurrent code block
  it means that the listed identifiers are to beinterpreted as globals
  it would be impossible to assign to a globalvariable without global although free variables may refer toglobals without being declared global
names listed in a global statement must not be used in the same codeblock textually preceding that global statement
names listed in a global statement must not be defined as formalparameters or in a for loop control target class definitionfunction definition import statement or variable annotation
cpython implementation detail the current implementation does notenforce some of these restrictions but programs should not abuse thisfreedom as future implementations may enforce them or silently changethe meaning of the program
programmers note global is a directive to the parser
  itapplies only to code parsed at the same time as the globalstatement
 in particular a global statement contained in a stringor code object supplied to the builtin exec function does notaffect the code block containing the function call and codecontained in such a string is unaffected by global statements in thecode containing the function call
  the same applies to the evaland compile functions
the nonlocal statement
nonlocalstmt  nonlocal identifier  identifierthe nonlocal statement causes the listed identifiers to refer topreviously bound variables in the nearest enclosing scope excludingglobals
 this is important because the default behavior for binding isto search the local namespace first
  the statement allowsencapsulated code to rebind variables outside of the local scopebesides the global module scope
names listed in a nonlocal statement unlike those listed in aglobal statement must refer to preexisting bindings in anenclosing scope the scope in which a new binding should be createdcannot be determined unambiguously
names listed in a nonlocal statement must not collide with preexisting bindings in the local scope
see also  pep 3104  access to names in outer scopes     the specification for the nonlocal statement
introduction
alternate implementations
notation
expressions
this chapter explains the meaning of the elements of expressions inpython
syntax notes in this and the following chapters extended bnfnotation will be used to describe syntax not lexical analysis
  whenone alternative of a syntax rule has the form   name  othernameand no semantics are given the semantics of this form of name arethe same as for othername
arithmetic conversions
atoms
atoms are the most basic elements of expressions
  the simplest atomsare identifiers or literals
  forms enclosed in parentheses bracketsor braces are also categorized syntactically as atoms
  the syntax foratoms is   atom       identifier  literal  enclosure   enclosure  parenthform  listdisplay  dictdisplay  setdisplay                  generatorexpression  yieldatom
identifiers names
an identifier occurring as an atom is a name
  see section identifiersand keywords for lexical definition and section naming and binding fordocumentation of naming and binding
when the name is bound to an object evaluation of the atom yieldsthat object
 when a name is not bound an attempt to evaluate itraises a nameerror exception
private name mangling when an identifier that textually occurs ina class definition begins with two or more underscore characters anddoes not end in two or more underscores it is considered a privatename of that class
 private names are transformed to a longer formbefore code is generated for them
  the transformation inserts theclass name with leading underscores removed and a single underscoreinserted in front of the name
  for example the identifier spamoccurring in a class named ham will be transformed to hamspam
this transformation is independent of the syntactical context in whichthe identifier is used
  if the transformed name is extremely longlonger than 255 characters implementation defined truncation mayhappen
 if the class name consists only of underscores notransformation is done
literals
python supports string and bytes literals and various numericliterals   literal  stringliteral  bytesliteral                integer  floatnumber  imagnumberevaluation of a literal yields an object of the given type stringbytes integer floating point number complex number with the givenvalue
  the value may be approximated in the case of floating pointand imaginary complex literals
  see section literals for details
all literals correspond to immutable data types and hence theobjects identity is less important than its value
  multipleevaluations of literals with the same value either the sameoccurrence in the program text or a different occurrence may obtainthe same object or a different object with the same value
parenthesized forms
displays for lists sets and dictionaries
for constructing a list a set or a dictionary python provides specialsyntax called displays each of them in two flavors either the container contents are listed explicitly or they are computed via a set of looping and filtering instructions  called a comprehension
common syntax elements for comprehensions are   comprehension  assignmentexpression compfor   compfor       async for targetlist in ortest compiter   compiter      compfor  compif   compif        if expressionnocond compiterthe comprehension consists of a single expression followed by at leastone for clause and zero or more for or if clauses
 in this casethe elements of the new container are those that would be produced byconsidering each of the for or if clauses a block nesting fromleft to right and evaluating the expression to produce an elementeach time the innermost block is reached
however aside from the iterable expression in the leftmost forclause the comprehension is executed in a separate implicitly nestedscope
 this ensures that names assigned to in the target list dontleak into the enclosing scope
the iterable expression in the leftmost for clause is evaluateddirectly in the enclosing scope and then passed as an argument to theimplicitly nested scope
 subsequent for clauses and any filtercondition in the leftmost for clause cannot be evaluated in theenclosing scope as they may depend on the values obtained from theleftmost iterable
 for example xy for x in range10 for y inrangex x10
to ensure the comprehension always results in a container of theappropriate type yield and yield from expressions are prohibitedin the implicitly nested scope
since python 3
6 in an async def function an async for clausemay be used to iterate over a asynchronous iterator
 a comprehensionin an async def function may consist of either a for or asyncfor clause following the leading expression may contain additionalfor or async for clauses and may also use await expressions
 ifa comprehension contains either async for clauses or awaitexpressions it is called an asynchronous comprehension
  anasynchronous comprehension may suspend the execution of the coroutinefunction in which it appears
 see also pep 530
new in version 3
6 asynchronous comprehensions were introduced
changed in version 3
8 yield and yield from prohibited in theimplicitly nested scope
list displays
a list display is a possibly empty series of expressions enclosed insquare brackets   listdisplay   starredlist  comprehension a list display yields a new list object the contents being specifiedby either a list of expressions or a comprehension
  when a commaseparated list of expressions is supplied its elements are evaluatedfrom left to right and placed into the list object in that order
when a comprehension is supplied the list is constructed from theelements resulting from the comprehension
set displays
a set display is denoted by curly braces and distinguishable fromdictionary displays by the lack of colons separating keys and values   setdisplay   starredlist  comprehension a set display yields a new mutable set object the contents beingspecified by either a sequence of expressions or a comprehension
when a commaseparated list of expressions is supplied its elementsare evaluated from left to right and added to the set object
  when acomprehension is supplied the set is constructed from the elementsresulting from the comprehension
an empty set cannot be constructed with  this literal constructsan empty dictionary
dictionary displays
a dictionary display is a possibly empty series of keydatum pairsenclosed in curly braces   dictdisplay         keydatumlist  dictcomprehension    keydatumlist      keydatum  keydatum    keydatum           expression  expression   orexpr   dictcomprehension  expression  expression compfora dictionary display yields a new dictionary object
if a commaseparated sequence of keydatum pairs is given they areevaluated from left to right to define the entries of the dictionaryeach key object is used as a key into the dictionary to store thecorresponding datum
  this means that you can specify the same keymultiple times in the keydatum list and the final dictionarys valuefor that key will be the last one given
a double asterisk  denotes dictionary unpacking
 its operandmust be a mapping
  each mapping item is added to the newdictionary
  later values replace values already set by earlierkeydatum pairs and earlier dictionary unpackings
new in version 3
5 unpacking into dictionary displays originallyproposed by pep 448
a dict comprehension in contrast to list and set comprehensionsneeds two expressions separated with a colon followed by the usualfor and if clauses
 when the comprehension is run the resultingkey and value elements are inserted in the new dictionary in the orderthey are produced
restrictions on the types of the key values are listed earlier insection the standard type hierarchy
  to summarize the key typeshould be hashable which excludes all mutable objects
  clashesbetween duplicate keys are not detected the last datum textuallyrightmost in the display stored for a given key value prevails
changed in version 3
8 prior to python 3
8 in dict comprehensionsthe evaluation order of key and value was not welldefined
  incpython the value was evaluated before the key
  starting with 3
8the key is evaluated before the value as proposed by pep 572
generator expressions
yield expressions
primaries
primaries represent the most tightly bound operations of the language
their syntax is   primary  atom  attributeref  subscription  slicing  call
attribute references
an attribute reference is a primary followed by a period and a name   attributeref  primary 
 identifierthe primary must evaluate to an object of a type that supportsattribute references which most objects do
  this object is thenasked to produce the attribute whose name is the identifier
  thisproduction can be customized by overriding the getattr method
if this attribute is not available the exception attributeerror israised
  otherwise the type and value of the object produced isdetermined by the object
  multiple evaluations of the same attributereference may yield different objects
subscriptions
subscription of a sequence string tuple or list or mappingdictionary object usually selects an item from the collection   subscription  primary  expressionlist the primary must evaluate to an object that supports subscriptionlists or dictionaries for example
  userdefined objects can supportsubscription by defining a getitem method
for builtin objects there are two types of objects that supportsubscriptionif the primary is a mapping the expression list must evaluate to anobject whose value is one of the keys of the mapping and thesubscription selects the value in the mapping that corresponds to thatkey
  the expression list is a tuple except if it has exactly oneitem
if the primary is a sequence the expression list must evaluate to aninteger or a slice as discussed in the following section
the formal syntax makes no special provision for negative indices insequences however builtin sequences all provide a getitemmethod that interprets negative indices by adding the length of thesequence to the index so that x1 selects the last item of x
the resulting value must be a nonnegative integer less than the numberof items in the sequence and the subscription selects the item whoseindex is that value counting from zero
 since the support fornegative indices and slicing occurs in the objects getitemmethod subclasses overriding this method will need to explicitly addthat support
a strings items are characters
  a character is not a separate datatype but a string of exactly one character
subscription of certain classes or types creates a generic alias
in this case userdefined classes can support subscription byproviding a classgetitem classmethod
slicings
calls
await expression
suspend the execution of coroutine on an awaitable object
 canonly be used inside a coroutine function
   awaitexpr  await primarynew in version 3
5
the power operator
the power operator binds more tightly than unary operators on itsleft it binds less tightly than unary operators on its right
  thesyntax is   power  awaitexpr  primary  uexprthus in an unparenthesized sequence of power and unary operators theoperators are evaluated from right to left this does not constrainthe evaluation order for the operands 12 results in 1
the power operator has the same semantics as the builtin powfunction when called with two arguments it yields its left argumentraised to the power of its right argument
  the numeric arguments arefirst converted to a common type and the result is of that type
for int operands the result has the same type as the operands unlessthe second argument is negative in that case all arguments areconverted to float and a float result is delivered
 for example102 returns 100 but 102 returns 0
raising 0
0 to a negative power results in a zerodivisionerror
raising a negative number to a fractional power results in a complexnumber
 in earlier versions it raised a valueerror

unary arithmetic and bitwise operations
all unary arithmetic and bitwise operations have the same priority   uexpr  power   uexpr   uexpr   uexprthe unary  minus operator yields the negation of its numericargument
the unary  plus operator yields its numeric argument unchanged
the unary  invert operator yields the bitwise inversion of itsinteger argument
  the bitwise inversion of x is defined asx1
  it only applies to integral numbers
in all three cases if the argument does not have the proper type atypeerror exception is raised
binary arithmetic operations
shifting operations
the shifting operations have lower priority than the arithmeticoperations   shiftexpr  aexpr  shiftexpr    aexprthese operators accept integers as arguments
  they shift the firstargument to the left or right by the number of bits given by thesecond argument
a right shift by n bits is defined as floor division by pow2n
a left shift by n bits is defined as multiplication with pow2n
binary bitwise operations
each of the three bitwise operations has a different priority level   andexpr  shiftexpr  andexpr  shiftexpr   xorexpr  andexpr  xorexpr  andexpr   orexpr   xorexpr  orexpr  xorexprthe  operator yields the bitwise and of its arguments which mustbe integers
the  operator yields the bitwise xor exclusive or of itsarguments which must be integers
the  operator yields the bitwise inclusive or of its argumentswhich must be integers
comparisons
value comparisons
membership test operations
the operators in and not in test for membership
  x in sevaluates to true if x is a member of s and false otherwise
x not in s returns the negation of x in s
  all builtin sequencesand set types support this as well as dictionary for which in testswhether the dictionary has a given key
 for container types such aslist tuple set frozenset dict or collections
deque theexpression x in y is equivalent to anyx is e or x  e for e iny
for the string and bytes types x in y is true if and only if xis a substring of y
  an equivalent test is y
empty strings are always considered to be a substring of any otherstring so  in abc will return true
for userdefined classes which define the contains method xin y returns true if y
containsx returns a true value andfalse otherwise
for userdefined classes which do not define contains but dodefine iter x in y is true if some value z for whichthe expression x is z or x  z is true is produced while iteratingover y
 if an exception is raised during the iteration it is as ifin raised that exception
lastly the oldstyle iteration protocol is tried if a class definesgetitem x in y is true if and only if there is a nonnegative integer index i such that x is yi or x  yi and nolower integer index raises the indexerror exception
  if any otherexception is raised it is as if in raised that exception
the operator not in is defined to have the inverse truth value ofin
identity comparisons
the operators is and is not test for an objects identity x isy is true if and only if x and y are the same object
  anobjects identity is determined using the id function
  x is noty yields the inverse truth value
boolean operations
assignment expressions
assignmentexpression  identifier  expressionan assignment expression sometimes also called a named expressionor walrus assigns an expression to an identifier while alsoreturning the value of the expression
one common use case is when handling matched regular expressions   if matching  pattern
searchdata       dosomethingmatchingor when processing a file stream in chunks   while chunk  file
read9000       processchunknew in version 3
8 see pep 572 for more details about assignmentexpressions
conditional expressions
conditionalexpression  ortest if ortest else expression   expression              conditionalexpression  lambdaexpr   expressionnocond       ortest  lambdaexprnocondconditional expressions sometimes called a ternary operator havethe lowest priority of all python operations
the expression x if c else y first evaluates the condition crather than x
 if c is true x is evaluated and its value isreturned otherwise y is evaluated and its value is returned
see pep 308 for more details about conditional expressions
lambdas
lambdaexpr         lambda parameterlist  expression   lambdaexprnocond  lambda parameterlist  expressionnocondlambda expressions sometimes called lambda forms are used to createanonymous functions
 the expression lambda parameters expressionyields a function object
  the unnamed object behaves like a functionobject defined with   def lambdaparameters       return expressionsee section function definitions for the syntax of parameter lists
note that functions created with lambda expressions cannot containstatements or annotations
expression lists
evaluation order
operator precedence
