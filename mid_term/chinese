术 语 对 照 表
 文档 说明
 这些 文档 生成 自 restructuredtext  原 文档 由 sphinx  一个 专门 为 python  文档 写 的 文档 生成器 创建
 本文档 和 它 所 用 工具 链 的 开发 完全 是 由 志 愿 者 完成 的 这 和 python  本身 一样
 如果您 想 参 与 进 来 请 阅读 解决 bug  了解 如何 参 与
 我们 随 时 欢 迎 新 的 志 愿 者 非常 感谢 fred  l
 创 造 了用于 早期 python  文档 的工具 链 以及 撰写 了 非 常 多 的 文档 docutils  软件包 项目 创建了 restructuredtext  文本 格式 和 docutils  软 件 套件 fredrik  lundhsphinx  从 他 的 alternative  python  reference  项目 中 获得 了 很多 好 的 想 法
python  文档 贡献 者
quopri  编码与解码 经过 mime  转 码 的 可打印 数据
 源代码 libquopri
py  此模块 会 执行 转换 后 可打印 的 传输 编码与解码 具体 定义 见 rfc 1521 mime  multipurpose  internet  mail  extensions  part  one  mechanisms  forspecifying  and  describing  the  format  of  internet  message  bodies
 转换 后 可打印 的 编码格式 被设计用 于 只包含 相对 较 少 的 不 可打印 字符 的 数据 如果存在 大量 这样的 字符 通过 base 64 模块 所提供的 base 64 编码 方案 会 更 为 紧凑 例如 当 发送 图片 文件 时
decodeinput  output  headerfalse  解码 input  文件 的内容 并 将 已 解码 二进制数据 结果 写入 output  文件
 input  和 output  必须为 二进制文件 对象
 如 果提供了 可选参数 header  且 为真值 下划线 将 被 解码 为 空格
 此 函数 可用于 解码 q  编码 的 头 数据 具体 描述 见 rfc 1522 mime  multipurpose  internet  mail  extensions  part  two  message  header  extensions  for  nonascii  text 
encodeinput  output  quotetabs  headerfalse  编码 input  文件 的内容 并 将 转换 后 可打印 的 数据 结果 写入 output  文件
 input  和 output  必须为 二进制文件 对象
 quotetabs  是一个 非 可选的 旗标 它 控制 是否 要 编码 内 嵌 的空格 与 制表符 当 为真值 时 将 编码 此 类 内 嵌 空白符 当 为假值 时 则 保持 原 样 不 进行编码
 请注意 出现在 行 尾 的 空格 与 制表符 总是会 被 编码 具体 描述 见 rfc 1521
 header  旗标 控 制 空格符 是否 要 编码 为 下划线 具体 描述 见 rfc 1522
decodestrings  headerfalse  类似 decode  区别在于 它接受一个 源 bytes  并返回 对应的 已 解码 bytes
encodestrings  quotetabsfalse  headerfalse  类型 encode  区别在于 它接受一个 源 bytes  并返回 对应的 已 编码 bytes
 在默认情况下 它 会 发送 false  值 给 encode  函数 的 quotetabs  形参
 参见 模块 base 64 编码与解码 mime  base 64 数据
httpserver  http  服务器
threading  基于 线程 的 并 行
 线程 本地 数据
 线程 本地 数据 是 特定 线程 的 数据
 管理 线程 本地 数据 只需要 创建一个 local  或者一个 子类型的实例 并 在 实例 中 储存 属性 mydata  threading
x 1 在不同的 线程中 实例 的值会 不同
local  一个 代表 线程 本地 数据 的 类
 更多 相关 细节 和 大量 示例 参见 threadinglocal  模块的文档
 线程 对象
 锁 对象
 原始 锁 是一个 在 锁定 时 不 属于 特定 线程 的 同步 基 元组 件
 在 python  中 它 是 能 用 的 最低 级 的 同步 基 元组 件 由 thread  扩展模块 直接 实现
 原始 锁 处于 锁定 或者 非 锁定 两种 状态 之一
 它 被 创建时 为 非 锁定 状态
 它 有两个 基本 方法 acquire  和 release 
 当 状态 为 非 锁定 时 acquire  将 状态 改 为 锁定 并 立即 返回
 当 状态 是 锁定 时 acquire  将 阻塞 至 其他线程 调用 release  将 其 改 为 非 锁定 状态 然后 acquire  调用 重置 其 为 锁定 状态 并返回
 release  只 在 锁定 状态 下 调用 它 将 状态 改 为 非 锁定 并 立即 返回
 如果 尝试 释放 一个 非 锁定 的 锁 则会引发 runtimeerror   异常
 锁 同样 支持 上下文管理 协议
 当 多个 线程 在 acquire  等待 状态 转 变 为 未 锁定 被阻塞 然后 release  重置 状态 为 未 锁定 时 只有一个 线程 能 继续执行 至 于 哪个 等待 线程 继续执行 没有 定义 并且 会 根据 实现 而 不同
 所有 方法 的 执行 都 是 原子 性 的
lock  实现 原始 锁 对象的类
 一旦 一个线程 获得 一个 锁 会阻塞 随后 尝试 获得锁 的 线程 直到 它 被 释放 任何 线程 都可以 释放 它
 需要 注意 的 是 lock  其 实 是一个 工厂函数 返回 平台 支持 的 具体 锁 类 中 最 有效的 版本 的 实例
 acquireblockingtrue  timeout 1 可以 阻塞 或 非阻塞 地 获得锁
 当 调用时 参数 blocking  设置为 true  缺 省 值 阻塞直到 锁 被 释 放 然后 将 锁 锁定 并返回 true 
 在 参数 blocking  被设置为 false  的情况下 调用 将不会 发生 阻塞
 如果 调用时 blocking  设 为 true  会阻塞 并 立即 返回 false  否则将 锁 锁定 并返回 true
 当 浮点 型 timeout  参数 被设置为 正 值 调用时 只要 无法 获得锁 将 最 多 阻塞 timeout  设 定 的 秒数
timeout  参数 被设置为1 时 将 无 限 等待
 当 blocking  为 false  时 timeout  指定 的 值 将被忽略
 如果 成功 获得锁 则返回 true  否则返回 false  例如 发生 超时 的时候
 在3
2 版更改 新 的 timeout  形参
 在3
2 版更改 现 在 如果 底层 线程 实现 支持 则 可以通过 posix  上 的 信号 中断 锁 的 获取
 release  释放 一个 锁
 这个方法 可以 在任何 线程中 调用 不 单 指 获得锁 的 线程
 当 锁 被 锁定 将 它 重置 为 未 锁定 并返回
 如果 其他线程 正在等待 这 个 锁 解锁 而 被阻塞 只 允许 其中一个 允许
 在 未 锁定 的 锁 调用 时会引发 runtimeerror  异常
 没有 返回值
 locked  如果 获得 了 锁 则返回真值
 递归 锁 对象
 重入 锁 是一个 可以被 同 一个线程 多次 获取 的 同步 基 元组 件
 在内部 它 在 基 元 锁 的 锁定 非 锁定 状态 上 附加 了 所属 线程 和 递归 等级 的概念
 在 锁定 状态 下 某些 线程 拥有 锁 在 非 锁定 状态 下 没有 线程 拥有 它
 若 要 锁定 锁 线程 调用 其 acquire  方法 一旦 线程 拥有 了 锁 方法 将 返回
 若 要 解锁 线程 调用 release  方法
 acquirerelease  对 可以 嵌套 只有 最终 release  最 外 面 一 对 的 release  将 锁 解 开 才能 让 其他线程 继续 处理 acquire  阻塞
 递归 锁 也支持 上下文管理 协议
rlock  此 类 实现了 重入 锁 对象
 重入 锁 必须 由 获取 它 的 线程 释放
 一旦 线程 获得 了 重入 锁 同 一个线程 再次 获取 它 将 不 阻塞 线程 必须 在每次 获取 它 时 释放 一 次
 需要 注意 的 是 rlock  其 实 是一个 工厂函数 返回 平台 支持 的 具体 递归 锁 类 中 最 有效的 版本 的 实例
 acquireblockingtrue  timeout 1 可以 阻塞 或 非阻塞 地 获得锁
 当 无 参数调用 时 如果这 个线程 已经 拥有 锁 递归 级别 增加 一 并 立即 返回
 否则 如果 其他线程 拥有 该 锁 则 阻塞 至 该 锁 解锁
 一旦 锁 被 解锁 不 属于 任何 线程 则 抢 夺 所有 权 设置 递归 等级 为 一 并返回
 如果 多 个线程 被阻塞 等待 锁 被 解锁 一次 只有一个 线程 能 抢 到 锁 的 所有 权
 在 这种情况下 没有 返回值
 当 发起调用 时 将 blocking  参数 设 为真值则 执行 与 无 参数调用 时 一样 的 操作 然后 返回 true
 当 发起调用 时 将 blocking  参数 设 为假值 则 不 进行 阻塞
 如果一个 无 参数调用 将 要 阻塞 则 立即 返回 false  在其他情况下 执行 与 无 参 数 调用时 一样的 操作 然后 返回 true
 当 发起调用 时 将 浮点数 的 timeout  参数 设 为 正 值 时 只要 无法 获得锁 将 最多 阻塞 timeout  所指定的 秒数
 如果 已经 获得锁 则返回 true  如果 超时 则返回 假值
 在3
2 版更改 新 的 timeout  形参
 release  释放 锁 自 减 递归 等级
 如果 减 到 零 则 将 锁 重置 为 非 锁定 状态 不 被 任 何 线程 拥有 并且 如果 其他线程 正 被阻塞 着 等待 锁 被 解锁 则 仅 允许 其中一个 线程 继续
 如果 自 减 后 递归 等级 仍然 不 是 零 则 锁 保持 锁定 仍 由 调用 线程 拥有
 只有 当前 线程 拥有 锁 才能 调用 这个方法
 如果 锁 被 释放 后 调用 这个方法 会 引 起 runtimeerror  异常
 没有 返回值
 条件 对象
 条件 变量 总是 与 某 种类型的 锁 对象 相关联 锁 对象 可以通过 传入 获得 或者 在 缺 省 的情况下 自动创建
 当 多个 条件 变量 需要 共享 同 一个 锁 时 传入一个 锁 很有用
 锁 是 条件 对象 的一部分 你 不必 单独 地 跟踪 它
 条件 变量 遵循 上下文管理 协议 使用 with  语句 会 在 它 包 围 的代码块 内 获取 关联的 锁
 acquire  和 release  方法也 能 调用 关联 锁 的 相关 方法
 其 它 方法 必须在 持 有 关联的 锁 的情况下 调用
 wait  方法 释放 锁 然后 阻塞直到 其 它 线程 调用 notify  方法 或 notifyall  方法 唤醒 它
 一旦 被 唤醒 wait  方法 重新 获取 锁 并返回
 它 也可以 指定 超时 时间
 注意 notify  方法 和 notifyall  方法 并不会 释放 锁 这意味着 被 唤醒 的 线程 不 会 立即 从 它们的 wait  方法调用 中 返回 而 是 会 在 调用 了 notify  方法 或 notifyall  方法 的 线程 最终 放 弃 了 锁 的 所有 权 后 返回
 使用 条件 变量 的 典型 编程 风格 是 将 锁 用 于 同步 某些 共享 状态 的 权限 那些 对 状态 的 某些 特定 改变 感兴趣的 线程 它们 重复 调用 wait  方法 直到 看到 所 期望的 改变 发生 而 对 于 修改 状态 的 线程 它们将 当前 状态 改变 为 可能是 等待 者 所 期 待 的 新 状态 后 调用 notify  方法 或者 notifyall  方法
 例如 下面的 代码 是一个 通用的 无限 缓冲区 容 量 的 生产 者 消费者 情 形 consume  one  item  with  cv  while  not  anitemisavailable  cv
notify  使用 while  循环 检查 所 要求 的 条件 成 立 与 否 是 有必要 的因为 wait  方法 可能 要 经过 不 确定 长度 的 时间 后 才会 返回 而 此 时 导致 notify  方法调用 的 那 个 条件 可能 已经 不再 成 立
 这是 多线程 编程 所 固 有 的 问题
 waitfor  方法 可 自动 化 条件 检查 并 简化 超时 计算
 consume  an  item  with  cv  cv
waitforanitemisavailable  getanavailableitem  选择 notify  还是 notifyall  取决于 一次 状态 改变 是 只能 被 一个 还是 能 被 多个 等待 线程 所 用
 例如 在 一个 典型 的 生产 者 消费者 情 形 中 添加一个 项目 到 缓冲区 只需 唤醒 一个 消费者 线程
class  threading
conditionlocknone  实现 条件 变量 对象的类
 一个 条件 变量 对象 允许 一个或多个 线程 在 被 其 它 线 程 所 通知 之前 进行 等待
 如果给出 了 非 none  的 lock  参数则 它必须 为 lock  或者 rlock  对象 并且它 将 被用作 底层 锁
 否则将 会 创建新的 rlock  对象 并将其 用 作 底层 锁
 在3
3 版更改 从 工厂函数 变 为 类
 acquireargs  请求 底层 锁
 此方法 调用底层 锁 的相应 方法 返回值 是 底层 锁 相应 方法 的 返回值
 release  释放 底层 锁
 此方法 调用底层 锁 的相应 方法
 没有 返回值
 waittimeoutnone  等待直到 被 通知 或 发生 超时
 如果 线程 在 调用此方法 时 没有 获得锁 将 会 引发 runtimeerror  异常
 这个方法 释放 底层 锁 然后 阻塞直到 在 另外 一个 线程中 调用 同 一个 条件 变量 的 notify  或 notifyall  唤醒 它 或者 直到 可选的 超时 发 生
 一旦 被 唤醒 或者 超时 它 重新 获得锁 并返回
 当提供 了 timeout  参数 且不 是 none  时 它应该 是 一个浮点数 代 表 操作 的 超时 时间 以 秒 为单位 可以为 小 数
 当 底层 锁 是 个 rlock  不 会 使用 它 的 release  方法 释放 锁 因为 当 它 被 递归 多次 获取 时 实际上 可能无法 解锁
 相反 使用了 rlock  类 的 内部 接口 即使 多次 递归 获取 它 也 能 解锁 它
 然后 在 重新 获取 锁 时 使用 另一个 内部 接口 来 恢复 递归 级别
 返回 true  除非 提供的 timeout  过 期 这种情况下 返回 false 
 在3
2 版更改 很 明显 方法 总是返回 none
 waitforpredicate  timeoutnone  等待直到 条件 计算 为真
 predicate  应该是 一个可调用对象 而且 它 的返回值 可 被解释 为 一个 布尔值
 可以提供 timeout  参数 给出 最大 等 待 时间
 这 个 实 用 方法 会 重复 地调用 wait  直到 满足 判断 式 或者 发生 超时
 返 回 值 是 判断 式 最后一个 返回值 而且 如果 方法 发生 超时 会返回 false 
 忽略 超时 功能 调用此方法 大致 相当于 编写 while  not  predicate  cv
wait  因此 规则 同样 适用于 wait  锁 必须在 被调用时 保持 获取 并 在 返 回 时 重新 获取
 随着 锁定 执行 判断 式
3
2 新版功能
 notifyn 1 默认 唤醒 一个 等待 这 个 条件 的 线程
 如果 调用 线程 在没有 获得锁 的情况下 调用 这个方法 会引发 runtimeerror  异常
 这个方法 唤醒 最多 n  个 正在等待 这 个 条件 变量 的 线程 如果没有 线程 在 等待 这是一个 空 操作
 当前 实现 中如果 至少有 n  个线程 正在等待 准确 唤醒 n  个线程
 但是 依赖 这 个 行为 并 不安全
 未来 优化 的 实现 有 时 会 唤醒 超过 n  个 线程
 注意 被 唤醒 的 线程 实际上 不 会返回 它 调用 的 wait  直到 它可以 重 新 获得锁
 因为 notify  不 会 释放 锁 只有 它 的 调用者 应该 这样做
 notifyall  唤醒 所有 正在等待 这 个 条件 的 线程
 这个方法 行为与 notify  相似 但 并 不 只 唤醒 单 一 线程 而 是 唤醒 所有 等待 线程
 如果 调用 线程 在 调用 这 个 方法 时 没有 获得锁 会引发 runtimeerror  异常
 信号 量 对象
semaphore  例子
 事件 对象
 这是 线程 之间 通信 的 最简单 机制 之一 一个线程 发出 事件 信号 而 其他线程 等待 该 信号
 一个事件 对象 管理 一个 内部 标识 调用 set  方法 可 将 其 设置为 true  调用 clear  方法 可 将 其 设置为 false  调用 wait  方法 将 进入 阻塞直到 标识 为 true 
class  threading
event  实现 事件 对象的类
 事件 对象 管理 一个 内部 标识 调用 set  方法 可 将 其 设置为 true
 调用 clear  方法 可 将 其 设置为 false 
 调用 wait  方法 将 进入 阻塞直到 标识 为 true
 这 个 标识 初始 时 为 false 
 在3
3 版更改 从 工厂函数 变 为 类
 isset  当且仅当 内部 标识 为 true  时返回 true 
 set  将 内部 标识 设置为 true 
 所有 正在等待 这 个 事件 的 线程 将 被 唤醒
 当 标 识 为 true  时 调用 wait  方法 的 线程 不会被 被阻塞
 clear  将 内部 标识 设置为 false 
 之后 调用 wait  方法 的 线程 将会被 阻塞 直到 调用 set  方法 将 内部 标识 再次 设置为 true 
 waittimeoutnone  阻塞 线程 直到 内部 变量 为 true 
 如果 调用时 内部 标识 为 true  将 立即 返回
 否则将 阻塞 线程 直到 调用 set  方法 将 标识 设置为 true  或 者 发生 可选的 超时
 当提供 了 timeout  参数 且不 是 none  时 它应该 是 一个浮点数 代表 操 作 的 超时 时间 以 秒 为单位 可以为 小 数
 当且仅当 内部 旗标 在 等待 调用 之前 或者 等待 开始 之后 被设为 真值 时 此方法 将 返回 true  也就是说 它 将 总是返回 true  除非 设 定 了 超时 且 操 作 发生了 超时
 在3
1 版更改 很 明显 方法 总是返回 none
 定 时 器对象
 栅 栏 对象
 在 with  语句中 使用 锁、 条件 和 信号 量
 这个模块 提供的 带有 acquire  和 release  方法的对象 可以 被用作 with  语句 的 上下文管理器
 当 进入 语句 块 时 acquire  方法 会被调用 退出 语句 块 时 release   会被调用
 因此 以 下 片段 with  somelock  do  something
 相当于 somelock
release  现 在 lock 、 rlock 、 condition 、 semaphore  和 boundedsemaphore  对象 可 以用作 with  语句 的 上下文管理器
ospath  常 用 路径 操作
importlib  import  的 实现
3
1 新版功能
 源代码 libimportlibinit
 概述
 函数
importlibabc —— 关于 导入 的抽象基类
importlibresources  资源
 源码 libimportlibresources
py 3
7 新版功能
 这个模块 使得 python  的 导入系统 提供了 访问 包 内 的 资源 的功能
 如果 能够 导入 一个 包 那么 就 能够 访问 那 个 包 里面 的 资源
 资源 可以 以 二进制 或 文本模式 方式 被 打开 或 读取
 资源 非常 类似于 目录 内部 的 文件 要 牢 记 的 是 这 仅仅 是一个 比 喻
 资源 和 包 不 是 与 文件系统 上 的 物理 文件和目录 一样 存 在 着
 注解 this  module  provides  functionality  similar  to  pkgresources  basic  resource  access  without  the  performance  overhead  of  that  package
 加载器 想要 支持 资源 读取 应该 实现 一个 由 importlib
resourcereader  指定 的 getresourcereaderfullname  方法
3
9 新版功能
importlibmachinery  importers  and  path  hooks
3
3 新版功能
3
3 新版功能
3
5 版后已移除 use  bytecodesuffixes  instead
3
3 新版功能
3
5 版后已移除 use  bytecodesuffixes  instead
3
3 新版功能
 在3
5 版更改 the  value  is  no  longer  dependent  on  debug
3
3 新版功能
3
3 新版功能
 在3
5 版更改 as  part  of  pep 489 the  builtin  importer  now  implements  loader
createmodule  and  loader
 在3
4 版更改 gained  createmodule  and  execmodule  methods
3
3 新版功能
3
6 版后已移除 use  site  configuration  instead
 future  versions  of  python  may  not  enable  this  finder  by  default
3
4 新版功能
 在3
5 版更改 if  the  current  working  directory  represented  by  an  empty  string  is  no  longer  valid  then  none  is  returned  but  no  value  is  cached  in  sys
3
4 版后已移除 使用 findspec  来 代替
 在3
7 版更改 entries  of  none  in  sys
pathimportercache  are  deleted
 在3
4 版更改 calls  objects  in  sys
pathhooks  with  the  current  working  directory  for  i
3
3 新版功能
3
4 新版功能
3
3 新版功能
3
6 版后已移除 use  importlib
execmodule  instead
3
3 新版功能
3
6 版后已移除 use  importlib
3
3 新版功能
3
5 新版功能
3
5 新版功能
 getfilenamefullname  返回 path
3
4 新版功能
3
4 新版功能
importlibutil  utility  code  for  importers
3
4 新版功能
3
4 新版功能
 在3
5 版更改 the  optimization  parameter  was  added  and  the  debugoverride  parameter  was  deprecated
 在3
6 版更改 接受一个 类 路径对象
3
4 新版功能
 在3
6 版更改 接受一个 类 路径对象
3
4 新版功能
3
3 新版功能
 在3
9 版更改 to  improve  consistency  with  import  statements  raise  importerror  instead  of  valueerror  for  invalid  relative  import  attempts
3
4 新版功能
 在3
7 版更改 raises  modulenotfounderror  instead  of  attributeerror  if  package  is  in  fact  not  a  package  i
3
5 新版功能
 在3
3 版更改 loader  and  package  are  automatically  set  when  possible
 在3
4 版更改 set  name  loader  package  unconditionally  to  support  reloading
3
4 版后已移除 the  import  machinery  now  directly  performs  all  the  functionality  provided  by  this  function
 在3
4 版更改 set  loader  if  set  to  none  as  if  the  attribute  does  not  exist
3
4 版后已移除 the  import  machinery  takes  care  of  this  automatically
3
4 版后已移除 the  import  machinery  takes  care  of  this  automatically
3
4 新版功能
3
4 新版功能
 在3
6 版更改 接受一个 类 路径对象
3
7 新版功能
 注解 for  projects  where  startup  time  is  critical  this  class  allows  for  potentially  minimizing  the  cost  of  loading  a  module  if  it  is  never  used
3
5 新版功能
 在3
6 版更改 began  calling  createmodule  removing  the  compatibility  warning  for  importlib
builtinimporter  and  importlib
 示例
importing  programmatically
checking  if  a  module  can  be  imported
importing  a  source  file  directly
setting  up  an  importer
approximating  importlibimportmodule
random  生成 伪随机 数
 簿 记 功能
seedanone  version 2 初始化 随机数生成器
 如果 a  被 省略或为 none  则 使用当前 系统 时间
 如果 操作系统 提供 随机 源 则 使用它们 而不是 系统 时间 有关 可用性 的详细信息 请参阅 os
urandom  函数
 如果 a  是 int  类型 则 直接使用
 对 于 版本2 默认 的 str 、 bytes  或 bytearray  对象转换为 int  并 使用 它 的 所有 位
 对 于 版本1 用于从 旧版本 的 python  再 现 随机 序列 用 于 str  和 bytes  的算法 生成 更 窄 的 种子 范围
 在3
2 版更改 已 移至 版本2 方案 该 方案 使用 字符串 种子 中的所有 位
3
9 版后已移除 在 将 来 seed  必须是 下列 类型 之一 nonetype  int  float  str  bytes  或 bytearray
getstate  返回 捕获 生成器 当前 内部 状态 的 对象
 这个对象 可以 传递给 setstate  来 恢复 状态
setstatestate  state  应该是 从 之前 调用 getstate  获得 的 并且 setstate  将 生成器 的 内部 状态 恢复 到 getstate  被调用时 的 状态
 用 于 字节数据 的 函数
randbytesn  生成 n  个 随机字节
 此方法 不 可用于 生成 安全 凭据
 那 应当使用 secrets
tokenbytes
3
9 新版功能
 整数 用 函数
randrangestart  stop  step  从 rangestart  stop  step  返回 一个 随机 选择 的 元素
 这相当于 choicerangestart  stop  step  但 实际上 并没有 构建 一个 range  对象
 位置参数 模式 匹配 range 
 不应 使用 关键字参数 因为 该函数 可能 以 意 外 的方式 使用它们
 在3
2 版更改 randrange  在 生成 均 匀 分布的 值 方面 更 为 复杂
 以 前 它 使用了 像 intrandomn  这样的 形式 它可以 产生 稍 微 不 均 匀 的 分布
randinta  b  返回 随机 整数 n  满足 a  n  b
 相当于 randrangea  b 1
getrandbitsk  返回 带有 k  位 随机 的 python  整数
 此方法 随 mersennetwister  生成器 一 起 提供 其他 一些 生成器 也可以 将 其 作为 api  的 可选 部分 提供
 如果可 用 getrandbits  启用 randrange  来处理 任意 大 范围
 在3
9 版更改 此方法 现在接受 零 作为 k  的 值
 序列 用 函数
choiceseq  从 非空 序列 seq  返回 一个 随机 元素
 如果 seq  为空 则引发 indexerror
choicespopulation  weightsnone  cumweightsnone  k 1 从 population  中选择 替换 返回 大小 为 k  的 元素 列表
 如果 population  为空 则引发 indexerror
 如果指定了 weight  序列 则 根据 相对 权重 进行 选择
 或者如果 给出 cumweights  序列 则 根据 累积 权重 可能 使用 itertools
accumulate  计算 进行 选择
 例如 相对 权重105305 相当于 累积 权重10154550
 在内部 相对 权重 在 进行 选择 之前 会 转换为 累积 权重 因此 提供 累积 权重 可以 节 省 工作 量
 如果 既 未指定 weight  也 未指定 cumweights  则 以 相等的 概率 进行 选 择
 如 果提供了 权重 序列 则 它必须 与 population  序列 的长度 相同
 一个 typeerror  指定了 weights  和 cumweights
 weights  或 cumweights  可 使用 random  所返回的 能 与 float  值 进行 相互 运算 的 任何 数字类型 包括 int 、 float 、 fraction  但 不包括 decimal
 权重 为负值 的 行为 未 有定义
 如果 权重 为负值 则将引发 valueerror
 对 于 给定的 种子 具有 相等 加 权 的 choices  函数 通常 产生 与 重复 调用 choice  不同的 序列
 choices  使用 的算法 使用 浮点 运算 来实现 内 部 一致性 和 速度
 choice  使用 的算法 默认为 重复 选择 的 整数 运算 以 避免 因 舍入 误 差 引 起 的 小 偏 差
3
6 新版功能
 在3
9 版更改 如果所 有 权重 均 为负值 则将引发 valueerror
shufflex  random  将 序列 x  随机 打 乱 位置
 可选参数 random  是一个0 参数 函数 在0
0 中 返回 随机 浮点数 默认情况下 这是 函数 random 
 要 改变 一个 不可变的 序列 并 返回一个新的 打 乱 列表 请使用 samplex  klenx
 请注意 即使 对 于 小 的 lenxx  的 排列 总 数 也可以 快速 增 长 大于 大 多 数 随机数生成器 的 周期
 这意味着 长 序列 的 大多数 排列 永远不 会产生
 例如 长度为2080 的 序列 是 可以在 mersenne  twister  随机数生成器 的 周期 内 拟 合 的最大 序列
11 可选 形参 random
samplepopulation  k  countsnone  返回 从 总 体 序列或 集合 中选择 的唯一 元素 的 k  长度 列表
 用 于 无 重复 的 随机 抽 样
 返回包含 来自 总 体 的 元素 的 新 列表 同时 保持 原始 总 体 不变
 结果 列表 按 选 择 顺序 排列 因此 所有子 切片 也 将 是有效的 随机 样本
 这允许 抽 奖 获 奖 者 样本 被 划 分 为 大 奖 和 第二 名 获 胜 者 子 切片
 总 体 成员 不必 是 hashable  或 unique 
 如果 总 体 包含 重复 则 每次 出现 都 是 样本 中 可能的 选择
 重复 的 元素 可以 一个 个 地 直接 列出 或 使用 可选的 仅限 关键字形参 counts  来指定
 例如 samplered  blue  counts 42 k 5 等价于 samplered  red  red  red  blue  blue  k 5
 要 从 一系列 整数 中选择 样本 请使用 range  对象 作为参数
 对 于 从 大 量 人 群 中 采样 这种 方法 特别 快速 且 节 省 空间 samplerange 10000000 k 60
 如果 样本 大小 大于 总 体 大小 则引发 valueerror 
 在3
9 版更改 增加了 counts  形参
3
9 版后已移除 在 将 来 population  必须是一个 序列
 set  的 实例 将不再 被 支持
 集合 必须 先 转换为 list  或 tuple  最好 是 固定 顺序 以 使 抽 样 是 可 重 现 的
 实 值 分布
 以下函数 生成 特定的 实 值 分布
 如 常 用 数学 实 践 中 所使用的 那样 函数 参数 以 分布 方 程 中 的相应 变量 命名 大多数 这些方 程 都可以 在任何 统计 学 教 材 中找到
random  返回0
01
0 范围内 的下一个 随机 浮点数
uniforma  b  返回 一个 随机 浮点数 n  当 a  b  时 a  n  b  当 b  a  时 b  n  a 
 取决于 等 式 a  ba  random  中 的 浮点 舍入 终 点 b  可以 包括 或 不包括 在 该 范围内
triangularlow  high  mode  返回 一个 随机 浮点数 n  使得 low  n  high  并 在这些 边界 之间 使 用 指定 的 mode 
 low  和 high  边界 默认为 零 和 一
 mode  参数默 认为 边界 之间的 中 点 给出 对 称 分布
betavariatealpha  beta  beta  分布
 参数 的 条件 是 alpha 0 和 beta 0
 返回值 的范围 介 于0 和1 之间
expovariatelambd  指 数 分布
 lambd  是1
0 除 以 所需的 平均值 它应该 是 非零 的
 该 参 数 本 应 命名为 lambda  但 这是 python  中 的 保留 字
 如果 lambd  为 正则 返回值 的范围 为0 到 正 无穷大 如果 lambd  为负 则返回 值 从 负 无穷大 到0
random
gammavariatealpha  beta  gamma  分布
 不 是 gamma  函数 参数 的 条件 是 alpha 0 和 beta 0
 概率 分布 函数 是 x  alpha 1 math
expx  beta  pdfx  math
gammaalpha  beta  alpharandom
gaussmu  sigma  高 斯 分布
 mu  是 平均值 sigma  是 标准差
 这 比 下面 定义 的 normalvariate  函数 略 快
 多线程 注意 事项 当 两个 线程 同时 调用此方法 时 它们 有可能 将 获得 相同 的 返回值
 这可以通过 三种 办 法 来避免
1 让 每个 线程 使用 不同的 随机数生 成器 实例
2 在所有 调用 外 面 加 锁
3 改 用 速度 较 慢 但 是线程安全的 normalvariate  函数
random
lognormvariatemu  sigma  对 数 正态分布
 如果你 采 用这个 分布的 自然 对 数 你 将 得到 一个 正态分布 平均值 为 mu  和 标准差 为 sigma 
 mu  可以是任何 值 sigma  必须 大于 零
random
normalvariatemu  sigma  正态分布
 mu  是 平均值 sigma  是 标准差
random
vonmisesvariatemu  kappa  冯· 米 塞 斯 von  mises  分布
 mu  是 平均 角度 以 弧度 表示 介 于0 和2 pi  之间 kappa  是 浓 度 参数必须 大于 或 等于 零
 如果 kappa  等 于 零 则 该 分布 在0 到2 pi  的 范围内 减 小 到 均 匀 的 随机 角度
paretovariatealpha  帕 累 托 分布
 alpha  是 形状 参数
weibullvariatealpha  beta  威 布尔 分布
 alpha  是 比 例 参数 beta  是 形状 参数
 替代 生成器
 关于 再 现 性 的 说明
 有 时 能够 重 现 伪 随机数生成器 给出的 序列 是 很有用 处 的
 通过 重 用 一个 种子 值 只要 没有 运行 多线程 相同 的 序列 就 应当 可 在 多次 运行 中 重 现
 大多数 随机 模块 的算法 和 种子 函数 都会 在 python  版本中 发生 变化 但 保证 两个 方面 不 会 改变 如果 添加了新的 播 种方法 则 将 提供 向后兼容 的 播 种 机
 当 兼容的 播 种 机 被赋 予 相同 的 种子 时 生成器 的 random  方法 将 继续 产生 相同 的 序列
 例子
 基本 示例 random  random  float 0
split  shuffledeck  shuffle  a  list  deck  four  two  ace  three  sample 1020304050 k 4 four  samples  without  replacement 40105030 模拟 six  roulette  wheel  spins  weighted  sampling  with  replacement  choicesred  black  green 18182 k 6 red  green  black  black  red  black  deal 20 cards  without  replacement  from  a  deck  of 52 playing  cards  and  determine  the  proportion  of  cards  with  a  tenvalue  ten  jack  queen  or  king
7958 statistical  bootstrapping  的 示例 使用 重新 采样 和 替换 来 估 计 一个 样本 的 均 值 的 置 信 区 间 httpstatistics
1 f  使用 重新 采样 排列 测试 来确定 统计 学 显 著 性 或者 使用 p  值 来 观 察 药 物 与 安 慰 剂 的作用 之间 差异的 示例 example  from  statistics  is  easy  by  dennis  shasha  and  manda  wilson  from  statistics  import  fmean  as  mean  from  random  import  shuffle  drug 547353707368526565 placebo 54515844555242475846 observeddiff  meandrug  meanplacebo  n 10000 count 0 combined  drug  placebo  for  i  in  rangen  shufflecombined  newdiff  meancombinedlendrug  meancombinedlendrug  count  newdiff  observeddiff  printfn  label  reshufflings  produced  only  count  instances  with  a  difference  printfat  least  as  extreme  as  the  observed  difference  of  observeddiff
 多 服务器 队列 的 到达 时间 和 服务 交 付 模拟 from  heapq  import  heappush  heappop  from  random  import  expovariate  gauss  from  statistics  import  mean  median  stdev  averagearrivalinterval 5
 参见 statistics  for  hackers  jake  vanderplas  撰写 的 视 频 教程 使用 一些 基本 概念 进行 统计 分析 包括 模拟、 抽 样、 改 组 和 交 叉 验证
 economics  simulation  peter  norvig  编写 的 市 场 模拟 显示了 该模块提供 的 许多 工具 和 分布的 有效 使用 高 斯、 均 匀、 样本、 beta  变量、 选择、 三 角 和 随 机 范围 等
 a  concrete  introduction  to  probability  using  python  peter  norvig  撰写 的 教程 涵盖 了 概率 论 基础 知 识 如何 编写 模拟 以及 如何使用 python  进行 数据 分析
 例 程
 默认 的 random  返回 在0
0≤ x 1
0 范围内2⁻⁵³ 的 倍 数
 所有这些 数值 间隔 相等 并 能 精确 表示为 python  浮点数
 但是 在 此 间隔 上 有许多 其他可 表示 浮点数 是 不可能 的 选择
 例如0
05954861408025609 就不 是2⁻⁵³ 的 整数 倍
 以 下 规范 程序 采 取 了 一 种不同 的方式
 在 间隔 上 的 所有 浮点数 都是可 能 的 选择
 它们的 尾 数 取值 来自2⁵²≤ 尾 数2⁵³ 范围内 整数 的 均 匀 分布
 指 数 取值 则 来自 几 何 分布 其 中 小于53 的指数 的 出现 频 率 为 下 一个 较大 指 数 的 一 半
bitlength 32 return  ldexpmantissa  exponent  该 类 中所有 的 实 值 分布 都 将 使用 新 的 方法 fr  fullrandom  fr
87925541791544 该 规范 程序 在 概念 上 等效 于 在0
0 范围内 对 所有2⁻¹⁰⁷⁴ 的 倍 数进行 选择 的算法
 所有 这样的 数字 间隔 都 相等 但 大多 必须 向下 舍入 为 最接近的 python  浮点数 表示形式
2⁻¹⁰⁷⁴ 这 个 数值 是 等于 math
0 的 未 经 正 规 化 的最小 正 浮点数
 参见 生成 伪随机 浮点数 值 为 allen  b
 downey  所 撰写 的描述 如何 生成 相比 通过 random  正常 生成 的 数值 更 细 粒 度 浮点数 的 论 文
asyncio  异步 io
runmainasyncio  是 用来 编写 并 发 代码 的 库 使用 asyncawait  语法
asyncio  被用作 多个 提供 高 性能 python  异步 框架 的基础 包括 网络 和 网 站 服务 数据库 连接 库 分布 式 任务 队列 等等
asyncio  往往 是 构建 io  密集 型 和 高层级 结构化 网络 代码 的最佳 选择
asyncio  提供一 组 高层级 api  用 于 并 发 地 运行 python  协程 并 对 其 执行 过程 实现 完全 控制 执行 网络 io  和 ipc  控制 子进程 通过 队列 实现 分布 式 任务 同步 并 发 代码 此外还 有一些 低层级 api  以 支持 库 和 框架 的 开发者 实现 创建 和 管理 事件循环 以提供 异步 api  用 于 网络 化 运行 子进程 处 理 os  信号 等等 使用 transports  实现 高 效率 协议 通过 asyncawait  语法 桥 接 基于 回调 的 库 和 代码
 参考 引用 高层级 api  协程 与 任务 流 同步 原语 子进程 队列 集 异常 低层级 api  事件循环 futures  传输 和 协议 策略 平台 支持 指南 与 教程 高层级 api  索引 低层级 api  索引 用 asyncio  开发 注解 asyncio  的 源代码 可以在 libasyncio  中找到
xmlsaxhandler  base  classes  for  sax  handlers
contenthandler  对象
 注解 the  earlier  sax 1 interface  provided  by  the  python  xml  special  interest  group  used  a  more  javalike  interface  for  this  method
dtdhandler  对象
entityresolver  对象
errorhandler  对象
queue  一个 同步 的 队列 类
 源代码 libqueue
pyqueue  模块实现了 多 生产 者、 多 消费者 队列
 这 特别 适用于 消息 必须 安全地 在 多线程 间 交换 的 线程 编程
 模块中的 queue  类 实现了 所有 所需的 锁定 语义
 模块实现了 三 种类型的 队列 它们的 区别 仅仅 是 条目 取 回 的顺序
 在 fifofirstin  firstout  队列中 先 添加 的 任务 先 取 回
 在 lifo  lastinfirstout  队列中 最近 被添加 的 条目 先 取 回 操作 类似 一个 堆栈
 优先级 队列中 条目 将 保持 排序 使用 heapq  模块 并且 最小 值 的 条目 第一个 返回
 在内部 这 三个 类型 的 队列 使用 锁 来 临时 阻塞 竞 争 线程 然而 它们 并 未 被设计用 于 线程 的 重入 性 处理
 此外 模块实现了 一个 简单的 fifo  firstin  firstout  队列 类型 simplequeue  这 个特殊 实现 为 小 功能 在 交换 中 提供 额外的 保 障
queue  模块定义了 下列 类 和 异常 class  queue
lifoqueuemaxsize 0 lifo  lastin  firstout  队列 构造函数
 maxsize  是 个整数 用 于 设 置 可以 放入 队列中 的项目 数 的 上限
 当 达到 这 个 大小 的时候 插入 操作 将 阻 塞 至 队列中 的项目 被 消费 掉
 如果 maxsize  小于 等于 零 队列 尺寸 为 无限 大
priorityqueuemaxsize 0 优先级 队列 构造函数
 maxsize  是 个整数 用 于 设置 可以 放入 队列 中的项 目 数 的 上限
 当 达到 这 个 大小 的时候 插入 操作 将 阻塞 至 队列中 的项目 被 消 费 掉
 如果 maxsize  小于 等于 零 队列 尺寸 为 无限 大
 最小 值 先 被 取出 最小 值 条目 是 由 sortedlistentries 0 返回 的 条 目
 条目 的 典型 模式 是一个 以 下 形式 的 元组 prioritynumber  data 
 如果 data  元素 没有可 比 性 数据 将 被 包装 在 一个 类 中 忽略 数据 值 仅 仅 比较 优先级 数字 from  dataclasses  import  dataclass  field  from  typing  import  any  dataclassordertrue  class  prioritizeditem  priority  int  item  anyfieldcomparefalseclass  queue
simplequeue  无 界 的 fifo  firstin  firstout  队列 构造函数
 简单的 队列 缺少 任 务 跟踪 等 高级 功能
3
7 新版功能
empty  对 空 的 queue  对象 调用 非阻塞 的 get  or  getnowait  时 引发的异常
full  对 满 的 queue  对象 调用 非阻塞 的 put  or  putnowait  时 引发的异常
queue  对象
 队列 对象 queue  lifoqueue  或者 priorityqueue  提供 下列 描述 的 公共 方法
qsize  返回 队列 的 大致 大小
 注意 qsize 0 不保证 后续的 get  不 被阻塞 qsize  maxsize  也 不保证 put  不 被阻塞
empty  如果 队列 为空 返回 true  否则返回 false 
 如果 empty  返回 true  不保证 后续调用 的 put  不 被阻塞
 类似 的 如果 empty  返回 false  也 不保证 后续调用 的 get  不 被阻塞
full  如果 队列 是 满 的 返回 true  否则返回 false 
 如果 full  返回 true   不保证 后续调用 的 get  不 被阻塞
 类似 的 如果 full  返回 false  也 不保证 后续调用 的 put  不 被阻塞
putitem  blocktrue  timeoutnone  将 item  放入 队列
 如果可选 参数 block  是 true  并且 timeout  是 none  默认 则 在必要时 阻塞 至 有 空 闲 插 槽 可 用
 如果 timeout  是 个 正 数 将 最多 阻塞 timeout  秒 如果在 这 段 时间 没有可用 的 空 闲 插 槽 将 引发 full  异常
 反 之 block  是 false  如果 空 闲 插 槽 立即 可用则 把 item  放入 队列 否则 引发 full  异常 在这种情况下 timeout  将被忽略
putnowaititem  相当于 putitem  false 
getblocktrue  timeoutnone  从 队列 中移除 并返回一个 项目
 如果可选 参数 block  是 true  并且 timeout  是 none  默认值 则 在必要时 阻塞 至 项目 可 得到
 如果 timeout  是 个 正 数 将 最多 阻塞 timeout  秒 如果在 这 段 时间 内 项目 不 能 得到 将引发 empty  异常
 反 之 block  是 false  如果一个 项目 立即 可 得到 则返回 一个 项目 否则 引发 empty  异常 这种情况下 timeout  将被忽略
 posix  系统3
0 之前 以及 所有 版本 的 windows  系统中 如果 block  是 true  并且 timeout  是 none  这 个操作 将 进入 基础 锁 的 不 间 断 等待
 这 意 味着 没有 异常 能 发生 尤其 是 sigint  将不会 触发 keyboardinterrupt  异常
getnowait  相当于 getfalse 
 提供了 两个方法 用 于 支持 跟踪 排 队 的 任务 是否 被 守护 的 消费者 线程 完整的 处理
taskdone  表示 前面 排 队 的 任务 已经被 完成
 被 队列 的 消费者 线程 使用
 每个 get  被用于 获取一个 任务 后续调用 taskdone  告诉 队列 该 任务 的 处理 已经 完成
 如果 join  当前 正 在 阻塞 在所有 条目 都 被 处理 后 将 解 除 阻塞 意味着 每个 put  进 队列 的 条目 的 taskdone  都 被 收到
 如果 被调用 的 次 数 多 于 放入 队列中 的项目 数量 将引发 valueerror  异常
join  阻塞 至 队列中 所有的 元素 都 被 接收 和 处理 完毕
 当 条目 添加到 队列 的时候 未 完成 任务 的计数 就会 增加
 每 当 消费者 线程 调 用 taskdone  表示 这 个条目 已经被 回收 该 条目 所有 工作 已经 完成 未 完成 计数 就会 减少
 当 未 完成 计数 降 到 零 的时候 join  阻塞 被 解 除
 如何 等待 排 队 的 任务 被 完成 的 示例 import  threading  queue  q  queue
simplequeue  对象
simplequeue  对象提供 下列 描述 的 公共 方法
qsize  返回 队列 的 大致 大小
 注意 qsize 0 不保证 后续的 get  不 被阻塞
empty  如果 队列 为空 返回 true  否则返回 false 
 如果 empty  返回 false  不保证 后续调用 的 get  不 被阻塞
putitem  blocktrue  timeoutnone  将 item  放入 队列
 此方法 永 不 阻塞 始终 成功 除了 潜在 的 低 级 错误 例如 内存分配 失败
 可选参数 block  和 timeout  仅仅 是为了 保持 queue
put  的 兼容性 而 提供 其 值 被忽略
putnowaititem  相当于 putitem  仅 为 保持 queue
putnowait  兼容性 而 提供
getblocktrue  timeoutnone  从 队列 中移除 并返回一个 项目
 如果可选 参数 block  是 true  并且 timeout  是 none  默认值 则 在必要时 阻塞 至 项目 可 得到
 如果 timeout  是 个 正 数 将 最多 阻塞 timeout  秒 如果在 这 段 时间 内 项目 不 能 得到 将引发 empty  异常
 反 之 block  是 false  如果一个 项目 立即 可 得到 则返回 一个 项目 否则 引发 empty  异常 这种情况下 timeout  将被忽略
getnowait  相当于 getfalse 
 参见 类 multiprocessing
queue  一个用于 多 进程 上下文 的 队列 类 而不是 多线程
deque  是 无 界 队列 的 一个 替代 实现 具有 快速 的 不需要 锁 并且 支持 索引 的 原子 化 append  和 popleft  操作
mmap  内存 映射 文件 支持
madv  constants
3
8 新版功能
struct  将 字节串 解读为 打包的 二进制数据
 源代码 libstruct
py  此 模块可以 执行 python  值 和 以 python  bytes  对象 表示 的 c  结构 之间的 转换
 这可以 被用来 处理 存储在 文件 中 或 是 从 网络 连接 等 其他 来源 获取 的 二进制数据
 它 使用 格式字符串 作为 c  结构 布局 的 精 简 描述 以及 与 python  值 的 双 向 转换
 注解 默认情况下 打包 给定 c  结构 的 结果会 包含 填充 字节 以 使得 所 涉及 的 c  类型 保持 正确的 对齐 类似地 对齐 在 解包 时 也会 被 纳 入 考虑
 选择 此 种 行为 的 目 的 是 使得 被 打包 结构 的 字节 能 与 相应 c  结构 在内存中 的 布局 完全 一致
 要 处理 平台 独立的 数据格式 或 省略 隐式 的 填充 字节 请使用 standard  大小和 对齐 而不是 native  大小和 对齐 详情参见 字节顺序 大小和 对齐方 式
 某些 struct  的 函数 以及 struct  的 方法 接受一个 buffer  参数
 这 将 指向 实现了 缓冲协议 并 提供 只读 或 是 可 读写 缓冲 的 对象
 用 于 此 目 的 的 最常见 类型 为 bytes  和 bytearray  但 许多 其他可 被视为 字节数组 的 类型 也 实现了 缓冲协议 因此 它们 无需 额外 从 bytes  对象 复制 即可 被 读取 或 填充
 函数 和 异常
 格式字符串
 格式字符串 是 用来 在 打包 和 解包 数据 时 指定 预期 布局 的机制
 它们 使用 指定 被 打包 解包 数据类型 的 格式字符 进行 构建
 此外还 有一些 特殊 字符 用来 控制 字节顺序 大小和 对齐方 式
 字节顺序 大小和 对齐方 式
 格式字符
 示例
 注解 所有 示例 都 假定 使用 一 台 大 端 机器 的 本机 字节顺序、 大小和 对齐方 式
 打包 解包 三个 整数 的基础 示例 from  struct  import  packhhl 123 bx 00 x 01 x 00 x 02 x 00 x 00 x 00 x 03 unpackhhl  bx 00 x 01 x 00 x 02 x 00 x 00 x 00 x 03123 calcsizehhl 8 解包 的 字段 可通过 将它们 赋值给 变量 或 将结果 包装 为 一个 具 名元组 来 命名 record  braymond  x 32 x 12 x 08 x 01 x 08 name  serialnum  school  gradelevel  unpack 10 shhb  record  from  collections  import  namedtuple  student  namedtuplestudent  name  serialnum  school  gradelevel  student
makeunpack 10 shhb  record  studentnamebraymond  serialnum 4658 school 264 gradelevel 8 格式字符 的顺序 可能 对 大小 产生 影响 因为 满足 对齐 要求 所需的 填充 是 不同的 packci  b 0 x 12131415 bx 00 x 00 x 00 x 12 x 13 x 14 x 15 packic 0 x 12131415 b  bx 12 x 13 x 14 x 15 calcsizeci 8 calcsizeic 5 以 下 格式 llh 0 l  指定 在 末尾 有两个 填充 字节 假定 long  类型 按4 个字节 的 边界 对齐 packllh 0 l 123 bx 00 x 00 x 00 x 01 x 00 x 00 x 00 x 02 x 00 x 03 x 00 x 00 这 仅当 本机 大小和 对齐方 式 生效 时才会 起作用 标准 大小和 对齐方 式 并不会 强制 进行 任何 对齐
 参见 模块 array  被 打包 为 二进制 存储 的 同 质 数据
 模块 xdrlib  打包 和 解包 xdr  数据
 类
struct  模块还 定义了以下 类型 class  struct
structformat  返回一个新的 struct  对象 它 会 根据 格式字符串 format  来 写入 和 读取 二进制数据
 一次性 地 创建 struct  对象 并 调用 其 方法 相比 使用 同样的 格式 调用 struct  函数 更 为 高效 因为 这样 格式字符串 只需 被 编译 一次
 注解 传递给 struct  和 模块层级 函数 的 已编译 版 最新 格式字符串 会 被 缓存 因此 只 使用 少 量 格式字符串 的 程序 无需 担 心 重 用 单独的 struct  实例
 已编译 的 struct  对象 支持 以下方法 和 属性 packv 1 v 2
 等价于 pack  函数 使用了 已编译 的 格式
 lenresult  将 等于 size
 等价于 packinto  函数 使用了 已编译 的 格式
 unpackbuffer  等价于 unpack  函数 使用了 已编译 的 格式
 缓冲区 的 字节 大小 必 须 等于 size
 unpackfrombuffer  offset 0 等价于 unpackfrom  函数 使用了 已编译 的 格式
 缓冲区 的 字节 大 小 从 位置 offset  开始 必须 至少 为 size
 iterunpackbuffer  等价于 iterunpack  函数 使用了 已编译 的 格式
 缓冲区 的大小 必 须 为 size  的 整数 倍
3
4 新版功能
 format  用 于 构造 此 struct  对象 的 格式字符串
 在3
7 版更改 格式字符串 类型 现在是 str  而不再 是 bytes
 size  计算 出 对应于 format  的 结构 大小 亦 即 pack  方法 所产生 的 字节 串对象 的大小
netrc  netrc  文件 处理
 源代码 libnetrc
pynetrc  类 解析 并 封装 了 unix  的 ftp  程序 和其他 ftp  客户端 所使用的 netrc  文件格式
netrcfile  netrc  的 实例 或其子 类的实例 会 被用来 封装 来自 netrc  文件 的 数据
 如 果 有 初始化 参数 它 将 指明 要 解析 的 文件
 如果未 给出 参数则 位于 用户 家 目录 的
netrc  文件 即 os
expanduser  所 确定 的 文件 将会被 读取
 在其他情况下 则将引发 filenotfounderror  异常
 解析 错误 将引发 netrcparseerror  并附带 诊 断 信息 包括 文件名、 行 号 以及 终 止 令 牌
 如果在 posix  系统上 未 指明 参数则 当
netrc  文件 中 有 密码 时 如果文件 归 属 或 权限 不安全 归 属 的 用户 不 是 运行 进程 的 用户 或者 可 供 任何其他 用户 读取或写入 将引发 netrcparseerror
 这 实现了 与 ftp  和其他 使用
netrc  的 程序 同 等 的 安全 行为
 在3
4 版更改 添加了 posix  权限 检查
 在3
7 版更改 当 未 将 file  作为参数 传入 时 会 使用 os
expanduser  来 查找
netrc  文件 的 位置
netrcparseerror  当 在 源 文本 中 遇到 语法错误 时 由 netrc  类 引发的异常
 此 异常 的 实例 提 供 了 三个 有 用 属性 msg  为 错误 的 文本 说明 filename  为 源文件 的 名 称 而 lineno  给出了 错误 所在的 行 号
netrc  对象
netrc  实例 具有 下列方法 netrc
authenticatorshost  针对 host  的 身 份 验证 者 返回 一个3 元组 login  account  password
 如果 netrc  文件 不包含 针对 给定 主机 的 条目 则返回 关联到 default  条目 的 元组
 如果 匹配 的 主机 或 默认 条目 均 不可用 则返回 none
repr  将 类 数据 以 netrc  文件 的 格式 转 储为 一个字符串
 这 会 丢弃 注释 并 可能 重 排 条目 顺序
netrc  的 实例 具有 一些 公共 实例变量 netrc
hosts  将 主机名 映射到 login  account  password  元组 的字典
 如果存在 default  条目 则 会 表示为 使用 该名称 的 伪 主机
macros  将 宏 名称映射 到 字符串列表 的字典
 注解 密码 会 被 限制为 ascii  字符 集 的一个子 集
 所有 ascii  标 点 符号 均 可用作 密码 但是 要注意 空白符 和 非 打印 字符 不允许 用 作 密码
 这是
netrc  文件 解析 方式 带 来 的 限制 在未来 可能 会被解 除
tkintercolorchooser  颜色 选择 对话框
 源代码 libtkintercolorchooser
pytkinter
colorchooser  模块提供了 chooser  类 作为 原生 颜色 选择 对话框的 接口
 chooser  实现了 一个 模式 颜色 选择 对话框 窗口
 chooser  类 继承自 dialog  类
askcolorcolornone  options  创建一个 颜色 选择 对话框
 调用此方法 将显示 相应 窗口 等待 用户 进行 选择 并 将 选择 的 颜色 或 none  返回给 调用者
 参见 模块 tkinter
commondialog  tkinter  标准 对话框 模块
cgi  common  gateway  interface  support
 源代码 libcgi
 概述
 使用 cgi  模块。
 通过 敲 下 import  cgi  来 开始
 当你 在 写 一个 新 脚本 时 考虑 加上 这些 语句 import  cgitb  cgitb
 在3
4 版更改 the  file  attribute  is  automatically  closed  upon  thegarbage  collection  of  the  creating  fieldstorage  instance
 在3
5 版更改 added  support  for  the  context  management  protocol  tothe  fieldstorage  class
higher  level  interface
 函数
 在3
7 版更改 added  the  encoding  and  errors  parameters
 for  nonfile  fields  the  value  is  now  a  list  of  strings  not  bytes
caring  about  security
installing  your  cgi  script  on  a  unix  system
testing  your  cgi  script
debugging  cgi  scripts
common  problems  and  solutions
 脚注1 note  that  some  recent  versions  of  the  html  specification  do  state  what  order  the  field  values  should  be  supplied  in  but  knowing  whether  a  request  was  received  from  a  conforming  browser  or  even  from  a  browser  at  all  is  tedious  and  errorprone
thread  底层 多线程 api
shutil  高阶 文件 操作
 源代码 libshutil
pyshutil  模块提供了 一系列 对 文件 和 文件 集合 的 高阶 操作
 特别是 提供了一些 支持 文件 拷贝 和 删除 的 函数
 对 于 单个 文件 的 操作 请参阅 os  模块
 警告 即 便 是 高阶 文件 拷贝 函数 shutil
copy  shutil
copy 2 也 无法 拷 贝 所有的 文件 元数据
 在 posix  平台上 这意味着 将 丢失 文件 所有 者 和 组 以 及 acl  数据
 在 mac  os  上 资源 钩子 和其他 元数据 不 被使用
 这意味着 将 丢失 这些 资源 并且 文件类型 和 创建 者 代码 将 不正确
 在 windows  上 将 不 会 拷贝 文件 所有 者、 acl  和 替代 数据流
 目录 和 文件 操作
 依赖于 具体 平台 的 高效 拷贝 操作
 从 python 3
8 开始 所有 涉及 文件 拷贝 的 函数 copyfile  copycopy 2 copytree  以及 move  将 会 使用 平台 专属的 fastcopy  系统调用 以便 更 高效 地 拷贝 文件 参见 bpo 33671
 fastcopy  意味着 拷贝 操作 将 发生 于 内 核 之 中 避免 像 在 outfd
read  中 那样 使用 用户 空间 的 缓冲区
 在 macos  上 将 会 使用 fcopyfile  来 拷贝 文件 内容 不 含 元数据
 在 linux  上 将 会 使用 os
sendfile
 在 windows  上 shutil
copyfile  将 会 使用 更大 的 默认 缓冲区1 mib  而非64 kib  并且 会 使用 基于 memoryview  的 shutil
copyfileobj  变种 形式
 如果 快速 拷贝 操作 失败 并且没有 数据 被写入 目标 文件 则 shutil  将 在内部 静默地 回退 到 使用 效率 较 低 的 copyfileobj  函数
 在3
8 版更改
copytree  示例
 这 个 示例 就是 上面 所描述的 copytree  函数 的 实现 其 中 省略 了 文档字符串
 它还 展示了 此模块 所提供的 许多 其他 函数
extendsrc  dst  strwhy  if  errors  raise  errorerrors  另一个 使用 ignorepatterns  辅助函数 的 例子 from  shutil  import  copytree  ignorepatterns  copytreesource  destination  ignoreignorepatterns
pyc  tmp  这 将 会 拷贝 除
pyc  文件 和 以 tmp  打头 的 文件 或 目录 以外的 所有 条目
 另一个 使用 ignore  参数 来 添加 记录 调用 的 例子 from  shutil  import  copytree  import  logging  def  logpathpath  names  logging
rmtree  示例
 这个例子 演示了如何 在 windows  上 删除 一个 目录 树 其 中 部分 文件 设置了 只读 属性 位
 它 会 使用 onerror  回调函数 来 清除 只读 属性 位 并 再次 尝试 删除
 任何 后续的 失败 都 将 被传播
 归档 操作
 归档 程序 示例
 在这个 示例中 我们 创建了 一个 gzip  压缩 的 tar  归档 文件 其中包含 用户 的
ssh  目录 下 的 所有 文件 from  shutil  import  makearchive  import  os  archivename  os
gz  结果 归档 文件 中包含 有 tar  tzvf  userstarekmyarchive
 使用 basedir  的归档 程序 示例
 在 这个例子 中 与 上面的例子 类似 我们 演示了如何 使用 makearchive  但 这 次 是 使用 basedir
 我们 现 在具有 如 下 的 目录 结构 tree  tmp  tmp └── root └── structure ├── content └── pleaseadd
txt  在 最终 的归档 中 应当 会 包括 pleaseadd
txt  但不 应当 包括 donotadd
txt
 因此 我们 使用 以下代码 from  shutil  import  makearchive  import  os  archivename  os
tar  列出 结果 归档 中的文件 我们将 会 得到 python  m  tarfile  l  userstarekmyarchive
 查询 输出 终端 的 尺寸
getterminalsizefallbackcolumns  lines  获取 终端 窗口 的 尺寸
 对 于 两个 维 度 中的每 一个 会 分别 检查 环境变量 columns  和 lines
 如果定义了 这些 变量 并且 其 值 为 正整数 则 将 使用这些 值
 如果未 定义 columns  或 lines  这是 通常 的 情况 则 连接到 sys
stdout  的 终端 将 通过 发起调用 os
getterminalsize  被 查 询
 如果 由 于 系统 不支持 查询 或 是由于 我们 未 连接到 某个 终端 而 导致 查询 终端 尺寸 不 成功 则会使用 在 fallback  形参 中 给出的 值
 fallback  默认 为8024 这是 许多 终端 模拟 器 所使用的 默认 尺寸
 返回 的值是 一个 os
terminalsize  类型 的 具 名元组
 另请参阅 the  single  unix  specification  version 2 other  environment  variables
3
3 新版功能
poplib  pop 3 protocol  client
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socket
 在3
2 版更改 context  parameter  added
 在3
4 版更改 the  class  now  supports  hostname  check  with  ssl
3
6 版后已移除 keyfile  and  certfile  are  deprecated  in  favor  of  context
 please  use  ssl
loadcertchain  instead  or  let  ssl
createdefaultcontext  select  the  systems  trusted  ca  certificates  for  you
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socket
 参见 module  imaplib  the  standard  python  imap  module
pop 3 objects
3
4 新版功能
3
5 新版功能
3
4 新版功能
pop 3 example
zipimport  从 zip  存档 中 导入模块
 源代码 libzipimport
py  此模块 添加了 从 zip  格式 档案 中 导入 python  模块
py 
pyc  和 包 的能力
 通常 不需要 明确 地 使用 zipimport  模块 内置的 import  机制 会自动 将 此模块 用 于 zip  档案 路径 的 sys
path  项目 上
 通常 sys
path  是 字符串 的 目录 名称 列表
 此模块 同样 允许 sys
path  的 一 项 成为 命名 zip  文件 档案 的 字符串
 zip  档案 可以 容 纳 子目录 结构 去 支持 包 的 导入 并且 可以将 归档 文件中的 路径 指定 为 仅 从 子目录 导入
 比如 说 路径 example
ziplib  将 只会 从 档案 中 的 lib  子目录 导入
 任何 文件 都可以 存在于 zip  档案 之 中 但是 只有
py  和
pyc  文件 是 能够 导入 的
 不允许 导入 zip  中 的动态 模 组
pyd 
so 
 请注意 如果 档案 中 只包含
py  文件 python  不 会 尝试 通过 添加 对应的
pyc  文件 修改 档案 意 思 是如果 zip  档案 不包含
pyc  文件 导入 或 许 会 变 慢
 在3
8 版更改 以 前 不支持 带有 档案 注释 的 zip  档案
 参见 pkzip  application  note  phil  katz  编写 的 zip  文件格式 文档 此 格式 和 使用 的 算法的 创建 者
 pep 273  从 zip  压缩 包 导入模块 由 james  c
 ahlstrom  编写 他 也 提供了 实现
3 遵循 pep 273 的规范 但是 使用 just  van  rossum  编写 的 使用了 pep 302 中描述的 导入 钩 的 实现
 pep 302 新 导入 钩 pep  添加 导入 钩 来 有 助 于 模块 运 作
 此 模块定义了 一个异常 exception  zipimport
zipimporterror  异常 由 zipimporter  对象 引发
 这是 importerror  的子类 因此 也可 以 捕获 为 importerror 
zipimporter  对象
zipimporter  是用于 导入 zip  文件 的 类
zipimporterarchivepath  创建新的 zipimporter  实例
 archivepath  必须是 指向 zip  文件 的 路径 或者 zip  文件中的 特定 路径
 例如 foobar
ziplib  的 archivepath  将 在 zip  文件 foobar
zip  中 的 lib  目录 中查找 模块 只要 它 存 在
 如果 archivepath  没有 指向 一个有效的 zip  档案 引发 zipimporterror 
 findmodulefullname  path  搜索 由 fullname  指定 的 模块
 fullname  必须是 完全 合 格 的 点 分 的模块名
 它 返回 zipimporter  实例 本身 如果模块 被 找到 或者 返回 none  如果没 找到 指定 模块
 可选的 path  被忽略 这 是为了 与 导入 器协议 兼容
 getcodefullname  返回 指定 模块 的 代码对象
 如果不 能 找到 模块 会引发 zipimporterror  错误
 getdatapathname  返回 与 pathname  相关联 的 数据
 如果不 能 找到 文件 则引发 oserror  错误
 在3
3 版更改 曾 经 是 ioerror  被引发 而不是 oserror 
 getfilenamefullname  如果 导入 了 指定 的 模块 file  则返回 为 该模块 设置 的 值
 如果未 找到 模块 则引发 zipimporterror  错误
3
1 新版功能
 getsourcefullname  返回 指定 模块 的 源代码
 如果没有 找到 模块 则引发 zipimporterror  如果 档案 包含 模块 但 是没有 源代码 返回 none 
 ispackagefullname  如果 由 fullname  指定 的 模块 是一个包 则返回 true 
 如果不 能 找到 模块 则引发 zipimporterror  错误
 loadmodulefullname  加载 由 fullname  指定 的 模块
 fullname  必须是 完全 限定 的 点 分 的模块名
 它 返回 已 加载 模块 或者 当 找不到 模块 时引发 zipimporterror  错误
 archive  导入 器 关联的 zip  文件 的文件名 没 有可能的 子 路径
 prefix  zip  文件 中搜索 的 模块 的 子 路径
 这是一个 指向 zip  文件 根 目录 的 zipimporter  对象 的 空字符串
 当 与 斜杠 结合 使用 时 archive  和 prefix  属性 等价于 赋 予 zipimporter  构造器 的 原始 archivepath  参数
 示例
 这是一个 从 zip  档案 中 导入模块 的 例子 请注意 zipimport  模块 不需要 明确 地 使用
heapq  堆 队列 算法
 源码 libheapq
py  这 个 模块提供了 堆 队列 算法的 实现 也 称为 优先 队列 算法
 堆 是一个 二 叉 树 它 的 每个 父 节点 的 值 都 只会 小于 或 大于 所有 孩 子 节点 的 值
 它 使用了 数组 来实现 从 零 开始 计数 对 于所有 的 k  都有 heapk  heap 2 k 1 和 heapk  heap 2 k 2
 为 了 便 于 比较 不存在 的 元素 被认为 是 无限 大
 堆 最 有趣 的 特性 在 于 最小的 元素 总是 在 根 结 点 heap 0
 这 个 api  与 教 材 的 堆 算法 实现 有 所 不同 具体 区别 有两 方面 a  我们 使用了 从 零 开始 的 索引
 这使得 节点 和 其 孩 子 节点 索引 之间的 关系 不太 直 观 但 更 加 适合 因为 python  使用 从 零 开始 的 索引
 b  我们 的 pop  方法 返回 最小的 项 而不是 最大 的 项 这 在 教 材 中 称为 最小 堆 而 最大 堆 在 教 材 中 更 为 常见 因为它 更 适用于 原地 排序
 基于 这两 方面 把 堆 看 作 原生 的 python  list  也 没 什么 奇 怪 的 heap 0 表示 最小的 元素 同时 heap
sort  维护 了 堆 的 不变 性 要 创建一个 堆 可以使用 list  来 初始化 为 或者 你可以通过 一个 函数 heapify  来 把 一个 list  转换成 堆
 定义了以下函数 heapq
heappushheap  item  将 item  的 值 加入 heap  中 保持 堆 的 不变 性
heappopheap  弹出 并返回 heap  的最小 的 元素 保持 堆 的 不变 性
 如果 堆 为空 抛出 indexerror  
 使用 heap 0 可以 只 访问 最小的 元素 而 不 弹出 它
heappushpopheap  item  将 item   放入 堆中 然后 弹出 并返回 heap  的最小 元素
 该 组合 操作 比 先 调用  heappush  再 调用 heappop  运行 起来 更 有 效率
heapifyx  将 list  x  转换成 堆 原地 线 性 时间 内
heapreplaceheap  item  弹出 并返回 heap  中 最小的 一 项 同时 推 入 新 的 item
 堆 的大小 不变
 如果 堆 为空 则引发 indexerror
 这 个 单 步骤 操作 比 heappop  加 heappush  更 高效 并且 在 使用 固定 大小 的 堆 时 更 为 适 宜
 poppush  组合 总是会 从 堆中 返回 一个元素 并将其 替 换为 item
 返回 的 值可能 会 比 添加 的 item  更大
 如果不 希望 如 此 可 考虑 改 用 heappushpop
 它 的 pushpop  组合 会返回 两个值 中 较 小 的 一个 将 较 大 的 值 留 在 堆中
 该模块 还提供了 三个 基于 堆 的通用 功能 函数
mergeiterables  keynone  reversefalse  将 多个 已 排序 的 输入 合并 为 一个 已 排序 的 输出 例如 合并 来自 多个 日志 文 件 的 带 时间戳 的 条目
 返回 已 排序 值 的 iterator
 类似于 sorteditertools
chainiterables  但 返回 一个 可迭代对象 不 会 一次性 地 将 数据 全部 放入 内存 并 假定 每个 输入 流 都 是 已 排序 的 从 小 到 大
 具有 两个 可选参数 它们都 必须 指定 为 关键字参数
 key  指定 带有 单个 参数 的 key  function  用于从 每个 输入 元素 中提取 比 较 键
 默认值为 none  直接 比较 元素
 reverse  为 一个 布尔值
 如果设 为 true  则 输入 元素 将按 比较 结果 逆 序 进行 合并
 要 达 成 与 sorteditertools
chainiterables  reversetrue  类似 的 行为 所有 可迭代对象 必须是 已从 大 到 小 排序 的
 在3
5 版更改 添加了 可选的 key  和 reverse  形参
nlargestn  iterable  keynone  从 iterable  所定义的 数据 集 中 返回 前 n  个 最大 元素 组成的列表
 如 果提供了 key  则 其 应 指定一个 单 参数的函数 用于从 iterable  的 每个 元素 中提取 比较 键 例如 keystr
 等价于 sortediterable  keykey  reversetruen
nsmallestn  iterable  keynone  从 iterable  所定义的 数据 集 中 返回 前 n  个 最小 元素 组成的列表
 如 果提供了 key  则 其 应 指定一个 单 参数的函数 用于从 iterable  的 每个 元素 中提取 比较 键 例如 keystr
 等价于 sortediterable  keykeyn
 后 两个 函数 在 n  值 较 小 时 性能 最好
 对 于 更大 的 值 使用 sorted  函数 会 更 有 效率
 此外 当 n 1 时 使用内置 的 min  和 max  函数 会 更 有 效率
 如果需要 重复 使用 这些函数 请 考虑 将 可迭代对象 转 为 真正 的 堆
 基本 示例
 优先 队列 实现 说明
 优先 队列 是 堆 的 常 用 场合 并且它 的 实现 包含了 多个 挑 战 排序 稳定 性 你 该 如何 令 相同 优先级 的两个 任务 按 它们 最初 被加入 时 的顺序 返 回？ 如果 优先级 相同 且 任务 没有 默认 比较 顺序 则 priority  task  对 的 元组 比 较 将 会 中断
 如果 任务 优先级 发生改变 你 该 如何将 其 移至 堆中 的 新 位置？ 或者如果 一个 挂起 的 任务 需要 被 删除 你 该 如何 找到 它 并将其 移 出 队列？ 针对 前 两 项 挑 战 的一种 解决方案是 将 条目 保存 为 包含 优先级、 条目 计数 和 任务 对象3 个元素 的 列表
 条目 计数 可用来 打 破 平 局 这样 具有相同 优先级 的 任务 将按 它们的 添加 顺序 返回
 并且 由 于 没有 哪 两个 条目 计数 是 相同 的 元组 比较 将 永远不 会直接 比较 两个 任务
 不 可 比较 任务 问题 的 另一种 解决方案是 创建一个 忽略 任务 条目 并且 只 比较 优先级 字段 的 包装器 类 from  dataclasses  import  dataclass  field  from  typing  import  any  dataclassordertrue  class  prioritizeditem  priority  int  item  anyfieldcomparefalse  其余 的 挑 战 主要 包括 找到 挂起 的 任务 并 修改 其 优先级 或 将 其 完全 移除
 找到 一个 任务 可 使用 一个指向 队列中 条目 的字典 来实现
 移除 条目 或 改变 其 优先级 的 操作 实现 起来 更 为 困 难 因为它 会破坏 堆 结构 不变量
 因此 一种 可能的 解决方案是 将 条目 标记为 已移除 再 添加一个 改变 了 优先级 的 新 条目 pq  list  of  entries  arranged  in  a  heap  entryfinder  mapping  of  tasks  to  entries  removed  removedtask  placeholder  for  a  removed  task  counter  itertools
 理 论
 堆 是通过 数组 来实现 的 其 中的元素 从0 开始 计数 对 于所有 的 k  都有 ak  a 2 k 1 且 ak  a 2 k 2
 为 了 便 于 比较 不存在 的 元素 被视为 无穷大
 堆 最 有趣 的 特性 在 于 a 0 总是 其 中 最小的 元素
 上面的 特殊 不变量 是 用来 作为一 场 锦 标 赛 的 高效 内存 表示
 下面的 数字 是 k  而不是 ak 0123456789101112131415161718192021222324252627282930 在 上面的 树 中 每个 k  单元 都 位于2 k 1 和2 k 2 之 上
 体 育 运 动 中我们 经常 见 到 二元 锦 标 赛 模式 每个 胜 者 单元 都 位于 另 两个 单元 之 上 并且 我们可以 沿着 树 形 图 向下 追 溯 胜 者 所 遇到 的 所有对 手
 但是 在 许多 采用 这种 锦 标 赛 模式 的 计算机 应用程序中 我们 并 不需要 追 溯 胜 者 的 历史
 为 了 获得 更高的 内存 利用 效率 当 一个 胜 者 晋 级 时 我们 会 用 较 低层级的 另一 条目 来 替代 它 因此 规则 变 为 一个 单元 和 它 之 下 的两个 单元 包含 三个 不同 条目 上 方 单元 胜 过 了两个 下 方 单元
 如果此 堆 的 不变量 始终 受到 保护 则 序号0 显然 是 最后 的 赢 家
 删除 它 并 找 出 下 一个 赢 家 的 最简单 算法 方式是 家 某个 输 家 让我们 假定 是 上 图 中 的30 号 单元 移至0 号 位置 然后 将 这 个新的0 号 沿 树 下 行 不 断 进行 值 的 交换 直到 不变量 重新 建立
 这 显然 会 是 树 中 条目 总 数 的 对 数
 通过 迭代 所有 条目 你 将 得到 一个 on  log  n  复杂 度 的 排序
 此 排序 有 一个 很好 的 特性 就是 你可以在 排序 进行 期间 高效 地 插入 新 条目 前 提 是 插入 的 条目 不 比 你 最近 取出 的0 号 元素 更好
 这 在 模拟 上下文 时 特别 有 用 在这种情况下 树 保存 的 是所有 传入 事件 胜 出 条件 是 最小 调度 时间
 当 一个事件 将 其他 事件 排 入 执行 计划 时 它们的 调试 时间 向 未来 方向 延 长 这样 它们可 方便地 入 堆
 因此 堆 结构 很 适 宜 用 来实现 调度 器 我 的 midi  音 序 器 就是 用 的 这 个
 用于实现 调度 器 的各种 结构 都 得到 了 充 分 的 研 究 堆 是非常 适 宜 的一种 因为它们 的速度 相当 快 并且 几乎 是 恒 定 的 最 坏 的 情况 与 平均 情况 没有 太 大 差 别
 虽然 还 存 在其他 总 体 而言 更 高效 的 实现 方式 但 其 最 坏 的 情况 却 可能 非常 糟 糕
 堆 在 大 磁盘 排序 中 也 非常有用
 你应该 已经 了解 大 规 模 排序 会 有 多个 运行 轮 次 即 预 排序 的 序列 其 大小 通常 与 cpu  内存 容 量 相关 随后 这些 轮 次 会 进入 合并 通道 轮 次 合并 的 组织 往往 非常 巧 妙1
 非常 重要的 一点 是 初始 排序 应 产生 尽可能 长 的 运行 轮 次
 锦 标 赛 模式 是 达 成 此 目标 的 好 办 法
 如果你使用 全部 有 用 内存 来进行 锦 标 赛 替换 和 安排 恰好 适合 当前 运行 轮 次 的 条目 你 将 可以 对 于 随机 输入 生成 两 倍 于 内存 大小 的 运行 轮 次 对 于 模 糊 排序 的 输入 还 会 有 更好的 效果
 另外 如果你 输出 磁盘 上 的 第0 个条目 并 获得 一个 可能不 适合 当前 锦 标 赛 的 输入 因为 其 值 要 胜 过 上 一个 输出 值 它 无法被 放入 堆中 因此 堆 的 尺寸 将 缩 小
 被 释放 的内存 可以被 巧 妙 地 立即 重 用 以 逐 步 构建 第二个 堆 其 增 长 速度 与 第一个 堆 的 缩 减 速度 正 好 相同
 当 第一个 堆 完全 消 失 时 你可以 切换 新 堆 并 启动 新 的 运行 轮 次
 这样做 既 聪 明 又 高效 总 之 堆 是 值得 了解 的有用 内存 结构
 我 在 一些 应用中 用 到 了 它们 并且 认为 保留 一个 heap  模块 是 很 有意义 的
 脚注1 当前 时 代 的 磁盘 平 衡 算法 与 其 说 是 巧 妙 不 如 说 是 麻 烦 这是由 磁盘 的 寻 址 能力 导致 的结果
 在 无法 寻 址 的 设备 例如 大 型 磁 带 机 上 情况 则 相当 不同 开发者 必须 非常 聪 明 地 极 为 提 前 地 确保 每次 磁 带 转 动 都 尽可能 地 高效 就是说 能够 最好 地 加入 到 合并 进程中
 有 些 磁 带 甚至 能够 反向 读取 这 也 被用来 避免 倒 带 的 耗 时
 请 相 信 我 真正 优 秀 的 磁 带 机 排序 看起来 是 极 其 壮 观 的 排序 从 来 都 是 一 门 伟 大 的 艺 术
spwd  the  shadow  password  database
h  索引 属性 意义0 spnamp  登 录 名1 sppwdp  encrypted  password 2 splstchg  date  of  last  change 3 spmin  minimal  number  of  days  between  changes 4 spmax  maximum  number  of  days  between  changes 5 spwarn  number  of  days  before  password  expires  to  warn  user  about  it 6 spinact  number  of  days  after  password  expires  until  account  is  disabled 7 spexpire  number  of  days  since 19700101 when  account  expires 8 spflag  reserved  the  spnamp  and  sppwdp  items  are  strings  all  others  are  integers
 定义了以下函数 spwd
 在3
6 版更改 raises  a  permissionerror  instead  of  keyerror  if  the  user  doesnt  have  privileges
 参见 模块 grp  针对 用户 组 数据库 的 接口 与 本 模块 类似
 模块 pwd  an  interface  to  the  normal  password  database  similar  to  this
 用 asyncio  开发
 异步 编程 与 传统的 顺序 编程 不同
 本 页 列出 常见的 错误 和 陷阱 并 解释 如何 避免 它们
debug  模式
 默认情况下 asyncio  以 生产 模式 运行
 为 了 简化 开发 asyncio  还 有一种 debug  模式
 有 几种 方法可以 启用 异步 调试模式 将 pythonasynciodebug  环境变量 设置为1
 使用 python  开发模式
 将 debugtrue  传递给 asyncio
run 
 调用 loop
setdebug 
 除了 启用 调试模式 外还 要 考虑 将 asyncio  logger  的 日志 级别 设置为 logging
debug  例如 下面的 代码 片段 可以在 应用程序 启动 时 运行 logging
debug  配置 warnings  模块 以 显示 resourcewarning  警告
 一种 方法 是 使用 w  default  命令行选项
 启用 调试模式 时 asyncio  检查 未被 等待 的 协程 并 记录 他们 这 将 消除 被 遗 忘 的 等待 问题
 许多 非 线程安全的 异步 apis  例如 loop
callsoon  和 loop
callat  方法 如果 从 错误 的 线程 调用 则会引发 异常
 如果 执行 io  操作 花 费 的 时间 太 长 则 记录 io  选择 器 的 执行 时间
 执行 时间 超过100 毫 秒 的回调 将 会 载入 日志
 属性 loop
slowcallbackduration  可用于 设置 以 秒 为单位 的最小 执行 持续 时间 这 被视为 缓 慢
 并 发 性 和 多线程
 运行 阻塞 的 代码
 不应该 直接调用 阻塞 cpu  绑定 代码
 例如 如果一个 函数 执行1 秒 的 cpu  密集 型 计算 那么 所有 并 发 异步 任务 和 io  操作 都 将 延迟1 秒
 可以用 执行器 在不同的 线程 甚至 不同的 进程中 运行 任务 以避免 使用 事件循环 阻塞 os  线程
 请参阅 loop
runinexecutor  方法 了解详情
 日志
 检测 neverawaited  协 同 程序
 检测 就 再 也 没 异常
 如果 调用 future
setexception  但不 等待 future  对象 将 异常 传播 到 用户 代码
 在这种情况下 当 future  对象 被 垃圾 收集 时 asyncio  将 发出 一条 日志消息
 未 处理 异常 的 例子 import  asyncio  async  def  bug  raise  exceptionnot  consumed  async  def  main  asyncio
runmain  输出 task  exception  was  never  retrieved  future  task  finished  corobug  done  defined  at  test
py  line 4 in  bug  raise  exceptionnot  consumed  exception  not  consumed  激活 调试模式 以获取 任务 创建 处 的 跟踪 信息 asyncio
runmain  debugtrue  调试模式 的 输出 task  exception  was  never  retrieved  future  task  finished  corobug  done  defined  at  test
linecache  随机 读写 文本 行
to 3 自动将 python 2 代码 转 为 python 3 代码
2 to 3 是一个 python  程序 它可以 读取 python 2
x  的 源代码 并 使用 一系列 的 修复 器 来 将其转换为 合法的 python 3
x  代码
 标准库 已 包含了 丰 富 的 修复 器 这 足以 处理 几乎所有 代码
 不 过2 to 3 的 支持 库 lib 2 to 3 是一个 很 灵活 通用的 库 所 以 还可以 编写 你自己的2 to 3 修复 器
 使用2 to
 修复 器
lib 2 to 3——2 to 3 支持 库
 源代码 liblib 2 to 33
10 版后已移除 python 3
9 将 切换 到 peg  解析器 参见 pep 617 python 3
10 可能会 包含 lib 2 to 3 的 ll 1 解析器 所 不 能 解析 的 新 语法
lib 2 to 3 模块 可能会 在未来 的 python  版本 中被移 出 标准库
 请 考虑 使用 第三方 替代 例如 libcst  或 parso
 注解 lib 2 to 3 api  并 不 稳定 并 可能 在未来 大 幅 修改
emailheader  internationalized  headers
 本 段落 中 的 剩余 文本 是 该模块 的 原始 文档
 在3
2 版更改 added  the  linesep  argument
 在3
2 版更改 added  handling  for  the  unknown 8 bit  charset
httpclient  http  协议 客户端
httpconnection  对象
httpresponse  对象
 在3
5 版更改 the  io
bufferediobase  interface  is  now  implementedand  all  of  its  reader  operations  are  supported
3
3 新版功能
status  由 服务器 返回 的 状态 码
geturl 3
9 版后已移除 deprecated  in  favor  of  url
info 3
9 版后已移除 deprecated  in  favor  of  headers
getstatus 3
9 版后已移除 deprecated  in  favor  of  status
 示例
httpmessage  objects
hashlib  安全 哈希 与 消息 摘要
 哈希 算法
shake  可变 长度 摘要
shake 128 和 shake 256 算法 提供 安全 的 lengthinbits 2 至128 或256 位 可变 长度 摘要
 为 此 它们的 摘要 需 指定一个 长度
 shake  算法 不 限制 最大 长度
digestlength  返回当前 已 传给 update  方法 的 数据 摘要
 这是一个 大小 为 length  的 字节串对象 字节串 中 可 包含0 to 255 的完整 取值 范围
hexdigestlength  类似于 digest  但 摘要 会 以 两 倍 长度 字符串 对象 的 形式返回 其 中 仅 包 含 十六进制数 码
 这可以 被用于 在 电子邮件 或其他 非 二进制 环境中 安全地 交 换 数据 值
 密钥 派生
blake
 创建 哈希 对象
 常 数
saltsize  盐 值 长度 构造器 所 接受 的最大 长度
personsize  个 性 化 字符串 长度 构造器 所 接受 的最大 长度
maxkeysize  最大 密钥 长度
maxdigestsize  哈希 函数 可 输出 的最大 摘要 长度
 示例
 开发人员
 异常
select  等待 io  完成
devpoll  轮询 对象
 边 缘 触发 和 水 平 触发 的 轮询 epoll  对象
poll  对象
 大多数 unix  系统 支持 poll  系统调用 为 服务器 提供了更 好 的 可 伸 缩 性 使 服务器 可以 同时 服务 于 大量 客户端
poll  的 伸 缩 性 更好 因为 该 调用 内部 仅 列出 所 关 注 的文件描述符 而 select  会 构造一个 bitmap  在 其 中 将 所 关 注 的 描述符 所对应的 bit  打开 然后 重新 遍历 整个 bitmap
 因此 select  复杂 度 是 o  最高 文件描述符 而 poll  是 o  文件描述符 数量
registerfd  eventmask  在 轮询 对象 中 注册 文件描述符
 这样 将 来 调用 poll  方法 时 将 检查 文 件描述符 是否有 未 处理 的 io  事件
fd  可以是 整数 也可以是 带有 fileno  方法的对象 该 方法返回一个 整数
 文件对象 已经 实现了 fileno  因此 它们也 可 以用作 参数
 eventmask  是可选的 位 掩 码 用 于 指定 要 检查 的 事件 类型 它可以 是 常量 pollin 、 pollpri  和 pollout  的 组合 如 下 表 所述
 如果未指定 本 参 数 默认 将 会 检查 所有3 种类型的 事件
 常 数 意义 pollin  有 要 读取 的 数据 pollpri  有 紧 急 数据 需要 读取 pollout  准备 输出 写 不 会阻塞 pollerr  某种 错误 条件 pollhup  挂起 pollrdhup  流 套接字 的 对 侧 关闭 了 连接 或 关闭 了 写入到 一 半 的 连接 pollnval  无效的 请求 描述符 未 打开 注册 已 注册 过 的文件描述符 不 会 报 错 且 等同于 只 注册一 次 该 描述符
modifyfd  eventmask  修改 一个 已 注册 的文件描述符 等同于 registerfd  eventmask
 尝试 修改 未 注册 的文件描述符 会抛出 oserror  异常 错误码 为 enoent
poll
unregisterfd  删除 轮询 对象 正 在 跟踪 的某个 文件描述符
 与 register  方法 类似 fd  可以是 整数 也可以是 带有 fileno  方法的对象 该 方法返回一个 整数
 尝试 删除 从未 注册 过 的文件描述符 会抛出 keyerror  异常
poll
polltimeout  轮询 已 注册的 文件描述符的 集合 并返回一个 列表 列表 可能为 空 也可能 有 多个 fd  event  二 元组 其中包含 了 要 报告 事件 或 错误 的 描述符
 fd  是 文件描述符 event  是一个 位 掩 码 表示 该 描述符 所 报告 的 事件 pollin  表示 可以 读取 pollout  表示 该 描述符 可以 写入 依 此类推
 空列表 表示 调用 超时 没有任何 文件描述符 报告 事件
 如果指定了 timeout  它 将 指定 系统 等待 事件 时 等待 多 长时间 后 返回 以 毫 秒 为单位
 如果 timeout  为空、 负数 或 none  则 本 调用 将 阻塞直到 轮询 对 象 发生 事件 为止
 在3
5 版更改 现 在 当 本 函数 被 信号 中断 时 重 试 超时 将 从 头 开始 计时 不 会抛出 interruptederror  异常
 除非 信号处理程序 抛出 异常 相关 原 理 请参阅 pep 475
kqueue  对象
kevent  对象
ident  用 于 区分 事件 的 标识 值
 其 解释 取决于 筛选 器 但 该值 通常是 文件描述符
 在 构造函数 中 该 标识 值 可以是 整数或 带有 fileno  方法的对象
 kevent  在内部 存储 整数
filter  内 核 筛选 器 的 名称
 常 数 意义 kqfilterread  获取 描述符 并 在 有 数据 可读 时返回 kqfilterwrite  获取 描述符 并 在 有 数据 可 写 时返回 kqfilteraio  aio  请求 kqfiltervnode  当 在 fflag  中 监视 的 一个或多个 请求 事件 发生时 返回 kqfilterproc  监视 进程 id  上 的 事件 kqfilternetdev  观 察 网络 设备 上 的 事件 在 mac  os  x  上 不可用 kqfiltersignal  每 当 监视 的 信号 传递 到 进程时 返回 kqfiltertimer  建立 一个 任意 的 计时器 kevent
flags  筛选 器 操作
 常 数 意义 kqevadd  添加 或 修改 事件 kqevdelete  从 队列中 删除 事件 kqevenable  permitscontrol  返回 事件 kqevdisable  禁用 事件 kqevoneshot  在 第一次 发生 后 删除 事件 kqevclear  检索 事件 后 重置 状态 kqevsysflags  内部 事件 kqevflag 1 内部 事件 kqeveof  筛选 特定 eof  条件 kqeverror  请参阅 返回值 kevent
fflags  筛选 特定 标志
 kqfilterread  和 kqfilterwrite  筛选 标志 常 数 意义 kqnotelowat  套接字 缓冲区 的 低 水 线 kqfiltervnode  筛选 标志 常 数 意义 kqnotedelete  已 调用 unlink  kqnotewrite  发生 写入 kqnoteextend  文件 已 扩展 kqnoteattrib  属性 已 更改 kqnotelink  链接 计数 已 更改 kqnoterename  文件 已 重 命名 kqnoterevoke  对 文件 的 访问 权限 已被 撤 销 kqfilterproc  filter  flags  常 数 意义 kqnoteexit  进程 已 退出 kqnotefork  该 进程 调用 了 fork  kqnoteexec  进程 已 执行 新 进程 kqnotepctrlmask  内部 筛选 器 标志 kqnotepdatamask  内部 筛选 器 标志 kqnotetrack  跨 fork  执行 进程 kqnotechild  在 notetrack  的 子进程 上 返回 kqnotetrackerr  无法 附加 到 子 对象 kqfilternetdev  筛选 器 标志 在 mac  os  x  上 不可用 常 数 意义 kqnotelinkup  链接 已 建立 kqnotelinkdown  链接 已 断 开 kqnotelinkinv  链接 状态 无效 kevent
data  筛选 特定 数据
udata  用户自定义 值
bz 2 对 bzip 2 压缩 算法的 支持
 源代码 libbz 2
py  此模块提供了 使用 bzip 2 压缩 算法 压缩和解压 数据 的 一 套 完整的 接口
bz 2 模块包含 用 于 读写 压缩文件 的 open  函数 和 bz 2 file  类
 用 于 增量 压缩和解压 的 bz 2 compressor  和 bz 2 decompressor  类
 用 于 一次性 压缩和解压 的 compress  和 decompress  函数
 此模块 中的所有 类 都 能 安全地 从 多个 线程 访问
 文件 压缩和解压
 增量 压缩和解压
 一次性 压缩 或 解压缩
compressdata  compresslevel 9 压缩 data  此 参数为 一个 字节 类对象
 如果给定 compresslevel  它必须 为1 至9 之间的 整数
 默认值为9
 对 于 增量 压缩 请改用 bz 2 compressor
decompressdata  解压缩 data  此 参数为 一个 字节 类对象
 如果 data  是 多个 压缩数据 流 的 拼接 则 解压缩 所有 数据流
 对 于 增量 解压缩 请改用 bz 2 decompressor
 在3
3 版更改 支持 了 多 数据流 的 输入
 用法示例
 以下是 bz 2 模块 典型 用 法 的一些 示例
 使用 compress  和 decompress  来 显示 往 复 式 的 压缩 import  bz 2 data  b
decompressc  data  d  check  equality  to  original  object  after  roundtriptrue  使用 bz 2 compressor  进行 增量 压缩 import  bz 2 def  gendatachunks 10 chunksize 1000
flush  上面的 示例 使用了 十分 非 随机 的 数据流 即 bz  块 数据流
 随机 数据 的 压缩 率 通常 很 差 而 有 序、 重复 的 数据 通常 会产生 很 高 的 压缩 率
 用 二进制模式 写入 和 读取 bzip 2 压缩文件 import  bz 2 data  b
python  语言 服务
python  提供了 许多 模块 来 帮助 使用 python  语言
 这些模块 支持 标记 化、 解析、 语法分析、 字节码 反汇编 以及 各种 其他 工具
 这些模块 包括 parser  访问 python  解析树 创建 st  对象 转换 st  对象 queries  on  st  objects  异常 和 错误处理 st  对象 示例 compile  的 模拟 ast  抽象 语法 树 抽象 文 法 节点 类 字面值 variables  表达式 subscripting  comprehensions  statements  imports  control  flow  function  and  class  definitions  async  and  await  ast  中 的 辅助函数 compiler  flags  commandline  usage  symtable  access  to  the  compilers  symbol  tables  generating  symbol  tables  examining  symbol  tables  symbol  与 python  解析树 一起使用 的常量 token  与 python  解析树 一起使用 的常量 keyword  检 验 python  关键字 tokenize  对 python  代码 使用 的 标记 解析器 对 输入 进行 解析 标记 commandline  usage  示例 tabnanny  模 糊 缩进 检测 pyclbr  python  模块 浏览器 支持 function  对象 class  对象 pycompile  编译 python  源文件 compileall  bytecompile  python  libraries  commandline  use  public  functions  dis  python  字节码 反汇编 器 字节码 分析 分析 函数 python  字节码 说明 操作码 集合 pickletools  pickle  开发者 工具集 命令行 语法 命令行选项 编程 接口
weakref  弱引用
 弱引用对象
 弱引用对象 没有 ref
callback  以外的 方法和属性
 一个 弱引用对象 如果存在 就 允许 通过调用 它 来获取 引用 import  weakref  class  object
refo  o 2 r  o  is  o 2 true  如果 引用 已 不存在 则 调用 引用对象 将 返回 none  del  o  o 2 printrnone  检测 一个 弱引用对象 是否 仍然 存 在 应该使用 表达式 ref  is  not  none
 通常 需要使用 引用对象 的应用 代码 应当 遵循 这样的 模式 r  is  a  weak  reference  object  o  r  if  o  is  none  referent  has  been  garbage  collected  printobject  has  been  deallocated  cant  frobnicate
dosomethinguseful  使用 单独的 存 活 测试 会 在 多线程 应用中 制 造 竞 争 条件 其他线程 可能导致 某个 弱引用 在 该 弱引用 被调用 前 就 失效 上述 的写法 在 多线程 应用 和 单 线程 应用中 都 是 安全 的
 特别 版本 的 ref  对象 可以通过 子类化 来创建
 在 weakvaluedictionary  的 实现 中 就 使用了 这种方式 来 减少 映射中 每个 条目 的内存 开销
 这 对 于 将 附加 信息 关联到 引用 的 情况 最 为 适用 但 也可以 被用于 在 调用 中 插入 额外 处理 来 提取 引用
 这个例子 演示了如何 将 ref  的一个子类 用 于 存储 有关 对象 的附加 信息 并 在 引用 被访问 时 影响 其 所返回的 值 import  weakref  class  extendedrefweakref
 示例
 这 个简单的例子 演示了 一个 应用 如何使用 对象 id  来 提取 之前 出现 过 的 对象
 然后 对象 的 id  可以在 其 它 数据结构 中 使用 而无 须 强制 对象 保持 存 活 但 处于 存 活 状态 的 对象 也 仍然 可以通过 id  来 提取
 终结器 对象
 使用 finalize  的 主要 好处 在于它 能 更简 便地 注册 回调函数 而无 须 保留 所返回的 终结器 对象
 例如 import  weakref  class  object
 del  kennyyou  killed  kenny  终结器 也可以被 直接调用
 但是 终结器 最多 只能 对 回调函数 发起 一次 调用
alive  f  callback  not  called  because  finalizer  dead  del  obj  callback  not  called  because  finalizer  dead  你可以使用 detach  方法来 注 销 一个 终结器
 该方法 将 销 毁 终结器 并返回其 被 创建时 传给 构造器 的 参数
alive  assert  newobj  is  obj  assert  funcargs  kwargs 6 callback  除非 你 将 atexit  属性 设 为 false  否则 终结器 在 程序 退出 时如果 仍然 存 活 就 将 被调用
 例如 obj  object  weakref
 比较 终结器 与 del  方法
 假设 我们 想 创建一个 类 用 它 的 实例 来 代表 临时 目录
 当 以 下 事件 中 的 某 一个 发生 时这个 目录 应当 与 其内容 一起 被 删除 对象 被作为 垃圾回收 对象 的 remove  方法 被调用 或 程序 退出
 我们可以 尝试 使用 del  方法 来实现 这个类 如下所示 class  tempdir  def  initself  self
remove  从 python 3
4 开始 del  方法 不会再 阻 止 循环 引用 被作为 垃圾回收 并且 模块 全局变量 在 interpreter  shutdown  期间 不会被 强制 设 为 none
 因此这 段 代码 在 cpython  上 应该 会 正常 运行 而不会 出现 任何 问题
 然而 del  方法 的 处理 会 严重 地 受到 具体实现 的 影响 因为它 依赖于 解释器 垃圾回收 实现 方式 的 内部 细节
 更 健 壮 的替代 方式 可以是 定义一个 终结器 只 引用 它 所 需要 的特定 函数 和 对象 而不是 获取对 整个 对象 状态 的 访问 权 class  tempdir  def  initself  self
alive  像这样 定义 后 我们 的 终结器 将 只 接受一个 对 其 完成 正确 清理 目录 任务 所需 细节 的 引用
 如果对象 一 直 未 被作为 垃圾回收 终结器 仍 会 在 退出 时被调用
 基于 弱引用 的 终结器 还 具有 另一 项 优 势 就是 它们 可被用来 为 定义 由 第三方 控制 的 类 注册 终结器 例如 当 一个 模块 被 卸 载 时 运行 特定 代码 import  weakref  sys  def  unloadingmodule  implicit  reference  to  the  module  globals  from  the  function  body  weakref
modulesname  unloadingmodule  注解 如果 当 程序 退出时 你 恰好 在 守护 线程中 创建 终结器 对象 则 有可能 该 终结器 不 会 在 退出 时被调用
 但是 在 一个 守护 线程中 atexit
register  try 
 和 with 
 同样 不 能 保证 执行 清理
 文件格式
 本章中描述的模块 解析 各种 不 是 标记 语言 且 与 电子邮件 无 关 的 杂项 文件格式
 csv  csv  文件 读写 模块内容 变种 与 格式 参数 reader  对象 writer  对象 示例 configparser  配置文件 解析器 快速 起 步 支持 的 数据类型 回退 值 受支持的 ini  文件 结构 值 的 插值 映射 协议 访问 定制 解析器 行为 旧式 api  示例 configparser  对象 rawconfigparser  对象 异常 netrc  netrc  文件 处理 netrc  对象 xdrlib  编码与解码 xdr  数据 packer  对象 unpacker  对象 异常 plistlib  生成 与 解析 apple 
plist  文件 示例
formatter  通 用 格式化 输出
3
4 版后已移除 因为 被使用 的 次 数 很 少 此 格式化 模块 已经被 弃用 了
the  formatter  interface
formatter  implementations
the  writer  interface
writer  implementations
 策略
 事件循环 策略 是 各个 进程 的 全局 对象 它 控制 事件循环 的 管理
 每个 事件循环 都有一个 默认 策略 可以使用 策略 api  更改 和 定制 该 策略
 策略 定义了 上下文 的概念 每个 上下文管理 一个单独的 事件循环
 默认 策略 将 context  定义 为当前 线程
 通过使用 自定义 事件循环 策略 可以 自定义 geteventloop 、 seteventloop  和 neweventloop  函数 的 行为
 策略 对象 应该 实现 abstracteventlooppolicy  抽象基类 中定义的 api
 获取 和 设置 策略
 可以使用 下面 函数 获取 和 设置 当前进程 的 策略 asyncio
geteventlooppolicy  返回 当前进程 域 的 策略
seteventlooppolicypolicy  将 policy  设置为 当前进程 域 策略
 如果 policy  设 为 none  将 恢复 默认 策略
 策略 对象
 抽象 事件循环 策略 基类 定义 如 下 class  asyncio
abstracteventlooppolicy  异步 策略 的抽象基类
 geteventloop  为 当前上下文 获取 事件循环
 返回 一个 实现 abstracteventloop  接口 的事件循环 对象
 该方法 永远 返回 none
 在3
6 版更改
 seteventlooploop  将 当前上下文 的事件循环 设置为 loop 
 neweventloop  创建并返回 一个新的 事件循环 对象
 该方法 永远 返回 none
 getchildwatcher  获取 子进程 监视器 对象
 返回 一个 实现 abstractchildwatcher  接口 的 监视器 对象
 该函数 仅 支持 unix
 setchildwatcherwatcher  将 当前 子进程 监视器 设置为 watcher 
 该函数 仅 支持 unix
asyncio  附带 下列 内置 策略 class  asyncio
defaulteventlooppolicy  默认 的 asyncio  策略
 在 unix  上 使用 selectoreventloop  而 在 windows  上 使用 proactoreventloop
 不需要 手动 安装 默认 策略
asyncio  已 配置 成 自动 使用默认 策略
 在3
8 版更改 在 windows  上现在 默认 会 使用 proactoreventloop
windowsselectoreventlooppolicy  一个 使用 selectoreventloop  事件循环 实现 的替代 事件循环 策略
 可用性 windows
windowsproactoreventlooppolicy  使用 proactoreventloop  事件循环 实现 的 另一种 事件循环 策略
 可用性 windows
 进程 监视器
 进程 监视器 允许 定制 事件循环 如何 监视 unix  子进程
 具体 来说 事件循环 需要 知道 子进程 何 时 退出
 在 asyncio  中 子进程 由 createsubprocessexec  和 loop
subprocessexec  函数创建
asyncio  定义了 abstractchildwatcher  抽象基类 子 监视器 必须 要实现 它 并 具有 四 种不同 实现 threadedchildwatcher  已 配置 为 默认使用 multiloopchildwatcher  safechildwatcher  和 fastchildwatcher
 请参阅 子进程 和 线程 部分
 以 下 两个 函数 可用于 自定义 子进程 监视器 实现 它将被 asyncio  事件循环 使用 asyncio
getchildwatcher  返回当前 策略 的当前 子 监视器
setchildwatcherwatcher  将 当前 策略 的 子 监视器 设置为 watcher 
watcher  必须 实现 abstractchildwatcher  基类 定义 的 方法
 注解 第三方 事件循环 实现 可能不 支持 自定义 子 监视器
 对 于 这样的 事件循环 禁止 使用 setchildwatcher  或 不 起作用
abstractchildwatcher  addchildhandlerpid  callback  args  注册 一个新的 子 处理 回调函数
 安排 callbackpid  returncode  args  在 进程 的 pid  与 pid  相等 时 调用
 指定 另一个 同 进程 的 回调函数 替换 之前 的回调 处理 函数
 回调函数 callback  必须 是线程安全
 removechildhandlerpid  删除 进程 pid  与 pid  相等的 进程 的 处理 函数
 处理 函数 成功 删除 时返回 true  没有 删除 时返回 false 
 attachlooploop  给 一个 事件循环 绑定 监视器
 如果 监视器 之前 已 绑定 另一个 事件循环 那么 在 绑定 新 循环 前 会先 解 绑 原 来 的事件循环
 注意 循环 有可能 是 none 
 isactive  如果 监视器 已 准备 好 使用 则返回 true
 使用 不 活动 的 当前 子 监视器 生成 子进程 将引发 runtimeerror
3
8 新版功能
 close  关闭 监视器
 必须 调用 这个方法 以 确保 相关 资源 会 被 清理
threadedchildwatcher  此 实现 会 为每个 生成 的 子进程 启动 一 具 新 的 等待 线程
 即使 是 当 asyncio  事件循环 运行 在 非 主 os  线程 上 时 它 也 能 可靠 地 工作
 当 处理 大量 子进程 时 也 不存在 显 著 的开销 每个 子进程 结束 时 为 o 1 但 当 每个 进程 启动 线程 时 则需要 额外的 内存
 此 监视器 会 默认 被使用
3
8 新版功能
multiloopchildwatcher  此 实现 会 在 实例化 时 注册一个 sigchld  信号处理程序
 这可能 会破坏 为 sigchld  信号 安装 自定义 处理程序 的 第三方 代码
 此 监视器 会 在 收到 sigchld  信号 时 通过 显式地 轮询 每个 进程 来避免 干 扰 其 他 代码 生成 的 进程
 该 监视器 一旦 被 安装 就不 会 限制 从 不同 线程 运行 子进程
 该 解决方案是 安全 的 但 在 处理 大量 进程时 会 有 显 著 的开销 每 收到 一个 sigchld  时 为 on
3
8 新版功能
safechildwatcher  该 实现 会 使用 主 线程中 的 活动 事件循环 来处理 sigchld  信号
 如果 主 线 程 没有 正在运行 的事件循环 则 其他线程 无法 生成 子进程 会引发 runtimeerror
 此 监视器 会 在 收到 sigchld  信号 时 通过 显式地 轮询 每个 进程 来避免 干 扰 其 他 代码 生成 的 进程
 该 解决方案 与 multiloopchildwatcher  同样 安全 并 同样 具有 on  复杂 度 但 需要 主 线程 有 正在运行 的事件循环 才能 工作
fastchildwatcher  这种 实现 直接调用 os
waitpid 1 来获取 所有 已 结束 的 进程 可能会 中 断 其 它 代码 洐 生 进程 并 等待 它们 结束
 在 处理 大量 子 监视器 时 没有 明显 的开销 o 1 每次 子 监视器 结束
 该 解决方案 需要 主 线程 有 正在运行 的事件循环 才能 工作 这 与 safechildwatcher  一样
pidfdchildwatcher  这 个 实现 会 轮询 处理 文件描述符 pidfds  以 等待 子进程 终结
 在某些 方面 pidfdchildwatcher  是一个 理 想 的 子进程 监视器 实现
 它 不需要 使用 信号 或 线程 不 会 介 入 任何 在 事件循环 以外 发起 的 进程 并 能 随 事件循环 发 起 的 子进程 数量 进行 线 性 伸 缩
 其 主要 缺 点 在 于 pidfds  是 linux  专属的 并且 仅在 较 近 版本 的 核心5
3 上可用
3
9 新版功能
 自定义 策略
emailcontentmanager  managing  mime  content
py 3
6 新版功能1 class  email
content  manager  instances
 注解 a  cte  of  binary  does  not  actually  work  correctly  yet
 脚注1 originally  added  in 3
runpy  locating  and  executing  python  modules
 参见 the  m  option  offering  equivalent  functionality  from  the  command  line
 在3
1 版更改 added  ability  to  execute  packages  by  looking  for  a  main  submodule
 在3
2 版更改 added  cached  global  variable  see  pep 3147
 在3
4 版更改 updated  to  take  advantage  of  the  module  spec  feature  added  by  pep 451
 this  allows  cached  to  be  set  correctly  for  modules  run  this  way  as  well  as  ensuring  the  real  module  name  is  always  accessible  as  spec
 参见 接口 选项 for  equivalent  functionality  on  the  command  line  python  pathtoscript
3
2 新版功能
 在3
4 版更改 updated  to  take  advantage  of  the  module  spec  feature  added  by  pep 451
 this  allows  cached  to  be  set  correctly  in  the  case  where  main  is  imported  from  a  valid  sys
path  entry  rather  than  being  executed  directly
 参见 pep 338 将 模块 作为脚本 执行 pep  由 nick  coghlan  撰写并实现
 pep 366 main  module  explicit  relative  imports  pep  由 nick  coghlan  撰写并实现
 pep 451 a  modulespec  type  for  the  import  system  pep  written  and  implemented  by  eric  snow  命令行 与 环境 cpython  command  line  details  the  importlib
stat  解析 stat  结果
operator  标准 运算符 替代 函数
 将 运算符 映射到 函数
 以 下 表 格 显示了 抽象 运算 是如何 对应于 python  语法 中 的 运算符 和 operator  模块中的 函数 的
 运算 语法 函数 加 法 a  b  adda  b  字符串 拼接 seq 1 seq 2 concatseq 1 seq 2 包含 测试 obj  in  seq  containsseq  obj  除 法 a  b  truediva  b  除 法 a  b  floordiva  b  按位 与 a  b  anda  b  按位 异 或 a  b  xora  b  按位 取反 a  inverta  按位 或 a  b  ora  b  取 幂 a  b  powa  b  标识 a  is  b  isa  b  标识 a  is  not  b  isnota  b  索引 赋值 objk  v  setitemobj  k  v  索引 删除 del  objk  delitemobj  k  索引 取值 objk  getitemobj  k  左 移 a  b  lshifta  b  取 模 a  b  moda  b  乘法 a  b  mula  b  矩阵 乘法 a  b  matmula  b  取反 算术 a  nega  取反 逻辑 not  a  nota  正 数 a  posa  右 移 a  b  rshifta  b  切片 赋值 seqij  values  setitemseq  slicei  j  values  切片 删除 del  seqij  delitemseq  slicei  j  切片 取值 seqij  getitemseq  slicei  j  字符串格式化 s  obj  mods  obj  减 法 a  b  suba  b  真值 测试 obj  truthobj  比较 a  b  lta  b  比较 a  b  lea  b  相等 a  b  eqa  b  不 等 a  b  nea  b  比较 a  b  gea  b  比较 a  b  gta  b 
 原地 运算符
 许多 运算 都有 原地 版本
 以 下 列出的 是 提供对 原地 运算符 相比 通常 语法 更 底层 访问 的 函数 例如 statement  x  y  相当于 x  operator
iaddxy
 换 一 种方式来 讲 就是 z  operator
iaddx  y  等价于 语句 块 z  x  z  y
 在这些 例子中 请注意 当 调用 一个 原地 方法 时 运算 和 赋值 是 分 成 两个 步骤 来执行 的
 下 面列出的 原地 函数 只 执行 第 一步 即 调用 原地 方法
 第二 步 赋值 则 不 加 处理
 对 于 不可变的 目标 例如 字符串、 数字 和 元组 更新 的 值会被 计算 但 不会被 再 被 赋值给 输入 变量 a  hello  iadda  worldhello  world  ahello  对 于 可变的 目标 例如 列表 和 字典 原地 方法 将 执行 更新 因此 不需要 后续 赋值 操作 s  h  e  l  l  o  iadds  w  o  r  l  dh  e  l  l  o  w  o  r  l  d  sh  e  l  l  o  w  o  r  l  doperator
iadda  b  a  iadda  b  等价于 a  b
ianda  b  a  ianda  b  等价于 a  b
iconcata  b  a  iconcata  b  等价于 a  b  其 中 a  和 b  为 序列
ifloordiva  b  a  ifloordiva  b  等价于 a  b
ilshifta  b  a  ilshifta  b  等价于 a  b
imoda  b  a  imoda  b  等价于 a  b
imula  b  a  imula  b  等价于 a  b
imatmula  b  a  imatmula  b  等价于 a  b
3
5 新版功能
iora  b  a  iora  b  等价于 a  b
ipowa  b  a  ipowa  b  等价于 a  b
irshifta  b  a  irshifta  b  等价于 a  b
isuba  b  a  isuba  b  等价于 a  b
itruediva  b  a  itruediva  b  等价于 a  b
ixora  b  a  ixora  b  等价于 a  b
smtpd  smtp  服务器
 源代码 libsmtpd
 参见 the  aiosmtpd  package  is  a  recommended  replacement  for  this  module
smtpserver  对象
3
4 新版功能 the  map  constructor  argument
 在3
5 版更改 localaddr  and  remoteaddr  may  now  contain  ipv 6 addresses
3
5 新版功能 the  decodedata  and  enablesmtputf 8 constructor  parameters  and  the  kwargs  parameter  to  processmessage  when  decodedata  is  false
 在3
6 版更改 decodedata  is  now  false  by  default
debuggingserver  对象
pureproxy  对象
mailmanproxy  对象
smtpchannel  对象
 在3
5 版更改 the  decodedata  and  enablesmtputf 8 parameters  were  added
 在3
6 版更改 decodedata  is  now  false  by  default
 built  into  the  base  smtpchannel  class  are  methods  for  handling  the  following  commands  and  responding  to  them  appropriately  命令 所 采 取 的 行 动 helo  接受 来自 客户端 的 问 候 语 并将其 存储在 seengreeting  中
 将 服务器 设 置 为 基本 命令 模式
 ehlo  接受 来自 客户 的 问 候 并将其 存储在 seengreeting  中
 将 服务器 设置为 扩 展 命令 模式
 noop  不 采 取 任何 措 施
 quit  干 净 地 关闭 连接
 mail  accepts  the  mail  from  syntax  and  stores  the  supplied  address  as  mailfrom
 rset  重置 mailfrom  rcpttos  和 receiveddata  但不 重置 问 候 语
 data  sets  the  internal  state  to  data  and  stores  remaining  lines  from  the  client  in  receiveddata  until  the  terminator  rn
 help  返回 有关 命令 语法 的 最 少 信息 vrfy  返回 代码252 服务器 不 知道 该 地址 是否 有效 expn  报告 该 命令 未 实现

 文本 处理 服务
 本章 介绍 的 模块提供了 广泛 的 字符串 操作 和其他 文本 处理 服务
 在 二进制数据 服务 之 下 描述 的 codecs  模块 也 与 文本 处理 高度 相关
 此外 也 请参阅 python  内置 字符串 类型 的 文档 文本 序列类型 str
 string  常见的 字符串 操作 字符串 常量 自定义 字符串格式化 格式字符串 语法 格式 规格 迷 你 语言 格式 示例 模板 字符串 辅助函数 re  正则表达式 操作 正则表达式 语法 模块内容 正则表达式 对象 正则 对象 匹配对象 正则表达式 例子 检查 对 子 模拟 scanf  search  vs
 match  制 作 一个 电 话 本 文 字 整 理 查找 所有 副 词 查找 所有的 副 词 及其 位置 原始字符串 标记 写 一个 词法分析 器 difflib  计算 差异的 辅助 工具 sequencematcher  对象 sequencematcher  的 示例 differ  对象 differ  示例 difflib  的 命令行接口 textwrap  文本 自动换行 与 填充 unicodedata  unicode  数据库 stringprep  因 特 网 字符串 预 备 readline  gnu  readline  接口 初始化 文件 行 缓冲区 历史文件 历史 列表 启动 钩子 completion  示例 rlcompleter  gnu  readline  的 补全函数 completer  对象
email  示例
 以下是 一些 如何使用 email  包 来读取、 写入 和 发送 简单 电子邮件 以及 更复杂的 mime  邮件 的 示例
 首先 让我们 看 看 如何 创建 和 发送 简单的 文本 消息 文本 内容 和 地址 都 可能包含 unicode  字符 import  smtplib  for  the  actual  sending  function  import  smtplib  import  the  email  modules  well  need  from  email
quit  解析 rfc 822 标题 可以通过 使用 parser  模块中的 类 来 轻松 完成 import  the  email  modules  well  need  from  email
displayname  以下是 如何 发送 包含 可能在 目录中 的 一系列 家 庭 照 片 的 mime  消息 示例 import  smtplib  for  the  actual  sending  function  import  smtplib  and  imghdr  to  find  the  types  of  our  images  import  imghdr  here  are  the  email  package  modules  well  need  from  email
sendmessagemsg  以下是 如何将 目录 的全部 内容 作为 电子邮件 消息发送 的 示例1 usrbinenv  python 3 send  the  contents  of  a  directory  as  a  mime  message
sendmessagemsg  if  name  main  main  以下是 如何将 上述 mime  消息 解压缩 到 文件 目录中 的 示例 usrbinenv  python 3 unpack  a  mime  message  into  a  directory  of  files
getpayloaddecodetrue  if  name  main  main  以下是 如何使用 备 用 纯 文本 版本 创建 html  消息 的 示例
 为 了 让 事情 变得 更 有趣 我们 在 html  部分 中 包含了 一个 相关的 图像 我们 保存 了 一份 我们 要 发送 的内容 到 硬 盘 中 然后 发送 它
sendmessagemsg  如果我们 发送 最后一个 示例中 的 消息 这是 我们可以 处理 它 的一种 方法 import  os  import  sys  import  tempfile  import  mimetypes  import  webbrowser  import  the  email  modules  well  need  from  email  import  policy  from  email
 直到 输出 提示 上面的 输出 是 to  penelope  pussycat  penelopeexample
 脚注1 感谢 matthew  dixon  cowles  提供 最初 的 灵 感 和 示例
statistics  数学 统计 函数
3
4 新版功能
 源代码 libstatistics
py  该模块提供 了用于 计算 数字 realvalued  数据 的 数 理 统计 量 的 函数
 此模块 并不是 诸 如 numpy  scipy  等 第三方 库 或者 诸 如 minitab  sas  matlab  等 针对 专 业 统计 学 家 的 专 有 全 功能 统计 软件包的 竟 品
 此模块 针对 图形 和 科学 计算 器 的 水 平
 除非 明确 注释 这些函数 支持 int  float  decimal  和 fraction
 当前 不支持 同 其他类型 是否 在 数字 塔 中 的 行为
 混合 类型 的 集合 也是 未定义 的 并且 依赖于 实现
 如果你 输入 的 数据 由 混合 类型 组成 你应该 能够 使用 map  来 确保 一个 一致的 结果 比如 mapfloat  inputdata 
 平均值 以及 对 中 心 位置 的 评 估
 对 分 散 程度 的 评 估
 函数 细节
 异常
 只 定义了一个 异常 exception  statistics
statisticserror  valueerror  的子类 表示 统计 相关的 异常
normaldist  对象
normaldist  工具 可用于 创建 和 操 纵 随机 变量 的 正态分布
 这个类 将 数据 度 量 值 的 平均值 和 标准差 作为 单 一 实体 来处理
 正态分布的 概念 来自 于 中 央 极 限定 理 并且 在 统计 学 中 有 广泛 的应用
0 返回一个新的 normaldist  对象 其 中 mu  代表 算术 平均值 而 sigma  代表 标准差
 若 sigma  为 负数 将会引发 statisticserror
 mean  一个 只读 特征属性 表示 特定 正态分布的 算术 平均值
 median  一个 只读 特征属性 表示 特定 正态分布的 中 位 数
 mode  一个 只读 特征属性 表示 特定 正态分布的 众 数
 stdev  一个 只读 特征属性 表示 特定 正态分布的 标准差
 variance  一个 只读 特征属性 表示 特定 正态分布的 方 差
 等于 标准差 的 平方
 classmethod  fromsamplesdata  传入 使用 fmean  和 stdev  基于 data  估 算 出 的 mu  和 sigma  形参 创建一个 正态分布 实例
 data  可以是任何 iterable  并且 应当 包含 能 被转换为 float  类型 的 值
 如果 data  不包含 至少 两个 元素 则会引发 statisticserror  因为 估 算 中 心 值 至少 需要 一个 点 而 估 算 分 散 度 至少 需要 两个 点
 samplesn  seednone  对 于 给定的 平均值 和 标准差 生成 n  个随机 样本
 返回 一个 由 float  值 组成的 list
 当 给定 seed  时 创建一个新的 底层 随机数生成器 实例
 这 适用于 创 建 可 重 现 的结果 即使 对 于 多线程 上下文 也 有效
 pdfx  使用 概率 密 度 函数 pdf  计算 一个 随机 变量 x  趋 向 于给定 值 x  的 相对 可能 性
 在 数学 意义 上 它 是 当 dx  趋 向 于 零 时 比 率 px  x  xdx  dx  的 极 限
 相对 可能 性 的 计算 方法 是 用 一个 狭 窄 区 间内 某个 样本 出现的 概率 除 以 区 间 的 宽度 因此 使用 密 度 一 词
 由 于 可能 性 是 相对于 其他 点 的 它 的 值可以 大于1
 cdfx  使用 累积 分布 函数 cdf  计算 一个 随机 变量 x  小于 等于 x  的 概 率
 在 数学 上 它 表示为 px  x
 invcdfp  计算 反向 累积 分布 函数 也 称为 分 位 数 函数 或 百 分 点 函数
 在 数学 上 它 表示为 x  px  x  p
 找 出 随机 变量 x  的 值 x  使得 该 变量 小于 等于 该值 的 概率 等于 给定的 概率 p
 overlapother  测量 两个 正态 概率 分布 之间的 一致性
 返回 介 于0
0 和1
0 之间的 值 给出 两个 概率 密 度 函数 的 重 叠 区域
 quantilesn 4 将 指定 正态分布 划 分 为 n  个 相等 概率 的 连续 分隔 区
 返回 这些 分隔 区 对应的 n 1 个 分隔 点 的 列表
 将 n  设 为4 以 使用 四 分 位 默认值
 将 n  设 为10 以 使用 十分 位
 将 n  设 为100 以 使用 百 分 位 即 给出99 个 分隔 点 来 将 正态分布 分隔 为100 个 大小 相等的 组
 zscorex  计算 标准 分 即 以 高 于 或 低 于 正态分布的 平均值 的 标准差 数值 的形式 来 描 述 x  x  mean  stdev
3
9 新版功能
 normaldist  的 实例 支持 加上、 减 去、 乘 以 或 除 以 一个 常量
 这些 运算 被 用 于 转换 和 缩 放
 例如 temperaturefebruary  normaldist 52
5 不允许 一个 常量 除 以 normaldist  的 实例 因为 结果将 不 是 正态分布
 由 于 正态分布 是 由 独立 变量 的 累 加 效 应 产生 的因此 允许 表示为 normaldist  实例 的 两 组 独立 正态分布的 随机 变量 相 加 和 相 减
 例如 birthweights  normaldist
53
8 新版功能
normaldist  示例 和 用 法
normaldist  适合 用来 解决 经 典 概率 问题
 举例来说 如果 sat  考 试 的 历史 数据 显示 分 数 呈 平均值 为1060 且 标准差 为195 的 正态分布 则可以 确定 考 试 分 数 处于1100 和1200 之间的 学生 的 百 分 比 舍入到 最接近的 整数 应 为 sat  normaldist 1060195 fraction  sat
4 求 sat  分 数 的 四 分 位 和 十分 位 listmapround  sat
quantilesn 10810896958101110601109116212241310 为 了 估 算 一个 不 易 解析 的 模 型 分布 normaldist  可以 生成 用 于 蒙 特 卡 洛 模拟 的 输入 样本 def  modelx  y  z 
175091447274739 当 样本 量 较大 并且 成功 试 验 的 可能 性 接近50 时 正态分布 可以 被用来 模拟 二 项 分布
 例如 一次 开源 会 议 有750 名 与 会 者 和 两个 可 分别 容 纳500 人 的 会 议 厅
 会 上 有 一 场 关于 python  的 演 讲 和 一 场 关于 ruby  的 演 讲
 在 往 届 会 议 中65 的 与 会 者 更 愿 意 去 听 关于 python  的 演 讲
 假定 人 群 的 偏 好 没有 发生改变 那么 python  演 讲 的 会 议 厅 不 超出 其 容 量 上限 的 可能 性 是 多少？ n 750 sample  size  p 0
8398 在 机器 学习 问题 中 也 经常 会出现 正态分布
wikipedia  上 有 一个 朴 素 贝 叶 斯 分 类 器 的 好 例子
 挑 战 的 问题 是 根据 对 多个 正态分布的 特征 测量 值 包括 身 高、 体 重 和 足 部 尺 码 来 预 测 一个 人 的 性 别
 我们 得到 了 由 八 个 人 的 测量 值 组成的 训 练 数据 集
 假定 这些 测量 值 是 正态分布 的因此 我们 用 normaldist  来 总结 数据 heightmale  normaldist
fromsamples 6879 接下来 我们 遇到 一个 特征 测量 值 已知 但 性 别 未 知 的 新 人 ht 6
0 height  wt 130 weight  fs 8 foot  size  从 是 男 是 女 各50 的 先 验 概率 出 发 我们 通过将 该 先 验 概率 乘 以 给定 性 别 的 特征 度 量 值 的 可能 性 累积 值 来 计算 后 验 概率 priormale 0
pdffs  最终 预 测 值 应 为 最大 后 验 概率 值
 这种 算法 被称为 maximum  a  posteriori  或 map  male  if  posteriormale  posteriorfemale  else  female  female
parser  访问 python  解析树
 警告 parser  模块 已被 弃用并将在 未来的 python  版本 中移除
 对 于 大多数 用 例 你 都 可以使用 ast  模块 来 控制 抽象 语法 树 ast  的 生成 和 编译 阶 段
 for  full  information  on  thelanguage  syntax  refer  to  python  语言 参考
 the  parser  itself  iscreated  from  a  grammar  specification  defined  in  the  filegrammargrammar  in  the  standard  python  distribution
 参见 模块 symbol  代表 解析树 内部 节点 的有用 常量
 模块 token  代表 解析树 叶 子 节点 和 测试 节点 值 的 函数 的有用 常量
 创建 st  对象
 转换 st  对象
queries  on  st  objects
 异常 和 错误处理
st  对象
st  对象具有 以下方法 st
compilefilenamesyntaxtree  和 compilestst  filename  相同
isexpr  和 isexprst  相同
issuite  和 issuitest  相同
tolistlineinfofalse  colinfofalse  和 st 2 listst  lineinfo  colinfo  相同
totuplelineinfofalse  colinfofalse  和 st 2 tuplest  lineinfo  colinfo  相同
 示例 compile  的 模拟
 高层级 api  索引
 这 个 页面 列 举 了所有 能用于 asyncwait  的高层级 asyncio  api  集
tasks
 队列 集
 子进程 集
 用 于 生成 子进程 和 运行 shell  命令 的工具 包
 await  createsubprocessexec  创建一个 子进程
 await  createsubprocessshell  运行 一个 shell  命令
 示例 执行 一个 shell  命令
 请参阅 子进程 apis  相关 文档
 流
 用 于 网络 io  处理 的 高级 api  集
 await  openconnection  建立 一个 tcp  连接
 await  openunixconnection  建立 一个 unix  socket  连接
 await  startserver  启动 tcp  服务
 await  startunixserver  启动 一个 unix  socket  服务
 streamreader  接收 网络 数据 的 高级 asyncawait  对象
 streamwriter  发送 网络 数据 的 高级 asyncawait  对象
 示例 tcp  客户端 样 例
 请参阅 streams  apis  文档
 同步
 异常
timeouterror  类似 waitfor  等 函数 在 超时 时候 被引发
 请注意 asyncio
timeouterror  与 内建 异常 timeouterror  无 关
 asyncio
cancellederror  当 一个 task  对象 被取消 的时候 被引发
 请参阅 task
 示例 在 取消 请求 发生 的 运行 代码中 如何处理 cancellederror  异常
 请参阅 完整的 asyncio  专用 异常 列表
unittestmock  上 手 指南
3
3 新版功能
 使用 mock
 模拟 方法调用
 使用 mock  的 常见 场景 模拟 函数调用 记录 对象 上 的 方法调用 你 可能需要 替换 一个 对象 上 的 方法 用于确 认 此方法 被 系统中 的其他 部分 调用 过 并且 调用时 使用了 正确的 参数
 real  someclass  real
method  magicmocknamemethod  real
method 345 keyvaluemagicmock  namemethod  id
 使用了 mock  本 例 中 的 real
method  之后 它 有 方法和属性 可以让 你 针对 它 是 被 如何使用 的 下 断言
 注解 在 多 数 示例中 mock  与 magicmock  两个 类可以 相互 替换 而 magicmock  是一个 更 适用 的 类 通常情况下 使用 它 就可以 了
 如果 mock  被调用 它 的 called  属性 就会 变 成 true  更 重要的 是 我们可以 使用 assertcalledwith  或者 assertcalledoncewith  方法 来确 认 它 在 被调用时 使用了 正确的 参数
 在 如 下 的 测试 示例中 验证 对 于 productionclass
method  的 调用 会导致 something  的 调用
 class  productionclass
 对象 上 的 方法调用 的 mock
mocking  classes
naming  your  mocks
tracking  all  calls
setting  return  values  and  attributes
raising  exceptions  with  mocks
side  effect  functions  and  iterables
mocking  asynchronous  iterators
8 asyncmock  and  magicmock  have  support  to  mock  异步 迭代器 through  aiter
 the  returnvalue  attribute  ofaiter  can  be  used  to  set  the  return  values  to  be  used  foriteration
mocking  asynchronous  context  manager
8 asyncmock  and  magicmock  have  support  to  mock  异步 上下文管理器 through  aenter  and  aexit
 by  defaultaenter  and  aexit  are  asyncmock  instances  that  return  anasync  function
creating  a  mock  from  an  existing  object
patch  decorators
 注解 在 查找 对象 的 名称 空间中 修 补 对象 使用 patch 
 使用 起来 很 简单 阅读 在 哪 里 打 补丁 来 快速 上 手
 还有一个 patch
dict  用于在 一 定 范围内 设置 字典 中的值 并 在 测试 结束 时 将 字典 恢复 为 其 原始 状态 foo  key  value  original  foo
further  examples
mocking  chained  calls
partial  mocking
mocking  a  generator  method
applying  the  same  patch  to  every  test  method
mocking  unbound  methods
checking  multiple  calls  with  mock
coping  with  mutable  arguments
 注解 if  your  mock  is  only  going  to  be  used  once  there  is  an  easier  way  of  checking  arguments  at  the  point  they  are  called
nesting  patches
mocking  a  dictionary  with  magicmock
sideeffect  setitem  注解 an  alternative  to  using  magicmock  is  to  use  mock  and  only  provide  the  magic  methods  you  specifically  want  mock  mock  mock
mock  subclasses  and  their  attributes
mocking  imports  with  patchdict
tracking  order  of  calls  and  less  verbose  call  assertions
more  complex  argument  matching
pwd  用户 密码 数据库
webbrowser  方便的 web  浏览器 控制器
 源码 libwebbrowser
pywebbrowser  模块提供了一个 高级 接口 允许 向 用户 显示 基于 web  的 文档
 在大多数情况下 只需 从 该模块 调用 open  函数 就可以 了
 在 unix  下 图形 浏览器 在 x 11 下 是 首选 但 如果 图形 浏览器 不可用 或 x 11 显示 不可用 则 将 使用 文本模式 浏览器
 如果 使用 文本模式 浏览器 则 调用 进程 将 阻塞直到 用户 退出 浏览器
 如果存在 环境变量 browser  则将其 解释 为 os
pathsep  分隔 的浏览器 列表 以便 在 平台 默认值 之前 尝试
 当 列表 部分 的 值 包含 字符串％ s  时 它 被解释 为 一个 文 字 浏览器 命令行 用 于 替换％ s  的 参数 url  如果该 部分 不包含％ s  则 它只 被解释 为 要 启动 的浏览器 的 名称
1 对 于 非 unix  平台 或者 当 unix  上 有 远程 浏览器 时 控制 过程 不 会等待 用户 完成 浏览器 而 是 允许 远程 浏览器 在 显示 界面 上 维护 自己的 窗口
 如果 unix  上 没有 远程 浏览器 控制 进程 将 启动 一个新的 浏览器 并 等待
 脚本 webbrowser  可 以用作 模块 的 命令行界面
 它接受一个 url  作为参数
 还 接受 以 下 可选参数 n  如果可能 在 新 的浏览器 窗口中 打开 url  t  在 新 的浏览器 页面 标签 中 打开 url
 这些 选择 当然 是 相互 排 斥 的
 用法示例 python  m  webbrowser  t  httpwww
org  定义了以下 异常 exception  webbrowser
error  发生 浏览器 控件 错误时 引发异常
 定义了以下函数 webbrowser
openurl  new 0 autoraisetrue  使用默认 浏览器 显示 url
 如果 new  为0 则 尽可能 在同一 浏览器 窗 口中 打开 url
 如果 new  为1 则 尽可能 打开 新 的浏览器 窗口
 如果 new  为2 则 尽可能 打开 新 的浏览器 页面 标签
 如果 autoraise  为 true  则 会 尽可能 置 前 窗口 请注意 在 许多 窗口 管理器 下 无论 此 变 量 的 设置 如何 都会 置 前 窗口
 请注意 在某些 平台上 尝试 使用 此 函数 打开 文件名 可能会 起作用 并 启动 操作系统的 关联 程序
 但是 这种方式 不 被 支持 也不 可移植
 使用 url  参数 会引发 auditing  event  webbrowser
open 
opennewurl  如果可能 在 默认 浏览器 的 新 窗口中 打开 url  否则 在 唯一的 浏览器 窗 口中 打开 url
opennewtaburl  如果可能 在 默认 浏览器 的 新 页面 标签 中 打开 url  否则 等效 于 opennew
getusingnone  返回 浏览器 类型 为 using  指定 的 控制器 对象
 如果 using  为 none  则返回 适用于 调用者 环境 的 默认 浏览器 的 控制器
registername  constructor  instancenone  preferredfalse  注册 name  浏览器 类型
 注册 浏览器 类型 后 get  函数可以 返回 该 浏览器 类型 的 控制器
 如果没有 提供 instance  或者 为 none  constructor  将 在没有 参数 的情况下 被调用 以 在 需要 时 创建 实例
 如果 提供了 instance  则 永远不 会 调用 constructor  并且 可能是 none 
 将 preferred  设置为 true  使得 这 个 浏览器 成为 get  不带参数 调 用 的 首选 结果
 否则 只有在 您 计划 设置 browser  变量 或 使用 与 您 声 明 的 处理程序 的 名称 相匹配 的 非空 参数调用 get  时 此 入 口 点 才 有 用
 在3
7 版更改 添加了 仅 关键字参数 preferred
 预定义 了许多 浏览器 类型
 此 表 给出了 可以 传递给 get  函数 的 类型 名称 以及 控制器 类 的相应 实例化 这些 都 在 此 模块中定义
 类型 名 类 名 注释 mozilla  mozillamozilla  firefox  mozillamozilla  netscape  mozillanetscape  galeon  galeongaleon  epiphany  galeonepiphany  skipstone  backgroundbrowserskipstone  kfmclient  konqueror 1 konqueror  konqueror 1 kfm  konqueror 1 mosaic  backgroundbrowsermosaic  opera  opera  grail  grail  links  genericbrowserlinks  elinks  elinkselinks  lynx  genericbrowserlynx  w 3 m  genericbrowserw 3 m  windowsdefault  windowsdefault 2 macosx  macosxdefault 3 safari  macosxsafari 3 googlechrome  chromegooglechrome  chrome  chromechrome  chromium  chromiumchromium  chromiumbrowser  chromiumchromiumbrowser  注释1
 konqueror  是 unix  的 kde  桌 面 环境 的 文件 管理器 只有在 kde  运行时 才 有意义
 一些 可靠 地 检测 kde  的 方法 会 很好 仅 检查 kdedir  变量 是 不 够 的
 另 请注意 kde 2 的 konqueror  命令 会 使用 名称 kfm  此 实现 选择 运行 的 konqueror  的最佳 策略
 仅限 windows  平台
 仅限 mac  os  x  平台
3
3 新版功能 添加了 对 chromechromium  的 支持
 以下是 一些 简单的例子 url  httpdocs
 浏览器 控制器 对象
 浏览器 控制器 提供 三个 与 模块级 便捷 函数 相同 的 方法 controller
openurl  new 0 autoraisetrue  使用 此 控制器 处理 的浏览器 显示 url
 如果 new  为1 则 尽可能 打开 新 的浏览器 窗口
 如果 new  为2 则 尽可能 打开 新 的浏览器 页面 标签
opennewurl  如果可能 在 此 控制器 处理 的浏览器 的 新 窗口中 打开 url  否则 在 唯一 的浏览器 窗口中 打开 url 
 别名 opennew
opennewtaburl  如果可能 在 此 控制器 处理 的浏览器 的 新 页面 标签 中 打开 url  否 则 等效 于 opennew
 脚注1 这里 命名 的 不带 完整 路径 的 可执行文件 将 在 path  环境变量 给出的 目录中 搜索
 内置类型
 以 下 部分 描述了 解释器中 内置的 标准类型
 主要 内置类型 有 数字、 序列、 映射、 类、 实例 和 异常
 有 些 多项集 类 是可变 的
 它们 用 于 添加、 移除 或 重 排 其 成员的 方法 将 原地 执行 并 不 返回 特定的 项 绝对 不 会返回 多项集 实例 自身 而 是 返回 none
 有 些操作 受 多种 对象类型的 支持 特别地 实际上 所有 对象 都可以 比较 是否 相等、 检测 逻辑值 以及 转换为字符串 使用 repr  函数 或 略 有 差异的 str  函数
 后 一个 函数 是 在 对象 由 print  函数 输出 时 被 隐式地 调用 的
 逻辑值 检测
 任何 对象 都可以 进行 逻辑值 的 检测 以便 在 if  或 while  作为 条件 或 是作为 下文 所述 布尔运算 的 操作数 来 使用
 一个 对象 在默认情况下 均 被视为 真值 除非 当 该对象 被调用时 其 所属 类定义了 bool  方法 且 返回 false  或 是 定义了 len  方法 且 返回 零
1 下面 基本 完整 地 列出了 会被视为 假值 的内置 对象 被定义为 假值 的常量 none  和 false
 任何 数值 类型 的 零00
00 j  decimal 0 fraction 01 空 的 序列 和 多项集 set  range 0 产生 布尔值 结果的 运算 和 内置函数 总是返回0 或 false  作 为假值1 或 true  作 为真值 除非 另 行 说明
 重要 例外 布尔运算 or  和 and  总是返回 其中一个 操作数

 布尔运算 and  or  not
 这些 属于 布尔运算 按 优先级 升 序 排列 运算 结果 注释 x  or  y  if  x  is  false  then  y  else 1 x  x  and  y  if  x  is  false  then  x  else 2 y  not  x  if  x  is  false  then  true 3 else  false  注释1
 这是 个 短 路 运算符 因此 只有在 第一个参数 为假值 时才会 对 第二个 参数 求值
 这是 个 短 路 运算符 因此 只有在 第一个参数 为真值 时才会 对 第二个 参数 求值
 not  的优先级 比 非 布尔 运算符 低 因此 not  a  b  会 被 解读为 not  a  b  而 a  not  b  会引发 语法错误
 比较
 数字类型 int  float  complex
 存 在 三 种不同 的 数字类型 整数 浮点数 和 复数
 此外 布尔值 属于 整数 的子类型
 整数 具有 无限 的精度
 浮点数 通常 使用 c  中 的 double  来实现 有关 你 的 程序 运行 所 在 机器 上 浮点数 的精度 和 内部 表示法 可 在 sys
floatinfo  中 查看
 复数 包含 实 部 和 虚部 分别 以 一个浮点数 表示
 要 从 一个 复数 z  中提取 这两个 部分 可 使用 z
real  和 z
 标准库 包含 附加 的 数字类型 如 表示 有 理 数 的 fractions
fraction  以及 以 用户 定制 精度 表示 浮点数 的 decimal
decimal
 数字 是 由 数字 字面值 或 内置函数 与 运算符 的结果 来创建 的
 不带 修 饰 的 整数 字面值 包括 十六进制、 八进制 和 二进制数 会生成 整数
 包含 小数点 或 幂 运算符 的 数字 字面值 会生成 浮点数
 在 数字 字面值 末尾 加上 j  或 j  会生成 虚 数 实 部 为零 的 复数 你可以 将 其 与 整数或 浮点数 相 加 来 得到 具有 实 部 和 虚部 的 复数
python  完全 支持 混合 运算 当 一个 二元 算术运算 符 的 操作数 有不同 数值 类型 时 较 窄 类型 的 操作数 会 拓 宽 到 另一个 操作数的 类型 其 中 整数 比 浮点数 窄 浮点数 比 复数 窄
 不同类型 的 数字 之间的 比较 同 比较 这些 数字 的 精确 值 一样
2 构造函数 int 、 float  和 complex  可以用来 构造 特定 类型 的 数字
 所有 数字类型 复数 除外 都支持 下列 运算 有关 运算 优先级 请参阅 运算符 优先级 运算 结果 注释 完整 文档 x  y  x  和 y  的 和 x  y  x  和 y  的 差 x  y  x  和 y  的 乘 积 x  y  x  和 y  的 商 x  y  x  和 y  的 商 数1 x  y  x  y  的 余数2 x  x  取反 x  x  不变 absx  x  的绝对值 或 大小 abs  intx  将 x  转换为 整数36 int  floatx  将 x  转换为 浮点数46 float  complexre  im  一个带有 实 部 re  和 虚部 im  的6 complex  复数
im  默认为0
 c
conjugate  复数 c  的 共 轭 divmodx  y  x  y  x  y 2 divmod  powx  y  x  的 y  次 幂5 pow  x  y  x  的 y  次 幂5 注释1
 也 称为 整数 除 法
 结果值 是 一个整数 但 结果的 类型 不一定 是 int
 运算 结果 总是 向 负 无穷 的 方向 舍入12 为012 为112 为1 而12 为0
 不 可用于 复数
 而 应 在 适当 条件 下 使用 abs  转换为 浮点数
 从 浮点数 转换为 整数 会 被 舍入 或 是 像 在 c  语言中 一样 被 截断 请参阅 math
floor  和 math
ceil  函数 查看 转换 的完整 定义
 float  也 接受 字符串 nan  和 附带 可选 前缀 或 的 inf  分别 表 示 非 数字 nan  以及 正 或 负 无穷
 python  将 pow 00 和00 定义为1 这是 编程语言 的 普 遍 做 法
 接受 的 数字 字面值 包括 数 码0 到9 或 任何 等效 的 unicode  字符 具有 nd  特征属性 的 代码 点
 请参阅 httpswww
0 ucdextractedderived  numerictype
txt  查看 具有 nd  特征属性 的 代码 点 的完整 列表
 所有 numbers
real  类型 int  和 float  还 包括 下列 运算 运算 结果 math
truncx  x  截断 为 integral  roundx  n  x  舍入到 n  位 小 数 半 数值 会 舍入到 偶 数
 如果省略 n  则 默认为0
 math
floorx  x  的最大 integral  math
ceilx  x  的最小 integral  有关 更多的 数字 运算 请参阅 math  和 cmath  模块
 整数 类型 的 按位 运算
 按位 运算 只 对 整数 有意义
 计算 按位 运算 的结果 就 相当于 使用 无穷 多个 二进制 符号 位 对 二 的 补 码 执行 操作
 二进制 按位 运算 的优先级 全 都 低 于 数字 运算 但 又 高 于 比较 运算 一 元运算 具有 与其他 一 元 算术运算 and  相同 的优先级
 此 表 格 是 以 优先级 升 序 排序 的 按位 运算 列表 运算 结果 注释 x  y  x  和 y  按位 或4 x  y  x  和 y  按位 异 或4 x  y  x  和 y  按位 与4 x  n  x  左 移 n  位12 x  n  x  右 移 n  位13 x  x  逐 位 取反 注释1
 负 的 移 位 数 是 非 法 的 会导致 引发 valueerror
 左 移 n  位 等价于 乘 以 pow 2 n 
 右 移 n  位 等价于 除 以 pow 2 n  作 向下 取 整 除 法
 使用 带有 至少 一个 额外 符号 扩展 位 的 有限 个 二进制 补 码 表示 有效位 宽度 为1 maxx
bitlength  或 以 上 执行 这些 计算 就 足 以 获得 相当于 有 无 数 个 符号 位 时 的 同样 结果
 整数 类型 的附加 方法
int  类型 实现了 numbers
 此外 它 还提供了 其他 几个 方法 int
bitlength  返回 以 二进制 表示 一个整数 所 需要 的 位 数 不包括 符号 位 和 前面 的 零 n 37 binn 0 b 100101 n
bitlength 6 更 准确 地 说如果 x  非零 则 x
bitlength  是 使得2 k 1 absx 2 k  的唯一 正整数 k
 同样 地 当 absx  小 到 足以 具有 正确的 舍入 对 数 时 则 k 1 intlogabsx 2
 如果 x  为零 则 x
bitlength  返回0
 等价于 def  bitlengthself  s  binself  binary  representation  bin 370 b 100101 s  s
lstrip 0 b  remove  leading  zeros  and  minus  sign  return  lens  len 10010163
1 新版功能
tobyteslength  byteorder  signedfalse  返回 表示 一个整数 的 字节数组
bitlength 78 byteorderlittle  bxe 8 x 03 整数 会 使用 length  个字节 来表示
 如果 整数 不能用 给定 的字节数 来表示 则会引发 overflowerror
 byteorder  参数 确定 用于表示 整数 的 字节顺序
 如果 byteorder  为 big  则 最高 位 字节 放在 字节数组 的开头
 如果 byteorder  为 little  则 最高 位 字节 放在 字节数组 的末尾
 要 请求 主机 系统上 的 原生 字节顺序 请使用 sys
byteorder  作为 字节顺序 值
 signed  参数 确定 是否 使用 二 的 补 码 来表示 整数
 如果 signed  为 false  并且 给出的 是 负 整数 则会引发 overflowerror
 signed  的 默认值为 false
3
2 新版功能
frombytesbytes  byteorder  signedfalse  返回 由 给定 字节数组 所 表示 的 整数
frombytes 25500 byteorderbig 16711680 bytes  参数 必须为一个 byteslike  object  或 是 生成 字节 的可迭代对象
 byteorder  参数 确定 用于表示 整数 的 字节顺序
 如果 byteorder  为 big  则 最高 位 字节 放在 字节数组 的开头
 如果 byteorder  为 little  则 最高 位 字节 放在 字节数组 的末尾
 要 请求 主机 系统上 的 原生 字节顺序 请使用 sys
byteorder  作为 字节顺序 值
 signed  参数 指明 是否 使用 二 的 补 码 来表示 整数
3
2 新版功能
asintegerratio  返回 一 对 整数 其 比 率 正 好 等于 原 整数 并且 分 母 为 正 数
 整数 的 比 率 总是 用 这 个整数 本身 作为 分 子1 作为 分 母
3
8 新版功能
 浮点 类型 的附加 方法
float  类型 实现了 numbers
 float  还 具 有以下 附加 方法
asintegerratio  返回 一 对 整数 其 比 率 正 好 等于 原 浮点数 并且 分 母 为 正 数
 无穷大 会引发 overflowerror  而 nan  则会引发 valueerror
isinteger  如果 float  实例 可 用 有限 位 整数表示 则返回 true  否则返回 false 2
isinteger  false  两个方法 均 支持 与 十六进制数 字符串 之间的 转换
 由 于 python  浮点数 在内部 存储为 二进制数 因此 浮点数 与 十进制数 字符串 之间的 转换 往往 会导致 微 小 的 舍入 错误
 而 十六进制数 字符串 却 允许 精确 地 表示 和 描述 浮点数
 这 在 进行 调试 和 数值 工作 时 非常有用
hex  以 十六进制 字符串 的 形式返回 一个浮点数 表示
 对 于 有限 浮点数 这种 表示 法 将总是 包含 前导 的0 x  和 尾随 的 p  加 指 数
fromhexs  返回 以 十六进制 字符串 s  表示 的 浮点数 的 类 方法
 字符串 s  可以 带有 前导 和 尾随 的空格
 请注意 float
hex  是 实例方法 而 float
fromhex  是 类 方法
 十六进制 字符串 采用 的形式 为 sign 0 x  integer 
 fraction  p  exponent  可选的 sign  可以是 或 integer  和 fraction  是 十六进制数 码 组成的 字符串 exponent  是 带有 可选 前导 符 的 十进制 整数
 大小写 没有 影响 在 integer  或 fraction  中 必须 至少有 一个 十六进制数 码
 此 语法 类似于 c 99 标准 的6
2 小节 中 所描述的 语法 也是 java 1
5 以 上 所使用的 语法
 特别地 float
hex  的 输出 可 以用作 c  或 java  代码中 的 十六进制 浮点数 字面值 而 由 c  的 a  格式字符 或 java  的 double
tohexstring  所生成的 十六进制数 字符串 由 为 float
fromhex  所 接受
 请注意 exponent  是 十进制数 而非 十六进制数 它 给出 要 与 系 数 相 乘 的2 的 幂 次
 例如 十六进制数 字符串0 x 3
a 7 p 10 表示 浮点数310
167
010 即3740
0 对3740
0 应用 反向 转换 会 得到 另一个 代表 相同 数值 的 十六进制数 字符串 float
 数字类型 的哈希 运算
 对 于 可能为 不同类型 的 数字 x  和 y  要求 x  y  时 必 定 hashx  hashy  详情参见 hash  方法 的 文档
 为 了 便 于 在 各种 数字类型 包括 int  float  decimal
decimal  和 fractions
fraction  上 实现 并 保证 效率 python  对 数字类型 的哈希 运算 是基于 为 任意 有 理 数 定义 统 一 的 数学 函数 因此 该 运算 对 int  和 fractions
fraction  的全部 实例 以及 float  和 decimal
decimal  的全部 有限 实例 均可 用
 从 本 质 上 说 此 函数 是通过 以 一个 固定 质 数 p  进行 p  降 模 给出的
 p  的 值 在 python  中可以 sys
hashinfo  的 modulus  属性 的形式 被访问
cpython  implementation  detail  目前 所用的 质 数 设 定 在 c  long  为32 位 的 机器 上 p 2311 而 在 c  long  为64 位 的 机器 上 p 2611
 详细 规则 如下所 述 如果 x  m  n  是一个 非负 的 有 理 数 且 n  不 可 被 p  整 除 则 定义 hashx  为 m  invmodn  p  p  其 中 invmodn  p  是 对 n  模 p  取反
 如果 x  m  n  是一个 非负 的 有 理 数 且 n  可 被 p  整 除 但 m  不 能 则 n  不 能 对 p  降 模 以 上 规则 不适用 在此情况下 则 定义 hashx  为 常 数值 sys
 如果 x  m  n  是一个 负 的 有 理 数 则 定义 hashx  为 hashx
 如果 结果 哈希值 为1 则将其 替换为2
 特定 值 sys
inf  和 sys
nan  被用作 正 无穷、 负 无穷 和 空 值 所 分别 对应的 哈希值
 所有 可哈希 的 空 值 都 具有相同的 哈希值
 对于一个 complex  值 z  会通过 计算 hashz
imag  将 实 部 和 虚部 的 哈希值 结合 起来 并 进行 降 模2 sys
width  以 使 其 处于 range 2 sys
width 1 范围 之内
 同样 地 如果 结果为1 则将其 替换为2
 为 了 阐 明 上述 规则 这里 有一些 等价于 内置 哈希 算法的 python  代码 示例 可用于 计算 有 理 数、 float  或 complex  的 哈希值 import  sys  math  def  hashfractionm  n  compute  the  hash  of  a  rational  number  m  n
 迭代器 类型
python  支持 在 容器 中 进行迭代 的概念
 这是 通过使用 两个 单独 方法 来实现 的 它们 被用于 允许用户 自定义类 对 迭代 的 支持
 将 在 下文中 详细 描述 的 序列 总是 支持 迭代 方法
 容器对象 要 提供 迭代 支持 必须 定义一个 方法 container
iter  返回 一个 迭代器对象
 该对象 需要 支持 下文 所述 的 迭代器 协议
 如果 容器 支持 不同的 迭代 类型 则 可以提供 额外的 方法来 专门 地 请求 不同 迭代 类型 的 迭代器
 支持 多种 迭代 形式 的 对象 的 例子 有 同时 支持 广 度 优先 和 深度 优先 遍历 的 树 结构
 此方法 对应于 pythonc  api  中 python  对象类型 结构体 的 tpiter  槽 位
 迭代器对象 自身 需要 支持 以 下 两个方法 它们 共同 组成 了 迭代器 协议 iterator
iter  返回 迭代器对象 本身
 这是 同时 允许 容器 和 迭代器 配合 for  和 in  语 句 使用 所 必须 的
 此方法 对应于 pythonc  api  中 python  对象类型 结构体 的 tpiter  槽 位
next  从 容器 中 返回 下 一 项
 如果 已经 没有 项 可 返回 则会引发 stopiteration  异常
 此方法 对应于 pythonc  api  中 python  对象类型 结构体 的 tpiternext  槽 位
python  定义了 几种 迭代器对象 以 支持 对 一般 和 特定 序列类型、 字典 和其他 更 特别 的形式 进行迭代
 除了 迭代器 协议 的 实现 特定 类型 的其他 性 质 对 迭代 操作 来说 都 不 重要
 一旦 迭代器 的 next  方法 引发了 stopiteration  它必须 一 直 对 后续调用 引发 同样的 异常
 不 遵循 此行为 特性 的 实现 将 无法 正常 使用
 生成器 类型
python  的 generator  提供了一种 实现 迭代器 协议 的便捷 方式
 如果 容器对象 iter  方法 被 实现 为 一个 生成器 它 将自动 返回 一个 迭代器对象 从 技术 上 说 是一个 生成器对象 该 对象提供 iter  和 next  方法
 有关 生成器 的更多信息 可以 参阅 yield  表达式 的 文档
 序列类型 list  tuple  range
 有 三种 基本 序列类型 list  tuple  和 range  对象
 为 处理 二进制数据 和 文本 字符串 而 特别 定制 的附加 序列类型 会 在 专门 的 小节 中 描述
 通 用 序列 操作
 大多数 序列类型 包括 可变 类型 和 不可变 类型 都支持 下 表中的 操作
collections
sequence  abc  被 提供 用来 更容易 地 在 自定义 序列类型 上 正确地 实现 这些 操作
 此 表 按 优先级 升 序 列出了 序列 操作
 在 表 格 中 s  和 t  是 具有相同 类型 的 序列 n  i  j  和 k  是 整数 而 x  是 任何 满足 s  所 规 定 的 类型 和 值 限制 的 任意 对象
in  和 not  in  操作 具有与 比较 操作 相同 的优先级
 拼接 和 重复 操作 具有与 对 应 数值 运算 相同 的优先级
3 运算 结果 注释 x  in  s  如果 s  中 的 某 项 等于 x  则 结果1 为 true  否则为 false  x  not  in  s  如果 s  中 的 某 项 等于 x  则 结果1 为 false  否则为 true  s  t  s  与 t  相 拼接67 s  n  或 n  s  相当于 s  与 自身 进行 n  次 拼接27 si  s  的 第 i  项 起始 为03 sij  s  从 i  到 j  的 切片34 sijk  s  从 i  到 j  步 长 为 k  的35 切片 lens  s  的长度 mins  s  的最小 项 maxs  s  的最大 项 s
indexx  i  j  x  在 s  中 首次 出现 项 的 索引号8 索引号 在 i  或 其 后 且 在 j  之 前 s
countx  x  在 s  中出现的 总 次 数 相同类型 的 序列 也支持 比较
 特别地 tuple  和 list  的 比较 是通过 比较 对 应 元素 的字典 顺序
 这意味着 想要 比较 结果 相等 则 每个元素 比较 结果 都必须 相等 并且 两个 序列长度 必须 相同
 完整 细节 请参阅 语言 参考 的 比较 运算 部分
 注释1
 虽然 in  和 not  in  操作 在 通常情况下 仅 被用于 简单的 成员检测 某些 专门 化 序列 例如 str  bytes  和 bytearray  也 使用它们 进行 子 序 列 检测 gg  in  eggs  true 2
 小于0 的 n  值 会 被当作0 来处理 生成一个 与 s  同类型的 空 序 列
 请注意 序列 s  中的项 并 不会被 拷贝 它们会 被 多次 引用
 这一点 经常 会 令 python  编程 新 手 感到 困 扰 例如 lists 3 lists  lists 0
append 3 lists 333 具体 的原因 在 于 是一个包含 了 一个 空列表 的 单 元素 列表 所 以3 结果 中 的 三个 元素 都 是 对 这 一个 空列表 的 引用
 修改 lists  中的任何 一个元素 实际上 都 是 对 这 一个 空列表 的 修改
 你可以用 以 下方式 创 建 以 不同 列表 为 元素 的 列表 lists  for  i  in  range 3 lists 0
append 7 lists 357 进一步 的 解释 可以在 faq  条目 如何 创建 多 维 列表？ 中 查看
 如果 i  或 j  为负值 则 索引 顺序 是 相对于 序列 s  的末尾 索引号 会 被替换为 lens  i  或 lens  j
 但 要注意0 仍然 为0
 s  从 i  到 j  的 切片 被定义为 所有 满足 i  k  j  的 索引号 k  的 项 组成的 序列
 如果 i  或 j  大于 lens  则 使用 lens
 如果 i  被 省略或为 none  则 使用0
 如果 j  被 省略或为 none  则 使用 lens
 如果 i  大于 等于 j  则 切片 为空
 s  从 i  到 j  步 长 为 k  的 切片 被定义为 所有 满足0 n  jik  的 索引号 x  i  nk  的 项 组成的 序列
 换句话说 索引号 为 i  ik  i 2 k  i 3 k  以 此类推 当 达到 j  时 停止 但 一 定 不包括 j
 当 k  为 正 值 时 i  和 j  会 被 减 至 不 大于 lens 
 当 k  为负值 时 i  和 j  会 被 减 至 不 大于 lens 1
 如果 i  或 j  被 省略或为 none  它们会 成为 终止 值 是 哪 一 端 的 终止 值 则 取决于 k  的符号
 请注意 k  不 可 为零
 如果 k  为 none  则 当 作1 处理
 拼接 不 可变序列 总是会 生成 新 的 对象
 这意味着 通过 重复 拼接 来构建 序列 的 运行时 开销 将 会 基于 序列 总 长度 的 乘 方
 想要 获得 线 性 的 运行时 开销 你必 须 改 用 下列 替代 方案 之一 如果 拼接 str  对象 你可以 构建 一个列表 并 在 最后 使用 str
join  或 是 写入 一个 io
stringio  实例并 在 结束 时 获取 它 的 值 如果 拼接 bytes  对象 你可以 类似地 使用 bytes
join  或 io
bytesio  或者 你也可以 使用 bytearray  对象进行 原地 拼接
 bytearray  对象 是可变 的 并且 具有 高效 的 重 分配 机制 如果 拼接 tuple  对象 请改 为 扩展 list  类 对 于 其 它 类型 请查看 相应的 文档7
 某些 序列类型 例如 range  仅 支持 遵循 特定 模式 的 项 序列 因此 并 不 支 持 序列 拼接 或 重复
 当 x  在 s  中 找不到 时 index  会引发 valueerror
 不 是所有 实现 都支持 传入 额外 参数 i  和 j
 这 两个参数 允许 高效 地 搜索 序列 的 子 序 列
 传入 这两个 额外 参数 大致 相当于 使用 sij
indexx  但是 不 会 复 制 任何 数据 并且 返回 的 索引 是 相对于 序列 的开头 而非 切片 的开头
 不可变 序列类型
 不可变 序列类型 普 遍 实现 而 可变序列 类型 未 实现 的唯一 操作 就是 对 hash  内置函数 的 支持
 这种 支持 允许 不可变 类型 例如 tuple  实例 被用作 dict  键 以及 存储在 set  和 frozenset  实例 中
 尝试 对 包含有 不 可哈希 值 的 不 可变序列 进行 哈希 运算 将 会导致 typeerror
 可变序列 类型
 列表
 列表 是 可变序列 通常用 于 存放 同 类 项目的 集合 其 中 精确的 相似 程度 将根据 应用 而 变化
class  listiterable  可以用 多 种方式 构建 列表 使用 一 对 方括号 来表示 空列表 使用 方括号 其中的 项 以 逗号分隔 a  a  b  c  使用 列表推导式 x  for  x  in  iterable  使用 类型 的 构造器 list  或 listiterable  构造器 将 构造 一个列表 其中的 项 与 iterable  中的项 具有相同的 的 值 与 顺序
 iterable  可以是 序列、 支持 迭代 的容器 或 其 它 可迭代对象
 如果 iterable  已经 是 一个列表 将 创建并返回 其 副本 类似于 iterable 
 例如 listabc  返回 a  b  c  而 list 123 返回123
 如果没有 给出 参数 构造器 将 创建一个 空列表
 其 它 许多 操作 也 会产生 列表 包括 sorted  内置函数
 列表 实现了 所有 一般 和 可变 序列 的 操作
 列表 还 额外 提供了 以下方法 sort  keynone  reversefalse  此方法会 对 列表 进行 原地 排序 只 使用 来进行 各 项 间 比较
 异常 不 会 被 屏蔽—— 如果有 任何 比较 操作 失败 整个 排序 操作 将 失败 而 列表可 能 会 处于 被 部分 修改 的 状态
 sort  接受 两个 仅限 以 关键字 形式 传入的 参数 仅限 关键字参数 key  指定 带有一个 参数的函数 用于从 每个 列表 元素 中提取 比较 键 例 如 keystr
 对应于 列表中 每一 项 的 键 会 被 计算 一次 然后 在 整个 排序 过程中 使用
 默认值 none  表示 直接 对 列表 项 排序 而 不 计算 一个单独的 键值
 可以使用 functools
cmptokey  将2
x  风格的 cmp  函数 转换为 key  函数
 reverse  为 一个 布尔值
 如果设 为 true  则 每个 列表 元素 将按 反向 顺序 比较 进行排序
 当 顺序 大 尺寸 序列 时 此方法会 原地 修改 该 序列 以 保证 空间 经 济 性
 为 提 醒 用户 此操作 是通过 间接 影响 进行 的 它并不 会返回 排序 后 的 序列 请使 用 sorted  显示 地 请求 一个新的 已 排序 列表 实例
 sort  方法 确保 是 稳定 的
 如果一个 排序 确保 不 会 改变 比较 结果 相等 的 元素 的 相对 顺序 就 称 其 为 稳定 的 这 有 利 于 进行 多重 排序 例如 先 按 部 门、 再 接 薪 级 排序
 有关 排序 示例 和 简 要 排序 教程 请参阅 排序 指南
 cpython  implementation  detail  在 一个列表 被 排序 期间 尝试 改 变 甚至 进行 检测 也会 造成 未定义 的 影响
 python  的 c  实现 会 在 排序 期 间 将 列表 显示 为空 如果 发 现 列表 在 排序 期间 被改变 将会引发 valueerror
 元组
 元组 是不可变 序列 通常用 于 储存 异 构 数据 的 多项集 例如 由 enumerate  内置函数 所产生 的 二 元组
 元组 也 被用于 需要 同 构 数据 的 不 可变序列 的 情况 例如 允许 存储 到 set  或 dict  的 实例
class  tupleiterable  可以用 多 种方式 构建 元组 使用 一 对 圆括号 来表示 空 元组 使用 一个 后缀 的 逗号 来表示 单 元组 a  或 a  使用 以 逗号分隔 的多个 项 a  b  c  or  a  b  c  使用内置 的 tuple  tuple  或 tupleiterable  构造器 将 构造一个 元组 其中的 项 与 iterable  中的项 具有相同的 值 与 顺 序
 iterable  可以是 序列、 支持 迭代 的容器 或其他 可迭代对象
 如果 iterable  已经 是 一个元组 会 不 加 改变 地 将 其 返回
 例如 tupleabc  返回 a  b  c  而 tuple 123 返回123
 如果没有 给出 参数 构造器 将 创建一个 空 元组
 请注意 决定 生成 元组 的 其 实 是 逗号 而不是 圆括号
 圆括号 只 是可选的 生成 空 元组或 需要 避免 语法 歧义 的 情况 除外
 例如 fa  b  c  是 在 调用 函 数 时 附带 三个参数 而 fa  b  c  则 是 在 调用函数 时 附带 一个 三 元组
 元组 实现了 所有 一般 序列 的 操作
 对 于 通过 名称 访问 相比 通过 索引 访问 更 清晰 的 异 构 数据 多项集 collections
namedtuple  可能是 比 简单 元组 对象 更 为 合适的 选择
range  对象
 文本 序列类型 str
 字符串 的 方法
printf  风格的 字符串格式化
 二进制 序列类型 bytes  bytearray  memoryview
 操作 二进制数据 的 核心 内置类型 是 bytes  和 bytearray
 它们 由 memoryview  提供 支持 该对象 使用 缓冲区 协议 来访问 其他 二进制 对象 所 在 内存 不需要 创建 对象 的副本
array  模块 支持 高效 地 存储 基本 数据类型 例如32 位 整数 和 ieee 754 双精度 浮点 值
bytes  对象
bytes  对象 是 由 单个 字节 构成的 不 可变序列
 由 于 许多 主要 二进制 协议 都 基于 ascii  文本 编码 因此 bytes  对象 提供了一些 仅在 处理 ascii  兼容 数据 时 可 用 并且 在 许多 特性 上 与 字符串 对象 紧 密 相关的 方法
class  bytessource  encoding  errors  首先 表示 bytes  字面值 的语法 与 字符串字面值 的 大致 相同 只是 添加了一 个 b  前缀 单 引号 b  同样 允许 嵌入 双 引号
 双引号 b  同样 允许 嵌入 单 引号
 三 重 引号 b  三 重 单 引号 b  三 重 双引号 bytes  字面值 中 只 允许 ascii  字符 无论 源代码 声明 的 编码 为 何
 任何 超出127 的 二进制 值 必须使用 相应的 转义 序列 形式 加入 bytes  字面值
 像 字符串字面值 一样 bytes  字面值 也可以使用 r  前缀 来 禁用 转义 序列 处 理
 请参阅 字符串 和 字节串 字面值 了解有关 各种 bytes  字面值 形式 的 详 情 包括 所支持的 转义 序列
 虽然 bytes  字面值 和 表示法 是基于 ascii  文本 的 但 bytes  对象 的 行为 实 际上 更 像 是不可变的 整数 序列 序列 中的每个 值 的大小 被 限制为0 x 256 如果 违 反 此 限制 将引发 valueerror
 这种 限制 是 有 意 设计用 以 强 调 以 下 事实 虽然 许多 二进制 格式 都 包含 基于 ascii  的 元素 可以通过 某些 面向 文本 的算法 进行 有用的 操作 但 情况 对 于 任意 二进制数据 来说 通常 却 并 非 如 此 盲 目 地 将 文本 处理 算法 应用 于 不兼容 ascii  的 二进制数据 格式 往往 将导致 数据 损坏
 除了 字面值 形式 bytes  对象 还可以 通过 其他 几 种方式来 创建 指定 长度 的 以 零值 填充 的 bytes  对象 bytes 10 通过 由 整数 组成的 可迭代对象 bytesrange 20 通过 缓冲区 协议 复制 现有的 二进制数据 bytesobj  另请参阅 bytes  内置类型
 由 于 两个 十六进制数 码 精确 对 应 一个字节 因此 十六进制数 是 描述 二进制数 据 的 常 用 格式
 相应地 bytes  类型 具有 从 此 种 格式 读取数据 的附加 类 方法 classmethod  fromhexstring  此 bytes  类 方法返回一个 解码 给定 字符串 的 bytes  对象
 字符串 必 须 由 表示 每个 字节 的两个 十六进制数 码 构成 其中的 ascii  空白符 会 被 忽略
 bytes
fromhex 2 ef 0 f 1 f 2 b
xf 0 xf 1 xf 2 在3
7 版更改 bytes
fromhex  现在会 忽略 所有 ascii  空白符 而 不 只是 空格符
 存在一个 反向 转换 函数可以 将 bytes  对象转换为 对应的 十六进制 表示
 hexsep  bytespersep  返回 一个字符串 对象 该对象 包含 实例 中 每个 字节 的两个 十六进制数 字
 bxf 0 xf 1 xf 2
hex  f 0 f 1 f 2 如果你 希望 令 十六进制数 字符串 更易 读 你可以 指定 单个字符 分隔符 作为 sep  形参 包含于 输出 中
 默认 会 放在 每个 字节 之间
 第二个 可选的 bytespersep  形参 控制 间 距
 正 值 会 从 右 开始 计算 分隔符 的 位置 负值 则 是 从左 开始
 value  bxf 0 xf 1 xf 2 value
hex  f 0 f 1 f 2 value
hex 2 f 0 f 1 f 2 buuddlrlrab
hex 4555544444 c 524 c 5241423
5 新版功能
 在3
8 版更改 bytes
hex  现在支持 可选的 sep  和 bytespersep  形参 以 在 十六进制 输出 的 字节 之间 插入 分隔符
 由 于 bytes  对象 是 由 整数 构成的 序列 类似于 元组 因此 对于一个 bytes  对象 bb 0 将 为 一个整数 而 b 01 将 为 一个 长度为1 的 bytes  对象
 这 与 文本 字符串 不同 索引 和 切片 所产生 的 将 都 是一个 长度为1 的 字符串
bytes  对象 的 表示 使用 字面值 格式 b
 因为它 通常 都 要 比 像 bytes 464646 这样的 格式 更好 用
 你 总是 可以使用 listb  将 bytes  对象转换为 一个 由 整数 构成的 列表
 注解 针对 python 2
x  用户 的 说明 在 python 2
x  系列 中 允许8 位 字符串2
x  所提供的 最接近 内置 二进制数据 类型的对象 与 unicode  字符串 进行 各 种 隐式 转换
 这 是为了 实现 向下兼容 的 变 通 做法 以 适 应 python  最初 只 支 持8 位 文本 而 unicode  文本 是 后 来 才 被加入 这 一 事实
 在 python 3
x  中 这些 隐式 转换 已 被取消——8 位 二进制数据 与 unicode  文本 间 的 转换 必须 显式地 进行 bytes  与 字符串 对象 的 比较 结果 将总是 不 相等
bytearray  对象
bytes  和 bytearray  操作
printf  风格的 字节串 格式化
 内存 视图
 集合 类型 set  frozenset
set  对象 是 由 具有 唯一 性 的 hashable  对象 所 组成的 无 序 多项集
 常见的 用 途 包括 成员检测、 从 序列中 去除 重复 项 以及 数学 中 的 集合 类 计算 例如 交 集、 并 集、 差 集 与 对 称 差 集 等等
 关 于其他 容器对象 请 参看 dict  list  与 tuple  等 内置类 以及 collections  模块
 与其他 多项集 一样 集合 也支持 x  in  set  lenset  和 for  x  in  set
 作为 一种 无 序 的 多项集 集合 并 不 记录 元素 位置 或 插入顺序
 相应地 集合 不支持 索引、 切片 或其他 序列 类 的 操作
 目前 有两种 内置 集合 类型 set  和 frozenset
 set  类型 是可变 的 其内容 可以使用 add  和 remove  这样的 方法来 改变
 由 于 是可变 类型 它 没有 哈希值 且不 能 被用作 字典的键 或其他 集合 的 元素
 frozenset  类型 是不可变 并且 为 hashable  其内容 在 被创建 后 不 能 再 改变 因此它 可以 被用作 字典的键 或其他 集合 的 元素
 除了 可以使用 set  构造器 非空 的 set  不 是 frozenset  还 可以通过将 以 逗号分隔 的 元素 列表 包含于 花括号 之内 来创建 例如 jack  sjoerd
 两个 类 的 构造器 具有相同的 作 用方式 class  setiterableclass  frozensetiterable  返回一个新的 set  或 frozenset  对象 其 元素 来自 于 iterable
 集合 的 元素 必须为 hashable
 要 表示 由 集合 对象 构成的 集合 所有的 内 层 集 合 必须为 frozenset  对象
 如果未指定 iterable  则 将 返回一个新的 空 集合
 集合 可 用 多 种方式来 创建 使用 花括号 内 以 逗号分隔 元素 的方式 jack  sjoerd  使用 集合 推导式 c  for  c  in  abracadabra  if  c  not  in  abc  使用 类型 构造器 set  setfoobar  seta  b  foo  set  和 frozenset  的 实例 提供 以 下 操作 lens  返回 集合 s  中的元素 数量 即 s  的 基 数
 x  in  s  检测 x  是否为 s  中 的成员
 x  not  in  s  检测 x  是否 非 s  中 的成员
 isdisjointother  如果 集合 中没有 与 other  共 有 的 元素 则返回 true
 当且仅当 两个 集合 的 交 集 为空 集合 时 两者 为 不 相 交 集合
 issubsetother  set  other  检测 是否 集合 中的每个 元素 都 在 other  之 中
 set  other  检测 集合 是否为 other  的 真 子集 即 set  other  and  set  other
 issupersetother  set  other  检测 是否 other  中的每个 元素 都 在 集合 之 中
 set  other  检测 集合 是否为 other  的 真 超 集 即 set  other  and  set  other
 返回一个新 集合 其中包含 来自 原 集合 以及 others  指定 的 所有 集合中 的 元素
 返回一个新 集合 其中包含 原 集合 以及 others  指定 的 所有 集合中 共 有 的 元素
 返回一个新 集合 其中包含 原 集合中 在 others  指定 的其他 集合中 不存在 的 元素
 symmetricdifferenceother  set  other  返回一个新 集合 其 中的元素 或 属于 原 集合 或 属于 other  指定 的其他 集合 但不 能 同时 属于 两者
 copy  返回 原 集合 的 浅 拷贝
 请注意 非 运算符 版本 的 union  intersection  difference  以及 symmetricdifference  issubset  和 issuperset  方 法 会 接受 任意 可迭代对象 作为参数
 相比 之 下 它们 所对应的 运算符 版本 则 要求 其 参数为 集合
 这 就 排除 了 容易 出错 的 构造 形式 例如 setabc  cbs  而 推荐 可读性 更 强 的 setabc
 set  和 frozenset  均 支持 集合 与 集合 的 比较
 两个 集合 当且仅当 每个 集合 中的每个 元素 均 包含于 另一个 集合 之内 即 各 为 对 方 的 子集 时 则 相等
 一个 集合 当且仅当 其 为 另一个 集合 的 真 子集 即 为 后者 的 子集 但 两者 不 相 等 时 则 小于 另一个 集合
 一个 集合 当且仅当 其 为 另一个 集合 的 真 超 集 即 为 后者 的 超 集 但 两者 不 相等 时 则 大于 另一个 集合
 set  的 实例 与 frozenset  的 实例 之间 基于 它们的 成员 进行比较
 例如 setabc  frozensetabc  返回 truesetabc  in  setfrozensetabc  也 一样
 子集 与 相等 比较 并 不 能 推 广 为 完全 排序 函数
 例如 任意 两个 非空 且不 相 交 的 集合 不 相等 且 互 不 为 对 方 的 子集 因此 以 下 所有 比较 均 返回 false  ab  ab  or  ab
 由 于 集合 仅 定义了 部分 排序 子集 关系 因此 由 集合 构成的 列表 list
sort  方法 的 输出 并 无 定义
 集合 的 元素 与 字典的键 类似 必须为 hashable
 混合 了 set  实例 与 frozenset  的 二进制 位运算 将 返回 与 第一个操作数 相同 的 类型
 例如 frozensetab  setbc  将 返回 frozenset  的 实例
 下 表 列出了 可用于 set  而 不能用 于 不可变的 frozenset  实例 的 操作 updateothers  set  other 
 更新 集合 添加 来自 others  中 的所有元素
 更新 集合 只 保留 其 中 在所有 others  中 也 存在的 元素
 更新 集合 移除 其 中 也 存在于 others  中的元素
 symmetricdifferenceupdateother  set  other  更新 集合 只 保留 存在于 集合 的 一 方 而非 共同 存在的 元素
 addelem  将 元素 elem  添加到 集合中
 removeelem  从 集合 中移除 元素 elem
 如果 elem  不存在 于 集合中 则会引发 keyerror
 discardelem  如果 元素 elem  存在于 集合中 则将其 移除
 pop  从 集合 中移除 并返回 任意 一个元素
 如果 集合 为空 则会引发 keyerror 
 clear  从 集合 中移除 所有元素
 请注意 非 运算符 版本 的 update  intersectionupdate  differenceupdate  和 symmetricdifferenceupdate  方法 将 接受 任意 可迭代对象 作为参数
 请注意 contains  remove  和 discard  方法 的 elem  参数 可能是 一个 set
 为 支持 对 一个 等价 的 frozenset  进行 搜索 会 根据 elem  临时 创建一个 该 类型对象
 映射 类型 dict
mapping  对象 会 将 hashable  值 映射到 任意 对象
 映射 属于 可变对象
 目前 仅 有一种 标准 映射 类型 字典
 关 于其他 容器对象 请 参看 list  set  与 tuple  等 内置类 以及 collections  模块
 字典的键 几乎 可以是任何 值
 非 hashable  的 值 即 包含 列表、 字典 或其他 可变 类型 的 值 此 类对象 基于 值 而非 对象 标识 进行比较 不 可用作 键
 数字类型 用 作 键 时 遵循 数字 比较 的 一般 规则 如果两 个 数值 相等 例如1 和1
0 则 两者 可以 被用来 索引 同一 字典 条目
 但是 请注意 由 于 计算机 对 于 浮点数 存储 的 只是 近似值 因此 将 其 用 作 字典 键 是 不 明 智 的
 字典 可以通过将 以 逗号分隔 的 键 值 对 列表 包含于 花括号 之内 来创建 例如 jack 4098 sjoerd 4127 或4098 jack 4127 sjoerd  也可以通过 dict  构造器 来创建
class  dictkwargclass  dictmapping  kwargclass  dictiterable  kwarg  返回一个新的 字典 基于 可选的 位置参数 和 可能为 空 的 关键字参数 集 来初始 化
 字典 可 用 多 种方式来 创建 使用 花括号 内 以 逗号分隔 键 值 对 的方式 jack 4098 sjoerd 4127 or 4098 jack 4127 sjoerd  使用 字典 推导式 x  x 2 for  x  in  range 10 使用 类型 构造器 dict  dictfoo 100 bar 200 dictfoo 100 bar 200 如果没有 给出 位置参数 将 创建一个 空 字典
 如果给出 一个 位置参数 并且 其 属于 映射 对象 将 创建一个 具有与 映射 对象 相同 键值对 的字典
 否则 的话 位置参数 必须为一个 iterable  对象
 该 可迭代对象 中 的每一 项 本身 必须 为 一个 刚 好 包含 两个 元素 的可迭代对象
 每一 项 中 的第一个 对象 将 成为 新 字 典 的 一个 键 第二个 对象 将 成为 其 对应的值
 如果一个 键 出现 一次 以 上 该 键 的最后一个 值 将 成为 其 在 新 字典中 对应的值
 如果给出 了 关键字参数 则 关键字参数 及其 值会被 加入 到 基于 位置参数 创建 的字典
 如果要 加入 的 键 已存在 来自 关键字参数 的值将 替代 来自 位置参数 的 值
 作为 演示 以下示例 返回 的字典 均 等于 one 1 two 2 three 3 a  dictone 1 two 2 three 3 b  one 1 two 2 three 3 c  dictzipone  two  three 123 d  dicttwo 2 one 1 three 3 e  dictthree 3 one 1 two 2 f  dictone 1 three 3 two 2 a  b  c  d  e  f  true  像 第一个 例子 那样 提供 关键字参数 的方式 只能 使用 有效的 python  标识符 作 为 键
 其他方 式 则 可 使用 任何 有效的 键
 这些 是 字典 所支持的 操作 因而 自定义 的 映射 类型 也 应当 支持 listd  返回 字典 d  中使用的 所有 键 的 列表
 lend  返回 字典 d  中的项 数
 dkey  返回 d  中 以 key  为 键 的 项
 如果 映射中 不存在 key  则会引发 keyerror
 如果 字典 的子类 定义了 方法 missing  并且 key  不存在 则 dkey  操作 将 调用 该方法 并附带 键 key  作为参数
 dkey  随后 将 返回 或 引发 missingkey  调用 所 返回 或 引发 的 任何 对象 或 异常
 没 有其他 操作 或 方法 会 发起调用 missing
 如果未 定义 missing  则会引发 keyerror
 missing  必须是一 个 方法 它 不 能 是一个 实例变量 class  counterdict 
 return 0 c  counter  cred 0 cred 1 cred 1 上面的例子 显示了 collections
counter  实现 的部分 代码
 还有 另一 个不同 的 missing  方法 是 由 collections
defaultdict  所 使用 的
 dkey  value  将 dkey  设 为 value
 del  dkey  将 dkey  从 d  中移除
 如果 映射中 不存在 key  则会引发 keyerror
 key  in  d  如果 d  中 存 在 键 key  则返回 true  否则返回 false
 key  not  in  d  等价于 not  key  in  d
 iterd  返回 以 字典的键 为 元素 的 迭代器
 这是 iterd
keys  的 快 捷方式
 clear  移除 字典中 的所有元素
 copy  返回 原 字典 的 浅 拷贝
 classmethod  fromkeysiterable  value  使用 来自 iterable  的 键 创建一个新 字典 并 将 键值 设 为 value
 fromkeys  是一个 返回 新 字典 的 类 方法
 value  默认为 none
 所有 值 都 只 引用 一个单独的 实例 因此 让 value  成为 一个 可变对象 例 如 空列表 通常 是没有 意义 的
 要获取 不同的 值 请改用 字典 推导式
 getkey  default  如果 key  存在于 字典中 则返回 key  的 值 否则返回 default
 如果 default  未 给出 则 默认为 none  因而 此方法 绝 不 会引发 keyerror
 items  返回 由 字典 项 键 值 对 组成的 一个 新 视图
 参见 视图 对象 文 档
 keys  返回 由 字典 键 组成的 一个 新 视图
 参见 视图 对象 文档
 popkey  default  如果 key  存在于 字典中 则将其 移除 并返回其 值 否则返回 default 
 如果 default  未 给出 且 key  不存在 于 字典中 则会引发 keyerror
 popitem  从 字典 中移除 并返回一个 键 值 对
 键值对 会按 lifo  后 进先出 的顺序 被 返回
 popitem  适用于 对 字典 进行 消耗 性 的 迭代 这 在 集合 算法 中 经常 被 使 用
 如果 字典 为空 调用 popitem  将引发 keyerror
 在3
7 版更改 现在会 确保 采用 lifo  顺序
 在 之前 的版本中 popitem  会返回一个 任意 的 键值对
 reversedd  返回 一个 逆 序 获取 字典 键 的 迭代器
 这是 reversedd
keys  的 快 捷方式
3
8 新版功能
 setdefaultkey  default  如果 字典 存 在 键 key  返回 它 的 值
 如果 不存在 插入 值 为 default  的 键 key  并返回 default 
 default  默认为 none
 updateother  使用 来自 other  的 键值对 更新 字典 覆盖 原 有 的 键
 返回 none
 update  接受 另一个 字典 对象或者 一个包含 键值对 以 长度为 二 的 元组 或其他 可迭代对象 表示 的可迭代对象
 如果给出 了 关键字参数 则 会 以 其 所指定的 键值对 更新 字典 d
updatered 1 blue 2
 values  返回 由 字典 值 组成的 一个 新 视图
 参见 视图 对象 文档
 两个 dict
values  视图 之间的 相等 性 比较 将 总是返回 false
 这 在 dict
values  与 其 自身 比较 时 也 同样 适用 d  a 1 d
values  false  d  other  合并 d  和 other  中 的键和值 来 创建一个新的 字典 两者 必须 都 是 字 典
 当 d  和 other  有相同 键 时 other  的 值 优先
3
9 新版功能
 d  other  用 other  的键和值 更新 字典 d  other  可以是 mapping  或 iterable  的 键值对
 当 d  和 other  有相同 键 时 other  的 值 优先
3
9 新版功能
 两个 字典 的 比较 当且仅当 它们 具有相同的 键 值 对 时才会 相等 不 考 虑 顺序
 排序 比较 会引发 typeerror
 字典 会保留 插入 时 的顺序
 请注意 对 键 的 更新 不 会影响 顺序
 删除 并 再次 添加 的 键 将 被 插入 到 末尾
values 1234 done 42 d  one 42 two 2 three 3 four 4 del  dtwo  dtwo  none  d  one 42 three 3 four 4 two  none  在3
7 版更改 字典 顺序 会 确保 为 插入顺序
 此行为 是 自3
6 版 开始 的 cpython  实现细节
 字典 和 字典 视图 都是可 逆 的
items  four 4 three 3 two 2 one 1 在3
8 版更改 字典 现在是 可 逆 的
 参见 types
mappingproxytype  可被用来 创建一个 dict  的只读 视图
 字典 视图 对象
 由 dict
values  和 dict
items  所返回的 对象 是 视图 对象
 该 对象提供 字典 条目 的 一个 动态 视图 这意味着 当 字典 改变 时 视图 也会 相应 改变
 字典 视图 可以被 迭代 以 产生 与 其 对应的 数据并 支持 成员检测 lendictview  返回 字典中 的 条目 数
iterdictview  返回 字典中 的 键、 值 或 项 以 键 值 为 元素 的 元组 表示 的 迭代器
 键和值 是 按 插入 时 的顺序 进行迭代 的
 这样就 允许 使用 zip  来创建 值 键 对 pairs  zipd
 另一个 创建 相同 列 表 的 方式是 pairs  v  k  for  k  v  in  d
 在 添加 或 删除 字典中 的 条目 期间 对 视图 进行迭代 可能 引发 runtimeerror  或者 无法 完全 迭代 所有 条目
 在3
7 版更改 字典 顺序 会 确保 为 插入顺序
x  in  dictview  如果 x  是 对 应 字典中 存在的 键、 值 或 项 在 最后一 种情况下 x  应 为 一 个 键 值 元组 则返回 true
reverseddictview  返回 一个 逆 序 获取 字典 键、 值 或 项 的 迭代器
 视图 将按 与 插入 时 相反 的顺序 进行迭代
 在3
8 版更改 字典 视图 现在是 可 逆 的
 键 视图 类似于 集合 因为 其 条目 不 重复 且 可哈希
 如果所 有 值 都是可 哈希 的 即 键 值 对 也是 不 重复 且 可哈希 的 那么 条目 视图 也会 类似于 集合
 值 视图 则 不 被视为 类似于 集合 因 其 条目 通常 都 是 有 重复 的
 对 于 类似于 集合 的 视图 为 抽象基类 collections
set  所定义的 全部 操作 都 是有效的 例如 或
 一个 使用 字典 视图 的 示例 dishes  eggs 2 sausage 1 bacon 1 spam 500 keys  dishes
 上下文管理器 类型
python  的 with  语句 支持 通过 上下文管理器 所定义的 运行时 上下文 这 一 概念
 此 对象 的 实现 使用了 一 对 专门 方法 允许用户 自定义类 来 定义 运行时 上下文 在 语句体 被执行 前 进入 该 上下文 并 在 语句 执行 完毕 时 退出 该 上下文 contextmanager
enter  进入 运行时 上下文 并返回 此 对象 或 关联到 该 运行时 上下文 的 其他对象
 此方 法 的返回值 会 绑定到 使用 此 上下文管理器的 with  语句 的 as  子句中 的 标识符
 一个 返回 其 自身 的 上下文管理器的 例子 是 file  object
 文件对象 会 从 enter  返回 其 自身 以允许 open  被用作 with  语句中 的上下 文 表达式
 一个 返回 关联 对象 的 上下文管理器的 例子 是 decimal
localcontext  所 返回的对象
 此 种 管理器 会 将 活动 的 decimal  上下文 设 为 原始 decimal  上 下文 的 一个 副本 并返回 该 副本
 这允许 对 with  语句 的 语句体 中 的当前 decimal  上下文 进行 更改 而不会 影响 with  语句 以外的 代码
exitexctype  excval  exctb  退出 运行时 上下文 并返回一个 布尔值 旗标 来 表明 所 发生 的 任何 异常 是否 应当 被 屏蔽
 如果在 执行 with  语句 的 语句体 期间发生 了 异常则 参数 会 包含 异常 的 类型、 值 以及 回溯 信息
 在其他情况下 三个参数 均为 none
 自 此 方法返回一个 真值 将导致 with  语句 屏蔽 异常 并 继续执行 紧 随 在 with  语句 之后的 语句
 否则 异常 将 在 此方法 结束 执行 后 继续 传播
 在 此 方法 执行 期间发生 的异常将 会 取 代 with  语句 的 语句体 中 发生 的 任何 异常
 传入的 异常 绝对 不 应当被 显式地 重新引发—— 相反 地 此方法 应当 返回 一个 假值 以 表明 方法 已 成功 完成 并且 不希望 屏蔽 被 引发的异常
 这允许 上下文管 理 代码 方便地 检测 exit  方法 是否 确实 已 失败
python  定义了 一些 上下文管理器 来 支持 简 易 的 线程 同步、 文件 或 其他对象 的 快速 关闭 以及 更 方便地 操作 活动 的 十进制 算术 上下文
 除了 实现 上下文管理 协议 以外 不同类型 不会被 特殊 处理
 请参阅 contextlib  模块 查看 相关的 示例
python  的 generator  和 contextlib
contextmanager  装饰器 提供了 实现 这些 协议 的便捷 方式
 如果 使用 contextlib
contextmanager  装饰器 来 装饰 一个 生成器函数 它 将返回一个 实现了 必要的 enter  andexit  方法 的 上下文管理器 而不再 是 由 未 经 装饰 的 生成器函数 所产生 的 迭代器
 请注意 pythonc  api  中 python  对象的类型 结构 中 并没有 针对 这些方法 的 专门 槽 位
 想要 定义 这些方法 的 扩展 类型 必须 将它们 作为 普通的 python  可 访问 方法 来提供
 与 设置 运行时 上下文 的开销 相比 单个 类 字典 查找 的开销 可以 忽略 不 计
generic  alias  type
 注解 if  the  getitem  of  the  class  metaclass  is  present  it  will  take  precedence  over  the  classgetitem  defined  in  the  class  see  pep 560 for  more  details
standard  generic  collections
special  attributes  of  generic  alias
parameters  t  参见 pep 585 type  hinting  generics  in  standard  collections  classgetitem  used  to  implement  parameterized  generics
 泛型 generic  generics  in  the  typing  module
3
9 新版功能
 其他 内置类型
 解释器 支持 一些 其他 种类 的 对象
 这些 对象 大 都 仅 支持 一 两种 操作
 模块
 模块 唯一的 特殊 操作 是 属性 访问 m
name  这里 m  为 一个 模块 而 name  访问 定义 在 m  的符号 表中的 一个 名称
 模块属性 可以被 赋值
 请注意 import  语句 严格 来说 也是 对 模块 对象 的一种 操作 import  foo  不 要求 存 在 一个名为 foo  的 模块 对象 而 是 要求 存在一个 对 于 名为 foo  的 模块 的 永 久 性 定义
 每个模块 都有一个 特殊 属性 dict
 这 是包含 模块 的符号 表 的字典
 修改 此 字典 将 实际 改变 模块 的符号 表 但是 无法 直接 对 dict  赋值 你可以 写 m
dicta 1 这 会 将 m
a  定义为1 但是你 不 能 写 m
 不 建议 直接 修改 dict
 内置 于 解释器中 的 模块 会 写成 这样 module  sys  builtin
 如果是 从 一个 文件 加载 则 会 写成 module  os  fromusrlocallibpythonx
 类 与 类实例
 关于 这些类型 请参阅 对象、 值 与 类型 和 类定义
 函数
 函数对象 是通过 函数定义 创建 的
 对 函数对象 的唯一 操作 是 调用 它 funcargumentlist
 实际上 存 在 两 种不同 的 函数对象 内置函数 和 用户自定义 函数
 两者 支持 同样的 操作 调用函数 但 实现 方式 不同 因此 对象类型 也 不同
 更多信息请参阅 函数定义
 方法
 方法 是 使用 属性 表示法 来 调用 的 函数
 存 在 两种 形式 内置 方法 例如 列表 的 append  方法 和 类实例 方法
 内置 方法 由 支持 它们的 类型 来 描述
 如果你 通过 一个实例 来访问 方法 即 定义 在 类 命名空间 内 的 函数 你 会 得到 一个特殊 对象 绑定 方法 或 称 实例方法 对象
 当 被调用 时它会 将 self  参数 添加到 参数列表
 绑定 方法 具有 两个 特殊 的只读 属性 m
self  操作 该 方法的对象 而 m
func  是 实现 该方法 的 函数
 调用 marg 1 arg 2
 argn  完全 等价于 调用 m
 与 函数对象 类似 绑定 方法 对象 也支持 获取 任意 属性
 但 是由于 方法 属性 实际上 保存 于 下层的 函数对象 中 meth
func  因此 不允许 设置 绑定 方法 的 方法 属性
 尝试 设置 方法 的 属性 将 会导致 引发 attributeerror
 想要 设置 方法 属性 你必须 在 下层的 函数对象 中 显式地 对 其 进行 设置 class  c 
whoami  my  name  is  method  更多信息请参阅 标准类型层级结构
 代码对象
 代码对象 被 具体实现 用来 表示 伪 编译 的 可执行 python  代码 例如 一个 函数体
 它们 不同于 函数对象 因为它们 不包含 对 其 全局 执行 环境 的 引用
 代码对象 由 内置的 compile  函数返回 并 可通过 从 函数对象 的 code  属性 从 中提取
 另请参阅 code  模块
 可以通过将 代码对象 而非 源码 字符串 传给 exec  或 eval  内置函数 来执行 或 求值
 更多信息请参阅 标准类型层级结构
 类型对象
 类型对象 表示 各种 对象类型
 对象的类型 可通过 内置函数 type  来获取
 类型 没有 特殊 的 操作
 标准库 模块 types  定义了 所有 标准 内置类型 的 名称
 类型 以这样 的写法 来表示 class  int
 空 对象
 此 对象 会 由 不 显式地 返回值 的 函数 所 返回
 它 不支持 任何 特殊 的 操作
 空 对象 只 有一种 值 none  这是 个 内置 名称
 typenone  会生成 同 一个 单 例
 该对象 的写法 为 none
 省略 符 对象
 此 对象 常 被用于 切片 参见 切片
 它 不支持 任何 特殊 的 操作
 省略 符 对象 只 有一种 值 ellipsis  这是 个 内置 名称
 typeellipsis  会生成 ellipsis  单 例
 该对象 的写法 为 ellipsis  或
 未 实现 对象
 此 对象会被 作为 比较 和 二元 运算 被 应用 于 它们所 不支持 的 类型 时 的返回值
 请参阅 比较 运算 了解 更多信息
 未 实现 对象 只 有一种 值 notimplemented
typenotimplemented  会生成 这 个 单 例
 该对象 的写法 为 notimplemented
 布尔值
 布尔值 是 两个 常量 对象 false  和 true
 它们 被用来 表示 逻辑 上 的 真 假 不 过 其他值 也可 被当作 真值 或 假值
 在 数字 类 的 上下文中 例如 被用作 算术运算 符 的 参数 时 它们的 行为 分别 类似于 整数0 和1
 内置函数 bool  可被用来 将 任意 值 转换为 布尔值 只要 该值 可 被解析 为 一个 逻辑值 参见 之前的 逻辑值 检测 部分
 该对象 的写法 分别 为 false  和 true
 内部 对象
 有关 此 对象 的 信息请参阅 标准类型层级结构
 其 中 描述了 栈 帧 对象、 回溯 对象 以及 切片 对象 等等
 特殊 属性
 语言 实现 为 部分 对象类型 添加 了一些 特殊 的只读 属性 它们 具有 各 自 的作用
 其 中 一些 并 不会被 dir  内置函数 所 列出
dict  一个字典 或 其他类型的 映射 对象 用 于 存储 对象 的 可 写 属性
class  类实例 所属 的 类
bases  由 类对象的 基类 所 组成的 元组
name  类、 函数、 方法、 描述器 或 生成器 实例 的 名称
qualname  类、 函数、 方法、 描述器 或 生成器 实例 的 qualified  name
3
3 新版功能
mro  此 属性 是 由 类 组成的 元组 在 方法 解析 期间 会 基于 它 来 查找 基类
mro  此方法 可 被 一个 元 类 来 重载 以 为 其 实例 定制 方法 解析 顺序
 它会在 类实例 化 时被调用 其 结果 存储 于 mro  之 中
subclasses  每个 类 会 保存 由 对 其 直接 子类 的 弱引用 组成的列表
 此方法 将返回一个 由 仍 然 存在的 所有 此 类 引用 组成的列表
 例如 int
subclasses  class  bool  脚注1 有关 这些 特殊方法 的 额外 信息 可 参看 python  参考 指南 基本 定制
2 作为 结果 列表12 与1
02
0 是 相等的 元组 的 情况 也 类似
3 它们 必须 如 此 因为 解析器 无法 区分 这些 操作数的 类型
4 区分 大小写 的 字符 是 指 所属 一般 类别 属性 为 lu  letter  uppercase  ll  letter  lowercase  或 lt  letter  titlecase  之一 的 字符
5 要 格式化 单独 一个元组 那么你 应当 提供一个 单 例 元组其 唯一的 元素 就是 要 被 格式化 的 元组
tabnanny  模 糊 缩进 检测
 源代码 libtabnanny
py  目前 该模块 旨在 作为脚本 调用
 但是 可以使用 下面 描述 的 check  函数 将 其 导入 ide
 注解 此模块提供 的 api  可能会 在 将 来 的版本中 更改 此 类 更改 可能无法 向后兼容
checkfileordir  如果 fileordir  是 目录 而非 符号链接 则 递归地 在 名为 fileordir  的 目录 树 中 下 行 沿 途 检查 所有
py  文件
 如果 fileordir  是一个 普通 python  源文件 将 检查 其中的 空格 相关 问题
 诊 断 消息 将 使用 print  函数 写入到 标准输出
verbose  此 旗标 指明 是否 打印 详细 消息
 如果 作为脚本 调用 则 是通过 v  选项 来 增 加
filenameonly  此 旗标 指明 是否 只 打印 包含 空格 相关 问题 文件 的文件名
 如果 作为脚本 调用 则 是通过 q  选项 来 设 为真值
nannynag  如果 检测到 模 糊 缩进 则 由 processtokens  引发
 在 check  中 捕 获 并 处理
processtokenstokens  此 函数 由 check  用来 处理 由 tokenize  模块 所生成的 标记
 参见 模块 tokenize  用 于 python  源代码 的 词法 扫描 程序
 未 创建 文档 的 模块
 平台 特定 模块
 这些模块 用于实现 os
path  模块 除 此 之外 没有 文档
 几乎 没 有必要 创建 这些 文档
ntpath  在 win 32 和 win 64 平台上 实现 os
path 
posixpath  在 posix  上 实现 os
path 
concurrentfutures  启动 并 行 任务
3
2 新版功能
 源码 libconcurrentfuturesthread
py  和 libconcurrentfuturesprocess
pyconcurrent
futures  模块提供 异步 执行 回调 高层 接口
 异步 执行 可以 由 threadpoolexecutor  使用 线程 或 由 processpoolexecutor  使用 单独的 进程 来实现
 两者 都 是 实现 抽 像 类 executor  定义 的 接口
executor  对象
threadpoolexecutor
threadpoolexecutor  例子
processpoolexecutor
processpoolexecutor  类 是 executor  的子类 它 使用 进程 池 来 异步 地 执行 调用
 processpoolexecutor  会 使用 multiprocessing  模块 这允许 它 绕 过 全局 解释器 锁 但也 意味着 只 可以 处理 和 返回 可 封存 的 对象
main  模块 必须 可以被 工作 者 子进程 导入
 这意味着 processpoolexecutor  不 可以 工作 在交互式 解释器中
 从 提交 给 processpoolexecutor  的回调 中 调用 executor  或 future  方法 会导致 死 锁
 在3
3 版更改 如果 其中一个 工作 进程 被 突 然 终止 brokenprocesspool  就会 马 上 触发
 可 预 计 的 行为 没有 定义 但 执行器 上 的 操作 或 它 的 future  对象会被 冻结 或 死 锁
 在3
7 版更改 添加 mpcontext  参数 允许用户 控制 由 进程 池 创建 给 工作 者 进程 的 开始 方法
 加入 initializer  和 initargs  参数
processpoolexecutor  例子
future  对象
 模块 函数
exception  类
cancellederror  future  对象 被取消 时 会 触发
timeouterror  future  对象 执行 超出 给定的 超时 数值 时引发
brokenexecutor  当 执行器 被 某些 原因 中断 而且 不能用 来 提交 或 执行 新 任务 时 就会 被引发 派生 于 runtimeerror  的异常类
3
7 新版功能
invalidstateerror  当 某个 操作 在 一个 当前 状态 所 不允许 的 future  上 执行时 将 被引发
3
8 新版功能
brokenthreadpool  当 threadpoolexecutor  中 的 其中一个 工作 者 初始化 失败 时会引发 派生 于 brokenexecutor  的异常类
3
7 新版功能
brokenprocesspool  当 threadpoolexecutor  中 的 其中一个 工作 者 不完整 终止 时 比如 被 外部 杀 死 会引发 派生 于 brokenexecutor  原 名 runtimeerror  的异常类
3
3 新版功能
cursesascii  用 于 ascii  字符 的工具
curses
ascii  模块 提供了一些 ascii  字符 的 名称 常量 以及 在 各种 ascii  字符类中 执行 成员检测 的 函数
 所提供的 控制 字符 常量 如 下 名称 含义 nul  soh  标题 开始 控制台 中断 stx  文本 开始 etx  文本 结束 eot  传输 结束 enq  查询 附带 ack  流 量 控制 ack  确 认 bel  蜂 鸣 器 bs  退 格 tab  制表符 ht  tab  的别名 水 平 制表符 lf  换行 nl  lf  的别名 新 行 vt  垂 直 制表符 ff  换 页 cr  回 车 so  shiftout  开始 替换 字符 集 si  shiftin  恢复 默认 字符 集 dle  datalink  escape  数据 链接 转义 dc 1 xon  用 于 流 程控制 dc 2 device  control 2 块 模式 流 程控制 dc 3 xoff  用 于 流 程控制 dc 4 设备 控制4 nak  否 定 确 认 syn  同步 空 闲 etb  末 端 传输 块 can  取消 em  媒 体 结束 sub  替换 esc  退出 fs  文件 分隔符 gs  组 分隔符 rs  record  separator  块 模式 终止 符 us  单 位分隔符 sp  空格 del  删除 请注意 其 中 有许多 在 现 今 已经 没有 实际 作 用
 这些 助 记 符 是 来源 于 数字 计算机 之前的 电 传 打印 机 规范
 此模块提供了 下列函数 对应于 标准 c  库 中的函数 curses
isalnumc  检测 ascii  字母数字 类 字符 它 等价于 isalphac  或 isdigitc
isalphac  检测 ascii  字母 类 字符 它 等价于 isupperc  or  islowerc
isasciic  检测 字符 值 是否 在7 位 ascii  集 范围内
isblankc  检测 ascii  空白字符 包括 空格 或 水 平 制表符
iscntrlc  检测 ascii  控制 字符 在0 x 00 到0 x 1 f  或0 x 7 f  范围内
isdigitc  检测 ascii  十进制数 码 即0 至9
 它 等价于 c  in  string
isgraphc  检测 任意 ascii  可打印 字符 不包括 空白符
islowerc  检测 ascii  小写字母 字符
isprintc  检测 任意 ascii  可打印 字符 包括 空白符
ispunctc  检测 任意 ascii  可打印 字符 不包括 空白符 或 字母数字 类 字符
isspacec  检测 ascii  空白字符 包括 空格 换行 回 车 进 纸 水 平 制表 和 垂 直 制表
isupperc  检测 ascii  大写字母 字符
isxdigitc  检测 ascii  十六进制数 码
 这等价于 c  in  string
isctrlc  检测 ascii  控制 字符 码 位 值0 至31
ismetac  检测 非 ascii  字符 码 位 值0 x 80 及 以 上
 这些函数 接受 整数或 单 字符 字符串 当 参数为 字符串 时 会先 使用 内置函数 ord  进行 转换
 请注意 所有这些 函数 都 是 检测 根据 你 传入的 字符串 的 字符 所生成的 码 位 值 它们 实际上 完全不 会 知 晓 本机 的 字符 编码格式
 以 下 两个 函数接受 单 字符 字符串或 整数 形式 的 字节 值 它们会 返回 相同类型 的 值
asciic  返回 对应于 c  的 下 个7 比特位 的 ascii  值
ctrlc  返回 对应于 给定 字符 的 控制 字符 字符 比特 值 会 与0 x 1 f  进行 按位 与 运算
altc  返回 对应于 给定 ascii  字符 的8 比特位 字符 字符 比特 值 会 与0 x 80 进行 按位 或 运算
 以下函数 接受 单 字符 字符串或 整数值 它 会返回一个 字符串
unctrlc  返回 ascii  字符 c  的 字符串 表示形式
 如果 c  是 可打印 字符 则 字 符串 为 字符 本身
 如果该 字符 是 控制 字符0 x 000 x 1 f  则 字符串 由 一个 插 入 符 加 相应的 大写字母 组成
 如果该 字符 是 ascii  删除 符0 x 7 f  则 字符串 为
 如果该 字符 设置了 元 比特位0 x 80 元 比特 位 会 被 去除 应用 以 上 规则 后 将 在 结果 之前 添加
controlnames  一个33 元素 的 字符串 数据 其 中 按 从0 nul  到0 x 1 f  us  的顺序 包含 了 三 十 二个 ascii  控制 字符 的 ascii  助 记 符 另 加 空格符 的 助 记 符 sp
sys  系统 相关的 参数 和 函数
 调试 和 分析
binhex  对 binhex 4 文件进行 编码和解码
 源代码 libbinhex
py 3
9 版后已移除
 此模块 以 binhe 4 格式 对 文件进行 编码和解码 该 格式 允许 macintosh  文件 以 ascii  格式 表示
 仅 处理 数据 分 支
binhex  模块定义了以下 功能 binhex
binhexinput  output  将 带有 文件名 输入 的 二进制文件 转换为 binhex  文件 输出
 输出 参数 可以是 文件名 或 类 文件对象 write  和 close  方法 的 任何 对象
hexbininput  output  解码 binhex  文件 输入
 输入 可以是 支持 read  和 close  方法 的文件名 或 类 文件对象
 生成 的 文件 将 写入 名为 output  的 文件 除非 参 数 为 none  在这种情况下 从 binhex  文件 中读取 输出 文件名
 还 定义了以下 异常 exception  binhex
error  当 无法 使用 binhex  格式 编码 某些 内容 时 例如 文件名 太 长 而 无法 放入 文件 名 字段 中 或者 输入 未 正确 编码 的 binhex  数据 时 会引发异常
 参见 模块 binascii  支持 模块包含 ascii  到 二进制 和 二进制 到 ascii  转换
 注释
 还有一个 替代 的、 功能 更 强大 的 编码器 和 解码器 接口 详细信息请参 见 源代码
 如果您 在 非 macintosh  平台上 编码 或 解码 文本 文件 它们 仍 将 使用 旧 的 macintosh  换行符 约定 回 车 符 作为 行 尾
emailmime  creating  email  and  mime  objects  from  scratch
 在3
6 版更改 added  policy  keywordonly  parameter
 在3
6 版更改 added  policy  keywordonly  parameter
 在3
6 版更改 added  policy  keywordonly  parameter
 在3
6 版更改 added  policy  keywordonly  parameter
 在3
6 版更改 added  policy  keywordonly  parameter
 在3
6 版更改 added  policy  keywordonly  parameter
 在3
5 版更改 charset  also  accepts  charset  instances
 在3
6 版更改 added  policy  keywordonly  parameter
futures
 源代码 libasynciofutures
pyfuture  对象 用来 链接 底层 回调 式 代码 和 高层 异步 等待 式 代码
future  函数
future  对象
cursespanel  curses  的 面板 栈 扩展
 面板 是 具有 添加 深度 功能 的 窗口 因此 它们可以 从 上 至 下 堆 叠 为 栈 只有 显示 每个 窗口 的 可 见 部分 会显示 出来
 面板 可以在 栈 中 被添加、 上 移 或 下 移 也可以 被移除
 函数
curses
panel  模块定义了以下 函数 curses
bottompanel  返回 面板 栈 中 的 底 部 面板
newpanelwin  返回 一个 面板 对象 将 其 与 给定的 窗口 win  相关联
 请注意 你必须 显式 地 保持 所返回的 面板 对象
 如果你不 这样做 面板 对象会被 垃圾回收 并 从 面 板 栈 中被移除
toppanel  返回 面板 栈 中 的 顶 部 面板
updatepanels  在 面板 栈 发生改变 后 更新 虚拟 屏幕
 这 不 会 调用 curses
doupdate  因 此 你 不必 自己 执行 此操作
panel  对象
panel  对象 如 上面 newpanel  所返回的 对象 是 带有 栈 顺序 的多个 窗口
 总是会 有 一个 窗口 与 确定 内容的 面板 相关联 面板 方法 会 负责 窗口 在 面板 栈 中 的 深度
panel  对象具有 以下方法 panel
above  返回当前 面板 之 上 的 面板
below  返回当前 面板 之 下 的 面板
bottom  将 面板 推 至 栈 底 部
hidden  如果 面板 被 隐藏 不 可 见 则返回 true  否则返回 false
hide  隐藏 面板
 这 不 会 删除 对象 它 只是 让 窗口 在 屏幕 上 不 可 见
movey  x  将 面板 移至 屏幕 坐标 y  x
replacewin  将 与 面板 相关联 的 窗口 改 为 窗口 win
setuserptrobj  将 面板 的 用户 指向 设 为 obj
 这 被用来 将 任意 数据 与 面板 相关联 数据 可 以是任何 python  对象
show  显示 面板 面板 可能已 被 隐藏
top  将 面板 推 至 栈 顶 部
userptr  返回 面板 的 用户 指针
 这 可以是任何 python  对象
window  返回 与 面板 相关联 的 窗口 对象
code  解释器 基类
 交互 解释器 对象
runsourcesource  filenameinput  symbolsingle  在 解释器中 编译 并 运行 一段 源码
 所 用 参数 与 compilecommand  一样 filename  的 默认值为 inputsymbol  则 为 single
 可 能 发生 以 下 情况 之一 输入 不正确 compilecommand  引发了 一个异常 syntaxerror  或 overflowerror
 将 通过调用 showsyntaxerror  方法 打印 语法 回 溯信息
 runsource  返回 false
 输入 不完整 需要 更多 输入 函数 compilecommand  返回 none 
 方法 runsource  返回 true 
 输入 完整 compilecommand  返回 了 一个 代码对象
 将 通过调用 runcode  执行 代码 该方法 也会 处理 运行时 异常 systemexit  除外
 runsource  返回 false
 该 返回值 用 于 决定 使用 sys
ps 1 还是 sys
ps 2 来 作为 下 一行的 输入 提 示 符
runcodecode  执行 一个 代码对象
 当 发生异常 时 调用 showtraceback  来 显示 回溯
 除 systemexit  允许 传播 以外的 所有 异常 都会被 捕获
 有关 keyboardinterrupt  的 说明 该异常 可能 发生 于 此 代码 的其他 位置 并且 并 不 总 能 被捕获
 调用者 应当 准备 好 处理 它
showsyntaxerrorfilenamenone  显示 刚 发生 的 语法错误
 这 不 会显示 堆 栈回溯 因为 语法错误 并 无 此 种 信息
 如果给出 了 filename  它会被 放入 异常 来 替代 python  解析器 所提供的 默 认 文件名 因为它 在 从 一个字符串 读取 时 总是会 使用 string
 输出 将 由 write  方法来 写入
showtraceback  显示 刚 发生 的 异常
 我们 移除了 第一个 堆栈 条目 因为它 从 属于 解释器 对象 的 实现
 输出 将 由 write  方法来 写入
 在3
5 版更改 将显示 完整的 链 式 回溯 而 不 只是 主 回溯
writedata  将 一个字符串 写入到 标准错误 流 sys
 所有 派生类 都应 重载此 方法 以提供 必要的 正确 输出 处理
 交互式 控制台 对象
trace  跟踪 python  语句 执行
commandline  usage
3
8 新版功能 added  module  option  that  allows  to  run  an  executablemodule
main  options
modifiers
filters
 编程 接口
urllibparse  parse  urls  into  components
 源代码 liburllibparse
url  解析
 the  return  value  is  a  named  tuple  which  means  that  its  items  can  be  accessed  by  index  or  as  named  attributes  which  are  属性 索引 值 值如果 不存在 scheme 0 url  方案 说明符 scheme  parameter  netloc 1 网络 位置 部分 空字符串 path 2 分 层 路径 空字符串 params 3 最后 路径 元素 的 参数 空字符串 query 4 查询 组件 空字符串 fragment 5 片段 识别 空字符串 username  用户 名 none  password  密码 none  hostname  主机名 小写 none  port  端口 号 为整数 如果存在 none  reading  the  port  attribute  will  raise  a  valueerror  if  an  invalid  port  is  specified  in  the  url
 see  section  结构化 解析 结果 for  more  information  on  the  result  object
html  params  query  fragment  在3
2 版更改 添加了 ipv 6 url  解析 功能
 在3
3 版更改 the  fragment  is  now  parsed  for  all  url  schemes  unless  allowfragment  is  false  in  accordance  with  rfc 3986
 previously  a  whitelist  of  schemes  that  support  fragments  existed
 在3
6 版更改 outofrange  port  numbers  now  raise  valueerror  instead  of  returning  none
 在3
8 版更改 characters  that  affect  netloc  parsing  under  nfkc  normalization  will  now  raise  valueerror
 在3
2 版更改 add  encoding  and  errors  parameters
 在3
8 版更改 added  maxnumfields  parameter
 在3
2 版更改 add  encoding  and  errors  parameters
 在3
8 版更改 added  maxnumfields  parameter
 the  return  value  is  a  named  tuple  its  items  can  be  accessed  by  index  or  as  named  attributes  属性 索引 值 值如果 不存在 scheme 0 url  方案 说明符 scheme  parameter  netloc 1 网络 位置 部分 空字符串 path 2 分 层 路径 空字符串 query 3 查询 组件 空字符串 fragment 4 片段 识别 空字符串 username  用户 名 none  password  密码 none  hostname  主机名 小写 none  port  端口 号 为整数 如果存在 none  reading  the  port  attribute  will  raise  a  valueerror  if  an  invalid  port  is  specified  in  the  url
 see  section  结构化 解析 结果 for  more  information  on  the  result  object
 在3
6 版更改 outofrange  port  numbers  now  raise  valueerror  instead  of  returning  none
 在3
8 版更改 characters  that  affect  netloc  parsing  under  nfkc  normalization  will  now  raise  valueerror
 注解 if  url  is  an  absolute  url  that  is  it  starts  with  or  scheme  the  urls  hostname  andor  scheme  will  be  present  in  the  result
 在3
5 版更改 behavior  updated  to  match  the  semantics  defined  in  rfc 3986
 the  return  value  is  a  named  tuple  its  items  can  be  accessed  by  index  or  as  named  attributes  属性 索引 值 值如果 不存在 url 0 url  with  no  fragment  空字符串 fragment 1 片段 识别 空字符串 see  section  结构化 解析 结果 for  more  information  on  the  result  object
 在3
2 版更改 result  is  a  structured  object  rather  than  a  simple 2 tuple
 解析 ascii  编码 字节
 在3
2 版更改 url  parsing  functions  now  accept  ascii  encoded  bytesequences
 结构化 解析 结果
3
2 新版功能
3
2 新版功能
3
2 新版功能
3
2 新版功能
url  quoting
 在3
7 版更改 moved  from  rfc 2396 to  rfc 3986 for  quoting  url  strings
 在3
9 版更改 string  parameter  supports  bytes  and  str  objects  previously  only  str
 在3
2 版更改 query  supports  bytes  and  string  objects
3
5 新版功能 quotevia  参数
 参见 rfc 3986 统 一 资源 标识符 this  is  the  current  standard  std 66
 rfc 2396 统 一 资源 标识符 uri  通 用 语法 document  describing  the  generic  syntactic  requirements  for  both  uniform  resource  names  urns  and  uniform  resource  locators  urls
emailparser  解析 电子邮件 信息
 源代码 libemailparser
py  使用以下 两种 方法 的 其 中 一种 以 创建 消息 对象 结构 直接 创建一个 emailmessage  对象 使用 字典 接口 添加 消息 头 并且 使用 setcontent  和其他 相关 方法 添加 消息 负 载 或者 通过 解析 一个 电子邮件 消息 的 序列化 表达 来创建 消息 对象 结构
email  包 提供了一个 可以 理解 包含 mime  文档 在 内 的 绝 大多数 电子邮件 文档 结构 的 标准 语法分析程序
 你可以 传递给 语法分析程序 一个 字节串、 字符串 或者 文件对象 语法分析程序 会返回 给 你 对应于 该对象 结构 的 根 emailmessage  实例
 对 于 简单的、 非 mime  的 消息 这 个 根 对象 的 负 载 很 可能 就 是一个包含 了 该 消息 文 字 内容的 字符串
 对 于 mime  消息 调用 根 对象 的 ismultipart  方法 会返回 true  其 子 项 可以通过 负 载 操 纵 方法 来进行 访问 例如 getbody 、 iterparts  还有 walk
 事实 上 你可以使用 的 语法分析程序 接口 有两种 parser  api  和 增量 式 的 feedparser  api
 当你 的全部 消息 内容 都 在 内存 当 中 或者 整个 消息 都 保存在 文件系统 内 的 一个 文件 当 中 的时候 parser  api  非常有用
 当你 从 可能会 为 了 等待 更多 输入 而 阻塞 的 数据流 当 中读取 消息 比如 从 套接字 当 中读取 电子邮件 消息 的时候 feedparser  会 更 合适
feedparser  会 增量 读取并 解析 消息 并且 只有在 你 关闭 语法分析程序 的时候 才会 返回 根 对象
 请注意 语法分析程序 可以 进行 有限 的 拓 展 你 当然 也可以 完全 从 零 开始 实现 你自己的 语法分析程序
 将 email  包 中 内置的 语法分析程序 和 emailmessage  类 连接 起来 的 所有 逻辑 代码 都 包含在 policy  类 当 中 所 以 如 有必要 自定义 的 语法分析程序 可以通过 实现 自定义 的对应 policy  方法 来创建 对应的 消息 对象 树
feedparser  api
parser  api
 附加 说明
 在 解析 语义 的时候 请注意 大多数 非 multipart  类型 的 消息 都会被 解析为 一个带有 字符串 负 载 的 消息 对象
 这些 对象 在 调用 ismultipart  的时候 会返回 false  调用 iterparts  的时候 会产生 一个 空列表
 所有 multipart  类型 的 消息 都会被 解析 成一个 容器 消息 对象
 该对象 的 负 载 是一个 子 消息 对象 列表
 外层 的容器 消息 在 调用 ismultipart  的时候 会返回 true  在 调用 iterparts  的时候 会产生 一个 子 部分 列表
 大多数 内容 类型 为 message  例如 messagedeliverystatus  和 messagerfc 822 的 消息 也会 被解析 为 一个 负 载 是 长度为1 的 列表 的容器 对 象
 在 它们 身 上调用 ismultipart  方法 会返回 true  调用 iterparts  所产生 的 单个 元素 会 是一个 子 消息 对象
 一些 不 遵循 标准 的 消息 在 其 内部 关于 它 是否为 multipart  类型 前 后 不 一
 这些 消息 可能在 消息 头 的 contenttype  字段 中 写 明 为 multipart  但 它们的 ismultipart  方法 的返回值 可能是 false 
 如果 这种 消息 被 feedparser  类 解析 它们的 defects  属性 列表 当 中 会 有 一个 multipartinvariantviolationdefect  类的实例
 关于 更多信息 详 见 email
errors 
site —— 指定 域 的 配置 钩子
readline  configuration
 在3
4 版更改 activation  of  rlcompleter  and  history  was  madeautomatic
 模块内容
 在3
3 版更改 this  function  used  to  be  called  unconditionally
3
2 新版功能
3
2 新版功能
3
2 新版功能
 命令行界面
 参见 pep 370 分 用户 的 sitepackages  目录
future  future  语句 定义
shlex  simple  lexical  analysis
 注解 since  the  split  function  instantiates  a  shlex  instance  passing  none  for  s  will  read  the  string  to  split  from  standard  input
3
9 版后已移除 passing  none  for  s  will  raise  an  exception  in  future  python  versions
3
8 新版功能
formatquotecommand  printremotecommand  ssh  home  ls  l  somefile  rm  rf  the  quoting  is  compatible  with  unix  shells  and  with  split  from  shlex  import  split  remotecommand  splitremotecommand  remotecommand  ssh  home  ls  l  somefile  rm  rf  command  splitremotecommand 1 command  ls  l  somefile  rm  rf 3
3 新版功能
 在3
6 版更改 the  punctuationchars  parameter  was  added
 参见 module  configparser  parser  for  configuration  files  similar  to  the  windows 
shlex  objects
 在3
8 版更改 the  punctuationchars  attribute  was  made  compatible  with  the  whitespacesplit  attribute
3
6 新版功能
parsing  rules
improved  compatibility  with  shells
3
6 新版功能
shlexa  b  c  punctuationchars  lists  a  b  c  注解 when  punctuationchars  is  specified  the  wordchars  attribute  is  augmented  with  the  characters 
asyncore  异步 socket  处理器
 源码 libasyncore
py 3
6 版后已移除 请使用 asyncio  替代
 注解 该模块 仅 为 提供 向后兼容
 我们 推荐 在 新 代码中使用 asyncio 
 该模块提供 用 于 编写 异步 套接字 服务 客户端 与 服务 端 的基础 构 件
 只 有两种 方法 让 单个 处理器 上 的 程序 同一 时间 完成 不 止 一 件 事
 多线程 编程 是 最简单 和 最 流行的 方法 但是 还有 另一种 非常 不同的 技术 它可以 让你 拥有 多线程 的 几乎所有 优点 而无需 实际 使用 多线程
 它 仅仅 在你的 程序 主要 受 io  限制 时 有 用 那么
 如果你 的 程序 受 处理器 限制 那么 先 发 制 人 的 预定 线程 可能 就是 你 真正 需要 的
 但是 网络 服务器 很 少 受 处理器 限制
 如果你 的操作系统 在 其 io  库 中 支持 select  系统调用 几乎所有 操作系统 那么 你可以使用 它 来 同时 处理 多个 通信 通道 在 io  正 在 后 台 时 进行 其他 工作
 虽然 这种 策略 看起来 很 奇 怪 和 复杂 特别是 起 初 它 在 很多 方面 比 多线程 编程 更容易 理解 和 控制
 asyncore  模块 为 您 解决 了许多 难 题 使得 构建 复杂的 高 性能 网络 服务器 和 客户端 的 任务 变得 轻 而 易 举
 对 于 会话 应用程序 和 协议 伴 侣 asynchat  模块 是非常 宝 贵 的
 这两个 模块 背 后 的基本 思 想 是 创建 一个或多个 网络 通道 类的实例 asyncore
dispatcher  和 asynchat
asyncchat 
 创建 通道 会 将它们 添加到 全局 映射中 如果你不 为 它提供 自己的 映射 则 由 loop  函数 使用
 一旦 创建了 初始 通道 调用 loop  函数 将 激活 通道 服务 该 服务 将 一 直 持续 到 最后一个 通道 包括在 异步 服务 期间 已 添加到 映射 中的任何 通道 关闭
looptimeout  usepoll  map  count  进入 一个 轮询 循环 其 在 循环 计数 超出 或 所有 打开 的 通道 关闭 后 终止
 所有 参数都 是可选的
 count  形参 默认为 none  导致 循环 仅 在所有 通道 关 闭时 终止
 timeout  形参 为 适当的 select  或 poll  调用 设置 超 时 参数 以 秒 为单位 默认值为30 秒
 usepoll  形参 如果为 true  则表示 poll  应 优先 使用 select  默认为 false
 the  implied  higherlevel  events  are  event  描述 handleconnect  implied  by  the  first  read  or  write  event  handleclose  implied  by  a  read  event  with  no  data  available  handleaccepted  implied  by  a  read  event  on  a  listening  socket  during  asynchronous  processing  each  mapped  channels  readable  and  writable  methods  are  used  to  determine  whether  the  channels  socket  should  be  added  to  the  list  of  channels  selected  or  polled  for  read  and  write  events
3
2 版后已移除
3
2 新版功能
 在3
3 版更改 family  and  type  arguments  can  be  omitted
asyncore  example  basic  http  client
asyncore  example  basic  echo  server
functools  高阶 函数 和 可调用对象 上 的 操作
partial  对象
partial  对象 是 由 partial  创建 的可调用对象
 它们 具有 三个 只读 属性 partial
func  一个可调用对象 或 函数
 对 partial  对象 的 调用 将 被 转 发 给 func  并 附带 新 的 参数 和关键字
args  最 左边 的 位置参数 将 放置 在 提供给 partial  对象 调用 的 位置参数 之前
keywords  当 调用 partial  对象 时 将 要 提供的 关键字参数
partial  对象 与 function  对象 的 类似 之处在于 它们 都是可 调用、 可 弱引用 的 对象 并 可 拥有 属性
 但 两者 也 存在一 些 重要的 区别
 例如 前 者 不 会 自动创建 name  和 doc  属性
 而且 在 类 中定义的 partial  对象 的 行为 类似于 静态 方法 并且 不会在 实例属性 查找 期间 转换为 绑定 方法
idle
 目录
idel  具有 两个 主要 窗口 类型 分别 是 命令行 窗口 和 编辑器 窗口
 用户可 以 同时 打开 多个 编辑器 窗口
 对 于 windows  和 linux  平台 都有 各 自 的 主 菜单
 如 下 记录 的 每个 菜单 标识 着 与 之 关联的 窗口 类型
 导出 窗口 例如使用 编辑 在 文件 中查找 是 编辑器 窗口 的 的一个子类 型
 它们 目前 有 着 相同 的 主 菜单 但是 默认 标题 和 上下文 菜单 不同
 在 macos  上 只有一个 应用程序 菜单
 它 根据 当前 选择 的 窗口 动态 变化
 它 具有 一个 idle  菜单 并且 下面 描述 的 某些 条目 已 移动 到 符合 apple  准 则 的 位置
 文件 菜单 命令行 和 编辑器
 编辑 菜单 命令行 和 编辑器
 撤 销 操作 撤 销 当前 窗口 的 最近 一次 操作
 最高 可以 撤 回1000 条 操作 记录
 重 做 重 做 当前 窗口 最近 一次 所 撤 销 的 操作
 剪 切 复制 选 区 至 系统 剪 贴 板 然后 删除 选 区
 复制 复制 选 区 至 系统 剪 贴 板
 粘 贴 插入 系统 剪 贴 板 的内容 至 当前 窗口
 剪 贴 板 功能 也 可用于 上下文 目录
 全 选 选择 当前 窗口 的全部 内容
 查找
 打开一个 提供 多 选项 的 查找 窗口
 再次 查找 重复 上 次 搜索 如果 结果 存 在
 查找 选 区 查找 当前 选 中 的 字符串 如果存在 在 文件 中查找
 打开文件 查找 对话框
 将结果 输出 至 新 的 输出 窗口
 替换
 打开 查找 并 替换 对话框
 前 往 行 move  the  cursor  to  the  beginning  of  the  line  requested  and  make  that  line  visible
 提示 完成 open  a  scrollable  list  allowing  selection  of  existing  names
 展开 文本 展开 键 入 的 前缀 以 匹配 同一 窗口中 的完整 单词 重复 以 获得 不同的 扩展
 显示 调用 贴 士 在 函数 的 右 括号 后 打开 一个带有 函数 参数 提示 的 小 窗口
 请参阅 下面的 编 辑 和 导 航 部分 中 的 calltips 
 显示 周 围 括号 突 出 显示 周 围 的 括号
 格式 菜单 仅 window  编辑器
 增加 缩进 将 选 定 的 行 右 移 缩进 宽度 默认为4 个空格
 减少 缩进 将 选 定 的 行 向左 移动 缩进 宽度 默认为4 个空格
 注释 在 所 选 行 的 前面 插入
 取消 注释 从 所 选 行 中删除 开头的＃ 或
 制表符 化 将 前导 空格 变 成 制表符
 注意 我们 建议 使用4 个空格 来 缩进 python  代码
 取消 制表符 化 将 所有 制表符 转换为 正确的 空格 数
 缩进 方式 切换 打开一个 对话框 以 在 制表符 和 空格 之间 切换
 缩进 宽度 调整 打开一个 对话框 以 更改 缩进 宽度
 python  社 区 接受 的 默认值为4 个空格
 格式 段落 在 注释 块 或 多 行 字符串或 字符串中的 选 定 行 中 重新 格式化 当前 以 空行 分隔 的 段落
 段落 中的所有 行 的 格式 都 将 少 于 n  列 其 中 n  默认为72
 删除 尾随 空格 通过将 str
rstrip  应用 于 每 行 包括 多 行 字符串中的 行 删除 行 尾 非空 白字符 之后的 尾随 空格 和其他 空白字符
 除 shell  窗口 外 在 文件末尾 删除 多 余 的 换行符
 运行 菜单 仅 window  编辑器
 运行 模块 执行 检查 模块
 如果没有 错误 重新 启动 shell  以 清理 环境 然后 执行模 块
 输出 显示 在 shell  窗口中
 请注意 输出 需要使用 打印 或 写入
 执行 完成后 shell  将 保留 焦 点 并 显示 提示
 此 时可以 交互 地 探 索 执行 的结果
 这 类似于 在命令行 执行 带有 python  i  file  的 文件
 运行
 定制 与 运行 模块 相同 但 使用自定义 设置 运行 该模块
 命令行参数 扩展 sys
argv  就像 在命令行 上 传递 一样
 该 模块可以 在命令行 管理 程序中 运 行 而无需 重新 启动
 检查 模块 检查 编辑器 窗口中 当前 打开 的 模块 的语法
 如果 尚未 保存 该模块 则 idle  会 提示 用户 保存 或 自动 保存 如 在 空 闲 设置 对话框的 常规 选项 卡 中 所 选择 的 那样
 如果存在 语法错误 则会在 编辑器 窗口中 指示 大 概 位置
python  shell  打开 或 唤醒 python  shell  窗口
shell  菜单 仅 window  编辑器
 查看 最近 重 启 将 shell  窗口 滚动 到 上 一次 shell  重 启
 重 启 shell  重新 启动 shell  以 清理 环境
 上 一条 历史 记录 循环 浏览 历史 记录 中 与 当前 条目 匹配 的 早期 命令
 下 一条 历史 记录 循环 浏览 历史 记录 中 与 当前 条目 匹配 的 后续 命令
 中断 执行 停止 正在运行 的 程序
 调试 菜单 仅 window  编辑器
 跳 转 到 文件 行 look  on  the  current  line
 调试器 切换 激活 后 在 shell  中 输入 的 代码 或 从 编辑器 中 运行 的 代码 将 在 调试器 下 运行
 在 编辑器 中 可以使用 上下文 菜单 设置 断 点
 此功能 不完整 具有 实 验 性
 堆栈 查看 器 在 树 状 目录中 显示 最后一个 异常 的 堆 栈回溯 可以 访问 本地 和 全局
 自动 打开 堆栈 查看 器 在 未 处理 的 异常 上 切换 自动 打开 堆栈 查看 器
 选项 菜单 命令行 和 编辑器
 配置 idle  打开 配置 对话框 并 更改 以 下 各 项 的 首 选项 字 体、 缩进、 键 绑定、 文本 颜色 主题、 启动 窗口 和 大小、 其他 帮助 源 和 扩展名
 在 macos  上 通过 在 应用程序 菜单 中选择 首 选项 来 打开 配置 对话框
 有关 详细信息请参 阅 帮助 和 首选 项 下 的 首 选项 设置
 大多数 配置 选项 适用于 所有 窗口 或 将 来 的 所有 窗口
 以 下 选项 仅 适用于 活动 窗口
 显示 隐藏 代码 上下文 仅 window  编辑器 open  a  pane  at  the  top  of  the  edit  window  which  shows  the  block  context  of  the  code  which  has  scrolled  above  the  top  of  the  window
 显示 隐藏 行 号 仅 window  编辑器 open  a  column  to  the  left  of  the  edit  window  which  shows  the  number  of  each  line  of  text
 缩 放 还 原 高度 toggles  the  window  between  normal  size  and  maximum  height
window  菜单 命令行 和 编辑器
 列出 所有 打开 的 窗口 的 名称 选择 一个 将 其 带 到 前 台 必要时 对 其 进行 去 符号 化
 帮助 菜单 命令行 和 编辑器
 关于 idle  显示 版本 版权 许可证 荣 誉 等
idle  帮助 显示 此 idle  文档 详细 介绍 菜单 选项 基本 编辑 和 导 航 以 及其他 技巧
python  文档 访问 本地 python  文档 如果 已安装 或 启动 web  浏览器 并 打开 docs
org  显示 最新的 python  文档
 海龟 演示 使用 示例 python  代码 和 turtle  绘图 运行 turtledemo  模块
 可以在 常规 选项卡 下 的 配置 idle  对话框 中添加 其他 帮助 源
 有关 帮助 菜单 选项 的更多信息请参 见 下面的 帮助 源 小节
 上下文 菜单
 编辑 和 导 航
 编辑 窗口
 按键 绑定
 在 本节 中 c  是 指 windows  和 unix  上 的 control  键 以及 macos  上 的 command  键
 backspace  向左 删除 del  向 右 删除 cbackspace  向左 删除 单词 cdel  向 右 删除 单词 方向 键 和 page  uppage  down  移动 cleftarrow  和 crightarrow  按 单词 移动 homeend  跳 转 到 行 首 尾 chomecend  跳 转 到 文档 首 尾 一些 有用的 emacs  绑定 是 从 tcl  tk  继承 的 ca  行 首 ce  行 尾 ck  删除 行 但 未 将 其 放入 剪 贴 板 cl  center  window  around  the  insertion  point  cb  go  backward  one  character  without  deleting  usually  you  can  also  use  the  cursor  key  for  this  cf  go  forward  one  character  without  deleting  usually  you  can  also  use  the  cursor  key  for  this  cp  go  up  one  line  usually  you  can  also  use  the  cursor  key  for  this  cd  删除 下 一个字符 standard  keybindings  like  cc  to  copy  and  cv  to  paste  may  work
 自动 缩进
 完成
 提示
 代码 上下文
python  shell  窗口
 cc  中断 执行 命令 cd  sends  endoffile  closes  window  if  typed  at  a  prompt  alt  expand  word  is  also  useful  to  reduce  typing  历史 命令 altp  retrieves  previous  command  matching  what  you  have  typed
 文本 颜色
 启动 和 代码 执行
 命令行 语法
 c  command  run  command  in  the  shell  window  d  enable  debugger  and  open  shell  window  e  open  editor  window  h  print  help  message  with  legal  combinations  and  exit  i  open  shell  window  r  file  run  file  in  shell  window  s  run  idlestartup  or  pythonstartup  first  in  shell  window  t  title  set  title  of  shell  window  run  stdin  in  shell  must  be  last  option  before  args  如果有 参数 if  c  or  r  is  used  all  arguments  are  placed  in  sys
 启动 失败
 运行 用户 代码
shell  中 的 用户 输出
 开发 tkinter  应用程序
 在没有 子进程 的情况下 运行
3
4 版后已移除
 帮助 和 偏 好
 帮助 源
 首 选项 设置
macos  上 的 idle
 扩展
inspect  检查 对象
 源代码 libinspect
pyinspect  模块 提供了一些 有用的 函数 帮助 获取 对象 的 信息 例如 模块、 类、 方法、 函数、 回溯、 帧 对象 以及 代码对象
 例如 它可以 帮助 你 检查 类 的内容 获取 某个 方法 的 源代码 取 得 并 格式化 某个 函数 的参数列表 或者 获取 你需要 显示 的 回溯 的详细信息
 该 模块提供了4 种 主要 的功能 类型检查、 获取 源代码、 检查 类 与 函数、 检查 解释器 的 调用 堆栈
 类型 和 成员
getmembers  函数 获取 对象 的成员 例如 类 或 模块
 函数 名 以 is  开始 的 函数 主要 作为 getmembers  的 第2 个参数 使用
 它们也 可用于 判 定 某 对象 是否有 如 下 的 特殊 属性 类型 属性 描述 module  模块 doc  文档字符串 file  文件名 内置模块 没有 文件名 class  类 doc  文档字符串 name  类定义 时 所使用的 名称 qualname  qualified  name  限定名称 module  该 类型 被定义 时 所在的 模块 的 名称 method  方法 doc  文档字符串 name  该方法 定义 时 所使用的 名称 qualname  qualified  name  限定名称 func  实现 该方法 的 函数对象 self  该方法 被绑定 的 实例 若 没有 绑定 则 为 none  module  name  of  module  in  which  this  method  was  defined  函数 doc  文档字符串 name  用 于 定义 此 函数 的 名称 qualname  qualified  name  限定名称 code  包含 已编译 函数 的 代码对象 bytecode  defaults  tuple  of  any  default  values  for  positional  or  keyword  parameters  kwdefaults  mapping  of  any  default  values  for  keywordonly  parameters  globals  global  namespace  in  which  this  function  was  defined  annotations  mapping  of  parameters  names  to  annotations  return  key  is  reserved  for  return  annotations
 module  name  of  module  in  which  this  function  was  defined  回溯 tbframe  此 级别 的 框架 对象 tblasti  index  of  last  attempted  instruction  in  bytecode  tblineno  current  line  number  in  python  source  code  tbnext  next  inner  traceback  object  called  by  this  level  框架 fback  next  outer  frame  object  this  frames  caller  fbuiltins  builtins  namespace  seen  by  this  frame  fcode  code  object  being  executed  in  this  frame  fglobals  global  namespace  seen  by  this  frame  flasti  index  of  last  attempted  instruction  in  bytecode  flineno  current  line  number  in  python  source  code  flocals  local  namespace  seen  by  this  frame  ftrace  tracing  function  for  this  frame  or  none  code  coargcount  number  of  arguments  not  including  keyword  only  arguments  or  args  cocode  原始 编译 字节码 的 字符串 cocellvars  单元 变量 名称 的 元组 通过 包含 作用域 引用 coconsts  字节码 中使用的 常量 元组 cofilename  创建 此 代码对象 的 文件 的 名称 cofirstlineno  number  of  first  line  in  python  source  code  coflags  bitmap  of  co  flags  read  more  here  colnotab  编码 的 行 号 到 字节码 索引 的 映 射 cofreevars  tuple  of  names  of  free  variables  referenced  via  a  functions  closure  coposonlyargcount  number  of  positional  only  arguments  cokwonlyargcount  number  of  keyword  only  arguments  not  including  arg  coname  定义 此 代码对象 的 名称 conames  局部变量 名称 的 元组 conlocals  局部变量 的数量 costacksize  需要 虚拟 机 堆栈 空间 covarnames  参数 名 和 局部变量 的 元组 生成器 name  名称 qualname  qualified  name  限定名称 giframe  框架 girunning  生成器 在 运行 吗？ gicode  code  giyieldfrom  object  being  iterated  by  yield  from  or  none  协程 name  名称 qualname  qualified  name  限定名称 crawait  object  being  awaited  on  or  none  crframe  框架 crrunning  is  the  coroutine  running  crcode  code  crorigin  where  coroutine  was  created  or  none
setcoroutineorigintr  ackingdepth  builtin  doc  文档字符串 name  此 函数 或 方法 的 原始 名称 qualname  qualified  name  限定名称 self  instance  to  which  a  method  is  bound  or  none  在3
5 版更改 add  qualname  and  giyieldfrom  attributes  togenerators
the  name  attribute  of  generators  is  now  set  from  thefunction  name  instead  of  the  code  name  and  it  can  now  be  modified
 在3
7 版更改 add  crorigin  attribute  to  coroutines
 注解 getmembers  will  only  return  class  attributes  defined  in  the  metaclass  when  the  argument  is  a  class  and  those  attributes  have  been  listed  in  the  metaclass  custom  dir
 在3
3 版更改 the  function  is  based  directly  on  importlib
 在3
8 版更改 functions  wrapped  in  functools
partial  now  return  true  if  the  wrapped  function  is  a  python  generator  function
3
5 新版功能
 在3
8 版更改 functions  wrapped  in  functools
partial  now  return  true  if  the  wrapped  function  is  a  coroutine  function
3
5 新版功能
coroutine  def  gencoro  yield  assert  not  isawaitablegen  assert  isawaitablegencoro 3
5 新版功能
isasyncgenfunctionagen  true 3
6 新版功能
 在3
8 版更改 functions  wrapped  in  functools
partial  now  return  true  if  the  wrapped  function  is  a  asynchronous  generator  function
3
6 新版功能
retrieving  source  code
 在3
5 版更改 documentation  strings  are  now  inherited  if  not  overridden
 在3
3 版更改 oserror  is  raised  instead  of  ioerror  now  an  alias  of  the  former
 在3
3 版更改 oserror  is  raised  instead  of  ioerror  now  an  alias  of  the  former
introspecting  callables  with  the  signature  object
3
3 新版功能
3
5 新版功能 followwrapped  parameter
 pass  false  to  get  a  signature  of  callable  specifically  callable
 注解 some  callables  may  not  be  introspectable  in  certain  implementations  of  python
 在3
5 版更改 signature  objects  are  picklable  and  hashable
 在3
7 版更改 python  only  explicitly  guaranteed  that  it  preserved  the  declaration  order  of  keywordonly  parameters  as  of  version 3
fromcallablemin  assert  isinstancesig  mysignature 3
5 新版功能
 在3
5 版更改 parameter  objects  are  picklable  and  hashable
 在3
6 版更改 these  parameter  names  are  exposed  by  this  module  as  names  like  implicit 0
keywordonly  名称 意义 positionalonly  value  must  be  supplied  as  a  positional  argument
3
8 新版功能
empty  annotationspam  foospam  在3
4 版更改 in  python 3
3 parameter  objects  were  allowed  to  have  name  set  to  none  if  their  kind  was  set  to  positionalonly
 注解 arguments  for  which  signature
 在3
9 版更改 arguments  is  now  of  type  dict
 formerly  it  was  of  type  collections
arguments  a  spam  b  ham  args 3
5 新版功能
kwargs  参见 pep 362 function  signature  object
 类 与 函数
3
0 版后已移除 use  getfullargspec  for  an  updated  api  that  is  usually  a  dropin  replacement  but  also  correctly  handles  function  annotations  and  keywordonly  parameters
alternatively  use  signature  and  signature  object  which  provide  a  more  structured  introspection  api  for  callables
 在3
4 版更改 this  function  is  now  based  on  signature  but  still  ignores  wrapped  attributes  and  includes  the  already  bound  first  parameter  in  the  signature  output  for  bound  methods
 在3
6 版更改 this  method  was  previously  documented  as  deprecated  in  favour  of  signature  in  python 3
5 but  that  decision  has  been  reversed  in  order  to  restore  a  clearly  supported  standard  interface  for  singlesource  python 23 code  migrating  away  from  the  legacy  getargspec  api
 在3
7 版更改 python  only  explicitly  guaranteed  that  it  preserved  the  declaration  order  of  keywordonly  parameters  as  of  version 3
7 although  in  practice  this  order  had  always  been  preserved  in  python 3
 注解 this  function  was  inadvertently  marked  as  deprecated  in  python 3
 例如 from  inspect  import  formatargspec  getfullargspec  def  fa  int  b  float 
 formatargspecgetfullargspecf  a  int  b  float 3
5 版后已移除 use  signature  and  signature  object  which  provide  a  better  introspecting  api  for  callables
 注解 this  function  was  inadvertently  marked  as  deprecated  in  python 3
 typeerror  f  missing 1 required  positional  argument  a 3
2 新版功能
3
5 版后已移除 use  signature
3
3 新版功能
3
4 新版功能
the  interpreter  stack
 在3
5 版更改 return  a  named  tuple  instead  of  a  tuple
 注解 keeping  references  to  frame  objects  as  found  in  the  first  element  of  the  frame  records  these  functions  return  can  cause  your  program  to  create  reference  cycles
 在3
5 版更改 a  list  of  named  tuples  frameinfoframe  filename  lineno  function  codecontext  index  is  returned
 在3
5 版更改 a  list  of  named  tuples  frameinfoframe  filename  lineno  function  codecontext  index  is  returned
 在3
5 版更改 a  list  of  named  tuples  frameinfoframe  filename  lineno  function  codecontext  index  is  returned
 在3
5 版更改 a  list  of  named  tuples  frameinfoframe  filename  lineno  function  codecontext  index  is  returned
fetching  attributes  statically
3
2 新版功能
current  state  of  generators  and  coroutines
3
2 新版功能
3
5 新版功能
3
3 新版功能
3
5 新版功能
code  objects  bit  flags
3
5 新版功能
3
5 新版功能
3
6 新版功能
 注解 the  flags  are  specific  to  cpython  and  may  not  be  defined  in  other  python  implementations
 命令行界面
resource  resource  usage  information
error  一个 被弃用 的 oserror  的别名
 在3
3 版更改 根据 pep 3151 这个类 是 oserror  的别名
resource  limits
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
resource  usage
 一个简单的 示例 from  resource  import  import  time  a  non  cpubound  task  time
 a  brief  summary  is  presented  here  索引 域 resource 0 ruutime  time  in  user  mode  float  seconds 1 rustime  time  in  system  mode  float  seconds 2 rumaxrss  maximum  resident  set  size 3 ruixrss  shared  memory  size 4 ruidrss  unshared  memory  size 5 ruisrss  unshared  stack  size 6 ruminflt  page  faults  not  requiring  io 7 rumajflt  page  faults  requiring  io 8 runswap  number  of  swap  outs 9 ruinblock  block  input  operations 10 ruoublock  block  output  operations 11 rumsgsnd  messages  sent 12 rumsgrcv  messages  received 13 runsignals  signals  received 14 runvcsw  voluntary  context  switches 15 runivcsw  involuntary  context  switches  this  function  will  raise  a  valueerror  if  an  invalid  who  parameter  is  specified
3
2 新版功能
gettext  多 语 种 国际化 服务
 源代码 libgettext
pygettext  模块 为 python  模块 和 应用程序 提供 国际化 internationalization  i 18 n  和 本地 化 localization  l 10 n  服务
 它 同时 支持 gnu  gettext  消息 编 目 api  和 更高级 的、 基于 类 的 api  后者 可能 更 适合 于 python  文件
 下 方 描述 的 接口 允许用户 使用 一种 自然 语言 编写 模块 和 应用程序 消息 并 提供 翻译 后 的 消息 编 目 以便 在不同的 自然 语言 下 运行
 同时 还 给出 一些 本地 化 python  模块 及 应用程序 的 小 技巧
gnu  gettext  api
 基于 类 的 api
 与 gnu  gettext  api  相比 gettext  模块 的 基于 类 的 api  提供了更 多 的 灵活 性 和 更 强 的 便 利 性
 这是 本地 化 python  应用程序 和 模块 的 推荐 方法
gettext  定义了一个 gnutranslations  类 该 类 实现了 gnu 
mo  格式 文件 的 解析 并且 具有 用 于 返回 字符串 的 方法
 本 类的实例 也可以 将 自身 作为 函数 安装到 内建 命名空间中
finddomain  localedirnone  languagesnone  allfalse  本 函数 实现了 标准 的
mo  文件 搜索 算法
 它接受一个 domain  它 与 textdomain  接受 的 域 相同
 可选参数 localedir  与 bindtextdomain  中 的 相同
 可选参数 languages  是 多 条 字符串 的 列 表 其中每 条 字符串 都 是一种 语言 代码
 在3
3 版更改 ioerror  代替 oserror  被引发
the  nulltranslations  class
3
8 新版功能
3
8 新版功能
 警告 these  methods  should  be  avoided  in  python 3
 在3
8 版更改 added  pgettext  and  npgettext
the  gnutranslations  class
 例如 n  lenos
3
8 新版功能
3
8 新版功能
 警告 these  methods  should  be  avoided  in  python 3
solaris  message  catalog  support
the  catalog  constructor
internationalizing  your  programs  and  modules
localizing  your  module
localizing  your  application
changing  languages  on  the  fly
deferred  translations
 致谢
 以下人 员 为 创建 此模块 贡献 了 代码、 反 馈、 设计 建议、 早期 实现 和 宝 贵 的 经 验 peter  funk  james  henstridge  juan  david  ib áñ ez  palomar  marcandr é lemburg  martin  von  l ö wis  fran ç ois  pinard  barry  warsaw  gustavo  niemeyer  脚注1 the  default  locale  directory  is  system  dependent  for  example  on  redhat  linux  it  is  usrsharelocale  but  on  solaris  it  is  usrliblocale
 被 取 代 的 模块
 本章中描述的模块 均 已弃用 仅 保留 用 于 向后兼容
 它们 已经被 其他模块 所 取 代
 optparse  解析器 的 命令行选项 背景 术 语 what  are  options  for  位置 位置 教程 understanding  option  actions  the  store  action  handling  boolean  flag  options  other  actions  默认值 generating  help  grouping  options  printing  a  version  string  how  optparse  handles  errors  putting  it  all  together  参考 指南 创建 解析器 填充 解析器 定义 选项 option  attributes  standard  option  actions  standard  option  types  解析 参数 querying  and  manipulating  your  option  parser  conflicts  between  options  清理 other  methods  option  callbacks  defining  a  callback  option  how  callbacks  are  called  raising  errors  in  a  callback  callback  example 1 trivial  callback  callback  example 2 check  option  order  callback  example 3 check  option  order  generalized  callback  example 4 check  arbitrary  condition  callback  example 5 fixed  arguments  callback  example 6 variable  arguments  extending  optparse  adding  new  types  adding  new  actions  imp  access  the  import  internals  示例
platform  获取 底层 平台 的 标识 数据
 源代码 libplatform
py  注解 特定 平台 按 字母 顺序 排列 linux  包括在 unix  小节 之 中
 跨平台
java  平台
windows  平台
mac  os  平台
macverrelease  versioninfo  machine  获取 mac  os  版本 信息 并将其 返回 为 元组 release  versioninfo  machine  其 中 versioninfo  是 一个元组 version  devstage  nonreleaseversion
 无法 确定 的 条目 会 被设为
 所有 元组 条目 均为 字符串
unix  平台
executable  lib  version  chunksize 16384 尝试 确定 可执行文件 默认为 python  解释器 所 链接到 的 libc  版本
 返 回 一个字符串 元组 lib  version  当 查找 失败时 其 默认值 将 设 为给定的 形参 值
 请注意此 函数 对 于 不同 libc  版本 向 可执行文件 添加 符号 的方式 有 深 层 的 关 联 可能 仅 适用于 使用 gcc  编译 出来 的 可执行文件
 文件 将按 chunksize  个字节 的 分块 来读取 和 扫描
reprlib  另一种 repr  实现
 源代码 libreprlib
pyreprlib  模块 提供了一种 对象 表示 的 产生 方式 它 会 对 结果 字符串 的大小 进行 限制
 该 方式 被用于 python  调试器 也 适用于 某些 其他 场景
 此 模块提供了一个 类、 一个实例 和 一个 函数 class  reprlib
repr  该 类提供了 格式化 服务 适用于 实现 与内置 repr  相似的 方法 其 中 附加 了 针对 不同 对象类型的 大小 限制 以避免 生成 超 长 的 表示
arepr  这是 repr  的 一个实例 用 于 提供 如下所 述 的 repr  函数
 改变 此 对 象 的 属性 将 会影响 repr  和 python  调试器 所使用的 大小 限制
reprobj  这是 arepr  的 repr  方法
 它 会返回 与 同名 内置函数 所 返回 字符串 相似的 字符串 区别在于 附带 了 对 多 数 类型 的大小 限制
 在 大小 限制 工具 以外 此模块 还提供了 一个 装饰器 用 于 检测 对 repr  的 递归 调用 并 改 用 一个 占位 符 来 替换
 用 于 为 repr  方法 检测 同一 线程 内部 递归 调用 的 装饰器
 如果 执行 了 递归 调用 则 会返回 fillvalue  否则 执行 正常的 repr  调用
 例如 from  reprlib  import  recursiverepr  class  mylistlist 
x 3
2 新版功能
repr  对象
repr  实例对象 包含 一些 属性 可以用 于 为 不同 对象类型的 表示 提供 大小 限制 还 包含 一些 方法可以 格式化 特定的 对象类型
maxlevel  创建 递归 表示形式 的 深度 限制
 默认为6
maxarray  代表 命名 对象类型的 条目 数量 限制
 对 于 maxdict  的 默认值为4 对 于 maxarray  为5 对 于其他 则 为6
maxlong  表示 整数 的最大 字符 数量
 数 码 会 从 中 间 被丢弃
 默认值为40
maxstring  表示 字符串 的 字符 数量 限制
 请注意 字符 源 会 使用 字符串 的 正常 表示形式 如果 表示 中 需要 用 到 转义 序列 在 缩 短 表示 时 它们 可能会 被 破坏
 默认值 为30
maxother  此 限制 用 于 控制 在 repr  对象 上 没有 特定的 格式化 方法可用 的 对象类型的 大小
 它 会 以 类似 maxstring  的方式 被 应用
 默认值为20
reprobj  内置 repr  的 等价 形式 它 使用 实例 专属的 格式化
repr 1 obj  level  供 repr  使用 的 递归 实现
 此方法 使用 obj  的 类型 来确定 要 调用 哪 个 格式化 方法 并 传入 obj  和 level
 类型 专属的 方法 应当 调用 repr 1 来执行 递归 格式化 在 递归 调用 中 使用 level 1 作为 level  的 值
reprtypeobj  level  特定 类型 的 格式化 方法 会 被 实现 为 基于 类型 名称 来 命名 的 方法
 在 方法 名称 中 type  会 被替换为
 对 这些方法 的 分 派 会 由 repr 1 来处理
 需要 对 值 进行 递归 格式化 的 类型 专属 方法 应当 调用 self
repr 1 subobj  level 1
 子类化 repr  对象
 通过 repr
repr 1 使用 动态 分 派 允许 repr  的子类 添加 对 额外 内置 对象类型的 支持 或 是 修改 对 已 支持 类型 的 处理
 这个例子 演示了如何 添加 对 文件对象 的 特殊 支持 import  reprlib  import  sys  class  myreprreprlib
xmlparsersexpat  fast  xml  parsing  using  expat
 警告 the  pyexpat  module  is  not  secure  against  maliciously  constructed  data
 if  you  need  to  parse  untrusted  or  unauthenticated  data  see  xml  漏洞
 参见 the  expat  xml  parser  home  page  of  the  expat  project
xmlparser  对象
expaterror  exceptions
 示例
content  model  descriptions
expat  error  constants
3
2 新版功能
3
2 新版功能
xmlerrorsuspendpe  脚注1 the  encoding  string  included  in  xml  output  should  conform  to  the  appropriate  standards
optparse  解析器 的 命令行选项
 源代码 liboptparse
py 3
2 版后已移除 the  optparse  module  is  deprecated  and  will  not  bedeveloped  further  development  will  continue  with  the  argparsemodule
 背景
 术 语
 参数 a  string  entered  on  the  commandline  and  passed  by  the  shell  to  execl  or  execv
 选项 an  argument  used  to  supply  extra  information  to  guide  or  customize  the  execution  of  a  program
 可选参数 an  argument  that  follows  an  option  is  closely  associated  with  that  option  and  is  consumed  from  the  argument  list  when  that  option  is
positional  参数 something  leftover  in  the  argument  list  after  options  have  been  parsed  i
 必 选 选项 an  option  that  must  be  supplied  on  the  commandline  note  that  the  phrase  required  option  is  selfcontradictory  in  english
what  are  options  for
 位置 位置
 教程
parseargs  返回 两个值 options  an  object  containing  values  for  all  of  your  options  e
understanding  option  actions
the  store  action
 例如 parser
handling  boolean  flag  options
other  actions
some  other  actions  supported  by  optparse  arestoreconst  store  a  constant  valueappend  append  this  options  argument  to  a  listcount  increment  a  counter  by  onecallback  调用 指定 函数 these  are  covered  in  section  参考 指南 and  section  option  callbacks
 默认值
addoptionq  actionstorefalse  destverbose  defaulttrue  考虑 一 下 parser
generating  help
printing  a  version  string
how  optparse  handles  errors
putting  it  all  together
 参考 指南
 创建 解析器
 usage  默认 prog  options  the  usage  summary  to  print  when  your  program  is  run  incorrectly  or  with  a  help  option
 optionlist  默认 a  list  of  option  objects  to  populate  the  parser  with
 optionclass  默认 optparse
 version  默认 none  a  version  string  to  print  when  the  user  supplies  a  version  option
 conflicthandler  默认 error  specifies  what  to  do  when  options  with  conflicting  option  strings  are  added  to  the  parser  see  section  conflicts  between  options
 description  默认 none  a  paragraph  of  text  giving  a  brief  overview  of  your  program
 addhelpoption  默认 true  if  true  optparse  will  add  a  help  option  with  option  strings  h  and  help  to  the  parser
 epilog  默认 none  a  paragraph  of  help  text  to  print  after  the  option  help
 填充 解析器
addoption  as  shown  insection  教程
 定义 选项
 the  standard  option  actions  hardcoded  into  optparse  are  store  存储 此 选项 的 参数默认 storeconst  store  a  constant  value  storetrue  store  true  storefalse  store  false  append  append  this  options  argument  to  a  list  appendconst  将 常量 值 附加 到 列表 count  increment  a  counter  by  one  callback  调用 指定 函数 help  打印 用 法 消息 包括 所有 选项 和 文档 if  you  dont  supply  an  action  the  default  is  store
option  attributes
action  默认 store  determines  optparses  behaviour  when  this  option  is  seen  on  the  command  line  the  available  options  are  documented  here
type  默认 string  the  argument  type  expected  by  this  option  e
nargs  默认1 how  many  arguments  of  type  type  should  be  consumed  when  this  option  is  seen
 see  section  教程 for  an  example
standard  option  actions
 示例 parser
 示例 parser
 示例 parser
 示例 parser
 示例 parser
 示例 from  optparse  import  optionparser  suppresshelp  usually  a  help  option  is  added  automatically  but  that  can  be  suppressed  using  the  addhelpoption  argument  parser  optionparseraddhelpoptionfalse  parser
standard  option  types
 解析 参数
parseargsargsnone  valuesnone  输入 参数 的 位置 args  the  list  of  arguments  to  process  default  sys
querying  and  manipulating  your  option  parser
conflicts  between  options
setconflicthandlerhandlerthe  available  conflict  handlers  are  error  默认 assume  option  conflicts  are  a  programming  error  and  raise  optionconflicterror  resolve  resolve  option  conflicts  intelligently  see  belowas  an  example  lets  define  an  optionparser  that  resolves  conflictsintelligently  and  add  conflicting  options  to  it  parser  optionparserconflicthandlerresolve  parser
 清理
other  methods
option  callbacks
defining  a  callback  option
how  callbacks  are  called
raising  errors  in  a  callback
callback  example 1 trivial  callback
callback  example 2 check  option  order
callback  example 3 check  option  order  generalized
callback  example 4 check  arbitrary  condition
callback  example 5 fixed  arguments
callback  example 6 variable  arguments
extending  optparse
adding  new  types
adding  new  actions
collectionsabc  容器 的抽象基类
3
3 新版功能 该模块 曾 是 collections  模块 的 组成部分
 源代码 libcollectionsabc
py  该 模块定义了一 些 抽象基类 它们 可用于 判断 一个 具体 类 是否 具有 某一 特定的 接口 例如 这个类 是否 可哈希 或 其 是否为 映射 类
 容器 抽象基类
token  与 python  解析树 一起使用 的常量
 源码 libtoken
py  此模块提供 表示 解析树 终端 令 牌 的 叶 节点 的 数值 的常量
 请参阅 python  发行版 中的文件 grammargrammar  以获取 语言 语法 上下文中 名称 的 定义
 名称映射 到 的特定 数值 可能会 在 python  版本 之间 更改
 该 模块还提供 从 数字 代码 到 名称 和 一些 函数 的 映射
 这些函数 镜 像 了 python  c  头文件 中 的 定义
tokname  将 此 模块中定义的 常量 的 数值 映射 回 名称 字符串 的字典 允许 生成 更 加 人 类 可读的 解析树 表示
isterminalx  对 终端 标记 值 返回 true
isnonterminalx  对 非 终端 标记 值 返回 true
iseofx  如果 x  是 表示 输入 结束 的 标记 则返回 true
 标记 常量 是 token
lpar  的权标值
rpar  的权标值
lsqb  的权标值
rsqb  的权标值
colon  的权标值
comma  的权标值
semi  的权标值
plus  的权标值
minus  的权标值
star  的权标值
slash  的权标值
vbar  的权标值
amper  的权标值
less  的权标值
greater  的权标值
ntoffsetc  标记 生成器 不 使用以下 标记 类型 值 但 tokenize  模块 需要 这些 标记 类型 值
comment  标记 值 用于表示 注释
nl  标记 值 用于表示 非 终止 换行符
 newline  标记 表示 python  代码 逻辑 行 的 结束 当 在 多 条 物理 线 路 上 继续执行 逻辑 代码 行 时 会生成 nl  标记
encoding  指示 用于将 源 字节 解码 为 文本 的 编码 的 标记 值
 tokenize
tokenize  返 回 的第一个 标记 将 始终 是一个 encoding  标记
 在3
5 版更改 补 充 await  和 async  标记
 在3
7 版更改 补 充 comment 、 nl  和 encoding  标记
 在3
7 版更改 移除 await  和 async  标记
 async  和 await  现 在 被 标记为 name  标记
 在3
8 版更改 added  typecomment  typeignore  colonequal
added  await  and  async  tokens  back  theyre  needed  to  supportparsing  older  python  versions  for  ast
parse  with  featureversionset  to 6 or  lower
sysconfig  provide  access  to  pythons  configuration  information
3
2 新版功能
 源代码 libsysconfig
 配置 变量
 用法示例 import  sysconfig  sysconfig
 安装 路径
 其他 功能
using  sysconfig  as  a  script
tty  终端 控制 功能
pytty  模块定义了 将 tty  放入 cbreak  和 raw  模式 的 函数
 因为它 需要 termios  模块 所 以 只能 在 unix  上 运行
tty  模块定义了以下 函数 tty
tcsaflush  将 文件描述符 fd  的 模式 更改 为 raw 
 如果 when  被省略 则 默认为 termios
tcsaflush  并 传递给 termios
tcsetattr 
tcsaflush  将 文件描述符 fd  的 模式 更改 为 cbreak 
 如果 when  被省略 则 默认 为 termios
tcsaflush  并 传递给 termios
tcsetattr 
 参见 模块 termios  低 级 终端 控制 接口
wsgiref  wsgi  utilities  and  reference  implementation
wsgirefutil  wsgi  environment  utilities
 it  should  not  be  used  by  actual  wsgi  servers  or  applications  since  the  data  is  fake  用法示例 from  wsgiref
 用法示例 from  io  import  stringio  from  wsgiref
util  import  filewrapper  were  using  a  stringiobuffer  for  as  the  filelike  object  filelike  stringiothis  is  an  example  filelike  object 10 wrapper  filewrapperfilelike  blksize 5 for  chunk  in  wrapper  printchunk 3
8 版后已移除 support  for  sequence  protocol  is  deprecated
wsgirefheaders  wsgi  response  header  tools
gif  在3
5 版更改 headers  parameter  is  optional
wsgirefsimpleserver  a  simple  wsgi  http  server
 用法示例 from  wsgiref
wsgirefvalidate  wsgi  conformance  checker
 用法示例 from  wsgiref
wsgirefhandlers  servergateway  base  classes
3
2 新版功能
 在3
3 版更改 the  term  python  is  replaced  with  implementation  specific  term  like  cpython  jython  etc
3
2 新版功能
 示例
python  运行时 服务
 本章 里 描述 的 模块提供了 和 python  解释器 及其 环境 交互 相关的 广泛 服务
 以下是 综 述 sys  系统 相关的 参数 和 函数 sysconfig  provide  access  to  pythons  configuration  information  配置 变量 安装 路径 其他 功能 using  sysconfig  as  a  script  builtins  内建 对象 main  顶 层 脚本 环境 warnings  warning  control  警告 类别 the  warnings  filter  describing  warning  filters  默认 警告过滤器 overriding  the  default  filter  暂 时 禁止 警告 测试 警告 updating  code  for  new  versions  of  dependencies  available  functions  available  context  managers  dataclasses  数据类 模块级 装饰器、 类和函数 初始化 后 处理 类变量 仅 初始化 变量 冻结 的 实例 继承 默认 工厂函数 可变的 默认值 异常 contextlib  为 with  语句 上下文 提供 的工具 工具 例子 和 配 方 supporting  a  variable  number  of  context  managers  catching  exceptions  from  enter  methods  cleaning  up  in  an  enter  implementation  replacing  any  use  of  tryfinally  and  flag  variables  using  a  context  manager  as  a  function  decorator  single  use  reusable  and  reentrant  context  managers  reentrant  context  managers  reusable  context  managers  abc  抽象基类 atexit  退出 处理器 atexit  示例 traceback  打印 或 检索 堆 栈回溯 tracebackexception  objects  stacksummary  objects  framesummary  objects  traceback  examples  future  future  语句 定义 gc  垃圾回收 器 接口 inspect  检查 对象 类型 和 成员 retrieving  source  code  introspecting  callables  with  the  signature  object  类 与 函数 the  interpreter  stack  fetching  attributes  statically  current  state  of  generators  and  coroutines  code  objects  bit  flags  命令行界面 site —— 指定 域 的 配置 钩子 readline  configuration  模块内容 命令行界面
 内置异常
 基类
 下列 异常 主要 被用作 其他 异常 的 基类
exception  baseexception  所有 内置异常 的 基类
 它 不应该 被 用户自定义 类 直接 继承 这种情况 请使用 exception
 如果在 此 类的实例 上调用 str  则 会返回 实例 的 参数 表 示 或者 当 没有 参数 时返回 空字符串
 args  传给 异常 构造器 的 参数 元组
 某些 内置异常 例如 oserror  接受 特 定 数量的 参数 并 赋 予 此 元组 中的元素 特殊 的含义 而 其他 异常 通常 只 接受 一个 给出 错误信息 的 单独 字符串
 withtracebacktb  此方法将 tb  设 为 异常 的 新 回溯 信息 并返回 该异常 对象
 它通常 以 如 下 的形式 在 异常 处理程序 中 使用 try 
withtracebacktbexception  exception  所有 内置的 非 系统 退出 类 异常都 派生 自 此 类
 所有 用户自定义 异常 也 应当 派 生 自 此 类
exception  arithmeticerror  此 基类 用 于 派生 针对 各种 算术 类 错误 而 引发 的 内置异常 overflowerror  zerodivisionerror  floatingpointerror
exception  buffererror  当 与 缓冲区 相关的 操作 无法 执行时 将 被引发
exception  lookuperror  此 基类 用 于 派生 当 映射 或 序列 所使用的 键 或 索引 无效 时 引发的异常 indexerror  keyerror
 这可以通过 codecs
lookup  来 直接 引发
 具体 异常
os  异常
 警告
 下列 异常 被用作 警告 类别 请参阅 警告 类别 文档 了解详情
exception  warning  警告 类别 的 基类
exception  userwarning  用户 代码 所产生 警告的基类
exception  deprecationwarning  如果所 发出 的 警告 是 针对 其他 python  开发者 的 则 以 此 作为 与 已弃用 特性 相关 警告的基类
 会 被 默认 警告过滤器 忽略 在 main  模块中的 情况 除外 pep 565
 启用 python  开发模式 时 会显示 此 警告
exception  pendingdeprecationwarning  对 于 已 过 时 并 预 计 在未来 弃用 但 目前 尚未 弃用的 特性 相关 警告的基类
 这个类 很 少 被使用 因为 针对 未来 可能的 弃用 发出 警告 的做法 并 不 常见 而 针对 当前 已有的 弃用 则 推荐 使用 deprecationwarning
 会 被 默认 警告过滤器 忽略
 启用 python  开发模式 时 会显示 此 警告
exception  syntaxwarning  与 模 糊 的语法 相关的 警告的基类
exception  runtimewarning  与 模 糊 的 运行时 行为 相关的 警告的基类
exception  futurewarning  如果所 发出 的 警告 是 针对 以 python  所 编写 应用 的 最终 用户 的 则 以 此 作为 与 已弃用 特性 相关 警告的基类
exception  importwarning  与 在 模块 导入 中 可能的 错误 相关的 警告的基类
 会 被 默认 警告过滤器 忽略
 启用 python  开发模式 时 会显示 此 警告
exception  unicodewarning  与 unicode  相关的 警告的基类
exception  byteswarning  与 bytes  和 bytearray  相关的 警告的基类
exception  resourcewarning  资源 使用 相关 警告的基类
 会 被 默认 警告过滤器 忽略
 启用 python  开发模式 时 会显示 此 警告
3
2 新版功能
 异常 层次结构
 内置异常 的 类 层级结构 如 下 baseexception  systemexit  keyboardinterrupt  generatorexit  exception  stopiteration  stopasynciteration  arithmeticerror  floatingpointerror  overflowerror  zerodivisionerror  assertionerror  attributeerror  buffererror  eoferror  importerror  modulenotfounderror  lookuperror  indexerror  keyerror  memoryerror  nameerror  unboundlocalerror  oserror  blockingioerror  childprocesserror  connectionerror  brokenpipeerror  connectionabortederror  connectionrefusederror  connectionreseterror  fileexistserror  filenotfounderror  interruptederror  isadirectoryerror  notadirectoryerror  permissionerror  processlookuperror  timeouterror  referenceerror  runtimeerror  notimplementederror  recursionerror  syntaxerror  indentationerror  taberror  systemerror  typeerror  valueerror  unicodeerror  unicodedecodeerror  unicodeencodeerror  unicodetranslateerror  warning  deprecationwarning  pendingdeprecationwarning  runtimewarning  syntaxwarning  userwarning  futurewarning  importwarning  unicodewarning  byteswarning  resourcewarning
http  http  模块
 源代码 libhttpinit
pyhttp  是一个包 它 收集 了 多个 用于处理 超 文本 传输 协议 的 模块 http
client  是一个 低层级的 http  协议 客户端 对 于 高层级的 url  访问 请使用 urllib
server  包含 基于 socketserver  的基本 http  服务 类 http
cookies  包含 一些 有 用 来实现 通过 cookies  进行 状态 管理 的工具 http
cookiejar  提供了 cookies  的 持久化 http  也是 一个 通过 http
httpstatus  枚举 定义了 一些 http  状态 码 以及 相关联 消息 的 模块 class  http
httpstatus 3
5 新版功能
 enum
intenum  的子类 它 定义了 组 http  状态 码 原 理 短 语 以及 用 英 语 书 写 的 长 描述 文本
 用 法 from  http  import  httpstatus  httpstatus
http  状态 码
csv  csv  文件 读写
 模块内容
 变种 与 格式 参数
reader  对象
writer  对象
 示例
 读取 csv  文件 最简单的 一个例子 import  csv  with  opensome
readerf  for  row  in  reader  printrow  读取 其他 格式 的 文件 import  csv  with  openpasswd  newline  as  f  reader  csv
quotenone  for  row  in  reader  printrow  相应 最简单的 写入 示例 是 import  csv  with  opensome
writerowssomeiterable  由 于 使用 open  来读取 csv  文件 因此 默认情况下 将 使用 系统 默认 编码 来 解码 文件 并 转换为 unicode  请参阅 locale
getpreferredencoding
 要使用 其他 编码 来 解码 文件 请使用 open  的 encoding  参数 import  csv  with  opensome
readerf  for  row  in  reader  printrow  这 同样 适用于 写入 非 系统 默认 编码 的内容 打开 输出 文件 时 指定 encoding  参数
 注册 一个新的 变种 import  csv  csv
readerf  unixpwdreader  的 更高级 用 法—— 捕获 并 报告 错误 import  csv  sys  filename  some
linenum  e  尽管 该模块 不 直接 支持 解析 字符串 但 仍 可 如 下 轻松 完成 import  csv  for  row  in  csv
readeronetwothree  printrow  脚注1 如果没有 指定 newline  则 嵌入 引号 中 的 换行符 将 无法 正确 解析 并 且 在 写入 时 使用 rn  换行 的 平台 会 有 多 余 的 r  写入
 由 于 csv  模块 会 执行 自己 的通用 换行符 处理 因此 指定 newline  应该 总 是 安全 的
stringprep  因 特 网 字符串 预 备
termios  posix  风格的 tty  控制
 此模块提供了 针对 tty  io  控制 的 posix  调用 的 接口
 有关 此 类 调用 的完整 描述 请参阅 termios 3 unix  指南 页
 它 仅在 当 安装 时 配置 了 支持 posixtermios  风格的 tty  io  控制 的 unix  版本 上可用
 此模块 中的所有 函数 均 接受一个 文件描述符 fd  作为 第一个参数
 这 可以是 一个整数 形式 的文件描述符 例如 sys
fileno  所返回的 对象 或 是一个 file  object  例如 sys
stdin  本身
 这个模块 还 定义了 与 此处 所提供的 函数 一起使用 的 所 有必要 的常量 这些 常量 与 它们在 c  中 的对应 常量 同名
 请 参考 你 的 系统 文档 了解有关 如何使用 这些 终端 控制 接口 的更多信息
 这个模块 定义了以下函数 termios
tcgetattrfd  对 于 文件描述符 fd  返回 一个包含 tty  属性 的 列表 形式 如 下 iflag  oflag  cflag  lflag  ispeed  ospeed  cc  其 中 cc  为 一个包含 tty  特殊 字符 的 列表 每一 项 都 是 长度为1 的 字符串 索引号 为 vmin  和 vtime  的 项 除外 这些 字段 如 有定义 则 应 为整数
 对 旗标 和 速度 以及 cc  数组中 索引 的 解读 必须使用 在 termios  模块中定义的 符号 常量 来完 成
tcsetattrfd  when  attributes  根据 attributes  列表 设置 文件描述符 fd  的 tty  属性 该 列表 即 tcgetattr  所返回的 对象
 when  参数 确定 何 时 改变 属性 tcsanow  表示 立即 改变 tcsadrain  表示 在 传输 所有 队列 输出 后再 改变 或 tcsaflush  表示 在 传输 所有 队列 输出 并 丢失 所有 队列 输入 后再 改变
tcsendbreakfd  duration  在 文件描述符 fd  上 发送 一个 中断
 duration  为零 表示 发送 时 长 为0
5 秒 的 中断 duration  非零 值 的含义 取决于 具体 系统
tcdrainfd  进入 等待 状态 直到 写入 文件描述符 fd  的 所有 输出 都 传 送 完毕
tcflushfd  queue  在 文件描述符 fd  上 丢弃 队列 数据
 queue  选择 器 指定 哪个 队列 tciflush  表示 输入 队列 tcoflush  表示 输出 队列 或 tcioflush  表 示 两个 队列 同时
tcflowfd  action  在 文件描述符 fd  上 挂起 一 战 恢复 输入 或 输出
 action  参数可以 为 tcooff  表示 挂起 输出 tcoon  表示 重 启 输出 tcioff  表示 挂起 输入 或 tcion  表示 重 启 输入
 参见 模块 tty  针对 常 用 终端 控制 操作 的便捷 函数
 示例
 这个函数 可 提示 输入 密码 并且 关闭 回显
 请注意 其 采 取 的 技巧 是 使用 一个单独的 tcgetattr  调用 和 一个 try 
 finally  语句 来 确保 旧 的 tty  属性 无论 在 何 种情况下 都会被 原 样 保存 def  getpasspromptpassword  import  termios  sys  fd  sys
ftplib  ftp  协议 客户端
 源代码 libftplib
quit  这个模块 定义了以下 内容 class  ftplib
 drxrxrx 5 ftp  ftp 4096 may 61043 centos  drxrxrx 3 ftp  ftp 18 jul 102008 fedora  在3
2 版更改 支持 了 with  语句
 在3
3 版更改 sourceaddress  parameter  was  added
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socket
 the  encoding  parameter  was  added  and  the  default  was  changed  from  latin 1 to  utf 8 to  follow  rfc 2640
3
2 新版功能
 在3
3 版更改 sourceaddress  parameter  was  added
 在3
4 版更改 the  class  now  supports  hostname  check  with  ssl
3
6 版后已移除 keyfile  and  certfile  are  deprecated  in  favor  of  context
 please  use  ssl
loadcertchain  instead  or  let  ssl
createdefaultcontext  select  the  systems  trusted  ca  certificates  for  you
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socket
 the  encoding  parameter  was  added  and  the  default  was  changed  from  latin 1 to  utf 8 to  follow  rfc 2640
 参见 module  netrc  parser  for  the 
ftp  objects
 在3
3 版更改 sourceaddress  parameter  was  added
 在3
2 版更改 rest  parameter  added
3
3 新版功能
 注解 if  your  server  supports  the  command  mlsd  offers  a  better  api
 注解 if  your  server  supports  the  command  mlsd  offers  a  better  api
ftptls  objects
 在3
4 版更改 the  method  now  supports  hostname  check  with  ssl
3
3 新版功能
gc  垃圾回收 器 接口
fcntl  the  fcntl  and  ioctl  system  calls
 在3
3 版更改 operations  in  this  module  used  to  raise  an  ioerrorwhere  they  now  raise  an  oserror
 在3
8 版更改 the  fcntl  module  now  contains  faddsealsfgetseals  and  fseal  constants  for  sealing  ofos
 在3
9 版更改 on  macos  the  fcntl  module  exposes  the  fgetpathconstant  which  obtains  the  path  of  a  file  from  a  file  descriptor
 onlinux 3
15 the  fcntl  module  exposes  the  fofdgetlkfofdsetlk  and  fofdsetlkw  constants  which  working  with  openfile  description  locks
 这个模块 定义了以下函数 fcntl
 举 个例子 import  array  fcntl  struct  termios  os  os
 参见 模块 os  if  the  locking  flags  oshlock  and  oexlock  are  present  in  the  os  module  on  bsd  only  the  os
logging  python  的日志记录 工具
 源代码 liblogginginit
pyimportant  此 页面 仅 包含 api  参考 信息
 教程 信息 和 更多 高级 用 法 的 讨论 请参阅 基础 教程 进 阶 教程 日志 操作 手册 这个模块 为 应用 与 库 实现了 灵活的 事件 日志 系统 的 函数 与 类
 使用 标准库 提 提供的 logging  api  最 主要 的 好处 是所有 的 python  模块 都 可能 参 与 日志 输出 包括 你自己的 日志消息 和 第三方 模块 的 日志消息
 这个模块 提供 许多 强大 而 灵活的 功能
 如果你 对 logging  不太 熟悉 的话 掌 握 它 最好 的方式 就是 查看 它 对应的 教程 详 见 右 侧 的 链接
 该 模块定义 的基础 类和函数 都 列 在下面
 记录器 暴 露 了 应用程序 代码 直接使用 的 接口
 处理器 将日志记录 由 记录器 创建 发送到 适当的 目标
 过滤器 提供了更 精 细 的 设 施 用于确定 要 输出 的日志记录
 格式 器 指定 最终 输出 中 日志记录 的 样式
 记录器 对象
 日志 级别
 日志记录 级别 的 数值 在 下 表 中 给出
 如果你想要 定义 自己的 级别 并且 需要 它们 具有 相对于 预定义 级别 的特定 值 那么 这些 内容 可能是 你 感兴趣的
 如果你 定义 具有相同 数值 的 级别 它 将 覆盖 预定义 的 值 预定义 的 名称 丢失
 级别 数值 critical 50 error 40 warning 30 info 20 debug 10 notset 0
 处理器 对象
handler  有以下 属性 和 方法
 注意 不 要 直接 实例化 handler  这个类 用来 派生 其他 更 有用的 子类
 但是 子类 的 init  方法 需要 调用 handler
init 
handler  initlevelnotset  初始化 handler  实例时 需要 设置 它 的 级别 将 过滤 列表 置 为空 并 且 创建 锁 通过 createlock  来 序列化 对 io  的 访问
 createlock  初始化 一个线程 锁 用来 序列化 对 底层 的 io  功能 的 访问 底层 的 io  功能 可能不 是线程安全的
 acquire  使用 createlock  获取 线程 锁
 release  使用 acquire  来 释放 线程 锁
 setlevellevel  给 处理器 设置 阈 值 为 level 
 日志 级别 小于 level  将被忽略
 创建 处理器 时 日志 级别 被设置为 notset  所有的 消息 都会被 处理
 参见 日志 级别 级别 列表
 在3
2 版更改 level  形参 现在接受 像 info  这样的 字符串形式 的 级别 表达 方式 也可以使用 像 info  这样的 整数 常量
 setformatterfmt  将 此 处理器 的 formatter  设置为 fmt
 addfilterfilter  将 指定 的过滤器 filter  添加到 此 处理器
 removefilterfilter  从 此 处理器 中删除 指定 的过滤器 filter 
 filterrecord  将 此 处理器 的过滤器 应用 于 记录 在 要 处理 记录 时返回 true 
 依 次 查 询 过滤器 直到 其中一个 返回 假值 为止
 如果它们 都 不 返回 假值 则 将 发 出 记录
 如果 返回 一个 假值 则 处理器 将不会 发出 记录
 flush  确保 所有 日志记录 从 缓存 输出
 此 版本 不 执行任何 操作 并且 应 由 子类 实 现
 close  整 理 处理器 使用 的 所有 资源
 此 版本 不 输出 但 从 内部 处理器 列表中 删除 处理器 内部 处理器 在 shutdown  被调用时 关闭
 子类 应 确保 从 重 写 的 close  方法 中 调用此方法
 handlerecord  经 已 添加到 处理器 的过滤器 过滤 后 有 条件 地 发出 指定 的日志记录
 用 获 取 释放 io  线程 锁 包装 记录 的 实际 发出 行为
 handleerrorrecord  调用 emit  期间 遇到 异常 时 应 从 处理器 中 调用此方法
 如果模块 级 属性 raiseexceptions  是 false  则 异常 将 被 静默 忽略
 这是 大多 数情况下 日志 系统 需要 的—— 大多数 用户 不 会 关 心 日志 系统中 的 错误 他 们 对 应用程序 错误 更 感兴趣
 但是 你可以 根据 需要 将 其 替换为 自定义 处 理器
 指定 的 记录 是 发生异常 时 正 在 处理 的 记录
raiseexceptions  的 默认值 是 true  因为 这 在 开发 过程中 是 比较 有用的
 formatrecord  如果设置 了 格式 器 则 用 其 对 记录 进行 格式化
 否则 使用 模块 的 默认 格式 器
 emitrecord  执行 实际 记录 给定 日志记录 所需的 操作
 这 个 版本 应 由 子类 实现 因此这 里 直接 引发 notimplementederror  异常
 有关 作为 标准 随 附 的 处理程序 列表 请参见 logging
 格式 器对象
filter  对象
logrecord  属性
logrecord  实例 是 每 当 有 日志 被 记录 时 由 logger  自动创建 的 并且 可通过 makelogrecord  手动 创建 例如 根据 从 网络 接收 的 已 封存 事件 创建
logrecordname  level  pathname  lineno  msg  args  excinfo  funcnone  sinfonone  包含 与 被 记录 的 事件 相关的 所有 信息
 主要 信息 是 在 msg  和 args  中 传递 的 它们 使用 msg  args  组合 到 一起 以 创建 记录 的 message  字段
 参数 name  用 于 记录 由 此 logrecord  所 表示 的 事件 的 日志记录器 名 称
 请注意此 名称 将 始终 为 该值 即使 它可以 是 由 附加 到 不同 祖 先 日志记录器 的 处理程序 所 发出 的
 level  以 数字 表示 的日志记录 事件 层级 如 debug  info  等
 请注意 这 会 转换为 logrecord  的 两个 属性 levelno  为 数字 值 而 levelname  为 对应的 层级 名称
 pathname  进行 日志记录 调用 的 文件 的完整 路径名
 lineno  记录 调用 所 在 源文件 中 的 行 号
 msg  事件 描述 消息 可能为 带有 可变 数据 占位 符 的 格式字符串
 args  要 合并 到 msg  参数 以 获得 事件 描述 的 可变 数据
 excinfo  包含 当前 异常 信息 的 异常 元组 或者如果 没有可用 异 常 信息 则 为 none
 func  发起调用 日志记录 调用 的 函数 或 方法 名称
 sinfo  一个 文本 字符串表示 当前 线程中 从 堆栈 底 部 直到 日志 记录 调用 的 堆栈 信息
 getmessage  在 将 logrecord  实例 与 任何 用户 提供的 参数 合并 之后 返回 此 实例 的 消息
 如果 用户 提供给 日志记录 调用 的 消息 参数 不 是 字符串 则会在 其 上调用 str  以 将 它 转换为字符串
 此方法 允许 将 用户定义的 类 用 作 消息 类 的 str  方法可以 返回 要使用的 实际 格式字符串
 在3
2 版更改 通过 提供 用于创建 记录 的工厂 方法 已 使得 logrecord  的 创建 更易 于 配置
 该 工厂 方法 可 使用 getlogrecordfactory  和 setlogrecordfactory  来 设置 在 此 可 查看 工厂 方法 的 签名
 在 创建时 可 使用 此功能 将 你自己的 值 注 入 logrecord
 你可以 使用以下 模 式 oldfactory  logging
setlogrecordfactoryrecordfactory  通过 此 模式 多个 工厂 方法可以 被 链接 起来 并且 只要 它们不 重载 彼 此 的 属 性 或 是 在 无 意 中 覆盖 了 上 面列出的 标准 属性 就不 会发生 意外
logrecord  属性
loggeradapter  对象
loggeradapter  实例 会 被用来 方便地 将 上下文 信息 传入 日志记录 调用
 要获取 用法示例 请参阅 添加 上下文 信息 到 你 的日志记录 输出 部分
loggeradapterlogger  extra  返回 一个 loggeradapter  的 实例 该实例 的 初始化 使用了 下层的 logger  实例 和 一个字典 类对象
 processmsg  kwargs  修改 传递给 日志记录 调用 的 消息 和 或 关键字参数 以便 插入 上下文 信息
 此 实现 接受 以 extra  形式 传给 构造器 的 对象 并 使用 extra  键 名 将 其 加入 kwargs
 返回值为 一个 msg  kwargs  元组其 中 传入 了 可能 经过 修改 的 参数 版本
 在 上述 方法 之外 loggeradapter  还 支持 logger  的 下列方法 debuginfo  warning  error  exception  criticallog  isenabledfor  geteffectivelevel  setlevel  以及 hashandlers
 这些方法 具有与 它们在 logger  中 的对应 方法 相同 的 签名 因此 你可以 互 换 使用 这两种 类型的实例
 在3
2 版更改 isenabledfor  geteffectivelevel  setlevel  和 hashandlers  方法 已 被添加到 loggeradapter
 这些方法 会 委托给 下层的 日志记录器
 线程安全
logging  模块 的 目标 是 使 客户端 不必 执行任何 特殊 操作 即可 确保 线程安全
 它 通过使用 线程 锁 来 达 成 这 个 目标 用 一个 锁 来 序列化 对 模块 共享 数据 的 访问 并且 每个 处理程序 也 会创建一个 锁 来 序列化 对 其 下层 io  的 访问
 如果你 要使用 signal  模块 来实现 异步 信号处理程序 则 可能无法 在这些 处理程序 中 使用 logging
 这 是因为 threading  模块中的 锁 实现 并非 总是 可 重入 的 所 以 无法 从 此 类 信号处理程序 发起调用
 模块 级别 函数
 模块级 属性
 与 警告 模块 集成
calendar  日 历 相关 函数
pprint  数据 美化 输出
 源代码 libpprint
pypprint  模块提供了 美化 打印 任意 python  数据结构 的功能 这种 美化 形式 可用作 对 解释器 的 输入
 如果 经 格式化 的 结构 包含 非 基本 python  类型的对象 则 其 美化 形式 可能无法 被 加载
 包含 文件、 套接字 或 类对象 以及 许多 其他 不能用 python  字面值 来表示 的 对象 都有 可能导致 这样的 结果
 格式化 后 的形式 会 在 可能 的情况下 以 单 行 来表示 对象 并 在 无法 在 允许 宽度 内容 纳 对象 的情况下 将 其 分 为 多 行
 如果你需要 调整 宽度 限制 则 应 显式地 构造 prettyprinter  对象
 字典 在 计算 其 显示 形式 前 会先 根据 键 来 排序
 在3
9 版更改 添加了 对 美化 打印 types
simplenamespace  的 支持
pprint  模块 定义了一个 类 class  pprint
prettyprinterindent 1 width 80 depthnone  streamnone  compactfalse  sortdictstrue  构造一个 prettyprinter  实例
 此 构造器接受 几个 关键字形参
 使用 stream  关键字 可 设置 输出 流 流 对象 使用 的唯一 方法 是 文件 协议 的 write  方法
 如果未指定 此 关键字 则 prettyprinter  会 选择 sys
 每个 递归 层次 的缩进 量 由 indent  指定 默认值为 一
 其他值 可 导致 输出 看起来 有 些 怪 异 但 可 使得 嵌套 结构 更易 区分
 可 被打 印 的 层级 数量 由 depth  控制 如果 数据结构 的 层级 被 打印 得 过 深 其 所 包 含 的下一 层级 会 被替换为
 在默认情况下 对 被 格式化 对象 的 层级 深 度 没有 限制
 希望 的 输出 宽度 可 使用 width  形参 来 限制 默认值为80 个 字符
 如果一个 结构 无法 在 限定 宽度 内 被 格式化 则 将 做 到 尽可能 接近
 如果 compact  为假值 默认 则 长 序列 的每一 项 将 被 格式化 为 单独的 行
 如果 compact  为真值则 将 在 width  可 容 纳 的 的情况下 把 尽可能 多 的 项 放入 每个 输出 行
 如果 sortdicts  为真值 默认 字典 将 被 格式化 为 按键 排序 否则将 按 插入顺序 显示
 在3
4 版更改 增加了 compact  形参
 在3
8 版更改 增加了 sortdicts  形参
pprint  模块还 提供了一些 快捷 函数 pprint
pformatobject  indent 1 width 80 depthnone  compactfalse  sortdictstrue  object  的 格式化 表示 作为 字符串 返回
 indent  width  depth  compact  和 sortdicts  将作为 格式化 形参 被 传入 prettyprinter  构 造器
 在3
4 版更改 增加了 compact  形参
 在3
8 版更改 增加了 sortdicts  形参
ppobject  args  sortdictsfalse  kwargs  打印 object  的 格式化 表示 并附带 一个 换行符
 如果 sortdicts  为假 值 默认 字典 将 按键 的 插入顺序 显示 否则将 按 字典 键 排序
 args  和 kwargs  将作为 格式化 形参 被传给 pprint
3
8 新版功能
pprintobject  streamnone  indent 1 width 80 depthnone  compactfalse  sortdictstrue  在 stream  上 打 打印 object  的 格式化 表示 并附带 一个 换行符
 如果 stream  为 none  则 使用 sys
stdout
 这可以 替代 print  函数 在交互式 解释器中 使用 以 查看 值 你 甚至 可以 执行 重新 赋值 print  pprint
pprint  以 在 特定 作用域中 使用
 indent  width  depth  compact  和 sortdicts  将作为 格式化 形参 被传给 prettyprinter  构 造器
 在3
4 版更改 增加了 compact  形参
 在3
8 版更改 增加了 sortdicts  形参
isreadableobject  确定 object  的 格式化 表示 是否 可读 或 是否 可被用来 通过 eval  重新 构建 对象 的 值
 此 函数 对 于 递归 对象 总是返回 false
isrecursiveobject  确定 object  是否 需要 递归 表示
 此外还 定义了一个 支持 函数 pprint
safereprobject  返回 object  的 字符串表示 并 为 递归 数据结构 提供 保护
 如果 object  的 表示形式 公开 了 一个 递归 条目 该 递归 引用 会 被 表示为 recursion  on  typename  with  idnumber
 该 表示 因 而不会 进行 其 它 格 式化
prettyprinter  对象
prettyprinter  的 实例 具有 下列方法 prettyprinter
pformatobject  返回 object  格式化 表示
 这 会 将 传给 prettyprinter  构造器 的 选项 纳 入 考虑
pprintobject  在 所 配置 的 流 上 打印 object  的 格式化 表示 并 附加 一个 换行符
 下列方法 提供了 与 同名 函数 相 对应的 实现
 在 实例 上 使用 这些方法 效率 会 更高 一些 因为 不需要 创建新的 prettyprinter  对象
isreadableobject  确定 对象 的 格式化 表示 是否 可读 或者 是否可 使用 eval  重 建 对象 值
 请注意 此方法 对 于 递归 对象 将 返回 false
 如果设置 了 prettyprinter  的 depth  形参 并且 对象 深度 超出 允许 范围 此方法将 返 回 false
isrecursiveobject  确定 对象是否 需要 递归 表示
 此方法 作为一个 钩子 提供 允许 子类 修改 将 对象 转换为字符串 的方式
 默认 实现 使用 saferepr  实现 的 内部 方式
formatobject  context  maxlevels  level  返回 三个 值 字符串形式 的 object  已 格式化 版本 指明 结果 是否 可读的 旗标 以及 指明 是否 检测到 递归 的 旗标
 第一个参数 是 要 表示 的 对象
 第 二个 是 以 对象 id  为 键 的字典 这些 对象 是 当前 表示 上下文 的一部分 影响 object  表示 的 直接 和 间接 容器 如果需要 呈 现 一个 已经 在 context  中 表示 的 对象 则 第三个 返回值 应当为 true
 对 format  方法 的 递归 调用 应当 将 容器 的附加 条目 添加到 此 字典中
 第三个 参数 maxlevels  给出了 对 递归 的 请求 限制 如果没有 请求 限制 则 其 值 将 为0
 此 参数 应当 不 加 修改 地 传给 递归 调用
 第 四个 参数 level  给出 于当前 层级 传给 递归 调用 的 参数 值 应当 小于 当前 调用 的 值
 示例
 为 了 演示 pprint  函数 及其 形参 的 几种 用 法 让我们 从 pypi  获取 关于 某个 项目的 信息 import  json  import  pprint  from  urllib
loadrespinfopprint  以 其 基本 形式 显示了 整个 对象 pprint
0 结果 可以被 限制 到 特定的 depth  更 深 层 的内容 将 使用 省略 号 pprint
0 此外 还可以 设置 建议 的最大 字符 width
 如果一个 对象 无法被 拆分 则 将 超出 指定 宽度 pprint
difflib  计算 差异的 辅助 工具
 源代码 libdifflib
py  此模块提供 用 于 比较 序列 的 类和函数
 例如 它 可被用于 比较 文件 并 可 产生 多种 格式 的不同 文件 差异 信息 包括 html  和 上下文 以及 统 一 的 diff  数据
 有关 比较 目录 和 文件 另请参阅 filecmp  模块
sequencematcher  这是一个 灵活的 类 可用于 比较 任何 类型 的 序列 对 只要 序列 元素 为 hashable  对象
 其 基本 算法 要 早 于 由 ratcliff  和 obershelp  于1980 年 代 末 期 发 表 并 以 格式 塔 模式 匹配 的 夸 张 名称 命名 的算法 并且 更 加 有趣 一些
 其 思 路 是 找到 不包含 垃圾 元素 的 最 长 连续 匹配 子 序列 所 谓 垃圾 元素 是 指 其 在 某种 意义 上 没有 价 值 例如 空白 行 或 空白符
 处理 垃圾 元素 是 对 ratcliff  和 obershelp  算法的 一个 扩展
 然后 同样的 思 路 将 递归 地 应用 于 匹配 序列 的 左 右 序列 片段
 这 并 不 能 产生 最小 编辑 序列 但 确实 能 产生 在 人 们 看 来 正确的 匹配
 耗 时 基本 ratcliffobershelp  算法 在 最 坏 情况下 为 立 方 时间 而 在 一 般 情况下 为 平方 时间
 sequencematcher  在 最 坏 情况下 为 平方 时间 而 在 一 般 情况下 的 行为 受到 序列中 有 多少 相同 元素 这 一 因 素 的 微 妙 影响 在 最佳 情 况下 则 为 线 性 时间
 自动 垃圾 启 发 式 计算 sequencematcher  支持 使用 启 发 式 计算 来 自动 将 特定 序列 项 视为 垃圾
 这种 启 发 式 计算 会 统计 每个 单独 项 在 序列 中出现的 次 数
 如果 某一 项 在第一 项 之后的 重复 次 数 超过 序列长度 的1 并且 序 列长度 至少有200 项 该 项 会 被 标记为 热 门 并 被视为 序列 匹配 中 的 垃圾
 这种 启 发 式 计算 可以通过在 创建 sequencematcher  时 将 autojunk  参数 设 为 false  来 关闭
3
2 新版功能 autojunk  形参
differ  这个类 的作用 是 比较 由 文本 行 组成的 序列 并 产生 可 供 人 阅读 的差异 或 增量 信息
 differ  统 一 使用 sequencematcher  来完成 行 序列 的 比较 以及 相似 接近 匹配 行 内部 字符 序列 的 比较
 differ  增量 的每一 行 均 以 双 字母 代码 打头 双 字母 代码 意义 行为 序列1 所 独 有 行为 序列2 所 独 有 行 在 两 序列中 相同 行 不存在 于 任 一 输入 序列 以 打头 的 行 尝试 将 视 线 引 至 行 以外 而 不存在 于 任 一 输入 序列 的差异
 如果 序列 包含 制表符 则 这些 行 可能会 令人 感到 迷 惑
htmldiff  这个类 可用于 创建 html  表 格 或 包含 表 格 的完整 html  文件 以 并 排 地 逐 行 显示 文本 比较 行 间 与 行 外 的 更改 将 突 出 显示
 此 表 格 可以 基于 完全 或 上 下文 差异 模式 来生成
 这个类 的 构造函数 inittabsize 8 wrapcolumnnone  linejunknone  charjunkischaracterjunk  初始化 htmldiff  的 实例
 tabsize  是 一个可选 关键字参数 指定 制表 位 的 间隔 默认值为8
 wrapcolumn  是 一个可选 关键字参数 指定 行 文本 自动 打 断 并 换行 的 列 位置 默认值为 none  表示 不 自动换行
 linejunk  和 charjunk  均 是可选 关键字参数 会 传入 ndiff  被 htmldiff  用来 生成 并 排 显示 的 html  差异
 请参阅 ndiff  文档 了解 参数 默认值 及其 说明
 下列 是 公开 的 方法 makefilefromlines  tolines  fromdesc  todesc  contextfalse  numlines 5 charsetutf 8 比较 fromlines  和 tolines  字符串列表 并返回一个 字符串 表 示 一个完整 html  文件 其中包含 各 行 差异的 表 格 行 间 与 行 外 的 更改 将 突 出 显示
 fromdesc  和 todesc  均 是可选 关键字参数 指定 来源 目标 文件 的 列 标题 字符串 默认 均为 空白 字符串
 context  和 numlines  均 是可选 关键字参数
 当 只要 显示 上下文 差 异 时就 将 context  设 为 true  否则 默认值 false  为 显示 完整 文 件
 numlines  默认为5
 当 context  为 true  时 numlines  将 控制 围 绕 突 出 显示 差异 部分 的 上下文行 数
 当 context  为 false  时 numlines  将 控制 在 使用 next  超 链接 时 突 出 显示 差 异 部分 之前 所 显示 的 行 数 设 为零则 会导致 next  超 链接 将 下 一个 突 出 显示 差异 部分 放在 浏览器 顶 端 不 添加 任何 前导 上下文
 注解 fromdesc  和 todesc  会 被当作 未 转义 的 html  来 解读 当 接收 不 可 信 来源 的 输入 时 应该 适当 地 进行 转义
 在3
5 版更改 增加了 charset  关键字参数
 html  文档 的 默认 字符 集 从 iso 88591 更改 为 utf 8
 maketablefromlines  tolines  fromdesc  todesc  contextfalse  numlines 5 比较 fromlines  和 tolines  字符串列表 并返回一个 字符串 表 示 一个包含 各 行 差异的 完整 html  表 格 行 间 与 行 外 的 更改 将 突 出 显示
 此方法 的 参数 与 makefile  方法 的 相同
py  是 这个类 的 命令行 前 端 其中包含 一个 很好 的 使 用 示例
contextdiffa  b  fromfile  tofile  fromfiledate  tofiledate  n 3 linetermn  比较 a  和 b  字符串列表 返回 上下文 差异 格式 的 增量 信息 一个 产 生 增量 行 的 generator
 所 谓 上下文 差异 是一种 只 显示 有 更改 的 行 再 加 几个 上下文行 的 紧凑 形式
 更 改 被 显示 为 之前 之后的 样式
 上下文行 数 由 n  设 定 默认为 三 行
 默认情况下 差异 控制 行 以 or  表示 是通过 末尾 换行符 来 创建 的
 这样做 的 好处 是 从 io
readlines  创建 的 输入 将 得到 适用于 io
writelines  的差异 信息 因为 输入和输出 都 带有 末 尾 换行符
 对 于 没有 末尾 换行符 的 输入 应 将 lineterm  参数 设 为 这样 输出 内 容 将 统 一 不带 换行符
 上下文 差异 格式 通常 带有一个 记录 文件名 和 修改 时间 的 标头
 这些 信息 的 部 分 或 全部 可以使用 字符串 fromfile  tofile  fromfiledate  和 tofiledate  来指定
 修改 时间 通常 以 iso 8601 格式 表示
 如果未指定 这些 字符串 默认为 空
py 14 bacon  eggs  ham  guido 14 python  eggy  hamster  guido  请参阅 difflib  的 命令行接口 获取更 详细 的 示例
6 返回 由 最佳 近似 匹配 构成的 列表
 word  为 一个 指定 目标 近似 匹配 的 序 列 通常 为 字符串 possibilities  为 一个 由 用 于 匹配 word  的 序列 构成的 列表 通常 为 字符串列表
 可选参数 n  默认为3 指定 最多 返回 多少 个 近似 匹配 n  必须 大于0
 可选参数 cutoff  默认为0
6 是一个01 范围内 的 浮点数
 与 word  相似 度 得 分 未 达到 该值 的 候 选 匹配 将被忽略
 候 选 匹配 中 不 超过 n  个 的最佳 匹配 将 以 列表 形式返回 按 相似 度 得 分 排序 最 相似的 排 在 最 前面
ndiffa  b  linejunknone  charjunkischaracterjunk  比较 a  和 b  字符串列表 返回 differ  形式 的 增量 信息 一个 产 生 增量 行 的 generator
 可选 关键字形参 linejunk  和 charjunk  均为 过滤 函数 或 为 none  linejunk  此 函数接受 单个 字符串参数 如果其 为垃圾 字符串 则返回真值 否则返回 假值
 默认为 none
 此外 还有一个 模块层级 的 函数 islinejunk  它 会 过滤 掉 没有可 见 字符 的 行 除非 该 行 添加了 至多 一 个 井 号 符 但是 下层的 sequencematcher  类 会 动态 分析 哪些 行 的 重复 频 繁 到 足以 形 成 噪 音 这通常 会 比 使用 此 函数 的效果 更好
 charjunk  此 函数 接受一个 字符 长度为1 的 字符串 如果其 为垃圾 字 符 则返回真值 否则返回 假值
 默认为 模块层级 的 函数 ischaracterjunk  它 会 过滤 掉 空白字符 空格符 或 制表符 但 包含 换 行 符 可 不 是 个 好 主 意
py  是 这个函数 的 命令行 前 端
restoresequence  which  返回 两个 序列中 产生 增量 的 那 一个
 给出 一个 由 differ
compare  或 ndiff  产生 的 序列 提取 出来 自 文件1 或2 which  形参 的 行 去除 行 前缀
 示例 diff  ndiffonentwonthreen
unifieddiffa  b  fromfile  tofile  fromfiledate  tofiledate  n 3 linetermn  比较 a  和 b  字符串列表 返回 统 一 差异 格式 的 增量 信息 一个 产生 增量 行 的 generator
 所 以 统 一 差异 是一种 只 显示 有 更改 的 行 再 加 几个 上下文行 的 紧凑 形式
 更改 被 显示 为 内 联 的 样式 而不是 分开 的 之前 之后 文本 块
 上下文行 数 由 n  设 定 默认为 三 行
 默认情况下 差异 控制 行 以 或 表示 是通过 末尾 换 行 符 来创建 的
 这样做 的 好处 是 从 io
readlines  创建 的 输入 将 得到 适用于 io
writelines  的差异 信息 因为 输入和输出 都 带有 末尾 换行符
 对 于 没有 末尾 换行符 的 输入 应 将 lineterm  参数 设 为 这样 输出 内 容 将 统 一 不带 换行符
 上下文 差异 格式 通常 带有一个 记录 文件名 和 修改 时间 的 标头
 这些 信息 的 部 分 或 全部 可以使用 字符串 fromfile  tofile  fromfiledate  和 tofiledate  来指定
 修改 时间 通常 以 iso 8601 格式 表示
 如果未指定 这些 字符串 默认为 空
py 1414 bacon  eggs  ham  python  eggy  hamster  guido  请参阅 difflib  的 命令行接口 获取更 详细 的 示例
diffbytesdfunc  a  b  fromfileb  tofileb  fromfiledateb  tofiledateb  n 3 linetermbn  使用 dfunc  比较 a  和 b  字节串对象 列表 产生 以 dfunc  所 返 回 格式 表示 的差异 行 列表 也是 字节串
 dfunc  必须是 可调用对象 通 常 为 unifieddiff  或 contextdiff
 允许你 比较 编码 未 知 或 不 一致的 数据
 除 n  之外 的 所有 输入 都必须 为 字 节串对象 而非 字符串
 作 用方式 为 无 损 地 将所有 输入 除 n  之外 转换 为 字符串 并 调用 dfunca  b  fromfile  tofile  fromfiledate  tofiledate  n  lineterm
 dfunc  的 输出 会 被 随 即 转换 回 字节串 这 样 你所 得到的 增量 行 将 具有与 a  和 b  相同 的 未 知 不 一致 编码
3
5 新版功能
islinejunkline  对 于 可 忽略 的 行 返回 true
 如果 line  为 空行 或 只包含 单个 则 line  行 就是 可 忽略 的 否则 就 是不可 忽略 的
 此 函数 被用作 较 旧版本 ndiff  中 linejunk  形参 的 默认值
ischaracterjunkch  对 于 可 忽略 的 字符 返回 true
 字符 ch  如果为 空格符 或 制表符 则 ch  就是 可 忽略 的 否则 就 是不可 忽略 的
 此 函数 被用作 ndiff  中 charjunk  形参 的 默认值
 参见 模式 匹配 格式 塔 方法 john  w
 ratcliff  和 d
 metzener  对 于 一种 类似 算法的 讨论
 此 文 于1988 年7 月 发 表 于 dr
 dobbs  journal
sequencematcher  对象
sequencematcher  的 示例
 以下示例 比较 两个 字符串 并 将 空格 视为 垃圾 s  sequencematcherlambda  x  x 
 private  volatile  thread  currentthreadratio  返回 一个01 范围内 的 整数 作为 两个 序列 相似 性 的 度 量
 根据 经 验 ratio  值 超过0
6 就 意味着 两个 序列 是 近似 匹配 的 printrounds
866 如果你 只 对两个 序列 相匹配 的 位置 感兴趣 则 getmatchingblocks  就 很 方便 for  block  in  s
 printad  and  bd  match  for  d  elements  blocka 0 and  b 0 match  for 8 elementsa 8 and  b 17 match  for 21 elementsa 29 and  b 38 match  for 0 elements  请注意 getmatchingblocks  返回 的最后一个 元组 总是 只 用 于 占位 的 lena  lenb 0 这 也是 元组 末尾 元素 匹配 的 元素 数量 为0 的唯一 情况
 如果你想要 知道如何 将 第一个 序列 转 成 第二个 序列 可以使用 getopcodes  for  opcode  in  s
 print 6 s  add  bdd  opcode  equal  a 08 b 08 insert  a 88 b 817 equal  a 829 b 1738 参见 此模块中 的 getclosematches  函数 显示了 如何 基于 sequencematcher  构建 简单的 代码 来执行 有用的 功能
 使用 sequencematcher  构建 小 型 应用 的 简 易 版本 控制 方案
differ  对象
 请注意 differ  所生成的 增量 并 不保证 是 最小 差异
 相反 最小 差异 往往 是 违 反 直 觉 的 因为它们 会 同步 任何 可能 的地方 有 时 甚至 意外 产生 相 距100 页 的 匹配
 将 同步 点 限制为 连续 匹配 保留 了一些 局部 性 概念 这 偶 尔 会 带 来 产生 更 长 差异的 代 价
differ  类 具有 这样的 构造器 class  difflib
differlinejunknone  charjunknone  可选 关键字形参 linejunk  和 charjunk  均为 过滤 函数 或 为 none  linejunk  接受 单个 字符串 作为参数 的 函数 如果其 为垃圾 字符串 则返回 真值
 默认值为 none  意味着 没有任何 行 会被视为 垃圾 行
 charjunk  接受 单个字符 长度为1 的 字符串 作为参数 的 函数 如果其 为垃圾 字符 则返回真值
 默认值为 none  意味着 没有任何 字符 会被视为 垃圾 字符
 这些 垃圾 过滤 函数 可 加 快 查找 差异的 匹配 速度 并且不 会导致 任何 差异 行 或 字符 被忽略
 请 阅读 findlongestmatch  方法 的 isjunk  形参 的 描 述 了解详情
 differ  对象 是通过 一个单独 方法来 使用 生成 增量 的 comparea  b  比较 两个 由 行 组成的 序列 并 生成 增量 一个 由 行 组成的 序列
 每个 序列 必须 包含一个 以 换行符 结尾 的 单 行 字符串
 这样的 序列 可以通 过 文件类对象 的 readlines  方法 来获取
 所生成的 增量 同样 由 以 换 行 符 结尾 的 字符串 构成 可以通过 文件类对象 的 writelines  方法 原 样 打印出 来
differ  示例
 此 示例 比较 两 段 文本
 首先 我们 设置 文本 为 以 换行符 结尾 的 单 行 字符串 构成的 序列 这样的 序列 也可以通过 文件类对象 的 readlines  方法 来获取 text 11
splitlineskeependstrue  接下来 我们 实例化 一个 differ  对象 d  differ  请注意 在 实例化 differ  对象 时 我们可以 传入 函数来 过滤 掉 垃圾 行 和 字符
 详情参见 differ  构造器 说明
 最后 我们 比较 两个 序列 result  listd
comparetext 1 text 2 result  是一个字符串 列表 让我们 将 其 美化 打印出 来 from  pprint  import  pprint  pprintresult 1
n  作为 单独的 多 行 字符串 显示 出来 则 是这样 import  sys  sys
difflib  的 命令行接口
 这 个实例 演示了如何 使用 difflib  来 创建一个 类似于 diff  的工具
 它 同样 包含在 python  源码 发布 包 中 文件名 为 toolsscriptsdiff
audioop  处理 原始 音频 数据
 概述
python  库 中 包含了 几 种不同 的 组件
 它包含 通常 被视为 语言核心 中 的一部分 的 数据类型 例如 数字 和 列表
 对 于 这些类型 python  语言核心 定义了 文 字 的形式 并 对 它们的 语义 设置 了一些 约 束 但 没有 完全 定义 语义
 另一 方面 语言核心 确实 定义了 语法 属性 如 操作符 的 拼 写 和 优先级
 这 个 库 也 包含了 内置函数 和 异常 不需要 import  语句 就可以 在所有 python  代码中使用 的 对象
 有一些 是 由 语言核心 定义 的 但是 许多 对 于 核心 语义 不 是 必需 的 并且 仅 在这里 描述
 不 过 这 个 库 主要 是 由 一系列 的 模块 组成
 这些模块 集 可以 不同 方式 分 类
 有 些模块 是 用 c  编写 并 内置 于 python  解释器中 另一 些模块 则 是 用 python  编写 并 以 源码 形式 导入
 有 些 模块提供 专用 于 python  的 接口 例如 打印 栈 追踪 信息 有 些 模块提供 专用 于特定 操作系统的 接口 例如 操作 特定的 硬 件 另一 些模块 则 提供 针对 特定 应用 领 域 的 接口 例如 万 维 网
 有 些模块 在所有 更新 和 移植 版本 的 python  中 可 用 另一 些模块 仅在 底层 系统 支持 或 要求 时 可 用 还有 些模块 则 仅当 编译 和 安装 python  时 选择 了 特定 配置 选项 时才 可 用
 本 手册 以 从 内 到 外 的顺序 组织 首先 描述 内置函数、 数据类型 和 异常 最后 是 根据 相关 性 进行 分组 的各种 模块
 这意味着 如果你 从 头 开始 阅读 本 手册 并 在 感到 厌 烦 时 跳 到 下 一章 你 仍 能 对 python  库 的 可 用 模块 和 所支持的 应用 领 域 有 个 大致 了解
 当然 你 并非 必须 如 同 读 小 说 一样 从 头 读 到 尾 你也可以 先 浏览 内容 目录 在 手册 开头 或 在 索引 在 手册 末尾 中查找 某个 特定 函数、 模块 或 条目
 最后 如果你 喜欢 随 意 学习 某个 主题 你可以 选择 一个 随机 页 码 参见 random  模块 并 读 上 一 两 小节
 无论 你想 以 怎样 的顺序 阅读 本 手册 还是 建议 先 从 内置函数 这 一章 开始 因为 本 手册 的其余 内容 都 需要 你 熟悉 其中的 基本 概念
 让我们 开始 吧
 可用性 注释
 如果 出现 可用性 unix  注释 意味着 相应 函数 通常 存在于 unix  系统中
 但 这 并 不保证 其 存在于 某个 特定的 操作系统 中
 如果没有 单独 说明 所有 注 明 可用性 unix  的 函数 都支持 基于 unix  核心 构建 的 mac  os  x  系统
rlcompleter  gnu  readline  的 补全函数
 源代码 librlcompleter
pyrlcompeleter  通过 补全 有效的 python  标识符 和关键字 定义了一个 适用于 readline  模块 的 补全函数
 当 此模块 在具有 可用的 readline  模块 的 unix  平台 被导入 一个 completer  实例 将 被 自动创建 并且它 的 complete  方法 将 设置为 readline  的补全 器
 示例 import  rlcompleter  import  readline  readline
rlcompleter  模块 是为了 使用 python  的 交互模式 而 设计 的
 除非 python  是通过 s  选项 运行 这个模块 总是 自动 地 被导入 且 配置 参见 readlineconfiguration
 在没有 readline  的 平台 此 模块定义 的 completer  类 仍然 可以用 于 自定义 行为
completer  对象
completer  对象具有 以下方法 completer
completetext  state  为 text  返回 第 state  项 补全
 如果指定 的 text  不包含 句 点 字符
 它 将根据 当前 main  builtins  和 保留 关键字 定义 于 keyword  模块 所定义的 名称 进行 补 全
 如果为 带有 句 点 的 名称 执行 调用 它 将 尝试 尽 量 求值 直到 最后一 部分 为止 而 不 产生 附带 影响 函数 不 会被求值 但 它可以 生成 对 getattr  的 调 用 并 通过 dir  函数来 匹配 剩余 部分
 在 对 表达式 求值 期间 引发 的 任何 异常 都会被 捕获、 静默 处理 并返回 none
abc  抽象基类
readline  gnu  readline  接口
readline  模块定义了 许多 方便 从 python  解释器 完成 和 读取 写入 历史文件 的 函数
 此模块 可以直接 使用 或 通过 支持 在 交互 提示符 下 完成 python  标识符 的 rlcompleter  模块 使用
 使用 此模块 进行 的 设置 会 同时 影响 解释器 的 交互 提示符 以及 内置 input  函数 提供的 提示符
 注解 底层 的 readline  库 api  可能 使用 libedit  库 来实现 而不是 gnu  readline
 在 macos  上 readline  模块 会 在运行时 检测 所使用的 是 哪个 库
libedit  所用的 配置文件 与 gnu  readline  的不同
 如果你 要 在程序中 载入 配置 字符串 你可以在 readline
doc  中 检测 文本 libedit  来 区 分 gnu  readline  和 libedit
 如果你 是 在 macos  上 使用 editlinelibedit  readline  模拟 则 位于 你 的 主 目录中 的 初始化 文件名 称为
 例如
editrc  中 的 以 下内容 将 开 启 vi  按键 绑定 以及 tab  补全 pythonbind  v  pythonbind  i  rlcomplete
 初始化 文件
 下列函数 与 初始化 文件 和 用户 配置 有关 readline
parseandbindstring  执行 在 string  参数 中 提供的 初始化 行
 此函数会 调用 底层库中的 rlparseandbind
readinitfilefilename  执行 一个 readline  初始化 文件
 默认 文件名 为 最近 所使用的 文件名
 此 函数 会 调用 底层库中的 rlreadinitfile
 行 缓冲区
 历史文件
 下列函数 会 在 历史文件 上 操作 readline
readhistoryfilefilename  载入 一个 readline  历史文件 并将其 添加到 历史 列表
 默认 文件名 为
 此函数会 调用 底层库中的 readhistory
writehistoryfilefilename  将 历史 列表 保存 为 readline  历史文件 覆盖 任何 现有 文件
 默认 文件名 为
 此函数会 调用 底层库中的 writehistory
appendhistoryfilenelements  filename  将 历史 列表 的 最后 nelements  项 添加到 历史文件
 默认 文件名 为
 文件 必须 已存在
 此函数会 调用 底层库中的 appendhistory
 此 函数 仅当 python  编译 包 带有 支持 此功能 的 库 版本 时才会 存 在
3
5 新版功能
sethistorylengthlength  设置或 返回 需要 保存 到 历史文件 的 行 数
 writehistoryfile  函数 会 通过调用 底层库中的 historytruncatefile  以 使用 该值 来 截 取 历史文 件
 负值 意味着 不 限制 历史文件 的大小
 历史 列表
 以下函数 会 在 全局 历史 列表 上 操作 readline
clearhistory  清除 当前 历史
 此函数会 调用 底层库 的 clearhistory
 此 python  函数 仅当 python  编译 包 带有 支持 此功能 的 库 版本 时才会 存 在
getcurrenthistorylength  返回 历史 列表 的当前 项 数
 此 函数 不同于 gethistorylength  后 者 是 返回 将 被写入 历史文件 的最大 行 数
readline
gethistoryitemindex  返回 序号 为 index  的 历史 条目 的当前 内容
 条目 序号 从 一 开始
 此 函数 会 调用 底层库中的 historyget
removehistoryitempos  从 历史 列表 中移除 指定 位置 上 的 历史 条目
 条目 位置 从 零 开始
 此函数会 调用 底层库中的 removehistory
replacehistoryitempos  line  将 指定 位置 上 的 历史 条目 替换为 line
 条目 位置 从 零 开始
 此函数会 调 用 底层库中的 replacehistoryentry
addhistoryline  将 line  添加到 历史 缓冲区 相当于 是 最近 输入 的 一 行
 此函数会 调用底 层库中的 addhistory
setautohistoryenabled  启用 或 禁用 当 通过 readline  读取 输入 时 自动 调用 addhistory
 enabled  参数 应 为 一个 布尔值 当 其 为真值 时 启用 自动 历史 当 其 为假值 时 禁用 自动 历史
3
6 新版功能
 启动 钩子
setstartuphookfunction  设置或 移除 底层库 的 rlstartuphook  回调 所 发起调用 的 函数
 如果指 定 了 function  它 将 被用作 新 的 钩子 函数 如果 省略或为 none  任何 已安装 的 函数 将 被移除
 钩子 函数 将 在 readline  打印 第一个 提示 信息 之前 不带参数 地 被调用
setpreinputhookfunction  设置或 移除 底层库 的 rlpreinputhook  回调 所 发起调用 的 函数
 如果 指定了 function  它 将 被用作 新 的 钩子 函数 如果 省略或为 none  任 何 已安装 的 函数 将 被移除
 钩子 函数 将 在 打印 第一个 提示 信息 之后、 readline  开始 读取 输入 字符 之前 不带参数 地 被调用
 此 函数 仅当 python  编译 包 带有 支持 此功能 的 库 版本 时才会 存 在
completion
 以下函数 与 自定义 单词 补全函数 的 实现 有关
 这通常 使用 tab  键 进行 操作 能够 提示 并 自动 补全 正 在 输入 的单词
 默认情况下 readline  设置为 由 rlcompleter  来 补全 交互模式 解释器 的 python  标识符
 如果 readline  模块 要 配合 自定义 的 补全函数 来 使用 则需要 设置 不同 的单词 分隔符
setcompleterfunction  设置或 移除 补全函数
 如果指定了 function  它 将 被用作 新 的 补全函数 如果 省略或为 none  任何 已安装 的 补全函数 将 被移除
 补全函数 的 调 用 形式 为 functiontext  state  其 中 state  为012
 直至 其 返回 一个 非 字符串 值
 它 应当 返回 下 一个 以 text  开头的 候 选 补全 内容
 已安装 的 补全函数 将 由 传递给 底层库中 rlcompletionmatches  的 entryfunc  回调函数 来 发起调用
 text  字符串 来自 于 底层库中 rlattemptedcompletionfunction  回调函数 的第一个 形参
getcompleter  获取 补全函数 如果没有 设置 补全函数 则返回 none
getcompletiontype  获取 正 在 尝试 的补全 类型
 此函数会 将 底层库中的 rlcompletiontype  变量 作为一个 整数 返回
getendidx  获取 补全 域 的 开始 和 结束 序号
 这些 序号 就是 传给 底层库中 rlattemptedcompletionfunction  回调函数 的 start  和 end  参数
getcompleterdelims  设置或 获取 补全 的单词 分隔符
 此 分隔符 确定 了 要 考虑 补全 的单词 的 开始 和 结束 位置 补全 域
 这些函数 会 访问 底层库 的 rlcompleterwordbreakcharacters  变量
setcompletiondisplaymatcheshookfunction  设置或 移除 补全 显示 函数
 如果指定了 function  它 将 被用作 新 的补全 显示 函数 如果 省略或为 none  任何 已安装 的补全 显示 函数 将 被移除
 此函数会 设置或 清除 底层库 的 rlcompletiondisplaymatcheshook  回 调 函数
 补全 显示 函数 会 在每次 需要 显示 匹配 项 时 以 functionsubstitution  matches  longestmatchlength  的形式 被 调用
 示例
 以下示例 演示了如何 使用 readline  模块 的 历史 读取或写入 函数来 自动 加载 和 保存 用户 主 目录 下 名为
pythonhistory  的 历史文件
 以下代码 通常 应当 在 交互 会话 期间 从 用户 的 pythonstartup  文件 自动 执行
writehistoryfile  histfile  此 代码 实际上 会 在 python  运行 于 交互模式 时 自动 运行 参见 readlineconfiguration
 以下示例 实现了 同样的 目标 但是 通过 只 添加新 历史 的方式来 支持 并 发 的 交互 会话
registersave  hlen  histfile  以下示例 扩展 了 code
interactiveconsole  类 以 支持 历史 保存 恢复
windows  系统 相关 模块
 本 章节 叙 述的模块 只 在 windows  平台 上可用
 msilib  read  and  write  microsoft  installer  files  database  objects  view  objects  summary  information  objects  record  objects  errors  cab  objects  directory  objects  相关 特性 gui  classes  precomputed  tables  msvcrt  来自 ms  vc  运行时 的有用 例 程 文件 操作 控制台 io  其他 函数 winreg  windows  注册表 访问 函数 常 数 hkey  constants  access  rights 64 bit  specific  value  types  registry  handle  objects  winsound  soundplaying  interface  for  windows
base 64 base 16 base 32 base 64 base 85 数据 编码
getpass  便 携 式 密码 输入 工具
 源代码 libgetpass
pygetpass  模块提供了 两个 函数 getpass
getpasspromptpassword  streamnone  提示 用户 输入 一个 密码 且不 会 回显
 用户 会 看到 字符串 prompt  作为 提示 其 默认值为 password 
 在 unix  上 如 有必要 提示 会 使用 替换 错 误 句柄 写入到 文件类对象 stream
 stream  默认 指向 控制 终端 devtty  如果不 可用则 指向 sys
stderr  此 参数 在 windows  上 会 被忽略
 如果 回显 自由 输入 不可用 则 getpass  将 回退 为 打印 一条 警告 消息 到 stream  并且 从 sys
stdin  读取 同时 发出 getpasswarning
 注解 如果你 从 idle  内部 调用 getpass  输入 可能是 在 你 启动 idle  的 终端 中 而非 在 idel  窗口 本身 中 完成
getpasswarning  一个 当 密码 输入 可能 被 回显 时 发出 的 userwarning  子类
getuser  返回 用户 的 登 录 名称
 此函数会 按 顺序 检查 环境变量 logname  user  lname  和 username  并返回其 中 第一个 被设置为 非 空字符串 的 值
 如果 均 未 设置 则 在 支持 pwd  模块 的 系统上 将 返回 来自 密码 数据库 的 登 录 名 否则将 引发一个 异常
 通常情况下 此 函数 应 优先 于 os
getlogin  使用
errno  标准 errno  系统 符号
 本 模块提供 标准 的 errno  系统 符号
 每个 符号 的值是 其 对应的 整数值
 符号 的 名称 和 描述 来自 linuxincludeerrno
h  应该是 非常 全 面 的
errorcode  提供 从 errno  值 到 底层 系统中 字符串 名称 的 映射 的字典
 例如 errno
eperm  映射 为 eperm 
 如果要 将 数字 的 错误 代码 转换为 错误信息 请使用 os
 在 下面的 列表中 当前 平台上 没有 使用 的符号 没有 被 本 模块定义
 已 定义 的符号 的 具体 列表可 参见 errno
 可用的 符号 包括 errno
eperm  操作 不 被 允许 errno
enoent  无 此 文件 或 目录 errno
esrch  无 此 进程 errno
eintr  系统调用 中断
 参见 此 错误 被 映射到 异常 interruptederror
eio  io  错误 errno
enxio  无 此 设备 或 地址 errno
e 2 big  参数列表 过 长 errno
enoexec  执行 格式 错误 errno
ebadf  错误 的 文件 号 errno
echild  没有 子进程 errno
eagain  重 试 errno
enomem  内存 不 足 errno
eacces  没有 权限 errno
efault  错误 的地址 errno
enotblk  需要 块 设备 errno
ebusy  设备 或 资源 忙 errno
eexist  文件 已存在 errno
exdev  跨 设备 链接 errno
enodev  无 此 设备 errno
enotdir  不 是 目录 errno
eisdir  是 目录 errno
einval  无效的 参数 errno
enfile  文件 表 溢出 errno
emfile  打开的文件 过 多 errno
enotty  不 是 打 字 机 errno
etxtbsy  文本 文件 忙 errno
efbig  文件 过 大 errno
enospc  设备 已 无 可 用 空间 errno
espipe  非 法 查找 errno
erofs  只读 文件系统 errno
emlink  链接 过 多 errno
epipe  管道 已 损坏 errno
edom  数学 参数 超出 函数 范围 errno
erange  数学 运算 结果 无法 表示 errno
edeadlk  将 发生 资源 死 锁 errno
enametoolong  文件名 过 长 errno
enolck  没有可用 的 记录 锁 errno
enosys  功能 未 实现 errno
enotempty  目录 非空 errno
eloop  遇到 过 多 的符号链接 errno
ewouldblock  操作 将 阻塞 errno
enomsg  没有 所需 类型 的 消息 errno
eidrm  标识符 被移除 errno
echrng  信 道 编号 超出 范围 errno
el 2 nsync  级别2 未 同步 errno
el 3 hlt  级别3 已 停止 errno
el 3 rst  级别3 重置 errno
elnrng  链接 编号 超出 范围 errno
eunatch  未 附加 协议 驱 动 errno
enocsi  没有可用 的 csi  结构 errno
el 2 hlt  级别2 已 停止 errno
ebade  无效的 交换 errno
ebadr  无效的 请求 描述符 errno
exfull  交换 已 满 errno
enoano  没有 阳 极 errno
ebadrqc  无效的 请求 码· errno
ebadslt  无效的 槽 位 errno
edeadlock  文件 锁定 死 锁 错误 errno
ebfont  错误 的 字 体 文件格式 errno
enostr  设备 不 是 流 errno
enodata  没有可用 的 数据 errno
etime  计时器 已 到 期 errno
enosr  流 资源 不 足 errno
enonet  机器 不 在 网络 上 errno
enopkg  包 未 安装 errno
eremote  对象 是 远程 的 errno
enolink  链接 已被 切 断 errno
eadv  广 告 错误 errno
esrmnt  挂 载 错误 errno
ecomm  发送 时 通 讯 错误 errno
eproto  协议 错误 errno
emultihop  已 尝试 多 跳 errno
edotdot  rfs  专属 错误 errno
ebadmsg  非 数据 消息 errno
eoverflow  值 相对于 已 定义 数据类型 过 大 errno
enotuniq  名称 在 网络 上 不 唯一 errno
ebadfd  文件描述符 处于 错误 状态 errno
eremchg  远 端 地址 已 改变 errno
elibacc  无法 访问 所需的 共享库 errno
elibbad  访问 已 损坏 的 共享库 errno
elibscn  a
out  中 的
lib  部分 已 损坏 errno
elibmax  尝试 链接 过 多 的 共享库 errno
elibexec  无法 直接 执行 共享库 errno
eilseq  非 法 字节 序列 errno
erestart  已 中断 系统调用 需要 重 启 errno
estrpipe  流 管道 错误 errno
eusers  用户 过 多 errno
enotsock  在 非 套接字 上 执行 套接字 操作 errno
edestaddrreq  需要 目标 地址 errno
emsgsize  消息 过 长 errno
eprototype  套接字 的 协议 类型 错误 errno
enoprotoopt  协议 不可用 errno
eprotonosupport  协议 不受支持 errno
esocktnosupport  套接字 类型 不受支持 errno
eopnotsupp  操作 在 传输 端 点 上 不受支持 errno
epfnosupport  协议 族 不受支持 errno
eafnosupport  地址 族 不受 协议 支持 errno
eaddrinuse  地址 已被 使用 errno
eaddrnotavail  无法 分配 要求 的地址 errno
enetdown  网络 已 断 开 errno
enetunreach  网络 不 可 达 errno
enetreset  网络 因 重置 而 断 开 连接 errno
econnaborted  软件 导致 连接 中 止 errno
econnreset  连接 被 对 方 重置 errno
enobufs  没有可用 的 缓冲区 空间 errno
eisconn  传输 端 点 已 连接 errno
enotconn  传输 端 点 未 连接 errno
eshutdown  传输 端 点 关闭 后 无法 发送 errno
etoomanyrefs  引用 过 多 无法 拼接 errno
etimedout  连接 超时 errno
econnrefused  连接 被 拒 errno
ehostdown  主机 已 关闭 errno
ehostunreach  没有 到 主机 的 路 由 errno
ealready  操作 已 在 进行 errno
einprogress  操作 正 在 进行 errno
estale  过 期 的 nfs  文件 句柄 errno
euclean  结构 需要 清理 errno
enotnam  不 是 xenix  命名 类型 文件 errno
enavail  没有可用 的 xenix  信 标 errno
eisnam  是 命名 类型 文件 errno
eremoteio  远程 io  错误 errno
edquot  超出 配 额
traceback  打印 或 检索 堆 栈回溯
 源代码 libtraceback
py  该 模块提供了一个 标准 接口 来 提取、 格式化 和 打印 python  程序 的 堆栈 跟踪 结果
 它 完全 模 仿 python  解释器 在 打印 堆栈 跟踪 结果 时 的 行为
 当 您 想要 在 程序 控制 下 打印 堆栈 跟踪 结果 时 例如 在 封装 解释器 时 这是 非常有用 的
 这个模块 使用 traceback  对象—— 这是 存储在 sys
lasttraceback  中 的 对象类型 变量 并 作为 sys
excinfo  的第三 项 被 返回
 这个模块 定义了以下函数 traceback
 在3
5 版更改 added  negative  limit  support
printexceptionetype  value  tb  limitnone  filenone  chaintrue  打印 回溯 对象 tb  到 file  的 异常 信息 和 整个 堆 栈回溯
 这 和 printtb  比 有以下 方面 不同 如果 tb  不 为 none  它 将打印 头 部 traceback  most  recent  call  last  it  prints  the  exception  etype  and  value  after  the  stack  trace  if  typevalue  is  syntaxerror  and  value  has  the  appropriate  format  it  prints  the  line  where  the  syntax  error  occurred  with  a  caret  indicating  the  approximate  position  of  the  error
 在3
5 版更改 the  etype  argument  is  ignored  and  inferred  from  the  type  of  value
 在3
5 版更改 added  negative  limit  support
 在3
5 版更改 the  etype  argument  is  ignored  and  inferred  from  the  type  of  value
3
4 新版功能
3
5 新版功能
3
5 新版功能
tracebackexception  objects
3
5 新版功能
stacksummary  objects
3
5 新版功能
 在3
6 版更改 long  sequences  of  repeated  frames  are  now  abbreviated
framesummary  objects
3
5 新版功能
traceback  examples
re  正则表达式 操作
 源代码 libre
py  这 个 模块提供了 与 perl  语言 类似 的正则表达式 匹配 操作
 模式 和 被 搜索 的 字符串 既 可以是 unicode  字符串 str  也可以是8 位 字节串 bytes
 但是 unicode  字符串 与8 位 字节串 不 能 混 用 也就是说 你 不能用 一个 字节串 模式 去 匹配 unicode  字符串 反 之 亦 然 类似地 当 进行 替换 操作 时 替换 字符串 的 类型 也 必须 与 所用的 模式 和 搜索 字符串 的 类型 一致
 正则表达式 使用 反斜杠 字符 来表示 特殊 形式 或 是 允许在 使用 特殊 字符 时 不 引发 它们的 特殊 含义
 这 会 与 python  的 字符串字面值 中 对 相同 字符 出 于 相同 目 的 的 用 法 产生 冲突 例如要 匹配 一个 反斜杠 字面值 用户可 能 必须 写成 来 作为 模式 字符串 因为 正则表达式 必须为 而 每个 反斜杠 在 普通 python  字符串字面值 中 又 必须 表示为
 而且 还要注意 在 python  的 字符串字面值 中使用的 反斜杠 如果有 任何 无效的 转义 序列 现在将 会产生 deprecationwarning  并 将 在未来 改 为 syntaxerror
 此行为 即使 对 于 正则表达式 来说 有效的 转义 字符 同样 会发生
 解决 办 法 是对于 正则表达式 样式 使用 python  的 原始字符串 表示法 在 带有 r  前缀 的 字符串字面值 中 反斜杠 不必 做 任何 特殊 处理
 因此 rn  表示 包含 和 n  两 个字符的 字符串 而 n  则表示 只包含 一个 换行符 的 字符串
 样式 在 python  代码中 通常 都会 使用 这种 原始字符串 表示法 来表示
 绝 大部分 正则表达式 操作 都 提供 为 模块 函数 和 方法 在 编译 正则表达式
 这些函数 是一个 捷 径 不需要 先 编译 一个 正则 对象 但是 损 失 了一些 优化 参数
 参见 第三方 模块 regex  提供了 与 标准库 re  模块 兼容的 api  接口 同时 还提供 了 额外的 功能 和 更 全 面 的 unicode  支持
 正则表达式 语法
 模块内容
 正则表达式 对象 正则 对象
 匹配对象
 匹配对象 总是 有 一个 布尔值 true
 如果没有 匹配 的话 match  和 search  返回 none  所 以 你可以 简单的 用 if  语句 来 判断 是否 匹配 match  re
searchpattern  string  if  match  processmatch  匹配对象 支持 以下方法 和 属性 match
expandtemplate  对 template  进行 反斜杠 转义 替换 并且 返回 就像 sub  方法 中 一样
 转义 如 同 n  被 转换成 合适的 字符 数字 引用12 和 命名 组合 g 1 gname  替换为 相应 组合 的内容
 在3
5 版更改 不匹配 的 组合 替换为 空字符串
 返回 一个 或者 多个 匹配 的 子 组
 如果 只有一个 参数 结果 就 是一个字符串 如果有 多个 参数 结果 就是 一个元组 每个 参数 对 应 一个 项 如果没有 参 数组1 默认 到0 整个 匹配 都 被 返回
 如果一个 组 n  参数 值 为0 相应的 返回值 就是 整个 匹配 字符串 如果 它是一个 范围1
99 结果 就是 相应的 括号 组 字符串
 如果一个 组 号 是 负数 或者 大于 样式 中定义的 组 数 一个 indexerror  索引 错误 就 raise
 如果一个 组 包含在 样式 的一部分 并 被 匹配 多次 就 返回 最后一个 匹配
 m  re
matchrw  w  isaac  newton  physicist  m
group 0 the  entire  match  isaac  newton  m
group 1 the  first  parenthesized  subgroup
 isaac  m
group 2 the  second  parenthesized  subgroup
 newton  m
group 12 multiple  arguments  give  us  a  tuple
 isaac  newton  如果 正则表达式 使用了 pname … 语法 groupn  参数 就 也可能 是 命 名 组合 的名字
 如果一个 字符串参数 在 样式 中 未定义 为 组合 名 一个 indexerror  就 raise
 一个 相对 复杂的 例子 m  re
matchrpfirstnamew  plastnamew  malcolm  reynolds  m
groupfirstname  malcolm  m
grouplastname  reynolds  命名 组合 同样 可以通过 索引 值 引用 m
group 1 malcolm  m
group 2 reynolds  如果一个 组 匹配 成功 多次 就 只 返回 最后一个 匹配 m  re
matchr
 a 1 b 2 c 3 matches 3 times
 m
group 1 returns  only  the  last  match
 c 3 match
getitemg  这 个 等价于 m
groupg
 这允许 更 方便的 引用 一个 匹配 m  re
matchrw  w  isaac  newton  physicist  m 0 the  entire  match  isaac  newton  m 1 the  first  parenthesized  subgroup
 isaac  m 2 the  second  parenthesized  subgroup
 newton 3
6 新版功能
match
groupsdefaultnone  返回 一个元组 包含所 有 匹配 的 子 组 在 样式 中出现的 从1 到 任意 多 的 组合
 default  参数 用 于 不 参 与 匹配 的 情况 默认为 none
 例如 m  re
matchrd
d 24
1632 m
groups 241632 如果我们 使 小数点 可选 那么 不 是所有 的 组 都会 参 与 到 匹配 当 中
 这些 组合 默认 会返回一个 none  除非 指定了 default  参数
 m  re
matchrd
d 24 m
groups  second  group  defaults  to  none
24 none  m
groups 0 now  the  second  group  defaults  to 0
240 match
groupdictdefaultnone  返回 一个字典 包含了 所有的 命名 子 组
key  就是 组 名
 default  参 数用于 不 参 与 匹配 的 组合 默认为 none
 例如 m  re
matchrpfirstnamew  plastnamew  malcolm  reynolds  m
groupdict  firstname  malcolm  lastname  reynoldsmatch
startgroupmatch
endgroup  返回 group  匹配 到 的 字 串 的 开始 和 结束 标 号
group  默认为0 意 思 是 整个 匹配 的 子 串
 如果 group  存 在 但 未 产生 匹配 就 返回1
 对于一个 匹配对象 m  和 一个 未 参 与 匹配 的 组 g  组 g  等价于 m
groupg  产生 的 匹配 是 m
endg  注意 m
startgroup  将 会 等于 m
endgroup  如果 group  匹配 一 个 空字符串 的话
 比如 在 m  re
searchbc  cba  之后 m
start 0 为1 m
end 0 为2 m
start 1 和 m
end 1 都 是2 m
start 2 raise  一个 indexerror  例外
 这个例子 会 从 email  地址 中移除 掉 removethis  email  tonytiremovethisger
spangroup  对于一个 匹配 m  返回 一个 二 元组 m
startgroup  m
endgroup 
 注意如果 group  没有 在这个 匹配 中 就 返回11
group  默认为0 就是 整个 匹配
pos  pos  的值会 传递给 search  或 match  的 方法 a  正则 对象
 这 个 是 正则 引擎 开始 在 字符串 搜索 一个 匹配 的 索引 位置
endpos  endpos  的值会 传递给 search  或 match  的 方法 a  正则 对象
 这 个 是 正则 引擎 停止 在 字符串 搜索 一个 匹配 的 索引 位置
lastindex  捕获 组 的最后一个 匹配 的 整数 索引 值 或者 none  如果没有 匹配 产生 的话
 比如 对 于 字符串 ab  表达式 ab  ab  和 ab  将 得到 lastindex 1 而 ab  会 得到 lastindex 2
lastgroup  最后一个 匹配 的 命名 组 名 字 或者 none  如果没有 产生 匹配 的话
re  返回 产生 这 个实例 的 正则 对象 这 个实例 是 由 正则 对象 的 match  或 search  方法 产生 的
string  传递 到 match  或 search  的 字符串
 在3
7 版更改 添加了 对 copy
copy  和 copy
deepcopy  的 支持
 匹配对象 被 看 作 是 原子 性 的
 正则表达式 例子
 检查 对 子
 在 这个例子 里 我们 使用以下 辅助函数 来 更好地 显示 匹配对象 def  displaymatchmatch  if  match  is  none  return  none  return  match  r  groupsr  match
groups  假设 你 在 写 一个 扑 克 程序 一个 玩 家 的 一 手 牌 为 五 个字符的 串 每个 字符 表示一 张 牌 a  就是 a  k  k  q  q  j  j  t  为102 到9 表示2 到9
 要 看 给定的 字符串 是否 有效 我们可以 按照 以 下 步骤 valid  re
 match 727 ak  groups  最后一 手 牌727 ak  包含了 一个 对 子 或者 两 张 同样 数值 的 牌
 要 用 正则表达式 匹配 它应该 使用 向后 引用 如 下 pair  re
 match 354 aa  groupsa  要 找 出 对 子 由 什么 牌 组成 开发者 可以 按照 下面的 方式来 使用 匹配对象 的 group  方法 pair  re
 模拟 scanf
python  目前 没有 一个类似 c  函数 scanf  的替代 品
 正则表达式 通常 比 scanf  格式字符串 要 更 强大 一些 但也 带 来 更多 复杂 性
 下面的 表 格 提供了 scanf  格式 符 和 正则表达式 大致 相同 的 映射
 scanf  格式 符 正则表达式 c 
deed  i 0 xxdafaf 007 d  o 07 s  s  u  d  x  x 0 xxdafaf  从 文件名 和 数字 提取 字符串 usrsbinsendmail 0 errors 4 warnings  你可以使用 scanf  格式化 s  d  errors  d  warnings  等价 的正则表达式 是 s  d  errors  d  warnings
search  vs  match
 制 作 一个 电 话 本
split  将 字符串 用 参数传递 的 样式 分隔 开
 这个方法 对 于 转换 文本 数据 到 易 读 而且 容易 修改 的 数据结构 是 很有用 的 如 下面的例子 证明
 首先 这里 是 输入
 它通常 来自 一个 文件 这里 我们 使用 三 重 引号 字符串 语法 text  ross  mcfluff 834
4584919 park  place  条目 用 一个 或者 多个 换行符 分开
 现 在 我们将 字符串 转换为 一个列表 每个 非空 行 都有一个 条目 entries  re
4584919 park  place  最终 将每个 条目 分 割 为 一个 由 名 字、 姓 氏、 电 话 号 码 和 地址 组成的列表
 我们 为 split  使用了 maxsplit  形参 因为 地址 中包含 有 被 我们 作为 分 割 模式 的 空格符 re
4584919 park  place  样式 匹配 姓 后面 的 冒号 因此它 不 出现在 结果 列表中
 如果 maxsplit  设置为4 我们 还可以 从 地址 中 获取 到 房 间 号 re
 文 字 整 理
sub  替换 字符串 中出现的 样式 的 每 一个实例
 这个例子 证明 了 使用 sub  来 整 理 文 字 或者 随机 化 每个 字符 的 位置 除了 首 位 和 末尾 字符 def  replm 
 查找 所有 副 词
findall  匹配 样式 所有 的 出现 不仅 是 像 search  中 的第一个 匹配
 比如 如果一个 作者 希望 找到 文 字 中的所有 副 词 他 可能会 按照 以下方法 用 findall  text  he  was  carefully  disguised  but  captured  quickly  by  police
 查找 所有的 副 词 及其 位置
 如果需要 匹配 样式 的更多信息 finditer  可以 起 到 作 用 它 提供了 匹配对象 作为 返回值 而不是 字符串
 继续 上面的例子 如果一个 作者 希望 找到 所有 副 词 和 它 的 位置 可以 按照 下面 方法 使用 finditer  text  he  was  carefully  disguised  but  captured  quickly  by  police
 原始字符串 标记
 原始字符串 记 法 rtext  保持 正则表达式 正常
 否则 每个 正则 式 里 的 反斜杠 都必须 前缀 一个 反斜杠 来 转义
 比如 下面 两 行 代码 功能 就是 完全 一致的 re
match  object  span 04 match  ff  当 需要 匹配 一个字符 反斜杠 它必须 在 正则表达式 中 转义
 在 原始字符串 记 法 就是 r
 否则 就必须 用 来表示 同样的 意 思 re
 写 一个 词法分析 器
 一个 词法 器 或 词法分析 器 分析 字符串 并 分 类 成 目录 组
 这是 写 一个 编译器 或 解释器 的第一 步
 文 字 目录 是 由 正则表达式 指定 的
 这 个 技术 是通过 将 这些 样式 合并 为 一个 主 正则 式 并且 循环 匹配 来实现 的 from  typing  import  namedtuple  import  re  class  tokennamedtuple  type  str  value  str  line  int  column  int  def  tokenizecode  keywords  if  then  endif  for  next  gosub  return  tokenspecification  number  rd
05 endif  for  token  in  tokenizestatements  printtoken  该 词法 器 产生 以 下 的 输出 tokentypeif  valueif  line 2 column 4 tokentypeid  valuequantity  line 2 column 7 tokentypethen  valuethen  line 2 column 16 tokentypeid  valuetotal  line 3 column 8 tokentypeassign  value  line 3 column 14 tokentypeid  valuetotal  line 3 column 17 tokentypeop  value  line 3 column 23 tokentypeid  valueprice  line 3 column 25 tokentypeop  value  line 3 column 31 tokentypeid  valuequantity  line 3 column 33 tokentypeend  value  line 3 column 41 tokentypeid  valuetax  line 4 column 8 tokentypeassign  value  line 4 column 12 tokentypeid  valueprice  line 4 column 15 tokentypeop  value  line 4 column 21 tokentypenumber  value 0
 该 书 的第三 版 不再 包含 python  但 第一 版 极 详细 地 覆盖 了 正则表达式 模式 串 的 编写
htmlentities  html  一般 实体 的 定义
mailcap  mailcap  文件 处理
 源代码 libmailcap
pymailcap  文件 可用来 配置 支持 mime  的应用 例如 邮件 阅读 器 和 web  浏览器 如何 响应 具有 不同 mime  类型 的 文件
 mailcap  这 个 名称 源 自 短 语 mailcapability
 例如 一个 mailcap  文件 可能包含 videompeg  xmpeg  s  这样的 行
 然后 如果 用户 遇到 mime  类型 为 videompeg  的 邮件 消息 或 web  文档 时 s  将 被替换为 一个 文件名 通常是 一个 临时 文件 并且 将自动 启动 xmpeg  程序来 查看 该文件
mailcap  格式 的 文档 见 rfc 1524 a  user  agent  configurationmechanism  for  multimedia  mail  format  information  但 它并不 是一个 因 特 网 标准
 不 过 mailcap  文件 在大多数 unix  系统上 都 受到 支持
findmatchcaps  mimetype  keyview  filenamedevnull  plist  返回 一个2 元组其 中 第一个 元素 是 包含所 要执行 命令 的 字符串 它可被 传 递给 os
system  第二个 元素 是 对应于 给定 mime  类型 的 mailcap  条 目
 如果 找不到 匹配 的 mime  类型 则 将 返回 none  none
 key  是 所需 字段 的 名称 它 代表 要执行 的 活动 类型 默认值 是 view  因 为 在 最 通常 的情况下 你 只是 想要 查看 mime  类型 数据 的 正 文
 其他可 能 的 值 还有 compose  和 edit  分别 用 于 想要 创建 给定 mime  类型 正 文 或 修改 现有 正 文 数据 的 情况
 请参阅 rfc 1524 获取 这些 字段 的完整 列表
 filename  是 在命令行中 用来 替换 s  的文件名 默认值 devnull  几乎 肯 定 不 是 你想要 的因此 通常 你 要 通过 指定一个 文件名 来 重载 它
 plist  可以 是一个包含 命名 形参 的 列表 默认值 只是一 个空列表
 列表中 的 每个 条目 必须为 包含 形参 名称 的 字符串、 等于 号 以及 形参 的 值
 mailcap  条目 可以包含 形 如 foo  的 命名 形参 它 将 由 名为 foo  的 形 参 的 值 所 替换
 例如如果 命令行 showpartial  id  number  total  是 在 一个 mailcap  文件 中 并且 plist  被设为 id 1 number 2 total 3 则 结果 命令行 将 为 showpartial 123
 在 mailcap  文件 中 可以指定 可选的 test  字段 来 检测 某些 外部 条件 例 如 所使用的 机器 架构 或 窗口 系统 来确定 是否 要 应用 mailcap  行
 findmatch  将自动 检查 此 类 条件 并 在 检查 未 通过 时 跳过 条目
getcaps  返回 一个 将 mime  类型 映射到 mailcap  文件 条目 列表 的字典
 此 字典 必须 被传给 findmatch  函数
 条目 会 被 存储为 字典 列表 但 并 不需要 了解 此 表示形式 的 细节
 此 信息 来自 在 系统 中找到 的 所有 mailcap  文件
 用户 的 mailcap  文件 home
mailcap  中 的 设置 将 覆盖 系统 mailcap  文件 etcmailcap  usretcmailcap  和 usrlocaletcmailcap  中 的 设置
 一个 用法示例 import  mailcap  d  mailcap
pickletools  pickle  开发者 工具集
 源代码 libpickletools
py  此 模块包含 与 pickle  模块 内部 细节 有关 的多个 常量 一些 关于 具体实现 的 详细 注释 以及 一些 能够 分析 封存 数据 的有用 函数
 此模块 的内容 对 需要 操作 pickle  的 python  核心 开发者 来说 很有用 处 pickle  的 一般 用户 则 可能会 感 觉 pickletools  模块 与 他们 无 关
 命令行 语法
3
2 新版功能
 当 从 命令行 发起调用 时 python  m  pickletools  将 对 一个 或更多 pickle  文件 的内容 进行 拆 解
 请注意 如果你 查看 pickle  中 保存 的 python  对象 而非 pickle  格式 的 细节 你 可能需要 改 用 m  pickle
 但是 当 你想 检查 的 pickle  文件 来自 某个 不受 信 任 的 源 时 m  pickletools  是 更 安全 的 选择 因为它 不会执行 pickle  字节码
 例如 对于一个 封存 在 文件 x
pickle  中 的 元组12 python  m  pickle  x
 命令行选项
a  annotate  使用 简短 的 操作码 描述 来 标注 每一 行
o  outputfile  输出 应当 写入到 的 文件 名称
l  indentlevelnum  一个新的 mark  层级 所需 缩进 的空格 数
m  memo  当 反汇编 多个 对象 时 保留 各个 反汇编 的 备 忘 记录
p  preamblepreamble  当 指定一个 以 上 的 pickle  文件 时 在每次 反汇编 之前 打印 给定的 前 言
 编程 接口
dispickle  outnone  memonone  indentlevel 4 annotate 0 将 pickle  的符号 化 反汇编 数据 输出 到 文件类对象 out  默认为 sys
 pickle  可以 是一个字符串 或 一个 文件类对象
 memo  可以是 一个 将 被用作 pickle  的 备 忘 记录 的 python  字典 它 可被用来 对 由 同一 封存 器 创建 的多个 封存 对象 执行 反汇编
 由 mark  操作码 指明 的 每个 连续 级别 将 会 缩进 indentlevel  个空格
 如果为 annotate  指定了 一 个 非零 值 则 输出 中的每个 操作码 将 以 一个 简短 描述 来 标注
 annotate  的值会 被用作 标注 所 应 开始 的 列 的 提示
3
2 新版功能 annotate  参数
genopspickle  提供 包含 pickle  中所有 操作码 的 iterator  返回 一个 opcode  arg  pos  三 元组 的 序列
 opcode  是 opcodeinfo  类 的 一个实例 arg  是 python  对象 形式 的 opcode  参数 的 已 解码 值 pos  是 opcode  所在的 位置
 pickle  可以 是一个字符串 或 一个 文件类对象
optimizepicklestring  在 消除 未 使用 的 put  操作码 之后 返回一个新的 等效 pickle  字符串
 优 化 后 的 pickle  将 更 为 简短 耗 费 更 为 的 传输 时间 要求 更 少 的 存储 空间 并 能 更 高效 地 解封
imghdr  推 测 图像 类型
 源代码 libimghdr
pyimghdr  模块 推 测 文件 或 字节 流 中 的 图像 的 类型
imghdr  模块定义了以下 类型 imghdr
whatfilename  hnone  测试 包含在 命名为 filename  的 文件中的 图像 数据 并且 返回 描述 此 类 图 片 的 字符串
 如果可选 的 h  被 提供 filename  将被忽略 并且 h  包 含 将 被 测试 的 二进制流
 在3
6 版更改 接受一个 类 路径对象
 接下来 的 图像 类型 是 可 识别 的返回值 来自 what  值 图像 格式 rgb  sgi  图像 库 文件 gif  gif 87 a  和89 a  文件 pbm  便 携 式 位 图 文件 pgm  便 携 式 灰 度 图 文件 ppm  便 携 式 像 素 表 文件 tiff  tiff  文件 rast  sun  光 栅 文件 xbm  x  位 图 文件 jpeg  jfif  或 exif  格式 的 jpeg  数据 bmp  bmp  文件 png  便 携 式 网络 图像 webp  webp  文件 exr  openexr  文件3
5 新版功能 exr  和 webp  格式 被添加
 你可以 扩展 此 imghdr  可以被 追 加 的 这 个 变量 识别 的 文件格式 的 列表 imghdr
tests  执行 单个 测试 的 函数 列表
 每个 函数 都有 两个参数 字节 流 和 类似 开 放 文件 的 对象
 当 what  用 字节 流 调用时 类 文件对象 将 是 none
 如果 测试 成功 这 个 测试 函数 应当 返回 一个 描述 图像 类型 的 字符串 否则返 回 none
 示例 import  imghdr  imghdr
argparse  命令行选项、 参数 和 子 命令 解析器
3
2 新版功能
 源代码 libargparse
py  教程 此 页面 包含 该 api  的 参考 信息
 有关 python  命令行 解析 更 细 致 的 介绍 请参阅 argparse  教程
argparse  模块 可以让 人 轻松 编写 用户 友 好 的 命令行接口
 程序 定义 它需要 的 参数 然后 argparse  将 弄 清 如何从 sys
argv  解析 出 那些 参数
argparse  模块还 会自动 生成 帮助 和 使用 手册 并 在 用户 给 程序 传入 无效 参数 时 报 出 错误信息
 示例
 以下代码 是一个 python  程序 它 获取 一个整数 列表并 计算 总 和 或者 最大 值 import  argparse  parser  argparse
integers  假设 上面的 python  代码 保存在 名为 prog
py  的 文件 中 它可以 在命令行 运行 并 提供 有用的 帮助消息 python  prog
 positional  arguments  n  an  integer  for  the  accumulator  optional  arguments  h  help  show  this  help  message  and  exit  sum  sum  the  integers  default  find  the  max  当使用 适当的 参数 运行 时它会 输出 命令行 传入 整数 的 总 和 或者 最大 值 python  prog
py 1234 sum 10 如果 传入 无效 参数则 会 报 出 错误 python  prog
py  error  argument  n  invalid  int  value  a  以 下 部分 将 引 导 你 完成 这 个 示例
 创建一个 解析器
 使用 argparse  的第一 步 是 创建一个 argumentparser  对象 parser  argparse
argumentparser  对象 包含 将 命令行 解析 成 python  数据类型 所需的 全部 信息
 添加 参数
 给 一个 argumentparser  添加 程序 参数 信息 是 通过调用 addargument  方法 完成 的
 通常 这些 调用 指定 argumentparser  如何 获取 命令行 字符串 并 将其转换为 对象
 这些 信息 在 parseargs  调用时 被 存储 和 使用
 例如 parser
 helpsum  the  integers  default  find  the  max  稍后 调用 parseargs  将返回一个 具有 integers  和 accumulate  两个 属性 的 对象
integers  属性 将 是一个包含 一个或多个 整数 的 列表 而 accumulate  属性 当 命令行 中 指定了 sum  参数 时 将 是 sum  函数 否则 则 是 max  函数
 解析 参数
argumentparser  通过 parseargs  方法 解析 参数
 它 将 检查 命令行 把 每个 参数 转换为 适当的 类型 然后 调用 相应的 操作
 在大多数情况下 这意味着 一个简单的 namespace  对象 将 从 命令行参数 中 解析 出 的 属性 构建 parser
parseargssum 7142 namespaceaccumulatebuiltin  function  sum  integers 7142 在 脚本 中 通常 parseargs  会 被 不带参数 调用 而 argumentparser  将自动 从 sys
argv  中 确定 命令行参数
argumentparser  对象
prog
 默认情况下 argumentparser  对象 使用 sys
argv 0 来确定 如何在 帮助消息 中显示 程序 名称
 这 一 默认值 几乎 总是 可 取 的 因为它 将 使 帮助消息 与 从 命令行 调用 此 程序 的方式 相匹配
 例如 对 于 有 如 下 代码 的 名为 myprogram
py  的 文件 import  argparse  parser  argparse
parseargs  该 程序 的 帮助 信息 将显示 myprogram
py  作为 程序 名称 无论 程序 从 何处 被调用 python  myprogram
py  h  foo  foo  optional  arguments  h  help  show  this  help  message  and  exit  foo  foo  foo  help  要 更改 这样的 默认行为 可以使用 prog  参数为 argumentparser  提供 另一个 值 parser  argparse
printhelp  usage  myprogram  h  optional  arguments  h  help  show  this  help  message  and  exit  需要 注意 的 是 无论是 从 sys
argv 0 或 是 从 prog  参数 确定 的 程序 名称 都可以 在 帮助消息 里 通过 progs  格式 串 来 引用
usage
 默认情况下 argumentparser  根据 它包含 的 参数 来构建 用 法 消息 parser  argparse
 positional  arguments  bar  bar  help  optional  arguments  h  help  show  this  help  message  and  exit  foo  foo  foo  help  可以通过 usage  关键字参数 覆盖 这 一 默认 消息 parser  argparse
printhelp  usage  prog  options  positional  arguments  bar  bar  help  optional  arguments  h  help  show  this  help  message  and  exit  foo  foo  foo  help  在 用 法 消息 中 可以使用 progs  格式 说明符 来 填 入 程序 名称
description
 大多数 对 argumentparser  构造 方法 的 调用 都会 使用 description  关键字参数
 这 个参数 简 要 描述 这 个 程度 做 什么 以及 怎 么 做
 在 帮助消息 中 这 个 描述 会显示 在命令行 用 法 字符串 和 各种 参数 的 帮助消息 之间 parser  argparse
py  h  a  foo  that  bars  optional  arguments  h  help  show  this  help  message  and  exit  在默认情况下 description  将 被 换行 以便 适 应 给定的 空间
 如果 想 改变 这种 行为 见 formatterclass  参数
epilog
parents
formatterclass
prefixchars
fromfileprefixchars
 有 些 时候 先 举 个例子 当 处理 一个 特别 长 的参数列表 的时候 把它 存 入一个 文件 中 而不是 在命令行 打 出来 会 很 有意义
 如果 fromfileprefixchars  参数 提供给 argumentparser  构造函数 之后 所有 类型 的 字符 的 参数 都会被 当 成 文件 处理 并且 会 被 文件 包含的 参数 替代
 举 个 栗 子 with  openargs
txt  namespacefbar  从 文件 读取 的 参数 在默认情况下 必须 一个 一 行 但是 可 参见 convertarglinetoargs  并且 它们 被视为 与 命令行 上 的 原始 文件 引用 参数 位于 同一 位置
 所 以 在 以 上 例子中 f  foo  args
txt  的 表示 和 f  foo  f  bar  的 表示 相同
fromfileprefixchars  参数 默认为 none  意味着 参数 不 会 被当作 文件 对 待
argumentdefault
allowabbrev
 正 常情况下 当你 向 argumentparser  的 parseargs  方法 传入一个 参数列表 时它会 recognizes  abbreviations
 这 个 特性 可以 设置 allowabbrev  为 false  来 关闭 parser  argparse
parseargsfoon  usage  prog  h  foobar  foonley  prog  error  unrecognized  arguments  foon 3
5 新版功能
conflicthandler
addhelp
exitonerror
 正 常情况下 当你 向 argumentparser  的 parseargs  方法 传入一个 无效的 参数列表 时 它 将 会 退出 并 发出 错误信息
 如果 用户 想要 手动 捕获 错误 可通过 将 exitonerror  设 为 false  来 启用 该 特性 parser  argparse
 catching  an  argumenterror 3
9 新版功能
addargument  方法
name  or  flags
addargument  方法 必须 知道 它 是否 是一个 选项 例如 f  或 foo  或 是一个 位置参数 例如 一 组 文件名
 第一个 传递给 addargument  的 参数必须是 一系列 flags  或者 是一个简单的 参数 名
 例如 可以 选项 可以被 这样 创建 parser
addargumentf  foo  而 位置参数 可以 这 么 创建 parser
addargumentbar  当 parseargs  被调用 选项 会 以 前缀 识别 剩 下 的 参数则 会 被 假定 为 位置参数 parser  argparse
action
argumentparser  对象 将 命令行参数 与 动作 相关联
 这些 动作 可以 做 与 它们 相关联 的 命令行参数 的 任何 事 尽管 大多数 动作 只是 简单的 向 parseargs  返回的对象 上 添加 属性
action  命名 参数指定 了这个 命令行参数 应当 如何处理
 供 应 的 动作 有 store  存储 参数 的 值
 这是 默认 的 动作
 例如 parser  argparse
split  namespacefoo 1 storeconst  存储 被 const  命名 参数指定 的 值
 storeconst  动 作 通常用 在 选项 中 来指定 一些 标志
 例如 parser  argparse
parseargsfoo  namespacefoo 42 storetrue  and  storefalse  这些 是 storeconst  分别 用 作 存储 true  和 false  值 的 特殊 用 例
 另外 它们的 默认值 分别 为 false  和 true
 例如 parser  argparse
split  namespacefootrue  barfalse  baztrue  append  存储 一个列表 并且 将每个 参数 值 追 加到 列表中
 在 允许 多次 使用 选项 时 很有用
 例如 parser  argparse
split  namespacefoo 12 appendconst  这 存储 一个列表 并 将 const  命名 参数指定 的 值 追 加到 列表中
 注意 const  命名 参数 默认为 none
appendconst  动 作 一般 在多个 参数 需要 在同一 列表中 存储 常 数 时 会 有 用
 例如 parser  argparse
split  namespacetypesclass  str  class  int  count  计算 一个 关键字参数 出现的 数 目 或 次 数
 例如 对于一个 增 长 的 详情 等级 来说 有 用 parser  argparse
parseargsvvv  namespaceverbose 3 请注意 default  将 为 none  除非 显式地 设 为0
 help  打印 所有 当前 解析器 中 的 选项 和 参数 的完整 帮助 信息 然后 退出
 默认情况下 一个 help  动作 会 被 自动 加入 解析器
 关于 输出 是如何 创建 的 参 与 argumentparser
 version  期望 有 一个 version  命名 参数 在 addargument  调用 中 并 打印 版本 信息 并 在 调用 后 退出 import  argparse  parser  argparse
0 extend  这 会 存储 一个列表 并 将每个 参数 值 加入 到 列表中
 示例 用 法 parser  argparse
parseargsfoo  f 1 foo  f 2 f 3 f 4 namespacefoof 1 f 2 f 3 f 43
8 新版功能
 你 还可以 通过 传递 一个 action  子类 或 实现 相同 接口 的 其他对象 来指定 任意 操作
 booleanoptionalaction  在 argparse  中 可 用 并 会 添加 对 布尔 型 操作 例如 foo  和 nofoo  的 支持 import  argparse  parser  argparse
parseargsnofoo  namespacefoofalse  创建 自定义 动作 的 推荐 方式是 扩展 action  重载 call  方法 以及 可选的 init  和 formatusage  方法
 一个 自定义 动作 的 例子 class  fooactionargparse
split  namespacebarnone  foonone 1 none  namespacebar 1 foonone 2 foo  args  namespacebar 1 foo 2 更多 描述 见 action
nargs
const
addargument  的 const  参数 用 于 保存 不 从 命令行 中读取 但 被 各种 argumentparser  动作 需求 的 常 数值
 最 常用的 两 例 为 当 addargument  通过 actionstoreconst  或 actionappendconst  调用时
 这些 动作 将 const  值 添加到 parseargs  返回的对象 的 属性 中
 在 action  的描述 中 查看 案 例
 当 addargument  通过 选项 例如 f  或 foo  调用 并且 nargs  时
 这 会创建一个 可以 跟 随 零 个 或 一个 命令行参数 的 选项
 当 解 析 命令行 时如果 选项 后 没有 参数则 将 用 const  代替
 在 nargs  描述 中 查看 案 例
 对 storeconst  和 appendconst  动作 const  命名 参数必须 给出
 对 其他 动作 默认为 none
default
type
choices
 某些 命令行参数 应当 从 一 组 受限 值 中选择
 这 可通过 将 一个 容器对象 作为 choices  关键字参数 传给 addargument  来处理
 当 执行 命令行 解析 时 参数 值 将 被 检查 如果参数 不 是 可接受 的 值 之一 就 将显示 错误消息 parser  argparse
py  error  argument  move  invalid  choice  fire  choose  from  rock  paper  scissors  请注意 choices  容器 包含的 内容 会 在 执行 任意 type  转换 之后 被 检查 因此 choices  容器 中 对象的类型 应当 与 指定 的 type  相匹配 parser  argparse
py  error  argument  door  invalid  choice 4 choose  from 123 任何 容器 都 可 作为 choices  值 传入 因此 list  对象 set  对象 以及 自定义 容器 都 是 受支持的
 这 也 包括 enum
enum  该对象 可被用来 限制 参数 的 选项 如果我们 重 用 之前的 石 头 布 剪 刀 游 戏 示例 就可以 写成 这样 from  enum  import  enum  class  gamemoveenum 
required
 通常 argparse  模块 会 认为 f  和 bar  等 旗标 是 指明 可选的 参数 它们 总是 可以 在命令行中 被忽略
 要 让 一个 选项 成为 必需 的 则 可以将 true  作为 required  关键字参数 传给 addargument  parser  argparse
parseargs  usage  h  foo  foo  error  the  following  arguments  are  required  foo  如 这个例子 所示 如果一个 选项 被 标记为 required  则 当 该 选项 未 在命令行中 出现 时 parseargs  将 会 报告 一个错误
 注解 必需 的 选项 通常 被认为 是 不适 宜 的因为 用户 会 预期 options  都 是 可选 的 因此在 可能 的情况下 应当 避免 使用它们
help
metavar
 当 argumentparser  生成 帮助消息 时 它需要 用 某 种方式来 引用 每个 预期的 参数
 默认情况下 argumentparser  对象 使用 dest  值 作为 每个 对象 的 name
 默认情况下 对 于 位置参数 动作 dest  值 将 被 直接使用 而 对 于 可选参数 动作 dest  值 将 被 转 为 大写 形式
 因此 一个 位置参数 destbar  的 引用 形式 将 为 bar
 一个带有 单独 命令行参数 的 可选参数 foo  的 引用 形式 将 为 foo
 示例 如 下 parser  argparse
printhelp  usage  h  foo  foo  bar  positional  arguments  bar  optional  arguments  h  help  show  this  help  message  and  exit  foo  foo  可以使用 metavar  来 指定一个 替代 名称 parser  argparse
printhelp  usage  h  foo  yyy  xxx  positional  arguments  xxx  optional  arguments  h  help  show  this  help  message  and  exit  foo  yyy  请注意 metavar  仅 改变 显示 的 名称 parseargs  对象 的 属性 名称 仍然 会 由 dest  值 确定
 不同的 nargs  值 可能导致 metavar  被 多次 使用
 提供一个 元组 给 metavar  即 为每个 参数指定 不同的 显示 信息 parser  argparse
dest
 大多数 argumentparser  动作 会 添加 一些 值 作为 parseargs  所 返回 对象 的 一个 属性
 该 属性 的 名称 由 addargument  的 dest  关键字参数 确定
 对 于 位置参数 动作 dest  通常会 作为 addargument  的 第一个参数 提供 parser  argparse
parseargsxxx  namespacebarxxx  对 于 可选参数 动作 dest  的 值 通常 取 自 选项 字符串
 argumentparser  会通过 接受 第一个 长 选项 字符串 并 去 掉 开头的 字符串 来生成 dest  的 值
 如果没有 提供 长 选项 字符串 则 dest  将 通过 接受 第一个 短 选项 字符串 并 去 掉 开头的 字符 来 获得
 任何 内部 的 字符 都 将 被转换为 字符 以 确保 字符串 是有效的 属性 名称
 下面的例子 显示了 这种 行为 parser  argparse
split  namespacefoobar 1 x 2 dest  允许 提供 自定义 属性 名称 parser  argparse
action  类
parseargs  方法
parseargsargsnone  namespacenone  将 参数 字符串 转换为 对象 并 将其设 为 命名空间 的 属性
 返回 带有 成员的 命名 空间
 之前 对 addargument  的 调用 决定 了 哪些 对象 被创建 以及 它们 如何 被赋 值
 请参阅 addargument  的 文档 了解详情
 args  要 解析 的 字符串列表
 默认值 是 从 sys
argv  获取
 namespace  用于获取 属性 的 对象
 默认值 是 一个新的 空 namespace  对象
 选项 值 语法
parseargs  方法 支持 多种 指定 选项 值 的方式 如果它 接受 选项 的话
 在 最简单 的情况下 选项 和 它 的 值 是作为 两个 单独 参数 传入的 parser  argparse
parseargsfoo  foo  namespacefoofoo  xnone  对 于 长 选项 名称 长度 超过 一个字符 的 选项 选项 和 值 也 可以作为 单个 命令行参数 传入 使用 分隔 它们 即可 parser
parseargsfoofoo  namespacefoofoo  xnone  对 于 短 选项 长度 只有一个 字符 的 选项 选项 和 它 的 值可以 拼接 在一起 parser
parseargsxx  namespacefoonone  xx  有 些 短 选项 可以使用 单个 前缀 来进行 合并 如果 仅 有 最后一个 选项 或 没有任何 选项 需要 值 的话 parser  argparse
 无效的 参数
 在 解析 命令行 时 parseargs  会 检测 多种 错误 包括 有 歧义 的 选项、 无效的 类型、 无效的 选项、 错误 的 位置参数 个 数 等等
 当 遇到 这种 错误时 它 将 退出 并 打印出 错误 文本 同时 附带 用 法 消息 parser  argparse
 包含 的 参数
 参数 缩 写 前缀 匹配
parseargs  方法 在默认情况下 允许 将 长 选项 缩 写 为 前缀 如果 缩 写 无 歧义 即 前缀 与 一个 特定 选项 相匹配 的话 parser  argparse
split  usage  prog  h  bacon  bacon  badger  badger  prog  error  ambiguous  option  ba  could  match  badger  bacon  可 产生一个 以 上 选项 的 参数 会 引发错误
 此 特定 可通过 将 allowabbrev  设 为 false  来 禁用
 在 sysargv  以外
 有 时 在 sys
argv  以外 用 argumentparser  解析 参数 也是 有用的
 这可以通过 将 一个 字符串列表 传给 parseargs  来实现
 它 适用于 在 交互 提示符 下 进行 检测 parser  argparse
 命名空间 对象
namespace  由 parseargs  默认使用 的简单 类 可 创建一个 存放 属性 的 对象 并将其 返回
 这个类 被 有 意 做 得 很 简单 只是 一个具有 可读 字符串 表示形式 的 object
 如果你 更 喜欢 类似 字典 的 属性 视图 你可以使用 标准 python  中 惯 常 的 vars  parser  argparse
parseargsfoo  bar  varsargs  foo  bar  另一个 用 处 是 让 argumentparser  为 一个 已存在 对象 而不是 为 一个新的 namespace  对象 的 属性 赋值
 这可以通过 指定 namespace  关键字参数 来实现 class  c 
 其 它 实 用 工具
 子 命令
filetype  对象
filetypemoder  bufsize 1 encodingnone  errorsnone  filetype  工厂 类 用于创建 可 作为 argumentparser
addargument  的 type  参数 传入的 对象
 以 filetype  对象作为 其 类型 的 参数 将 使用 命令 行 参数 以 所 请求 模式、 缓冲区大小、 编码格式 和 错误处理 方式打开 文件 请 参阅 open  函数 了解详情 parser  argparse
dat  modewb  filetype  对象 能 理解 伪 参数 并 会自动 将其转换为 sys
stdin  用 于 可读的 filetype  对象 或 是 sys
stdout  用 于 可 写 的 filetype  对 象 parser  argparse
textiowrapper  namestdin  encodingutf 83
4 新版功能 encodings  和 errors  关键字参数
 参数 组
addargumentgrouptitlenone  descriptionnone  在默认情况下 argumentparser  会 在 显示 帮助消息 时 将 命令行参数 分 为 位置参数 和 可选参数 两 组
 当 存 在 比 默认 更好的 参数 分组 概念 时可以 使用 addargumentgroup  方法 来创建 适当的 分组 parser  argparse
printhelp  usage  prog  foo  foo  bar  group  bar  bar  help  foo  foo  foo  help  addargumentgroup  方法返回一个 具有 addargument  方法 的 参数 分组 对象 这 与 常规 的 argumentparser  一样
 当 一个参数 被加入 分组 时 解析器 会 将 它 视为 一个 正常的 参数 但是 会 在不同的 帮助消息 分组 中显示 该参数
 addargumentgroup  方法 接受 title  和 description  参数 它们 可被用来 定制 显示 内容 parser  argparse
printhelp  usage  prog  bar  bar  foo  group 1 group 1 description  foo  foo  help  group 2 group 2 description  bar  bar  bar  help  请注意 任意 不 在你的 自定义 分组 中 的 参数 最终 都 将 回 到 通常 的 位置参数 和 可选参数 分组 中
 互 斥
addmutuallyexclusivegrouprequiredfalse  创建一个 互 斥 组
 argparse  将 会 确保 互 斥 组 中 只有一个 参数 在命令行中 可 用 parser  argparse
parseargsfoo  bar  usage  prog  h  foo  bar  prog  error  argument  bar  not  allowed  with  argument  foo  addmutuallyexclusivegroup  方法也 接受一个 required  参数 表 示 在 互 斥 组 中 至少有 一个参数 是需要 的 parser  argparse
parseargs  usage  prog  h  foo  bar  prog  error  one  of  the  arguments  foo  bar  is  required  注意 目前 互 斥 参数 组 不支持 addargumentgroup  的 title  和 description  参数
 解析器 默认值
setdefaultskwargs  在大多数 时候 parseargs  所 返回 对象 的 属性 将 完全 通过 检查 命令行参 数 和 参数 动作 来确定
 setdefaults  则 允许 加入 一些 无 须 任何 命令行 检查 的 额外 属性 parser  argparse
parseargs 736 namespacebar 42 bazbadger  foo 736 请注意 解析器 层级的 默认值 总是会 覆盖 参数 层级的 默认值 parser  argparse
parseargs  namespacefoospam  解析器 层级 默认值 在 需要 多 解析器 时 会 特别 有 用
 请参阅 addsubparsers  方法 了解 此 类型 的 一个 示例
getdefaultdest  获取一个 命名空间 属性 的 默认值 该值 是 由 addargument  或 setdefaults  设置 的 parser  argparse
 打印 帮助
 在大多数 典型 应用中 parseargs  将 负责 任何 用 法 和 错误消息 的 格式化 和 打印
 但是 也可 使用 某些 其他 格式化 方法 argumentparser
printusagefilenone  打印 一段 简短 描述 说明 应当 如何 在命令行中 发起调用 argumentparser
 如果 file  为 none  则 默认使用 sys
stdout
printhelpfilenone  打印 一条 帮助消息 包括 程序 用 法 和 通过 argumentparser  注册的 相关 参 数 信息
 如果 file  为 none  则 默认使用 sys
stdout
 还 存 在 这些方法 的 几个 变化 形式 它们 只 返回 字符串 而 不 打印 消息 argumentparser
formatusage  返回 一个包含 简短 描述 的 字符串 说明 应当 如何 在命令行中 发起调用 argumentparser
formathelp  反 回 一个包含 帮助消息 的 字符串 包括 程序 用 法 和 通过 argumentparser  注册的 相关 参数 信息
 部分 解析
parseknownargsargsnone  namespacenone  有 时 一个 脚本 可能 只 解析 部分 命令行参数 而 将 其余 的 参数 继续 传递给 另一个 脚本 或 程序
 在这种情况下 parseknownargs  方法 会 很有用 处
 它 的作用 方式 很 类似 parseargs  但 区别在于 当 存 在 额外 参数 时 它 不 会产生 错误
 而 是 会返回一个 由 两个 条目 构成的 元组 其中包含 带 成员的 命名空间 和 剩余 参数 字符串 的 列表
parseknownargsfoo  badger  bar  spam  namespacebarbar  footrue  badger  spam  警告 前缀 匹配 规则 应用 于 parseknownargs
 一个 选项 即使 只是 已知 选项 的 前缀 部分 解析器 也 能 识别 该 选项 不 会将其 放入 剩余 参数列表
 自定义 文件 解析
convertarglinetoargsargline  从 文件 读取 的 参数 见 argumentparser  的 fromfileprefixchars  关 键字参数 将是一 行 读取 一个参数
 convertarglinetoargs  可 被 重载 以 使用 更复杂的 读取 方式
 此方法 接受 从 参数 文件 读取 的 字符串形式 的 单个 参数 argline
 它 返回 从 该 字符串 解析 出 的参数列表
 此方法将 在每次 按 顺序 从 参数 文件 读取一 行 时被调用 一次
 此方法 的 一个 有用的 重载 是 将每个 以 空格 分隔 的单词 视为 一个参数
 下面的 例子 演示了如何 实现 此 重载 class  myargumentparserargparse
 退出 方法
exitstatus 0 messagenone  此方法将 终结 程序 退出时 附带 指定 的 status  并且 如果给出 了 message  则会在 退出 前 将 其 打印 输出
 用户可 重载此方法 以 不同 方式来 处 理 这些 步骤 class  errorcatchingargumentparserargparse
errormessage  此方法将 向 标准错误 打印 包括 message  的 用 法 消息 并附带 状态 码2 终结 程序
 混合 解析
parseknownintermixedargsargsnone  namespacenone  许多 unix  命令 允许用户 混 用 可选参数 与 位置参数
parseintermixedargs  和 parseknownintermixedargs  方法 均 支持 这种 解析 风格
 这些 解析器 并 不支持 所有的 argparse  特性 并且 当 未 支持 的 特性 被使用 时 将 会引发异常
 特别地 子 解析器 argparse
remainder  以及 同时 包括 可选 与 位置参数 的 互 斥 分组 是 不受支持 的
 下面的例子 显示了 parseknownargs  与 parseintermixedargs  之间的 差异 前 者 会 将23 返回 为 未 解析 的 参数 而 后者 会 将所有 位置参数 收集 至 rest  中
split  namespacecmddoit  foobar  rest 123 parseknownintermixedargs  返回 由 两个 条目 组成的 元组 其中包含 带 成员的 命名空间 以及 剩余 参数 字符串列表
 当 存 在任何 剩余 的 未 解析 参数 字符串 时 parseintermixedargs  将 引发一个 错误
3
7 新版功能
 升级 optparse  代码
unittest  单元 测试 框架
 基本 实例
unittest  模块提供了 一系列 创建 和 运行 测试 的工具
 这 一 段落 演示了 这 些工具 的 一 小 部分 但也 足以 满足 大部分 用户 的需求
 这是 一段 简短 的 代码 来 测试 三种 字符串方法 import  unittest  class  teststringmethodsunittest
main  继承 unittest
testcase  就 创建了 一个 测试 样 例
 上述 三个 独立的 测试 是 三个 类 的 方法 这些方法 的 命名 都 以 test  开头
 这 个 命名 约定 告诉 测试 运行 者 类 的 哪些 方法 表示 测试
 每个 测试 的 关键 是 调用 assertequal  来 检查 预期的 输出 调用 asserttrue  或 assertfalse  来 验证 一个 条件 调用 assertraises  来 验证 抛出 了 一个 特定的 异常
 使用 这些方法 而不是 assert  语句 是为了 让 测试 运行 者 能 聚 合 所有的 测试 结果 并 产生 结果 报告
 通过 setup  和 teardown  方法可以 设置 测试 开始 前 与 完成后 需要 执行 的 指令
 在 组织 你 的 测试代码 中 对 此 有 更 为 详细 的描述
 最后 的代码块 中 演示了 运行 测试 的 一个简单的 方法
main  提供了一个 测试 脚本 的 命令行接口
 当 在命令行 运行 该 测试 脚本 上 文 的 脚本 生成 如以下 格式 的 输出
000 s  ok  在 调用 测试 脚本 时 添加 v  参数 使 unittest
main  显示 更 为 详细 的 信息 生成 如以下 形式 的 输出 testisupper  main
001 s  ok  以 上 例子演示了 unittest  中 最 常用的、 足够 满足 许多 日 常 测试 需求 的 特性
 文档 的 剩余 部分 详 述 该 框架 的完整 特性
 命令行界面
 命令行选项
unittest  supports  these  commandline  optionsb  buffer  在 测试 运行时 标准输出 流 与 标准错误 流 会 被 放入 缓冲区
 成功 的 测试 的 运 行 时 输出 会 被丢弃 测试 不 通过 时 测试 运行 中 的 输出 会 正常 显示 错误 会 被加入 到 测试 失败 信息
c  catch  当 测试 正在运行 时 controlc  会等待 当前 测试 完成 并 在 完成后 报告 已 执行 的 测试 的结果
 当 再次 按下 controlc  时引发 平 常 的 keyboardinterrupt  异常
 see  signal  handling  for  the  functions  that  provide  this  functionality
f  failfast  当 出现 第一个 错误 或者 失败时 停止 运行 测试
k  只 运行 匹配 模式 或 子 串 的 测试 方法 和 类
 可以 多次 使 用这个 选项 以便 包含 匹配 子 串 的 所有 测试用例
 包含 通 配 符 的 模式 使用 fnmatch
fnmatchcase  对 测试 名称 进行 匹 配
 另外 该 匹配 是 大小写 敏感 的
 模式 对 测试 加载器 导入 的 测试 方法 全 名 进行 匹配
 例如 k  foo  可以 匹配 到 footests
testsomething  和 bartests
testfoo  但是 不 能 匹配 到 bartests
testsomething 
locals  在 回溯 中显示 局部变量
3
2 新版功能 添加 命令行选项 b  c  和 f 
3
5 新版功能 命令行选项 locals 
3
7 新版功能 命令行选项 k 
 命令行 亦 可用于 探 索 性 测试 以 运行 一个 项目的 所有 测试 或其子 集
 探 索 性 测试
 组织 你 的 测试代码
 单元 测试 的 构建 单位 是 test  cases  独立的、 包含 执行 条件 与 正确 性 检查 的 方案
 在 unittest  中 测试用例 表示为 unittest
testcase  的 实例
 通过 编写 testcase  的子类 或 使用 functiontestcase  编写 你自己的 测试用例
 一个 testcase  实例 的 测试代码 必须是 完全 自 含 的因此 它可以 独立 运行 或 与 其 它 任意 组合 任意 数量的 测试用例 一起 运行
testcase  的 最简单 的子类 需要 实现 一个 测试 方法 例如 一个 命名 以 test  开头的 方法 以 执行 特定的 测试代码 import  unittest  class  defaultwidgetsizetestcaseunittest
testcase  def  testdefaultwidgetsizeself  widget  widgetthe  widget  self
assertequalwidget
size 5050 可以 看到 为 了 进行 测试 我们 使用了 基类 testcase  提供的 其中一个 assert  方法
 若 测试 不 通过 将会引发 一个带有 说明 信息 的 异常 并且 unittest  会 将 这 个 测试用例 标记为 测试 不 通过
 任何其 它 类型 的 异常 将会被 当 做 错误处理
 可能 同时 存 在多个 前 置 操作 相同 的 测试 我们可以 把 测试 的 前 置 操作 从 测试代码 中 拆 解 出来 并 实现 测试 前 置 方法 setup 
 在 运行 测试 时 测试 框架 会自动 地 为每个 单独 测试 调用 前 置 方法
 import  unittest  class  widgettestcaseunittest
testcase  def  setupself  self
widget  widgetthe  widget  def  testdefaultwidgetsizeself  self
assertequalself
widget
size 5050 incorrect  default  size  def  testwidgetresizeself  self
widget
resize 100150 self
assertequalself
widget
size 100150 wrong  size  after  resize  注解 多个 测试 运行 的顺序 由 内置 字符串 排序 方法 对 测试 名 进行排序 的结果 决定
 在 测试 运行时 若 setup  方法 引发异常 测试 框架 会 认为 测试 发生了 错误 因此 测试 方法 不会被 运行
 相似的 我们 提供了一个 teardown  方法 在 测试 方法 运行 后 进行 清理 工作
 import  unittest  class  widgettestcaseunittest
dispose  若 setup  成功 运行 无论 测试 方法 是否 成功 都会 运行 teardown 
 这样的 一个 测试代码 运行 的 环境 被称为 test  fixture 
 一个新的 testcase  实例 作为一个 测试 脚 手 架 用 于 运行 各个 独立的 测试 方法
 在 运行 每个 测试 时 setup 、 teardown  和 init  会 被 调用一次
 建议 你 根据 所 测试 的功能 将 测试 用 testcase  实现 集合 起来
unittest  为 此 提供了 机制 test  suite  以 unittest  的 类 testsuite  为 代表
 大部分 情况下 调用 unittest
main  即可 并且它 会 为 你 集合 所有 模块 的 测试用例 并 执行
 然而 如果你需要 自定义 你 的 测试 套件 的话 你可以 参考 以下方法 组织 你 的 测试 def  suite  suite  unittest
 复 用 已有的 测试代码
 一些 用户 希望 直接使用 unittest  运行 已有的 测试代码 而 不需要 把 已有的 每个 测试 函数 转化为 一个 testcase  的子类
 因此 unittest  提供 functiontestcase  类
 这 个 testcase  的子类 可用于 打包 已有的 测试 函数 并 支持 设置 前 置 与 后 置函数
 假定 有 一个 测试 函数 def  testsomething  something  makesomething  assert  something
name  is  not  none 
 可以创建 等价 的 测试用例 如 下 其 中 前 置 和 后 置 方法 是可选的
 testcase  unittest
functiontestcasetestsomething  setupmakesomethingdb  teardowndeletesomethingdb  注解 even  though  functiontestcase  can  be  used  to  quickly  convert  an  existing  test  base  over  to  a  unittestbased  system  this  approach  is  not  recommended
 跳过 测试 与 预 计 的 失败
distinguishing  test  iterations  using  subtests
3
4 新版功能
 例如以下 测试 class  numberstestunittest
assertequali 20 可以 得到 以 下 输出 fail  testeven  main
 类 与 函数
 本节 深 入 介绍了 unittest  的 api
 测试用例
grouping  tests
 在3
2 版更改 in  earlier  versions  the  testsuite  accessed  tests  directly  rather  than  through  iteration  so  overriding  iter  wasnt  sufficient  for  providing  tests
 在3
4 版更改 in  earlier  versions  the  testsuite  held  references  to  each  testcase  after  testsuite
loading  and  running  tests
3
5 新版功能
 注解 while  using  a  hierarchy  of  testcasederived  classes  can  be  convenient  in  sharing  fixtures  and  helper  functions  defining  test  methods  on  base  classes  that  are  not  intended  to  be  instantiated  directly  does  not  play  well  with  this  method
 在3
2 版更改 support  for  loadtests  added
 在3
5 版更改 the  undocumented  and  unofficial  useloadtests  default  argument  is  deprecated  and  ignored  although  it  is  still  accepted  for  backward  compatibility
 the  method  also  now  accepts  a  keywordonly  argument  pattern  which  is  passed  to  loadtests  as  the  third  argument
 在3
5 版更改 if  an  importerror  or  attributeerror  occurs  while  traversing  name  then  a  synthetic  test  that  raises  that  error  when  run  will  be  returned
 these  errors  are  included  in  the  errors  accumulated  by  self
3
2 新版功能
 在3
4 版更改 modules  that  raise  skiptest  on  import  are  recorded  as  skips  not  errors
 discovery  works  for  namespace  packages
 paths  are  sorted  before  being  imported  so  that  execution  order  is  the  same  even  if  the  underlying  file  systems  ordering  is  not  dependent  on  file  name
 在3
5 版更改 found  packages  are  now  checked  for  loadtests  regardless  of  whether  their  path  matches  pattern  because  it  is  impossible  for  a  package  name  to  match  the  default  pattern
3
7 新版功能
3
1 新版功能
3
2 新版功能
3
2 新版功能
3
5 新版功能
 在3
4 版更改 returns  false  if  there  were  any  unexpectedsuccesses  from  tests  marked  with  the  expectedfailure  decorator
3
1 新版功能
3
1 新版功能
3
4 新版功能
3
2 新版功能 this  class  was  previously  named  texttestresult
 the  old  name  still  exists  as  an  alias  but  is  deprecated
 在3
2 版更改 added  the  warnings  argument
 在3
2 版更改 the  default  stream  is  set  to  sys
stderr  at  instantiation  time  rather  than  import  time
 在3
5 版更改 added  the  tblocals  parameter
 在3
1 版更改 the  exit  parameter  was  added
 在3
2 版更改 the  verbosity  failfast  catchbreak  buffer  and  warnings  parameters  were  added
 在3
4 版更改 the  defaulttest  parameter  was  changed  to  also  accept  an  iterable  of  test  names
loadtests  protocol 3
2 新版功能
addtestspackagetests  return  standardtests  在3
5 版更改 discovery  no  longer  checks  package  names  for  matchingpattern  due  to  the  impossibility  of  package  names  matching  thedefault  pattern
class  and  module  fixtures
setupclass  and  teardownclass
setupmodule  and  teardownmodule
3
8 新版功能
3
8 新版功能
signal  handling
3
2 新版功能
subprocess  子进程 管理
 源代码 libsubprocess
pysubprocess  模块 允许你 生成 新 的 进程 连接 它们的 输入、 输出、 错误 管道 并且 获取 它们的 返回 码
 此模块 打 算 代替 一些 老 旧 的 模块 与 功能 os
spawn  在 下面的 段落 中 你可以 找到 关于 subprocess  模块 如何 代替 这些模块 和 功能 的 相关信息
 参见 pep 324 提 出 subprocess  模块 的 pep
 使用 subprocess  模块
 常 用 参数
popen  构造函数
 异常
 在 子进程 中 抛出 的 异常 在 新 的 进程 开始 执行 前 将会被 再次 在 父 进程中 抛出
 最常见的 被 抛出 异常 是 oserror
 例如 当 尝试 执行 一个 不存在 的 文件 时就 会发生
 应用程序 需要 为 oserror  异常 做 好 准备
 如果 popen  调用时 有 无效的 参数则 一个 valueerror  将 被 抛出
checkall  与 checkoutput  在 调用 的 进程 返回 非零 退出 码 时 将 抛出 calledprocesserror
 所有 接受 timeout  形参 的 函数 与 方法 例如 call  和 popen
communicate  将 会 在 进程 退出 前 超时 到 期 时抛出 timeoutexpired
 此 模块中定义的 异常都 继承自 subprocesserror
3
3 新版功能 基类 subprocesserror  被添加
 安全 考 量
 不 像 一些 其他的 popen  功能 此 实现 绝 不 会 隐式 调用 一个 系统 shell
 这意味着 任何字符 包括 shell  元字符 可以 安全地 被传递给 子进程
 如果 shell  被 明确 地调用 通过 shelltrue  设置 则 确保 所有 空白字符 和 元字符 被 恰 当 地 包 裹 在 引号 内 以避免 shell  注 入 漏洞 就 由 应用程序 负责 了
 当使用 shelltrue  shlex
quote  函数 可以作为 在 将 被用于 构造 shell  指令 的 字符串 中 转义 空白字符 以及 shell  元字符 的 方案
popen  对象
windows  popen  助 手
windows  常 数
 较 旧 的 高阶 api
 使用 subprocess  模块 替换 旧 函数
 在 这 一节 中 a  改 为 b  意味着 b  可以 被用作 a  的替代
 注解 在 这 一节 中的所有 a  函数 会 在 找不到 被执行 的 程序 时差 不 多 静默地 失 败 b  替代 函数 则 会 改 为 引发 oserror
 此外 在 使用 checkoutput  时如果 替代 函数 所 请求的 操作 产生 了 非零 返回值 则 将 失败 并 引发 calledprocesserror
 操作 的 输出 仍 能 以 所 引发异常 的 output  属性 的方式 被访问
 在 下列 例子中 我们 假定 相关的 函数 都 已从 subprocess  模块 中 导入 了
 替代 binsh  shell  命令 替换
outputmycmd  myarg  改 为 output  checkoutputmycmd  myarg
 替代 shell  管道
outputdmesg  grep  hda  改 为 p 1 popendmesg  stdoutpipe  p 2 popengrep  hda  stdinp 1
communicate 0 启动 p 2 之后 再 执行 p 1
close  调用 很重要 这 是为了 让 p 1 能 在 p 2 先 于 p 1 退出时 接收到 sigpipe
 另外 对 于 受 信 任 的 输入 shell  本身 的 管道 支持 仍然可 被 直接使用 outputdmesg  grep  hda  改 为 outputcheckoutputdmesg  grep  hda  shelltrue
 替代 ossystem
systemmycmd  myarg  becomes  sts  callmycmd  myarg  shelltrue  注释 通过 shell  来 调用 程序 通常是 不 必要的
 一个 更 现 实 的 例子 如下所示 try  retcode  callmycmd  myarg  shelltrue  if  retcode 0 printchild  was  terminated  by  signal  retcode  filesys
 替代 osspawn  函数 族
pnowait  示例 pid  os
pidpwait  示例 retcode  os
pwait  binmycmd  mycmd  myarg  retcode  callbinmycmd  myargvector  示例 os
pnowait  path  args  popenpath  args 1 environment  示例 os
 替代 ospopen  ospopen 2 ospopen 3
stdout  返回 码 以 如 下方式 处理 转 写 pipe  os
 来自 popen 2 模块 的替代 函数
 注解 如果 popen 2 函数 的 cmd  参数 是一个字符串 命令 会通过 binsh  来执行
 如果是 一个列表 命令 会 被直接 执行
popen 3 和 popen 2
popen 4 基本上 类似于 subprocess
popen  不同之处在于 popen  如果 执行 失败 会引发 一个异常
 capturestderr  参数 被替换为 stderr  参数
 必须 指定 stdinpipe  和 stdoutpipe
 popen 2 默认 会 关闭 所有 文件描述符 但 对 于 popen  你必须 指明 closefdstrue  以 才能 在 所有平台 或 较 旧 的 python  版本中 确保 此行为
 旧式 的 shell  发起 函数
 此模块 还提供了 以 下 来自2
x  commands  模块 的 旧版 函数
 这些 操作 会 隐式地 发起调用 系统 shell  并且 上 文 所描述的 有关 安全 与 异常处理 一致性 保证 都 不 适用于 这些函数
getstatusoutputcmd  返回 在 shell  中 执行 cmd  产生 的 exitcode  output
 在 shell  中 以 popen
checkoutput  执行 字符串 cmd  并返回一个2 元组 exitcode  output
 会 使用当前 区域设置 的 编码格式 请参阅 常 用 参数 中 的 说明 来 了解详情
 末尾 的 一个 换行符 会 从 输出 中 被 去除
 命令 的 退出 码 可 被 解读为 子进程 的 返 回 码
 例如 subprocess
getstatusoutputbinkill 15 可用性 posix  和 windows
 在3
4 版更改 添加了 windows  支持
 此 函数 现 在 返回 exitcode  output  而不是 像 python 3
3 及 更早 的 版本 那样 返回 status  output 
 exitcode  的 值 与 returncode  相同
getoutputcmd  返回 在 shell  中 执行 cmd  产生 的 输出 stdout  和 stderr
 类似于 getstatusoutput  但 退出 码 会被忽略 并且 返回值为 包含 命令 输 出 的 字符串
 例如 subprocess
getoutputls  binls  binls  可用性 posix  和 windows
 在3
4 版更改 添加了 windows  支持
 注释
 在 windows  上 将 参数列表 转换为 一个字符串
 在 windows  上 args  序列 会 被转换为 可 使用以下 规则 来 解析 的 字符串 对应于 ms  c  运行时 所使用的 规则1
 参数 以 空白符 分隔 即 空格符 或 制表符
 用 双引号 标 示 的 字符串 会 被 解读为 单个 参数 而不再 考虑 其中的 空白符
 一 个 参数可以 嵌套 用 引号 标 示 的 字符串
 带有一个 反斜杠 前缀 的 双引号 会 被 解读为 双引号 字面值
 反斜杠 会按 字面值 解读 除非 它 是作为 双引号 的 前缀
 如果 反斜杠 被作为 双引号 的 前缀 则 每个 反斜杠 对 会 被 解读为 一个 反斜杠 字 面值
 如果 反斜杠 数量 为 奇 数 则 最后一个 反斜杠 会 如 规则3 所描述的 那 样 转义 下 一个 双引号
 参见 shlex  此模块提供了 用 于 解析 和 转义 命令行 的 函数
 内置 常量
 由 site  模块 添加 的常量
site  模块 在 启动 期间 自动 导入 除非 给出 s  命令行选项 将 几个 常量 添加到 内置 命名空间
 它们 对 交互式 解释器 shell  很有用 并且不 应 在程序中 使用
quitcodenoneexitcodenone  当 打印 此 对象 时 会 打印出 一条 消息 例如 use  quit  or  ctrld  i
 eof  to  exit  当 调用 此 对象 时 将 使用 指定 的 退出 代码 来 引发 systemexit
copyrightcredits  打印 或 调用 的 对象 分别 打印 版权 或 作者 的 文本
license  当 打印 此 对象 时 会 打印出 一条 消息 type  license  to  see  the  full  license  text  当 调用 此 对象 时 将 以 分 页 形式 显示 完整的 许可证 文本 每 次 显示 一 屏
faulthandler  dump  the  python  traceback
3
3 新版功能
dumping  the  traceback
 在3
5 版更改 added  support  for  passing  file  descriptor  to  this  function
fault  handler  state
 在3
5 版更改 added  support  for  passing  file  descriptor  to  this  function
 在3
6 版更改 on  windows  a  handler  for  windows  exception  is  also  installed
dumping  the  tracebacks  after  a  timeout
 在3
7 版更改 this  function  is  now  always  available
 在3
5 版更改 added  support  for  passing  file  descriptor  to  this  function
dumping  the  traceback  on  a  user  signal
 在3
5 版更改 added  support  for  passing  file  descriptor  to  this  function
issue  with  file  descriptors
 示例
 开发 工具
 本章中描述的 各 模块 可 帮 你 编写 python  程序
 例如 pydoc  模块 接受一个 模块 并 根据 该模块 的内容 来生成 文档
doctest  和 unittest  这两个 模块包含 了用于 编写 单元 测试 的 框架 并 可用于 自动 测试 所 编写 的 代码 验证 预期的 输出 是否 产生
2 to 3 程序 能够 将 python 2
x  源代码 翻译 成 有效的 python 3
x  源代码
 本章中描述的模块 列表 是 typing  类型 标注 支持 类型 别名 newtype  callable  泛型 generic  用户定义的 泛型类型 any  类型 名 义 性 子类型 区别 于 结构 性 子类型 模块内容 特殊 类型 原语 特殊 类型 特殊 形式 building  generic  types  other  special  directives  generic  concrete  collections  corresponding  to  builtin  types  corresponding  to  types  in  collections  other  concrete  types  abstract  base  classes  corresponding  to  collections  in  collections
abc  asynchronous  programming  context  manager  types  协议 functions  and  decorators  introspection  helpers  常 数 pydoc  文档 生成器 和 在 线 帮助 系统 python  development  mode  effects  of  the  python  development  mode  resourcewarning  example  bad  file  descriptor  error  example  doctest  测试 交互 性 的 python  示例 简单 用 法 检查 docstrings  中 的 示例 simple  usage  checking  examples  in  a  text  file  how  it  works  which  docstrings  are  examined  how  are  docstring  examples  recognized  whats  the  execution  context  what  about  exceptions  option  flags  directives  警告 basic  api  unittest  api  advanced  api  doctest  对象 example  objects  doctestfinder  对象 doctestparser  对象 doctestrunner  对象 outputchecker  对象 调试 soapbox  unittest  单元 测试 框架 基本 实例 命令行界面 命令行选项 探 索 性 测试 组织 你 的 测试代码 复 用 已有的 测试代码 跳过 测试 与 预 计 的 失败 distinguishing  test  iterations  using  subtests  类 与 函数 测试用例 deprecated  aliases  grouping  tests  loading  and  running  tests  loadtests  protocol  class  and  module  fixtures  setupclass  and  teardownclass  setupmodule  and  teardownmodule  signal  handling  unittest
mock  mock  对象 库 快速 上 手 mock  类 calling  deleting  attributes  mock  names  and  the  name  attribute  attaching  mocks  as  attributes  the  patchers  patch  patch
mock  上 手 指南 使用 mock  模拟 方法调用 对象 上 的 方法调用 的 mock  mocking  classes  naming  your  mocks  tracking  all  calls  setting  return  values  and  attributes  raising  exceptions  with  mocks  side  effect  functions  and  iterables  mocking  asynchronous  iterators  mocking  asynchronous  context  manager  creating  a  mock  from  an  existing  object  patch  decorators  further  examples  mocking  chained  calls  partial  mocking  mocking  a  generator  method  applying  the  same  patch  to  every  test  method  mocking  unbound  methods  checking  multiple  calls  with  mock  coping  with  mutable  arguments  nesting  patches  mocking  a  dictionary  with  magicmock  mock  subclasses  and  their  attributes  mocking  imports  with  patch
dict  tracking  order  of  calls  and  less  verbose  call  assertions  more  complex  argument  matching 2 to 3 自动将 python 2 代码 转 为 python 3 代码 使用2 to 3 修复 器 lib 2 to 3——2 to 3 支持 库 test  python  回 归 测试 包 writing  unit  tests  for  the  test  package  running  tests  using  the  commandline  interface  test
 文件和目录 访问
 本章中描述的模块 处理 磁盘 文件和目录
 例如 有一些 模块 用 于 读取 文件 的 属性 以 可移植 的方式 操作 路径 以及 创建 临时 文件
 本章 的完整 模块 列表 如 下 pathlib  面向对象 的 文件 系统路径 基础 使用 纯 路径 通 用 性 质 运算符 访问 个 别 部分 方法 和 特征属性 具体 路径 方法 对应的 os  模块 的工具 os
path  常 用 路径 操作 fileinput  迭代 来自 多个 输入 流 的 行 stat  解析 stat  结果 filecmp  文件 及 目录 的 比较 dircmp  类 tempfile  生成 临时 文件和目录 示例 已弃用的 函数 和 变量 glob  unix  风格 路径名 模式 扩展 fnmatch  unix  文件名 模式 匹配 linecache  随机 读写 文本 行 shutil  高阶 文件 操作 目录 和 文件 操作 依赖于 具体 平台 的 高效 拷贝 操作 copytree  示例 rmtree  示例 归档 操作 归档 程序 示例 使用 basedir  的归档 程序 示例 查询 输出 终端 的 尺寸 参见 模块 os  操作系统 接口 包括 处理 比 python  文件对象 更 低 级别 文件 的功能
 模块 io  python  的内置 io  库 包括 抽象 类 和 一些 具体 的 类 如 文件 io 
 内置函数 open  使用 python  打开 文件进行 读写 的 标准 方法
urllib  url  处理 模块
 源代码 liburlliburllib  是一个 收集 了 多个 涉及 url  的 模块 的 包 urllib
request  打开 和 读取 url  urllib
error  包含 urllib
request  抛出 的 异常 urllib
parse  用 于 解析 url  urllib
robotparser  用 于 解析 robots
txt  文件
modulefinder  查找 脚本 使用 的 模块
 源码 libmodulefinder
py  该 模块提供了一个 modulefinder  类 可 用于确定 脚本 导入 的 模块 集
modulefinder
py  也可以 作为脚本 运行 给出 python  脚本 的文件名 作为参数 之后 将打印 导入模块 的 报告
addpackagepathpkgname  path  记录 名为 pkgname  的 包 可以在 指定 的 path  中找到
replacepackageoldname  newname  允许 指定 名为 oldname  的 模块 实际上是 名为 newname  的 包
modulefinderpathnone  debug 0 excludes  replacepaths  该 类提供 runscript  和 report  方法 用于确定 脚本 导入 的 模块 集
 path  可以是 搜索 模块 的 目录 列表 如果没有 指定 则 使用 sys
path 
 debug  设置 调试 级别 更高的 值 使 类 打印 调试 消息 关于 它 正 在 做 什么
 excludes  是 要 从 分析 中 排除 的 模块名称 列表
 replacepaths  是 将 在 模块 路径 中 替换 的 oldpath  newpath  元组 的 列表
 report  将 报告 打印到 标准输出 列出 脚本 导入 的 模块 及其 路径 以及 缺少 或 似 乎 缺 失 的 模块
 runscriptpathname  分析 pathname  文件 的内容 该文件 必须 包含 python  代码
 modules  一个 将 模块名称 映射到 模块 的字典
 请参阅 modulefinder  的 示例 用 法
modulefinder  的 示例 用 法
 稍后 将 分析 的 脚本 bacon
py  import  re  itertools  try  import  baconhameggs  except  importerror  pass  try  import  guido
ham  except  importerror  pass  将 输出 bacon
py  报告 的 脚本 from  modulefinder  import  modulefinder  finder  modulefinder  finder
keys  输出 样 例 可能 因 架构 而 异 loaded  modules  types  copyreg  invertedregistryslotnamesall  srecompile  isstringsreoptimizeunicode  sre  sreconstants  repeatonemakedictatendline  sys  re  modulefinditerexpand  itertools  main  reitertoolsbaconhameggs  sreparse  patternenderssreflagunicode  array  types  moduleinttypetypetype  modules  not  imported  guido
signal  设置 异步 事件 处理程序
 该 模块提供了 在 python  中 使用 信号处理程序 的机制
 一般 规则
signal
signal  函数 允许 定义 在 接收到 信号 时 执行 的 自定义 处理程序
 少 量 的 默认 处理程序 已经 设置 sigpipe  被忽略 因此 管道 和 套接字 上 的 写入 错误 可以 报告 为 普通的 python  异常 以及 如果 父 进程 没有 更改 sigint  则 其 会 被 翻译 成 keyboardinterrupt  异常
 一旦 设置 特定 信号 的 处理程序 将 保持 安装 直到 它 被 显式 重置 python  模拟 bsd  样式 接口 而 不 管 底层 实现 但 sigchld  的 处理程序 除外 它 遵循 底层 实现
 执行 python  信号处理程序
python  信号处理程序 不会在 低 级 c  信号处理程序 中 执行
 相反 低 级 信号处理程序 设置一个 标志 告诉 virtual  machine  稍后 执行 相应的 python  信号处理程序 例如 在 下 一个 bytecode  指令
 这 会导致 捕获 同步 错误 是没有 意义 的 例如 sigfpe  或 sigsegv  它们是 由 c  代 码中的 无效 操作 引 起 的
python  将 从 信号处理程序 返回 到 c  代码 这可能 会 再次 引发 相同 的 信号 导致 python  显然 的 挂起
 从 python 3
3 开始 你 可 以 使用 faulthandler  模块 来 报告 同步 错误
 纯 c  中 实现 的 长时间 运行 的 计算 例如 在 大量 文本 上 的正则表达式 匹配 可 以 在 任意 时间 内 不 间 断 地 运行 而 不 管 接收到 任何 信号
 计算 完成后 将 调用 python  信号处理程序
 信号 与 线程
 模块内容
 在3
5 版更改 信号 sig  处理程序 sigdfl  sigign  和 sigmask  sigblock  sigunblock  sigsetmask  下 面列出的 相关 常量 变 成 了 enums 
 getsignal  pthreadsigmask  sigpending  和 sigwait  函数返回 人 类 可读的 enums 
 在 signal  模块中定义的 变量 是 signal
sigdfl  这是 两种 标准 信号处理 选项 之一 它 只会 执行 信号 的 默认 函数
 例如 在 大 多 数 系统上 对 于 sigquit  的 默认 操作 是 转 储 核心 并 退出 而 对 于 sigchld  的 默认 操作 是 简单地 忽略 它
sigign  这是 另一个 标准 信号处理程序 它 将 简单地 忽略 给定的 信号
 可用性 windows
 可用性 windows
 参见 zerodivisionerror  is  raised  when  the  second  argument  of  a  division  or  modulo  operation  is  zero
ctrlcevent  对应于 ctrlc  击 键 事件 的 信号
 此 信号 只 能用于 os
kill 
 可用性 windows
3
2 新版功能
ctrlbreakevent  对应于 ctrlbreak  击 键 事件 的 信号
 此 信号 只 能用于 os
kill 
 可用性 windows
3
2 新版功能
nsig  比 最高 信号 数 多 一
itimerreal  实 时 递 减 间隔 计时器 并 在 到 期 时 发送 sigalrm 
itimervirtual  仅在 进程 执行时 递 减 间隔 计时器 并 在 到 期 时 发送 sigvtalrm 
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能 this  error  used  to  be  a  subtype  of  ioerror  which  is  now  an  alias  of  oserror
3
8 新版功能
3
8 新版功能
3
8 新版功能
13
9 新版功能
3
3 新版功能
3
3 新版功能
 在3
5 版更改 on  windows  the  function  now  also  supports  socket  handles
 在3
7 版更改 added  warnonfullbuffer  parameter
3
3 新版功能
3
3 新版功能
3
3 新版功能
 在3
5 版更改 the  function  is  now  retried  if  interrupted  by  a  signal  not  in  sigset  and  the  signal  handler  does  not  raise  an  exception  see  pep 475 for  the  rationale
3
3 新版功能
 在3
5 版更改 the  function  is  now  retried  with  the  recomputed  timeout  if  interrupted  by  a  signal  not  in  sigset  and  the  signal  handler  does  not  raise  an  exception  see  pep 475 for  the  rationale
 示例
note  on  sigpipe
 事件循环
 事件循环方法 集
 运行 和 停止 循环
rununtilcompletefuture  运行 直到 future  future  的 实例 被 完成
 如果参数 是 coroutine  object  将 被 隐式 调度 为 asyncio
task  来 运行
 返回 future  的结果 或者 引发 相关 异常
runforever  运行 事件循环 直到 stop  被调用
 如果 stop  在 调用 runforever  之前 被调用 循环 将 轮询 一次 io  选择 器 并设置 超时 为零 再 运行 所有 已 加入 计划 任务 的回调 来 响应 io  事件 以及 已 加入 计划 任务 的 事件 然后 退出
 如果 stop  在 runforever  运行 期间 被调用 循环 将 运行 当前 批 次 的回调 然后 退出
 请注意 在此情况下 由 回调 加入 计划 任务 的 新 回调 将不会 运 行 它们将 会 在 下 次 runforever  或 rununtilcomplete  被调用 时 运行
stop  停止 事件循环
isrunning  返回 true  如果 事件循环 当前 正在运行
isclosed  如果 事件循环 已经被 关闭 返回 true 
close  关闭 事件循环
 当 这个函数 被调用 的时候 循环 必须 处于 非 运行 状态
pending  状态 的回调 将 被丢弃
 此方法 清除 所有的 队列 并 立即 关闭 执行 器不会 等待 执行器 完成
 这个方法 是 幂 等 的 和 不 可 逆 的
 事件循环 关闭 后 不应 调用 其他方法
shutdownasyncgens  安排 所有 当前 打开 的 asynchronous  generator  对象 通过 aclose  调 用来 关闭
 在 调用此方法 后 如果有 新 的 异步生成器 被 迭代 事件循环 将 会 发 出 警告
 这 应当 被用来 可靠 地 完成 所有 已 加入 计划 任务 的 异步生成器
 请注意 当使用 asyncio
run  时 不必 调用 此 函数
 示例 try  loop
close 3
6 新版功能
shutdowndefaultexecutor  安排 默认 执行器 的 关闭 并 等待 它 合并 threadpoolexecutor  中的所有 线程
 在 调用此方法 后 如果在 使用默认 执行器 期间 调用 了 loop
runinexecutor  则 将会引发 runtimeerror
 请注意 当使用 asyncio
run  时 不必 调用 此 函数
3
9 新版功能
 安排 回调
callsooncallback  args  contextnone  安排 callback  callback  在 事件循环 的下一 次 迭代 时 附带 args  参数 被调用
 回调 按 其 注册 顺序 被调用
 每个 回调 仅 被 调用一次
 可选的 仅 关键字 型 参数 context  允许 为 要 运行 的 callback  指定一个 自 定义 contextvars
context 
 如果没有 提供 context  则 使用当前 上 下文
 返回 一个 能 用来 取消 回调 的 asyncio
handle  实例
 这个方法 不 是线程安全的
callsoonthreadsafecallback  args  contextnone  callsoon  的 线程安全 变体
 必须 被用于 安排 来自 其他线程 的回调
 查看 并 发 和 多线程 章节 的 文档
 在3
7 版更改 仅 用 于 关键字形参 的 参数 context  已经被 添加
 请参阅 pep 567 查看 更多细节
 注解 大多数 asyncio  的调度 函数 不 让 传递 关键字参数
 为 此 请使用 functools
partial  will  schedule  printhello  flushtrue  loop
partialprint  hello  flushtrue  使用 partial  对象 通常 比 使用 lambda  更 方便 asyncio  在 调试 和 错误消息 中 能 更好的 呈 现 partial  对象
 调度 延迟 回调
 事件循环 提供 安排 调度 函数 在 将 来 某个 时 刻 调用 的机制
 事件循环 使用 单 调 时钟 来 跟踪 时间
calllaterdelay  callback  args  contextnone  安排 callback  在 给定的 delay  秒 可以是 int  或者 float  后 被 调 用
 返回 一个 asyncio
timerhandle  实例 该实例 能用于 取消 回调
 callback  只 被 调用一次
 如果两 个 回调 被 安排 在 同样的 时间 点 执行 顺序 未 限定
 可选的 位置参数 args  在 被调用 的时候 传递给 callback  
 如果你想 把 关键字参数 传递给 callback  请使用 functools
partial 
 可选的 仅 关键字 型 参数 context  允许 为 要 运行 的 callback  指定一个 自 定义 contextvars
context 
 如果没有 提供 context  则 使用当前 上 下文
 在3
7 版更改 仅 用 于 关键字形参 的 参数 context  已经被 添加
 请 参 阅 pep 567 查看 更多细节
 在3
8 版更改 在 python 3
7 和 更早 版本 的 默认 事件循环 实现 中 delay  不 能 超过 一 天
 这 在 python 3
8 中 已被 修复
callatwhen  callback  args  contextnone  安排 callback  在 给定的 绝对 时间戳 when  int  或 float  被调用 使 用 与 loop
time  同样的 时间 参考
 这个函数 的 行为与 calllater  相同
 返回 一个 asyncio
timerhandle  实例 该实例 能用于 取消 回调
 在3
7 版更改 仅 用 于 关键字形参 的 参数 context  已经被 添加
 请 参 阅 pep 567 查看 更多细节
 在3
8 版更改 在 python 3
7 和 更早 版本 的 默认 事件循环 实现 中 when  和 当前 时间 相 差 不 能 超过 一 天
 在 这 python 3
8 中 已被 修复
time  根据 时间 循环 内部 的 单 调 时钟 返回当前 时间 为 一个 float  值
 注解 在3
8 版更改 在 python 3
7 和 更早 版本中 超时 相对 的 delay  或 绝对 的 when  不 能 超过 一 天
 这 在 python 3
8 中 已被 修复
 参见 asyncio
sleep  函数
 创建 future  和 task
createfuture  创建一个 附加 到 事件循环 中 的 asyncio
future  对象
 这是 在 asyncio  中 创建 futures  的 首选 方式
 这 让 第三方 事件循环 可以提供 future  对象 的替代 实现 更好的 性能 或者 功能
3
2 新版功能
createtaskcoro  namenone  安排 一个 协程 的 执行
 返回 一个 task  对象
 三方 的事件循环 可以使用 它们 自己 定义 的 task  类 的子类 来实现 互 操作 性
 这个例子 里 返回值 的 类型 是 task  的子类
 如 果提供了 name  参数 且不 为 none  它 会 使用 task
setname  来 设 为 任务 的 名称
 在3
8 版更改 添加了 name  形参
settaskfactoryfactory  设置一个 任务 工厂 它 将 由 loop
createtask  来 使用
 如果 factory  为 none  则 将 设置 默认 的 任务 工厂
 在其他情况下 factory  必须为一个 可调用对象 且 签名 匹配 loop  coro  其 中 loop  是 对 活动 事件循环 的 引用 而 coro  是一个 协程对象
 该 可调用 对象 必须返回 一个 兼容 asyncio
future  的 对象
gettaskfactory  返回 一个 任务 工厂 或者如果 是 使用 默认值 则返回 none
 打开 网络 连接
 创建 网络 服务
aipassive  socknone  backlog 100 sslnone  reuseaddressnone  reuseportnone  sslhandshaketimeoutnone  startservingtrue  创建 tcp  服务 socket  类型 sockstream  监听 host  地址的 port  端口
 返回 一个 server  对象
 参数 protocolfactory  必须为一个 返回 协议 实现 的可调用对象
 host  形参 可 被设为 几种 类型 它 确定 了 服务器 所 应 监听 的 位置 如果 host  是一个字符串 则 tcp  服务器 会 被 绑定到 host  所 指明 的 单 一 网络 接口
 如果 host  是一个字符串 序列 则 tcp  服务器 会 被 绑定到 序列 所 指明 的 所有 网络 接口
 如果 host  是一个 空字符串 或 none  则 会 应用 所有 接口 并 将 返回 包 含 多个 套接字 的 列表 通常是 一个 ipv 4 的 加一个 ipv 6 的
 family  可 被设为 socket
afinet  或 afinet 6 以 强制 此 套接字 使 用 ipv 4 或 ipv 6
 如果未 设 定 则 family  将 通过 主机 名称 来确定 默认为 afunspec
 flags  是用于 getaddrinfo  的 位 掩 码
 可以选择 指定 sock  以便 使用 预 先 存在的 套接字 对象
 如果指定了 此 参 数 则 不 可 再 指定 host  和 port
 backlog  是 传递给 listen  的最大 排 队 连接 的数量 默认为100
 ssl  可 被设置为 一个 sslcontext  实例 以 在 所 接受 的 连接 上 启用 tls 
 reuseaddress  告 知 内 核 要 重 用 一个 处于 timewait  状态 的 本地 套接 字 而不是 等待 其 自然 超时 失效
 如果未指定 此 参数则 在 unix  上 将自动 设置为 true
 reuseport  告 知 内 核 只要 在 创建 的时候 都 设置 了这个 标志 就 允许 此 端 点 绑定到 其 它 端 点 列表 所 绑定 的 同样的 端口 上
 这 个 选项 在 windows  上 是 不支持 的
 sslhandshaketimeout  是用于 tls  服务器 的 在 放 弃 连接 之前 要 等 待 tls  握 手 完成 的 秒数
 如果参数为 默认值 none  则 为60
0 秒
 startserving  设置 成 true  默认值 会导致 创建 server  并 立即 开始 接受 连接
 设置 成 false  用户 需要 等待 server
startserving  或者 server
serveforever  以 使 server  开始 接受 连接
3
7 新版功能 增加了 sslhandshaketimeout  和 startserving  形 参
 在3
6 版更改 套接字 选项 tcpnodelay  默认 已 为所有 tcp  连接 进行 了 设置
 在3
5 版更改 proactoreventloop  类 中添加 ssltls  支持
 在3
1 版更改 host  形参 可以 是一个字符串 的 序列
 参见 startserver  函数 是一个 高层级的 替代 api  它 返回 一 对 streamreader  和 streamwriter  可 在 asyncawait  代码中使用
createunixserverprotocolfactory  pathnone  socknone  backlog 100 sslnone  sslhandshaketimeoutnone  startservingtrue  与 loop
createserver  类似 但是 专用 于 afunix  套接字 族
 path  是 必要的 unix  域 套接字 名称 除非 提供了 sock  参数
 抽象 的 unix  套接字 str  bytes  和 path  路径 都 是 受支持的
 请查看 loop
createserver  方法 的 文档 了解有关 此方法 的 参数 的 信息
 可用性 unix
3
7 新版功能 the  sslhandshaketimeout  and  startserving  parameters
 在3
7 版更改 path  形参 现在可以 是 path  对象
connectacceptedsocketprotocolfactory  sock  sslnone  sslhandshaketimeoutnone  将 已被 接受 的 连接 包装 成一个 传输 协议 对
 此方法 可 被 服务器 用来 接受 asyncio  以外的 连接 但是 使用 asyncio  来 处 理 它们
 参数 protocolfactory  必须为一个 返回 协议 实现 的可调用对象
 sock  是一个 预 先 存在的 套接字 对象 它 是 由 socket
accept  返回 的
 ssl  可 被设置为 一个 sslcontext  以 在 接受 的 连接 上 启用 ssl
 sslhandshaketimeout  是 为 一个 ssl  连接 在 中 止 连接 前 等待 ssl  握 手 完成 的 时间【 单位 秒】
 如果为 none  缺 省 则 是60
0 秒
 返回 一个 transport  protocol  对
3
7 新版功能 sslhandshaketimeout  形参
3
3 新版功能
 传输 文件
tls  升级
starttlstransport  protocol  sslcontext  serversidefalse  serverhostnamenone  sslhandshaketimeoutnone  将 现有 基于 传输的 连接 升级 到 tls
 返回一个新的 传输 实例 其 中 protocol  必须在 await  之后 立即 开始 使 用
 传给 starttls  方法 的 transport  实例 应 永远 不会被 再次 使用
 参数 transport  和 protocol  实例 的 方法 与 createserver  和 createconnection  所返回的 类似
 sslcontext  一个 已经 配置 好 的 sslcontext  实例
 当 服务 端 连接 已 升级 时 如 createserver  所创建的 对象 serverside  会 传入 true
 serverhostname  设置 或者 覆盖 目标 服务器 证 书 中 相 对应的 主机名
 sslhandshaketimeout  是用于 tls  连接 的 在 放 弃 连接 之前 要 等待 tls  握 手 完成 的 秒数
 如果参数为 none  则 使用 默认 的60
0
3
7 新版功能
 监 控 文件描述符
addreaderfd  callback  args  开始 监视 fd  文件描述符 以获取 读取 的 可用性 一旦 fd  可用于 读取 使用 指定 的 参数调用 callback 
removereaderfd  停止 对 文件描述符 fd  读取 可用性 的 监视
addwriterfd  callback  args  开始 监视 fd  文件描述符的 写入 可用性 一旦 fd  可用于 写入 使用 指 定 的 参数调用 callback 
 使用 functools
partial  传递 关键字参数 给 callback
removewriterfd  停止 对 文件描述符 fd  的 写入 可用性 监视
 另 请查看 平台 支持 一节 了解 以 上 方法 的 某些 限制
 直接使用 socket  对象
dns
getaddrinfohost  port  family 0 type 0 proto 0 flags 0 异步 版 的 socket
getaddrinfo 
getnameinfosockaddr  flags 0 异步 版 的 socket
getnameinfo 
 在3
7 版更改 getaddrinfo  和 getnameinfo  方法 一 直 被 标记 返回 一个协程 但是 python 3
7 之前 实际 返回 的 是 asyncio
future  对象
 从 python 3
7 开始 这两个 方法 是 协程
 使用 管道
connectreadpipeprotocolfactory  pipe  在 事件循环 中 注册 pipe  的 读取 端
 protocolfactory  必须为一个 返回 asyncio  协议 实现 的可调用对象
 pipe  是 个 类似 文件 型对象
 返回 一 对 transport  protocol  其 中 transport  支持 readtransport  接口 而 protocol  是 由 protocolfactory  所 实例化 的 对象
 使用 selectoreventloop  事件循环 pipe  被设置为 非阻塞 模式
connectwritepipeprotocolfactory  pipe  在 事件循环 中 注册 pipe  的 写入 端
 protocolfactory  必须为一个 返回 asyncio  协议 实现 的可调用对象
 pipe  是 个 类似 文件 型对象
 返回 一 对 transport  protocol  其 中 transport  支持 writetransport  接口 而 protocol  是 由 protocolfactory  所 实例化 的 对象
 使用 selectoreventloop  事件循环 pipe  被设置为 非阻塞 模式
 注解 在 windows  中 selectoreventloop  不支持 上述 方法
 对 于 windows  请改 用 proactoreventloop
 参见 loop
subprocessexec  和 loop
subprocessshell  方法
unix  信号
addsignalhandlersignum  callback  args  设置 callback  作为 signum  信号 的 处理程序
 此 回调 将 与 该 事件循环 中 其他 加入 队列 的回调 和 可 运行 协程 一起 由 loop  发起调用
 不同 与 使用 signal
signal  注册的 信号处理程序 使用 此 函数 注册的 回调 可以 与 事件循环 进行 交互
 如果 信号 数字 非 法 或者 不 可 捕获 就 抛出一个 valueerror 
 如果 建立 处 理器 的 过程中 出现 问题 会抛出 一个 runtimeerror 
 使用 functools
partial  传递 关键字参数 给 callback
 和 signal
signal  一样 这个函数 只能 在 主 线程中 调用
removesignalhandlersig  移除 sig  信号 的 处理程序
 如果 信号处理程序 被移除 则返回 true  否则 如果给定 信号 未 设置 处理程序 则返回 false
 可用性 unix
 参见 signal  模块
 在 线程 或者 进程 池 中 执行 代码。
runinexecutorexecutor  func  args  安排 在 指定 的 执行器 中 调用 func 
 示例 import  asyncio  import  concurrent
runmain  这 个 方法返回一个 asyncio
future  对象
 使用 functools
partial  传递 关键字参数 给 func 
 在3
3 版更改 loop
runinexecutor  不会再 配置 它 所创建的 线程 池 执行器 的 maxworkers  而 是 将 其 留 给 线程 池 执行器 threadpoolexecutor  来 设置 默认值
setdefaultexecutorexecutor  将 executor  设 为 runinexecutor  所使用的 默认 执行器
 executor  应当 是 threadpoolexecutor  的 实例
3
8 版后已移除 使用 不 是 using  an  executor  that  is  not  an  instance  of  threadpoolexecutor  实例 的 执行器 的做法 已被 弃用并将在 python 3
9 中 引 起 错误
 executor  必须是 个 concurrent
threadpoolexecutor  的 实例
 错误处理 api
 开 启 调试模式
getdebug  获取 事件循环 调试模式 状态 bool
 如果 环境变量 pythonasynciodebug  是一个 非 空字符串 就 返回 true  否则 就 返回 false 
setdebugenabled  bool  设置 事件循环 的 调试模式
 在3
7 版更改 现 在 也可以通过 新 的 python  开发模式 来 启用 调试模式
 参见 debug  mode  of  asyncio
 运行 子进程
 回调 处理
handle  由 loop
callsoon  loop
callsoonthreadsafe  所返回的 回调 包 装 器对象
 cancel  取消 回调
 如果此 回调 已 被取消 或 已 被执行 此方法将 没有任何 效果
 cancelled  如果此 回调 已 被取消 则返回 true
3
7 新版功能
timerhandle  由 loop
calllater  和 loop
callat  所返回的 回调 包装器 对象
 这个类 是 handle  的子类
 when  返回 加入 计划 任务 的回调 时间 以 float  值表示 的 秒数
 时间 值 是一个 绝对 时间戳 使用 与 loop
time  相同 的 时间 引用
3
7 新版功能
server  对象
 事件循环 实现
asyncio  带有 两 种不同 的事件循环 实现 selectoreventloop  和 proactoreventloop
 默认情况下 asyncio  被 配置 为 在 unix  上 使用 selectoreventloop  而 在 windows  上 使用 proactoreventloop
selectoreventloop  基于 selectors  模块 的事件循环
 使用 给定 平台 中 最 高效 的 可 用 selector
 也可以 手动 配置 要使用的 特定 selector  import  asyncio  import  selectors  selector  selectors
seteventlooploop  可用性 unix  windows
proactoreventloop  用 io  completion  ports  iocp  构建 的 专 为 windows  的事件循环
 可用性 windows
 参见 有关 io  完成 端口 的 msdn  文档
abstracteventloop  asyncio  兼容 事件循环 的抽象基类
 事件循环方法 一节 列出了 abstracteventloop  的替代 实现 应当 定义 的 所 有 方法
 示例
 请注意 本节 中的所有 示例 都 有 意 地 演示了如何 使用 低层级的 事件循环 api  例如 loop
runforever  和 loop
 现 代 的 asyncio  应用 很 少 需要 以这样 的方式 编写 请 考虑 使用 高层级的 函数 例如 asyncio
callsoon  的 hello  world  示例。
 一个 使用 loop
callsoon  方法来 安排 回调 的 示例
 回调 会显示 helloworld  然后 停止 事件循环 import  asyncio  def  helloworldloop  a  callback  to  print  hello  world  and  stop  the  event  loop  printhello  world  loop
close  参见 一个类似 的 hello  world  示例 使用 协程 和 run  函数创建
 使用 calllater  来 展示 当前的 日期
 一个 每 秒 刷新 显示 当前 日期 的 示例
 回调 使用 loop
calllater  方法 在5 秒 后 将 自身 重新 加入 计划 日程 然后 停止 事件循环 import  asyncio  import  datetime  def  displaydateendtime  loop  printdatetime
close  参见 一个类似 的 current  date  示例 使用 协程 和 run  函数创建
 监 控 一个 文件描述符的 读 事件
 使用 loop
addreader  方法 等 到 文件描述符 收到 一些 数据 然后 关闭 事件循环 import  asyncio  from  socket  import  socketpair  create  a  pair  of  connected  file  descriptors  rsock  wsock  socketpair  loop  asyncio
close  参见 一个类似 的 示例 使用 传输、 协议 和 loop
createconnection  方法 创建
 另一个 类似 的 示例 使用了 高层级的 asyncio
openconnection  函数 和 流
 为 sigint  和 sigterm  设置 信号 处理器
 这 个 signals  示例 只 适用于 unix
 使用 loop
addsignalhandler  方法 为 信号 sigint  和 sigterm  注册 处理程序 import  asyncio  import  functools  import  os  import  signal  def  askexitsigname  loop  printgot  signal  s  exit  signame  loop
nntplib  nntp  protocol  client
 在3
2 版更改 usenetrc  is  now  false  by  default
 在3
3 版更改 支持 了 with  语句
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socket
3
2 新版功能
 在3
4 版更改 the  class  now  supports  hostname  check  with  ssl
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socket
nntp  objects
attributes
3
2 新版功能
3
2 新版功能
 方法
 在3
2 版更改 many  of  the  following  methods  have  been  reworked  andfixed  which  makes  them  incompatible  with  their 3
1 counterparts
getcapabilities  true 3
2 新版功能
3
2 新版功能
3
2 新版功能
 在3
4 版更改 the  method  now  supports  hostname  check  with  ssl
 在3
2 版更改 grouppattern  was  added
de 3
2 新版功能
 工具 函数
tkinterfont  tkinter  字 体 封装
typing  类型 标注 支持
3
5 新版功能
 源码 libtyping
py  注解  python  运行时 并 不 强制 标注 函数 和 变量 类型
 类型 标注 可被用于 第三方 工具 比如 类型检查 器、 集成 开发 环境、 静态 检查 器 等
 此模块 为 运行时 提供了 pep 484、 pep 526、 pep 544、 pep 586、 pep 589 和 pep 591 规 定 的 类型提示
 最 基本的 支持 由 anyuniontuplecallabletypevar  和 generic  类型 组成
 有关 完整的 规范 请参阅 pep 484
 有关 类型提示 的简单 介绍 请参阅 pep 483
 函数接受 并返回一个 字符串 注释 像 下面 这样 def  greetingname  str  str  return  hello  name  在 函数 greeting  中 参数 name  预期 是 str  类型 并且 返回 str  类型
 子类型 允许 作为参数
 类型 别名
 要 定义一个 类型 别名 可以将 一个 类型 赋 给 别名
 在 本 例 中 vector  和 listfloat  将 被视为 可 互 换 的 同 义 词 vector  listfloat  def  scalescalar  float  vector  vector  vector  return  scalar  num  for  num  in  vector  typechecks  a  list  of  floats  qualifies  as  a  vector
4 类型 别名 可用于 简化 复杂 类型 签名
 例如 from  collections
 请注意 none  作为 类型提示 是一种 特殊 情况 并且 由 typenone  取 代
newtype
 使用 newtype  辅助函数 创建 不同的 类型 from  typing  import  newtype  userid  newtypeuserid  int  someid  userid 524313 静态类型 检查 器 会 将 新 类型 视为 它 是 原始 类型 的子类
 这 对 于 帮助 捕 捉 逻辑 错误 非常有用 def  getusernameuserid  userid  str 
 typechecks  usera  getusernameuserid 42351 does  not  typecheck  an  int  is  not  a  userid  userb  getusername 1 您 仍然可 以 对 userid  类型 的 变量 执行 所有的 int  支持 的 操作 但 结果将 始终 为 int  类型
 这 可以让 你 在 需要 int  的地方 传入 userid  但 会阻 止 你 以 无效的 方式 无 意 中 创建 userid  output  is  of  type  int  not  userid  output  userid 23413 userid 54341 请注意 这些 检查 仅 通过 静态类型 检查 程序来 强制
 在运行时 语句 derived  newtypederivedbase  将 derived  设 为 一个 函数 该函数 立即 返回 您 传递 它 的 任何 参数
 这意味着 表达式 derivedsomevalue  不 会 创建一个新的 类 或 引入 任何 超出 常规 函数调用 的开销
 更 确 切 地说 表达式 somevalue  is  derivedsomevalue  在运行时 总是 为真
 这 也 意味着 无法 创建 derived  的子类型 因为它 是 运行时 的 标识 函数 而不是 实际 的 类型 from  typing  import  newtype  userid  newtypeuserid  int  fails  at  runtime  and  does  not  typecheck  class  adminuseriduserid  pass  但是 可以 基于 derived  newtype  创建 newtype  from  typing  import  newtype  userid  newtypeuserid  int  prouserid  newtypeprouserid  userid  并且 prouserid  的 类型检查 将按 预期 工作
 有关 更多 详细信息请参 阅 pep 484
 注解 回 想 一 下 使用 类型 别名 声明 两种 类型 彼 此 等效
alias  original  将 使 静态类型 检查 对 待 所有 情况下 alias  完全 等同于 original
 当 您 想 简化 复杂 类型 签名 时 这 很有用
 相反 newtype  声明 一种 类型 是 另一种 类型 的子类型
derived  newtypederived  original  将 使 静态类型 检查 器 将 derived  当 作 original  的 子类 这意味着 original  类型 的 值 不能用 于 derived  类型 的 值 需要 的地方
 当 您 想 以 最小的 运行时 间 成 本 防止 逻辑 错误时 这 非常有用
3
2 新版功能
callable
 期望 特定 签名 的 回调函数 的 框架 可以将 类型 标注 为 callablearg 1 typearg 2 type  returntype
 例如 from  collections
abc  import  callable  def  feedergetnextitem  callable  str  none  body  def  asyncqueryonsuccess  callableint  none  onerror  callableint  exception  none  none  body  通过 用 文 字 省略 号 替换 类型提示 中 的参数列表 callable
returntype  可以 声明 可调用 的 返回 类型 而无需 指定 调用 签名
 泛型 generic
 由 于 无法 以 通 用方式 静态 推 断 有关 保存在 容器 中 的 对象的类型 信息 因此 抽象基类 已 扩展 为 支持 订 阅 以 表示 容器 元素 的 预期 类型
 泛型 可以通过 使用 typing  模块 中 名为 typevar  的 新 工厂 进行 参数 化
 用户定义的 泛型类型
 用户定义的 类 可以定义 为 泛型类
name  messagegenerict  作为 基类 定义了 类 loggedvar  采用 单个 类型 参数 t
 这 也 使得 t  作为 类 体 内 的 一个 类型 有效
generic  基类 定义了 classgetitem  使得 loggedvart  作为 类型 有效 from  collections
set 0 泛型类型 可以 有 任意 数量的 类型 变量 并且 类型 变量 可能会 受到 限制 from  typing  import  typevar  generic 
generic  每个 参数 的 类型 变量 必须是 不同的
 这是 无效的 from  typing  import  typevar  generic 
 您可以 对 generic  使用 多重 继承 from  collections
 从 泛型类 继承 时 某些 类型 变量 可能是 固定 的 from  collections
 在这种情况下 mydict  只有一个 参数 t
 在 不 指定 类型 参数 的情况下 使用 泛型类 别 会 为每个 位置 假设 any
 在 下面的例子 中 myiterable  不 是 泛型 但是 隐式 继承自 iterableany  from  collections
abc  import  iterable  class  myiterableiterable  same  as  iterableany  用户定义 的通用 类型 别名 也 受支持
 例子 from  collections
 t  typevart  int  float  complex  vec  iterabletuplet  t  def  inproductv  vect  t  same  as  iterabletuplet  t  return  sumxy  for  x  y  in  v  在3
7 版更改 generic  不再 拥有 一个 自定义 的 元 类
 一个 用户定义的 泛型类 能够 使用 抽象 基本 类 作为 基类 而不会 发生 元 类 冲突
 泛型 元 类 不再 被 支持
 参数 化 泛型 的 结果会 被 缓存 并且 在 typing  模块中的 大部分 类型 是 可哈希 且 可 比较 相等 性 的
any  类型
 名 义 性 子类型 区别 于 结构 性 子类型
 最初 pep 484 将 python  的 静态类型 系统 定义为 使用 名 义 性 子类型
 即 是 说 当且仅当 a  是 b  的子类 时 可 在 需要 b  类 时 提供 a  类
 这 一 要求 之前 也 适用于 抽象基类 比如 iterable 
 这 一 做法 的 问题 在 于 一个 类 必须 显式地 标注 为 支持 他们 这 即 不 pythonic  也 不太 可能在 惯 用 动态 类型 的 python  代码中 会 有 人 正常 地 去 用
 举例来说 这 符合 pep 484 from  collections
  pep 544 通过 允许用户 不必 在 类定义 中 显式地 标注 基类 来 解决 这 一 问题 允许 静态类型 检查 器 隐 含 地 认为 bucket  既 是 sized  的子类型 又 是 iterableint  的子类型
 这 被称为 结构 性 子类型 或者 静态 鸭 子类型 from  collections
 result  collectbucket  passes  type  check  此外 通过 继承 一个特殊 的 类 protocol  用户 能够 定义 新 的 自定义 协议 来 充 分 享 受 结构化 子类型 后 文 中 有 例子
 模块内容
 本 模块定义了 如 下 类、 函数 和 修 饰器
 注解 本 模块定义了 若 干 现 存 的 标准库 类 的子类 同时 扩展 为 generic  以 支持 中 的 类型 变量
 由 于 现 存 的 标准库 类 在 python 3
9 中 已经 增强 为 支持 这些类型 变得 冗 余
 这些 荣 誉 类型 在 python 3
9 中 被弃用 但 解释 器不会 发起 弃用 警告
 预期 上 类型检查 器 将 会 在 程序 的 目标 版本 为 python 3
9 以 上 时 标记 这些 弃用的 类型
 这些 被弃用 的 类型 会 在 python 3
0 发布 的 五 年 后 从 typing  模块 中移除
 详情 请 见 pep 585《 标准 集合 的 类 型提示 泛型》
 特殊 类型 原语
generic  concrete  collections
dictdict  mutablemappingkt  vt  dict  的泛型 版本
 对 标注 返回 类型 比较 有 用
 如果要 标注 参数 的话 使用 如 mapping  的 抽象 容器 类型 是 更好的 选择
 这个类 型 可 以这样 使用 def  countwordstext  str  dictstr  int 
3
9 版后已移除 builtins
 see  pep 585 and  generic  alias  type
 这个类 型 可 以这样 用 t  typevart  int  float  def  vec 2 x  t  y  t  listt  return  x  y  def  keeppositivesvector  sequencet  listt  return  item  for  item  in  vector  if  item 03
9 版后已移除 builtins
 see  pep 585 and  generic  alias  type
3
9 版后已移除 builtins
 see  pep 585 and  generic  alias  type
3
9 版后已移除 builtins
frozenset  now  supports 
 see  pep 585 and  generic  alias  type
 注解 tuple  is  a  special  form
defaultdict  mutablemappingkt  vt  collections
defaultdict  的泛型 版本
3
2 新版功能
3
9 版后已移除 collections
defaultdict  now  supports 
 see  pep 585 and  generic  alias  type
ordereddict  mutablemappingkt  vt  collections
ordereddict  的泛型 版本
3
2 新版功能
3
9 版后已移除 collections
ordereddict  now  supports 
 see  pep 585 and  generic  alias  type
chainmap  mutablemappingkt  vt  collections
chainmap  的泛型 版本
3
4 新版功能
3
1 新版功能
3
9 版后已移除 collections
chainmap  now  supports 
 see  pep 585 and  generic  alias  type
counter  dictt  int  collections
counter  的泛型 版本
3
4 新版功能
3
1 新版功能
3
9 版后已移除 collections
counter  now  supports 
 see  pep 585 and  generic  alias  type
dequedeque  mutablesequencet  collections
deque  的泛型 版本
3
4 新版功能
3
1 新版功能
3
9 版后已移除 collections
deque  now  supports 
 see  pep 585 and  generic  alias  type
3
9 版后已移除 classes  pattern  and  match  from  re  now  support 
 use  text  to  indicate  that  a  value  must  contain  a  unicode  string  in  a  manner  that  is  compatible  with  both  python 2 and  python 3 def  addunicodecheckmarktext  text  text  return  text  u  u 27133
2 新版功能
abstract  base  classes
 协议
3
8 新版功能
functions  and  decorators
3
8 新版功能
notypecheck  用 于 指明 标注 不 是 类型提示 的 装饰器
 此 decorator  装饰器 生效 于 类 或 函数 上
 如果 作用于 类 上 的话 它 会 递归 地 作用于 这个类 的 所定义的 所有 方法 上 但 是对于 超 类 或 子类 所定义的 方法 不 会 生效
 此方法会 就 地 地 修改 函数
notypecheckdecorator  使 其 它 装饰器 起 到 notypecheck  效果 的 装饰器
typecheckonly  标记 一个 类 或 函数 在运行时 内 不可用 的 装饰器
introspection  helpers
gettypehintsobj  globalnsnone  localnsnone  includeextrasfalse  返回 一个字典 字典 内 含 有 函数、 方法、 模块 或 类对象的 类型提示
 for  example  class  studentnamedtuple  name  annotatedstr  some  marker  gettypehintsstudent  name  str  gettypehintsstudent  includeextrasfalse  name  str  gettypehintsstudent  includeextrastrue  name  annotatedstr  some  marker  在3
9 版更改 added  includeextras  parameter  as  part  of  pep 593
 examples  assert  getorigindictstr  int  is  dict  assert  getargsdictint  str  int  str  assert  getoriginunionint  str  is  union  assert  getargsunionint  str  int  str 3
8 新版功能
 常 数
 注解 if  from  future  import  annotations  is  used  in  python 3
3
2 新版功能
socket  底层 网络 接口
 源代码 libsocket
py  这 个 模块提供了 访问 bsd  套接字 的 接口
 在所有 现 代 unix  系统、 windows 、 macos  和其他 一些 平台 上可用
 注解 一些 行为 可能 因 平台 不同 而 异 因为 调用 的 是 操作系统的 套接字 api
 这 个 python  接口 是 用 python  的 面向对象 风格 对 unix  系统调用 和 套接字 库 接口 的 直 译 函数 socket  返回 一个 套接字 对象 其 方法 是 对 各种 套接字 系统调用 的 实现
 形参 类型 一般 与 c  接口 相比 更高级 例如 在 python  文件 read  和 write   操作 中 接收 操作 的 缓冲区 分配 是 自动 的 发送 操作 的 缓冲区 长度 是 隐式 的
 参见 模块 socketserver  用 于 简化 网络 服务 端 编写 的 类
 模块 ssl  套接字 对象 的 tlsssl  封装
 套接字 协议 族
 模块内容
socket  模块包含 下列 元素
 异常
 常 数
 函数
 套接字 对象
 关于 套接字 超时 的 说明
 超时 与 connect  方法
connect  操作 也 受 超时 设置 的 约 束 通常 建议 在 调用 connect  之前 调用 settimeout  或 将 超时 参数 直接 传递给 createconnection
 但是 无论 python  套接字 超时 设置 如何 系统 网络 栈 都 有可能 返回 自 带 的 连接 超时 错误
 超时 与 accept  方法
 如果 getdefaulttimeout  的 值 不 是 none  则 accept  方法 返回 的 套接字 将 继承 该 超时 值
 若 是 none  返回 的 套接字 行为 取决于 侦 听 套接字 的 设置 如果 侦 听 套接字 处于 阻塞模式 或 超时 模式 则 accept  返回 的 套 接字 处于 阻塞模式 如果 侦 听 套接字 处于 非阻塞 模式 那么 accept  返回 的 套接字 是 阻塞 还是 非阻塞 取决于 操作系统
 如果要 确保 跨平台 时 的 正确 行为 建议 手动 覆盖 此 设置
 示例
 流
streamreader
streamwriter
streamwriter  这个类 表示一个 写入 器对象 该 对象提供 api  以便 于 写 数据 至 io  流 中
 不 建议 直接 实例化 streamwriter  而 应 改 用 openconnection  和 startserver
 writedata  此方法会 尝试 立即 将 data  写入到 下层的 套接字
 如果 写入 失败 数 据 会 被 排 入 内部 写 缓冲 队列 直到 可以被 发送
 此方法 应当 与 drain  方法 一起使用 stream
drain  writelinesdata  此方法会 立即 尝试 将 一个 字节串 列表或 任何 可迭代对象 写入到 下层的 套接字
 如果 写入 失败 数据 会 被 排 入 内部 写 缓冲 队列 直到 可以被 发送
 此方法 应当 与 drain  方法 一起使用 stream
drain  close  此方法会 关闭 流 以及 下层的 套接字
 此方法 应 与 waitclosed  方法 一起使用 stream
waitclosed  canwriteeof  如果 下层的 传输 支持 writeeof  方法 则返回 true  否则返回 false
 writeeof  在 已 缓冲 的 写入 数据 被 刷新 后 关闭 流 的 写入 端
 transport  返回 下层的 asyncio  传输
 getextrainfoname  defaultnone  访问 可选的 传输 信息 详情参见 basetransport
getextrainfo
 coroutine  drain  等待直到 可以 适当 地 恢复 写入到 流
 示例 writer
drain  这是一个 与 下层的 io  写 缓冲区 进行 交互 的 流 程控制 方法
 当 缓冲区大 小 达到 最高 水 位 最大 上限 时 drain  会 阻塞直到 缓冲区大小 减少 至 最低 水 位 以便 恢复 写入
 当 没有 要 等待 的 数据 时 drain  会 立即 返回
 isclosing  如果 流 已 被关闭 或 正 在 被关闭 则返回 true
3
7 新版功能
 coroutine  waitclosed  等待直到 流 被关闭
 应当 在 close  之后 被调用 以便 等待直到 下层的 连接 被关闭
3
7 新版功能
 示例
 使用 流 的 tcp  回显 客户端
 使用 asyncio
openconnection  函数 的 tcp  回显 客户端 import  asyncio  async  def  tcpechoclientmessage  reader  writer  await  asyncio
runtcpechoclienthello  world  参见 使用 低层级 loop
createconnection  方法 的 tcp  回显 客户端 协议 示例
 使用 流 的 tcp  回显 服务器
tcp  回显 服务器 使用 asyncio
startserver  函数 import  asyncio  async  def  handleechoreader  writer  data  await  reader
runmain  参见 使用 loop
createserver  方法 的 tcp  回显 服务器 协议 示例
 获取 http  标头
 查询 命令行 传入 url  的 http  标头 的简单 示例 import  asyncio  import  urllib
runprinthttpheadersurl  用 法 python  example
html  或 使用 https  python  example
 注册一个 打开 的 套接字 以 等待 使用 流 的 数据
 使用 openconnection  函数 实现 等待直到 套接字 接收到 数据 的 协程 import  asyncio  import  socket  async  def  waitfordata  get  a  reference  to  the  current  event  loop  because  we  want  to  access  lowlevel  apis
runwaitfordata  参见 使用 低层级 协议 以及 loop
createconnection  方法 的 注册一个 打开 的 套接字 以 等待 使用 协议 的 数据 示例
 使用 低层级的 loop
addreader  方法来 监视 文件描述符的 监视 文件 描述 符 以 读取 事件 示例
wave  读写 wav  格式 文件
waveread  对象
wavewrite  对象
 对 于 可查找 的 输出 流 wave  头 将自动 更新 以 反 映 实际 写入的 帧 数
 对 于 不 可查找 的 流 当 写入 第一 帧 时 nframes  值 必须 准确
 获取 准确 的 nframes  值 可以通过 调用 setnframes  或 setparams  并附带 close  被调用 之前 将 要 写入的 帧 数 然后 使用 writeframesraw  来 写入 帧 数据 或者 通过调用 writeframes  并附带 所有 要 写入的 帧
 在 后 一 种情况下 writeframes  将 计算 数据 中 的 帧 数 并 在 写入 帧 数据 之前 相应地 设置 nframes
 由 open  返回 的 wavewrite  对象 有以下 几种 方法 在3
4 版更改 添加了 对 不 可 搜索 文件 的 支持
close  确保 nframes  是 正确的 并 在 文件 被 wave  打开 时 关闭 它
 此方法会 在 对象 收集 时被调用
 如果 输出 流 不 可查找 且 nframes  与 实际 写入的 帧 数 不匹配 时 引发异常
setnchannelsn  设置 声 道 数
setsampwidthn  设置 采样 字节 长度为 n
setframeraten  设置 采样 频 率 为 n
 在3
2 版更改 对 此方法 的 非 整数 输入 会 被 舍入到 最接近的 整数
setnframesn  设置 总 帧 数 为 n
 如果 与 之后 实际 写入的 帧 数 不 一致 此 值 将会被 更改 如果 输出 流 不 可查找 则 此 更改 尝试 将 引发错误
setcomptypetype  name  设置 压缩 格式
 目前 只 支持 none  即 无 压缩 格式
setparamstuple  tuple  应该是 nchannels  sampwidth  framerate  nframes  comptype  compname  每 项 的 值 应 可用于 set  方法
 设置 所有 形参
tell  返回当前 文件 指针 其 指针 含义 和 waveread
tell  以及 waveread
setpos  是 一致的
writeframesrawdata  写入 音频 数据 但不 更新 nframes
 在3
4 版更改 现在可 接受 任意 byteslike  object
writeframesdata  写入 音频 帧 并 确保 nframes  是 正确的
 如果 输出 流 不 可查找 且 在 data  被写入 之后 写入的 总 帧 数 与 之前 设 定 的 has  been  written  does  not  match  the  previously  set  value  for  nframes  值 不匹配 将会引发 错误
 在3
4 版更改 现在可 接受 任意 byteslike  object
 注意 在 调用 writeframes  或 writeframesraw  之后 再 设置 任何 格式 参数 是 无效的 而且 任何 这样的 尝试 将引发 wave
test  python  回 归 测试 包
 注解 the  test  package  is  meant  for  internal  use  by  python  only
 参见 模块 unittest  编写 pyunit  回 归 测试
 unittest  文档 测试 tests  embedded  in  documentation  strings
writing  unit  tests  for  the  test  package
 参见 test  driven  development  a  book  by  kent  beck  on  writing  tests  before  code
running  tests  using  the  commandline  interface
emailiterators  迭代器
 源代码 libemailiterators
py  通过 message
walk  方法来 迭代 消息 对象 树 是 相当 容易 的
email
iterators  模块 提供了一些 适用于 消息 对象 树 的高层级 迭代器
bodylineiteratormsg  decodefalse  此函数会 迭代 msg  的 所有子 部分 中的所有 载 荷 逐 行 返回 字符串 载 荷
 它 会 跳过 所有子 部分 的 标头 并且它 也会 跳过 任何 包含 不 为 python  字符串 的 载 荷 的 子 部分
 这 基本上 等价于 使用 readline  从 一个 文件 读取 消息 的 纯 文本 表示形式 并 跳过 所有 中 间 的 标头
 可选的 decode  会 被传递给 message
typedsubpartiteratormsg  maintypetext  subtypenone  此函数会 迭代 msg  的 所有子 部分 只 返回 其 中 与 maintype  和 subtype  所指定的 mime  类型 相匹配 的 子 部分
 请注意 subtype  是 可 选项 如果省略 则 仅 使用 主 类型 来进行 子 部分 mime  类型 的 匹配
 maintype  也是 可 选项 它 的 默认值为 text
 因此在 默认情况下 typedsubpartiterator  会返回 每 一个 mime  类 型 为 text  的 子 部分
 增加了 以下函数 作为 有用的 调试 工具
 它 不 应当 被视为 该 包 所支持的 公共 接口 的 组成部分
structuremsg  fpnone  level 0 includedefaultfalse  打印 消息 对象 结构 的内容 类型 的缩进 表示形式
 例如 msg  email
messagefromfilesomefile  structuremsg  multipartmixed  textplain  textplain  multipartdigest  messagerfc 822 textplain  messagerfc 822 textplain  messagerfc 822 textplain  messagerfc 822 textplain  messagerfc 822 textplain  textplain  可 选项 fp  是一个 作为 打印 输出 目标 的 文件类对象
 它必须 适用于 python  的 print  函数
 level  是 供 内部 使用 的
 includedefault  如果 为真值则 会 同时 打印 默认 类型
unix  syslog  库 例 程
 此模块提供 一个 接口 到 unix  syslog  日 常 库
 参考 unix  手册 页 关于 syslog  设 施 的 详细 描述
 此模块 包装 了 系统 的 syslog  例 程 族
 一个 能 与 syslog  服务器 对话 的 纯 python  库 则 以 logging
handlers  模块 中 sysloghandler  类 的形式 提供
 这个模块 定义了以下函数 syslog
syslogpriority  message  将 字符串 message  发送到 系统 日志记录器
 如 有必要 会 添加 末尾 换行符
 每条 消息 都 带有一个 由 facility  和 level  组成的 优先级 标 价 签
 可选的 priority  参数 默认值为 loginfo  它 确定 消息 的优先级
 如 果未 在 priority  中 使用 逻辑 或 loginfo  loguser  对 facility  进行编码 则会使用 在 openlog  调用 中 所 给定的 值
 如果 openlog  未 在 对 syslog  的 调用 之前 被调用 则 将 不带参数 地 调用 openlog
 引发 审计事件 syslog
syslog  使用 参数 priority  message
openlogident  logoption  facility  后续 syslog  调用 的 日志 选项 可以通过 调用 openlog  来 设置
 如 果 日志 当前 未 打开 则 syslog  将 不带参数 地调用 openlog
 可选的 ident  关键字参数 是 在 每条 消息 前 添加 的 字符串 默认为 sys
argv 0 去除 打头 的 路径 部分
 可选的 logoption  关键字参数 默认为0 是一个 位 字段 请参见 下文 了解 可能的 组合 值
 可选的 facility  关键字参数 默认为 loguser  为 没有 显式 编码 facility  的 消息 设置 默认 的 facility
 引发 审计事件 syslog
openlog  使用 参数 ident  logoption  facility
 在3
2 版更改 在 之前 的版本中 不允许 关键字参数 并且 要求 必须 有 ident
 ident  的 默认值 依赖于 系统 库 它 往往 为 python  而不是 python  程序 文件 的 实际 名称
closelog  重置 日志 模块 值 并且 调用 系统 库 closelog
 这使得 此模块 在 初始 导入时 行为 固定
 例如 openlog  将 在 首次 调用 syslog  时被调用 如果 openlog  还 未 被调用 过 并且 ident  和其他 openlog  形参 会 被 重置 为默认值
 引发一个 审计事件 syslog
closelog  不 附带 任何 参数
setlogmaskmaskpri  将 优先级 掩 码 设 为 maskpri  并返回 之前的 掩 码 值
 调用 syslog  并 附带 未 在 maskpri  中 设置 的优先级 将 会被忽略
 默认 设置为 记录 所有 优 先级
 函数 logmaskpri  可 计算 单个 优先级 pri  的 掩 码
 函数 loguptopri  可 计算 包括 pri  在 内 的 所有 优先级 的 掩 码
 引发一个 审计事件 syslog
setlogmask  附带参数 maskpri
 此 模块定义了一 下 常量 优先级 级别 高 到 低 logemerg  logalert  logcrit  logerr  logwarning  lognotice  loginfo  logdebug
 设 施 logkern  loguser  logmail  logdaemon  logauth  loglpr  lognews  loguucp  logcron  logsyslog  loglocal 0 to  loglocal 7 如果 syslog
h  中 有定义 则 还有 logauthpriv
 日志 选项 logpid  logcons  logndelay  如果 syslog
h  中 有定义 则 还 有 logodelay  lognowait  以及 logperror
 示例
 简单 示例
 一个简单的 示例 集 import  syslog  syslog
logerr  processing  started  一个 设置 多种 日志 选项 的 示例 其 中 有 在 日志消息 中包含 进程 id  以及 将 消息 写入 用 于 邮件 日志记录 的 目标 设 施 等 syslog
pickle  python  对象 序列化
 与其他 python  模块 间 的 关系
 与 marshal  间 的 关系
 与 json  模块 的 比较
 数据流 格式
pickle  所使用的 数据格式 仅 可用于 python
 这样做 的 好处 是没有 外部 标准 给 该 格式 强 加 限制 比如 json  或 xdr  不 能 表示 共享 指针 标准 但 这 也 意味着 非 python  程序 可能无法 重新 读取 pickle  封存 的 python  对象
 默认情况下 pickle  格式 使用 相对 紧凑 的 二进制 来 存储
 如果需要 让 文件 更 小 可以 高效 地 压缩 由 pickle  封存 的 数据
pickletools  模块 包含了 相应的 工具 用 于 分析 pickle  生成 的 数据流
pickletools  源码 中 包含了 对 pickle  协议 使用 的 操作码 的 大量 注释
 当前 共 有6 种不同 的 协议 可用于 封存 操作
 使用 的 协议 版本 越 高 读取 所生成 pickle  对象 所需的 python  版本 就 要 越 新
 v 0 版协议 是 原始 的 人 类 可读 协议 并且 向后兼容 早期 版本 的 python
 v 1 版协议 是 较 早 的 二进制 格式 它 也 与 早期 版本 的 python  兼容
 v 2 版协议 是 在 python 2
3 中 引入 的
 它 为 存储 newstyle  class  提供了 更 高效 的机制
 欲 了解有关 第2 版协议 带 来 的改进 请参阅 pep 307
 v 3 版协议 是 在 python 3
0 中 引入 的
 它 显式地 支持 bytes  字节 对象 不 能 使用 python 2
x  解封
 这是 python 3
03
7 的 默认 协议
 v 4 版协议 添加 于 python 3
 它 支持 存储 非常 大 的 对象 能 存储 更 多种 类 的 对象 还 包括 一些 针对 数据格式 的 优化
 它 是 python 3
8 使用 的 默认 协议
 有 关 第4 版协议 带 来 改进的 信息请参阅 pep 3154
 第5 版协议 是 在 python 3
8 中 加入 的
 它 增加了 对 带 外 数据 的 支持 并 可 加 速 带 内 数据 处理
 请参阅 pep 574 了解 第5 版协议 所 带 来 的改进 的 详情
 注解 序列化 是一种 比 持久化 更 底层 的概念 虽然 pickle  读取 和写入 的 是 文件 对 象 但它 不 处理 持久 对象 的 命名 问题 也不 处理 对 持久 对象 的 并 发 访问 甚至 更复杂的 问题
pickle  模块可以 将 复杂 对象转换为 字节 流 也可以 将 字 节 流 转换为 具有相同 内部 结构 的 对象
 处理 这些 字节 流 最常见的 做法是 将它们 写入文件 但它们 也可以通过 网络 发送 或 存储在 数据库中
shelve  模块 提 供 了 一个简单的 接口 用于在 dbm  类型 的 数据库 文件 上 封存 和 解封 对象
 模块 接口
 可以被 封存 解封 的 对象
 封存 类实例
 持久化 外部 对象
 为 了 获取 对象 持久化 的 利 益 pickle  模块 支持 引用 已 封存 数据流 之外 的 对象
 这样的 对象 是通过 一个 持久化 id  来 引用 的 它 应当 是一个 由 字母数字 类 字符 组成的 字符串 对 于 第0 版协议5 或 是一个 任意 对象 用 于 任意 新 版协议
pickle  模块 不 提供对 持久化 id  的 解析 工作 它 将 解析 工作 分配 给 用户定义的 方法 分别 是 pickler  中 的 persistentid  方法 和 unpickler  中 的 persistentload  方法
 要 通过 持久化 id  将 外部 对象 封存 必须在 pickler  中 实现 persistentid  方法 该方法 接受 需要 被 封存 的 对象 作为参数 返回 一个 none  或 返回 该对象 的 持久化 id
 如果 返回 none  该 对象会被 按照 默认 方式 封存 为 数据流
 如果 返回 字符串形式 的 持久化 id  则 会 封存 这 个 字符串 并 加上 一个 标记 这样 unpickler  才能 将 其 识别 为 持久化 id
 要 解封 外部 对象 unpickler  必须 实现 persistentload  方法 接受一个 持久化 id  对象 作为参数 并返回一个 引用 的 对象
 下面是一个 全 面的例子 展示了 如何使用 持久化 id  来 封存 外部 对象
dispatch  表
 如果 想 对 某些 类 进行 自定义 封存 而 又 不 想 在 类 中 增加 用 于 封存 的 代码 就可以 创建 带有 特殊 dispatch  表 的 pickler
 在 copyreg  模块 的 copyreg
dispatchtable  中 定义了 全局 dispatch  表
 因此可以 使用 copyreg
dispatchtable  修改 后 的副本 作为 自 有 dispatch  表
 例如 f  io
dispatchtablesomeclass  reducesomeclass  创建了 一个带有 自 有 dispatch  表 的 pickle
pickler  实例 它可以 对 someclass  类 进行 特殊 处理
 另外 下列 代码 class  mypicklerpickle
bytesio  p  mypicklerf  完成 了 相同 的 操作 但 所有 mypickler  的 实例 都会 共 用 同 一份 dispatch  表
 使用 copyreg  模块 实现 的 等效 代码 是 copyreg
 处理 有 状态 的 对象
 下面的 示例 展示了 如何 修改 类 在 封存 时 的 行为
 其 中 textreader  类 打开 了 一个 文本 文件 每次 调用 其 readline  方法 则返回 行 号 和 该 行 的 字符
 在 封存 这 个 textreader  的 实例时 除了 文件对象 其他 属性 都会被 保存
 当 解封 实例时 需要 重新 打开文件 然后 从 上 次 的 位置 开始 继续 读取
 实现 这些 功能 需要 实现 setstate  和 getstate  方法
file  file  使用 方法 如下所示 reader  textreaderhello
 类型 函数 和 其他对象 的 自定义 归 约
3
8 新版功能
 有 时 dispatchtable  可能不 够 灵活
 特别是 当 我们 想要 基于 对象类型 以外 的其他 规则 来 对 封存 进行 定制 或 是 当 我们 想要 对 函数和类 的 封存 进行 定制 的时候
 对 于 那些 情况 可能 要 基于 pickler  类 进行 子类化 并 实现 reduceroverride  方法
 此方法 可 返回 任意 的 归 约 元组 参见 reduce
 它 也 可以选择 返回 notimplemented  来 回退 到 传统 行为
 如果 同时 定义了 dispatchtable  和 reduceroverride  则 reduceroverride  方法 具有 优先 权
 注解 出 于 性能 理 由 可能不 会 为 以 下 对象 调用 reduceroverride  none  true  false  以及 int  float  bytes  str  dict  set  frozenset  list  和 tuple  的 具体 实例
 以下是 一个简单的例子 其 中我们 允许 封存 并 重新 构建 一个 给定的 类 import  io  import  pickle  class  myclass  myattribute 1 class  mypicklerpickle
 外部 缓冲区
3
8 新版功能
 在某些 场景 中 pickle  模块 会 被用来 传输 海 量 的 数据
 因此 最小 化 内存 复制 次 数 以 保证 性能 和 节 省 资源 是 很重要 的
 但是 pickle  模块 的 正常 运 作 会 将 图 类对象 结构 转换为 字节 序列 流 因此在 本 质 上 就 要 从 封存 流 中 来 回 复制 数据
 如果 provider  待 传输 对象类型的 实现 和 consumer  通信 系统 的 实现 都支持 pickle  第5 版 或更高 版本 所提供的 外部 传输 功能 则 此 约 束 可以被 撤 销
 提供 方 api
 使用 方 api
 当 序列化 一个 对象 图 时 通信 系统 可以 启用 对 所生成 picklebuffer  对象 的 定制 处理
 发送 端 需要 传递 buffercallback  参数 到 pickler  或 是 到 dump  或 dumps  函数 该 回调函数 将 在 封存 对象 图 时 附带 每个 所生成的 picklebuffer  被调用
 由 buffercallback  所 累积 的 缓冲区 的 数据 将 不会被 拷贝 到 pickle  流 而 是 仅 插入 一个简单的 标记
 接收 端 需要 传递 buffers  参数 到 unpickler  或 是 到 load  或 loads  函数 其 值 是一个 由 缓冲区 组成的 可迭代对象 它会被 传递给 buffercallback
 该 可迭代对象 应当 按 其 被传递给 buffercallback  时 的顺序 产生 缓冲区
 这些 缓冲区 将 提供 对象 重 构造器 所 期望的 数据 对 这些 数据 的 封存 产生 了 原 本 的 picklebuffer  对象
 在 发送 端 和 接受 端 之间 通信 系统 可以 自由 地 实现 它 自己 用 于 外部 缓冲区 的 传输 机制
 潜在 的 优化 包括 使用 共享内存 或 基于 特定 数据类型 的 压缩 等
 示例
 下面是一个 小 例子 在 其 中我们 实现了 一个 bytearray  的子类 能够 用 于 外部 缓冲区 封存 class  zerocopybytearraybytearray  def  reduceexself  protocol  if  protocol 5 return  typeself
 return  obj  else  return  clsobj  重 构造器 reconstruct  类 方法 会 在 缓冲区 的 提供 对象具有 正确 类型 时返回 该对象
 在 此 小 示例中 这是 模拟 零 拷贝 行为 的便捷 方式
 在 使用 方 我们可以 按 通常 方式 封存 那些 对象 它们在 反序列化 时 将 提供 原始 对象 的 一个 副本 b  zerocopybytearraybabc  data  pickle
loadsdata  printb  newb  true  printb  is  newb  false  a  copy  was  made  但是如果 我们 传入 buffercallback  然后 在 反序列化 时 给 回 累积 的 缓冲区 我们 就 能够 取 回 原始 对象 b  zerocopybytearraybabc  buffers  data  pickle
loadsdata  buffersbuffers  printb  newb  true  printb  is  newb  true  no  copy  was  made  这个例子 受限 于 bytearray  会 自 行 分配 内存 这 一 事实 你 无法 基于 另一个 对象 的内存 创建 bytearray  的 实例
 但是 第三方 数据类型 例如 numpy  数组 则 没有 这种 限制 允许在 单独 进程 或 系统 间 传输 时 使用 零 拷贝 的 封存 或 是 尽可能 少 地 拷贝
 参见 pep 574 带有 外部 数据 缓冲区 的 pickle  协议5
 限制 全局变量
 性能
 较 新版本的 pickle  协议 第2 版 或更高 具有 针对 某些 常见 特性 和 内置类型 的 高效 二进制 编码格式
 此外 pickle  模块还 拥有 一个 以 c  编写 的 透明 优化 器
 示例
 对 于 最简单的 代码 请使用 dump  和 load  函数
highestprotocol  以下示例 读取 之前 封存 的 数据
loadf  参见 模块 copyreg  为 扩展 类型 提供 pickle  接口 所需的 构造函数
 模块 pickletools  用于处理 和 分析 已 封存 数据 的工具
 模块 shelve  带 索引 的 数据库 用 于 存放 对象 使用了 pickle  模块
 模块 copy  浅 层 shallow  和 深 层 deep  复制 对象 操作 模块 marshal  高效 地 序列化 内置类型 的 数据
 脚注1 不 要 把它 与 marshal  模块 混 淆
2 这 就是 为什么 lambda  函数 不 可以被 封存 所有的 匿名 函数 都有 同 一个 名 字 lambda
3 抛出 的 异常 有可能 是 importerror  或 attributeerror  也可能 是 其他 异常
4 copy  模块 使用 这 一 协议 实现 浅 层 shallow  和 深 层 deep  复制 操作
5 对 字母数字 类 字符 的 限制 是由于 持久化 id  在 协议 版本0 中 是 由 分 行 符 来 分隔 的
 因此如果 持久化 id  中出现 任何 形式 的 分 行 符 封存 结果 就 将 变 得 无法 读取
multiprocessingsharedmemory  可 从 进程 直接访问 的 共享内存
loggingconfig  日志记录 配置
 源代码 libloggingconfig
pyimportant  此 页面 仅 包含 参考 信息
 有关 教程 请参阅 基础 教程 进 阶 教程 日志 操作 手册 这 一节 描述 了用于 配置 logging  模块 的 api
 配置 函数
 配置字典 架构
 描述 日志记录 配置 需要 列出 要创建 的不同 对象 及 它们 之间的 连接 例如 你可以 创建 一个名为 console  的 处理程序 然后 名为 startup  的 日志记录器 将 可以把 它 的 消息发送 给 console  处理程序
 这些 对象 并 不 仅限 于 logging  模块 所提供的 对象 因为 你 还可以 编写 你自己的 格式化 或 处理程序 类
 这些类 的 形参 可能 还需要 包括 sys
stderr  这样的 外部 对象
 描述 这些 对象 和 连接 的语法 会 在 下面的 对象 连接 中定义
 字典 架构 细节
 传给 dictconfig  的字典 必须 包含以下 的 键 version  应 设 为 代表 架构 版本 的 整数值
 目前 唯一 有效 的值是1 使用 此 键 可 允许 架构 在 继续 演 化 的 同时 保持 向下兼容 性
 所有其他 键 都是可 选项 但 如 存 在 它们将 根据 下面的 描述 来 解读
 在下面 提 到 configuring  dict  的 所有 情况下 都 将 检查 它 的 特殊 键 以 确定 是否 需要 自定义 实例化
 如果需要 则会使用 下面 用户定义 对象 所描述的 机制 来 创建一个 实例 否 则会使用 上下文 来确定 要 实例化 的 对象
 formatters  对应的值 将是一个 字典 其 中 每个键 是一个 格式 器 id  而 每 个 值 则 是一个 描述 如何 配置 相应 formatter  实例 的字典
 将 在 配置字典 中搜索 键 format  和 datefmt  默认值 均为 none  并且 这些 键 会 被用于 构造 formatter  实例
 在3
8 版更改 一个 validate  键 默认值为 true  可 被添加到 配置字 典 的 formatters  部分 这 会 被用来 验证 格式 的 有效 性
 filters  对应的值 将是一个 字典 其 中 每个键 是一个 过滤器 id  而 每个 值 则 是一个 描述 如何 配置 相应 filter  实例 的字典
 将 在 配置字典 中搜索 键 name  默认值为 空字符串 并且 该 键 会 被用于 构造 logging
filter  实例
 handlers  对应的值 将是一个 字典 其 中 每个键 是一个 处理程序 id  而 每 个 值 则 是一个 描述 如何 配置 相应 handler  实例 的字典
 将 在 配置字典 中搜索 下列 键 class  强制
 这是 处理程序 类 的完整 限定名称
 level  可选
 处理程序 的 级别
 formatter  可选
 处理程序 所对应 格式化 器 的 id
 filters  可选
 由 处理程序 所对应 过滤器 的 id  组成的列表
 所有 其他 键 会 被作为 关键字参数 传递给 处理程序 类 的 构造器
 例如 给 定 如 下 配置 handlers  console  class  logging
log  maxbytes 1024 backupcount 3 id  为 console  的 处理程序 会 被 实例化 为 logging
streamhandler  并 使 用 sys
stdout  作为 下层 流
 id  为 file  的 处理程序 会 被 实例化 为 logging
rotatingfilehandler  并附带 关键字参数 filenamelogconfig
 loggers  对应的值 将是一个 字典 其 中 每个键 是一个 日志记录器 名称 而 每 个 值 则 是一个 描述 如何 配置 相应 logger  实例 的字典
 将 在 配置字典 中搜索 下列 键 level  可选
 日志记录器 的 级别
 propagate  可选
 日志记录器 的 传播 设置
 filters  可选
 由 日志记录器 对 应 过滤器 的 id  组成的列表
 handlers  可选
 由 日志记录器 对 应 处理程序 的 id  组成的列表
 指定 的 日志记录器 将根据 指定 的 级别、 传播、 过滤器 和 处理程序 来 配置
 root  这 将 成为 根 日志记录器 对应的 配置
 配置 的 处理 方式 将 与 所有 日志 记录器 一致 除了 propagate  设置 将 不可用 之外
 incremental  配置 是否 要 被 解读为 在 现有 配置 上 新增
 该值 默认为 false  这意味着 指定 的 配置 将 以 与 当前 fileconfig  api  所使用的 相 同 语义 来 替代 现有的 配置
 如果指定 的 值 为 true  配置 会 按照 增量 配置 部分 所描述的 方式来 处理
 disableexistingloggers  是否 要 禁用 任何 现有的 非 根 日志记录器
 该 设置 对应于 fileconfig  中 的 同名 形参
 如果省略 则 此 形参 默认为 true
 如果 incremental  为 true  则 该 省 会被忽略
 增量 配置
 为 增量 配置 提供 完全 的 灵活 性 是 很 困 难 的
 例如 由 于 过滤器 和 格式化 器 这样的 对象 是 匿名 的 一旦 完成 配置 在 增加 配置 时就 不可能 引用 这些 匿名 对象
 此外 一旦 完成 了 配置 在运行时 任意 改变 日志记录器、 处理程序、 过滤器、 格式化 器 的 对象 图 就不 是 很 有必要 日志记录器 和 处理程序 的 详细 程度 只需 通过 设置 级别 即可 实现 控制 对 于 日志记录器 则 可 设置 传播 旗标
 在 多线程 环境中 以 安全 的方式 任意 改变 对象 图 也 许 会导致 问题 虽然 并非 不可能 但 这样做 的 好处 不 足以 抵 销 其 所 增加 的 实现 复杂 度
 这样 当 配置字典 的 incremental  键 存 在 且 为 true  时 系统 将 完全 忽略 任何 formatters  和 filters  条目 并 仅 会 处理 handlers  条目 中 的 level  设置 以及 loggers  和 root  条目 中 的 level  和 propagate  设置
 使用 配置字典 中的值 可 让 配置 以 封存 字典 对象 的形式 通过 线 路 传 送给 套接字 监听 器
 这样 长时间 运行 的 应用程序 的日志记录 的 详细 程度 可 随 时间 改变 而无 须 停止 并 重新 启动 应用程序
 对象 连接
 用户定义 对象
 此 架构 支持 用户定义 对象作为 处理程序、 过滤器 和 格式化 器
 日志记录器 的不同 实例 不需要 具有 不同类型 因此这 个 配置 架构 并 不支持 用户定义 日志记录器 类
 要 配置 的 对象 是 由 字典 描述 的 其中包含 它们的 配置 详情
 在某些 地方 日志记录 系统 将 能够 从 上下文中 推 断 出 如何 实例化 一个 对象 但是 当 要 实例化 一个 用户自定义 对象 时 系统 将 不 知道 要 如何 做
 为 了 提供 用户自定义 对象 实例化 的 完全 灵活 性 用户 需要 提供一个‘ 工厂’ 函数—— 即 在 调用时 传入 配置字典 并返回 实例化 对象 的可调用对象
 这是 用 一个 通过 特殊 键 来访问 的 工厂函数 的绝对 导入 路径 来 标 示 的
 下面是一个 实际 的 例子 formatters  brief  format  messages  default  format  asctimes  levelname 8 s  name 15 s  messages  datefmt  ymd  hms  custom  my
9 answer 42 上面的 yaml  代码 片段 定义了 三个 格式化 器
 第一个 的 id  为 brief  是 带有 特殊 格式字符串 的 标准 logging
formatter  实例
 第二个 的 id  为 default  具有 更 长 的 格式 同时 还 显式地 定义了 时间 格式 并 将 最终 实例化 一个带有 这两个 格式字符串 的 logging
formatter
 以 python  源代码 形式 显示 的 brief  和 default  格式化 器 分别 具有 下列 配置 子 字典 format  messages  和 format  asctimes  levelname 8 s  name 15 s  messages  datefmt  ymd  hms  并且 由 于这些 字典 不包含 特殊 键 实例化 方式是 从 上下文中 推 断 出来 的 结果会 创建 标准 的 logging
formatter  实例
 第三个 格式 器 的 id  为 custom  对 应 配置 子 字典 为 my
9 answer 42 并且 它包含 特殊 键 这意味着 需要 用户自定义 实例化 方式
 在此情况下 将 使用 指定 的工厂 可调用对象
 如果它 本身 就是 一个可调用对象 则 将 被 直接使用—— 否则 如果你 指定了 一个字符串 如 这个例子 所示 则 将 使用 正常的 导入机制 来 定位 实例 的可调用对象
 调用 该 可调用对象 将 传入 配置 子 字典中 剩余 的 条目 作为 关键字参数
 在 上面的例子 中 调用 将 预期 返回 id  为 custom  的 格式化 器 my
9 answer 42 将 用 作 特殊 键 是 因为它 不 是 一个有效的 关键字形参 名称 这样就 不 会 与 调用 中使用的 关键字参数 发生 冲突
 还 被用作 表明 对 应 值 为 可调用对象 的 助 记 符
 访问 外部 对象
 访问 内部 对象
 除了 外部 对象 有 时 还需要 引用 配置 中 的 对象
 这 将 由 配置 系统 针对 它 所 了解 的内容 隐式地 完成
 例如 在 日志记录器 或 处理程序 中 表示 level  的 字符串 值 debug  将 被 自动 转换为 值 logging
debug  而 handlersfilters  和 formatter  条目 将 接受一个 对象 id  并 解析为 适当的 目标 对象
 但 是对于 logging  模块 所 不 了解 的 用户自定义 对象 则需要 一种 更 通用的 机制
 例如 考虑 logging
memoryhandler  它接受一个 target  参数 即 其 所 委托 的 另一个 处理程序
 由 于 系统 已经 知道 存 在 该 类 因而 在 配置 中 给定的 target  只需 为 相应 目标 处理程序 的 的 对象 id  即可 而 系统 将根据 该 id  解析 出 处理程序
 但是如果 用户 定义了一个 具有 alternate  处理程序 的 my
myhandler  则 配置 程序 将 不 知道 alternate  指向 的 是一个 处理程序
 为 了 应 对 这种情况 通 用 解析 系统 允许用户 指定 handlers  file  configuration  of  file  handler  goes  here  custom  my
file  字符串字面值 cfghandlers
file  将 按照 与 ext  前缀 类似 的方式 被解析 为 结果 字符串 但 查找 操作 是 在 配置 自身 而不是 在 导入 命名空间中 进行
 该 机制 允许 按 点 号 或 按 索引 来访问 与 str
format  所提供的 方式 类似
 这样 给定 以下代码 段 handlers  email  class  logging
 在 该 配置 中 字符串 cfghandlers  将 解析为 带有 handlers  键 的字典 字符串 cfghandlers
email  将 解析为 handlers  字典中 带有 email  键 的字典 依 此类推
 字符串 cfghandlers
toaddrs 1 将 解析为 devteam
tld  而 字符串 cfghandlers
toaddrs 0 将 解析为 值 supportteamdomain
 subject  值 可以使用 cfghandlers
subject  或者 等价 的 cfghandlers
emailsubject  来访问
 后 一种 形式 仅在 键 包含 空格 或 非 字母数字 类 字符 的情况下 才 需要使用
 如果一个 索引 仅 由 十进制数 码 构成 则 将 尝试 使用 相应的 整数值 来访问 如果 有必要 则 将 回退 为 字符串 值
 给定 字符串 cfghandlers
123 这 将 解析为 configdicthandlersmyhandlermykey 123
 如果 字符串 被 指定 为 cfghandlers
mykey 123 系统 将 尝试 从 configdicthandlersmyhandlermykey 123 中提取 值 并 在 尝试 失败时 回退 为 configdicthandlersmyhandlermykey 123
 导入 解析 与 定制 导入 器
 导入 解析 默认 使用内置 的 import  函数 来执行 导入
 你可能 想要 将 其 替换为 你自己的 导入机制 如果 是这样的 话 你可以 替换 dictconfigurator  或 其 超 类 baseconfigurator  类 的 importer  属性
 但是 你必须 小 心 谨 慎 因为 函数 是 从 类 中 通过 描述器 方式来 访问 的
 如果你使用 python  可调用对象 来执行 导入 并且 你希望 在 类 层级 而不是 在 实例 层级 上 定义 它 则 你需要 用 staticmethod  来 装饰 它
 例如 from  importlib  import  importmodule  from  logging
importer  staticmethodimportmodule  如果你 是 在 一个 配置 器 的 实例 上 设置 导入 可调用对象 则 你 不需要 用 staticmethod  来 装饰
 配置文件 格式
 其他 图形 用户界面 gui  包
bdb  debugger  framework
 定义了以下 异常 exception  bdb
3
2 新版功能
3
1 新版功能 skip  参数
 for  more  information  on  code  and  frame  objects  refer  to  标准类型层级结构
3
2 新版功能
tracemalloc  跟踪 内存分配
3
4 新版功能
 源代码 libtracemalloc
 示例
 显示 前10 项
 显示 内存分配 最多 的10 个 文件 import  tracemalloc  tracemalloc
statisticslineno  print  top 10 for  stat  in  topstats 10 printstatpython  测试 套件 的 输出 示例 top 10 frozen  importlib
 计算 差异
 获取 两个 快 照 并 显示 差异 import  tracemalloc  tracemalloc
get  the  traceback  of  a  memory  block
pretty  top
takesnapshot  displaytopsnapshotpython  测试 套件 的 输出 示例 top 10 lines 1 libbase 64
gettracedmemory  printffirstsize  firstpeak  printfsecondsize  secondpeak  输出 firstsize 664 firstpeak 3592984 secondsize 804 secondpeak 29704 using  resetpeak  ensured  we  could  accurately  record  the  peakduring  the  computation  of  smallsum  even  though  it  is  much  smallerthan  the  overall  peak  size  of  memory  blocks  since  the  start  call
api
 函数
3
9 新版功能
 域 过滤器
3
6 新版功能
 过滤器
filterinclusive  bool  filenamepattern  str  lineno  intnone  allframes  boolfalse  domain  intnone  对 内存块的 跟踪 进行 筛选
 示例 filtertrue  subprocess
file  excludes  traces  of  the  tracemalloc  module  filterfalse  unknown  excludes  empty  tracebacks  在3
5 版更改 the 
pyo  file  extension  is  no  longer  replaced  with 
 在3
6 版更改 added  the  domain  attribute
frame
 快 照
 统计
statisticdiff
 跟踪
 在3
6 版更改 added  the  domain  attribute
 回溯
 在3
7 版更改 frames  are  now  sorted  from  the  oldest  to  the  most  recent  instead  of  most  recent  to  oldest
 在3
9 版更改 the  traceback
totalnframe  attribute  was  added
 示例 printtraceback  most  recent  call  first  for  line  in  traceback  printline  输出 traceback  most  recent  call  first  file  test
json  json  编码和解码 器
 源代码 libjsoninit
pyjson  javascript  object  notation  由 rfc 7159 which  obsoletesrfc 4627 和 ecma 404 指定 是一个 受 javascript  的 对象 字面 量 语法 启 发 的 轻 量 级 数据 交换 格式 尽管 它 不 仅仅 是一个 严格 意义 上 的 javascript  的 字 集1
json  提供了 与 标准库 marshal  和 pickle  相似的 api  接口
 对 基本的 python  对象 层次结构 进行编码 import  json  json
getvalue  streaming  api  紧凑 编码 import  json  json
dumps 1234567 separators 1234567 美化 输出 import  json  printjson
dumps 4567 sortkeystrue  indent 44567 json  解码 import  json  json
loadio  streaming  api  特殊 json  对象 解码 import  json  def  ascomplexdct 
1 扩展 jsonencoder  import  json  class  complexencoderjson
0 从 命令行 使用 json
tool  来 验证 并 美化 输出 echo  jsonobj  python  m  json
tool  expecting  property  name  enclosed  in  double  quotes  line 1 column 2 char 1 详细 文档 请参见 命令行界面
 注解 json  是 yaml 1
2 的一个子 集
 由 该模块 的 默认 设置 生成 的 json  尤其 是 默认 的 分隔符 设置 值 也是 yaml 1
1 的一个子 集
 因此 该模块 也 能够 用 于 序列化 为 yaml
 注解 这个模块 的 编码器 和 解码器 默认 保护 输入和输出 的顺序
 仅当 底层 的容器 未 排 序 时才会 失 去 顺序
 在 python 3
7 之前 dict  并 不保证 有 序 因此 输入 和 输出 通常 都 是 乱 序 的 除非 是 明确 地 请求 collections
ordereddict
 从 python 3
7 开始 普通的 dict  会保留 顺序 因此 不必 再 为 json  的 生 成 和 解析 指定 使用 collections
ordereddict
 基本 使用
 编码器 和 解码器
 异常
jsondecodeerrormsg  doc  pos  拥 有以下 附加 属性 的 valueerror  的子类 msg  未 格式化 的 错误消息
 doc  正 在 解析 的 json  文档
3
5 新版功能
 标准 符合 性 和 互 操作 性
json  格式 由 rfc 7159 和 ecma 404 指定
 此 段落 详细 讲 了 这个模块 符合 rfc  的 级别
 简单 来说 jsonencoder  和 jsondecoder  子类 和 明确 提 到 的 参数 以外的 参数 不 作 考虑
 此模块 不 严格 遵循 于 rfc  它 实现 了一些 扩展 是有效的 javascript  但不 是有效的 json
 尤其 是 无限 和 nan  数值 是 被 接受 并 输出 对象 内 的 重复 名称 是 接受 的 并且 仅 使用 最后一 对 属性 值 对 的 值
 自 从 rfc  允许 符合 rfc  的 语法分析程序 接收 不 符合 rfc  的 输入 文本 以 来 这个模块 的 解 串 器 在 默认 状态 下 默认 符合 rfc 
 字符 编码
infinite  和 nan  数值
rfc  不允许 infinite  或者 nan  数值 的 表达 方式
 尽管 这样 默认情况下 此模块 接受 并且 输出 infinity  infinity  和 nan  好 像 它们 是有效的 json  数字 字面值 neither  of  these  calls  raises  an  exception  but  the  results  are  not  valid  json  json
loadsnan  nan  序列化 器 中 allownan  参数 可用于 替代 这 个 行为
 反序列化 器 中 parseconstant  参数 可用于 替代 这 个 行为
 对象中的 重复 名称
rfc  具体 说明 了 在 json  对象 里 的名字 应该是 唯一的 但 没有 规 定 如何处理 json  对象中的 重复 名称
 默认 下 此模块 不 引发异常 作为 替代 对 于给定 名 它 将 忽略 除 姓 值 对 之外 的 所有对 weirdjson  x 1 x 2 x 3 json
 顶 级 非 对象 非 数组 值
 过 时 的 rfc 4627 指定 的 旧版本 json  要求 json  文本 顶 级 值 必须是 json  对象 或 数组 python  dict  或 list  并且不 能 是 json  null  值 布尔值 数值 或者 字符串 值
 rfc 7159 移除 这 个 限制 此模块 没有 并且 从未 在 序列化 器 和 反序列化 器 中 实现 这 个 限制
 无论 如何 为 了 最大 化 地 获取 互 操作 性 你可能 希望 自己 遵 守 该 原 则
 实现 限制
 一些 json  反序列化 器 的 实现 应该 在以下 方面 做 出 限制 可接受 的 json  文本 大小 嵌套 json  对象 和 数组 的 最高 水 平 json  数字 的范围 和 精度 json  字符串 的内容 和 最大 长度 此模块 不 强制 执行任何 上述 限制 除了 相关的 python  数据类型 本身 或者 python  解释器 本身 的 限制 以外
 当 序列化 为 json  在 应用中 当 心 此 类 限制 这可能 破坏 你 的 json 
 特别是 通常 将 json  数字 反序列化 为 ieee 754 双精度 数字 从而 受到 该 表示 方式 的范围 和 精度 限制
 这是 特别 相关的 当 序列化 非常 大 的 python  int  值 时 或者 当 序列化 exotic  数值 类型的实例 时 比如 decimal
decimal 
 命令行界面
 源代码 libjsontool
 如果未指定 可选的 infile  和 outfile  参数则 将 分别 使用 sys
stdin  和 sys
stdout  echo  json  obj  python  m  json
tool  expecting  property  name  enclosed  in  double  quotes  line 1 column 2 char 1 在3
5 版更改 输出 现在将 与 输入 顺序 保持 一致
 请使用 sortkeys  选项 来 将 输出 按照 键 的 字母 顺序 排序
 命令行选项
infile  要 被 验证 或 美化 打印 的 json  文件 python  m  json
json  title  and  now  for  something  completely  different  year 1971 title  monty  python  and  the  holy  grail  year 1975 如果 infile  未指定 则 从 sys
stdin  读取
outfile  将 infile  输出 写入到 给定的 outfile
 在其他情况下 写入到 sys
sortkeys  将 字典 输出 按照 键 的 字母 顺序 排序
3
5 新版功能
noensureascii  禁用 非 ascii  字符 的 转义 详情参见 json
dumps
3
9 新版功能
jsonlines  将每个 输入 行 解析为 单独的 json  对象
3
8 新版功能
indent  tab  noindent  compact  用 于 空白符 控制 的 互 斥 选项
3
9 新版功能
h  help  显示 帮助消息
 脚注1 正 如 rfc 7159 的 勘 误 表 所 说明 的 json  允许 以 字符串表示 字面值 字符 u 2028 line  separator  和 u 2029 paragraph  separator  而 javascript  在 ecmascript 5
1 版 中 不允许
dbm  unix  数据库 接口
dbmgnu  gnu  对 dbm  的 重 解析
 源代码 libdbmgnu
py  此模块 与 dbm  模块 很 相似 但是 改 用 gnu  库 gdbm  来提供 某些 附加 功能
 请注意 由 dbm
gnu  与 dbm
ndbm  所创建的 文件格式 是 不兼容 的
dbm
gnu  模块提供了 对 gnu  dbm  库 的 接口
 dbm
gdbm  对象 的 行为 类似于 映射 字典 区别在于 其 键和值 总是会 在 存储 之前 被转换为 字节串
 打印 gdbm  对象 不 会 打印出 键和值 并且 items  和 values  等 方法也 不受支持
error  针对 dbm
gnu  专属 错误 例如 io  错误 引发
 keyerror  的 引发 则 针对 一般 映射 错误 例如 指定了 不 正确的 键
openfilename  flag  mode  打开一个 gdbm  数据库 并返回 gdbm  对象
 filename  参数为 数据库 文件 名称
 可选的 flag  参数可以 是 值 意义 r  以 只读 方式打开 现有 数据库 默认 w  以读写 方式打开 现有 数据库 c  以读写 方式打开 数据库 如果不 存在则 创建 它 n  始终 创建一个新的 空 数据库 以读写 方式打开 下列 附加 字符 可 被添加 至 旗标 以 控制 数据库 的 打开 方式 值 意义 f  以 快速 模式打开 数据库
 写入 数据库 将不会 同步
 s  同步 模式
 这 将导致 数据库 的 更改 立即 写入文件
 u  不 要 锁定 数据库
 不 是所有 旗标 都 可用于 所有 版本 的 gdbm
 模块 常量 openflags  为 包 含 受支持 旗标 字符 的 字符串
 如果指定了 无效的 旗标 则会引发 error
 可选的 mode  参数 是 文件 的 unix  模式 仅在 要创建 数据库 时才会 被使用
 其 默认值为 八进制 数0 o 666
 除了 与 字典 类似 的 方法 gdbm  对象 还有 以下方法 gdbm
firstkey  使用 此方法 和 nextkey  方法可以 循环 遍历 数据库中 的 每个键
 遍历 的顺序 是 按照 gdbm  的 内部 哈希值 而不会 根据 键 的 值 排序
 此方法 将 返回 起始 键
nextkeykey  在 遍历 中 返回 key  之后的 的下一个 键
 以下代码 将打印 数据库 db  中的每个 键 而不会 在内存中 创建 一个包含 所有 键 的 列表 k  db
reorganize  如果你 进行 了 大量 删除 操作 并且 想要 缩 减 gdbm  文件 所使用的 空间 此 例 程 将 可 重新 组织 数据库
 除非 使用 此 重 组 功能 否则 gdbm  对象 不 会 缩 减 数据库 文件 大小 在其他情况下 被 删除 的 文件 空间 将 会保留 并 在 添 加 新 的 键 值 对 时 被 重 用
sync  当 以 快速 模式打开 数据库 时 此方法会 将 任何 未 写入 数据 强制 写入 磁盘
close  关闭 gdbm  数据库
dbmndbm  基于 ndbm  的 接口
 源代码 libdbmndbm
pydbm
ndbm  模块提供了 对 unix  ndbm  库 的 接口
 dbm  对象 的 行为 类似于 映射 字典 区别在于 其 键和值 总是 被 存储为 字节串
 打印 dbm  对象 不 会 打印出 键和值 并且 items  和 values  等 方法也 不受支持
 此模块 可 与 经 典 classic  ndbm  接口 或 gnu  gdbm  兼容 接口 一 同 使用
 在 unix  上 configure  脚本 将 尝试 定位 适当的 头文件 来 简化 此模块 的 构建
error  针对 dbm
ndbm  专属 错误 例如 io  错误 引发
 keyerror  的 引发 则 针对 一般 映射 错误 例如 指定了 不 正确的 键
library  所使用的 ndbm  实现 库 的 名称
openfilename  flag  mode  打开一个 dbm  数据库 并返回 ndbm  对象
 filename  参数为 数据库 文件 名称 不带
dir  或
pag  扩展名
 可选的 flag  参数必须是 下列 值 之一 值 意义 r  以 只读 方式打开 现有 数据库 默认 w  以读写 方式打开 现有 数据库 c  以读写 方式打开 数据库 如果不 存在则 创建 它 n  始终 创建一个新的 空 数据库 以读写 方式打开 可选的 mode  参数 是 文件 的 unix  模式 仅在 要创建 数据库 时才会 被使用
 其 默认值为 八进制 数0 o 666 并 将 被 当前的 umask  所 修改
 除了 与 字典 类似 的 方法 ndbm  对象 还有 以下方法 ndbm
close  关闭 ndbm  数据库
dbmdumb  便 携 式 dbm  实现
 源代码 libdbmdumb
py  注解 dbm
dumb  模块 的 目 的 是 在 更 健 壮 的 模块 不可用 时 作为 dbm  模块 的 最终 回 退 项
 dbm
dumb  不 是 为 高 速 运行 而 编写 的 也不 像 其他 数据库 模块 一样 被 经常 使用
dbm
dumb  模块提供了一个 完全 以 python  编写 的 持久化 字典 类 接口
 不同于 dbm
gnu  等 其他模块 它 不需要 外部 库
 与其他 持久化 映射 一样 它 的键和值 也 总是 被 存储为 字节串
 该 模块定义 以 下内容 exception  dbm
error  针对 dbm
dumb  专属 错误 例如 io  错误 引发
 keyerror  的 引发 则 针 对 一般 映射 例如 指定了 不 正确的 键
openfilename  flag  mode  打开一个 dumbdbm  数据库 并返回 dumbdbm  对象
 filename  参数为 数 据库 文件 的 主 名称 不带 任何 特定 扩展名
 创建一个 dumbdbm  数据库 时 将 创建 多个 带有
dat  和
dir  扩展名 的 文件
 可选的 flag  参数可以 是 值 意义 r  以 只读 方式打开 现有 数据库 默认 w  以读写 方式打开 现有 数据库 c  以读写 方式打开 数据库 如果不 存在则 创建 它 n  始终 创建一个新的 空 数据库 以读写 方式打开 可选的 mode  参数 是 文件 的 unix  模式 仅在 要创建 数据库 时才会 被使用
 其 默认值为 八进制 数0 o 666 并 将 被 当前的 umask  所 修改
 警告 当 载入 包含 足够 巨 大 复杂 条目 的 数据库 时 有 可能导致 python  解释器 的 崩 溃 这 是由于 python  ast  编译器 有 栈 深度 限制
 在3
5 版更改 open  在 flag  值 为 n  时 将总是 创建一个新的 数据 库
 在3
8 版更改 附带 r  旗标 打开 的 数据库 现在将 是 只读 的
 附带 r  和 w  旗标 的 打开 操作 不会再 创建 数据库
 除了 collections
mutablemapping  类 所提供的 方法 dumbdbm  对 象 还提供了 以下方法 dumbdbm
sync  同步 磁盘 上 的 目录 和 数据 文件
 此方法会 由 shelve
sync  方法来 调 用
close  关闭 dumbdbm  数据库
zoneinfo  iana  时区 支持
3
9 新版功能
zoneinfo  模块 根据 pep 615 的 最初 说明 提供了 具体 的时区 实现 来 支持 iana  时区数据 库
 按照 默认 设置 zoneinfo  会 在 可能 的情况下 使用 系统 的 时区数据 如果 系统 时区数据 不可用 该 库 将 回退 为 使用 pypi  上 提供的 tzdata  第一 方 包
 参见 模块 datetime  提供 time  和 datetime  类型 zoneinfo  类 被设计为 可 配合 这两个 类型 使用
 包 tzdata  由 cpython  核心 开发者 维护 以 通过 pypi  提供 时区数据 的第一 方 包
 使用 zoneinfo
zoneinfo  是 datetime
tzinfo  抽象基类 的 具体实现 其 目标 是通过 构造器、 datetime
replace  方法 或 datetime
astimezone  来 与 tzinfo  建立 关联 from  zoneinfo  import  zoneinfo  from  datetime  import  datetime  timedelta  dt  datetime 2020103112 tzinfozoneinfoamericalosangeles  printdt 202010311200000700 dt
tzname  pdt  以 此 方式 构造 的 日期 时间 对象 可 兼容 日期 时间 运算 并 可 在 无需 进一步 干 预 的情况下 处理 夏 令 时 转换 dtadd  dt  timedeltadays 1 printdtadd 202011011200000800 dtadd
tzname  pst  这些 时区 还 支持 在 pep 495 中 引入 的 fold
 在 可能导致 时间 歧义 的 时差 转换 中 例如 夏 令 时 到 标准 时 的 转换 当 fold 0 时 会 使用 转换 之前的 时差 而 当 fold 1 时 则 使用 转换 之后 的 时差 例如 dt  datetime 20201111 tzinfozoneinfoamericalosangeles  printdt 202011010100000700 printdt
replacefold 1202011010100000800 当 执行 来自 另一 时区的 转换 时 fold  将 被设置为 正确的 值 from  datetime  import  timezone  losangeles  zoneinfoamericalosangeles  dtutc  datetime 20201118 tzinfotimezone
 数据 源
zoneinfo  模块 不 直接 提供 时区数据 而 是 在 可能 的情况下 从 系统 时区数据 库 或 pypi  上 的第一 方 包 tzdata  获取 时区 信息
 某些 系统 重要的 一点 是 windows  系统 也 包括在 内 并没有 可用的 iana  数据库 因此 对 于 要 保证 获取 时区 信息 的 跨平台 兼容性 的项目 推荐 对 tzdata  声明 依赖
 如果 系统 数据 和 tzdata  均 不可用 则 所有对 zoneinfo  的 调用 都 将引发 zoneinfonotfounderror
 配置 数据 源
 当 zoneinfokey  被调用时 此 构造器 首先 会 在 tzpath  所指定的 目录 下 搜索 匹配 key  的 文件 失败时 则会在 tzdata  包 中查找 匹配
 此行为 可通过 三 种方式来 配置1
 默认 的 tzpath  未 通过 其他方 式 指定 时 可 在 编译时 进行 配置
 tzpath  可 使用 环境变量 进行 配置
 在 运行时 搜索路径 可 使用 resettzpath  函数来 修改
 编译时 配置 默认 的 tzpath  包括 一些 时区数据 库 的通用 布 署 位置 windows  除外 该 系统 没有 时区数据 的通用 位置
 在 posix  系统中 下 游 分发 者 和 从 源码 编译 python  的 开发者 知道 系统 时区数据 布 署 位置 他们 可以通过 指定 编译时 选项 tzpath  或者 更 常见的 是通过 configure  旗标 withtzpath  来 改变 默认 的时区 路径 该 选项 应当 是一个 由 os
pathsep  分隔 的 字符串
 在 所有平台 上 配置 值 会 在 sysconfig
getconfigvar  中 以 tzpath  键 的形式 提供
 环境 配置 当 初始化 tzpath  时 在 导入时 或 不带参数 调用 resettzpath  时 zoneinfo  模块 将 使用 环境变量 pythontzpath  如果 变量 存在则 会 设置 搜索路径
pythontzpath  这是一个 以 os
pathsep  分隔 的 字符串 其中包含 要使用的 时区 搜索路径
 它必须 仅 由 绝对 路径 而非 相对路径 组成
 在 pythontzpath  中 指定 的 相对路径 部分 将 不会被 使用 但 在其他情况下 当 指定 相对路径 时 的 行为 该 实 现 是 有定义 的 cpython  将引发 invalidtzpathwarning  而 其他 实现 可 自 由 地 忽略 错误 部分 或 是 引发异常
 要 设置 让 系统 忽略 系统 数据并 改 用 tzdata  包 请 设置 pythontzpath
 运行时 配置 tz  搜索路径 也可 在运行时 使用 resettzpath  函数来 配置
 通常 并 不 建议 如 此操作 不 过 在 需要使用 指定 时区 路径 或者 需要 禁止 访问 系统 时区的 测试 函数 中 使用 它 则 是 合理的
zoneinfo  类
 字符串表示
 当 在 zoneinfo  对象 上调用 str  时返回 的 字符串表示 默认 会 使用 zoneinfo
key  属性 参见 该 属性 文档中 的 用 法 注释 zone  zoneinfopacifickwajalein  strzone  pacifickwajalein  dt  datetime 202041315 tzinfozone  fdt
tzinfo 20200401 t 0315001200 pacifickwajalein  对 于 基于 文件 而非 指定 key  形参 所 构建 的 对象 str  会 回退 为 调用 repr
 zoneinfo  的 repr  是 由 具体实现 定义 的 并且 不一定 会 在不同 版本 间 保持 稳定 但它 保证 不 会 是 一个有效的 zoneinfo  键
 封存 序列化
zoneinfo  对象 的 序列化 是基于 键 的 而不是 序列化 所有 过 渡 数据 并且 基于 文件 构造 的 zoneinfo  对象 即使 是 指定了 key  值 的 对象 不 能 被 封存
zoneinfo  文件 的 行为 取决于 它 的 构造 方式1
 zoneinfokey  当使用 主 构造器 构造 时 会 基于 键 序列化 一个 zoneinfo  对象 而 当 反序列化 时 反序列化 过程 会 使用 主 构造器 因此 预 期 它们 与其他 对 同一 时区的 引用 会 是 同一 对象
 例如如果 europeberlinpkl  是一个包含 基于 zoneinfoeuropeberlin  构建 的 封存 数据 的 字符串 你可以 预期 出现 以 下 的 行为 a  zoneinfoeuropeberlin  b  pickle
nocachekey  当 通过 绕 过 缓存 的 构造器 构造 时 zoneinfo  对象 也会 基于 键 序列化 但 当 反序列化 时 反序列化 过程 会 使用 绕 过 缓存 的 构造器
 如果 europeberlinpklnc  是一个包含 基于 zoneinfo
nocacheeuropeberlin  构造 的 封存 数据 的 字符串 你可以 预期 出现 以 下 的 行为 a  zoneinfoeuropeberlin  b  pickle
fromfilefobj  keynone  当 通过 文件 构造 时 zoneinfo  对象 会 在 封存 时 引发异常
 如果 最终 用户 想要 封存 通过 文件 构 造 的 zoneinfo  则 推荐 他们 使用 包装 类型 或 自定义 序列化 函数 或者 基于 键 序列化 或者 存储 文件对象 的内容 并将其 序列化
 该 序列化 方法 要求 所需 键 的 时区数据 在 序列化 和 反序列化 中 均可 用 类似于 在 序列化 和 反序列化 环境中 都 预期 存 在 对 类和函数 的 引用 的方式
 这 还 意味着 在具有 不同 时区数据 版本 的 环境中 当 解封 被 封存 的 zoneinfo  时 并不会 保证 结果的 一致性
 函数
availabletimezones  获取 一个包含 可 用 iana  时区的 在 时区 路径 的 任何 位置 均 可用的 全部 有效 键 的 集合
 每次 调用 该函数 时 都会 重新 计算
 此 函数 仅 包括 规范 时区 名称 而 不包括 特殊 时区 如 位于 posix  和 right  目录 下 的时区 或 posixrules  时区
 警告 此 函数 可能会 打开 大量 的 文件 因为 确定 时区 路径 上 某个 文件 是否为 有效 时区 的最佳 方式是 读取 开头 位置 的 魔 术 字符串
 注解 这些 值 并 不 被设计用 来 对 外 公开 给 最终 用户 对 于 面向 用户 的 元素 应用 程序 应当使用 cldr  unicode  通 用 区域 数据 存储 库 之 类 来获取 更 为 用户 友 好 的 字符串
 另请参阅 zoneinfo
key  中 的 提示 性 说明
resettzpathtonone  设置或 重置 模块 的时区 搜索路径 tzpath
 当 不带参数 调用时 tzpath  会 被设为 默认值
 调用 resettzpath  将不会 使 zoneinfo  缓存 失效 因而 在 缓存 未 命 中 的情况下 对 主 zoneinfo  构造器 的 调用 将 只 使用 新 的 tzpath
 to  形参 必须是 由 字符串或 os
pathlike  组成的 sequence  或 而不是 字符串 它们 必须 都 是 绝对 路径
 如果所 传入的 不 是 绝对 路径 则将引发 valueerror
 全局变量
tzpath  一个 表示 时区 搜索路径 的只读 序列 当 通过 键 构造 zoneinfo  时 键 会 与 tzpath  中的每个 条目 进行 合并 并 使用 所 找到 的第一个 文件
 tzpath  可以 只包含 绝对 路径 绝 不包含 相对路径 无论 它 是如何 配置 的
 zoneinfo
tzpath  所指向的 对象 可能 随着 对 resettzpath  的 调用 而 改变 因此 推荐 使用 zoneinfo
tzpath  而不是 从 zoneinfo  导入 tzpath  或 是 将 zoneinfo
tzpath  赋值给 一个长 期 变量
 有关 配置 时区 搜索路径 的 更多信息请参阅 配置 数据 源
 异常 与 警告
zoneinfonotfounderror  当 一个 zoneinfo  对象 的 构造 由 于 在 系统中 找不到 指定 的 键 而 失败时 引发
 这是 keyerror  的一个子类
invalidtzpathwarning  当 pythontzpath  包含 将 被 过滤 掉 的 无效 组件 例如 一个 相对路径 时引发
fileinput  迭代 来自 多个 输入 流 的 行
 二进制数据 服务
 本章 介绍 的 模块 提供了一些 操作 二进制数据 的基本 服务 操作
 有关 二进制数据 的其他 操作 特别是 与 文件格式 和 网络 协议 有关 的 操作 将 在 相关 章节 中 介绍
 下面 描述 的一些 库 文本 处理 服务 也可以使用 ascii  兼容的 二进制 格式 例如 re  或 所有 二进制数据 例如 difflib 
 另外 请参阅 python  的内置 二进制 数据类型 的 文档 二进制 序列类型 bytes  bytearray  memoryview 
 struct  将 字节串 解读为 打包的 二进制数据 函数 和 异常 格式字符串 字节顺序 大小和 对齐方 式 格式字符 示例 类 codecs  编解码器 注册 和 相关 基类 编解码器 基类 错误处理 方案 无 状态 的 编码和解码 增量 式 的 编码和解码 incrementalencoder  对象 incrementaldecoder  对象 流式 的 编码和解码 streamwriter  对象 streamreader  对象 streamreaderwriter  对象 streamrecoder  对象 编码格式 与 unicode  标准 编码 python  专属的 编码格式 文 字 编码 二进制 转换 文 字 转换 encodings
idna  应用程序中 的 国际化 域名 encodings
mbcs  windows  ansi  代码 页 encodings
utf 8 sig  带 bom  签名 的 utf 8 编解码器
aifc  读写 aiff  和 aifc  文件
binascii  二进制 和 ascii  码 互 转
 数字 和 数学 模块
collections  容器 数据类型
py  这个模块 实现了 特定 目标 的容器 以提供 python  标准 内建 容器 dict  list  set  和 tuple  的替代 选择
 namedtuple  创建 命名元组 子类 的 工厂函数 deque  类似 列表 list  的容器 实现了 在 两 端 快速 添加 append  和 弹出 pop  chainmap  类似 字典 dict  的容器 类 将 多个 映射 集合 到 一个 视图 里面 counter  字典 的 子 类提供了 可哈希 对象 的计数 功能 ordereddict  字典 的子类 保存 了 他们 被添加 的顺序 defaultdict  字典 的子类 提供了一个 工厂函数 为 字典 查询 提供一个 默认值 userdict  封装 了 字典 对象 简化 了 字典 子类化 userlist  封装 了 列表对象 简化 了 列表 子类化 userstring  封装 了 列表对象 简化 了 字符串 子类化 deprecated  since  version 3
10 已 将 容器 抽象基类 移至 collections
abc  模块
 为 了 保持 向下兼容 性 它们在 python 3
9 版 的 这个模块 中 仍然 存 在
chainmap  对象
3
3 新版功能
 一个 chainmap  类 是为了 将 多个 映射 快速 的 链接到 一起 这样 它们 就可以 作为一个 单元 处理
 它通常 比 创建一个新 字典 和 多次 调用 update  要 快 很多
 这个类 可以用 于 模拟 嵌套 作用域 并且 在 模 版 化 的时候 比较 有 用
chainmapmaps  一个 chainmap  将 多个 字典 或者 其他 映射 组合 在一起 创建 一个单独的 可 更新 的 视图
 如果没有 maps  被 指定 就 提供一个 默认 的 空 字典 这样 一个 新 链 至少有 一个映射
 底层 映射 被 存储在 一个列表 中
 这 个列表 是 公开 的 可以通过 maps  属性 存 取 和 更新
 没有 其他的 状态
 搜索 查询 底层 映射 直到 一个 键 被 找到
 不同的 是 写 更新 和 删除 只 操作 第一个 映射
 一个 chainmap  通过 引用 合并 底层 映射
 所 以 如果一个 底层 映射 更新 了 这些 更改 会 反 映 到 chainmap 
 支持 所有 常 用 字典 方法
 另外 还有一个 maps  属性 attribute  一个 创 建 子 上下文 的 方法 method  一个 存 取 它们 首 个映射 的 属性 property  maps  一个可以 更新 的 映射 列表
 这 个列表 是 按照 第一次 搜索 到 最后一 次 搜索 的 顺序 组织 的
 它 是 仅 有 的 存储 状态 可以被 修改
 列表 最 少 包含一个 映射
 newchildmnone  返回一个新的 chainmap  类 包含了 一个 新 映射 map  后面 跟 随 当前 实例 的全部 映射 map
 如果 m  被 指定 它 就 成为 不同 新 的 实例 就是 在所有 映射 前 加上 m  如果没有 指定 就 加上 一个空 字典 这样的 话 一个 d
newchild  调用 等价于 chainmap  d
maps 
 这个方法 用 于 创建 子 上下文 不 改变 任何 父 映射 的 值
 在3
4 版更改 添加了 m  可选参数
 parents  属性 返回一个新的 chainmap  包含所 有 的当前 实例 的 映射 除了 第一个
 这 样可以 在 搜索 的时候 跳过 第一个 映射
 使用 的 场景 类似 在 nested  scopes  嵌套 作用域中 使用 nonlocal  关键 词
 用 例 也可以 类 比 内建 函 数 super 
 一个 d
parents  的 引用 等价于 chainmapd
maps 1
 注意 一个 chainmap  的 迭代 顺序 是通过 扫描 最后 的 映射 来确定 的 baseline  music  bach  art  rembrandt  adjustments  art  van  gogh  opera  carmen  listchainmapadjustments  baseline  music  art  opera  这 给出了 与 dict
update  调用 序列 相同 的顺序 从 最后一个 映射 开始 combined  baseline
updateadjustments  listcombined  music  art  opera  在3
9 版更改 增加了 对 和 运算符 的 支持 相关 说明 见 pep 584
 参见 multicontext  class  在 enthought  codetools  package  有 支持 写 映射 的 选 项
 django  的 context  class  模 版 是 只读 映射
 它 的 上下文 的 push  和 pop  特性 也 类似于 newchild  方法 parents  属性
 nested  contexts  recipe  提供了 是否 对 第一个 映射 或其他 映射 进行 写 和 其 他 修改 的 选项
 一个 极 简 的只读 版 chainmap
chainmap  例子 和 方法
 这 一节 提供了 多个 使用 链 映射 的 案 例
 模拟 python  内部 lookup  链 的 例子 import  builtins  pylookup  chainmaplocals  globals  varsbuiltins  让 用户 指定 的 命令行参数 优先 于 环境变量 优先 于 默认值 的 例子 import  os  argparse  defaults  color  red  user  guest  parser  argparse
environ  defaults  printcombinedcolor  printcombineduser  用 chainmap  类 模拟 嵌套 上下文 的 例子 c  chainmap  create  root  context  d  c
items  all  nested  items  dictd  flatten  into  a  regular  dictionarychainmap  类 只 更新 链 中 的第一个 映射 但 lookup  会 搜索 整个 链
 然而 如果需要 深度 写 和 删除 也可以 很容易 的 通过 定义一个 子类 来实现 它 class  deepchainmapchainmap  variant  of  chainmap  that  allows  direct  updates  to  inner  scopes  def  setitemself  key  value  for  mapping  in  self
counter  对象
 一个 计数器 工具 提供 快速 和 方便的 计数
 比如 tally  occurrences  of  words  in  a  list  cnt  counter  for  word  in  red  blue  red  green  blue  blue 
counteriterableormapping  一个 counter  是一个 dict  的子类 用于计 数 可哈希 对象
 它是一个 集 合 元素 像 字典 键 key  一样 存储 它们的 计数 存储为 值
 计数 可以是任何 整 数值 包括0 和 负数
 counter  类 有 点 像 其他语言 中 的 bags  或 multisets 
 元素 从 一个 iterable  被 计数 或 从 其他的 mapping  or  counter  初始化 c  counter  a  new  empty  counter  c  countergallahad  a  new  counter  from  an  iterable  c  counterred 4 blue 2 a  new  counter  from  a  mapping  c  countercats 4 dogs 8 a  new  counter  from  keyword  args  counter  对象 有 一个字典 接口 如果 引用 的 键 没有任何 记录 就 返回 一个0 而不是 弹出 一个 keyerror  c  countereggs  ham  cbacon  count  of  a  missing  element  is  zero 0 设置一个 计数 为0 不 会 从 计数器 中 移 去 一个元素
 使用 del  来 删除 它 csausage 0 counter  entry  with  a  zero  count  del  csausage  del  actually  removes  the  entry 3
1 新版功能
 在3
7 版更改 作为 dict  的子类 counter  继承 了 记住 插入顺序 的 功 能
 counter  对象进行 数学 运算 时 同样 会 保持 顺序
 结果会 先 按 每个元 素 在 运算符 左边 的 出现 时间 排序 然后再 按 其 在 运算符 右 边 的 出现 时间 排序
 计数器 对象 除了 字典 方法 以外 还提供了 三个 其他的 方法 elements  返回 一个迭代器 其 中 每个元素 将 重复 出现 计数 值 所 指定 次
 元素 会按 首次 出现的 顺序 返回
 如果一个 元素 的计数 值 小于 一 elements  将 会 忽略 它
elements  a  a  a  a  b  b  mostcommonn  返回 一个列表 其中包含 n  个 最常见的 元素 及 出现 次 数 按 常见 程度 由 高 到 低 排序
 如果 n  被 省略或为 nonemostcommon  将 返 回 计数器 中 的 所有 元素
 计数 值 相等的 元素 按 首次 出现的 顺序 排序 counterabracadabra
mostcommon 3 a 5 b 2 r 2 subtractiterableormapping  从 迭代对象 或 映射 对象 减 去 元素
 像 dict
update  但是 是 减 去 而不是 替换
 输入和输出 都可以 是0 或者 负数
subtractd  c  countera 3 b 0 c 3 d 63
2 新版功能
 通常 字典 方法都 可用于 counter  对象 除了 有两个 方法 工作 方式 与 字典 并 不 相同
 fromkeysiterable  这个类 方法 没有 在 counter  中 实现
 updateiterableormapping  从 迭代对象 计数 元素 或者 从 另一个 映射 对象 或 计数器 添加
 像 dict
update  但是 是 加上 而不是 替换
 另外 迭代对象 应该 是 序列 元素 而不是 一个 key  value  对
counter  对象 的 常 用 案 例 sumc
mostcommonn 11 n  least  common  elements  c  remove  zero  and  negative  counts  提供了 几个 数学 操作 可以 结合 counter  对象 以 生产 multisets  计数器 中 大于0 的 元素
 加 和 减 结合 计数器 通过 加上 或者 减 去 元素 的相应 计数
 交 集 和 并 集 返回 相应 计数 的最小 或 最大 值
 每 种 操作 都可以 接受 带 符号 的计数 但是 输出 会 忽略 掉 结果为 零 或者 小于 零 的计数
 c  countera 3 b 1 d  countera 1 b 2 c  d  add  two  counters  together  cx  dxcountera 4 b 3 c  d  subtract  keeping  only  positive  countscountera 2 c  d  intersection  mincx  dx  countera 1 b 1 c  d  union  maxcx  dxcountera 3 b 2 单 目 加 和 减 一 元 操作符 意 思 是 从 空 计数器 加 或者 减 去
 c  countera 2 b 4 ccountera 2 ccounterb 43
3 新版功能 添加了 对 一 元 加 一 元 减 和 位置 集合 操作 的 支持
 注解 计数器 主要 是为了 表达 运行 的 正 的计数 而 设计 但是 小 心 不 要 预 先 排除 负数 或者 其他类型
 为 了 帮助 这些 用 例 这 一节 记录 了 最小 范围 和 类型 限制
 counter  类 是 一个字典 的子类 不 限制 键和值
 值 用于表示 计数 但 你 实 际上 可以 存储 任何其他 值
 mostcommon  方法 在 值 需要 排序 的时候 用
 原地 操作 比如 ckey 1 值 类型 只需要 支持 加 和 减
 所 以 分 数 小 数 和 十进制 都可以 用 负值 也可以 支持
 这两个 方法 update  和 subtract  的 输入和输出 也 一样 支持 负数 和0
 multiset  多 集合 方法 只 为 正 值 的 使用 情况 设计
 输入 可以是 负数 或者0 但 只 输出 计数 为 正 的 值
 没有 类型 限制 但 值 类型 需要 支持 加 减 和 比较 操作
 elements  方法 要求 正整数 计数
 忽略0 和 负数 计数
 参见 bag  class  在 smalltalk
 wikipedia  链接 multisets
 c  multisets  教程 和 例子
 数学 操作 和 多 集合 用 例 参考 knuth  donald
 the  art  of  computer  programming  volume  ii  section 4
3 exercise 19
 在给定 数量 和 集合 元素 枚举 所 有不同 的 多 集合 参考 itertools
combinationswithreplacement  mapcounter  combinationswithreplacementabc 2 aa  ab  ac  bb  bc  cc
deque  对象
deque  用 法
 这 一节 展示了 deque  的 多种 用 法
 限 长 deque  提供了 类似 unix  tail  过滤 功能 def  tailfilename  n 10 return  the  last  n  lines  of  a  file  with  openfilename  as  f  return  dequef  n  另一个 用 法 是 维护 一个 近 期 添加 元素 的 序列 通过 从 右 边 添加 和 从 左边 弹出 def  movingaverageiterable  n 3 movingaverage 40305046394440
appendelem  yield  s  n  一个 轮询 调度 器 可以通过在 deque  中 放入 迭代器 来实现
 值 从 当前 迭代器 的 位置0 被 取出 并 暂 存 yield
 如果这 个 迭代器 消耗 完毕 就 用 popleft  将 其 从 对 列 中 移 去 否则 就 通过 rotate  将 它 移 到 队列 的末尾 def  roundrobiniterables  roundrobinabc  d  ef  a  d  e  b  f  c  iterators  dequemapiter  iterables  while  iterators  try  while  true  yield  nextiterators 0 iterators
popleftrotate  方法 提供了一种 方式来 实现 deque  切片 和 删除
 例如 一个 纯 的 python  del  dn  实现 依赖于 rotate  来 定位 要 弹出 的 元素 def  deletenthd  n  d
rotaten  要实现 deque  切片 使用 一个类似 的 方法 应用 rotate  将 目标 元素 放 到 左边
 通过 popleft  移 去 老 的 条目 entries  通过 extend  添加新 的 条目 然后 反向 rotate
 这个方法 可以 最小 代 价 实现 命令 式 的 栈 操作 诸 如 dup  drop  swap  over  pick  rot  和 roll 
defaultdict  对象
defaultdict  例子
 使用 list  作为 defaultfactory  很 轻松 地 将 键值对 组成的 序列 转换为 键 列表 组成的 字典 s  yellow 1 blue 2 yellow 3 blue 4 red 1 d  defaultdictlist  for  k  v  in  s
itemsblue 24 red 1 yellow 13 当 每个键 第一次 遇 见 时 它 还没有 在 字典 里面 所 以 自动创建 该 条目 即 调用 defaultfactory  方法返回一个 空 的 list
 list
append  操作 添加 值 到 这 个新的 列表 里
 当 再次 存 取 该 键 时就 正常 操作 list
append  添加 另一个 值 到 列表中
 这 个 计数 比 它 的 等价 方法 dict
setdefault  要 快速 和 简单 d  for  k  v  in  s
itemsblue 24 red 1 yellow 13 设置 defaultfactory  为 int  使 defaultdict  用于计 数 类似 其他语言 中 的 bag  或 multiset  s  mississippi  d  defaultdictint  for  k  in  s
itemsi 4 m 1 p 2 s 4 当 一个 字母 首次 遇到 时它会 查询 失败 则 defaultfactory  会 调用 int  来提供 一个整数0 作为 默认值
 后续的 自 增 操作 建立 起 对 每个 字母 的计数
 函数 int  总是返回0 这是 常 数 函数 的 特殊 情况
 一个 更快 和 灵活的 方法 是 使用 lambda  函数 可以提供 任何 常量 值 不 只是0 def  constantfactoryvalue
updatenamejohn  actionran  names  actions  to  objects  djohn  ran  to  missing  设置 defaultfactory  为 set  使 defaultdict  用 于 构建 set  集合 s  red 1 blue 2 red 3 blue 4 red 1 blue 4 d  defaultdictset  for  k  v  in  s
namedtuple  命名元组 的 工厂函数
 命名元组 赋 予 每个 位置 一个 含义 提供 可读性 和 自 文档 性
 它们可以 用 于任何 普通 元组 并 添加了 通过 名 字 获取 值 的能力 通过 索引 值 也是 可以 的
namedtupletypename  fieldnames  renamefalse  defaultsnone  modulenone  返回一个新的 元组 子类 名为 typename 
 这 个新的 子类 用于创建 类 元组 的 对象 可以通过 字段名 来获取 属性 值 同样 也可以通过 索引 和 迭代 获取 值
 子类 实例 同样 有 文档字符串 类 名 和 字段名 另外 一个 有用的 repr  方法 以 namevalue  格式 列 明 了 元组 内容
 fieldnames  是一个 像‘ x ’‘ y ’ 一样的 字符串 序列
 另外 fieldnames  可以是 一个 纯 字符串 用 空白 或 逗号分隔 开 元素 名 比如 x  y  或者 x  y 
 任何 有效的 python  标识符 都 可以作为 字段名 除了 下划线 开头的 那些
 有效 标识符 由 字母数字 下划线 组成 但 首 字母 不 能 是 数字 或 下划线 另外 不 能 是 关键 词 keyword  比如 class  for  return  global  pass  或 raise 
 如果 rename  为真 无效 字段名 会自动 转换成 位置 名
 比如 abc  def  ghi  abc  转换成 abc 1 ghi 3 消除 关 键 词 def  和 重复 字段名 abc 
 defaults  可以为 none  或者是一个 默认值 的 iterable 
 如果一个 默 认值 域 必须 跟 其他 没有 默认值 的 域 在一起 出现 defaults  就 应用 到 最 右 边 的 参数
 比如 如果 域名 x  y  z  和 默认值12 那么 x  就必须 指定一个 参数 值 y  默认值1 z  默认值2
 如果 module  值 有定义 命名元组 的 module  属性 值 就 被设置
 命名元组 实例 没有 字典 所 以 它们 要 更 轻 量 并且 占 用 更 小 内存
 在3
1 版更改 添加了 对 rename  的 支持
 在3
6 版更改 verbose  和 rename  参数 成为 仅限 关键字参数
 在3
6 版更改 添加了 module  参数
 在3
7 版更改 移除了 verbose  形参 和 source  属性
 在3
7 版更改 添加了 defaults  参数 和 fielddefaults  属性
y  fields  also  accessible  by  name 33 p  readable  repr  with  a  namevalue  style  pointx 11 y 22 命名元组 尤其 有 用 于 赋值 csv  sqlite 3 模块 返回 的 元组 employeerecord  namedtupleemployeerecord  name  age  title  department  paygrade  import  csv  for  emp  in  mapemployeerecord
title  除了 继承 元组 的 方法 命名元组 还 支持 三个 额外的 方法 和 两个 属性
 为 了 防止 字段名 冲突 方法和属性 以 下划线 开始
makeiterable  类 方法 从 存在的 序列或 迭代 实例 创建一个新 实例
asdict  返回一个新的 dict  它 将 字段 名称映射 到 它们 对应的值 p  pointx 11 y 22 p
asdict  x 11 y 22 在3
1 版更改 返回 一个 ordereddict  而不是 dict 
 在3
8 版更改 返回 一个 常规 dict  而不是 ordereddict
 因为 自 python 3
7 起 常规 字典 已经 保证 有 序
 如果需要 ordereddict  的 额外 特性 推荐的 解决方案是 将结果 转换为 需要 的 类型 ordereddictnt
replacekwargs  返回一个新的 命名元组 实例并 将 指定 域 替换为 新 的 值 p  pointx 11 y 22 p
fields  字符串 元组 列出了 字段名
 用 于 提 醒 和 从 现有 元组 创建一个新的 命名元组 类 型
fielddefaults  字典 将 字段 名称映射 到 默认值
fielddefaults  balance 0 accountpremium  accounttypepremium  balance 0 要获取 这 个 名 字 域 的 值 使用 getattr  函数 getattrp  x 11 转换 一个字典 到 命名元组 使用 两 星 操作符 所述 如 解包 参数列表 d  x 11 y 22 pointdpointx 11 y 22 因为 一个 命名元组 是一个 正常的 python  类 它可以 很容易 的 通过 子类 更改 功能
 这里 是如何 添加一个 计算 域 和 定 宽 输出 打印 格式 class  pointnamedtuplepoint  x  y 
018 上面的 子类 设置 slots  为 一个空 元组
 通过 阻 止 创建 实例 字典 保持 了 较 低 的内存 开销
 子类化 对 于 添加 和 存储 新 的名字 域 是 无效的
 应当 通过 fields  创建一个新的 命名元组 来实现 它 point 3 d  namedtuplepoint 3 d  point
fields  z  文档字符串 可以 自定义 通过 直接 赋值给 doc  属性 book  namedtuplebook  id  title  authors  book
doc  list  of  authors  sorted  by  last  name  在3
5 版更改 文档字符串 属性 变 成 可 写
 参见 请参阅 typing
namedtuple  以获取 为 命名元组 添加 类型提示 的 方法
 它还 使用 class  关键字 提供了一种 优 雅 的符号 class  componentnamedtuple  partnumber  int  weight  float  description  optionalstr  none  对 于 以 字典 为 底层 的 可变 域名 参考 types
simplenamespace 
 dataclasses  模块提供了一个 装饰器 和 一些 函数用于 自动将 生成 的 特殊 方法 添加到 用户定义的 类 中
ordereddict  对象
 有 序 词 典 就像 常规 词 典 一样 但 有一些 与 排序 操作 相关的 额外 功能
 由 于 内置的 dict  类 获得 了 记住 插入顺序 的能力 在 python 3
7 中 保证 了 这种 新 行为 它们 变得 不 那么 重要 了
 一些 与 dict  的不同 仍然 存 在 常规 的 dict  被设计为 非常 擅 长 映射 操作
 跟踪 插入顺序 是 次 要 的
 ordereddict  旨在 擅 长 重新 排序 操作
 空间 效率、 迭代 速度 和 更新 操作 的 性能 是 次 要 的
 算法 上 ordereddict  可以 比 dict  更好地 处理 频 繁 的 重新 排序 操作
 这 使 其 适用于 跟踪 最近 的 访问 例如 在 lru  cache  中
 对 于 ordereddict  相等 操作 检查 匹配 顺序
 ordereddict  类 的 popitem  方法 有不同 的 签名
 它接受一个 可选参数 来指定 弹出 哪个 元素
 ordereddict  类 有 一个 movetoend  方法可以 有效 地 将 元素 移动 到 任 一 端
 python 3
8 之前 dict  缺少 reversed  方法
ordereddictitems  返回 一个 dict  子 类的实例 它 具有 专门 用 于 重新 排列 字典 顺序 的 方法
3
1 新版功能
 popitemlasttrue  有 序 字典 的 popitem  方法 移除 并返回一个 key  value  键值对
 如果 last  值 为真 则 按 lifo  lastin  firstout  后 进先出 的 顺 序 返回 键值对 否则 就 按 fifo  firstin  firstout  先 进先出 的顺序 返回 键值对
 movetoendkey  lasttrue  将 现有 key  移动 到 有 序 字典 的 任 一 端
 如果 last  为真值 默认 则 将 元素 移至 末尾 如果 last  为假值 则 将 元素 移至 开头
 如果 key  不存在 则 会 触发 keyerror  d  ordereddict
keys  bacde 3
2 新版功能
 相对于 通常 的 映射 方法 有 序 字典 还 另外 提供了 逆 序 迭代 的 支持 通过 reversed 
ordereddict  之间的 相等 测试 是 顺序 敏感 的 实现 为 listod 1
items 
 ordereddict  对象 和其他 的 mapping  的 相等 测试 是 顺序 敏感 的字典 测试
 这允许 ordereddict  替换为 任何 字典 可以使用 的 场 所
 在3
5 版更改 ordereddict  的 项 item  键 key  和 值 value  视图 现在支持 逆 序 迭代 通过 reversed 
 在3
6 版更改 pep 468 赞 成 将 关键 词 参数 的顺序 保留 通过 传递给 ordereddict  构造器 和 它 的 update  方法
 在3
9 版更改 增加了 合并 与 更新 运算符 相关 说明 见 pep 584
ordereddict  例子 和 用 法
 创建 记住 键值 最后 插入顺序 的 有 序 字典 变体 很 简单
 如果 新 条目 覆盖 现有 条目 则 原始 插入 位置 将 更改 并 移至 末尾 class  lastupdatedordereddictordereddict  store  items  in  the  order  the  keys  were  last  added  def  setitemself  key  value  super
movetoendkey  一个 ordereddict  对 于 实现 functools
lrucache  的 变体 也 很有用 class  lruordereddict  limit  size  evicting  the  least  recently  lookedup  key  when  full  def  initself  maxsize 128 args  kwds  self
userdict  对象
userdict  类 是 用 作 字典 对象 的 外 包装
 对 这个类 的需求 已 部分 由 直接 创建 dict  的子类 的功能 所 替代 不 过 这个类 处理 起来 更容易 因为 底层 的字典 可以作为 属性 来访问
userdictinitialdata  模拟 一个字典 类
 这 个实例 的内容 保存 为 一个 正常 字典 可以通过 userdict  实例 的 data  属性 存 取
 如 果提供了 initialdata  值 data  就 被初始化 为 它 的内容 注意 一个 initialdata  的 引用 不会被 保 留 作为 其他 用 途
 userdict  实例 提供了以 下 属性 作为 扩展 方法 和 操作 的 支持 data  一个 真 实 的字典 用 于 保存 userdict  类 的内容
userlist  对象
 这个类 封装 了 列表对象
 它是一个 有用的 基础 类 对 于 你想 自定义 的 类似 列表 的 类可以 继承 和 覆盖 现有的 方法 也可以 添加新 的 方法
 这样 我们可以 对 列表 添加新 的 行为
 对 这个类 的需求 已 部分 由 直接 创建 list  的子类 的功能 所 替代 不 过 这个类 处理 起来 更容易 因为 底层 的 列表 可以作为 属性 来访问
userlistlist  模拟 一个列表
 这 个实例 的内容 被 保存 为 一个 正常 列表 通过 userlist  的 data  属性 存 取
 实例 内容 被初始化 为 一个 list  的 copy  默认为 空列表
 list  可以是 迭代对象 比如 一个 python  列表 或者一个 userlist  对象
 userlist  提供了以 下 属性 作为 可变序列 的 方法 和 操作 的 扩展 data  一个 list  对象 用 于 存储 userlist  的内容
 子类化 的 要求 userlist  的子类 需要 提供一个 构造器 可以 无 参数调用 或者一个 参数调用
 返回一个新 序列 的 列表 操作 需要 创建一个 实现 类的实例
 它 假定 了 构造器 可以 以 一个参数 进行调 用这个 参数 是一个 序列 对象作为 数据 源
 如果一个 分 离 的 类 不希望 依 照 这 个 需求 所有的 特殊方法 就必须 重写 请 参 照 源代码 进行 修改
userstring  对象
userstring  类 是 用 作 字符串 对象 的 外 包装
 对 这个类 的需求 已 部分 由 直接 创建 str  的子类 的功能 所 替代 不 过 这个类 处理 起来 更容易 因为 底层 的 字符串 可以作为 属性 来访问
userstringseq  模拟 一个字符串 对象
 这 个实例 对象 的内容 保存 为 一个 正常 字符串 通过 userstring  的 data  属性 存 取
 实例 内容 初始化 设置为 seq  的 copy 
seq  参数 可以是任何 可通过 内建 str  函数 转换为字符串 的 对象
 userstring  提供了以 下 属性 作为 字符串方法 和 操作 的 额外 支持 data  一个 真正 的 str  对象 用来 存放 userstring  类 的内容
 在3
5 版更改 新 方法 getnewargs  rmod  casefold  formatmap  isprintable  和 maketrans
symtable  access  to  the  compilers  symbol  tables
generating  symbol  tables
examining  symbol  tables
 例如 table  symtable
 函数式编程 模块
 本章 里 描述 的 模块提供了 函数和类 以 支持 函数式编程 风格 和 在 可调用对象 上 的通用 操作
 本章 对 下列 模块 进行 说明 itertools  为 高效 循环 而 创建 迭代器 的 函数 itertool  函数 itertools  配 方 functools  高阶 函数 和 可调用对象 上 的 操作 partial  对象 operator  标准 运算符 替代 函数 将 运算符 映射到 函数 原地 运算符
emailcharset  representing  character  sets
 本 段落 中 的 剩余 文本 是 该模块 的 原始 文档
cmd  支持 面向 行 的 命令 解释器
 源代码 libcmd
pycmd  类提供 简单 框架 用 于 编写 面向 行 的 命令 解释器
 这些 通常 对 测试 工具 管理 工具 和 原型 有 用 这 些工具 随后 将 被 包含在 更复杂的 接口 中
cmdcompletekeytab  stdinnone  stdoutnone  一个 cmd  实例 或 子类 实例 是 面向 行 的 解释器 框架 结构
 实例化 cmd  本 身 是没有 充 分 理 由 的 它 作为 自定义 解释器 类 的 超 类 是 非常有用 的 为 了 继承 cmd  的 方法 并且 封装 动作 方法
 可选参数 completekey  是 完成 键 的 readline  名称 默认 是 tab 
 如果 completekey  不 是 none  并且 readline  是 可用的 命令 完成 会自动 完成
 可选参数 stdin  和 stdout  指定了 cmd  实例 或 子类 实例 将 用 于 输入和输 出 的 输入和输出 文件对象
 如果没有 指定 他们 将 默认为 sys
stdin  和 sys
stdout 
 如果你想要 使用 一个 给定的 stdin  确保 将 实例 的 userawinput  属性 设置为 false  否则 stdin  将被忽略
cmd  对象
cmd  例子
 这 部分 提供了 一个简单的例子 来 介绍 如何使用 一部分 在 turtle  模块中的 命令 构建 一个 shell 
 基础 的 turtle  命令 比如 forward  被添加 进 一个 cmd  子类 方法 名为 doforward 
 参数 被 转换成 数字 并且 分发 至 turtle  模 组 中
 docstring  是 shell  提供的 帮助 实 用 程序
 例子 也 包含 使用 precmd  方法 实现 基础 的 记录 和 回 放 的功能 这个方法 负责 将 输入 转换为 小写 并且 将 命令 写入文件
 doplayback  方法 读取 文件 并 添加 记录 命令 至 cmdqueue  用 于 即 时 回 放 import  cmd  sys  from  turtle  import  class  turtleshellcmd
cmdloop  这是一个 示例 会话 其 中 turtle  shell  显示 帮助 功能 使用 空行 重复 命令 以及 简单的 记录 和 回 放 功能 welcome  to  the  turtle  shell
msilib  read  and  write  microsoft  installer  files
 参见 fcicreate  uuidcreate  uuidtostring
database  objects
3
7 新版功能
 参见 msidatabaseopenview  msidatabasecommit  msigetsummaryinformation  msiclosehandle
view  objects
 参见 msiviewexecute  msiviewgetcolumninfo  msiviewfetch  msiviewmodify  msiviewclose
summary  information  objects
 参见 msisummaryinfogetproperty  msisummaryinfogetpropertycount  msisummaryinfosetproperty  msisummaryinfopersist
record  objects
 参见 msirecordgetfieldcount  msirecordsetstring  msirecordsetstream  msirecordsetinteger  msirecordcleardata
errors
cab  objects
directory  objects
 参见 directory  table  file  table  component  table  featurecomponents  table
 相关 特性
 参见 feature  table
gui  classes
 参见 dialog  table  control  table  control  types  controlcondition  table  controlevent  table  eventmapping  table  radiobutton  table
precomputed  tables
html  超 文本 标记 语言 支持
emailmessagemessage  representing  an  email  message  using  the  compat 32 api
shelve  python  对象 持久化
 源代码 libshelve
pyshelf  是一种 持久化 的 类似 字典 的 对象
 与 dbm  数据库 的 区别在于 shelf  中的值 不 是 键 实际上 可以为 任意 python  对象 即 pickle  模块 能够 处理 的 任何 东西
 这 包括 大部分 类实例、 递归 数据类型 以及 包含 大量 共享 子 对象 的 对象
 键 则 为 普通的 字符串
openfilename  flagc  protocolnone  writebackfalse  打开一个 持久化 字典
 filename  指定 下层 数据库 的 基准 文件名
 作为 附带 效果 会 为 filename  添加一个 扩展名 并且 可能 创建 更多的 文件
 默认情况 下 下层 数据库 会 以读写 模式打开
 可选的 flag  形参 具有与 dbm
open  flag  形参 相同 的含义
 默认 会 使用 第3 版 pickle  协议 来 序列化 值
 pickle  协议 版本 可通过 protocol  形参 来指定
 由 于 python  语义 的 限制 shelf  对象 无法 确定 一个 可变的 持久化 字典 条目 在 何 时 被修改
 默认情况下 只有 在 被修改 对象 再 赋值给 shelf  时才会 写入 该对象 参见 示例
 如果可选 的 writeback  形参 设 为 true  则 所有 被访问 的 条目 都 将 在内存中 被 缓存 并 会 在 sync  和 close  时 被写入 这可以 使得 对 持久化 字典中 可变 条目 的 修改 更 方便 但是如果 访问 的 条目 很多 这 会 消耗 大量 内存 作为 缓存 并 会 使得 关闭 操作 变得 非常 缓 慢 因为 所有 被访问 的 条目 都 需要 写 回 到 字典 无法 确定 被访问 的 条目 中 哪个 是可变 的 也 无法 确定 哪个 被 实际 修改 了
 注解 请 不 要 依赖于 shelf  的 自动 关闭 功能 当你 不再 需要 时 应当 总是 显式地 调 用 close  或者 使用 shelve
open  作为 上下文管理器 with  shelve
openspam  as  db  dbeggs  eggs  警告 由 于 shelve  模块 需要 pickle  的 支持 因此 从 不 可靠 的 来源 载入 shelf  是 不安全 的
 与 pickle  一样 载入 shelf  时可以 执行 任意 代码
 字典 所支持的 所有 方法都 被 shelf  对象 所 支持
 因此 很容易 将 基于 字典 的 代码 转换为 需要 持久化 存储 的 代码
 额外 支持 的 两个方法 shelf
sync  如果 shelf  打开 时 将 writeback  设 为 true  则 写 回 缓存 中的所有 条目
 如果可 行 还 会 清空 缓存 并 将 持久化 字典 同步 到 磁盘
 此方法会 在 使用 close  关闭 shelf  时 自动 被调用
close  同步 并 关闭 持久化 dict  对象
 对 已 关闭 shelf  的 操作 将 失败 并 引发 valueerror
 参见 持久化 字典 方案 使用了 广泛 支持 的 存储 格式 并 具有 原生 字典 的速度
 限制
 示例
 对 接口 的 总结 如 下 key  为 字符串 data  为 任意 对象 import  shelve  d  shelve
close  close  it  参见 模块 dbm  dbm  风格 数据库 的泛型 接口
 模块 pickle  shelve  所使用的 对象 序列化
tkintertix  extension  widgets  for  tk
py 3
6 版后已移除 this  tk  extension  is  unmaintained  and  should  not  beused  in  new  code
 参见 tix  homepage  the  home  page  for  tix
using  tix
tix  widgets
basic  widgets
file  selectors
hierarchical  listbox
tabular  listbox
manager  widgets
image  types
miscellaneous  widgets
form  geometry  manager
tix  commands
grp  组 数据库
 该模块提供 对 unix  组 数据库 的 访问
 它 在所有 unix  版本上 都 可 用
 组 数据库 条目 被 报告 为 类似 元组 的 对象 其 属性 对应于 group  结构 的成员 下面的 属性 字段 请参见 pwd
h  索引 属性 意义0 grname  组 名1 grpasswd  加密 的 组 密码 通常 为空2 grgid  数字 组 id 3 grmem  组 内 所有 成员的 用户 名 gid  是 整数 名称 和 密码 是 字符串 成员 列表 是 字符串列表
 注意 大多数 用户 未 根据 密码 数据库 显式 列 为 所属 组 的成员
 请 检查 两个 数据库 以获取 完整的 成员 资 格 信息
 还要注意 以 或 开头的 grname  可能是 ypnis  引用 可能无法 通过 getgrnam  或 getgrgid  访问
 本 模块定义 如 下内容 grp
getgrgidgid  返回给定 数字 组 id  的 组 数据库 条目
 如果 找不到 要求 的 条目 则会引发 keyerror  错误
3
6 版后已移除 从 python 3
6 开始 弃用 对 getgrgid  中 的 float  或 string  等 非 integer  参数 的 支持
getgrnamname  返回给定 组 名 的 组 数据库 条目
 如果 找不到 要求 的 条目 则会引发 keyerror  错误
getgrall  以 任意 顺序 返回 所 有可用 组 条目 的 列表
 参见 模块 pwd  用户 数据库 的 接口 与 此 类似
 模块 spwd  针对 影 子 密码 数据库 的 接口 与 本 模块 类似
email  电子邮件 与 mime  处理 包
 源码 libemailinit
 在3
6 版更改 docs  reorganized  and  rewritten  to  promote  the  newemailmessageemailpolicy  api
message  表示一 封 电子邮件 信息 email
parser  解析 电子邮件 信息 feedparser  api  parser  api  附加 说明 email
errors  异常 和 缺 陷 类 email
contentmanager  managing  mime  content  content  manager  instances  email  示例 legacy  api  email
encoders  编码器 email
utils  其他 工具 email
iterators  迭代器 参见 module  smtplib  smtp  simple  mail  transport  protocol  client  module  poplib  pop  post  office  protocol  client  module  imaplib  imap  internet  message  access  protocol  client  module  nntplib  nntp  net  news  transport  protocol  client  module  mailbox  tools  for  creating  reading  and  managing  collections  of  messages  on  disk  using  a  variety  standard  formats
venv  创建虚拟环境
3
3 新版功能
 源码 libvenvvenv  模块 支持 使用 自己的 站 点 目录 创建 轻 量 级 虚拟环境 可 选择 与 系统 站 点 目录 隔 离
 每个 虚拟环境 都 有自己的 python  二进制文件 与 用于创建 此 环境 的 二进制文件 的 版本 相匹配 并且 可以在 其 站 点 目录中 拥有 自己 独立的 已安装 python  软件包 集
 有关 python  虚拟环境 的 更多信息请参阅 pep 405
 参见 python  打 包用户指南 创建 和 使用 虚拟环境
 创建虚拟环境
api
 一个 扩展 envbuilder  的 例子
locale  国际化 服务
background  details  hints  tips  and  caveats
for  extension  writers  and  programs  that  embed  python
access  to  message  catalogs
 平台 支持
asyncio  模块 被设计为 可移植 的 但 由 于 平台 的 底层 架构 和 功能 一些 平台 存 在 细 微 的差异 和 限制
 所有平台
addreader  和 loop
addwriter  不能用 来 监视 文件 io
windows
windows  的 子进程 支持
 在 windows  上 默认 的事件循环 proactoreventloop  支持 子进程 而 selectoreventloop  则 不支持
 也 不支持 policy
setchildwatcher  函数 proactoreventloop  有不同 的机制 来 监视 子进程
macos
 完整 支持 流行的 macos  版本
8 在 macos 10
7 和10
8 上 默认 的事件循环 使用 selectors
kqueueselector  在这些 版本上 它并不 支持 字符 设备
 可以 手 工 配置 selectoreventloop  来 使用 selectselector  或 pollselector  以 在这些 较 老 版本 的 macos  上 支持 字符 设备
 例如 import  asyncio  import  selectors  selector  selectors
main  顶 层 脚本 环境
 通 用 操作系统 服务
 程序 框架
 本章中描述的模块 是 很大 程度 上 决定 程序 结构 的 框架
 目前 这里 描述的模块 都 面向 编写 命令行接口
 本章 描述 的完整 模块 列表 如 下 turtle  海龟 绘图 概述 可用的 turtle  和 screen  方法 概 览 turtle  方法 turtlescreenscreen  方法 rawturtleturtle  方法 和 对 应 函数 海龟 动作 获取 海龟的 状态 度 量 单位 设置 画笔 控制 绘图 状态 颜色 控制 填充 更多 绘图 控制 海龟 状态 可 见 性 外 观 使用 事件 特殊 海龟 方法 复合 形状 turtlescreenscreen  方法 及 对 应 函数 窗口 控制 动 画 控制 使用 屏幕 事件 输入 方法 设置 与 特殊方法 screen  专 有 方法 而非 继承自 turtlescreen  公共 类 帮助 与 配置 如何使用 帮助 文档字符串 翻译 为 不同的 语言 如何 配置 screen  和 turtle  turtledemo  演示 脚本 集 python 2
6 之后 的变化 python 3
0 之后 的变化 cmd  支持 面向 行 的 命令 解释器 cmd  对象 cmd  例子 shlex  simple  lexical  analysis  shlex  objects  parsing  rules  improved  compatibility  with  shells
tempfile  生成 临时 文件和目录
 示例
 以下是 tempfile  模块 典型 用 法 的一些 示例 import  tempfile  create  a  temporary  file  and  write  some  data  to  it  fp  tempfile
 已弃用的 函数 和 变量
 创建 临时 文件 有一种 历史 方法 首先 使用 mktemp  函数 生成一个 文件名 然后 使用 该 文件名 创建 文件
 不幸的是 这是 不安全 的 因为在 调用 mktemp  与 随后 尝试 创建 文件 的 进程 之间的 时间 里 其他 进程 可能会 使用 该名称 创建 文件
 解决方案是 将 两个 步骤 结合 起来 立即 创建 文件
 这 个 方案 目前 被 mkstemp  和 上述 其他 函数 所 采用
mktempsuffix  prefixtmp  dirnone 2
3 版后已移除 使用 mkstemp  来 代替
 返回 一个 绝对 路径 这 个 路径指向 的 文件 在 调用 本 方法 时 不存在
prefix 、 suffix  和 dir  参数 与 mkstemp  中 的 同名 参数 类似 不同之处在 于 不支持 字节 类型 的文件名 不支持 suffixnone  和 prefixnone
 警告 使用 此功能 可能会 在程序中 引入 安全 漏洞
 当你 开始 使用 本 方法 返回 的 文 件 执行任何 操作 时可能 有 人 已经 捷 足 先 登 了
mktemp  的功能 可以 很 轻松 地 用 namedtemporaryfile  代替 当然 需要 传递 deletefalse  参数 f  namedtemporaryfiledeletefalse  f
pdb  python  的 调试器
 调试器 命令
 数据 持久化
xmldomminidom  minimal  dom  implementation
 警告 the  xml
 if  you  need  to  parse  untrusted  or  unauthenticated  data  see  xml  漏洞
 参见 document  object  model  dom  level 1 specification  the  w 3 c  recommendation  for  the  dom  supported  by  xml
dom  objects
 在3
8 版更改 the  writexml  method  now  preserves  the  attribute  order  specified  by  the  user
 在3
8 版更改 the  toxml  method  now  preserves  the  attribute  order  specified  by  the  user
 在3
8 版更改 the  toprettyxml  method  now  preserves  the  attribute  order  specified  by  the  user
dom  example
minidom  and  the  dom  standard
 脚注1 the  encoding  name  included  in  the  xml  output  should  conform  to  the  appropriate  standards
contextvars  上下文变量
 本 模块提供了 相关 api  用 于 管理、 存储 和 访问 上下文 相关的 状态
 contextvar  类用于 声明 上下文变量 并 与 其 一起使用
 函数 copycontext   和 类 context  用 于 管理 当前上下文 和 异步 框架 中
 在 多 并 发环境 中 有 状态 上下文管理器 应该使用 上下文变量 而不是 threading
local  来 防止 他们 的 状态 意外 泄 露 到 其他 代码
 更多信息 参见 pep 567
3
7 新版功能
 上下文变量
 手动 上下文管理
asyncio  支持
 上下文变量 在 asyncio  中 有 原生 的 支持 并且 无需 任何 额外 配置 即可 被使用
 例如以下 是一个简单的 回显 服务器 它 使用 上下文变量 来 让 远程 客户端 的地址 在 处理 该 客户端 的 task  中 可 用 import  asyncio  import  contextvars  clientaddrvar  contextvars
 并 发 执行
 本章中描述的模块 支持 并 发 执行 代码
 适当的 工具 选择 取决于 要执行 的 任务 cpu  密集 型 或 io  密集 型 和 偏 好 的 开发 风格 事件 驱 动 的 协 作 式 多 任务 或 抢 占 式 多 任务 处理
 这是一个 概述 threading  基于 线程 的 并 行 线程 本地 数据 线程 对象 锁 对象 递归 锁 对象 条件 对象 信号 量 对象 semaphore  例子 事件 对象 定 时 器对象 栅 栏 对象 在 with  语句中 使用 锁、 条件 和 信号 量 multiprocessing  基于 进程 的 并 行 概述 process  类 上下文 和 启动方法 在 进程 之间 交换 对象 进程 间 同步 进程 间 共享 状态 使用 工作 进程 参考 process  和 异常 管道 和 队列 杂项 连接 connection  对象 同步 原语 共享 ctypes  对象 multiprocessing
sharedctypes  模块 管理器 自定义 管理器 使用 远程 管理器 代理对象 清理 进程 池 监听 器 及 客户端 地址 格式 认 证 密码 日志 multiprocessing
dummy  模块 编程 指导 所有 start  方法 spawn  和 forkserver  启动 方式 示例 multiprocessing
sharedmemory  可 从 进程 直接访问 的 共享内存 concurrent  包 concurrent
futures  启动 并 行 任务 executor  对象 threadpoolexecutor  threadpoolexecutor  例子 processpoolexecutor  processpoolexecutor  例子 future  对象 模块 函数 exception  类 subprocess  子进程 管理 使用 subprocess  模块 常 用 参数 popen  构造函数 异常 安全 考 量 popen  对象 windows  popen  助 手 windows  常 数 较 旧 的 高阶 api  使用 subprocess  模块 替换 旧 函数 替代 binsh  shell  命令 替换 替代 shell  管道 替代 os
system  替代 os
spawn  函数 族 替代 os
popen 3 来自 popen 2 模块 的替代 函数 旧式 的 shell  发起 函数 注释 在 windows  上 将 参数列表 转换为 一个字符串 sched  事件 调度 器 调度 器对象 queue  一个 同步 的 队列 类 queue  对象 simplequeue  对象 以下是 上述 某些 服务 的 支持 模块 thread  底层 多线程 api
numbers  数字 的抽象基类
 源代码 libnumbers
pynumbers  模块 pep 3141 定义了 数字 抽象基类 的 层次结构 其 中 逐 级 定义了 更多 操作
 此模块中 所定义的 类型 都 不 可 被 实例化
number  数字 的 层次结构 的基础
 如果你 只 想 确 认 参数 x  是 不 是 数字 而 不 关 心 其 类 型 则 使用 isinstancex  number
 数字 的层次
complex  内置 在 类型 complex  里 的子类 描述了 复数 和 它 的 运算 操作
 这些 操作 有 转化 至 complex  和 bool  real 、 imag 、、、、、 abs 、 conjugate 、 和
 所有的 异常 和 都 是 抽象 的
 real  抽象 的
 得到 该 数字 的 实 数 部分
 imag  抽象 的
 得到 该 数字 的 虚 数 部分
 abstractmethod  conjugate  抽象 的
 返回 共 轭 复数
 例如13 j
real  相对于 complexreal  加入 了 只有 实 数 才能 进行 的 操作
 简单的 说 它们是 转化 至 floatmath
trunc 、 round 、 math
floor 、 math
ceil 、 divmod 、、、、、、 和
 实 数 同样 默认 支持 complex 、 real 、 imag  和 conjugate
rational  子类型 real  并 加入 numerator  和 denominator  两种 属性 这两种 属性 应该 属于 最低 的 级别
 加入 后 这 默认 支持 float
 numerator  摘要
 denominator  摘要
integral  子类型 rational  加上 转化 至 int
 默认 支持 float 、 numerator  和 denominator
 在 中 加入 抽象 方法 和 比特 字符串 的 操作、、、、、
 类型 接口 注释。
 实现 者 需要 注意 使 相等的 数字 相等 并 拥有 同样的 值
 当 这两个 数 使用 不同的 扩展模块 时 这 其中的 差异 是 很 微 妙 的
 例如 用 fractions
fraction  实现 hash  如 下 def  hashself  if  self
 加入 更多 数字 的 abc
 当然 这里有 更多 支持 数字 的 abc  如果不 加入 这些 就 将 缺少 层次 感
 你可以用 如 下 方法 在 complex  和 real  中 加入 myfoo  class  myfoocomplex 
 实现 算 数 运算
 我们 希望 实现 计算 因此 混合 模式 操作 要 么 调用 一个 作者 知道 参数 类型 的 实现 要 么 转 变 成为 最接近的 内置类型 并 对 这 个 执行 操作
 对 于 子类 integral  这意味着 add  和 radd  必须 用 如 下方式 定义 class  myintegralintegral  def  addself  other  if  isinstanceother  myintegral  return  domyaddingstuffself  other  elif  isinstanceother  othertypeiknowabout  return  domyotheraddingstuffself  other  else  return  notimplemented  def  raddself  other  if  isinstanceother  myintegral  return  domyaddingstuffother  self  elif  isinstanceother  othertypeiknowabout  return  domyotheraddingstuffother  self  elif  isinstanceother  integral  return  intother  intself  elif  isinstanceother  real  return  floatother  floatself  elif  isinstanceother  complex  return  complexother  complexself  else  return  notimplementedthere  are 5 different  cases  for  a  mixedtype  operation  on  subclassesof  complex
 如果 a  被定义 成一个 承 认 b  的 add  一 切 都 没有 问题
 如果 a  转 回 成 模板 失败 它 将返回一个 属于 add  的 值 我 们 需要 避免 b  定义了一个 更 加 智 能 的 radd  因此 模板 需要 返 回 一个 属于 add  的 notimplemented 
 或者 a  可能 完全 不 实现 add 
3
 接 着 看 b  的 radd 
 如果它 承 认 a  一 切 都 没有 问题
 如果没有 成功 回退 到 模板 就 没有 更多的 方法可以 去 尝试 因此这 里 将 使 用 默认 的 实现
 如果 b  a  python  在 a
add  之前 尝试 b
radd 
 这是 可 行 的 是通过 对 a  的 认 识 实现 的 因此这 可以在 交 给 complex  处理 之前 处理 这些 实例
 如果 a  complex  和 b  real  没有 共享 任何 资源 那么 适当的 共享 操作 涉及 内置的 complex  并且 分别 获得 radd  因此 ab  ba
 由 于 对 任何 一 直 类型 的大部分 操作 是 十分 相似的 可以定义 一个 帮助 函数 即 一个 生成 后续 或 相反 的 实例 的 生成器
 例如使用 fractions
fraction  如 下 def  operatorfallbacksmonomorphicoperator  fallbackoperator  def  forwarda  b  if  isinstanceb  int  fraction  return  monomorphicoperatora  b  elif  isinstanceb  float  return  fallbackoperatorfloata  b  elif  isinstanceb  complex  return  fallbackoperatorcomplexa  b  else  return  notimplemented  forward
keyword  检 验 python  关键字
 源码 libkeyword
py  此模块 允许 python  程序 确定 某个 字符串 是否为 关键字
iskeywords  如果 s  是一个 python  关键字 则返回 true
kwlist  包含 解释器 定义 的 所有 关键字 的 序列
 如果 所定义的 任何 关键字 仅在 特定 future  语句 生效 时 被 激活 它们也 将 被 包含在 内
issoftkeywords  如果 s  是一个 python  的 软 关键字 则返回 true
3
9 新版功能
softkwlist  包含 解释器 定义 的 所有 软 关键字 的 序列
 如果 所定义的 任何 软 关键字 仅在 特定 future  语句 生效 时 被 激活 它们也 将 被 包含在 内
3
9 新版功能
zlib  与 gzip  兼容的 压缩
secrets  生成 安全 随机 数字 用 于 管理 密码
3
6 新版功能
 源代码 libsecrets
pysecrets  模块 可用于 生成 高 加密 强 度 的 随机数 适 应 管理 密码、 账 户 验证、 安全 凭据 和 相关 机 密 数据 管理 的 需要
 特别地 应当 优先 使用 secrets  来 替代 random  模块中的 默认 伪 随机数生成器 后者 被设计用 于 建 模 和 仿 真 而 不 适用于 安全 和 加密
 参见 pep 506
 随机数
 通过 secrets  模块可以 访问 你 的操作系统 所 能 提供的 最 安全 的 随机性 来源
systemrandom  使用 操作系统 所提供的 最高 质 量 源 来生成 随机数 的 类
 请参阅 random
systemrandom  了解 更多细节
choicesequence  返回 从 一个 非空 序列中 随机 选 取 的 元素
randbelown  返回 一个0 n  范围 之内 的 随机 整数
randbitsk  返回 一个具有 k  个随机 比特位 的 整数
 生成 凭据
secrets  模块 提供了一些 生成 安全 凭据 的 函数 适用于 诸 如 密码 重置、 难以 猜 测 的 url  之 类 的应用 场景
tokenbytesnbytesnone  返回 一个包含 nbytes  个字节 的 随机 字节串
 如果 nbytes  为 none  或 未 提供 则会使用 一个 合理的 默认值
tokenhexnbytesnone  返回 一个 十六进制数 码 形式 的 随机 字符串
 字符串 具有 nbytes  个 随机字 节 每个 字节 转换为 两个 十六进制数 码
 如果 nbytes  为 none  或 未 提 供 则会使用 一个 合理的 默认值
tokenurlsafenbytesnone  返回 一个 url  安全 的 随机 字符串 包含 nbytes  个 随机字节
 文本 将 使 用 base 64 编码 因此 平均 来说 每个 字节 将 对 应1
3 个 结果 字符
 如果 nbytes  为 none  或 未 提供 则会使用 一个 合理的 默认值
 凭据 应当使用 多少 个字节？
 为 了 在 面 对 暴 力 攻击 时 保证 安全 凭据 必须 具有 足够的 随机性
 不幸的是 对 随机性 是否 足够的 标准 会 随着 计算机 越 来 越 强大 并 能够 在 更 短 时间 内 进行 更多 猜 测 而 不 断 提高
 在2015 年 时 人 们 认为32 字节256 位 的 随机性 对 于 secrets  模块 所 适合 的 典型 用 例来说 是 足够的
 作为 想要 自 行 管理 凭据 长度 的 用户 你可以通过 为 各种 token  函数 指定一个 int  参数 来 显式地 指定 凭据 要使用 多 大 的 随机性
 该参数 以字节 数 来表示 要使用的 随机性 大小
 在其他情况下 如果未 提供 参数 或者 如果参数为 none  则 token  函数 将 改 用 一个 合理的 默认值
 注解 该 默认值 可能在 任何 时候 被改变 包括在 维护 版本 更新 的时候
 其他 功能
comparedigesta  b  如果 字符串 a  与 b  相等 则返回 true  否则返回 false  该 处理 方 式 可 降 低 定 时 攻击 的 风 险
 请参阅 hmac
comparedigest  了解更多 细节
 应用 技巧 与 最佳 实 践
 本节 展示了 一些 使用 secrets  来 管理 基本 安全 级别 的应用 技巧 和 最佳 实 践
 生成 长度为 八 个字符的 字母数字 密码 import  string  import  secrets  alphabet  string
choicealphabet  for  i  in  range 8 注解 应用程序 不 能 以 可 恢复 的 格式 存储 密码 无论是 用 纯 文本 还是 加密
 它们 应 当使用 高 加密 强 度 的 单 向 不 可 恢复 哈希 函数来 加 盐 并 生成 哈希值
 生成 长度为 十 个字符的 字母数字 密码 其中包含 至少 一个 小写字母 至少 一个 大写字母 以及 至少 三个 数字 import  string  import  secrets  alphabet  string
isdigit  for  c  in  password 3 break  生成 xkcd  风格的 密码 串 import  secrets  on  standard  linux  systems  use  a  convenient  dictionary  file
choicewords  for  i  in  range 4 生成 难以 猜 测 的 临时 url  其中包含 适合 密码 恢复 应用 的 安全 凭据 import  secrets  url  httpsmydomain
 同步 原语
 源代码 libasynciolocks
pyasyncio  同步 原语 被设计为 与 threading  模块 的 类似 但 有两个 关键 注意 事项 asyncio  原语 不 是线程安全的 因此 它们不 应 被用于 os  线程 同步 而 应当使 用 threading  这些 同步 原语 的 方法 不 接受 timeout  参数 请使用 asyncio
waitfor  函数 来执行 带有 超时 的 操作
asyncio  具有 下列 基本 同步 原语 lock  event  condition  semaphore  boundedsemaphore
lock
lock  loopnone  实现 一个用于 asyncio  任务 的 互 斥 锁
 非 线程安全
 asyncio  锁 可被用来 保证 对 共享 资源 的 独 占 访问
 使用 lock  的 推荐 方式是 通过 async  with  语句 lock  asyncio
 later  async  with  lock  access  shared  state  这等价于 lock  asyncio
10 loop  形参
 coroutine  acquire  获取 锁
 此方法会 等待 直至 锁 为 unlocked  将其设 为 locked  并返回 true 
 当 有 一个 以 上 的 协程 在 acquire  中 被阻塞 则 会等待 解锁 最终 只有 一个协程 会被执行
 锁 的 获取 是 公 平 的 被执行 的 协程 将 是 第一个 开始 等待 锁 的 协程
 release  释放 锁
 当 锁 为 locked  时 将其设 为 unlocked  并返回
 如果 锁 为 unlocked  则会引发 runtimeerror
 locked  如果 锁 为 locked  则返回 true
event
event  loopnone  事件 对象
 该对象 不 是线程安全的
 asyncio  事件 可被用来 通知 多个 asyncio  任务 已经 有 事件 发生
 event  对象 会 管理 一个 内部 旗标 可通过 set  方法 将其设 为 true  并 通过 clear  方法 将其设 为 false
 wait  方法 会阻塞 直至 该 旗标 被设为 true
 该 旗标 初始 时 将 被设为 false
10 loop  形参
 示例 async  def  waiterevent  printwaiting  for  it 
runmain  coroutine  wait  等待 直至 事件 被设置
 如果 事件 已 被设置 则 立即 返回 true
 否则将 阻塞 直至 另一个 事件 调 用 set
 set  设置 事件
 所有 等待 事件 被设置 的 任务 将 被 立即 唤醒
 clear  清空 取消 设置 事件
 通过 wait  进行 等待 的 任务 现在将 会阻塞 直至 set  方法 再次 被 调用
 isset  如果 事件 已 被设置 则返回 true
condition
conditionlocknone  loopnone  条件 对象
 该对象 不 是线程安全的
 asyncio  条件 原语 可 被 任务 用 于 等待 某个 事件 发生 然后 获取对 共享 资源 的 独 占 访问
 在 本 质 上 condition  对象 合并 了 event  和 lock  的功能
 多个 condition  对象 有可能 共享 一个 lock  这允许 关 注 于 共享 资源 的特定 状态 的 不同 任务 实现 对 共享 资源 的 协 同 独 占 访问
 可选的 lock  参数必须 为 lock  对象 或 none
 在 后 一 种情况下 会 自 动 创建一个新的 lock  对象
10 loop  形参
 使用 condition  的 推荐 方式是 通过 async  with  语句 cond  asyncio
wait  这等价于 cond  asyncio
release  coroutine  acquire  获取 下层的 锁
 此方法会 等待 直至 下层的 锁 为 unlocked  将其设 为 locked  并返回 returns  true
 notifyn 1 唤醒 最多 n  个 正在等待 此 条件 的 任务 默认为1 个
 如果没有 任 务 正在等待 则 此方法 为空 操作
 锁 必须在 此方法 被调用 前 被 获取 并 在 随后 被 快速 释放
 如果 通过一个 unlocked  锁 调用 则会引发 runtimeerror
 locked  如果 下层的 锁 已被 获取 则返回 true
 notifyall  唤醒 所有 正在等待 此 条件 的 任务
 此方法 的 行为 类似于 notify  但 会 唤醒 所有 正在等待 的 任务
 锁 必须在 此方法 被调用 前 被 获取 并 在 随后 被 快速 释放
 如果 通过一个 unlocked  锁 调用 则会引发 runtimeerror
 release  释放 下层的 锁
 当 在 未 锁定 的 锁 上 发起调用 时会引发 runtimeerror
 coroutine  wait  等待 直至 收到 通知
 当 此方法 被调用 时如果 调用 方 任务 未 获得锁 则会引发 runtimeerror 
 这个方法 会 释放 下层的 锁 然后 保持 阻塞直到 被 notify  或 notifyall  调用 所 唤醒
 一旦 被 唤醒 condition  会 重新 获取 它 的 锁 并且 此方法将 返回 true
 coroutine  waitforpredicate  等待直到 目标 值 变 为 true
 目标 必须为一个 可调用对象 其 结果将 被 解读为 一个 布尔值
 最终 的 值 将 为 返回值
semaphore
boundedsemaphore
boundedsemaphorevalue 1 loopnone  绑定 的 信号 量 对象
 该对象 不 是线程安全的
 boundedsemaphore  是 特殊 版本 的 semaphore  如果在 release  中 内 部 计数器 值 增加 到 初始 value  以 上 它 将 引发一个 valueerror
10 loop  形参
 在3
9 版更改 使用 await  lock  或 yield  from  lock  以及 或者 with  语句 with  await  lock  with  yield  from  lock  来获取 锁 的 操作 已被移除
 请改用 async  with  lock
 软件 打包 和 分发
compileall  bytecompile  python  libraries
commandline  use
 see  已 缓存 字节码 的 失效 for  more  information  on  how  python  validates  bytecode  cache  files  at  runtime
 在3
2 版更改 added  the  i  b  and  h  options
 在3
5 版更改 added  the  j  r  and  qq  options
 q  optionwas  changed  to  a  multilevel  value
 b  will  always  produce  a  bytecode  file  ending  in 
 在3
7 版更改 added  the  invalidationmode  option
 在3
9 版更改 added  the  s  p  e  and  hardlinkdupesoptions
public  functions
 在3
2 版更改 added  the  legacy  and  optimize  parameter
 在3
5 版更改 added  the  workers  parameter
 在3
5 版更改 quiet  parameter  was  changed  to  a  multilevel  value
 在3
5 版更改 the  legacy  parameter  only  writes  out 
pyc  files  not 
pyo  files  no  matter  what  the  value  of  optimize  is
 在3
6 版更改 接受一个 类 路径对象
 在3
7 版更改 the  invalidationmode  parameter  was  added
 在3
2 版更改 the  invalidationmode  parameters  default  value  is  updated  to  none
 在3
8 版更改 setting  workers  to 0 now  chooses  the  optimal  number  of  cores
 在3
9 版更改 added  stripdir  prependdir  limitsldest  and  hardlinkdupes  arguments
 default  value  of  maxlevels  was  changed  from 10 to  sys
3
2 新版功能
 在3
5 版更改 quiet  parameter  was  changed  to  a  multilevel  value
 在3
5 版更改 the  legacy  parameter  only  writes  out 
pyc  files  not 
pyo  files  no  matter  what  the  value  of  optimize  is
 在3
7 版更改 the  invalidationmode  parameter  was  added
 在3
2 版更改 the  invalidationmode  parameters  default  value  is  updated  to  none
 在3
9 版更改 added  stripdir  prependdir  limitsldest  and  hardlinkdupes  arguments
 在3
2 版更改 added  the  legacy  and  optimize  parameter
 在3
5 版更改 quiet  parameter  was  changed  to  a  multilevel  value
 在3
5 版更改 the  legacy  parameter  only  writes  out 
pyc  files  not 
pyo  files  no  matter  what  the  value  of  optimize  is
 在3
7 版更改 the  invalidationmode  parameter  was  added
 在3
2 版更改 the  invalidationmode  parameters  default  value  is  updated  to  none
pathlib  forcetrue  参见 模块 pycompile  bytecompile  a  single  source  file
filecmp  文件 及 目录 的 比较
 源代码 libfilecmp
pyfilecmp  模块定义了 用 于 比较 文件 及 目录 的 函数 并且 可以选 取 多种 关于 时间 和 准确 性 的 折 衷 方案
 对 于 文件 的 比较 另 见 difflib  模块
filecmp  模块定义了 如 下 函数 filecmp
cmpf 1 f 2 shallowtrue  比较 名为 f 1 和 f 2 的 文件 如果它们 似 乎 相等 则返回 true  否则 返回 false 
 如果 shallow  为真 那么 具有相同 os
stat  签名 的 文件 将 会 被认为 是 相等的
 否则将 比较 文件 的内容
 需要 注意 没有 外部 程序 被 该函数 调用 这 赋 予 了 该函数 可移植 性 与 效率
 该函数 会 缓存 过去 的 比较 及其 结果 且 在 文件 的 os
stat  信息 变化 后 缓 存 条目 失效
 所有的 缓存 可以通过 clearcache  清除
cmpfilesdir 1 dir 2 common  shallowtrue  比较 在 两个 目录 dir 1 和 dir 2 中 由 common  所 确定 名称 的 文件
 返回 三 组 文件名 列表 match  mismatch  errors 
 match  含 有 相匹配 的 文件 mismatch  含 有 那些 不匹配 的 然后 errors  列出 那些 未被 比较 文件 的 名称
 如果文件 不存在 于 两 目录 中的任 一个 或者 用户 缺少 读取 它们的 权限 又 或者 因为 其他的 一些 原因 而 无法 比较 那么 这些 文件 将 会 被 列 在 errors  中
 参数 shallow  具有 同 filecmp
cmp  一致 的含义 与 默认值
 例如 cmpfilesa  b  c  de  将 会 比较 ac  与 bc  以及 ade  与 bde 
 c  和 de  将 会 各 自 出现在 返回 的 三 个列表 里 的 某 一个列表 中
clearcache  清除 filecmp  缓存
 如果一个 文件 过 快 地 修改 以 至 于 超过 底层 文件系统 记 录 修改 时间 的精度 那么 该函数 可能 有 助 于 比较 该 类 文件
3
4 新版功能
dircmp  类
dircmpa  b  ignorenone  hidenone  创建 一个用于 比较 目录 a  和 b  的 新 的 目录 比较 对象
 ignore  是 需 要 忽略 的文件名 列表 且 默认为 filecmp
defaultignores 
 hide  是需要 隐藏 的文件名 列表 且 默认为 os
pardir 
 dircmp  类 如 filecmp
cmp  中 所描述的 那样 对 文件进行 shallow  比 较
 dircmp  类提供 以下方法 report  将 a  与 b  之间的 比较 打印到 sys
stdout 
 reportpartialclosure  打印 a  与 b  及 共同 直接 子目录 的 比较 结果
 reportfullclosure  打印 a  与 b  及 共同 子目录 比较 结果 递归地
 dircmp  类 提供了一些 有趣 的 属性 用 以 得到 关于 参 与 比较 的 目录 树 的各种 信息
 需要 注意 通过 getattr  钩子 所有的 属性 将 会 惰 性 求值 因此 如果 只 使用 那些 计算 简 便 的 属性 将不会 有 速度 损 失
 left  目录 a 
 right  目录 b 
 leftlist  经 hide  和 ignore  过滤 目录 a  中的文件 与 子目录
 rightlist  经 hide  和 ignore  过滤 目录 b  中的文件 与 子目录
 common  同时 存在于 目录 a  和 b  中的文件 和 子目录
 leftonly  仅在 目录 a  中的文件 和 子目录
 rightonly  仅在 目录 b  中的文件 和 子目录
 commondirs  同时 存在于 目录 a  和 b  中 的 子目录
 commonfiles  同时 存在于 目录 a  和 b  中的文件
 commonfunny  在 目录 a  和 b  中 类型 不同 的名字 或者 那些 os
stat  报告 错 误 的名字
 samefiles  在 目录 a  和 b  中 使用 类 的 文件 比较 操作符 相等的 文件
 difffiles  在 目录 a  和 b  中 根据 类 的 文件 比较 操作符 判 定 内容 不 等 的 文件
 funnyfiles  在 目录 a  和 b  中 无法 比较 的 文件
 subdirs  一个 将 commondirs  中 名称映射 为 dircmp  对象 的字典
defaultignores 3
4 新版功能
 默认 被 dircmp  忽略 的 目录 列表
 下面是一 个简单的例子 使用 subdirs  属性 递归 搜索 两个 目录 以 显示 公共 差异 文件 from  filecmp  import  dircmp  def  printdifffilesdcmp 
sndhdr  推 测 声 音 文件 的 类型
pty  伪 终端 工具
 源代码 libpty
pypty  模块定义了一 些 处理 伪 终端 概念 的 操作 启动 另一个 进程 并 能 以 程序 方式 在 其 控制 终端 中进行 读写
 由 于 伪 终端 处理 高度 依赖于 具体 平台 因此 此功能 只有 针对 linux  的 代码
 linux  代码 也可 在其他 平台上 工作 但是 未 经 测试
pty  模块定义了 下列函数 pty
fork  分 叉
 将 子进程 的 控制 终端 连接到 一个 伪 终端
 返回值为 pid  fd
 请注意 子进程 获得 pid 0 而 fd  为 invalid
 父 进程 返回值为 子进 程 的 pid  而 fd  为 一个 连接到 子进程 的 控制 终端 并 同时 连接到 子进程 的 标准 输入和输出 的文件描述符
openpty  打开 一个新的 伪 终端 对 如果可能 将 使用 os
openpty  或 是 针对 通 用 unix  系统 的 模拟 代码
 返回 一个 文件描述符 对 master  slave  分别 表示 主 从 两 端
spawnargv  masterread  stdinread  生成一个 进程 并将其 控制 终端 连接到 当前进程 的 标准 io
 这 常 被用来 应 对 坚 持 要 从 控制 终端 读取数据 的 程序
 在 pty  背 后 生成 的 进程 预期 最后 将 被 终止 而且 当 它 被 终止 时 spawn  将 会返回
 会 向 masterread  和 stdinread  函数 传入一个 文件描述符 供 它们 读取 并且 它们 总是 应当 返回 一个 字节串
 为 了 强制 spawn  在 子进程 退出 之前 返回 所 以 应当 抛出 oserror
 两个 函数 的 默认 实现 在每次 函数 被调用时 将 读取 并返回 至多1024 个字节
 会 向 masterread  回调 传入 伪 终端 的 主 文件描述符 以 从 子进程 读取 输出 而 向 stdinread  传入 文件描述符0 以 从 父 进程 的 标准输入 读取数据
 从 两个 回调 返回 空 字节串 会 被 解读为 文件 结束 eof  条件 在 此 之后 回调 将 不再 被调用
 如果 stdinread  发出 eof  信号 则 控制 终端 就不 能 再 与 父 进程 或 子进程 进行 通信
 除非 子进程 将 不带 任何 输入 就 退出 否则 随后 spawn  将 一 直 循环 下 去
 如果 masterread  发出 eof  信号 则 会 有相同 的 行为 结果 至少 是 在 linux  上
 如果两 个 回调 都 发出 eof  信号 则 spawn  可能 将 永 不 返回 除非 在你的 平 台上 当 传入 三个 空列表 时 select  会抛出 一个错误
 这是一个 程序 缺 陷 相关 文档 见 问题26228
 从 子进程 中 的 os
waitpid  返回 退出 状态 值
 可以使用 waitstatustoexitcode  来 将 退出 状态 转换为 退出 码
 引发一个 审计事件 pty
spawn  附带参数 argv
 在3
4 版更改 spawn  现在会 从 子进程 的 os
waitpid  返回 状态 值
 示例
xmlsaxsaxutils  sax  工具集
 源代码 libxmlsaxsaxutils
pyxml
saxutils  模块包含 一些 在 创建 sax  应用程序 时 十分 有用的 类和函数 它们可以 被 直接使用 或者 是作为 基类 使用
escapedata  entities  对 数据 字符串中的 和 进行 转义
 你可以通过 传入一个 字典 作为 可选的 entities  形参 来 对 其他 字符串 数据 进行 转义
 字典 的键和值 必须为 字符串 每个键 将 被替换为 其 所对应的 值
 字符 和 总是会 被 转义 即使 提供了 entities
unescapedata  entities  对 字符串 数据 中 的 amp  lt  和 gt  进行 反 转义
 你可以通过 传入一个 字典 作为 可选的 entities  形参 来 对 其他 数据 字符串 进行 转义
 字典 的键和值 必须 都 为 字符串 每个键 将 被替换为 所对应的 值
 amp  lt  和 gt  将总是 保持 不 被 转义 即使 提供了 entities
quoteattrdata  entities  类似于 escape  但 还 会 对 data  进行 处理 以 将 其 用 作 属性 值
 返回 值 是 data  加上 任何 额外 要求 的 替换 的 带 引号 版本
quoteattr  将 基 于 data  的内容 选择 一个 引号 字符 以 尽 量 避免 在 字符串 中 编码 任何 引号 字符
 如果 单 双引号 字符 在 data  中 都 存在则 双引号 字符 将 被 编码 并且 data  将 使用 双引号 来 标记
 结果 字符串 可 被直接 用 作 属性 值 printelement  attrs  quoteattrab  cd  ef  element  attrab  cd  quot  ef  此 函数 适用于 为 html  或 任何 使用 引用 实体 语法 的 sgml  生成 属性 值
xmlgeneratoroutnone  encodingiso 88591 shortemptyelementsfalse  这个类 通过将 sax  事件 写 回 到 xml  文档 来实现 contenthandler  接口
 换句话说 使用 xmlgenerator  作为 内容 处理程序 将 重新 产生 所 解析 的 原 始 文档
 out  应当为 一个 文件类对象 它 默认 将 为 sys
 encoding  为 输出 流 的 编码格式 它 默认 将 为 iso 88591
 shortemptyelements  控制 不包含 内容的 元素 的 格式化 如 为 false  默认值 则 它们会 以 开始 结束 标记 对 的形式 被 发送 如果设 为 true  则 它 们 会 以 单个 自 结束 标记 的形式 被 发送
3
2 新版功能 shortemptyelements  形参
xmlfilterbasebase  这个类 被设计用 来 分隔 xmlreader  和 客户端 应用 的 事件 处理程序
 在 默 认情况下 它 除了 将 请求 传 送给 读取 器 并 将 事件 传 送给 处理程序 之外 什么 都 不 做 但 其子类 可以 重载 特定的 方法 以 在 传 送 它们 的时候 修改 事件 流 或 配置 请求
prepareinputsourcesource  base  此 函数 接受一个 输入 源 和 一个可选的 基准 url  并返回一个 经过 完整 解析 可 供 读取 的 inputsource
 输入 源 的 给出 形式 可以为 字符串、 文件类对象 或 inputsource  对象 解析器 将 使用 此 函数来 针对 它们的 parse  方法 实 现 多 态 source  参数
math  数学 函数
 该 模块提供了 对 c  标准 定义 的 数学 函数 的 访问
 这些函数 不 适用于 复数 如果你需要 计算 复数 请使用 cmath  模块中的 同名 函数
 将 支持 计算 复数的 函数 区分 开 的 目 的 来自 于 大多数 开发者 并 不 愿 意 像 数学 家 一样 需要 学习 复数的 概念
 得到 一个异常 而不是 一个 复数 结果 使得 开发者 能够 更早 地 监 测到 传递给 这些函数 的 参数 中包含 复数 进 而 调 查 其 产生 的原因
 该模块提供 了以下函数
 除非 另 有 明确 说明 否则 所有 返回值 均为 浮点数
 数 论 与 表示 函数
ceilx  返回 x  的 上限 即 大于 或者 等于 x  的最小 整数
 如果 x  不是一个 浮 点数 则 委托 x
ceil  返回 一个 integral  类 的 值
combn  k  返回 不 重复 且 无 顺序 地 从 n  项 中选择 k  项 的方式 总 数
 当 k  n  时 取值 为 n  k  n  k  当 k  n  时 取值 为零
 也 称为 二 项 式 系 数 因为它 等价于 表达式1 x  n  的 多 项 式 展开 中 第 k  项 的 系 数
 如果 任 一 参数 不 为整数 则会引发 typeerror
 如果 任 一 参数为 负数 则会引 发 valueerror
3
8 新版功能
copysignx  y  返回 一个 基于 x  的绝对值 和 y  的符号 的 浮点数
 在 支持 带 符号 零 的 平 台上 copysign 1
0 返回1
fabsx  返回 x  的绝对值
factorialx  以 一个整数 返回 x  的 阶 乘
 如果 x  不 是 整数或 为 负数 时 则将引发 valueerror
3
9 版后已移除 接受 具有 整数值 的 浮点数 例如5
0 的 行为 已被弃用
floorx  返回 x  的 向下 取 整 小于 或 等于 x  的最大 整数
 如果 x  不 是 浮点数 则 委托 x
floor  它 应 返回 integral  值
fmodx  y  返回 fmodx  y  由 平台 c  库 定义
 请注意 python  表达式 x  y  可 能 不 会返回 相同 的结果
c  标准 的 目 的 是 fmodx  y  完全 数学 上 到 无 限 精度 等于 x  ny  对 于 某个 整数 n  使得 结果 具有 与 x  相同 的符号 和 小于 absy  的 幅 度
python  的 x  y  返回 带有 y  符号 的 结果 并且 可能不 能 完全 计算 浮点 参数
 例如 fmod 1 e 1001 e 100 是1 e 100 但 python  的1 e 1001 e 100 的 结果是1 e 1001 e 100 它 不 能 完全 表示为 浮点数 并且 取 整 为 令人 惊 讶 的1 e 100
 出 于 这 个 原因 函数 fmod  在 使用 浮点数 时 通常是 首选 而 python  的 x  y  在 使用 整数 时 是 首选
frexpx  返回 x  的 尾 数 和 指 数作为 对 m  e
 m  是 一个浮点数 e  是 一 个整数 正 好 是 x  m 2 e 
 如果 x  为零则 返回0
00 否则返回0
5 absm 1
 这 用 于 以 可移植 方式 分 离 浮点数 的 内 部 表示
fsumiterable  返回 迭代 中 的 精确 浮点 值
 通过 跟踪 多个 中 间 部分 和 来避免 精度 损 失 sum
0 该 算法的 准确 性 取决于 ieee 754 算术 保证 和 舍入模式 为 半 偶 的 典型 情况
 在 某些 非 windows  版本中 底层 c  库 使用 扩展 精度 添加 并且 有 时 可能会 使 中 间 和 加 倍 导致 它 在 最低 有效位 中 关闭
 有关 待 进一步 讨论 和 两种 替代 方法 参见 aspn  cookbook  recipes  for  accurate  floating  point  summation
gcdintegers  返回给定 的 整数 参数 的最大 公 约 数
 如果有 一个参数 非零 则返回 值 将 是 能 同时 整 除 所有 参数 的最大 正整数
 如果所 有 参数 为零则 返回值为0
 不带参数 的 gcd  返回0
3
5 新版功能
 在3
9 版更改 添加了 对 任意 数量的 参数 的 支持
 之前的 版本 只 支持 两个 参数
0 若 a  和 b  的 值 比较 接近 则返回 true  否则返回 false
 根据 给定的 绝对 和 相对 容差 确定 两个值 是否 被认为 是 接近 的
 reltol  是 相对 容差—— 它 是 a  和 b  之间 允许 的最大 差 值 相对于 a  或 b  的 较大 绝对值
 例如要 设置5％ 的 容差 请 传递 reltol 0
05
 默认 容差 为1 e 09 确保 两个值 在 大 约9 位 十进制 数字 内 相同
 reltol  必须 大于 零
 abstol  是 最小 绝对 容差—— 对 于 接近 零 的 比较 很有用
 abstol  必须 至少 为零
 如果没有 错误 发生 结果将 是 absab  maxreltol  maxabsa  absb  abstol 
 ieee 754 特殊 值 nan  inf  和 inf  将根据 ieee  规则 处理
 具体 来 说 nan  不 被认为 接近 任何其他 值 包括 nan 
 inf  和 inf  只 被认为 接近 自己
3
5 新版功能
 参见 pep 485—— 用 于 测试 近似 相等的 函数 math
isfinitex  如果 x  既 不 是 无穷大 也不 是 nan  则返回 true  否则返回 false 
 注意0
0 被认为 是 有限 的
3
2 新版功能
isinfx  如果 x  是 正 或 负 无穷大 则返回 true  否则返回 false 
isnanx  如果 x  是 nan  不 是 数字 则返回 true  否则返回 false 
isqrtn  返回 非负 整数 n  的 整数 平方 根
 这 就是 对 n  的 实际 平方 根 向下 取 整 或者 相当于 使得 a ² ≤  n  的最大 整数 a
 对 于 某些 应用 来说 可以更 适合 取值 为 使得 n  ≤  a ² 的最小 整数 a  或者 换句话说 就是 n  的 实际 平方 根 向 上 取 整
 对 于 正 数 n  这 可以使 用 a 1 isqrtn 1 来 计算
3
8 新版功能
lcmintegers  返回给定 的 整数 参数 的最小 公 倍 数
 如果所 有 参数 均 非零 则返回 值 将 是 为 所有 参数 的 整数 倍 的最小 正整数
 如果参数 之一 为零则 返回值为0
 不带参数 的 lcm  返回1
3
9 新版功能
ldexpx  i  返回 x 2 i 
 这 基本上 是 函数 frexp  的 反 函数
modfx  返回 x  的 小 数 和 整数 部分
 两个 结果 都 带有 x  的符号 并且 是 浮点数
nextafterx  y  返回 x  趋 向 于 y  的 最接近的 浮点数 值
 如果 x  等于 y  则返回 y
 示例 math
inf  的 方向 朝 上 趋 向 于 正 无穷
inf  的 方向 朝 下 趋 向 于 负 无穷
0 趋 向 于 零
inf  x  趋 向 于 零 的 反 方向
 另请参阅 math
3
9 新版功能
permn  knone  返回 不 重复 且 有 顺序 地 从 n  项 中选择 k  项 的方式 总 数
 当 k  n  时 取值 为 n  n  k  当 k  n  时 取值 为零
 如果 k  未指定 或 为 none  则 k  默认值为 n  并且 函数 将 返回 n
 如果 任 一 参数 不 为整数 则会引发 typeerror
 如果 任 一 参数为 负数 则会引 发 valueerror
3
8 新版功能
proditerable  start 1 计算 输入 的 iterable  中 所有元素 的 积
 积 的 默认 start  值 为1
 当 可迭代对象 为空 时返回 起始 值
 此 函数 特别 针对 数字 值 使用 并 会 拒 绝 非 数字类型
3
8 新版功能
remainderx  y  返回 ieee 754 风格的 x  相对于 y  的 余数
 对 于 有限 x  和 有限 非零 y  这是 差异 x  ny  其 中 n  是 与 商 x  y  的 精确 值 最接近的 整数
 如果 x  y  恰好 位于 两个 连续 整数 之间 则 最近 的 even  整数 用 于 n 
 余数 r  remainderx  y  因此 总是 满足 absr 0
5 absy 
 特殊 情况 遵循 ieee 754 特别是 remainderx  math
inf  对 于任何 有限 x  都 是 x  而 remainderx 0 和 remaindermath
inf  x  引 发 valueerror  适用于 任何 非 nan  的 x 
 如果 余数 运算 的结果 为零则 该 零 将 具有与 x  相同 的符号
 在 使用 ieee 754 二进制浮点 的平台上 此操作 的结果 始终 可以 完全 表示 不 会 引入 舍入 错误
3
7 新版功能
truncx  返回 real  值 x  截断 为 integral  通常是 整数
 委托给 x
ulpx  返回 浮点数 x  的最小 有效 比特位 的 值 如果 x  是 nan  非 数字 则返回 x
 如果 x  为负 数则返回 ulpx
 如果 x  为 正 数则返回 x
 如果 x  等于 则返回 去 正 规 化 的 可表示 最小 正 浮点数 小于 正 规 化 的 最小 正 浮点数 sys
 如果 x  等于 可表示 最大 正 浮点数 则返回 x  的 最低 有效 比特位 的 值 使得 小于 x  的第一个 浮点数 为 x  ulpx
 在其他情况下 x  是一个 有限 的 正 数则返回 x  的 最低 有效 比特位 的 值 使得 大于 x  的第一个 浮点数 为 x  ulpx
 ulp  即 unit  in  the  last  place  的 缩 写
 另请参阅 math
nextafter  和 sys
3
9 新版功能
 注意 frexp  和 modf  具有与 它们的 c  等价 函数 不同的 调用 返回 模式 它们 采用 单个 参数 并返回一 对 值 而不是 通过 输出 形参 返回 它们的 第二个 返回 参数 python  中没有 这样的 东西
 对 于 ceil  floor  和 modf  函数 请注意 所有 足够 大 的 浮点数 都 是 精确 整数
python  浮点数 通常不 超过53 位 的精度 与 平台 c  double  类型 相同 在这种情况下 任何 浮点 x  与 absx 252 必 然 没有 小 数 位
 幂 函数 与 对 数 函数
expx  返回 e  次 x  幂 其 中 e 2
 是 自然 对 数 的 基 数
 这通常 比 math
e  x  或 powmath
e  x  更 精确
expm 1 x  返回 e  的 x  次 幂 减1
 这里 e  是 自然 对 数 的 基 数
 对 于 小 浮点数 x  expx 1 中 的 减 法 可能导致 significant  loss  of  precision  expm 1 函数 提供了一种 将 此 数量 计算 为 全 精度的 方法 from  math  import  exp  expm 1 exp 1 e 51 gives  result  accurate  to 11 places 1
0000050000166668 e 053
2 新版功能
logx  base  使用 一个参数 返回 x  的 自然 对 数 底 为 e 
 使用 两个参数 返回给定 的 base  的 对 数 x  计算 为 logxlogbase 
log 1 px  返回1 x  base  e  的 自然 对 数
 以 对 于 接近 零 的 x  精确 的方式 计算 结果
log 2 x  返回 x  以2 为底 的 对 数
 这通常 比 logx 2 更 准确
3
3 新版功能
 参见 int
bitlength  返回 表示 二进制 整数 所需的 位 数 不包括 符号 和 前导 零
log 10 x  返回 x  底 为10 的 对 数
 这通常 比 logx 10 更 准确
powx  y  将 返回 x  的 y  次 幂
 特殊 情况 尽可能 遵循 c 99 标准 的 附 录 f
 特别是 pow 1
0 x  和 powx 0
0 总是返回1
0 即使 x  是 零 或 nan
 如果 x  和 y  都 是 有限 的 x  是 负数 y  不 是 整数 那么 powx  y  是 未定义 的 并且 引发 valueerror 
 与内置 的 运算符 不同 math
pow  将 其 参数 转换为 float  类型
 使用 或 内置的 pow  函数来 计算 精确的 整数 幂
sqrtx  返回 x  的 平方 根
 三 角 函数
acosx  返回 以 弧度 为单位 的 x  的 反 余 弦值
 结果 范围 在0 到 pi  之间
asinx  返回 以 弧度 为单位 的 x  的 反 正 弦值
 结果 范围 在 pi 2 到 pi 2 之 间
atanx  返回 以 弧度 为单位 的 x  的 反 正 切 值
 结果 范围 在 pi 2 到 pi 2 之 间
atan 2 y  x  以 弧度 为单位 返回 atany  x 
 结果是 在 pi  和 pi  之间
 从 原 点 到 点 x  y  的 平 面 矢 量 使 该 角度 与 正 x  轴 成 正 比
 atan 2 的 点 的 两个 输入 的符号 都 是 已知 的因此 它可以 计算 角度 的 正确 象 限
 例如 atan 1 和 atan 211 都 是 pi 4 但 atan 211 是3 pi 4
cosx  返回 x  弧度 的 余 弦值
distp  q  返回 p  与 q  两 点 之间的 欧 几 里 得 距离 以 一个 坐标 序列或 可迭代对 象 的形式 给出
 两个 点 必须 具有相同的 维 度
 大致 相当于 sqrtsumpx  qx 2
0 for  px  qx  in  zipp  q 3
8 新版功能
hypotcoordinates  返回 欧 几 里 得 范 数 sqrtsumx 2 for  x  in  coordinates
 这是 从 原 点 到 坐标 给定 点 的 向 量 长度
 对于一个 二 维 点 x  y  这等价于 使用 毕 达 哥 拉 斯 定义 sqrtxx  yy  计算 一个 直 角 三 角 形 的 斜 边
 在3
8 版更改 添加了 对 n  维 点 的 支持
 之前的 版本 只 支持 二 维 点
sinx  返回 x  弧度 的 正 弦值
tanx  返回 x  弧度 的 正 切 值
 角度 转换
degreesx  将 角度 x  从 弧度 转换为 度 数
radiansx  将 角度 x  从 度 数 转换为 弧度
 双曲 函数
 双曲 函数 是基于 双曲 线 而非 圆 来 对 三 角 函数 进行 模拟
acoshx  返回 x  的 反 双曲 余 弦值
asinhx  返回 x  的 反 双曲 正 弦值
atanhx  返回 x  的 反 双曲 正 切 值
coshx  返回 x  的 双曲 余 弦值
sinhx  返回 x  的 双曲 正 弦值
tanhx  返回 x  的 双曲 正 切 值
 特殊 函数
erfx  返回 x  处 的 error  function 
 erf  函数 可用于 计算 传统的 统计 函数 如 累积 标准 正态分布 def  phix  cumulative  distribution  function  for  the  standard  normal  distribution  return 1
03
2 新版功能
erfcx  返回 x  处 的 互 补 误 差 函数
 互 补 错误 函数 定义为1
 它 用 于 x  的 大 值 从 其 中 减 去 一个 会导致 有效位 数 损 失
3
2 新版功能
gammax  返回 x  处 的 伽 马 函数 值
3
2 新版功能
lgammax  返回 gamma  函数 在 x  绝对值 的 自然 对 数
3
2 新版功能
 常 数
datetime  基本的 日期和时间 类型
 感知型 对象 和 简单型 对象
 日期和时间 对象可以 根据 它们 是否 包含 时区 信息 而 分 为 感知型 和 简单型 两 类
 充 分 掌 握 应用 性 算法 和 政 治 性 时间 调整 信息 例如 时区 和 夏 令 时 的情况下 一个 感知型 对象 就能 相对于 其他 感知型 对象 来 精确 定位 自身 时间 点
 感知型 对象 是 用来 表示一个 没有 解释 空间 的 固定 时间 点
1 简单型 对象 没有 包含 足够 多 的 信息 来 无 歧义 地 相对于 其他 datetime  对象 来 定位 自身 时间 点
 不 论 一个 简单型 对象 所 代表 的 是 世界 标准 时间 utc 、 当 地 时间 还是 某个 其他 时区的 时间 完全 取决于 具体 程序 就像 一个 特定 数字 所 代表 的 是 米、 英 里 还是 质 量 完全 取决于 具体 程序 一样
 简单型 对象 更易 于 理解 和 使用 代 价 则 是 忽略 了 某些 现 实 性 考 量
 对 于 要求 感知型 对象 的应用 datetime  和 time  对象具有 一个可选的 时区 信息 属性 tzinfo  它 可 被设为 抽象 类 tzinfo  的子类 的 一个实例
 这些 tzinfo  对象 会 捕获 与 utc  时间 的 差 值、 时区 名称 以及 夏 令 时 是否 生效 等 信息
datetime  模块 只 提供了一个 具体 的 tzinfo  类 即 timezone  类
timezone  类可以 表示 具有 相对于 utc  的 固定 时差 的简单 时区 例如 utc  本身 或 北 美 的 est  和 edt  时区 等
 支持 时间 的 详细 程度 取决于 具体 的应用
 世界 各 地 的 时间 调整 规则 往往 是 政 治 性 多 于 合理 性 经常 会发生 变化 除了 utc  之外 并没有 一个 能 适合 所有 应用 的 标准
 常量
minyear  date  或者 datetime  对象 允许 的最小 年份
 常量 minyear  是1
maxyear  date  或 datetime  对象 允许 最大 的 年份
 常量 maxyear  是9999
 有效的 类型
date  一个 理 想 化 的 简单型 日期 它 假设 当 今 的 公 历 在 过去 和 未来 永远 有效
 属性 year  month  and  day
time  一个 独立 于任何 特定 日期 的 理 想 化 时间 它 假设 每一 天 都 恰好 等于246060 秒
 这里 没有 闰 秒 的概念
 包含 属性 hour  minute  second  microsecond  和 tzinfo
datetime  日期和时间 的 结合
 属性 year  month  day  hour  minute  second  microsecond  and  tzinfo
timedelta  表示 两个 date  对象或者 time  对象或者 datetime  对象 之间的 时间 间隔 精确 到 微 秒
tzinfo  一个 描述 时区 信息 对象 的抽象基类
 用来 给 datetime  和 time  类提供 自定义 的 时间 调整 概念 例如 处理 时区 和 或 夏 令 时
timezone  一个 实现了 tzinfo  抽象基类 的子类 用于表示 相对于 世界 标准 时间 utc  的 偏移量
3
2 新版功能
 这些 类型的对象 都 是不可变的
 子类 关系 object  timedelta  tzinfo  timezone  time  date  datetime
 通用的 特征属性
date  datetime  time  和 timezone  类型 共享 这些 通 用 特性 这些 类型的对象 都 是不可变的
 这些 类型的对象 是 可哈希 的 这意味着 它们可 被作为 字典的键
 这些 类型的对象 支持 通过 pickle  模块 进行 高效 的 封存
 确定 一个 对象 是 感知型 还是 简单型
date  类型的对象 都 是 简单型 的
time  或 datetime  类型的对象 可以是 感知型 或者 简单型
 一个 datetime  对象 d  在以下 条件 同时 成 立 时 将 是 感知型 的1
tzinfo  不 为 none 2
utcoffsetd  不 返回 none  在其他情况下 d  将 是 简单型 的
 一个 time  对象 t  在以下 条件 同时 成 立 时 将 是 感知型 的1
tzinfo  不 为 none 2
utcoffsetnone  不 返回 none
 在其他情况下 t  将 是 简单型 的
 感知型 和 简单型 之间的 区别 不 适用于 timedelta  对象
timedelta  类对象
classtimedelta  用法示例
 一个 标准 化 的附加 示例 components  of  anotheryear  add  up  to  exactly 365 days  from  datetime  import  timedelta  year  timedeltadays 365 anotheryear  timedeltaweeks 40 days 84 hours 23
0 timedelta  算术运算 的 示例 from  datetime  import  timedelta  year  timedeltadays 365 tenyears 10 year  tenyears  datetime
date  对象
classdate  用法示例
 计算 距离 特定 事件 天 数 的 例子 import  time  from  datetime  import  date  today  date
days 202 使用 date  的更多 例子 from  datetime  import  date  d  date
datetime  对象
 用法示例 datetime
 使用 datetime  对象 的 例子 from  datetime  import  datetime  date  time  timezone  using  datetime
 以下示例 定义了一个 tzinfo  子类 它 捕获 kabul  afghanistan  时区的 信息 该 时区 使用4 utc  直到1945 年 之后 则 使用430 utc  from  datetime  import  timedelta  datetime  tzinfo  timezone  class  kabultztzinfo  kabul  used 4 until 1945 when  they  moved  to 430 utcmovedate  datetime 1944123120 tzinfotimezone
utcmovedate  return 0430 return 04 上述 kabultz  的 用 法 tz 1 kabultz  datetime  before  the  change  dt 1 datetime 190011211630 tzinfotz 1 printdt 1
time  对象
 用法示例 time
 使用 time  对象 的 例子 from  datetime  import  time  tzinfo  timedelta  class  tz 1 tzinfo 
tzinfo  对象
timezone  对象
timezone  类 是 tzinfo  的子类 它 的 每个 实例 都 代表一个 以 与 utc  的 固定 时差 来 定义 的时区
 此 类 的 对象 不 可被用于 代表 某些 特殊 地 点 的时区 信息 这些 地 点 在 一 年 的不同 日期 会 使用 不同的 时差 或 是 在 历史 上 对 民 用 时间 进行 过 调整
timezoneoffset  namenone  offset  参数必须 指定 为 一个 timedelta  对象 表示 本地 时间 与 utc  的 时差
 它必须 严格 限制 于 timedeltahours 24 和 timedeltahours 24 之间 否 则会引发 valueerror
 name  参数 是可选的
 如果指定 则 必须为一个 字符串 它 将 被用作 datetime
tzname  方法 的返回值
3
2 新版功能
 在3
7 版更改 utc  时差 不再 限制为 一个整数 分 钟 值
utcoffsetdt  返回 当 timezone  实例 被 构造 时 指定 的 固定 值
 dt  参数 会被忽略
 返回值 是一个 timedelta  实例 其 值 等于 本地 时间 与 utc  之间的 时差
 在3
7 版更改 utc  时差 不再 限制为 一个整数 分 钟 值
tznamedt  返回 当 timezone  实例 被 构造 时 指定 的 固定 值
 如果没有 在 构造器 中 提供 name  则 tznamedt  所返回的 名称 将根据 offset  值 按 以 下 规则 生成
 如果 offset  为 timedelta 0 则 名称 为 utc  否则为 字符串 utc ± hhmm  其 中± 为 offset  的 正负 符号 hh  和 mm  分别 为 表示 offset
hours  和 offset
minutes  的两个 数 码
 在3
6 版更改 由 offsettimedelta 0 生成 的 名称 现 在 为 简单的 utc  而不再 是 utc 0000
dstdt  总是返回 none
fromutcdt  返回 dt  offset
 dt  参数 必须为一个 感知型 datetime  实例 其 中 tzinfo  值 设 为 self
 类属性 timezone
utc  utc  时区 timezonetimedelta 0
strftime  和 strptime  的 行为
date  datetime  和 time  对象 都支持 strftimeformat  方法可用 来创建 由 一个 显式 格式字符串 所 控制 的 表示 时间 的 字符串
 相反 地 datetime
strptime  类 会 根据 表示 日期和时间 的 字符串 和 相应的 格式字符串 来 创建一个 datetime  对象
 下 表 提供了 strftime  与 strptime  的高层级 比较 strftime  strptime  用 法 根据 给定的 格式 将 对象 转换为字符串 将 字符串 解析 为给定 相应 格式 的 datetime  对象 方法 类型 实例方法 类 方法 方法 date  datetime  time  datetime  签名 strftimeformat  strptimedatestring  format 
strftime  和 strptime  format  codes
 以 下 列表 显示了1989 版 c  标准 所 要求 的全部 格式 代码 它们在 带有 标准 c  实现 的 所有平台 上 均可 用
 指令 意义 示例 注释 a  当 地 工作 日 的 缩 写
 sun  mon 
 sat 1 enus  so  mo 
 sa  dede  a  本地 化 的 星期 中 每 日 的完整 名称
 samstag  dede  w  以十进制数 显示 的 工作 日 其 中0 表01
6 示 星期 日6 表示 星期 六
 d  补零 后 以十进制数 显示 的 月 份 中 的0102
319 一 天
 b  当 地 月 份 的 缩 写
 jan  feb 
 dec 1 enus  jan  feb 
 dez  dede  b  本地 化 的 月 份 全 名
 january  february 
 dezember  dede  m  补零 后 以十进制数 显示 的 月 份
0102
129 y  补零 后 以十进制数 表示 的 不带 世0001
999 纪 的 年份
 y  十进制 数表示的 带 世 纪 的 年份
00010002
201322014
99989999 h  以 补零 后 的 十进制 数表示的 小 时240001
239 小 时 制
 i  以 补零 后 的 十进制 数表示的 小 时120102
129 小 时 制
 p  本地 化 的 am  或 pm 
 am  pm  enus  am  pm 1 dede 3 m  补零 后 以十进制数 显示 的 分 钟
0001
599 s  补零 后 以十进制数 显示 的 秒
0001
5949 f  以十进制数 表示 的 微 秒 在 左侧 补零000000000001
5
999999 z  utc  偏移量 格式 为 空000004006± hhmmss
ffffff  如果是 简1030063415 单 型对象 则 为 空字符串
030712
345216 z  时区 名称 如果对象 为 简单型 则 为空 空 utc  gmt 6 字符串
 j  以 补零 后 的 十进制 数表示的 一 年 中 的001002
3669 日 序号
 u  以 补零 后 的 十进制 数表示的 一 年 中 的0001
537 周 序号 星期 日 作为 每 周 的第一 天9
 在 新 的 一 年 中 第一个 星期 日 之前 的 所有 日 子 都 被视为 是 在 第0 周
 w  以十进制数 表示 的 一 年 中 的 周 序号0001
537 星期 一 作为 每 周 的第一 天
 在 新9 的 一 年 中 第一个 第 期 一 之前的 所有 日 子 都 被视为 是 在 第0 周
 c  本地 化 的 适当 日期和时间 表示
 tue  aug 1621300019881 enus  di 16 aug 2130001988 dede  x  本地 化 的 适当 日期 表示
081688 none 108161988 enus 16
1988 dede  x  本地 化 的 适当 时间 表示
213000 enus 1213000 dede  字面 的 字符
 为 了 方便 起 见 还 包括 了 c 89 标准 不需要 的其他 一些 指令
 这些参数 都 对应于 iso 8601 日期 值
 指令 意义 示例 注释 g  带有 世 纪 的 iso 8601 年份 表示 包00010002
20138 含 大部分 iso  星期 v  的 年份2014
99989999
 u  以十进制数 显示 的 iso 8601 星期 中12
7 的 日 序号 其 中1 表示 星期 一
 v  以十进制数 显示 的 iso 8601 星期0102
538 以 星期 一 作为 每 周 的第一 天
 第019 周 为 包含1 月4 日 的 星期
 这些 代码 可能不 是 在 所有平台 上 都 可 与 strftime  方法 配合 使用
 iso 8601 年份 和 iso 8601 星期 指令 并 不 能 与 上面的 年份 和 星期 序号 指令 相互 替代
 调用 strptime  时 传入 不完整 或 有 歧义 的 iso 8601 指令 将引发 valueerror
 对 完整 格式 代码 集 的 支持 在不同 平台上 有 所 差异 因为 python  要 调用 所 在 平台 的 c  库 的 strftime  函数 而 不同 平台 的差异 是 很 常见的
 要 查看 你所 用 平台 所支持的 完整 格式 代码 集 请参阅 strftime 3 文档
3
6 新版功能 增加了 g  u  和 v
 技术 细节
ast  抽象 语法 树
 源代码 libast
pyast  模块 帮助 python  程序 处理 python  语法 的 抽象 语法 树
 抽象 语法 或 许 会 随着 python  的 更新 发布 而 改变 该模块 能够 帮助 理解 当前 语法 在 编程 层 面 的 样 貌
 抽象 语法 树 可通过 将 ast
pycfonlyast  作为 旗标 传递给 compile  内置函数 来生成 或 是 使用 此模块中 提供的 parse  辅助函数
 返回结果 将是一个 对象 树 其中的 类 都 继承自 ast
 抽象 语法 树 可 被 内置的 compile  函数 编译 为 一个 python  代码对象
 抽象 文 法
 抽象 文 法 目前 定义 如 下 asdls 4 builtin  types  are  identifier  int  string  constant  module  python  mod  modulestmt  body  typeignore  typeignores  interactivestmt  body  expressionexpr  body  functiontypeexpr  argtypes  expr  returns  stmt  functiondefidentifier  name  arguments  args  stmt  body  expr  decoratorlist  expr  returns  string  typecomment  asyncfunctiondefidentifier  name  arguments  args  stmt  body  expr  decoratorlist  expr  returns  string  typecomment  classdefidentifier  name  expr  bases  keyword  keywords  stmt  body  expr  decoratorlist  returnexpr  value  deleteexpr  targets  assignexpr  targets  expr  value  string  typecomment  augassignexpr  target  operator  op  expr  value  simple  indicates  that  we  annotate  simple  name  without  parens  annassignexpr  target  expr  annotation  expr  value  int  simple  use  orelse  because  else  is  a  keyword  in  target  languages  forexpr  target  expr  iter  stmt  body  stmt  orelse  string  typecomment  asyncforexpr  target  expr  iter  stmt  body  stmt  orelse  string  typecomment  whileexpr  test  stmt  body  stmt  orelse  ifexpr  test  stmt  body  stmt  orelse  withwithitem  items  stmt  body  string  typecomment  asyncwithwithitem  items  stmt  body  string  typecomment  raiseexpr  exc  expr  cause  trystmt  body  excepthandler  handlers  stmt  orelse  stmt  finalbody  assertexpr  test  expr  msg  importalias  names  importfromidentifier  module  alias  names  int  level  globalidentifier  names  nonlocalidentifier  names  exprexpr  value  pass  break  continue  coloffset  is  the  byte  offset  in  the  utf 8 string  the  parser  uses  attributes  int  lineno  int  coloffset  int  endlineno  int  endcoloffset  boolop  can  use  left  right  expr  boolopboolop  op  expr  values  namedexprexpr  target  expr  value  binopexpr  left  operator  op  expr  right  unaryopunaryop  op  expr  operand  lambdaarguments  args  expr  body  ifexpexpr  test  expr  body  expr  orelse  dictexpr  keys  expr  values  setexpr  elts  listcompexpr  elt  comprehension  generators  setcompexpr  elt  comprehension  generators  dictcompexpr  key  expr  value  comprehension  generators  generatorexpexpr  elt  comprehension  generators  the  grammar  constrains  where  yield  expressions  can  occur  awaitexpr  value  yieldexpr  value  yieldfromexpr  value  need  sequences  for  compare  to  distinguish  between  x 43 and  x 43 compareexpr  left  cmpop  ops  expr  comparators  callexpr  func  expr  args  keyword  keywords  formattedvalueexpr  value  int  conversion  expr  formatspec  joinedstrexpr  values  constantconstant  value  string  kind  the  following  expression  can  appear  in  assignment  context  attributeexpr  value  identifier  attr  exprcontext  ctx  subscriptexpr  value  expr  slice  exprcontext  ctx  starredexpr  value  exprcontext  ctx  nameidentifier  id  exprcontext  ctx  listexpr  elts  exprcontext  ctx  tupleexpr  elts  exprcontext  ctx  can  appear  only  in  subscript  sliceexpr  lower  expr  upper  expr  step  coloffset  is  the  byte  offset  in  the  utf 8 string  the  parser  uses  attributes  int  lineno  int  coloffset  int  endlineno  int  endcoloffset  exprcontext  load  store  del  boolop  and  or  operator  add  sub  mult  matmult  div  mod  pow  lshift  rshift  bitor  bitxor  bitand  floordiv  unaryop  invert  not  uadd  usub  cmpop  eq  noteq  lt  lte  gt  gte  is  isnot  in  notin  comprehension  expr  target  expr  iter  expr  ifs  int  isasync  excepthandler  excepthandlerexpr  type  identifier  name  stmt  body  attributes  int  lineno  int  coloffset  int  endlineno  int  endcoloffset  arguments  arg  posonlyargs  arg  args  arg  vararg  arg  kwonlyargs  expr  kwdefaults  arg  kwarg  expr  defaults  arg  identifier  arg  expr  annotation  string  typecomment  attributes  int  lineno  int  coloffset  int  endlineno  int  endcoloffset  keyword  arguments  supplied  to  call  null  identifier  for  kwargs  keyword  identifier  arg  expr  value  attributes  int  lineno  int  coloffset  int  endlineno  int  endcoloffset  import  name  with  optional  as  alias
 节点 类
 字面值
variables
 表达式
statements
control  flow
 注解 optional  clauses  such  as  else  are  stored  as  an  empty  list  if  theyre  not  present
function  and  class  definitions
async  and  await
ast  中 的 辅助函数
compiler  flags
3
8 新版功能
3
8 新版功能
commandline  usage
3
9 新版功能
 参见 green  tree  snakes  an  external  documentation  resource  has  good  details  on  working  with  python  asts
 数据 压缩 和 存档
 本章中描述的模块 支持 zlib 、 gzip 、 bzip 2 和 lzma  数据 压缩 算法 以及 创建 zip  和 tar  格式 的归档 文件
 参见 由 shutil  模块提供 的 归档 操作
 zlib  与 gzip  兼容的 压缩 gzip  对 gzip  格式 的 支持 用法示例 命令行界面 命令行选项 bz 2 对 bzip 2 压缩 算法的 支持 文件 压缩和解压 增量 压缩和解压 一次性 压缩 或 解压缩 用法示例 lzma  用 lzma  算法 压缩 读写 压缩文件 在内存中 压缩和解 压缩数据 杂项 指定 自定义 的 过滤器链 示例 zipfile  使用 zip  存档 zipfile  对象 path  对象 pyzipfile  对象 zipinfo  对象 命令行界面 命令行选项 解压缩 的 障 碍 由 于 文件 本身 文件系统 限制 资源 限制 中断 提取 的 默认行为 tarfile  读写 tar  归档 文件 tarfile  对象 tarinfo  对象 命令行界面 命令行选项 示例 受支持的 tar  格式 unicode  问题
httpcookies  http  状态 管理
 源代码 libhttpcookies
 在3
3 版更改 allowed  as  a  valid  cookie  name  character
 注解 on  encountering  an  invalid  cookie  cookieerror  is  raised  so  if  your  cookie  data  comes  from  a  browser  you  should  always  prepare  for  invalid  data  and  catch  cookieerror  on  parsing
 参见 module  http
cookie  对象
morsel  对象
 在3
5 版更改 eq  now  takes  key  and  value  into  account
 在3
7 版更改 attributes  key  value  and  codedvalue  are  readonly
 在3
8 版更改 added  support  for  the  samesite  attribute
value  cookie  的 值
 在3
5 版更改 an  error  is  raised  for  invalid  keys
 在3
5 版更改 return  a  morsel  object  instead  of  a  dict
 示例
xmlsaxxmlreader  interface  for  xml  parsers
xmlreader  对象
 在3
5 版更改 added  support  of  character  streams
 在3
8 版更改 added  support  of  pathlike  objects
incrementalparser  对象
locator  对象
inputsource  对象
the  attributes  interface
the  attributesns  interface
getopt  c  风格的 命令行选项 解析器
 内置函数
array  高效 的 数值 数组
 此 模块定义了一 种 对象类型 可以 紧凑 地 表示 基本 类型 值 的 数组 字符、 整数、 浮点数 等
 数组 属于 序列类型 其 行为与 列表 非常 相似 不同之处在于 其 中 存储 的 对象类型 是 受限 的
 类型 在 对象 创建时 使用 单个字符 的 类型 码 来指定
 已 定义 的 类型 码 如 下 类型 码 c  类型 python  类型 以字节 表示 的最小 尺寸 注释 b  signed  char  int 1 b  unsigned  char  int 1 u  wchart  unicode  字符21 h  signed  short  int 2 h  unsigned  short  int 2 i  signed  int  int 2 i  unsigned  int  int 2 l  signed  long  int 4 l  unsigned  long  int 4 q  signed  long  long  int 8 q  unsigned  long  long  int 8 f  float  float 4 d  double  float 8 注释1
 由 于 平台 的不同 它 可能为16 位 或32 位
 在3
9 版更改 arrayu  现 在 使用 wchart  作为 c  类型 而不再 是 已弃用的 pyunicode
 这 个 改变 不 会影响 其 行为 因为 pyunicode  自 python 3
3 起 就是 wchart  的别名
 值 的 实际 表示 会 由 机器 的 架构 决定 严格 地说 是 由 c  实现 决定
 实际 大小 可通过 itemsize  属性 来获取
 这个模块 定义了以下 类型 class  array
arraytypecode  initializer  一个包含 由 typecode  限制 类型 的 条目 的 新 数组 并 由 可选的 initializer  值 进行 初始化 该值 必须为一个 列表、 byteslike  object  或 包含 正确 类型 元素 的可迭代对象
 如果给定 一个列表 或 字符串 该 initializer  会 被传给 新 数组 的 fromlist  frombytes  或 fromunicode  方法 见 下文 以 将 初 始 条目 添加到 数组中
 否则 会 将 可迭代对象 作为 initializer  传给 extend  方法
 引发一个 审计事件 array
new  附带参数 typecode  initializer
typecodes  包含所 有可用 类型 码 的 字符串
 数组对象 支持 普通的 序列 操作 如 索引、 切片、 拼接 和 重复 等
 当使用 切片 赋值 时 所 赋 的 值 必须为 具有相同 类型 码 的 数组对象 所有其他 情况 都 将引发 typeerror
 数组对象 也 实现了 缓冲区接口 可以用 于所有 支持 字节 类对象 的 场合
 以 下 数据 项 和 方法也 受到 支持 array
typecode  用于创建 数组 的 类型 码 字符
itemsize  在内部 表示 中 一个 数组 项 的 字节 长度
appendx  添加一个 值 为 x  的 新 项 到 数组 末尾
bufferinfo  返回 一个元组 address  length  以 给出 用 于 存放 数组 内容的 缓冲区 元素 的当前 内存地址 和 长度
 以字节 表示 的内存 缓冲区大小 可通过 array
itemsize  来 计算
 这 在 使用 需要 内存 地址的 低层级 因此 不 够 安全 io  接口 时 会 很有用 例如 某些 ioctl  操作
 只要 数组 存 在 并且没有 应用 改变 长度 的 操作 返回 数值 就 是有效的
 注解 当 在 c  或 c  编写 的 代码中使用 数组对象 时 这是 有效 使用 此 类 信息 的 唯一 方式 使用 数组对象 所支持的 缓冲区接口 更 为 适 宜
 此方法 仅 保留 用 作 向下兼容 应 避免 在 新 代码中使用
 缓冲区接口 的 文档 参见 缓冲协 议
byteswap  字节 对 调 所有 数组 项
 此方法 只 支持 大小 为124 或8 字节 的 值 对 于其他 值 类型 将引发 runtimeerror
 它 适用于 从 不同 字节序 机器 所生成 的 文件 中 读取数据 的 情况
countx  返回 x  在 数组中 的 出现 次 数
extenditerable  将 来自 iterable  的 项 添加到 数组 末尾
 如果 iterable  是 另一个 数组 它必须 具有 完全 相同 的 类型 码 否 则将引发 typeerror
 如果 iterable  不是一个 数组 则 它必须 为 可迭代对象 并且 其 元素 必须为 可 添加 到 数组 的 适当 类型
frombytess  添加 来自 字符串 的 项 将 字符串 解读为 机器 值 的 数组 相当于 使用 fromfile  方法 从 文件 中 读取数据
3
2 新版功能 fromstring  重 命名为 frombytes  以 使 其 含义 更清 晰
fromfilef  n  从 file  object  f  中读取 n  项 解读为 机器 值 并 将它们 添加到 数 组 末尾
 如果可 读取数据 少 于 n  项 则将引发 eoferror  但 有效的 项 仍 然 会 被 插入 数组
 f  必须为一个 真 实 的内置 文件对象 不支持 带有 read  方法 的 其 它 对象
fromlistlist  添加 来自 list  的 项
 这等价于 for  x  in  list  a
appendx  区别在 于 如果 发生 类型 错误 数组 将不会 被改变
fromunicodes  使用 来自 给定 unicode  字符串 的 数组 扩展 数组
 数组 必须是 类型 为 u  的 数组 否 则将引发 valueerror
 请使用 array
encodeenc  来 将 unicode  数据 添加 到 其他类型的 数组
indexx  返回 最小的 i  使得 i  为 x  在 数组中 首次 出现的 序号
inserti  x  将 值 x  作为 新 项 插入 数组 的 i  位置 之前
 负值 将 被视为 相对于 数组 末 尾 的 位置
popi  从 数组 中移除 序号 为 i  的 项 并将其 返回
 可选参数 值 默认为1 因此 默认 将 移除 并返回 末尾 项
removex  从 数组 中移除 首次 出现的 x
reverse  反 转 数组中 各 项 的顺序
tobytes  将 数组 转换为 一个 机器 值 数组 并返回其 字节 表示 即 相当 与 通过 tofile  方法 写入到 文件 的 字节 序列
3
2 新版功能 tostring  被 重 命名为 tobytes  以 使 其 含义 更 清晰
tofilef  将所有 项 作为 机器 值 写入到 file  object  f
tolist  将 数组 转换为 包含 相同 项 的 普通 列表
tounicode  将 数组 转换为 一个 unicode  字符串
 数组 必须是 类型 为 u  的 数组 否 则将引发 valueerror
 请使用 array
decodeenc  来 从 其 他类型的 数组 生成 unicode  字符串
 当 一个 数组对象 被 打印 或 转换为字符串 时它会 表示为 arraytypecodeinitializer
 如果 数组 为空 则 initializer  会 被省略 否则 如果 typecode  为 u  则 它 是一个字符串 否则 它是一个 数字 列表
 使用 eval  保证 能 将 字符串转换 回 具有相同 类型 和 值 的 数组 只要 array  类 已 通过 from  array  import  array  被 引入
 例如 arrayl  arrayu  hello  u 2641 arrayl 12345 arrayd 1
14 参见 模块 struct  打包 和 解包 异 构 二进制数据
 模块 xdrlib  打包 和 解包 用 于 某些 远程 过程 调用 系统 的 external  data  representation  xdr  数据
 numerical  python  文档 numeric  python  扩展 numpy  定义了 另一种 数组 类型 请访问 httpwww
org  了解有关 numerical  python  的更多信息
xmlrpcserver  basic  xmlrpc  servers
 警告 the  xmlrpc
 if  you  need  to  parse  untrusted  or  unauthenticated  data  see  xml  漏洞
 在3
3 版更改 the  usebuiltintypes  flag  was  added
 在3
3 版更改 the  usebuiltintypes  flag  was  added
simplexmlrpcserver  objects
 在3
7 版更改 registerfunction  can  be  used  as  a  decorator
 警告 enabling  the  allowdottednames  option  allows  intruders  to  access  your  modules  global  variables  and  may  allow  intruders  to  execute  arbitrary  code  on  your  machine
simplexmlrpcserver  example
 警告 enabling  the  allowdottednames  option  allows  intruders  to  access  your  modules  global  variables  and  may  allow  intruders  to  execute  arbitrary  code  on  your  machine
cgixmlrpcrequesthandler
 在3
7 版更改 registerfunction  can  be  used  as  a  decorator
 示例 class  myfuncs  def  mulself  x  y  return  x  y  handler  cgixmlrpcrequesthandler  handler
documenting  xmlrpc  server
 在3
3 版更改 the  usebuiltintypes  flag  was  added
docxmlrpcserver  objects
doccgixmlrpcrequesthandler
using  importlibmetadata
 注解 this  functionality  is  provisional  and  may  deviate  from  the  usual  version  semantics  of  the  standard  library
 概述
 可 用 api
entry  points
distribution  metadata
distribution  versions
distribution  files
distribution  requirements
distributions
extending  the  search  algorithm
 备 注1 technically  the  returned  distribution  metadata  object  is  an  email
 审计事件 表
 下 表 包含了 在 整个 cpython  运行时 和 标准库中 由 sys
audit  或 pysysaudit  调用 引发 的 所有 事件
 这些 调用 是 在3
0 或更高 版本 中添加 的
 请参阅 sys
addaudithook  和 pysysaddaudithook  了解有关 处理 这些 事件 的详细信息
cpython  implementation  detail  此 表 是 根据 cpython  文档 生成 的 可能无法 表示 其他 实现 所引发的 事件
 请参阅 你 的 运行时 专属的 文档 了解 实际 引发 的 事件
setvalue  key  subkey  type  value 12 下列 事件 只 在内部 被引发 而不会 回 应 任何 cpython  公共 api  审计事件 实 参 winapi
marshal  内部 python  对象 序列化
 国际化
 本章中 介绍 的 模块 通过 提供 选择 要 在 程序 信息 中使用的 语言 的机制 或 通过 定制 输出 以 匹配 本地 约定 来 帮助 你 编写 不 依赖于 语言 和 区域设置 的 软件
 本章中描述的模块 列表 是 gettext  多 语 种 国际化 服务 gnu  gettext  api  基于 类 的 api  the  nulltranslations  class  the  gnutranslations  class  solaris  message  catalog  support  the  catalog  constructor  internationalizing  your  programs  and  modules  localizing  your  module  localizing  your  application  changing  languages  on  the  fly  deferred  translations  致谢 locale  国际化 服务 background  details  hints  tips  and  caveats  for  extension  writers  and  programs  that  embed  python  access  to  message  catalogs
tkinter  对话框
tkintersimpledialog  标准 tkinter  输入 对话框
 源码 libtkintersimpledialog
askstringtitle  prompt  kw  以 上 三个 函数 提供给 用户 输入 期望 值 的 类型 的 对话框
dialogparent  titlenone  自定义 对话框的 基类
 buttonbox  加入 ok  和 cancel  按钮 的 默认行为
 重写 自定义 按钮 布局
tkinterfiledialog  文件 选择 对话框
 源码 libtkinterfiledialog
 原生 加载 保存 对话框
tkintercommondialog  对话 窗口 模板
 源码 libtkintercommondialog
dialogmasternone  options  showcolornone  options  渲 染 对话 窗口
 参见 modules  tkinter
messagebox  读写 文件
copy  浅 层 shallow  和 深 层 deep  复制 操作
mimetypes  map  filenames  to  mime  types
 在3
8 版更改 added  support  for  url  being  a  pathlike  object
 在3
2 版更改 previously  windows  registry  settings  were  ignored
mimetypes  objects
 可用性 windows
3
2 新版功能
io  处理 流 的 核心 工具
 源代码 libio
 概述
io  模块提供了 python  用于处理 各种 io  类型 的 主要 工具
 三种 主要 的 io  类型 分别 为 文本 io  二进制 io  和 原始 io
 这些 是 泛型类型 有 很 多种 后 端 存储 可以用 在 他们 上面
 一个 隶 属于 任何 这些类型 的 具体 对象 被称 作 file  object
 其他 同 类 的 术 语 还有 流 和 类 文件对象
 独立 于 其 类别 每个 具体 流 对象 也 将 具有 各种 功能 它可以 是 只读 只 写 或 读写
 它 还可以 允许 任意 随机 访问 向 前 或 向后 寻找 任何 位置 或 仅 允许 顺序 访问 例如 在 套接字 或 管道 的情况下
 所有 流 对 提供给 它们的 数据类型 都 很 敏感
 例如 将 str  对象 给 二进制流 的 write  方法 会引发 typeerror
 将 bytes  对象 提供给 文本 流 的 write  方法 也是 如 此
 在3
3 版更改 由 于 ioerror  现在是 oserror  的别名 因此 用 于 引发 ioerror  的 操作 现在会 引发 oserror 
 文本 io
 文本 io  预期 并 生成 str  对象
 这意味着 无论 何 时 后 台 存储 是 由 字节 组成的 例如 在 文件 的情况下 数据 的 编码和解码 都 是 透明 的 并且 可以选择 转换 特定于 平台 的 换行符
 创建 文本 流 的 最简单 方法 是 使用 open  可以选择 指定 编码 f  openmyfile
txt  r  encodingutf 8 内存 中 文本 流 也 可以作为 stringio  对象 使用 f  io
stringiosome  initial  text  datatextiobase  的 文档中 详细 描述了 文本 流 的 api
 二进制 io
 原始 io
 高阶 模块 接口
 内存 中 的 流
 也可以使用 str  或 byteslike  object  作为 文件进行 读取 和写入
 对 于 字符串 stringio  可以 像 在 文本模式 下 打开的文件 一样 使用
 bytesio  可以 像 以 二进制模式 打开的文件 一样 使用
 两者 都 提供 完整的 随机 读写 功能
 参见 sys  包含 标准 io  流 sys
stdout  和 sys
stderr 
 类 的 层次结构
io  流 被 安排 为 按 类 的 层次结构 实现
 首先 是 抽象基类 abc  用 于 指定 流 的各种 类别 然后 是 提供 标准 流 实现 的 具体 类
 注解 抽象基类 还提供 某些 方法 的 默认 实现 以 帮助 实现 具体 的 流 类
 例如 bufferediobase  提供了 readinto  和 readline  的 未 优化 实现
io  层次结构 的 顶 部 是 抽象基类 iobase 
 它 定义了 流 的基本 接口
 但是 请注意 对 流 的 读取 和写入 之间 没有 分 离
 如果 实现 不支持 指定 的 操作 则会引发 unsupportedoperation 
 抽象基类 rawiobase  是 iobase  的子类
 它 负责 将 字节 读取 和写入 流 中
rawiobase  的子类 fileio  提供 计算机 文件系统 中 文件 的 接口
 抽象基类 bufferediobase  继承 了 iobase  处理 原始 二进制流 rawiobase  上 的 缓冲
 其子类 bufferedwriter 、 bufferedreader  和 bufferedrwpair  分别 缓冲 可读、 可 写 以及可 读写 的 原始 二进制流
bufferedrandom  提供了 带 缓冲 的 可 随机 访问 流 接口
 bufferediobase  的 另一个 子类 bytesio  是 内存 中 字节 流
 抽象基类 textiobase  继承 了 iobase 
 它 处理 可表示 文本 的 流 并 处理 字符串 的 编码和解码
 类 textiowrapper  继承 了 textiobase  是 原始 缓冲 流 bufferediobase  的 缓冲 文本 接口
 最后 stringio  是 文本 的内存 流
 参数 名 不 是 规范 的一部分 只有 open  的 参数 才 用 作 关键字参数
 下 表 总结 了 抽象基类 提供的 io  模块 抽象基类 继承 抽象 方法 mixin  方法和属性 iobase  fileno  seek  和 close  closed  enter  exit  truncate  flush  isatty  iter  next  readable  readline  readlines  seekable  tell  writable  和 writelines  rawiobase  iobase  readinto  和 write  继承 iobase  方法 read  和 readall  bufferediobase  iobase  detach  read  继承 iobase  方法 readinto  和 readinto 1 read 1 和 write  textiobase  iobase  detach  read  继承 iobase  方法 encoding  errors  和 readline  和 write  newlines 
io  基类
 原始 文件 io
fileioname  moder  closefdtrue  openernone  代表 一个包含 字节数据 的 os  层级 文件 的 原始 二进制流
 它 继承自 rawiobase
 name  可以是 以 下 两 项 之一 代表 将 被 打开的文件 路径 的 字符串或 bytes  对象
 在此情况下 closefd  必须为 true  默认值 否则将 会引发异常
 代表一个 现有 os  层级 文件描述符的 号 码 的 整数 作为 结果的 fileio  对象 将 可 访问 该文件
 当 fileio  对象 被关闭 时 此 fd  也 将 被关闭 除非 closefd  设 为 false
 mode  可以为 r  w  x  或 a  分别 表示 读取 默认 模式、 写入、 独 占 新 建 或 添加
 如果 以 写入 或 添加 模式 打开的文件 不存在 将自动 新 建 当 以 写入 模式打开 时 文件 将 先 清空
 以 新 建 模式打开 时 如果文件 已 存 在 则将引发 fileexistserror
 以 新 建 模式打开 文件 也 意味着 要 写入 因 此 该 模式 的 行为与 w  类似
 在 模式 中 附带 将 允许 同时 读取 和 写 入
 该类的 read  当 附带 正 值 参数调用 时 readinto  和 write  方法 将 只 执行 一次 系统调用
 可以通过 传入 一个可调用对象 作为 opener  来 使用自定义 文件 打开 器
 然 后 通过调用 opener  并 传入 name  flags  来获取 文件对象 所对应的 下层 文件描述符
 opener  必须返回 一个 打开 文件描述符 传入 os
open  作为 opener  的结果 在 功能 上 将 与 传入 none  类似
 新 创建 的 文件 是 不 可继承 的
 有关 opener  参数 的 示例 请参见 内置函数 open 
 在3
3 版更改 增加了 opener  参数
 增加了 x  模式
 在3
4 版更改 文件 现 在 禁止 继承
 fileio  在 继承自 rawiobase  和 iobase  的 现有 成员 以外 还提供了 以 下 数据 属性 和 方法 mode  构造函数 中 给定的 模式
 name  文件名
 当 构造函数 中没有 给定 名称 时 这是 文件 的文件描述符
 缓冲 流
 相比 原始 io  缓冲 io  流 提供了 针对 io  设备 的 更 高层级 接口
bytesioinitialbytes  一个 使用 内 在 字节 缓冲区 的 二进制流
 它 继承自 bufferediobase
 在 close  方法 被调用时 将 会 丢弃 缓冲区
 可选参数 initialbytes  是一个包含 初始 数据 的 byteslike  object
 bytesio  在 继承自 bufferediobase  和 iobase  的成员 以外 还提供 或 重载 了 下列方法 getbuffer  返回 一个 对应于 缓冲区 内容的 可 读写 视图 而不必 拷贝 其 数据
 此外 改 变 视图 将 透明 地 更新 缓冲区 内容 b  io
getvalue  bab 56 ef  注解 只要 视图 保持 存 在 bytesio  对象 就 无法被 改变 大小 或 关闭
3
2 新版功能
 getvalue  返回包含 整个 缓冲区 内容的 bytes
 read 1 size  在 bytesio  中 这 与 read  相同
 在3
7 版更改 size  参数 现在是 可选的
 readinto 1 b  在 bytesio  中 这 与 readinto  相同
3
5 新版功能
bufferedreaderraw  buffersizedefaultbuffersize  一个 提供对 可读、 不 可查找 的 rawiobase  原始 二进制流 的高层级 访问 的 缓 冲 二进制流
 它 继承自 bufferediobase
 当 从 此 对象 读取数据 时 可能会 从 下层 原始 流 请求 更 大量 的 数据并 存放 到 内部 缓冲区 中
 接下来 可以在 后续 读取 时 直接 返回 缓冲 数据
 根据 给定的 可读 raw  流 和 buffersize  创建 bufferedreader  的 构 造器
 如果省略 buffersize  则会使用 defaultbuffersize
 bufferedreader  在 继承自 bufferediobase  和 iobase  的成员 以 外还 提供 或 重载 了 下列方法 peeksize  从 流 返回 字节数据 而 不 前 移 位置
 完成 此 调用 将 至多 读取 一次 原始 流
 返回 的字节数 量 可能 少 于 或 多 于 请求 的数量
 readsize  读取 并返回 size  个字节 如果 size  未 给定 或 为负值 则 读取 至 eof  或 是 在 非阻塞 模式下 读取 调用 将 会阻塞
 read 1 size  在 原始 流 上 通过 单 次调用 读取 并返回 至多 size  个字节
 如果 至少 缓 冲 了 一个字节 则 只 返回 缓冲 的 字节
 在其他情况下 将 执行 一次 原始 流 读取
 在3
7 版更改 size  参数 现在是 可选的
bufferedwriterraw  buffersizedefaultbuffersize  一个 提供对 可 写、 不 可查找 的 rawiobase  原始 二进制流 的高层级 访问 的 缓 冲 二进制流
 它 继承自 bufferediobase
 当 写入到 此 对象 时 数据 通常会 被 放入 到 内部 缓冲区 中
 缓冲区 将 在 满足 某 些 条件 的情况下 被 写 到 下层的 rawiobase  对象 包括 当 缓冲区 对 于所有 挂起 数据 而言 太 小 时 当 flush  被调用时 当 为 bufferedrandom  对象 请求 seek  时 当 bufferedwriter  对象 被关闭 或 销 毁 时
 该构造器 会 为给定的 可 写 raw  流 创建一个 bufferedwriter
 如果未 给 定 buffersize  则 使用默认 的 defaultbuffersize
 bufferedwriter  在 继承自 bufferediobase  和 iobase  的成员 以 外还 提供 或 重载 了 下列方法 flush  将 缓冲区 中 保存 的 字节数据 强制 放入 原始 流
 如果 原始 流 发生 阻塞 则 应 当 引发 blockingioerror
 writeb  写入 byteslike  object  b  并返回 写入 的字节数
 当 处于 非阻塞 模 式 时如果 缓冲区 需要 被写入 但 原始 流 发生 阻塞 则将引发 blockingioerror
bufferedrandomraw  buffersizedefaultbuffersize  一个 提供对 不 可查找 的 rawiobase  原始 二进制流 的高层级 访问 的 缓冲 二进 制流
 它 继承自 bufferedreader  和 bufferedwriter
 该构造器 会 为 在 第一个参数 中 给定的 可查找 原始 流 创建一个 读取 器 和 定 稿 器
 如果省略 buffersize  则 使用默认 的 defaultbuffersize
 bufferedrandom  能 做 到 bufferedreader  或 bufferedwriter  所 能 做 的 任何 事
 此外还 会 确保 实现 seek  和 tell
bufferedrwpairreader  writer  buffersizedefaultbuffersize  一个 提供对 两个 不 可查找 的 rawiobase  原始 二进制流 的高层级 访问 的 缓冲 二进制流 一个 可读 另一个 可 写
 它 继承自 bufferediobase
 reader  和 writer  分别 是 可读 和 可 写 的 rawiobase  对象
 如果省略 buffersize  则 使用默认 的 defaultbuffersize
 bufferedrwpair  实现了 bufferediobase  的 所有 方法 但 detach  除外 调用 该方法 将引发 unsupportedoperation
 警告 bufferedrwpair  不 会 尝试 同步 访问 其 下层的 原始 流
 你 不 应当 将 传给 它 与 读取 器 和写入 器 相同 的 对象 而 要 改 用 bufferedrandom
 文本 io
 性能
 本节 讨论 所提供的 具体 io  实现 的性能
 二进制 io
 文本 io
 二进制 存储 如 文件 上 的 文本 io  比 同一 存储 上 的 二进制 io  慢 得 多 因为它 需要使用 字符 编解码器 在 unicode  和 二进制数据 之间 进行 转换
 这 在 处理 大量 文本 数据 如 大 型 日志 文件 时 会 变得 非常 明显
 此外 由 于 使用 的 重 构 算法 textiowrapper
tell  和 textiowrapper
seek  都 相当 慢
stringio  是 原生 的内存 unicode  容器 速度 与 bytesio  相似
 多线程
fileio  对象 是线程安全的 只要 它们 封装 的操作系统 调用 比如 unix  下 的 read 2 也 是线程安全的
 二进制 缓冲 对象例如 bufferedreader  bufferedwriterbufferedrandom  和 bufferedrwpair  使用 锁 来 保护 其 内部 结构 因此可以 安全地 一次 从 多个 线程中 调用 它们
textiowrapper  对象 不再 是线程安全的
 可 重入 性
 二进制 缓冲 对象 bufferedreader  bufferedwriter  bufferedrandom  和 bufferedrwpair  的 实例 不 是 可 重入 的
 虽然 在 正 常情况下 不 会发生 可 重入 调用 但 仍 可能会 在 signal  处理程序 执行 io  时 产生
 如果 线程 尝试 重入 已经 访问 的 缓冲 对象 则会引发 runtimeerror 
 注意 这 并 不 禁止 其他线程 进入 缓冲 对象
 上面 的内容 隐式地 扩展 到 文本 文件 中 因为 open  函数 将 把 缓冲 对象 封装 在 textiowrapper  中
 这 包括 标准 流 因而 也 会影响 内置的 print  函数
sqlite 3 sqlite  数据库 dbapi 20 接口 模块
 模块 函数 和 常量
 连接 对象 connection
cursor  对象
 行 对象
 异常
sqlite  与 python  类型
 概述
sqlite  原生 支持 如 下 的 类型 nullintegerrealtextblob
 因此可以 将 以 下 python  类型 发送到 sqlite  而不会 出现 任何 问题 python  类型 sqlite  类型 none  null  int  integer  float  real  str  text  bytes  blob  这是 sqlite  类型 默认 转换为 python  类型 的方式 sqlite  类型 python  类型 null  none  integer  int  real  float  text  取决于 textfactory  默认为 str  blob  bytes  sqlite 3 模块 的 类型 系统 可通过 两 种方式来 扩展 你可以通过 对象 适配 将 额外的 python  类型 保存在 sqlite  数据库中 你也可以 让 sqlite 3 模块 通过 转换器 将 sqlite  类型 转换为 不同的 python  类型
 使用 适配 器 将 额外的 python  类型 保存在 sqlite  数据库中。
 如 上 文 所述 sqlite  只包含 对 有限 类型 集 的 原生 支持
 要 让 sqlite  能 使用 其他 python  类型 你必须 将它们 适配 至 sqlite 3 模块 所支持的 sqlite  类型 中 的一种 nonetype  int  float  str  bytes
 有两种 方式 能 让 sqlite 3 模块 将 某个 定制 的 python  类型 适配 为 受支持的 类型
 让 对象 自 行 适配 如果 类 是 你自己 编写 的 这 将是一个 很好 的方式
 假设 你 有这样 一个 类 class  point  def  initself  x  y  self
y  x  y  现 在 你 可 将 这种 点 对象 保存在 一个 sqlite  列 中
 首先 你必须 选择 一种 受支持的 类型 用来 表示 点 对象
 让我们 就 用 str  并 使用 一个 分 号 来 分隔 坐标 值
 然后 你需要 给 你 的 类 加一个 方法 conformself  protocol  它必须 返回 转换 后 的 值
 形参 protocol  将 为 prepareprotocol
close  注册 可调用 的 适配 器 另一种 可能 的做法是 创建一个 将 该 类型 转换为字符串 表示 的 函数 并 使用 registeradapter  注册 该函数
closesqlite 3 模块 有两个 适配 器 可用于 python  的内置 datetime
date  和 datetime
datetime  类型
 现 在 假设 我们 想要 存储 datetime
datetime  对象 但不是 表示为 iso  格式 而 是 表示为 unix  时间戳
 将 sqlite  值 转换为 自定义 python  类型
 编写 适配 器 让 你可以 将 定制 的 python  类型 发送 给 sqlite
 但 要 令 它 真正 有 用 我们 需要 实现 从 python  到 sqlite  再 回 到 python  的 双 向 转换
 输入 转换器
 让我们 回 到 point  类
 我们 以 字符串形式 在 sqlite  中 存储 了 x  和 y  坐标 值
 首先 我们将 定义一个 转换器 函数 它 接受 这样的 字符串 作为 形参 并 根据 该参数 构造一个 point  对象
 注解 转换器 函数 在 调用时 总是 会 附带 一个 bytes  对象 无论 你 将 何 种 数 据类型的 值 发 给 sqlite
splitb  return  pointx  y  现 在 你需要 让 sqlite 3 模块 知道 你 从 数据库中 选 取 的 其 实 是一个 点 对象
 有两种 方式 都可以 做 到 这 件 事 隐式 的 声明 类型 显式 的 通过 列 名 这两种 方式 会 在 模块 函数 和 常量 一节 中 描述 相应 条目 为 parsedecltypes  和 parsecolnames  常量
 下面的 示例 说明 了 这两种 方法
 默认 适配 器 和 转换器
 对 于 datetime  模块中的 date  和 datetime  类型 已 提供了 默认 的 适配 器
 它们将 会 以 iso  日期 iso  时间戳 的形式 发 给 sqlite
 默认 转换器 使用 的 注册 名称 是 针对 datetime
date  的 date  和 针对 datetime
datetime  的 timestamp
 通过 这种方式 你可以 在大多数情况下 使用 python  的 datetimestamp  对象 而无 须 任何 额外 处理
 适配 器 的 格式 还 与 实 验 性 的 sqlite  datetime  函数 兼容
 下面的 示例 演示了 这一点
close  如果 存储在 sqlite  中 的 时间戳 的 小 数 位 多 于6 个数字 则 时间戳 转换器 会 将 该值 截断 至 微 秒 精度
 控制 事 务
 有效 使用 sqlite 3
 使用 快 捷方式
 使用 connection  对象 的 非 标准 execute  executemany  和 executescript  方法可以 更简 洁 地 编写 代码 因为 不必 显式 创建 通常是 多 余 的 cursor  对象
 相反 cursor  对象 是 隐式 创建 的 这些 快捷 方法 返回 游 标 对象
 这样 只需 对 connection  对象 调用一次 就能 直接 执行 select  语句 并 遍历 对象
 通过 名称 而不是 索引 访问 索引
sqlite 3 模块 的 一个 有 用 功能 是 内置的 sqlite 3
row  类 该 类 旨在 用 作 行 工厂
 该类的 行 装饰器 可以用 索引 如 元组 和 不 区分 大小写 的 名称 访问 import  sqlite 3 con  sqlite 3
 使用 连接 作为 上下文管理器
 常见问题
 多线程
 较 老 版本 的 sqlite  在 共享 线程 之间 存 在 连接 问题
 这 就是 python  模块 不允许 线程 之间 共享 连接 和 游 标 的原因
 如果 仍然 尝试 这样做 则 在运行时 会出现 异常
 唯一的 例外 是 调用 interrupt  方法 该方法 仅在 从 其他线程 进行 调用 时才 有意义
 脚注1 sqlite 3 模块 默认 没有 构建 可 加载 扩展 支持 因为 有一些 平台 带有 不支持 这 个 特性 的 sqlite  库 特别是 mac  os  x
 要 获得 可 加载 扩展 的 支持 那 么 在 编译 配置 的时候 必须 指定 enableloadablesqliteextensions  选 项
xdrlib  编码与解码 xdr  数据
 源代码 libxdrlib
pyxdrlib  模块 为 外部 数据 表示 标准 提供 支持 该 标准 的描述 见 rfc 1014 由 sun  microsystems  inc
 在1987 年6 月 撰写
 它 支持 该 rfc  中描述的 大部分 数据类型
xdrlib  模块定义了 两个 类 一个用于 将 变量 打包 为 xdr  表示形式 另一个 用于从 xdr  表示形式 解包
 此外还 有两个 异常类
packer  packer  是用于 将 数据 打包 为 xdr  表示形式 的 类
 packer  类的实例 化 不 附带参数
unpackerdata  unpacker  是用于 相应地 从字符串 缓冲区 解包 xdr  数据 值 的 类
 输入 缓冲 区 将作为 data  给出
 参见 rfc 1014 xdr  外部 数据 表示 标准 这 个 rfc  定义了 最初 编写 此模块 时 xdr  所用的 数据 编码格式
 显然 它 已 被 rfc 1832 所 淘 汰
 rfc 1832 xdr  外部 数据 表示 标准 更新 的 rfc  它 提供了 经 修 订 的 xdr  定义
packer  对象
unpacker  对象
unpacker  类提供 以下方法 unpacker
resetdata  使用 给定的 data  重置 字符串 缓冲区
getposition  返回 数据 缓冲区 中 的当前 解包 位置
setpositionposition  将 数据 缓冲区 的 解包 位置 设 为 position
 你 应当 小 心 使用 getposition  和 setposition
getbuffer  将 当前 解包 数据 缓冲区 以 字符串 的 形式返回
done  表明 解包 完成
 如果 数据 没有 全部 完成 解包 则会引发 error  异常
 此外 每 种 可通过 packer  打包的 数据类型 都 可通过 unpacker  来 解包
 解包 方法 的形式 为 unpacktype  并且不 接受 任何 参数
 该方法 将 返回 解包 后 的 对象
unpackfloat  解包 单 精度 浮点数
unpackdouble  解包 双精度 浮点数 类似于 unpackfloat
 此外 以下方法 可用来 解包 字符串、 字节串 以及 不 透明 数据 unpacker
unpackfstringn  解包 并返回 固定 长度 字符串
 n  为 期望的 字符 数量
 会 预 设 以 空 字节串 填充 以 保证4 字节 对齐
unpackfopaquen  解包 并返回 固定 长度 数据流 类似于 unpackfstring
unpackstring  解包 并返回 可变 长度 字符串
 先 将 字符串 的长度 解包 为 无符号 整数 再 用 unpackfstring  来 解包 字符串 数据
unpackopaque  解包 并返回 可变 长度 不 透明 数据流 类似于 unpackstring
unpackbytes  解包 并返回 可变 长度 字节 流 类似于 unpackstring
 下列方法 支持 解包 数组 和 列表 unpacker
unpacklistunpackitem  解包 并返回 同 质 条目 的 列表
 该 列表 每次 解包 一个元素 先 解包 一个 无符号 整数 旗标
 如果 旗标 为1 则 解包 条目 并将其 添加到 列表
 旗标 为0 表明 列表 结束
 unpackitem  为 在 解包 条目 时 调用 的 函数
unpackfarrayn  unpackitem  解包 并 以 列表 形式返回 由 同 质 条目 构成的 固定 长度 数组
 n  为 期望的 缓冲区 内 列表 元素 数量
 如 上 所述 unpackitem  是 解包 每个元素 时 要 使 用的函数
unpackarrayunpackitem  解包 并返回 由 同 质 条目 构成的 可变 长度 list
 先 将 列表 的长度 解包 为 无 符号 整数 再 像 上面的 unpackfarray  一样 解包 每个元素
 异常
 此模块中 的 异常 会 表示为 类实例 代码 exception  xdrlib
error  基本 异常类
 error  具有 一个 公共 属性 msg  其中包含 对 错误 的描述
conversionerror  从 error  所 派生 的 类
 不包含 额外的 实例变量
 以下是 一个 应该 如何 捕获 这些 异常 的 示例 import  xdrlib  p  xdrlib
 协程 与 任务
 本节 将 简 述 用 于 协程 与 任务 的高层级 api
 协程 可等待对象 运行 asyncio  程序 创建 任务 休 眠 并 发 运行 任务 屏蔽 取消 操作 超时 简单 等待 在 线程中 运行 来自 其他线程 的 日程 安排 内 省 task  对象 基于生成器的协程
 协程
 协程 通过 asyncawait  语法 进行 声明 是 编写 asyncio  应用 的 推荐 方式
 例如以下 代码段 需要 python 3
7 会打印 hello  等待1 秒 再 打印 world  import  asyncio  async  def  main 
runmain  hello  world  注意 简单地 调用 一个协程 并不会 将 其 加入 执行 日程 main  coroutine  object  main  at 0 x 1053 bb 7 c 8 要 真正 运行 一个协程 asyncio  提供了 三种 主要 机制 asyncio
run  函数 用来 运行 最高层级 的 入 口 点 main  函数 参见 上面 的 示例
 等待 一个协程
 以下代码 段 会 在 等待1 秒 后 打印 hello  然后 再次 等 待2 秒 后 打印 world  import  asyncio  import  time  async  def  sayafterdelay  what  await  asyncio
runmain  预期的 输出 started  at 171352 hello  world  finished  at 171355 asyncio
createtask  函数 用来 并 发 运行 作为 asyncio  任务 的多个 协 程
 让我们 修改 以 上 示例 并 发 运行 两个 sayafter  协程 async  def  main  task 1 asyncio
strftimex  注意 预期的 输出 显示 代码段 的 运行 时间 比 之前 快 了1 秒 started  at 171432 hello  world  finished  at 171434
 可等待对象
 如果一个 对象可以 在 await  语句中 使用 那么 它 就是 可等待 对象
 许多 asyncio  api  都 被设计为 接受 可等待对象
 可等待 对象 有 三种 主要 类型 协程 任务 和 future
 协程 python  协程 属于 可等待 对象 因此可以 在其他 协程 中 被 等待 import  asyncio  async  def  nested  return 42 async  def  main  nothing  happens  if  we  just  call  nested
runmain  重要 在 本文档 中 协程 可用来 表示 两个 紧 密 关联的 概念 协程函数 定义 形式 为 async  def  的 函数 协程对象 调用 协程函数 所返回的 对象
asyncio  也支持 旧式 的 基于生成器的 协程
 任务 任务 被用来 设置 日程 以便 并 发 执行 协程
 当 一个协程 通过 asyncio
createtask  等 函数 被 打包 为 一个 任务 该 协程 将自动 排 入 日程 准备 立即 运行 import  asyncio  async  def  nested  return 42 async  def  main  schedule  nested  to  run  soon  concurrently  with  main
runmain  future  对象 future  是一种 特殊 的 低层级 可等待对象 表示一个 异步 操作 的 最终 结果
 当 一个 future  对象 被 等待 这意味着 协程 将 保持 等待直到 该 future  对象 在其他 地方 操作 完毕
 在 asyncio  中 需要 future  对象 以便 允许 通过 asyncawait  使用 基于 回调 的 代码
 通常情况下 没 有必要 在 应用 层级 的代码中 创建 future  对象
future  对象 有 时 会 由 库 和 某些 asyncio  api  暴 露 给 用户 用 作 可等待对象 async  def  main  await  functionthatreturnsafutureobject  this  is  also  valid  await  asyncio
gather  functionthatreturnsafutureobject  somepythoncoroutine  一个 很好 的 返回 对象 的 低层级 函数 的 示例 是 loop
 运行 asyncio  程序
runcoro  debugfalse  执行 coroutine  coro  并 返回结果
 此函数会 运行 传入的 协程 负责 管理 asyncio  事件循环 终结 异步生成器 并 关闭 线程 池
 当 有其他 asyncio  事件循环 在同一 线程中 运行时 此 函数 不 能 被调用
 如果 debug  为 true  事件循环 将 以 调试模式 运行
 此 函数 总是会 创建一个新的 事件循环 并 在 结束 时 关闭 之
 它 应当 被用作 asyncio  程序 的 主 入 口 点 理 想 情况下 应当 只 被 调用一次
 示例 async  def  main  await  asyncio
runmain 3
7 新版功能
 在3
9 版更改 更新为 使用 loop
 注解 asyncio
run  的 源代码 可以在 libasynciorunners
py  中找到
 创建 任务
 休 眠
sleepdelay  resultnone  loopnone  阻塞 delay  指定 的 秒数
 如果指定了 result  则 当 协程 完成 时 将 其 返回给 调用者
 sleep  总是会 挂起 当前 任务 以允许 其他 任务 运行
10 loop  形参
 以 下 协程 示例 运行5 秒 每 秒 显示 一次 当前 日期 import  asyncio  import  datetime  async  def  displaydate  loop  asyncio
 并 发 运行 任务
gatheraws  loopnone  returnexceptionsfalse  并 发 运行 aws  序列中 的 可等待对象
 如果 aws  中 的某个 可等待对象 为 协程 它 将自动 作为一个 任务 加入 日程
 如果所 有 可等待对象 都 成功 完成 结果 将是一个 由 所有 返回值 聚 合 而 成的列 表
 结果值 的顺序 与 aws  中 可等待对象 的顺序 一致
 如果 returnexceptions  为 false  默认 所引发的 首 个 异常 会 立即 传播 给 等待 gather  的 任务
aws  序列中 的其他 可等待对象 不会被 取消 并 将 继续 运行
 如果 returnexceptions  为 true  异常 会 和 成功 的结果 一样 处理 并 聚 合 至 结果 列表
 如果 gather  被取消 所有 被 提交 尚未 完成 的 可等待对象 也会 被取消
 如果 aws  序列 中的任 一 task  或 future  对象 被取消 它 将 被当作 引 发 了 cancellederror  一样 处理 在此情况下 gather  调用 不 会 被取消
 这 是为了 防止 一个 已 提交 的 taskfuture  被取消 导致 其他 tasksfuture  也 被取消
10 loop  形参
 示例 import  asyncio  async  def  factorialname  number  f 1 for  i  in  range 2 number 1 printftask  name  compute  factoriali
 task  c  factorial 424 注解 如果 returnexceptions  为 false  则 在 gather  被 标记为 已 完成后 取消 它 将不会 取消 任何 已 提交 的 可等待对象
 例如 在 将 一个异常 传播 给 调用者 之后 gather  可 被 标记为 已 完成 因此在 从 gather  捕获 一个 由 可等待对象 所 引发的异常 之后 调用 gather
cancel  将不会 取消 任 何其他 可等待对象
 在3
7 版更改 如果 gather  本身 被取消 则 无论 returnexceptions  取值 为 何 消息 都会被 传播
 屏蔽 取消 操作
 超时
waitforaw  timeout  loopnone  等待 aw  可等待对象 完成 指定 timeout  秒数 后 超时
 如果 aw  是 一个协程 它 将自动 作为 任务 加入 日程
 timeout  可以为 none  也可以 为 float  或 int  型 数值 表示 的 等待 秒数
 如果 timeout  为 none  则 等待直到 完成
 如果 发生 超时 任务 将 取消 并 引发 asyncio
 要 避免 任务 取消 可以 加上 shield
 此 函数 将 等待直到 future  确实 被取消 所 以 总 等待 时间 可能 超过 timeout
 如果在 取消 期间发生 了 异常 异常 将 会 被传播
 如果 等待 被取消 则 aw  指定 的 对象 也会 被取消
10 loop  形参
 示例 async  def  eternity  sleep  for  one  hour  await  asyncio
runmain  expected  output  timeout  在3
7 版更改 当 aw  因 超时 被取消 waitfor  会等待 aw  被取消
 之前版本 则 将 立即 引发 asyncio
timeouterror
 简单 等待
 返回 两个 taskfuture  集合 done  pending
 用 法 done  pending  await  asyncio
waitaws  如 指定 timeout  float  或 int  类型 则 它 将 被用于 控制 返回 之前 等待 的 最 长 秒数
 请注意此 函数 不 会引发 asyncio
 当 超时 发生时 未 完成 的 future  或 task  将 在 指定 秒数 后 被 返回
 returnwhen  指定 此 函数 应 在 何 时返回
 它必须 为 以 下 常 数 之一 常 数 描述 firstcompleted  函数 将 在 任意 可等待对象 结束 或 取消 时返回
 firstexception  函数 将 在 任意 可等待对象 因 引发异常 而 结束 时 返回
 当 没有 引发 任何 异常 时 它 就 相当于 allcompleted
 allcompleted  函数 将 在所有 可等待对象 结束 或 取消 时返回
 与 waitfor  不同 wait  在 超时 发生时 不 会 取消 可等待对象
3
8 版后已移除 如果 aws  中 的某个 可等待对象 为 协程 它 将自动 作为 任 务 加入 日程
 直接 向 wait  传入 协程对象 已弃用 因为 这 会导致 令人 迷 惑 的 行为
10 loop  形参
 注解 wait  会自动 将 协程 作为 任务 加入 日程 以 后 将 以 done  pending  集合 形式返回 显式 创建 的 任务 对象
 因此 以下代码 并不会 有 预期的 行为 async  def  foo  return 42 coro  foo  done  pending  await  asyncio
waitcoro  if  coro  in  done  this  branch  will  never  be  run  以 上 代码段 的 修正 方法 如 下 async  def  foo  return 42 task  asyncio
11 直接 向 wait  传入 协程对象 的方式 已弃用
 如果在 所有 future  对象 完成 前 发生 超时 则将引发 asyncio
timeouterror 
10 loop  形参
 示例 for  coro  in  ascompletedaws  earliestresult  await  coro 
 在 线程中 运行
tothreadfunc  args  kwargs  在不同的 线程中 异步 地 运行 函数 func
 向 此 函数 提供的 任何 args  和 kwargs  会 被直接 传给 func
 并且 当 前 contextvars
context  会 被传播 允许 在不同的 线程中 访问 来自 事件循 环 的 上下文变量
 返回 一个 可 被 等待 以获取 func  的 最终 结果的 协程
 这 个 协程函数 主要 是用于 执行 在其他情况下 会阻塞 事件循环 的 io  密集 型 函 数 方法
 例如 def  blockingio  printfstart  blockingio  at  time
runmain  expected  output  started  main  at 195053 start  blockingio  at 195053 blockingio  complete  at 195054 finished  main  at 195054 在任何 协程 中 直接调用 blockingio  将 会 在 调用 期间 阻塞 事件循环 导 致 额外的1 秒 运行 时间
 而 通过 改 用 asyncio
tothread  我们可以 在不同的 线程中 运行 它 从 而不会 阻塞 事件循环
 注解 由 于 gil  的 存 在 asyncio
tothread  通常 只能 被用来 将 io  密集 型 函数 变 为 非阻塞 的
 但 是对于 会 释放 gil  的扩展模块 或 无 此 限制 的 替代 性 python  实现 来说 asyncio
tothread  也 可被用于 cpu  密集 型 函数
3
9 新版功能
 来自 其他线程 的 日程 安排
runcoroutinethreadsafecoro  loop  向 指定 事件循环 提交 一个协程
 线程安全
 返回 一个 concurrent
future  以 等待 来自 其他 os  线程 的结果
 此 函数 应该 从 另一个 os  线程中 调用 而非 事件循环 运行 所 在 线程
 示例 create  a  coroutine  coro  asyncio
resulttimeout 3 如果在 协程 内 产生 了 异常 将 会 通知 返回 的 future  对象
 它 也 可被用来 取 消 事件循环 中 的 任务 try  result  future
cancel  except  exception  as  exc  printfthe  coroutine  raised  an  exception  excr  else  printfthe  coroutine  returned  resultr  查看 并 发 和 多线程 章节 的 文档
 不同 与其他 asyncio  函数 此 函数 要求 显式地 传入 loop  参数
3
1 新版功能
 内 省
currenttaskloopnone  返回当前 运行 的 task  实例 如果没有 正在运行 的 任务 则返回 none
 如果 loop  为 none  则会使用 getrunningloop  获取 当前 事件循 环
3
7 新版功能
alltasksloopnone  返回 事件循环 所 运行 的 未 完成 的 task  对象 的 集合
 如果 loop  为 none  则会使用 getrunningloop  获取 当前 事件循 环
3
7 新版功能
task  对象
taskcoro  loopnone  namenone  一个 与 future  类似 的对象可 运行 python  协程
 非 线程安全
 task  对象 被用来 在 事件循环 中 运行 协程
 如果一个 协程 在 等待 一个 future  对象 task  对象 会 挂起 该 协程 的 执行 并 等待 该 future  对象 完成
 当 该 future  对象 完成 被 打包的 协程 将 恢复 执行
 事件循环 使用 协 同 日程 调度 一个 事件循环 每次 运行 一个 task  对象
 而 一 个 task  对象 会等待 一个 future  对象 完成 该 事件循环 会 运行 其他 task 、 回调 或 执行 io  操作
 使用 高层级的 asyncio
createtask  函数 来创建 task  对象 也可 用 低 层级的 loop
createtask  或 ensurefuture  函数
 不 建议 手动 实 例化 task  对象
 要 取消 一个 正在运行 的 task  对象 可 使用 cancel  方法
 调用此方法 将 使 该 task  对象 抛出一个 cancellederror  异常 给 打包的 协程
 如果 取消 期间 一个协程 正在等待 一个 future  对象 该 future  对象 也 将 被取消
 cancelled  可被用来 检测 task  对象是否 被取消
 如果 打包的 协程 没有 抑 制 cancellederror  异常 并且 确实 被取消 该方法 将 返回 true
task  从 future  继承 了 其 除 future
setresult  和 future
setexception  以外的 所有 api
 task  对象 支持 contextvars  模块
 当 一个 task  对象 被创建 它 将 复制 当前上下文 然后 在 复制 的 上下文中 运行 其 协程
 在3
7 版更改 加入 对 contextvars  模块 的 支持
 在3
8 版更改 添加了 name  形参
10 loop  形参
 cancelmsgnone  请求 取消 task  对象
 这 将 安排 在 下 一 轮 事件循环 中 抛出一个 cancellederror  异常 给 被 封 包 的 协程
 协程 在 之后 有 机 会 进行 清理 甚至 使用 try 
 except  cancellederror 
 finally  代码块 抑 制 异常 来 拒 绝 请求
 不同于 future
canceltask
cancel  不保证 task  会 被取消 虽然 抑 制 完全 取消 并 不 常见 也 很 不 鼓 励 这样做
 在3
9 版更改 增加了 msg  形参
 以下示例 演示了 协程 是如何 侦 听 取消 请求的 async  def  cancelme  printcancelme  before  sleep  try  wait  for 1 hour  await  asyncio
runmain  expected  output  cancelme  before  sleep  cancelme  cancel  sleep  cancelme  after  sleep  main  cancelme  is  cancelled  now  cancelled  如果 task  对象 被取消 则返回 true
 当使用 cancel  发出 取消 请求 时 task  会 被 取消 其 封 包 的 协程 将 传播 被 抛 入 的 cancellederror  异常
 done  如果 task  对象 已 完成 则返回 true
 当 task  所 封 包 的 协程 返回 一个 值、 引发一个 异常 或 task  本身 被取消 时 则 会 被认为 已 完成
 result  返回 task  的结果
 如果 task  对象 已 完成 其 封 包 的 协程 的 结果会 被 返回 或者 当 协程 引发异常 时 该 异常会被 重新引发
 如果 task  对象 被取消 此方法会 引发一个 cancellederror  异常
 如果 task  对象 的结果 还 不可用 此方法会 引发一个 invalidstateerror  异常
 exception  返回 task  对象 的 异常
 如果所 封 包 的 协程 引发了 一个异常 该异常 将 被 返回
 如果所 封 包 的 协程 正常 返回 则 该方法 将 返回 none
 如果 task  对象 被取消 此方法会 引发一个 cancellederror  异常
 如果 task  对象 尚未 完成 此方法将 引发一个 invalidstateerror  异常
 adddonecallbackcallback  contextnone  添加一个 回调 将 在 task  对象 完成 时 被 运行
 此方法 应该 仅在 低层级的 基于 回调 的 代码中使用
 要 了解 更多细节 请查看 future
adddonecallback  的 文档
 removedonecallbackcallback  从 回调 列表 中移除 callback  指定 的回调
 此方法 应该 仅在 低层级的 基于 回调 的 代码中使用
 要 了解 更多细节 请查看 future
removedonecallback  的 文档
 getstack  limitnone  返回 此 task  对象 的 栈 框架 列表
 如果所 封 包 的 协程 未 完成 这 将 返回 其 挂起 所在的 栈
 如果 协程 已 成功 完 成 或 被取消 这 将返回一个 空列表
 如果 协程 被 一个异常 终止 这 将 返回 回溯 框架 列表
 框架 总是 从 按 从 旧 到 新 排序
 每个 被 挂起 的 协程 只 返回 一个 栈 框架
 可选的 limit  参数指定 返回 框架 的数量 上限 默认 返回 所有 框架
 返 回 列表 的顺序 要 看 是 返回 一个 栈 还是 一个 回溯 栈 返回 最新的 框架 回溯 返回 最 旧 的 框架
 这 与 traceback  模块 的 行为 保持 一致
 printstack  limitnone  filenone  打印 此 task  对象 的 栈 或 回溯
 此方法 产生 的 输出 类似于 traceback  模块 通过 getstack  所 获取 的 框架
 limit  参数 会直接 传递给 getstack
 file  参数 是 输出 所 写入的 io  流 默认情况下 输出 会 写入 sys
 getcoro  返回 由 task  包装 的 协程对象
3
8 新版功能
 getname  返回 task  的 名称
 如果没有 一个 task  名称 被 显式地 赋值 默认 的 asyncio  task  实现 会 在 实例化 期间 生成一个 默认 名称
3
8 新版功能
 setnamevalue  设置 task  的 名称
 value  参数可以 为 任意 对象 它 随后 会 被 转换为字符串
 在 默认 的 task  实现 中 名称 将 在 任务 对象 的 repr  输出 中 可 见
3
8 新版功能
 基于生成器的协程
 注解 对 基于生成器的协程 的 支持 已弃用 并 计划 在 python 3
10 中移除
 基于生成器的协程 是 asyncawait  语法 的 前 身
 它们是 使用 yield  from  语句 创建 的 python  生成器 可以 等待 future  和其他 协程
 基于生成器的协程 应该使用 asyncio
coroutine  装饰 虽然 这 并非 强制
coroutine  用来 标记 基于生成器的协程 的 装饰器
 此 装饰器 使得 旧式 的 基于生成器的协程 能 与 asyncawait  代码 相 兼容 asyncio
sleep 1 async  def  main  await  oldstylecoroutine  此 装饰器 不应该 被用于 async  def  协程
10 请改 用 async  def
iscoroutineobj  如果 obj  是一个 协程对象 则返回 true
 此方法 不同于 inspect
iscoroutine  因为它 对 基于生成器的协程 返回 true
iscoroutinefunctionfunc  如果 func  是一个 协程函数 则返回 true
 此方法 不同于 inspect
iscoroutinefunction  因为它 对 以 coroutine  装饰 的 基于生成器的协程 函数返回 true
decimal  十进制 定 点 和 浮点 运算
 源码 libdecimal
pydecimal  模块 为 快速 正确 舍入 的 十进制浮点 运算 提供 支持
 与 float  数据类型 相比 它 具 有以下 几个 优点 decimal  基于 一个浮点 模 型 它 是 为 人 们 设计 的 并且 必 然 具有 最 重要的 指 导 原 则—— 计算机 必须 提供 与 人 们 在 学 校 学习 的算法 相同 的算法
—— 摘 自 十进制 算术 规范
 decimal  数字 的 表示 是 完全 精确的
 相比 之 下1
1 和2
2 这样的 数字 在 二进制浮点 中没有 精确的 表示
 最终 用户 通常 不希望1
2 如 二进 制浮点数 表示 那样 被 显示 为3
3000000000000003
 精确 性 延 续 到 算术 中
 在 十进制 浮点数 中0
3 恰好 等于 零
 在 二进制 浮点数 中 结果为5
5511151231257827 e 017
 虽然 接近 于 零 但 差异 妨 碍 了 可靠 的 相等 性检 验 并且 差异 可能会 累积
 因此 在具有 严格 相等 不变量 的 会 计 应用程序中 decimal  是 首选
 十进制 模块包含 有效位 的概念 因此1
20 的 结果是2
50
 保 留 尾随 零 以 表示 有效位
 这是 货 币 的 惯 用 表示 方法
 乘法 则 沿 用 教 科 书 中 保留 被 乘 数 中的所有 数字 的 方法
 例如1
2 结果是1
56 而1
20 结果是1
5600
 与 基于 硬 件 的 二进制浮点 不同 十进制 模块 具有 用户可 更改 的精度 默认为28 位 可以 与 给定 问题 所需的 一样 大 from  decimal  import  getcontext
1428571428571428571428571429 二进制 和 十进制浮点 都 是 根据 已 发布 的 标准 实现 的
 虽然 内置 浮点 类型 只 公 开 其 功能 的 一 小 部分 但 十进制 模块 公开 了 标准 的 所有 必需 部分
 在 需要 时 程序员 可以 完全 控制 舍入 和 信号处理
 这 包括 通过使用 异常 来 阻 止 任何 不 精确 操作 来 强制 执行 精确 算术 的 选项
 十进制 模块 旨在 支持 无 偏 见 精确的 非 连续 十进制 算术 有 时 称为 定 点 算术 和 舍入 浮点 算术
—— 摘 自 十进制 算术 规范
 模块 设计 以 三个 概念 为 中 心 十进制数 算术 上下文 和 信号
 十进制数 是不可变的
 它 有 一个 符号 系 数 数字 和 一个 指 数
 为 了 保持 重要 性 系 数 数字 不 会 截断 尾随 零
 十进制数 也 包括 特殊 值 例如 infinity  infinity  和 nan 
 该 标准 还 区分0 和0
 算术 的 上下文 是 指定 精度、 舍入 规则、 指 数 限制、 指示 操作 结果的 标志 以及 确定 符号 是否 被视为 异常 的 陷阱 启用 器 的 环境
 舍入 选项 包括 roundceiling 、 rounddown 、 roundfloor 、 roundhalfdown  roundhalfeven 、 roundhalfup 、 roundup  以及 round 05 up
 信号 是 在 计算 过程 中出现的 异常 条件 组
 根据 应用程序 的 需要 信号 可能 会被忽略 被视为 信息 或 被视为 异常
 十进制 模块中的 信号 有 clamped 、 invalidoperation 、 divisionbyzero 、 inexact 、 rounded 、 subnormal 、 overflow 、 underflow  以及 floatoperation 
 对 于 每个 信号 都有一个 标志 和 一个 陷阱 启动器
 遇到 信号 时 其 标志 设置为1 然后 如果 陷阱 启用 器 设置为1 则 引发异常
 标志 是 粘 性 的因此 用户 需要 在 监 控 计算 之前 重置 它们
 参见 ibm  的通用 十进制 算术 规范 the  general  decimal  arithmetic  specification
 快速 入门 教程
 通常 使用 小 数 的 开始 是 导入模块 使用 getcontext  查看 当前上下文 并 在必要时 为 精度、 舍入 或 启用 的 陷阱 设置 新 值 from  decimal  import  getcontext  contextprec 28 roundingroundhalfeven  emin 999999 emax 999999 capitals 1 clamp 0 flags  trapsoverflow  divisionbyzero  invalidoperation  getcontext
prec 7 set  a  new  precision  可以从 整数、 字符串、 浮点数 或 元组 构造 十进制 实例
 从 整数或 浮点 构造 将 执行 该 整数或 浮点 值 的 精确 转换
 十进制数 包括 特殊 值 例如 nan  代表 非 数字 正 的 和 负 的 infinity  和0 getcontext
414213562373095048801688724 decimalnan  decimalnan  decimalinfinity  decimalinfinity  如果 floatoperation  信号 被捕获 构造函数 中 的 小 数 和 浮点数 的 意外 混合 或 排序 比较 会引发异常 c  getcontext  c
5 true 3
3 新版功能
 新 decimal  的重要 性 仅 由 输入 的 位 数 决定
 上下文 精度 和 舍入 仅在 算术运算 期间发 挥 作 用
85988 如果 超出 了 c  版本 的 内部 限制 则 构造一个 十进制 将引发 invalidoperation  decimal 1 e 9999999999999999999 traceback  most  recent  call  last  file  stdin  line 1 in  module  decimal
invalidoperation  在3
3 版更改
 小 数 与 python  的 其 余部分 很好 地 交互
 这是一个 小 的 十进制浮点 飞 行 杂 技 团 data  listmapdecimal 1
77 decimal  也可以使用 一些 数学 函数 getcontext
log 10 decimal 1 quantize  方法 将 数字 舍入 为 固定 指 数
 此方法 对 于 将结果 舍入到 固定 的 位置 的 货 币 应用程序 非常有用 decimal 7
 roundingroundupdecimal 8 如 上 所示 getcontext  函数 访问 当前上下文 并 允许 更改 设置
 这种 方法 满足 大多数 应用程序 的需求
 对 于 更高级 的 工作 使用 context  构造函数 创建 备 用 上下文 可能 很有用
 要使用 备 用 活动 请使用 setcontext  函数
 根据 标准 decimal  模块提供了 两个 现 成 的 标准 上下文 basiccontext  和 extendedcontext 
 前 者 对 调试 特别 有 用因为 许多 陷阱 都 已 启用 myothercontext  contextprec 60 roundingroundhalfdown  setcontextmyothercontext  decimal 1 decimal 7 decimal 0
142857143 decimal 42 decimal 0 decimalinfinity  setcontextbasiccontext  decimal 42 decimal 0 traceback  most  recent  call  last  file  pyshell 143 line 1 in  toplevel  decimal 42 decimal 0 divisionbyzero  x 0 上下文 还 具有 用 于 监视 计算 期间 遇到 的 异常 情况 的 信号 标志
 标志 保持 设置 直到 明确 清除 因此 最好 通过使用 clearflags  方法 清除 每 组 受 监 控 计算 之前的 标志
 setcontextextendedcontext  getcontext
14159292 getcontext  contextprec 9 roundingroundhalfeven  emin 999999 emax 999999 capitals 1 clamp 0 flagsinexact  rounded  trapsflags  条目 显示 对 pi  的 有 理 逼 近 被 舍入 超出 上下文 精度的 数字 被 抛 弃 并且 结果是 不 精确的 一些 丢弃 的 数字 不 为零
 使用 上下文 的 traps  字段 中 的字典 设置 单个 陷阱 setcontextextendedcontext  decimal 1 decimal 0 decimalinfinity  getcontext
trapsdivisionbyzero 1 decimal 1 decimal 0 traceback  most  recent  call  last  file  pyshell 112 line 1 in  toplevel  decimal 1 decimal 0 divisionbyzero  x 0 大多数 程序 仅在 程序 开始 时 调整 当前上下文 一次
 并且 在 许多 应用程序中 数据 在 循环 内 单个 强制转换 为 decimal 
 通过 创建 上下文 集 和 小 数 程序 的大部分 操作 数据 与其他 python  数字类型 没有 区别
decimal  对象
decimalvalue 0 contextnone  根据 value  构造 一个新的 decimal  对象
 value  可以是 整数 字符串 元组 float  或 另一个 decimal  对象
 如果没有 给出 value  则返回 decimal 0
 如果 value  是 一 个 字符串 它应该 在 前导 和 尾随 空格 字符 以及 下划线 被 删除 之后 符合 十进制 数字 字符串 语法 sign  digit 0123456789 indicator  e  e  digits  digit  digit
 digits  exponentpart  indicator  sign  digits  infinity  infinity  inf  nan  nan  digits  snan  digits  numericvalue  decimalpart  exponentpart  infinity  numericstring  sign  numericvalue  sign  nan  当 上面 出现 digit  时 也 允许 其他 十进制数 码
 其 中 包括 来自 各种 其他语 言 系统 的 十进制数 码 例如 阿 拉 伯 印 地 语 和 天 城 文 的 数 码 以及 全 宽 数 码 uff 10 到 uff 19
 如果 value  是一个 tuple  它应该 有 三个 组件 一个 符号0 表示 正 数 或1 表示 负数 一个数字 的 tuple  和 整数 指 数
 例如 decimal 014143 返回 decimal 1
 如果 value  是 float  则 二进制浮点 值 无 损 地 转换为 其 精确的 十进制 等效 值
 此 转换 通常 需要53 位 或更多 位 数 的精度
 例如 decimalfloat 1
1 转换为 decimal 1
100000000000000088817841970012523233890533447265625
 context  精度 不 会影响 存储 的 位 数
 这 完全 由 value  中 的 位 数 决定
 例如 decimal 3
00000 记录 所有 五 个 零 即使 上下文 精度 只有 三
 context  参数 的 目 的 是 确定 value  是 格式 错误 的 字符串 时 该 怎 么 做
 如果 上下文 陷阱 invalidoperation  则 引发异常 否则 构造函数 返回 一 个新的 decimal  其 值 为 nan
 构造 完成后 decimal  对象 是不可变的
 在3
2 版更改 现 在 允许 构造 函数的参数 为 float  实例
 在3
3 版更改 float  参数 在 设置 floatoperation  陷阱 时 引发异常
 默认情况下 陷阱 已 关闭
 在3
6 版更改 允许 下划线 进行 分组 就像 代码中 的 整数 和 浮点 文 字 一样
 十进制浮点 对象 与其他 内置 数值 类型 共享 许多 属性 例如 float  和 int 
 所有 常用的 数学 运算 和 特殊方法 都 适用
 同样 十进制 对象可以 复制、 pickle 、 打印、 用 作 字典 键、 用 作 集合 元素、 比较、 排序 和 强制转换 为 另一 种类型 例如 float  或 int 
 算术 对 十进制 对象 和 算术 对 整数 和 浮点数 有一些 小 的 差 别
 当 余数 运算符 应用 于 decimal  对象 时 结果 的符号 是 被 除 数 的符号 而不是 除 数 的 符号741 decimal 7 decimal 4 decimal 3 整数 除 法 运算符 的 行为 类似 返回真 商 的 整数 部分 截断 为零 而 不 是 它 的 向下 取 整 以便 保留 通常 的 标识 x  x  y  y  x  y 742 decimal 7 decimal 4 decimal 1 和 运算符 实现了 remainder  和 divideinteger  操作 分别 如 规范 中 所述
 十进制 对象 通常不 能 与 浮点数 或 fractions
fraction  实例 在 算术运算 中 结合 使用 例如 尝试 将 decimal  加到 float  将引发 typeerror
 但是 可以使用 python  的 比较 运算符 来 比较 decimal  实例 x  和 另一 个数字 y 
 这 样可以 避免 在 对 不同类型 的 数字 进行 相等 比较 时 混 淆 结果
 在3
2 版更改 现 在 完全 支持 decimal  实例 和其他 数字类型 之间的 混合 类型 比较
 除了 标准 的 数字 属性 十进制浮点 对象 还 有许多 专门 的 方法 adjusted  在 移 出 系 数 最 右 边 的 数字 之后 返回 调整 后 的指数 直到 只 剩 下 前导 数字 decimal 321 e 5
adjusted  返回7
 用于确定 最高 有效位 相对 于 小数点 的 位置
 asintegerratio  返回 一 对 n  d  整数表示 给定的 decimal  实例 作为 分 数、 最简 形式 项 并 带有 正 分 母 decimal 3
asintegerratio 15750 转换 是 精确的
 在 infinity  上 引发 overflowerror  在 nan  上 引 起 valueerror 
3
6 新版功能
 astuple  返回 一个 named  tuple  表示 的 数字 decimaltuplesign  digits  exponent
 canonical  返回 参数 的规范 编码
 目前 一个 decimal  实例 的 编码 始终 是 规范 的 因此 该 操作 返回 其 参数 不变
 compareother  contextnone  比较 两个 decimal  实例 的 值
 compare  返回 一个 decimal  实例 如果 任 一 操作数 是 nan  那么 结果是 nan  a  or  b  is  a  nan  decimalnan  a  b  decimal 1 a  b  decimal 0 a  b  decimal 1 comparesignalother  contextnone  除了 所有 nan  信号 之外 此操作 与 compare  方法 相同
 也就是说 如果两 个操作数 都 不 是 信 令 nan  那么 任何 静默 的 nan  操作数 都 被视为 信 令 nan
 comparetotalother  contextnone  使用它们 的 抽象 表示 而不是 它们的 数值 来 比较 两个操作 数
 类似于 compare  方法 但 结果 给出了 一个 总 排序 decimal  实例
 两个 decimal  实例 具有相同的 数值 但 不同的 表示形式 在 此 排序 中 比较 不 相等 decimal 12
comparetotaldecimal 12 decimal 1 静默 和 发出 信号 的 nan  也 包括在 总 排序 中
 这个函数 的 结果是 decimal 0 如果两 个操作数 具有相同的 表示 或 是 decimal 1 如果 第一个操作数 的 总 顺序 低 于 第二个操作数 或 是 decimal 1 如果 第一个操作数 在 总 顺序 中 高 于 第二个操作数
 有关 总 排序 的详细信息 请参阅 规范
 此操作 不受 上下文 影响 且 静默 不 更改 任何 标志 且不 执行 舍入
 作为 例 外 如果 无法 准确 转换 第二个操作数 则 c  版本 可能 会引发 invalidoperation
 comparetotalmagother  contextnone  比较 两个操作 数 使用它们 的 抽象 表示 而不是 它们的 值 如 comparetotal  但 忽略 每个 操作数的 符号
 x
comparetotalmagy  相当于 x
 此操作 不受 上下文 影响 且 静默 不 更改 任何 标志 且不 执行 舍入
 作为 例 外 如果 无法 准确 转换 第二个操作数 则 c  版本 可能 会引发 invalidoperation
 conjugate  只 返回 self  这种 方法 只 符合 decimal  规范
 copyabs  返回 参数 的绝对值
 此操作 不受 上下文 影响 并且 是 静默 的 没有 更改 标 志 且不 执行 舍入
 copynegate  回 到 参数 的 否 定
 此操作 不受 上下文 影响 并且 是 静默 的 没有 标志 更改 且不 执行 舍入
 copysignother  contextnone  返回 第一个操作数 的副本 其 符号 设置为 与 第二个操作数 的符号 相同
 例如 decimal 2
3 此操作 不受 上下文 影响 且 静默 不 更改 任何 标志 且不 执行 舍入
 作为 例 外 如果 无法 准确 转换 第二个操作数 则 c  版本 可能 会引发 invalidoperation
 expcontextnone  返回给定 数字 的 自然 指 数 函数 ex  的 值
 结果 使用 roundhalfeven  舍入模式 正确 舍入
561702493119680037517373933 e 139 fromfloatf  将 浮点数 转换为 十进制数 的 类 方法
 注意 decimal
1 与 decimal 0
1 不同
 由 于0
1 在 二进制浮点 中 不 能 精确 表示 因此 该值 存储为 最接近的 可表示 值 即0 x 1
999999999999 ap 4
 十进制 的 等效 值 是0
1000000000000000055511151231257827021181583404541015625
 注解 从 python 3
2 开始 decimal  实例 也 可以直接 从 float  构造
fromfloatfloatinf  decimalinfinity 3
1 新版功能
 fmaother  third  contextnone  混合 乘法 加 法
 返回 selfotherthird  中 间 乘 积 selfother  没有 舍入
fma 35 decimal 11 iscanonical  如果参数 是 规范 的 则 为 返回 true  否则为 false 
 目前 decimal  实例 总是 规范 的 所 以 这 个操作 总是返回 true 
 isfinite  如果参数 是一个 有限 的 数则返回 为 true  如果参数为 无穷大 或 nan  则返回 为 false
 isinfinite  如果参数为 正负 无穷大 则返回 为 true  否则为 false 
 isnan  如果参数为 nan  无论 是否 静默 则返回 为 true  否则为 false 
 isnormalcontextnone  如果参数 是一个 标准 的 有限 数则返回 true
 如果参数为 零、 次 标 准 数、 无穷大 或 nan  则返回 false
 isqnan  如果参数为 静默 nan  返回 true  否则返回 false
 issigned  如果参数 带有 负 号 则返回 为 true  否则返回 false
 注意0 和 nan  都 可 带有 符号
 issnan  如果参数为 显式 nan  则返回 true  否则返回 false
 issubnormalcontextnone  如果参数为 次 标准 数则返回 true  否则返回 false
 iszero  如果参数 是0 正负 皆 可 则返回 true  否则返回 false
 lncontextnone  返回 操作数的 自然 对 数 以 e  为底
 结果是 使用 roundhalfeven  舍入模式 正确 舍入 的
 log 10 contextnone  返回 操作数的 以十 为底 的 对 数
 结果是 使用 roundhalfeven  舍入模 式 正确 舍入 的
 logbcontextnone  对于一个 非零 数 返回 其 运算数 的 调整 后 指 数 作为一个 decimal  实例
 如果 运算数 为零 将 返回 decimalinfinity  并且 产生 the  divisionbyzero  标志
 如果 运算数是 无限 大 则返回 decimalinfinity 
 logicalandother  contextnone  logicaland  是需要 两个 逻辑运算 数 的 逻辑运算 参考 逻辑 操 作 数
 按位 输出 两 运算数 的 and  运算 的结果
 logicalinvertcontextnone  logicalinvert  是一个 逻辑运算
 结果是 操作数的 按位 求 反
 logicalorother  contextnone  logicalor  是需要 两个 logical  operands  的 逻辑运算 请参阅 逻辑 操作数
 结果是 两个 运算数 的 按位 的 or  运算
 logicalxorother  contextnone  logicalxor  是需要 两个 逻辑运算 数 的 逻辑运算 参考 逻辑 操 作 数
 结果是 按位 输出 的 两 运算数 的 异 或 运算
 maxother  contextnone  像 maxself  other  一样 除了 在 返回 之前 应用 上下文 舍入 规则 并且 用 信号 通知 或 忽略 nan  值 取决于 上下文 以及 它们是 发 信号 还是 安 静
 maxmagother  contextnone  与 max  方法 相似 但是 操作数 使用 绝对值 完成 比较
 minother  contextnone  像 minself  other  一样 除了 在 返回 之前 应用 上下文 舍入 规则 并且 用 信号 通知 或 忽略 nan  值 取决于 上下文 以及 它们是 发 信号 还是 安 静
 minmagother  contextnone  与 min  方法 相似 但是 操作数 使用 绝对值 完成 比较
 nextminuscontextnone  返回 小 于给定 操作数的 上下文中 可表示 的最大 数字 或者 当前 线程 的上下 文 中 的 可表示 的最大 数字 如果没有给 定 上下文
 nextpluscontextnone  返回 大 于给定 操作数的 上下文中 可表示 的最小 数字 或者 当前 线程 的上下 文 中 的 可表示 的最小 数字 如果没有给 定 上下文
 nexttowardother  contextnone  如果两 运算数 不 相等 返回 在 第二个操作数 的 方向 上 最接近 第一个操作数 的 数
 如果两 操作数 数值 上 相等 返回 将 符号 设置为 与 第二个 运算数 相同 的第一个 运算数 的 拷贝
 normalizecontextnone  通过 去除 尾随 的 零 并 将所有 结果 等于 decimal 0 的 转化为 decimal 0 e 0 来 标准 化 数字
 用 于 为 等效 类 的 属性 生成 规范 值
 比 如 decimal 32
100 和 decimal 0
321000 e 2 都 被 标准 化 为 相同 的 值 decimal 32
 numberclasscontextnone  返回 一个字符串 描述 运算数 的 class 
 返回值 是 以 下 十 个 字符串中的 一个
 infinity  指示 运算数 为负 无穷大
 normal  指示 该 运算数是 负 正常 数字
 subnormal  指示 该 运算数是 负 的 次 标准 数
 zero  指示 该 运算数是 负 零
 zero  指示 该 运算数是 正 零
 subnormal  指示 该 运算数是 正 的 次 标准 数
 normal  指示 该 运算数是 正 的 标准 数
 infinity  指示 该 运算数是 正 无穷
 nan  指示 该 运算数是 肃 静 nan  非 数字
 snan  指示 该 运算数是 信号 nan 
 quantizeexp  roundingnone  contextnone  返回 的 值 等于 舍入 后 的第一个 运算数 并且 具有 第二个操作数 的指数
414 与其他 运算 不同 如果 量 化 运算 后 的 系 数 长度 大于 精度 那么 会发出 一个 invalidoperation  信号
 这 保证 了 除非 有 一个错误 情况 量 化 指 数 恒 等于 右 手 运算数 的指数
 与其他 运算 不同 量 化 永 不 信号 下 溢 即使 结果 不 正常 且不 精确
 如果 第二个 运算数 的指数 大于 第一个 运算数 的指数 那 或 许 需要 舍入
 在 这 种情况下 舍入模式 由 给定 rounding  参数 决定 其余 的 由 给定 context  参数 决定 如果参数 都 未 给定 使用当前 线程 上下文 的 舍入模 式
 每 当 结果 的指数 大于 emax  或 小于 etiny  就会 返回 错误
 radix  返回 decimal 10 即 decimal  类 进行 所有 算术运算 所用的 数 制 基 数
 这是 为 保持 与 规范 描述 的 兼容性 而 加入 的
 remaindernearother  contextnone  返回 self  除 以 other  的 余数
 这 与 self  other  的 区别在于 所 选择 的 余数 要 使 其 绝对值 最小 化
 更 准确 地说 返回值为 self  n  other  其 中 n  是 最接近 self  other  的 实际 值 的 整数 并且 如 果两个 整数 与 实际 值 的 差 相等 则 会 选择 其中的 偶 数
 如果 结果 为零则 其 符号 将 为 self  的符号
remainderneardecimal 10 decimal 5 rotateother  contextnone  返回 对 第一个操作数 的 数 码 按 第二个操作数 所指定的 数量 进行 轮 转 的结果
 第二个操作数 必须为 precision  至 precision  精度 范围内 的 整数
 第二个操作数 的绝对值 给出 要 轮 转 的 位 数
 如果 第二个操作数 为 正 值 则 向左 轮 转 否则 向 右 轮 转
 如 有必要 第一个操作数 的 系 数 会 在 左侧 填充 零 以 达到 precision  所指定的 长度
 第一个操作数 的符号 和 指 数 保持 不 变
 samequantumother  contextnone  检测 自身 与 other  是否 具有相同 的指数 或 是否 均为 nan
 此操作 不受 上下文 影响 且 静默 不 更改 任何 标志 且不 执行 舍入
 作为 例 外 如果 无法 准确 转换 第二个操作数 则 c  版本 可能 会引发 invalidoperation
 scalebother  contextnone  返回 第一个操作数 使用 第二个操作数 对 指 数进行 调整 的结果
 等价于 返 回 第一个操作数 乘 以10 other  的结果
 第二个操作数 必须为 整数
 shiftother  contextnone  返回 第一个操作数 的 数 码 按 第二个操作数 所指定的 数量 进行 移 位 的结果
 第二个操作数 必须为 precision  至 precision  范围内 的 整数
 第二个 操作数 的绝对值 给出 要 移动 的 位 数
 如果 第二个操作数 为 正 值 则 向左 移 位 否则 向 右 移 位
 移 入系 数的数 码 为零
 第一个操作数 的符号 和 指 数 保持 不变
 sqrtcontextnone  返回 参数 的 平方 根 精确 到 完整 精度
 toengstringcontextnone  转换为字符串 如果需要 指 数 则会使用 工 程 标注 法
 工 程 标注 法 的指数 是3 的 倍 数
 这 会 在 十进制 位 的 左边 保留 至多3 个 数 码 并 可能 要求 添加一 至 两个 末尾 零
 例如 此方法会 将 decimal 123 e 1 转换为 decimal 1
23 e 3
 tointegralroundingnone  contextnone  与 tointegralvalue  方法 相同
 保留 tointegral  名称 是 为 了 与 旧版本 兼容
 tointegralexactroundingnone  contextnone  舍入到 最接近的 整数 发出 信号 inexact  或者如果 发生 舍入 则 相应地 发出 信号 rounded
 如果给出 rounding  形参 则 由 其 确定 舍入模式 否则 由 给定的 context  来确定
 如果没有给 定 任何 形参 则会使用 当 前上下文 的 舍入模式
 tointegralvalueroundingnone  contextnone  舍入到 最接近的 整数 而 不 发出 inexact  或 rounded  信号
 如果给 出 rounding  则 会 应用 其 所指定的 舍入模式 否则 使用 所提供的 context  或 当前上下文 的 舍入 方法
 逻辑 操作数
logicaland  logicalinvert  logicalor  和 logicalxor  方法 期望 其 参数为 逻辑 操作数
 逻辑 操作数 是 指 数 位 与 符号 位 均为 零 的 decimal  实例 并且 其 数字 位 均为0 或1
 上下文 对象
 上下文 是 算术运算 所在的 环境
 它们 管理 精度、 设置 舍入 规则、 确定 将 哪些 信号 视为 异常 并 限制 指 数 的范围
 每个 线程 都 有自己的 当前上下文 可 使用 getcontext  和 setcontext  函数 来读取 或 修改 decimal
getcontext  返回 活动 线程 的 当前上下文
setcontextc  将 活动 线程 的 当前上下文 设 为 c
 你也可以 使用 with  语句 和 localcontext  函数来 临时 改变 活动 上下文
localcontextctxnone  返回 一个 上下文管理器 它 将 在 进入 with  语句 时 将 活动 线程 的 当前上下文 设 为 ctx  的 一个 副本 并 在 退出 with  语句 时 恢复 之前的 上下文
 如果未 指定 上下文 则会使用 当前上下文 的 一个 副本
 例如 以下代码 会 将 当前 decimal  精度 设 为42 位 执行 一个 运算 然后 自 动 恢复 之前的 上下文 from  decimal  import  localcontext  with  localcontext  as  ctx  ctx
prec 42 perform  a  high  precision  calculation  s  calculatesomething  s  s  round  the  final  result  back  to  the  default  precision  新 的 上下文 也可 使用 下 述 的 context  构造器 来创建
 此外 模块 还提供了 三种 预 设 的 上下文 class  decimal
basiccontext  这是由 通 用 十进制 算术 规范 描述 所定义的 标准 上下文
 精度 设 为 九
 舍入 设 为 roundhalfup
 清除 所有 旗标
 启用 所有 陷阱 视为 异常 但 inexact  rounded  和 subnormal  除外
 由 于 启用 了许多 陷阱 此 上下文 适用于 进行 调试
extendedcontext  这是由 通 用 十进制 算术 规范 描述 所定义的 标准 上下文
 精度 设 为 九
 舍入 设 为 roundhalfeven
 清除 所有 旗标
 不 启用 任何 陷阱 因此在 计算 期间 不 会引发异常
 由 于 禁用 了 陷阱 此 上下文 适用于 希望 结果值 为 nan  或 infinity  而 不 是 引发异常 的应用
 这允许 应用 在 出现 当 其他情况下 会 中 止 程序 的 条件 时 仍 能 完成 运行
defaultcontext  此 上下文 被 context  构造器 用 作 新 上下文 的 原型
 改变 一个 字段 例如 精度 的效果 将 是 改变 context  构造器 所创建的 新 上下文 的 默认值
 此 上下文 最 适用于 多线程 环境
 在 线程 开始 前 改变 一个 字段 具有 设置 全 系统 默认值 的效果
 不 推荐 在 线程 开始 后 改变 字段 因为 这 会 要求 线程 同步 避免 竞 争 条件
 在 单 线程 环境中 最好 完全不 使用 此 上下文
 而 是 简单地 电 显式 创建 上下文 具体 如下所 述
 默认值为 prec 28 roundingroundhalfeven  并 为 overflow  invalidoperation  和 divisionbyzero  启用 陷阱
 在 已 提供的 三种 上下文 之外 还可以 使用 context  构造器 创建新的 上下文
contextprecnone  roundingnone  eminnone  emaxnone  capitalsnone  clampnone  flagsnone  trapsnone  创建一个新 上下文
 如果 某个 字段 未指定 或 为 none  则 从 defaultcontext  拷贝 默认值
 如果 flags  字段 未指定 或 为 none  则 清空 所有 旗标
 prec  为 一个1 maxprec  范围内 的 整数 用 于 设置 该 上下文中 算 术运算 的精度
 rounding  选项 应 为 rounding  modes  小节 中 列出的 常量 之一
 traps  和 flags  字段 列出 要 设置 的 任何 信号
 通常 新 上下文 应当 只 设置 traps  而 让 flags  为空
 emin  和 emax  字段 给定 指 数 所 允许 的 外部 上限
 emin  必须在 minemin 0 范围内 emax  在0 maxemax  范围内
 capitals  字段 为0 或1 默认值
 如果设 为1 指 数 将 附带 打 印 大写 的 e  其他情况 则 将 使用 小写 的 e  decimal 6
 clamp  字段 为0 默认值 或1
 如果设 为1 则 decimal  实 例 的指数 e  的 表示 范围 在 此 上下文中 将 严格 限制为 emin  prec 1 e  emax  prec 1
 如果 clamp  为0 则 将 适用 较 弱 的 条件 decimal  实例 调整 后 的指数 最大 值 为 emax
 当 clamp  为1 时 一个 较大 的 普通 数值 将 在 可能 的情况下 减 小 其 指 数 并 为 其 系统 添加 相应 数量 的 零 以便 符合 指 数值 限制 这可以 保持 数字 值 但 会 丢失 有效 末尾 零 的 信息
 例如 contextprec 6 emax 999 clamp 1
23000 e 999 clamp  值 为1 时 即 允许 与 在 ieee 754 中描述的 固定 宽度 十进制 交换 格 式 保持 兼容性
 context  类定义了 几种 通 用 方法 以及 大量 直接 在给定 上下文 中进行 算术运 算 的 方法
 此外 对 于 上述 的 每 种 decimal  方法 不包括 adjusted  和 astuple  方法 都有一个 相应的 context  方法
 例如 对于一 个 context  的 实例 c  和 decimal  的 实例 xc
expx  就 等价 于 x
 每个 context  方法都 接受一个 python  整数 即 int  的 实例 在任何 接受 decimal  的 实例 的地方 使用
 clearflags  将所有 旗标 重置 为0
 cleartraps  将所有 陷阱 重置 为零0
3
3 新版功能
 copy  返回 上下文 的 一个 副本
 copydecimalnum  返回 decimal  实例 num  的 一个 副本
 createdecimalnum  基于 num  创建一个新 decimal  实例 但 使用 self  作为 上下文
 与 decimal  构造器 不同 该 上下文 的精度、 舍入 方法、 旗标 和 陷阱 会 被 应 用 于 转换 过程
 此方法 很有用 处 因为 常量 往往 被 给 予 高 于 应用 所需的 精度
 另一个 好 处在于 立即 执行 舍入 可以 消除 超出 当前 精度的 数 位 所 导致 的 意外 效果
 在 下面的 示例中 使用 未 舍入 的 输入 意味着 在 总 和 中添加 零 会 改变 结果 getcontext
44 此方法 实现了 ibm  规格 描述 中 的 转换为 数字 操作
 如果参数为 字符串 则 不允许 有 开头 或 末尾 的空格 或 下划线
 createdecimalfromfloatf  基于 浮点数 f  创建一个新的 decimal  实例 但 会 使用 self  作为 上 下文 来执行 舍入
 与 decimal
fromfloat  类 方法 不同 上下文 的 精度、 舍入 方法、 旗标 和 陷阱 会 应用 到 转换 中
inexact  none 3
1 新版功能
 etiny  返回 一个 等于 emin  prec 1 的 值 即 次 标准 化 结果 中 的最小 指 数值
 当 发生 向下 溢出 时 指 数 会 设 为 etiny
 etop  返回 一个 等于 emax  prec 1 的 值
 使用 decimal  的 通常 方式是 创建 decimal  实例 然后 对 其 应用 算术运算 这 些 运算 发生 在 活动 线程 的 当前上下文 中
 一种 替代 方式 则 是 使用 上下文 的 方 法 在 特定 上下文 中进行 计算
 这些方法 类似于 decimal  类 的 方法 在 此 仅 简单地 重新 列出
 absx  返回 x  的绝对值
 addx  y  返回 x  与 y  的 和
 canonicalx  返回 相同 的 decimal  对象 x
 comparex  y  对 x  与 y  进行 数值 比较
 comparesignalx  y  对 两个操作 数进行 数值 比较
 comparetotalx  y  对 两个操作 数 使用 其 抽象 表示 进行比较
 comparetotalmagx  y  对 两个操作 数 使用 其 抽象 表示 进行比较 忽略 符号
 copyabsx  返回 x  的副本 符号 设 为0
 copynegatex  返回 x  的副本 符号 取反
 copysignx  y  从 y  拷贝 符号 至 x
 dividex  y  返回 x  除 以 y  的结果
 divideintx  y  返回 x  除 以 y  的结果 截 短 为整数
 divmodx  y  两个 数字 相 除 并 返回结果 的 整数 部分
 expx  返回 e  x
 fmax  y  z  返回 x  乘 以 y  再 加 z  的结果
 iscanonicalx  如果 x  是 规范 的 则返回 true  否则返回 false
 isfinitex  如果 x  为 有限 的 则返回 true  否则返回 false
 isinfinitex  如果 x  是 无限 的 则返回 true  否则返回 false
 isnanx  如果 x  是 qnan  或 snan  则返回 true  否则返回 false
 isnormalx  如果 x  是 标准 数则返回 true  否则返回 false
 isqnanx  如果 x  是 静默 nan  则返回 true  否则返回 false
 issignedx  x  是 负 数则返回 true  否则返回 false
 issnanx  如果 x  是 显式 nan  则返回 true  否则返回 false
 issubnormalx  如果 x  是 次 标准 数则返回 true  否则返回 false
 iszerox  如果 x  为零则 返回 true  否则返回 false
 lnx  返回 x  的 自然 对 数 以 e  为底
 log 10 x  返回 x  的 以10 为底 的 对 数
 logbx  返回 操作数的 msd  等级 的指数
 logicalandx  y  在 操作数的 每个 数 位 间 应用 逻辑运算 and
 logicalinvertx  反 转 x  中的所有 数 位
 logicalorx  y  在 操作数的 每个 数 位 间 应用 逻辑运算 or
 logicalxorx  y  在 操作数的 每个 数 位 间 应用 逻辑运算 xor
 maxx  y  对 两个值 执行 数字 比较 并返回其 中 的最大 值
 maxmagx  y  对 两个值 执行 忽略 正负 号 的 数字 比较
 minx  y  对 两个值 执行 数字 比较 并返回其 中 的最小 值
 minmagx  y  对 两个值 执行 忽略 正负 号 的 数字 比较
 minusx  对应于 python  中 的 单 目 前缀 取 负 运算符 执行 取 负 操作
 multiplyx  y  返回 x  和 y  的 积
 nextminusx  返回 小于 x  的最大 数字 表示形式
 nextplusx  返回 大于 x  的最小 数字 表示形式
 nexttowardx  y  返回 x  趋 向 于 y  的 最接近的 数字
 normalizex  将 x  改 写 为 最简 形式
 numberclassx  返回 x  的 类 的 表示
 plusx  对应于 python  中 的 单 目 前缀 取 正 运算符 执行 取 正 操作
 此操作 将 应用 上下文 精度 和 舍入 因此它 不 是 标识 运算
 powerx  y  modulonone  返回 x  的 y  次 方 如果给出 了 模 数 modulo  则 取 其 余数
 如 为 两个参数 则 计算 xy
 如果 x  为负值 则 y  必须为 整数
 除非 y  为整数 且 结果为 有限 值 并 可 在 precision  位 内 精确 表示 否则 结果将 是 不 精确的
 上下文 的 舍入模式 将 被使用
 结果 在 python  版 中 总是会 被 正确地 舍入
 decimal 0 decimal 0 结果为 invalidoperation  而 如果 invalidoperation  未 被捕获 则 结果为 decimalnan
 在3
3 版更改 c  模块 计算 power  时 会 使用 已 正确 舍入 的 exp  和 ln  函数
 结果是 经过 良 好 定义 的 但 仅限 于 几乎 总是 正确地 舍 入
 带有 三个参数 时 计算 xy  modulo
 对 于 三个参数 的形式 参 数 将 会 应 用以下 限制 三个参数 必须 都 是 整数 y  必须是 非 负数 x  或 y  至少有 一个 不 为零 modulo  必须不为 零 且 至多 有 precision  位 来自 context
powerx  y  modulo  的 结果值 等于 使用 无限 精度 计算 xy  modulo  所 得到的 值 但 其 计算 过程 更 高效
 结果 的指数 为 零 无论 x  y  和 modulo  的指数 是 多少
 结果值 总是 完全 精确 的
 quantizex  y  返回 的 值 等于 x  舍入 后 并且 指 数 为 y
 radix  恰好 返回10 因为 这是 decimal  对象 remainderx  y  返回 整 除 所 得到的 余数
 结果 的符号 如果不 为零则 与 原始 除 数 的符号 相同
 remaindernearx  y  返回 x  y  n  其 中 n  为 最接近 x  y  实际 值 的 整数 如 结果 为0 则 其 符号 将 与 x  的符号 相同
 rotatex  y  返回 x  翻 转 y  次 的副本
 samequantumx  y  如果两 个操作数 具有相同的 指 数则返回 true
 scalebx  y  返回 第一个操作数 添加 第二个 值 的指数 后的结果
 shiftx  y  返回 x  变 换 y  次 的副本
 sqrtx  非 负数 基于 上下文 精度的 平方 根
 subtractx  y  返回 x  和 y  的 差
 toengstringx  转换为字符串 如果需要 指 数 则会使用 工 程 标注 法
 工 程 标注 法 的指数 是3 的 倍 数
 这 会 在 十进制 位 的 左边 保留 至多3 个 数 码 并 可能 要求 添加一 至 两个 末尾 零
 tointegralexactx  舍入到 一个整数
 toscistringx  使用 科学 计数 法 将 一个数字 转换为字符串
 常 数
 本节 中 的常量 仅 与 c  模块 相关
 它们也 被 包含在 纯 python  版本 以 保持 兼容性
32 位64 位 decimal
havethreads  该值 为 true
 已弃用 因为 python  现 在 总是 启用 线程
3
9 版后已移除
havecontextvar  默认值为 true
 如果 python  的 编译 带有 withoutdecimal  contextvar  选项 则 c  版本 会 使用 线程 局部 而不是 协程 局部 上下文 并且 该 值 为 false
 这 在某些 嵌套 上下文 场景 中 将 稍 快 一些
3
9 新版功能 向下 移植到3
7 和3
 舍入模式
roundceiling  舍入 方向 为 infinity
rounddown  舍入 方向 为零
roundfloor  舍入 方向 为 infinity
roundhalfdown  舍入到 最接近的 数 同样 接近 则 舍入 方向 为零
roundhalfeven  舍入到 最接近的 数 同样 接近 则 舍入到 最接近的 偶 数
roundhalfup  舍入到 最接近的 数 同样 接近 则 舍入到 零 的 反 方向
roundup  舍入到 零 的 反 方向
round 05 up  如果 最后一 位 朝 零 的 方向 舍入 后 为0 或5 则 舍入到 零 的 反 方向 否则 舍入 方向 为零
 信号
 信号 代表 在 计算 期间 引发 的 条件
 每个 信号 对应于 一个 上下文 旗标 和 一个 上下文 陷阱 启用 器
 上下文 旗标 将 在 遇到 特定 条件 时 被 设 定
 在 完成 计算 之后 将 为 了 获得 信息 而 检测 旗标 例如 确定 计算 是否 精确
 在 检测 旗标 后 请 确保 在 开始 下 一次 计算 之前 清除 所有 旗标
 如果为 信号 设 定 了 上下文 的 陷阱 启用 器 则 条件 会导致 特定的 python  异常 被引发
 举例来说 如果设 定 了 divisionbyzero  陷阱 则 当 遇到 此 条件 时就 将引发 divisionbyzero  异常
clamped  修改 一个 指 数 以 符合 表示 限制
 通常 限位 将 在 一个 指 数 超出 上下文 的 emin  和 emax  限制 时发生
 在 可能 的情况下 会通过 给 系 数 添加 零 来 将 指 数 缩 减 至 符合 限制
decimalexception  其他 信号 的 基类 并且 也是 arithmeticerror  的一个子类
divisionbyzero  非 无限 数 被 零 除 的 信号
 可 在 除 法、 取 余 队 法 或 对 一个 数 求 负数 次 幂 时发生
 如果此 信号 未被 陷阱 捕 获 则返回 infinity  或 infinity  并且 由 对 计算 的 输入 来确定 正负 符 号
inexact  表明 发生了 舍入 且 结果是 不 精确的
 有 非零 数 位 在 舍入 期间 被丢弃 的 信号
 舍入 结果将 被 返回
 此 信号 旗标 或 陷阱 被用于 检测 结果 不 精确的 情况
invalidoperation  执行 了 一个 无效的 操作
 表明 请求 了 一个 无 意义 的 操作
 如 未被 陷阱 捕获 则返回 nan
 可能的 原 因 包括 infinity  infinity 0 infinity  infinity  infinity  x 0 infinity  x  sqrtx  and  x 000 x  noninteger  x  infinityclass  decimal
overflow  数值 的 溢出
 表明 在 发生 舍入 之后 的指数 大于 emax
 如果未 被 陷阱 捕获 则 结果将 取 决于 舍入模式 或者 向下 舍入 为 最大 的 可表示 有限 数或者 向 上 舍入 为 infinity
 无论 哪 种情况 都 将引发 inexact  和 rounded  信号
rounded  发生了 舍入 但 或 许 并没有 信息 丢失
 一旦 舍入 丢弃 了 数 位 就 会发出 此 信号 即使 被丢弃 的 数 位 是 零 例如 将5
00 舍入 为5
 如果未 被 陷阱 捕获 则 不 经 修改 地 返回结果
 此 信号 用 于 检测 有效位 数 的 丢弃
subnormal  在 舍入 之前 指 数 低 于 emin
 当 操作 结果是 次 标准 数 即 指 数 过 小 时就 会发出 此 信号
 如果未 被 陷阱 捕 获 则 不 经 修改 过 返回结果
underflow  数字 向下 溢出 导致 结果 舍入到 零
 当 一个 次 标准 数 结果 通过 舍入 转 为零 时就 会发出 此 信号
 同时 还 将引发 inexact  和 subnormal  信号
floatoperation  为 float  和 decimal  的 混合 启用 更 严格 的 语义
 如果 信号 未 被捕获 默认 则 在 decimal  构造器、 createdecimal  和 所有 比较 运算 中 允许 float  和 decimal  的 混合
 转换 和 比较 都 是 完全 精 确 的
 发生 的 任何 混合 运算 都 将 通过 在 上下文 旗标 中 设置 floatoperation  来 静默地 记录
 通过 fromfloat  或 createdecimalfromfloat  进行 显式 转换 则 不 会 设置 旗标
 在其他情况下 即 信号 被捕获 则 只 静默 执行 相等 性 比较 和 显式 转换
 所 有其他 混合 运算 都 将引发 floatoperation
 以 下 表 格 总结 了 信号 的 层级结构 exceptions
 浮点数 说明
 通过 提升 精度 来 解决 舍入 错误
 使用 十进制 浮点数 可以 消除 十进制 表示 错误 即 能够 完全 精确 地 表示0
1 这样的 数 然而 某些 运算 在 非零 数 位 超出 给定的 精度 时 仍然 可能导致 舍入 错误
 舍入 错误 的 影响 可能 因 接近 相互 抵 销 的 加 减 运算 被 放 大 从而 导致 丢失 有效位
knuth  提供 了两个 指导 性 示例 其 中出现 了 精度 不 足 的 浮点 算术 舍入 导致 加 法 的 交换 律 和 分配 律 被打 破 examples  from  seminumerical  algorithms  section 4
0060000 decimal  模块 则 可以通过 充 分 地 扩展 精度 来避免 有效位 的 丢失 getcontext
 特殊 的 值
decimal  模块 的 数字 系统 提供了一些 特殊 的 值 包括 nan  snaninfinity  infinity  以及 两种 零值0 和0
 无穷大 可以使用 decimalinfinity  来构建
 它们 也可以在 不 捕获 divisionbyzero  信号 捕获 时 通过 除 以 零 来 产生
 类似地 当 不 捕获 overflow  信号 时 也可以通过 舍入到 超出 最大 可表示 数字 限制 的方式 产生 无穷大 的结果
 无穷大 是 有 符号 的 仿 射 并 可用于 算术运算 它们会 被当作 极 其 巨 大 的 不 确定 数字 来处理
 例如 无穷大 加一个 常量 结果 也 将 为 无穷大
 某些 不存在 有效 结果的 运算 将 会返回 nan  或者如果 捕获 了 invalidoperation  信号 则会引发 一个异常
 例如00 会返回 nan  表示 结果 不是一个 数字
 这样的 nan  是 静默 产生 的 并且 在 产生 之后 参 与 其 它 计算 时 总是会 得到 nan  的结果
 这种 行为 对 于 偶 而 缺少 输入 的 各 类 计算 都 很有用 处 它允许 在 将 特定 结果 标记为 无效的 同时 让 计算 继续 运行
 另一种 变体 形式 是 snan  它 在每次 运算 后 会发出 信号 而不是 保持 静默
 当 对 于 无效 结果 需要 中断 计算 进行 特别 处理 时 这是一个 很有用 的返回值
python  中 比较 运算符 的 行为 在 涉及 nan  时 可能会 令人 有 点 惊 讶
 相等 性 检测 在 操作数 中 有 静默 型 或 信号 型 nan  时 总是会 返回 false  即使 是 执行 decimalnandecimalnan  而 不 等 性 检测 总是会 返回 true
 当 尝试 使用 或 运算符 中的任何 一个 来 比较 两个 decimal  值 时如果 运算数 中 有 nan  则将引发 invalidoperation  信号 如果此 信号 未 被捕获 则 将 返回 false
 请注意 通 用 十进制 算术 规范 并 未 规 定 直接 比较 行为 这些 涉及 nan  的 比较 规则 来自 于 ieee 854 标准 见 第5
7 节 表3
 要 确保 严格 符合 标准 请改用 compare  和 comparesignal  方法
 有 符号 零 值可以 由 向下 溢出 的 运算 产生
 它们 保留 符号 是为了 让 运算 结果 能 以 更高的 精度 传递
 由 于 它们的 大小 为零 正 零 和 负 零 会被视为 相等 且 它们的 符号 具有 信息
 在 这两个 不 相同 但 却 相等的 有 符号 零 之外 还 存 在 几种 零 的不同 表示形式 它们的 精度 不同 但 值 也 都 相等
 这 需要 一些 时间 来 逐 渐 适 应
 对 于 习 惯 了 标准 浮点 表示形式 的 眼 睛 来说 以 下 运算 返回 等于 零 的 值 并不是 显 而 易 见 的1 decimalinfinitydecimal 0 e 1000026
 使用 线程
getcontext  函数 会 为每个 线程 访问 不同的 context  对象
 具有 单独 线程 上下文 意味着 线程 可以 修改 上下文 例如 getcontext
prec 10 而 不 影响 其他线程
 类似 的 setcontext  会 为 当前上下文 的 目标 自动 赋值
 如果在 调用 setcontext  之前 调用 了 getcontext  则 getcontext  将自动 创建一个新的 上下文 在当前 线程中 使用
 新 的 上下文 拷贝 自 一个名为 defaultcontext  的 原型 上下文
 要 控制 默认值 以便 每个 线程 在 应用 运行 期间 都 使用 相同 的 值 可以直接 修改 defaultcontext  对象
 这 应当 在任何 线程 启动 之前 完成 以 使得 调用 getcontext  的 线程 之间 不 会产生 竞 争 条件
 例如 set  applicationwide  defaults  for  all  threads  about  to  be  launched  defaultcontext
 例 程
 以下是 一些 用 作 工具 函数 的 例 程 它们 演示了 使用 decimal  类 的各种 方式 def  moneyfmtvalue  places 2 curr  sep  dp
decimal  常见问题
warnings  warning  control
 源代码 libwarnings
 c  programmers  use  pyerrwarnex  see  异常处理 for  details
 参见 logging
 警告 类别
the  following  warnings  category  classes  are  currently  defined  class  描述 warning  this  is  the  base  class  of  all  warning  category  classes
 在3
7 版更改 previously  deprecationwarning  and  futurewarningwere  distinguished  based  on  whether  a  feature  was  being  removedentirely  or  changing  its  behaviour
 they  are  now  distinguished  basedon  their  intended  audience  and  the  way  theyre  handled  by  the  defaultwarnings  filters
the  warnings  filter
 each  entry  is  a  tuple  of  theform  action  message  category  module  lineno  where  action  is  one  of  the  following  strings  值 处 置 default  为 发出 警告 的 每个 位置 模块 行 号 打印 第一个 匹 配 警告 error  将匹配 警告 转换为 异常 ignore  从 不 打印 匹配 的 警告 always  总是 打印 匹配 的 警告 module  为 发出 警告 的 每个模块 打印 第一次 匹配 警告 无论 行 号 如何 once  无论 位置 如何 仅 打印 第一次 出现的 匹配 警告 message  is  a  string  containing  a  regular  expression  that  the  start  of  the  warning  message  must  match
describing  warning  filters
 默认 警告过滤器
 在3
2 版更改 deprecationwarning  is  now  ignored  by  default  inaddition  to  pendingdeprecationwarning
 在3
7 版更改 deprecationwarning  is  once  again  shown  by  defaultwhen  triggered  directly  by  code  in  main
 在3
7 版更改 byteswarning  no  longer  appears  in  the  default  filterlist  and  is  instead  configured  via  sys
warnoptions  when  b  isspecified  twice
overriding  the  default  filter
 暂 时 禁止 警告
 测试 警告
updating  code  for  new  versions  of  dependencies
available  functions
 在3
6 版更改 added  source  parameter
 在3
6 版更改 add  the  source  parameter
available  context  managers
 注解 the  catchwarnings  manager  works  by  replacing  and  then  later  restoring  the  modules  showwarning  function  and  internal  list  of  filter  specifications
tarfile  读写 tar  归档 文件
tarfile  对象
tarinfo  对象
 命令行界面
3
4 新版功能
tarfile  模块提供了 简单的 命令行接口 以便 与 tar  归档 进行 交互
 如果你想要 创建一个新的 tar  归档 请 在 c  选项 后 指定 其 名称 然后 列出 应当被 包含的 文件名 python  m  tarfile  c  monty
txt  传入一个 字典 也是 可接受 的 python  m  tarfile  c  monty
tar  lifeofbrian 1979 如果你想要 将 一个 tar  归档 提取 到 指定 的 目录 请使用 e  选项 python  m  tarfile  e  monty
tar  你 也可以通过 传入 目录 名称 将 一个 tar  归档 提取 到 不同的 目录 python  m  tarfile  e  monty
tar  otherdir  要获取 一个 tar  归档 中 文件 的 列表 请使用 l  选项 python  m  tarfile  l  monty
 命令行选项
l  tarfilelist  tarfile  列出 一个 tarfile  中 的文件名
 sourcen  基于 源文件 创建 tarfile
e  tarfile  outputdirextract  tarfile  outputdir  如果未指定 outputdir  则 会 将 tarfile  提取 到 当前目录
t  tarfiletest  tarfile  检测 tarfile  是否 有效
v  verbose  更 详细 地 输出 结果
 示例
 如何将 整个 tar  归档 提取 到 当前 工作 目录 import  tarfile  tar  tarfile
close  如何 通过 tarfile
extractall  使用 生成器函数 而非 列表 来 提取 一个 tar  归档 的 子集 import  os  import  tarfile  def  pyfilesmembers  for  tarinfo  in  members  if  os
close  如何 基于 一个 文件名 列表 创建 未 压缩 的 tar  归档 import  tarfile  tar  tarfile
close  使用 with  语句 的 同 一个 示例 import  tarfile  with  tarfile
addname  如何 读取 一个 gzip  压缩 的 tar  归档 并 显示 一些 成员 信息 import  tarfile  tar  tarfile
close  如何 创建一个 归档 并 使用 tarfile
add  中 的 filter  形参 来 重置 用户 信息 import  tarfile  def  resettarinfo  tarinfo
 受支持的 tar  格式
 通过 tarfile  模块 可以创建 三种 tar  格式 the  posix
11988 ustar  格式 ustarformat
 它 支持 最多256 个 字符 的文件名 长度 和 最多100 个字符的 链接 名 长度
 文件 大小 上限 为8 gib
 这 是一种 老 旧 但 广 受支持的 格式
 gnu  tar  格式 gnuformat
 它 支持 长 文件名 和 链接 名、 大于8 gib  的 文件 以及 稀 疏 文件
 它 是 gnulinux  系统上 的 事实 标准
 tarfile  完全 支持 针对 长 名称 的 gnu  tar  扩展 稀 疏 文件 支持 则 限制为 只读
 posix
12001 pax  格式 paxformat
 它 是 几乎 无 限制 的 最 灵活 格式
 它 支持 长 文件名 和 链接 名 大 文件 以及 使用 便 捷方式 存储 路径名
 现 代 的 tar  实现 包括 gnu  tar  bsdtarlibarchive  和 star  完全 支持 扩展 pax  特性 某些 老 旧 或 不 维护 的 库 可能 不受支持 但 应当 会 将 pax  归档 视为 广 受支持的 ustar  格式
 这是 目前 新 建 归档 的 默认 格式
 它 扩展 了 现有的 ustar  格式 包括 用 于 无法 以 其他方 式 存储 的附加 标头
 存 在 两种 形式 的 pax  标头 扩展 标头 只 影响 后续的 文件 标头 全局 标头 则 适 用 于 完整 归档 并 会影响 所有 后续的 文件
 为 了 便 于 移植 在 pax  标头 中的所 有 数据 均 以 utf 8 编码
 还 有一些 tar  格式 的其他 变种 它们可以 被 读取 但不 能 被创建 古 老 的 v 7 格式
 这是 来自 unix  第 七 版 的第一个 tar  格式 它只 存储 常规 文件和目录
 名称 长度 不 能 超过100 个 字符 并且没有 用户 分组 名 信息
 某些 归档 在 带有 非 ascii  字符 字段 的情况下 会产生 计算 错误 的 标头 校 验 和
 sunos  tar  扩展 格式
 此 格式 是 posix
12001 pax  格式 的 一个 变种 但 并 不 保持 兼容
unicode  问题
 最初 tar  格式 被设计用 来 在 磁 带 机 上 生成 备 份 主要 关 注 于 保存 文件系统 信息
 现 在 tar  归档 通常用 于 文件 分发 和 在 网络 上 交换 归档
 最初 格式 它 是 所有其他 格式 的基础 的 一个 问题 是 它 没有 支持 不同 字符 编码格式 的概念
 例如 一个 在 utf 8 系统上 创建 的 普通 tar  归档 如果 包含 非 ascii  字符 则 将 无法 在 latin 1 系统上 被 正确 读取
 文本 元数据 例如 文件名 链接 名 用户 分组 名 将 变 为 损坏 状态
 不幸的是 没有 什么 办 法 能够 自动 检测 一个 归档 的 编码格式
 pax  格式 被设计用 来 解决 这个问题
 它 使用 通 用 字符 编码格式 utf 8 来 存储 非 ascii  元数据
 在 tarfile  中 字符 转换 的 细节 由 tarfile  类 的 encoding  和 errors  关键字参数 控制
encoding  定义 了用于 归档 中 元数据 的 字符 编码格式
 默认值为 sys
getfilesystemencoding  或 是 回退 选项 ascii
 根据 归档 是 被 读取 还是 被写入 元数据 必须 被 解码 或 编码
 如果没有 正确 设置 encoding  转换 可能会 失败
errors  参数 定义了 不 能 被 转换 的 字符 将 如何处理
 可能的 取值 在 错误处理 方案 小节 列出
 默认 方案 为 surrogateescape  它 也 被 python  用 于 文件 系统调用 参见 文件名 命令行参数 以及 环境变量
 对 于 paxformat  归档 默认 格式 encoding  通常是 不 必要的 因为 所有 元数据 都 使用 utf 8 来 存储
 encoding  仅在 解码 二进制 pax  标头 或 存储 带有 替代 字符 的 字符串 等 少 数 场景 下 会 被使用
tkinterdnd  拖 放 操作 支持
 源代码 libtkinterdnd
py  注解 此模块 是 实 验 性 的 且 在 为 tk  dnd  所 替代 后 将 被弃用
tkinter
dnd  模块 为单个 应用 内部 的 对象提供 了 在同一 窗口中 或多个 窗口 间 的 拖 放 操作 支持
 要 将 对象 设 为 可 拖 放 你必须 为 其 创建 启动 拖 放 进程 的 事件 绑定
 通常 你 要 将 buttonpress  事件 绑定到 你所 编写 的 回调函数 参见 bindings  and  events
 该函数 应当 调用 dndstart  其 中 source  为 要 拖 动 的 对象 而 event  为 发起调用 的 事件 你 的回调 函数的参数
 目标 对象 的 选择 方式 如 下1
 从 顶 至 底 地 在 鼠标 之 下 的区域 中搜索 目标 控件 目标 控件 应当 具有 一个指向 可调用对象 的 dndaccept  属性 如果 dndaccept  不存在或 是 返回 none  则 将 转 至 父 控件 中搜索 如果 目标 控件 未找到 则 目标 对象 为 none 2
 调用 oldtarget
 调用 newtarget
 调用 target
dndcommitsource  event  来 通知 释放5
 调用 source
dndendtarget  event  来 表明 拖 放 的 结束 class  tkinter
dndhandlersource  event  dndhandler  类 处理 拖 放 事件 在 事件 控件 的 根 对象 上 跟踪 motion  和 buttonrelease  事件
 canceleventnone  取消 拖 放 进程
 finishevent  commit 0 执行 结束 播 放 函数
 onmotionevent  在 执行 拖 动 期间 为 目标 对象 检查 鼠标 之 下 的区域
 onreleaseevent  当 释放 模式 被 触发 时 表明 拖 动 的 结束
dndstartsource  event  用 于 拖 放 进程 的 工厂函数
 参见 bindings  and  events
httpcookiejar —— http  客户端 的 cookie  处理
cookiejar  和 filecookiejar  对象
 在3
3 版更改 request  object  needs  originreqhost  attribute
 dependency  on  a  deprecated  method  getoriginreqhost  has  been  removed
 在3
3 版更改 request  object  needs  originreqhost  attribute
 dependency  on  a  deprecated  method  getoriginreqhost  has  been  removed
 在3
3 版更改 过去 触发 的 ioerror  现在是 oserror  的别名
filecookiejar  subclasses  and  cooperation  with  web  browsers
 注解 this  loses  information  about  rfc 2965 cookies  and  also  about  newer  or  nonstandard  cookieattributes  such  as  port
 警告 back  up  your  cookies  before  saving  if  you  have  cookies  whose  loss  corruption  would  be  inconvenient  there  are  some  subtleties  which  may  lead  to  slight  changes  in  the  file  over  a  load  save  roundtrip
 在3
8 版更改 文件名 形参 支持 pathlike  object
cookiepolicy  对象
defaultcookiepolicy  对象
cookie  对象
 示例
 杂项 服务
 本章中 介绍 的 模块提供了 所有 python  版本中 提供的 各种 杂项 服务
 这是一个 概述 formatter  通 用 格式化 输出 the  formatter  interface  formatter  implementations  the  writer  interface  writer  implementations
pathlib  面向对象 的 文件 系统路径
3
4 新版功能
 源代码 libpathlib
py  该模块提供 表示 文件 系统路径 的 类 其 语义 适用于 不同 的操作系统
 路径 类 被 分 为 提供 纯 计算 操作 而 没有 io  的 纯 路径 以及 从 纯 路径 继承 而 来 但 提供 io  操作 的 具体 路径
 图片 如果你 以 前 从未 使用 过 此模块 或者 不 确定 在 项目 中 使用 哪 一个 类 是 正确的 则 path  总是 你需要 的
 它 在 运行 代码 的平台上 实例化 为 一个 具体 路径
 在 一些 用 例 中 纯 路径 很有用 例如1
 如果你想要 在 unix  设备 上 操作 windows  路径 或者 相反
 你 不应 在 unix  上 实例化 一个 windowspath  但是 你可以 实例化 purewindowspath 
 你 只 想 操作 路径 但不 想 实际 访问 操作系统
 在这种情况下 实例化 一个 纯 路 径 是 有用的 因为它们 没有任何 访问 操作系统的 操作
 参见 pep 428 pathlib  模块 面向对象 的 的 文件 系统路径
 参见 对 于 底层 的 路径 字符串 操作 你也可以 使用 os
path  模块
 基础 使用
 导入 主 类 from  pathlib  import  path  列出 子目录 p  path
hg  posixpathdocs  posixpathdist  posixpathpycache  posixpathbuild  列出 当前目录 树 下 的 所有 python  源代码 文件 listp
py  在 目录 树 中 移动 p  pathetc  q  p  init
dhalt  查询 路径 的 属性 q
isdir  false  打开一个 文件 with  q
 纯 路径
 通 用 性 质
 路径 是不可变 并 可哈希 的
 相同 风格的 路径 可以 排序 与 比较
 这些 性 质 尊 重 对 应 风格的 大小写 转换 语义 pureposixpathfoo  pureposixpathfoo  false  purewindowspathfoo  purewindowspathfoo  true  purewindowspathfoo  in  purewindowspathfoo  true  purewindowspathc  purewindowspathd  true  不同 风格的 路径 比较 得到 不 等 的结果 并且 无法被 排序 purewindowspathfoo  pureposixpathfoo  false  purewindowspathfoo  pureposixpathfoo  traceback  most  recent  call  last  file  stdin  line 1 in  module  typeerror  not  supported  between  instances  of  purewindowspath  and  pureposixpath
 运算符
 访问 个 别 部分
 为 了 访问 路径 独立的 部分 组件 使用以下 特征属性 purepath
parts  一个元组 可以 访问 路径 的多个 组件 p  purepathusrbinpython 3 p
parts  c  program  files  psf  注意 盘 符 和 本地 根 目录 是如何 重 组 的
 方法 和 特征属性
 具体 路径
 具体 路径 是 纯 路径 的子类
 除了 后者 提供的 操作 之外 它们 还提供了 对 路径 对象进行 系统调用 的 方法
 有 三种 方法可以 实例化 具体 路径 class  pathlib
pathpathsegments  一个 purepath  的子类 此 类 以 当前 系统 的 路径 风格 表示 路径 实例化 为 posixpath  或 windowspath  pathsetup
py  pathsegments  参数 的 指定 和 purepath  相同
posixpathpathsegments  一个 path  和 pureposixpath  的子类 此 类 表示一个 非 windows  文件 系统 的 具体 路径 posixpathetc  posixpathetc  pathsegments  参数 的 指定 和 purepath  相同
windowspathpathsegments  path  和 purewindowspath  的子类 从 类 表示一个 windows  文件系统 的 具体 路径 windowspathcprogram  files  windowspathcprogram  files  pathsegments  参数 的 指定 和 purepath  相同
 你 只能 实例化 与 当前 系统 风格 相同 的 类 允许 系统调用 作用于 不兼容 的 路径 风格 可能在 应用程序中 导致 缺 陷 或 失败 import  os  os
 方法
 除 纯 路径 方法 外 实体 路径 还提供 以下方法
 如果 系统调用 失败 例如 因为 路径不存在 这些方法 中 许多 都 会引发 oserror
 在3
8 版更改 对 于 包含 os  层级 无法 表示 字符 的 路径 existsisdir  isfile  ismount  issymlinkisblockdevice  ischardevice  isfifo  issocket  现在将 返回 false  而不是 引发异常
cwd  返回一个新的 表示 当前目录 的 路径对象 和 os
getcwd  返回 的 相同 path
home  返回 一个 表示 当前 用户 家 目录 的 新 路径对象 和 os
expanduser  构造 含 路径 返回 的 相同 path
home  posixpathhomeantoine 3
5 新版功能
stat  返回 一个 os
statresult  对象 其中包含 有关 此 路径 的 信息 例如 os
 结果会 在每次 调用此方法 时 重新 搜索
chmodmode  改变 文件 的 模式 和 权限 和 os
chmod  一样 p  pathsetup
exists  此 路径 是否 指向一个 已存在 的 文件 或 目录 path
exists  false  注解 如果路径指向 一个 符号链接 exists  返回 此 符号链接 是否 指向 存 在 的 文件 或 目录
expanduser  返回 展开 了 包含 和 user  的 构造 就 和 os
expanduser  一样 p  posixpathfilmsmonty  python  p
expanduser  posixpathhomeericfilmsmonty  python 3
5 新版功能
globpattern  解析 相对于 此 路径 的 通 配 符 pattern  产生 所有 匹配 的 文件 sortedpath
py  模式 表示 此 目录 以及 所有 子目录 递归
 换句话说 它 启用 递归 通 配 sortedpath
py  注解 在 一个 较大 的 目录 树 中 使用 模式 可能会 消耗 非常 多 的 时间
 引发一个 审计事件 pathlib
glob  附带参数 self  pattern
group  返回 拥有 此 文件 的 用户 组
 如果文件 的 gid  无法 在 系统 数据库 中找到 将 抛 出 keyerror 
isdir  如果路径指向 一个 目录 或者一个 指向 目录 的符号链接 则返回 true  如 果 指向 其他类型的 文件 则返回 false
 当 路径不存在 或者是一个 破 损 的符号链接 时 也会 返回 false  其他错误 例如 权限 错误 被传播
isfile  如果路径指向 一个 正常的 文件 或者一个 指向 正常 文件 的符号链接 则返回 true  如果 指向 其他类型的 文件 则返回 false
 当 路径不存在 或者是一个 破 损 的符号链接 时 也会 返回 false  其他错误 例如 权限 错误 被传播
ismount  如果路径 是一个 挂 载 点 mount  point  在 文件系统 中 被 其他 不同的 文件 系统 挂 载 的 地 点
 在 posix  系统 此 函数 检查 path  的 父 级—— path
 是否 处于 一个 和 path  不同的 设备 中 或者 filepath
 和 path  是否 指向 相同 设备 的 相同 inode —— 这 能 检测 所有 unix  以及 posix  变种 上 的 挂 载 点
 windows  上 未 实现
3
7 新版功能
issymlink  如果路径指向 符号链接 则返回 true  否则 false
 如果 路径不存在 也 返回 false  其他错误 例如 权限 错误 被传播
issocket  如果路径指向 一个 unix  socket  文件 或者 指向 unix  socket  文件 的符号 链接 则返回 true  如果 指向 其他类型的 文件 则返回 false
 当 路径不存在 或者是一个 破 损 的符号链接 时 也会 返回 false  其他错误 例如 权限 错误 被传播
isfifo  如果路径指向 一个 先 进先出 存储 或者 指向 先 进先出 存储 的符号链接 则返 回 true  指向 其他类型的 文件 则返回 false
 当 路径不存在 或者是一个 破 损 的符号链接 时 也会 返回 false  其他错误 例如 权限 错误 被传播
isblockdevice  如果文件 指向一个 块 设备 或者 指向 块 设备 的符号链接 则返回 true  指 向 其他类型的 文件 则返回 false
 当 路径不存在 或者是一个 破 损 的符号链接 时 也会 返回 false  其他错误 例如 权限 错误 被传播
ischardevice  如果路径指向 一个字符 设备 或 指向 字符 设备 的符号链接 则返回 true  指向 其他类型的 文件 则返回 false
 当 路径不存在 或者是一个 破 损 的符号链接 时 也会 返回 false  其他错误 例如 权限 错误 被传播
iterdir  当 路径指向 一个 目录 时 产生 该 路径 下 的 对象 的 路径 p  pathdocs  for  child  in  p
rst  posixpathdocsbuild  posixpathdocsstatic  posixpathdocsmakefile  子 条目 会 以 任意 顺序 生成 并且 不包括 特殊 条目
 和

 如果有 文件 在 迭代器 创建 之后 在 目录 中被移除 或 添加 是否 要 包括 该文件 对应的 路 径对象 并没有 规 定
lchmodmode  就像 path
chmod  但是 如果路径指向 符号链接 则 是 修改 符号链接 的 模式 而不是 修改 符号链接 的 目标
lstat  就 和 path
stat  一样 但是 如果路径指向 符号链接 则 是 返回 符号链接 而不是 目标 的 信息
mkdirmode 0 o 777 parentsfalse  existokfalse  新 建 给定 路径 的 目录
 如果给出 了 mode  它 将 与 当前进程 的 umask  值 合并 来 决定 文件 模式 和 访问 标志
 如果路径 已经 存在则 抛出 fileexistserror
 如果 parents  为 true  任何 找不到 的 父 目录 都会 伴 随着 此 路径 被创建 它们会 以 默认 权限 被创建 而 不 考虑 mode  设置 模 仿 posix  的 mkdir  p  命令
 如果 parents  为 false  默认 则 找不到 的 父 级 目录 会导致 filenotfounderror  被 抛出
 如果 existok  为 false  默认 则 在 目标 已存在 的情况下 抛出 fileexistserror
 如果 existok  为 true  则 fileexistserror  异常 将被忽略 和 posix  mkdir  p  命令行 为 相同 但是 只有在 最后一个 路径 组件 不 是 现 存 的 非 目录 文件 时才 生效
 在3
5 版更改 existok  形参 被加入
openmoder  buffering 1 encodingnone  errorsnone  newlinenone  打开 路径指向 的 文件 就像 内置的 open  函数 所 做 的 一样 p  pathsetup
owner  返回 拥有 此 文件 的 用户 名
 如果文件 的 uid  无法 在 系统 数据库 中找到 则 抛 出 keyerror
readbytes  以字节 对象 的 形式返回 路径指向 的 文件 的 二进制 内容 p  pathmybinaryfile  p
readbytes  bbinary  file  contents 3
5 新版功能
readtextencodingnone  errorsnone  以 字符串形式 返回 路径指向 的 文件 的 解码 后 文本 内容
 p  pathmytextfile  p
writetexttext  file  contents 18 p
readtext  text  file  contents  文件 先 被 打开 然后 关闭
 有 和 open  一样的 可选 形参
3
5 新版功能
path
readlink  返回 符号链接 所指向的 路径 即 os
readlink  的返回值 p  pathmylink  p
symlinktosetup
py  p
readlink  posixpathsetup
py 3
9 新版功能
path
renametarget  将 文件 或 目录 重 命名 为给定的 target  并 返回一个新的 指向 target  的 path  实例
 在 unix  上 如果 target  存 在 且 为 一个 文件 如果 用户 有 足够 权限 则 它将被 静默地 替换
 target  可以 是一个字符串 或者 另一个 路径对象 p  pathfoo  p
openw
writesome  text 9 target  pathbar  p
renametarget  posixpathbar  target
open
read  some  text  目标 路径 可能为 绝对 或 相对路径
 相对路径 将 被解释 为 相对于 当前 工作 目录 而 不 是 相对于 path  对象 的 目录
 在3
8 版更改 添加了 返回值 返回 新 的 path  实例
path
replacetarget  将 文件名 目录 重 命名 为给定的 target  并 返回一个新的 指向 target  的 path  实例
 如果 target  指向一个 现有 文件 或 目录 则 它将被 无 条件 地 替换
 目标 路径 可能为 绝对 或 相对路径
 相对路径 将 被解释 为 相对于 当前 工作 目录 而 不 是 相对于 path  对象 的 目录
 在3
8 版更改 添加了 返回值 返回 新 的 path  实例
path
resolvestrictfalse  将 路径 绝对 化 解析 任何 符号链接
 返回 新 的 路径对象 p  path  p  posixpath
 p
resolve  posixpathhomeantoinepathlib 
 组件 也 将 被 消除 只有 这 一种 方法 这 么 做 p  pathdocs
setup
py  p
resolve  posixpathhomeantoinepathlibsetup
py  如果 路径不存在 并且 strict  设 为 true  则 抛出 filenotfounderror 
 如果 strict  为 false  则 路径 将 被 尽可能 地 解析 并且 任何 剩余 部分 都会被 不 检查 是否 存 在 地 追 加
 如果在 解析 路径 上 发生 无限 循环 则 抛出 runtimeerror
3
6 新版功能 加入 strict  参数3
6 之前的 版本 相当于 strict  值 为 true  path
rglobpattern  这 就像 调用 path
glob  时 在 给定的 相对 pattern  前面 添加了 sortedpath
py  引发一个 审计事件 pathlib
rglob  附带参数 self  pattern
rmdir  移除 此 目录
 此 目录 必须为 空 的
samefileotherpath  返回 此 目录 是否 指向 与 可能是 字符串 或者 另一个 路径对象 的 otherpath  相同 的 文件
 语义 类似于 os
samefile  与 os
samestat 
 如果两 者 都 以 同一 原因 无法 访问 则 抛出 oserror
samefilespam  true 3
5 新版功能
symlinktotarget  targetisdirectoryfalse  将 此 路径 创建 为 指向 target  的符号链接
 在 windows  下 如果 链接 的 目 标 是一个 目录 则 targetisdirectory  必须为 true  默认为 false 
 在 posix  下 targetisdirectory  的 值 将被忽略
stsize 8 注解 参数 的顺序 link  target  和 os
symlink  是 相反 的
touchmode 0 o 666 existoktrue  将 给定的 路径 创建 为 文件
 如果给出 了 mode  它 将 与 当前进程 的 umask  值 合并 以 确定 文件 的 模式 和 访问 标志
 如果文件 已经 存在则 当 existok  为 true  则 函数 仍 会 成功 并且 将 它 的 修改 事件 更新 为当前 事件 否则 抛 出 fileexistserror
unlinkmissingokfalse  移除 此 文件 或 符号链接
 如果路径指向 目录 则 用 path
rmdir  代替
 如果 missingok  为假值 默认 则 如果 路径不存在 将会引发 filenotfounderror
 如果 missingok  为真值则 filenotfounderror  异常 将被忽略 和 posix  rm  f  命令 的 行为 相同
 在3
8 版更改 增加了 missingok  形参
linktotarget  创建一个 指向 名为 target  的 路径 的 硬 链接
3
8 新版功能
writebytesdata  将 文件 以 二进制模式 打开 写入 data  并 关闭 p  pathmybinaryfile  p
readbytes  bbinary  file  contents  一个 同名的 现 存 文件 将 被 覆盖
3
5 新版功能
writetextdata  encodingnone  errorsnone  将 文件 以 文本 模式打开 写入 data  并 关闭 p  pathmytextfile  p
readtext  text  file  contents  同名的 现有 文件 会 被 覆盖
 可选 形参 的含义 与 open  的 相同
3
5 新版功能
 对应的 os  模块 的工具
 以下是 一个映射 了 os  与 purepathpath  对 应 相同 的 函数 的 表
 注解 尽管 os
relpath  和 purepath
relativeto  拥有 相同 的 重 叠 的 用 例 但是 它们 语义 相 差 很大 不 能 认为 它们 等价
 os  和 os
path  pathlib  os
expanduser  和 path
unittestmock  mock  对象 库
3
3 新版功能
 源代码 libunittestmock
mock  是 一个用于 测试 的 python  库
 它允许 使用 mock  对象 替换 受 测试 系统 的部分 并 对 它们 如何 已经被 使用 进行 断言
mock  提供了一个 核心 类 mock  用 于 消除 了 在 整个 测试 套件 中 创建 大量 存 根 stub  的需求
 创建 后 就可以 断言 调用 了 哪些 方法 属性 及其 参数
 还可以 以 常规 方式 指定 返回值 并设置 所需的 属性
 此外 mock  提供 了用于 修 补 测试 范围内 模块 和 类 级别 属性 的 patch  装饰器 和 用于创建 独 特 对象 的 sentinel 
 阅读 quick  guide  中 的 案 例 了解 如何使用 mock  magicmock  和 patch 
mock  是 为 unittest  而 设计 且 简单 易 用
 模拟 基于 action  assertion  模式 而不是 许多 模拟 框架 所使用的 record  replay  模式
 在 python  的 早期 版本 要 单独 使用 unittest
mock  在 pypi  获取 mock 
 快速 上 手
mock  类
mock  是 一个可以 灵活的 替换 存 根 stubs  的 对象可以 测试 所有 代码
mock  是 可调用 的 在 访问 其 属性 时 创建一个新的 mock 1
 访问 相同 的 属性 只会 返回 相同 的 mock 
 mock  会 保存 调用 记录 可以通过 断言 获 悉 代码 的 调用
magicmock  是 mock  的子类 它 有 所有 预 创建 且 可 使用 的 魔 术 方法
 在 需要 模拟 不 可调用对象 时 可以使用 noncallablemock   和 noncallablemagicmockpatch  装饰器 便 于 mock  对象 临时 替换 特定 模块中的 类
 patch  默认 创建 magicmock 
 可以使用 patch  方法 的 newcallable  参数指定 mock  的替代 类
mockspecnone  sideeffectnone  returnvaluedefault  wrapsnone  namenone  specsetnone  unsafefalse  kwargs  创建一个新的 mock  对象
 通过 可选参数 指定 mock  对象 的 行为 spec  this  can  be  either  a  list  of  strings  or  an  existing  object  a  class  or  instance  that  acts  as  the  specification  for  the  mock  object
3
5 新版功能
assertcalled 3
6 新版功能
3
6 新版功能
3
5 新版功能
called  false  在3
6 版更改 added  two  keyword  only  argument  to  the  resetmock  function
 注解 returnvalue  and  sideeffect  are  keyword  only  argument
 在3
8 版更改 added  args  and  kwargs  properties
 注解 the  way  mockcalls  are  recorded  means  that  where  nested  calls  are  made  the  parameters  of  ancestor  calls  are  not  recorded  and  so  will  always  compare  equal  mock  magicmock  mock
 在3
4 版更改 added  signature  introspection  on  specced  and  autospecced  mock  objects
3
8 新版功能
calling
deleting  attributes
mock  names  and  the  name  attribute
attaching  mocks  as  attributes
the  patchers
patch
 注解 the  key  is  to  do  the  patching  in  the  right  namespace
 with  it  switched  on  you  can  write  passing  tests  against  apis  that  dont  actually  exist  注解 在3
5 版更改 if  you  are  patching  builtins  in  a  module  then  you  dont  need  to  pass  createtrue  it  will  be  added  by  default
 test  在3
8 版更改 patch  now  returns  an  asyncmock  if  the  target  isan  async  function
patchobject
patchdict
 在3
8 版更改 patch
dict  now  returns  the  patched  dictionary  when  used  as  a  context  manager
patchmultiple
patch  methods  start  and  stop
run  警告 if  you  use  this  technique  you  must  ensure  that  the  patching  is  undone  by  calling  stop
patch  builtins
testprefix
nesting  patch  decorators
where  to  patch
patching  descriptors  and  proxy  objects
magicmock  and  magic  method  support
mocking  magic  methods
 注解 if  you  use  the  spec  keyword  argument  to  create  a  mock  then  attempting  to  set  a  magic  method  that  isnt  in  the  spec  will  raise  an  attributeerror
the  full  list  of  supported  magic  methods  is  hash  sizeof  repr  and  str  dir  format  and  subclasses  round  floor  trunc  and  ceil  comparisons  lt  gt  le  ge  eq  and  ne  container  methods  getitem  setitem  delitem  contains  len  iter  reversed  and  missing  context  manager  enter  exit  aenter  and  aexit  unary  numeric  methods  neg  pos  and  invert  the  numeric  methods  including  right  hand  and  inplace  variants  add  sub  mul  matmul  div  truediv  floordiv  mod  divmod  lshift  rshift  and  xor  or  and  pow  numeric  conversion  methods  complex  int  float  and  index  descriptor  methods  get  set  and  delete  pickling  reduce  reduceex  getinitargs  getnewargs  getstate  and  setstate  file  system  path  representation  fspath  asynchronous  iteration  methods  aiter  and  anext  在3
8 版更改 added  support  for  os
 在3
8 版更改 added  support  for  aenter  aexitaiter  and  anext
magic  mock
0 bool  true  index 1 hash  default  hash  for  the  mock  str  default  str  for  the  mock  sizeof  default  sizeof  for  the  mock  例如 mock  magicmock  intmock 1 lenmock 0 listmock  object  in  mockfalsethe  two  equality  methods  eq  and  ne  are  special
helpers
sentinel
 在3
7 版更改 the  sentinel  attributes  now  preserve  their  identity  when  they  are  copied  or  pickled
default
call
createautospec
 在3
8 版更改 createautospec  now  returns  an  asyncmock  if  thetarget  is  an  async  function
any
filterdir
mockopen
 在3
4 版更改 added  readline  and  readlines  support
 the  mock  of  read  changed  to  consume  readdata  rather  than  returning  it  on  each  call
 在3
5 版更改 readdata  is  now  reset  on  each  call  to  the  mock
 在3
8 版更改 added  iter  to  implementation  so  that  iteration  such  as  in  for  loops  correctly  consumes  readdata
autospeccing
sealing  mocks
3
7 新版功能
imp  access  the  import  internals
py 3
4 版后已移除 the  imp  module  is  deprecated  in  favor  ofimportlib
3
4 版后已移除 use  importlib
magicnumber  instead
3
3 版后已移除 use  the  constants  defined  on  importlib
machinery  instead
3
3 版后已移除 use  importlib
findspec  instead  unless  python 3
3 compatibility  is  required  in  which  case  use  importlib
 for  example  usage  of  the  former  case  see  the  示例 section  of  the  importlib  documentation
3
3 版后已移除 if  previously  used  in  conjunction  with  imp
 see  the  示例 section  of  the  importlib  documentation  for  details  of  the  various  approaches
3
4 版后已移除 use  importlib
 与 python  中的所有 的 其 它 对象 一样 旧 的 对象 只有在 引用计数 为0 之后 才会 被 回收
 模块 命名空间中 的 名称 重新 指向 任何 新 的 或 更改 后 的 对象
 其他 旧 对象的引用 例如 那 个模块的 外部 名称 不会被 重新 绑定到 引用 的 新 对象 的 并且 如果有 需要 必须在 出现的 每个 命名空间中 进行 更新
 有一些 其他 注意 事项 当 一个 模块 被重新 加载 的时候 它 的字典 包含了 那 个模块的 全 区 变量 会 被 保留
 名称 的 重新 定义 会 覆盖 旧 的 定义 所 以 通常 来说 这 不 是 问题
 如果 一个 新 模块 没有 定义 在 旧版本 模块中定义的 名称 则 将 保留 旧版本 中 的 定义
 这 一 特性 可用于 作为 那 个模块的 优点 如果它 维护 一个 全局 表 或者 对象 的 缓存—— 使用 try  语句 就可以 测试 表 的 存 在 并且 跳过 它 的 初始化 如果 有 需要 的话 try  cache  except  nameerror  cache  it  is  legal  though  generally  not  very  useful  to  reload  builtin  or  dynamically  loaded  modules  except  for  sys  main  and  builtins
 如果一个 模块 创建一个 类的实例 重新 加载 定义 那 个类的 模块 不 影响 这 个 实 例 的 方法 定义——— 它们 继续 使用 旧 类 的 定义
 对 于 子类 也是 一样的
 在3
3 版更改 relies  on  both  name  and  loader  being  defined  on  the  module  being  reloaded  instead  of  just  name
3
4 版后已移除 use  importlib
3
2 新版功能
 在3
3 版更改 if  sys
cachetag  is  none  then  notimplementederror  is  raised
3
4 版后已移除 use  importlib
 在3
5 版更改 the  debugoverride  parameter  no  longer  creates  a 
 在3
3 版更改 raise  notimplementederror  when  sys
3
4 版后已移除 use  importlib
3
4 版后已移除 use  sys
cachetag  directly  starting  in  python 3
 在3
3 版更改 the  locking  scheme  has  changed  to  permodule  locks  for  the  most  part
 a  global  import  lock  is  kept  for  some  critical  tasks  such  as  initializing  the  permodule  locks
3
4 版后已移除
 在3
3 版更改 the  locking  scheme  has  changed  to  permodule  locks  for  the  most  part
 a  global  import  lock  is  kept  for  some  critical  tasks  such  as  initializing  the  permodule  locks
3
4 版后已移除
 在3
3 版更改 the  locking  scheme  has  changed  to  permodule  locks  for  the  most  part
 a  global  import  lock  is  kept  for  some  critical  tasks  such  as  initializing  the  permodule  locks
3
4 版后已移除
3
3 版后已移除
3
3 版后已移除
3
3 版后已移除
3
3 版后已移除
3
3 版后已移除
3
3 版后已移除
 在3
3 版更改 none  is  inserted  into  sys
pathimportercache  instead  of  an  instance  of  nullimporter
3
4 版后已移除 insert  none  into  sys
pathimportercache  instead
 示例
plistlib  生成 与 解析 apple  plist  文件
 示例
 生成一个 plist  pl  dict  astring  doodah  alist  a  b 1232
gmtime  with  openfilename  wb  as  fp  dumppl  fp  解析 一个 plist  with  openfilename  rb  as  fp  pl  loadfp  printplakey
xml  处理 模块
 源码 libxml  用于处理 xml  的 python  接口 分组 在 xml  包 中
 警告 xml  模块 对 于 错误 或 恶 意 构造 的 数据 是 不安全 的
 如果你需要 解析 不受 信 任 或 未 经 身 份 验证 的 数据 请参阅 xml  漏洞 和 defusedxml  包 部分
 值得 注意 的 是 xml  包 中 的 模块 要求 至少有 一个 sax  兼容的 xml  解析器 可 用
expat  解析器 包含在 python  中 因此 xml
expat  模块 将 始终 可 用
xml
dom  和 xml
sax  包 的 文档 是 dom  和 sax  接口 的 python  绑定 的 定义
xml  处理 子模块 包括 xml
elementtree  elementtree  api  一个简单 而 轻 量 级 的 xml  处理 器 xml
domdom  api  定义 xml
minidom  最小的 dom  实现 xml
pulldom  支持 构建 部分 dom  树 xml
saxsax 2 基类 和 便 利 函数 xml
expatexpat  解析器 绑定
xml  漏洞
xml  处理 模块 对 于 恶 意 构造 的 数据 是 不安全 的
 攻击 者 可能 滥 用 xml  功能 来执行 拒 绝 服务 攻击、 访问 本地 文件、 生成 与 其 它 计算机 的 网络 连接 或 绕 过 防 火 墙
 下 表 概述 了 已知 的 攻击 以及 各种 模块 是否 容易 受到 攻击
 种类 sax  etree  minidom  pulldom  xmlrpc  billion  laughs  易受攻击 易受攻击 易受攻击 易受攻击 易受攻击 quadratic  blowup  易受攻击 易受攻击 易受攻击 易受攻击 易受攻击 external  entity  expansion  安全4 安全1 安全2 安全4 安全3 dtd  retrieval  安全4 安全 安全 安全4 安全 decompression  bomb  安全 安全 安全 安全 易受攻击1
elementtree  不 会 扩展 外部 实体 并 在 实体 发生时 引发 parsererror
minidom  不 会 扩展 外部 实体 只是 简单地 返回 未 扩展 的 实体
 xmlrpclib  不 扩展 外部 实体 并 省略 它们
 从 python 3
1 开始 默认情况下 不再 处理 外部 通 用 实体
billion  laughs  exponential  entity  expansion  狂 笑 递归 实体 扩展 billion  laughs  攻击 也 称为 递归 实体 扩展 使用 多 级 嵌套 实体
 每 个 实体 多次 引用 另一个 实体 最终 实体 定义 包含一个 小 字符串
 指 数 级 扩展 导致 几 千 gb  的 文本 并 消耗 大量 内存 和 cpu  时间
quadratic  blowup  entity  expansion  二 次 爆 炸 实体 扩展 二 次 爆 炸 攻击 类似于 billion  laughs  攻击 它 也 滥 用 实体 扩展
 它 不 是 嵌 套 实体 而 是 一 遍 又 一 遍 地 重复 一个具有 几 千 个字符的 大 型 实体
 攻击 不 如 递归 情况 有效 但它 避免 触发 禁止 深度 嵌套 实体 的 解析器 对 策
external  entity  expansion  实体 声明 可以包含 的 不 仅仅 是 替换 文本
 它们 还可以 指向 外部 资源 或 本地 文 件
 xml  解析器 访问 资源 并 将 内容 嵌入到 xml  文档中
dtd  retrieval  python  的一些 xml  库 xml
pulldom  从 远程 或 本地 位置 检索 文档 类型 定义
 该 功能 与 外部 实体 扩展 问题 具有 相似 的含义
decompression  bomb  decompression  bombs  解压 炸 弹 又 名 zip  bomb  适用于 所有 可以 解析 压 缩 xml  流 例如 gzip  压缩 的 http  流 或 lzma  压缩 的 文件 的 xml  库
 对 于 攻击 者 来说 它可以 将 传输的 数据 量 减少 三个 量 级 或更多
pypi  上 defusedxml  的 文档 包含 有关 所有 已知 攻击 向 量 的更多信息 以及 示例 和 参考
defusedxml  包
defusedxml  是一个 纯 python  软件包 它 修改 了所有 标准库 xml  解析器 的子类 可 以防止 任何 潜在 的 恶 意 操作
 对 于 解析 不受 信 任 的 xml  数据 的 任何 服务器 代码 建议 使用 此 程序 包
 该 软件包 还提供了 有关 更多 xml  漏洞 如 xpath  注 入 的 示例 漏洞 和 扩展 文档
graphlib  functionality  to  operate  with  graphlike  structures
3
9 新版功能
exceptions
contextlib  为 with  语句 上下文 提供 的工具
 源代码 libcontextlib
py  此模块 为 涉及 with  语句 的 常见 任务 提供了 实 用 的工具
 更多信息请参 见 上下文管理器 类型 和 with  语句 上下文管理器
 工具
 例子 和 配 方
supporting  a  variable  number  of  context  managers
catching  exceptions  from  enter  methods
cleaning  up  in  an  enter  implementation
replacing  any  use  of  tryfinally  and  flag  variables
using  a  context  manager  as  a  function  decorator
 参见 pep 343 with  语句 python  with  语句 的规范 描述、 背景 和 示例
single  use  reusable  and  reentrant  context  managers
reentrant  context  managers
reusable  context  managers
cmath  关于 复数的 数学 函数
 这 一 模块 提供了一些 关于 复数的 数学 函数
 该模块 的 函数的参数 为整数、 浮点数 或 复数
 这些函数 的 参数 也可 为 一个 拥有 complex  或 float  方法 的 python  对象 这些方法 分别 用于将 对象转换为 复数 和 浮点数 这些函数 作用于 转换 后的结果
 注解 在具有 对 于 有 符号 零 的 硬 件 和 系统 级 支持 的平台上 涉及 支割线 的 函数 在 支割 线 的 两 侧 都 是 连续 的 零 的符号 可用来 区别 支割线 的 一 侧 和 另一 侧
 在 不支持 有 符号 零 的平台上 连续 性 的 规则 见 下文
 到 极 坐标 和 从 极 坐标 的 转换
 使用 矩 形 坐标 或 笛 卡 尔 坐标 在内部 存储 python  复数 z
 这 完全 取决于 它 的 实 部 z
real  和 虚部 z
 换句话说 z  z
imag 1 j  极 坐标 提供了 另一种 复数的 表示 方法
 在 极 坐标 中 一个 复数 z  由 模 量 r  和 相 位 角 phi  来 定义
 模 量 r  是 从 z  到 坐标 原 点 的 距离 而 相 位 角 phi  是 以 弧度 为单位 的 逆 时 针 的 从 正 x  轴 到 连接 原 点 和 z  的 线 段 间 夹 角 的 角度
 下面的 函数 可用于 原生 直 角 坐标 与 极 坐标 的 相互 转换
phasex  将 x  的 相 位 也 称为 x  的 参数 返回 为 一个浮点数
phasex  相当于 math
 结果 处于ππ 之间 以 及 这 个操作 的 分 支 切 断 处于 负 实 轴 上 从 上 方 连续
 在 支持 有 符号 零 的 系统 上 这 包 涵 大多数 当前的 常 用 系统 这意味着 结果 的符号 与 x
imag  的 符号 相同 即使 x
imag  的值是0 phasecomplex 1
141592653589793 注解 一个 复数 x  的 模 数 绝对值 可以通过 内置函数 abs  计算
 没有 单独 的 cmath  模块 函数用于 这 个操作
polarx  在 极 坐标 中 返回 x  的 表达 方式
 返回 一个 数 对 r  phir  是 x  的 模 数 phi  是 x  的 相 位 角
 polarx  相当于 absx  phasex
rectr  phi  通过 极 坐标 的 r  和 phi  返回 复数 x
 相当于 r  math
cosphi  math
 幂 函数 与 对 数 函数
expx  返回 e  的 x  次 方 e  是 自然 对 数 的 底 数
logx  base  返回给定 base  的 x  的 对 数
 如果没有给 定 base  返回 x  的 自然 对 数
 从0 到∞ 存在一 条 支割线 沿 负 实 轴 之 上 连续
log 10 x  返回 底 数 为10 的 x  的 对 数
 它 具有与 log  相同 的 支割线
sqrtx  返回 x  的 平方 根
 它 具有与 log  相同 的 支割线
 三 角 函数
acosx  返回 x  的 反 余 弦
 这里有 两 条 支割线 一条 沿着 实 轴 从1 向 右 延伸 到∞ 从 下面 连续 延伸
 另外 一条 沿着 实 轴 从1 向左 延伸 到∞ 从 上面 连续 延 伸
asinx  返回 x  的 反 正 弦
 它 与 acos  有相同的 支割线
atanx  返回 x  的 反 正 切
 它 具有 两 条 支割线 一条 沿着 虚 轴 从1 j  延伸 到∞ j  向 右 持续 延伸
 另一 条 是 沿着 虚 轴 从1 j  延伸 到∞ j  向左 持 续 延伸
cosx  返回 x  的 余 弦
sinx  返回 x  的 正 弦
tanx  返回 x  的 正 切
 双曲 函数
acoshx  返回 x  的 反 双曲 余 弦
 它 有 一条 支割线 沿着 实 轴 从1 到∞ 向左 延伸 从 上 方 持续 延伸
asinhx  返回 x  的 反 双曲 正 弦
 它 有两 条 支割线 一条 沿着 虚 轴 从1 j  向 右 持续 延伸 到∞ j
 另一 条 是 沿着 虚 轴 从1 j  向左 持续 延伸 到∞ j
atanhx  返回 x  的 反 双曲 正 切
 它 有两 条 支割线 一条 是 沿着 实 轴 从1 延 展 到∞ 从 下面 持续 延 展
 另一 条 是 沿着 实 轴 从1 延 展 到∞ 从 上面 持 续 延 展
coshx  返回 x  的 双曲 余 弦值
sinhx  返回 x  的 双曲 正 弦值
tanhx  返回 x  的 双曲 正 切 值
 分 类 函数
isfinitex  如果 x  的 实 部 和 虚部 都 是 有限 的 则返回 true  否则返回 false
3
2 新版功能
isinfx  如果 x  的 实 部 或者 虚部 是 无穷大 的 则返回 true  否则返回 false 
isnanx  如果 x  的 实 部 或者 虚部 是 nan  则返回 true  否则返回 false
0 若 a  和 b  的 值 比较 接近 则返回 true  否则返回 false
 根据 给定的 绝对 和 相对 容差 确定 两个值 是否 被认为 是 接近 的
 reltol  是 相对 容差—— 它 是 a  和 b  之间 允许 的最大 差 值 相对于 a  或 b  的 较大 绝对值
 例如要 设置5％ 的 容差 请 传递 reltol 0
05
 默认 容差 为1 e 09 确保 两个值 在 大 约9 位 十进制 数字 内 相同
 reltol  必须 大于 零
 abstol  是 最小 绝对 容差—— 对 于 接近 零 的 比较 很有用
 abstol  必须 至少 为零
 如果没有 错误 发生 结果将 是 absab  maxreltol  maxabsa  absb  abstol 
 ieee 754 特殊 值 nan  inf  和 inf  将根据 ieee  规则 处理
 具体 来说 nan  不 被认为 接近 任何其他 值 包括 nan 
 inf  和 inf  只 被认为 接近 自己
3
5 新版功能
 参见 pep 485—— 用 于 测试 近似 相等的 函数
 常 数
pi  数学 常 数π 作为一个 浮点数
e  数学 常 数 e  作为一个 浮点数
tau  数学 常 数τ 作为一个 浮点数
3
6 新版功能
inf  浮点 正 无穷大
 相当于 floatinf
3
6 新版功能
infj  具有 零 实 部 和 正 无穷 虚部 的 复数
 相当于 complex 0
3
6 新版功能
nan  浮点 非 数字 nan  值
 相当于 floatnan
3
6 新版功能
nanj  具有 零 实 部 和 nan  虚部 的 复数
 相当于 complex 0
3
6 新版功能
 请注意 函数 的 选择 与 模块 math  中的函数 选择 相似 但不 完全 相同
 拥 有两个 模块 的原因 是因为 有 些 用户 对 复数 不 感兴趣 甚至 根 本 不 知道 它们是 什么
 它们 宁 愿 math
sqrt 1 引发异常 也不 想 返回 一个 复数
 另 请注意 被 cmath  定义 的 函数 始终 会返回一个 复数 尽管 答 案 可以 表示为 一个 实 数 在这种情况下 复数的 虚 数 部分 为零
 关于 支割线 的 注释 它们是 沿着 给定 函数 无法 连续 的 曲 线
 它们是 许多 复 变 函数 的 必要 特征
 假设 您 需要使用 复 变 函数 进行 计算 您 将 会 了解 支割线 的概念
 请参阅 几乎所有 关于 复 变 函数 的 不太 基本的 书 来 获得 启 发
 对 于 如何 正确地 基于 数值 目 的 来 选择 支割线 的 相关信息 一个 良 好 的 参考 如 下 参见 kahan  w  branch  cuts  for  complex  elementary  functions  or  much  ado  about  nothings  sign  bit
 in  iserles  a
 eds
 the  state  of  the  art  in  numerical  analysis
 clarendon  press 1987 pp 165211
emailmessage  表示一 封 电子邮件 信息
sunau  读写 sun  au  文件
auread  对象
getsampwidth  返回 采样 字节 长度
getframerate  返回 采样 频 率
getnframes  返回 音频 总 帧 数
getparams  返回 一个 namedtuple  nchannels  sampwidth  framerate  nframes  comptype  compname  与 get  方法 的 输出 相同
rewind  设置 当前 文件 指针 位置
 以 下 两个方法 都 使用 指针 具体实现 由 其 底层 决定
getmarkers  返回 none
getmarkid  引发错误 异常
auwrite  对象
setnchannelsn  设置 声 道 数
 在3
4 版更改 added  support  for 24 bit  samples
writeframesrawdata  写入 音频 数据 但不 更新 nframes
 在3
4 版更改 现在可 接受 任意 byteslike  object
writeframesdata  写入 音频 数据并 更新 nframes
 在3
4 版更改 现在可 接受 任意 byteslike  object
python  标准库
python  语言 参考 描述了 python  语言 的 具体 语法 和 语义 这 份 库参考 则 介绍了 与 python  一 同 发行 的 标准库
 它还 描述了 通常 包含在 python  发行版 中 的一些 可选 组件
python  标准库 非常 庞 大 所提供的 组件 涉及 范围 十分 广泛 正 如以下 内容 目录 所 显示 的
 这 个 库 包含了 多个 内置模块 以 c  编写 python  程序员 必须 依 靠 它们 来实现 系统 级 功能 例如 文件 io  此外还 有 大量 以 python  编写 的 模块提供了 日 常 编程 中 许多 问题 的 标准 解决方案
 其 中 有 些模块 经过 专门 设计 通过将 特定 平台 功能 抽象 化 为 平台 中 立 的 api  来 鼓 励 和 加 强 python  程序 的 可移植 性
windows  版本 的 python  安装程序 通常 包含 整个 标准库 往往 还 包含 许多 额外 组件
 对 于 类 unix  操作系统 python  通常会 分 成 一系列 的 软件包 因此 可能需要 使用 操作系统 所提供的 包 管理 工具 来获取 部分 或 全部 可选 组件
 在这个 标准库 以 外还 存 在 成 千 上 万 并且不 断 增加 的其他 组件 从 单独的 程序、 模块、 软件包 直到 完整的 应用 开发 框架 访问 python  包 索引 即可 获取 这些 第三方 包
 概述 可用性 注释 内置函数 内置 常量 由 site  模块 添加 的常量 内置类型 逻辑值 检测 布尔运算 and  or  not  比较 数字类型 int  float  complex  迭代器 类型 序列类型 list  tuple  range  文本 序列类型 str  二进制 序列类型 bytes  bytearray  memoryview  集合 类型 set  frozenset  映射 类型 dict  上下文管理器 类型 generic  alias  type  其他 内置类型 特殊 属性 内置异常 基类 具体 异常 警告 异常 层次结构 文本 处理 服务 string  常见的 字符串 操作 re  正则表达式 操作 difflib  计算 差异的 辅助 工具 textwrap  文本 自动换行 与 填充 unicodedata  unicode  数据库 stringprep  因 特 网 字符串 预 备 readline  gnu  readline  接口 rlcompleter  gnu  readline  的 补全函数 二进制数据 服务 struct  将 字节串 解读为 打包的 二进制数据 codecs  编解码器 注册 和 相关 基类 数据类型 datetime  基本的 日期和时间 类型 zoneinfo  iana  时区 支持 calendar  日 历 相关 函数 collections  容器 数据类型 collections
abc  容器 的抽象基类 heapq  堆 队列 算法 bisect  数组 二 分 查找 算法 array  高效 的 数值 数组 weakref  弱引用 types  动态 类型 创建 和 内置类型 名称 copy  浅 层 shallow  和 深 层 deep  复制 操作 pprint  数据 美化 输出 reprlib  另一种 repr  实现 enum  对 枚举 的 支持 graphlib  functionality  to  operate  with  graphlike  structures  数字 和 数学 模块 numbers  数字 的抽象基类 math  数学 函数 cmath  关于 复数的 数学 函数 decimal  十进制 定 点 和 浮点 运算 fractions  分 数 random  生成 伪随机 数 statistics  数学 统计 函数 函数式编程 模块 itertools  为 高效 循环 而 创建 迭代器 的 函数 functools  高阶 函数 和 可调用对象 上 的 操作 operator  标准 运算符 替代 函数 文件和目录 访问 pathlib  面向对象 的 文件 系统路径 os
path  常 用 路径 操作 fileinput  迭代 来自 多个 输入 流 的 行 stat  解析 stat  结果 filecmp  文件 及 目录 的 比较 tempfile  生成 临时 文件和目录 glob  unix  风格 路径名 模式 扩展 fnmatch  unix  文件名 模式 匹配 linecache  随机 读写 文本 行 shutil  高阶 文件 操作 数据 持久化 pickle  python  对象 序列化 copyreg  注册 配合 pickle  模块 使用 的 函数 shelve  python  对象 持久化 marshal  内部 python  对象 序列化 dbm  unix  数据库 接口 sqlite 3 sqlite  数据库 dbapi 2
0 接口 模块 数据 压缩 和 存档 zlib  与 gzip  兼容的 压缩 gzip  对 gzip  格式 的 支持 bz 2 对 bzip 2 压缩 算法的 支持 lzma  用 lzma  算法 压缩 zipfile  使用 zip  存档 tarfile  读写 tar  归档 文件 文件格式 csv  csv  文件 读写 configparser  配置文件 解析器 netrc  netrc  文件 处理 xdrlib  编码与解码 xdr  数据 plistlib  生成 与 解析 apple 
plist  文件 加密 服务 hashlib  安全 哈希 与 消息 摘要 hmac  基于 密钥 的 消息 验证 secrets  生成 安全 随机 数字 用 于 管理 密码 通 用 操作系统 服务 os  多种 操作系统 接口 io  处理 流 的 核心 工具 time  时间 的 访问 和 转换 argparse  命令行选项、 参数 和 子 命令 解析器 getopt  c  风格的 命令行选项 解析器 logging  python  的日志记录 工具 logging
config  日志记录 配置 logging
handlers  日志 处理程序 getpass  便 携 式 密码 输入 工具 curses  终端 字符 单元 显示 的 处理 curses
textpad  用 于 curses  程序 的 文本 输入 控件 curses
ascii  用 于 ascii  字符 的工具 curses
panel  curses  的 面板 栈 扩展 platform  获取 底层 平台 的 标识 数据 errno  标准 errno  系统 符号 ctypes  python  的 外部函数 库 并 发 执行 threading  基于 线程 的 并 行 multiprocessing  基于 进程 的 并 行 multiprocessing
sharedmemory  可 从 进程 直接访问 的 共享内存 concurrent  包 concurrent
futures  启动 并 行 任务 subprocess  子进程 管理 sched  事件 调度 器 queue  一个 同步 的 队列 类 thread  底层 多线程 api  contextvars  上下文变量 上下文变量 手动 上下文管理 asyncio  支持 网络 和 进程 间 通信 asyncio  异步 io  socket  底层 网络 接口 ssl  套接字 对象 的 tlsssl  包装器 select  等待 io  完成 selectors  高级 io  复 用 库 asyncore  异步 socket  处理器 asynchat  异步 socket  指令 响应 处理器 signal  设置 异步 事件 处理程序 mmap  内存 映射 文件 支持 互联网 数据 处理 email  电子邮件 与 mime  处理 包 json  json  编码和解码 器 mailcap  mailcap  文件 处理 mailbox  manipulate  mailboxes  in  various  formats  mimetypes  map  filenames  to  mime  types  base 64 base 16 base 32 base 64 base 85 数据 编码 binhex  对 binhex 4 文件进行 编码和解码 binascii  二进制 和 ascii  码 互 转 quopri  编码与解码 经过 mime  转 码 的 可打印 数据 uu  对 uuencode  文件进行 编码与解码 结构化 标记 处理 工具 html  超 文本 标记 语言 支持 html
parser  简单的 html  和 xhtml  解析器 html
entities  html  一般 实体 的 定义 xml  处理 模块 xml
elementtree  elementtree  xml  api  xml
saxutils  sax  工具集 xml
expat  fast  xml  parsing  using  expat  互联网 协议 和 支持 webbrowser  方便的 web  浏览器 控制器 cgi  common  gateway  interface  support  cgitb  用 于 cgi  脚本 的 回溯 管理器 wsgiref  wsgi  utilities  and  reference  implementation  urllib  url  处理 模块 urllib
request  用 于 打开 url  的 可扩展 库 urllib
response  urllib  使用 的 response  类 urllib
error  urllib
request  引发的异常 类 urllib
robotparser  robots
txt  语法分析程序 http  http  模块 http
client  http  协议 客户端 ftplib  ftp  协议 客户端 poplib  pop 3 protocol  client  imaplib  imap 4 protocol  client  nntplib  nntp  protocol  client  smtplib  smtp  协议 客户端 smtpd  smtp  服务器 telnetlib  telnet  client  uuid  uuid  objects  according  to  rfc 4122 socketserver  a  framework  for  network  servers  http
server  http  服务器 http
cookies  http  状态 管理 http
cookiejar —— http  客户端 的 cookie  处理 xmlrpc  xmlrpc  服务 端 与 客户端 模块 xmlrpc
server  basic  xmlrpc  servers  ipaddress  ipv 4 ipv 6 操作 库 多 媒 体 服务 audioop  处理 原始 音频 数据 aifc  读写 aiff  和 aifc  文件 sunau  读写 sun  au  文件 wave  读写 wav  格式 文件 chunk  读取 iff  分块 数据 colorsys  颜色 系统 间 的 转换 imghdr  推 测 图像 类型 sndhdr  推 测 声 音 文件 的 类型 ossaudiodev  access  to  osscompatible  audio  devices  国际化 gettext  多 语 种 国际化 服务 locale  国际化 服务 程序 框架 turtle  海龟 绘图 cmd  支持 面向 行 的 命令 解释器 shlex  simple  lexical  analysis  tk  图形 用户界面 gui  tkinter  tcltk  的 python  接口 tkinter
colorchooser  颜色 选择 对话框 tkinter
font  tkinter  字 体 封装 tkinter  对话框 tkinter
messagebox  tkinter  消息 提示 tkinter
scrolledtext  滚动 文 字 控件 tkinter
dnd  拖 放 操作 支持 tkinter
ttk  tk  主题 部 件 tkinter
tix  extension  widgets  for  tk  idle  其他 图形 用户界面 gui  包 开发 工具 typing  类型 标注 支持 pydoc  文档 生成器 和 在 线 帮助 系统 python  development  mode  effects  of  the  python  development  mode  resourcewarning  example  bad  file  descriptor  error  example  doctest  测试 交互 性 的 python  示例 unittest  单元 测试 框架 unittest
mock  mock  对象 库 unittest
mock  上 手 指南2 to 3 自动将 python 2 代码 转 为 python 3 代码 test  python  回 归 测试 包 test
bytecodehelper  support  tools  for  testing  correct  bytecode  generation  调试 和 分析 审计事件 表 bdb  debugger  framework  faulthandler  dump  the  python  traceback  pdb  python  的 调试器 python  profilers  分析器 timeit  测量 小 代码 片段 的 执行 时间 trace  跟踪 python  语句 执行 tracemalloc  跟踪 内存分配 软件 打包 和 分发 distutils  构建和 安装 python  模块 ensurepip  bootstrapping  the  pip  installer  venv  创建虚拟环境 zipapp  manage  executable  python  zip  archives  python  运行时 服务 sys  系统 相关的 参数 和 函数 sysconfig  provide  access  to  pythons  configuration  information  builtins  内建 对象 main  顶 层 脚本 环境 warnings  warning  control  dataclasses  数据类 contextlib  为 with  语句 上下文 提供 的工具 abc  抽象基类 atexit  退出 处理器 traceback  打印 或 检索 堆 栈回溯 future  future  语句 定义 gc  垃圾回收 器 接口 inspect  检查 对象 site —— 指定 域 的 配置 钩子 自定义 python  解释器 code  解释器 基类 codeop  编译 python  代码 导入模块 zipimport  从 zip  存档 中 导入模块 pkgutil  包 扩展 工具 modulefinder  查找 脚本 使用 的 模块 runpy  locating  and  executing  python  modules  importlib  import  的 实现 using  importlib
metadata  python  语言 服务 parser  访问 python  解析树 ast  抽象 语法 树 symtable  access  to  the  compilers  symbol  tables  symbol  与 python  解析树 一起使用 的常量 token  与 python  解析树 一起使用 的常量 keyword  检 验 python  关键字 tokenize  对 python  代码 使用 的 标记 解析器 tabnanny  模 糊 缩进 检测 pyclbr  python  模块 浏览器 支持 pycompile  编译 python  源文件 compileall  bytecompile  python  libraries  dis  python  字节码 反汇编 器 pickletools  pickle  开发者 工具集 杂项 服务 formatter  通 用 格式化 输出 windows  系统 相关 模块 msilib  read  and  write  microsoft  installer  files  msvcrt  来自 ms  vc  运行时 的有用 例 程 winreg  windows  注册表 访问 winsound  soundplaying  interface  for  windows  unix  专 有 服务 posix  最常见的 posix  系统调用 pwd  用户 密码 数据库 spwd  the  shadow  password  database  grp  组 数据库 crypt  function  to  check  unix  passwords  termios  posix  风格的 tty  控制 tty  终端 控制 功能 pty  伪 终端 工具 fcntl  the  fcntl  and  ioctl  system  calls  pipes  终端 管道 接口 resource  resource  usage  information  nis  sun  的 nis  黄 页 接口 unix  syslog  库 例 程 被 取 代 的 模块 optparse  解析器 的 命令行选项 imp  access  the  import  internals  未 创建 文档 的 模块 平台 特定 模块
emailpolicy  policy  objects
3
3 新版功能
3
5 新版功能 the  manglefrom  parameter
3
6 新版功能
 in  addition  to  the  settable  attributes  listed  above  that  apply  to  all  policies  this  policy  adds  the  following  additional  attributes 3
6 新版功能1 utf 8 if  false  follow  rfc 5322 supporting  nonascii  characters  in  headers  by  encoding  them  as  encoded  words
3
4 新版功能
 脚注1 originally  added  in 3
logginghandlers  日志 处理程序
 源代码 liblogginghandlers
pyimportant  此 页面 仅 包含 参考 信息
 有关 教程 请参阅 基础 教程 进 阶 教程 日志记录 操作 手册 这 个 包 提供了以 下 有用的 处理程序
 请注意 有 三个 处理程序 类 streamhandler  filehandler  和 nullhandler  实际上是 在 logging  模块 本身 定义 的 但 其 文档 与其他 处理程序 一 同 记录 在 此
streamhandler
streamhandler  类位于 核心 logging  包 它 可 将日志记录 输出 发送到 数据流 例如 sys
stderr  或 任何 文件类对象 或者 更 精确 地说 任何 支持 write  和 flush  方法的对象
streamhandlerstreamnone  返回一个新的 streamhandler  类
 如果指定了 stream  则 实例 将 用 它 作为 日志记录 输出 在其他情况下 将 使用 sys
stderr
 emitrecord  如果指定了 一个 格式化 器 它会被 用来 格式化 记录
 随后 记录 会 被写入 到 terminator  之后的 流 中
 如果存在 异常 信息 则会使用 traceback
printexception  来 格式化 并 添加到 流 中
 flush  通过调用 流 的 flush  方法来 刷新 它
 请注意 close  方法 是 继 承自 handler  的 所 以 没有 输出 因此 有 时 可能需要 显式地 调用 flush
 setstreamstream  将 实例 的 流 设 为 指定 值如果 两者 不 一致 的话
 旧 的 流 会 在 设置 新 的 流 之前被 刷新
 参数 stream  处理程序 应当使用 的 流
 返回 旧 的 流 如果 流 已 被改变 的话 如果未 被改变 则 为 none
3
7 新版功能
 terminator  当 将 已 格式化 的 记录 写入到 流 时 被用作 终止 符的字符串
 默认值为 n
 如果你 不希望 以 换行符 终止 你可以 将 处理程序 类实例 的 terminator  属性 设 为 空字符串
 在 较 早 的版本中 终止 符 被 硬 编码 为 n
3
2 新版功能
filehandler
filehandler  类位于 核心 logging  包 它 可 将日志记录 输出 到 磁盘 文件 中
 它 从 streamhandler  继承 了 输出 功能
filehandlerfilename  modea  encodingnone  delayfalse  errorsnone  返回 一个 filehandler  类的新实例
 将 打开 指定 的 文件 并将其 用 作 日志 记录 流
 如果未指定 mode  则会使用 a
 如果 encoding  不 为 none  则 会将其 用 作 打开文件 的 编码格式
 如果 delay  为真值则 文 件 打开 会 被 推 迟 至 第一次 调用 emit  时
 默认情况下 文件 会 无限 增 长
 如果指定了 errors  它会被 用于确定 编码格式 错误 的 处理 方式
 在3
6 版更改 除了 字符串 值 也 接受 path  对象作为 filename  参数
 在3
9 版更改 增加了 errors  形参
 close  关闭 文件
 emitrecord  将 记录输出 到 文件
nullhandler
3
1 新版功能
nullhandler  类位于 核心 logging  包 它 不 执行任何 格式化 或 输出
 它 实际上是 一个 供 库 开发者 使用 的‘ 无 操作’ 处理程序
nullhandler  返回 一个 nullhandler  类的新实例
 emitrecord  此方法 不 执行任何 操作
 handlerecord  此方法 不 执行任何 操作
 createlock  此方法会 对 锁 返回 none  因为 没有 下层 io  的 访问 需要 被 序列化
 请参阅 配置 库 的日志记录 了解有关 如何使用 nullhandler  的更多信息
watchedfilehandler
watchedfilehandler  类位于 logging
handlers  模块 这 个 filehandler  用 于 监视 它 所 写入 日志记录 的 文件
 如果文件 发生 变化 它会被 关闭 并 使用 文件名 重新 打开
 发生 文件 更改 可能 是由于 使用了 执行 文件 轮 换 的 程序 例如 newsyslog  和 logrotate
 这 个处理程序 在 unixlinux  下 使用 它 会 监视 文件 来 查看 自 上 次 发出 数据 后 是否有 更改
 如果文件 的 设备 或 inode  发生 变化 就 认为 已被 更改
 如果文件 被 更改 则 会 关闭 旧 文件 流 并 再 打开文件 以 获得 新 文件 流
 这 个处理程序 不 适合 在 windows  下 使用 因为在 windows  下 打开 的 日志 文件 无法被 移动 或 改 名—— 日志记录 会 使用 排 他 的 锁 来 打开文件—— 因此 这样的 处理程序 是没有 必要的
 此外 stino  在 windows  下 不受支持 stat  将总是 为 该值 返回 零
watchedfilehandlerfilename  modea  encodingnone  delayfalse  errorsnone  返回 一个 watchedfilehandler  类的新实例
 将 打开 指定 的 文件 并将其 用 作 日志记录 流
 如果未指定 mode  则会使用 a
 如果 encoding  不 为 none  则 会将其 用 作 打开文件 的 编码格式
 如果 delay  为真值 则 文件 打开 会 被 推 迟 至 第一次 调用 emit  时
 默认情况下 文件 会 无限 增 长
 如 果提供了 errors  它会被 用于确定 编码格式 错误 的 处理 方式
 在3
6 版更改 除了 字符串 值 也 接受 path  对象作为 filename  参数
 在3
9 版更改 增加了 errors  形参
 reopenifneeded  检查 文件 是否 已 更改
 如果 已 更改 则 会 刷新 并 关闭 现有 流 然后 重新 打 开文件 这通常 是 将 记录输出 到 文件 的 先 导 操作
3
6 新版功能
 emitrecord  将 记录输出 到 文件 但 如果文件 已 更改 则 会先 调用 reopenifneeded  来 重新 打开 它
baserotatinghandler
rotatingfilehandler
timedrotatingfilehandler
sockethandler
sockethandler  类位于 logging
handlers  模块 它 会 将日志记录 输出 发送到 网络 套接字
 基类 所使用的 是 tcp  套接字
sockethandlerhost  port  返回 一个 sockethandler  类的新实例 该实例 旨在 与 使用 host  与 port  给定 地址的 远程 主机 进行 通信
 在3
4 版更改 如果 port  指定 为 none  会 使用 host  中的值 来创 建一个 unix  域 套接字—— 在其他情况下 则 会创建一个 tcp  套接字
 close  关闭 套接字
 emit  对 记录 的 属性 字典 执行 封存 并 以 二进制 格式 将 其 写入 套接字
 如果 套接 字 存 在 错误 则 静默地 丢弃 数据 包
 如果 连接 在 此 之前 丢失 则 重新 建 立 连接
 要 在 接收 端 将 记录 解封 并 输出 到 logrecord  请使用 makelogrecord  函数
 handleerror  处理 在 emit  期间发生 的 错误
 最 可能 的原因 是 连接 丢失
 关闭 套 接字 以便 我们 能 在 下 次 事件 时 重新 尝试
 makesocket  这是一个 工厂 方法 它允许 子 类定义 它们 想要 的 套接字 的 准确 类型
 默 认实现 会创建一个 tcp  套接字 socket
 makepicklerecord  将 记录 的 属性 字典 封存 为 带有 长度 前缀 的 二进制 格式 并将其 返回 以 准备 通过 套接字 进行 传输
 此操作 在 细节 上 相当于 data  pickle
packl  lendata  return  datalen  data  请注意 封存 操作 不 是 绝对 安全 的
 如果你 关 心 安全 问题 你可能 会 想要 重载此方法 以 实现 更 安全 的机制
 例如 你可以使用 hmac  对 封存 对象 进行 签名 然后 在 接收 端 验证 它们 或者 你也可以 在 接收 端 禁用 全局 对象 的 解封 操作
 sendpacket  将 封存 后 的 字节串 packet  发送到 套接字
 所 发送 字节串 的 格式 与 makepickle  文档中 的描述 一致
 此 函数 允许 部分 发送 这可能 会 在 网络 繁 忙 时发生
 createsocket  尝试 创建一个 套接字 失败时 将 使用 指 数 化 回退 算法 处理
 在 失败 初 次 发生时 处理程序 将 丢弃 它 正 尝试 发送 的 消息
 当 后续 消息 交 由 同一 实 例 处理 时 它 将不会 尝试 连接 直到 经过 一段 时间 以 后
 默认 形参 设置为 初始 延迟 一 秒 如果在 延迟 之后 连接 仍然 无法 建立 处理程序 将 每次 把 延 迟 翻 倍 直至 达到30 秒 的最大 值
 此行为 由 下列 处理程序 属性 控制 retrystart  初始 延迟 默认为1
0 秒
 retryfactor  倍 数默认为2
 retrymax  最大 延迟 默认为30
0 秒
 这意味着 如果 远程 监听 器 在 处理程序 被使用 之后 启动 你可能 会 丢失 消息 因为 处理程序 在 延迟 结束 之前 甚至 不 会 尝试 连接 而 在 延迟 期间 静 默地 丢弃 消息
datagramhandler
datagramhandler  类位于 logging
handlers  模块 它 继承自 sockethandler  支持 通过 udp  套接字 发送 日志记录 消息
datagramhandlerhost  port  返回 一个 datagramhandler  类的新实例 该实例 旨在 与 使用 host  与 port  给定 地址的 远程 主机 进行 通信
 在3
4 版更改 如果 port  指定 为 none  会 使用 host  中的值 来创 建一个 unix  域 套接字—— 在其他情况下 则 会创建一个 udp  套接字
 emit  对 记录 的 属性 字典 执行 封存 并 以 二进制 格式 将 其 写入 套接字
 如果 套接 字 存 在 错误 则 静默地 丢弃 数据 包
 要 在 接收 端 将 记录 解封 并 输出 到 logrecord  请使用 makelogrecord  函数
 makesocket  sockethandler  的工厂 方法 会 在 此 被 重载 以 创建一个 udp  套接字 socket
 sends  将 封存 后 的 字节串 发送到 套接字
 所 发送 字节串 的 格式 与 sockethandler
makepickle  文档中 的描述 一致
sysloghandler
sysloghandler  类位于 logging
handlers  模块 它 支持 将日志记录 消息发送 到 远程 或 本地 unix  syslog
sockdgram  返回 一个 sysloghandler  类的新实例 用来 与 通过 address  以 host  port  元组 形式 给出 地址的 远程 unix  机器 进行 通 讯
 如果未指定 address  则 使用 localhost 514
 该 地址 会 被用于 打开 套接字
 提供 host  port  元组 的一种 替代 方式是 提供 字符串形式 的地址 例如 devlog
 在这种情况下 会 使用 unix  域 套接字 将 消息发送 到 syslog 
 如果未指定 facility  则 使用 loguser
 打开 的 套接字 类型 取决 于 socktype  参数 该参数 的 默认值为 socket
sockdgram  即 打开一个 udp  套接字
 要 打开一个 tcp  套接字 用来 配合 较 新 的 syslog  守护 程序 例如 rsyslog  使用 请 指定 值 为 socket
 请注意 如果你 的 服务器 不是在 udp  端口514 上 进行 侦 听 则 sysloghandler  可能无法 正常 工作
 在这种情况下 请 检查 你 应当为 域 套 接字 所使用的 地址—— 它 依赖于 具体 的 系统
 例如 在 linux  上 通常 为 devlog  而 在 osx  上 则 为 varrunsyslog
 你需要 检查 你 的 系统 平台 并 使用 适当的 地址 如果你 的 应用程序 需要 在多个 平台上 运行 则 可能需 要 在运行时 进行 这样的 检查
 在 windows  上 你 大 概 必须 要使用 udp  选 项
 在3
2 版更改 添加了 socktype
 close  关闭 连接 远程 主机 的 套接字
 emitrecord  记录 会 被 格式化 然后 发送到 syslog  服务器
 如果存在 异常 信息 则 它 不 会 被 发送到 服务器
 在3
1 版更改 参见 bpo 12168
 在 较 早 的版本中 发送 至 syslog  守护 程序 的 消息 总是 以 一个 nul  字节 结束 因为 守护 程序 的 早期 版本 期望 接收 一个 以 nul  结束 的 消息—— 即使 它 不包含 于 对应的 规范 说 明 rfc 5424
 这些 守护 程序 的 较 新 版本 不再 期望 接收 nul  字节 如果其 存在则 会将其 去除 而 最新的 守护 程序 更 紧 密 地 遵循 rfc 5424 会 将 nul  字节 作为 消息 的一部分 传递 出 去
 为 了 在 面 对 所有这些 不同 守护 程序 行为 时 能够 更 方便地 处理 syslog  消息 通过使用 类 层级 属 性 appendnul  添加 nul  字节 的 操作 已 被作为 可 配置 项
 该 属性 默 认为 true  保留 现有 行为 但 可 在 sysloghandler  实例 上 设 为 false  以便 让 实例 不 会 添加 nul  结束 符
 在3
3 版更改 参见 bpo 12419
 在 较 早 的 版本 中没有 ident  或 tag  前缀 工具 可以用来 标识 消息 的 来源
 现 在 则 可以使用 一个 类 层 级 属性来 设置 它 该 属性 默认为 表示 保留 现有 行为 但 可 在 sysloghandler  实例 上 重载 以便 让 实例 不 会 为 所 处理 的 每条 消息 添加 标 识
 请注意 所提供的 标识 必须为 文本 而非 字节串 并且 它会被 原 封 不 动 地 添加到 消息 中
 encodepriorityfacility  priority  将 功能 和 优先级 编码 为 一个整数
 你可以 传入 字符串 或者 整数—— 如果 传入的 是 字符串 则会使用 内部 的 映射 字典 将其转换为 整数
 符号 log  的 值 在 sysloghandler  中定义 并且 是 syssyslog
h  头文件 中 所定义 值 的 镜 像
 优先级 名称 字符串 符号 值 alert  logalert  crit  或 critical  logcrit  debug  logdebug  emerg  或 panic  logemerg  err  或 error  logerr  info  loginfo  notice  lognotice  warn  或 warning  logwarning  设备 名称 字符串 符号 值 auth  logauth  authpriv  logauthpriv  cron  logcron  daemon  logdaemon  ftp  logftp  kern  logkern  lpr  loglpr  mail  logmail  news  lognews  syslog  logsyslog  user  loguser  uucp  loguucp  local 0 loglocal 0 local 1 loglocal 1 local 2 loglocal 2 local 3 loglocal 3 local 4 loglocal 4 local 5 loglocal 5 local 6 loglocal 6 local 7 loglocal 7 mapprioritylevelname  将日志记录 级别 名称映射 到 syslog  优先级 名称
 如果你 使用自定义 级 别 或者如果 默认 算法 不 适合 你 的 需要 你 可能需要 重载此方法
 默认 算法 将 debug  info  warning  error  和 critical  映射到 等价 的 syslog  名称 并 将 所有其他 级别 名称映射 到 warning
nteventloghandler
nteventloghandler  类位于 logging
handlers  模块 它 支持 将日志记录 消息发送 到 本地 windows  nt  windows 2000 或 windows  xp  事件 日志
 在 你 使用 它 之前 你需要 安装 mark  hammond  的 python  win 32 扩展
nteventloghandlerappname  dllnamenone  logtypeapplication  返回 一个 nteventloghandler  类的新实例
 appname  用来 定义 出现在 事件 日志 中 的应用 名称
 将 使用 此 名称 创建 适当的 注册表 条目
 dllname  应当 给出 要 包含在 日志 中 的 消息 定义 的
dll  或
exe  的完整 限定 路径 名称 如 未指定 则会使用 win 32 service
pyd —— 此 文件 随 win 32 扩展 安装 且 包含 一些 基本的 消息 定义 占位 符
 请注意 使用这些 占位 符 将 使 你 的 事件日 志 变得 很大 因为 整个 消息 源 都会被 放入 日志
 如果你 希望 有 较 小 的 日志 你必须 自 行 传入 包含 你想要 在 事件 日志 中使用的 消息 定义 的
dll  或
exe  名称
 logtype  为 application  system  或 security  之一 且 默认值为 application
 close  这 时 你 就可以 从 注册表 中移除 作为 事件 日志 条目 来源 的应用 名称
 但 是 如果你 这样做 你 将 无法 如 你所 预期的 那样 在 事件 日志 查看 器 中 看到 这些 事件—— 它必须 能 访问 注册表 来获取
dll  名称
 当前 版本 并不会 这样做
 emitrecord  确定 消息 id  事件 类别 和 事件 类型 然后 将 消息 记录 到 nt  事件 日志 中
 geteventcategoryrecord  返回 记录 的 事件 类别
 如果你 希望 指定 你自己的 类别 就 要 重载此方法
 此 版本 将 返回0
 geteventtyperecord  返回 记录 的 事件 类型
 如果你 希望 指定 你自己的 类型 就 要 重载此方法
 此 版本 将 使用 处理程序 的 typemap  属性 来执行 映射 该 属性 在 init  被设置为 一个字典 其中包含 debug  info  warning  error  和 critical  的 映射
 如果你使用 你自己的 级别 你 将 需要 重载此方法 或者 在 处理程序 的 typemap  属性 中 放置 一个 合 适 的字典
 getmessageidrecord  返回 记录 的 消息 id
 如果你使用 你自己的 消息 你可以通过 将 msg  传给 日志记录器 作为 id  而非 格式字符串 实现 此功能
 然后 你可以在 这里 使用 字典 查找 来获取 消息 id
 此 版本 将 返回1 是 win 32 service
pyd  中 的基本 消息 id
smtphandler
smtphandler  类位于 logging
handlers  模块 它 支持 将日志记录 消息 通过 smtp  发送到 一个 电子邮件 地址
0 返回 一个 smtphandler  类的新实例
 该实例 使用 电子邮件 的 发 件 人、 收 件 人 地址 和 主题 行 进行 初始化
 toaddrs  应当为 字符串列表
 要 指定 一 个 非 标准 smtp  端口 请使用 host  port  元组 格式 作为 mailhost  参 数
 如果你使用 一个字符串 则会使用 标准 smtp  端口
 如果你 的 smtp  服务器 要求 验证 你可以 指定一个 username  password  元组 作为 credentials  参数
 要 指定 使用 安全 协议 tls  请 传入一个 元组 作为 secure  参数
 这 将 仅 在 提供了 验证 凭据 时 才能 被使用
 元组 应当 或 是 一个空 元组或 是一个包含 密钥 文件名 的 单 值 元组或 是一个包含 密钥 文件 和 证 书 文件 的2 值 元组
 此 元组 会 被传给 smtplib
starttls  方法
 可以使用 timeout  参数为 与 smtp  服务器 的 通信 指定 超时 限制
3
3 新版功能 增加了 timeout  参数
 emitrecord  对 记录 执行 格式化 并将其 发送到 指定 的地址
 getsubjectrecord  如果你想要 指定一个 基于 记录 的 主题 行 请 重载此方法
memoryhandler
memoryhandler  类位于 logging
handlers  模块 它 支持 在内存中 缓冲 日志记录 并 定 期 将 其 刷新 到 target  处理程序 中
 刷新 会 在 缓冲区 满 的时候 或 是 在 遇到 特定 或更高 严重 程度 事件 的时候 发生
memoryhandler  是 更 通用的 bufferinghandler  的子类 后者 属于 抽象 类
 它 会 在内存中 缓冲 日志记录
 当 每条 记录 被添加到 缓冲区 时 会 通过调用 shouldflush  来 检查 缓冲区 是否 应当 刷新
 如果 应当 刷新 则 要使用 flush  来执行 刷新
bufferinghandlercapacity  使用 指定 容 量 的 缓冲区 初始化 处理程序
 这里 capacity  是 指 缓冲 的 日 志记录 数量
 emitrecord  将 记录 添加到 缓冲区
 如果 shouldflush  返回真值 则 会 调用 flush  来处理 缓冲区
 flush  你可以 重载此方法 来实现 自定义 的 刷新 行为
 此 版本 只是 将 缓冲区 清空
 shouldflushrecord  如果 缓冲区 容 量 已 满 则返回 true
 可以 重载此方法 以 实现 自定义 的 刷 新 策略
memoryhandlercapacity  flushlevelerror  targetnone  flushonclosetrue  返回 一个 memoryhandler  类的新实例
 该实例 使用 capacity  指定 的 缓冲区大小 要 缓冲 的 记录 数量 来 初始化
 如果 flushlevel  未指定 则 使用 error
 如果未指定 target  则需要 在 此 处理程序 执行任何 实 际 操作 之前 使用 settarget  来 设置 目标
 如果 flushonclose  指定 为 false  则 当 处理程序 被关闭 时 不 会 刷新 缓冲区
 如果未指定 或 指 定 为 true  则 当 处理程序 被关闭 时 将 会发生 之前的 缓冲区 刷新 行为
 在3
6 版更改 增加了 flushonclose  形参
 close  调用 flush  设置 目标 为 none  并 清空 缓冲区
 flush  对 于 memoryhandler  刷新 是 指 将 缓冲 的 记录 发送到 目标 如果存在 目 标 的话
 当 此行为 发生时 缓冲区 也 将 被 清空
 如果你想要 不同的 行为 请 重载此方法
 settargettarget  设置 此 处理程序 的 目标 处理程序
 shouldflushrecord  检测 缓冲区 是否 已 满 或 是 有 记录 为 flushlevel  或更高 级别
httphandler
queuehandler
queuelistener
3
2 新版功能
queuelistener  类位于 logging
handlers  模块 它 支持 从 一个 队列 接收 日志记录 消息 例如 在 queue  或 multiprocessing  模块 中 实现 的 队列
 消息 是 在内部 线程中 从 队列 接收 并 在同一 线程 上 传递 到 一个或多个 处理程序 进行 处理 的
 尽管 queuelistener  本身 并 不是一个 处理程序 但 由 于 它 要 与 queuehandler  配合 工作 因此 也 在 此处 介绍
 配合 queuehandler  类 使用 queuelistener  可用来 使 处理程序 在 与 执行 日志记录 的 线程 不同的 线程 上 完成 工作
 这 对 web  应用程序 以 及其他 服务 与 客户端 的 线程 需要 尽可能 快 地 响应 的 服务 应用程序 来说 很重要 任何 潜在 的 慢 速 动作 例如 通过 smtphandler  发送 邮件 都 要 在 单独的 线程 上 完成
queuelistenerqueue  handlers  respecthandlerlevelfalse  返回 一个 queuelistener  类的新实例
 该实例 初始化 时 要 传入一个 队列 以 向其 发送 消息 还 要 传入一个 处理程序 列表 用来 处理 放置 在 队列中 的 条目
 队列 可以是任何 队列 类对象 它会被 原 样 传给 dequeue  方法 该方 法 需要 知道如何 从 其 获取 消息
 队列 不 要求 具有 任务 跟踪 api  但 如 提 供 则会使用 它 这意味着 你可以 为 queue  使用 simplequeue  实例
 如果 respecthandlerlevel  为 true  则 在 决定 是否 将 消息 传递给 处 理程序 之前 会 遵循 处理程序 的 级别 与 消息 的 级别 进行比较 在其他情况 下 其 行为与 之前的 python  版本 一致—— 总是 将 每条 消息 传递给 每个 处理 程序
 在3
5 版更改 增加了 respecthandlerlevel  参数
 dequeueblock  从 队列 移 出 一条 记录 并将其 返回 可以选择 阻塞
 基本 实现 使用 get
 如果你想要 使用 超时 设置或 自定义 的 队列 实现 则 你可能 会 想要 重载此方法
 preparerecord  准备 一条 要 处理 的 记录
 该 实现 只是 返回 传入的 记录
 如果你想要 对 记录 执行任何 自定义 的 marshal  操作 或 在 将 其 传给 处理程序 之前 进行 调整 则 你可能 会 想要 重载 此方法
 handlerecord  处理 一条 记录
 此方法 简单地 循环 遍历 处理程序 向 它们 提供 要 处理 的 记录
 实际 传给 处理程序 的 对象 就是 从 prepare  返回的对象
 start  启动 监听 器
 此方法 启动 一个 后 台 线程 来 监视 logrecords  队列 以 进行 处理
 stop  停止 监听 器
 此方法 要求 线程 终止 然后 等待 它 完成 终止 操作
 请注意 在 你 的应用程 序 退出 之前 如果你 没有 调用此方法 则 可能会 有一些 记录 在 留 在 队列中 它们将 不会被 处理
 enqueuesentinel  将 一个 标记 写入 队列 以 通知 监听 器 退出
 此 实现 会 使用 putnowait 
 如果你想要 使得 超时 设置或 自定义 的 队列 实现 则 你可能 会 想要 重载 此方法
3
3 新版功能
 参见 模块 logging  日志记录 模块 的 api  参考
 模块 logging
config  日志记录 模块 的 配置 api 
 多 媒 体 服务
 本章 描述 的 模块实现了 主要 用 于 多 媒 体 应用 的各种 算法 或 接口
 它们可 在 安装 时 自 行 决定
 这是一个 概述 audioop  处理 原始 音频 数据 aifc  读写 aiff  和 aifc  文件 sunau  读写 sun  au  文件 auread  对象 auwrite  对象 wave  读写 wav  格式 文件 waveread  对象 wavewrite  对象 chunk  读取 iff  分块 数据 colorsys  颜色 系统 间 的 转换 imghdr  推 测 图像 类型 sndhdr  推 测 声 音 文件 的 类型 ossaudiodev  access  to  osscompatible  audio  devices  audio  device  objects  mixer  device  objects
enum  对 枚举 的 支持
3
4 新版功能
 源代码 libenum
py  枚举 是 一 组 符号 名称 枚举成员 的 集合 枚举成员 应该是 唯一的、 不可变的
 在 枚举 中可以 对 成员 进行 恒 等 比较 并且 枚举 本身 是 可迭代 的
 注解 枚举成员 名称 的 大小写 因为 枚举 是 被用来 代表 常量 的 所 以 我们 建议 枚举成员 名 称 应 使用 大写 形式 并将在 我们 的 示例中 使用 此 种 风格
 模块内容
 此 模块定义了 四个 枚举 类 它们 可被用来 定义 名称 和 值 的 不 重复 集合 enumintenum  flag  和 intflag
 此外还 定义了一个 装饰器 unique  和 一个 辅助 类 auto
enum  此 基类 用于创建 枚举 常量
 请参阅 functional  api  小节 了解 另一种 替代 性 的 构建 语法
intenum  此 基类 用于创建 属于 int  的子类 的 枚举 常量
intflag  此 基类 用于创建 可 使用 按位 运算符 进行 组合 而不会 丢失 其 intflag  成员 资 格 的 枚举 常量
 intflag  成员 同样 也是 int  的子类
flag  此 基类 用于创建 枚举 常量 可 使用 按位 运算符 进行 组合 而不会 丢失 其 flag  成员 资 格 的 枚举 常量
unique  此 enum  类 装饰器 可 确保 只 将 一个 名称 绑定到 任意 一个 值
auto  实例 会 被替换为 一个 可 作为 enum  成员的 适当的 值
 默认情况下 初始 值 从1 开始
3
6 新版功能 flag  intflag  auto
 创建一个 enum
 对 枚举成员 及其 属性 的 程序 化 访问
 复制 枚举成员 和 值
 确保 唯一的 枚举 值
 默认情况下 枚举 允许 有 多个 名称 作为 某个 相同 值 的别名
 如果不 想要 这样的 行为 可以 使用以下 装饰器 来 确保 每个 值 在 枚举 中 只 被使用 一次 enum
unique  专用 于 枚举 的 class  装饰器
 它 会 搜索 一个 枚举 的 members  并 收集 所 找到 的 任何 别名 只要 找到 任何 别名 就 会引发 valueerror  并附带 相关 细节 信息 from  enum  import  enum  unique  unique 
 使用 自动 设 定 的 值
 如果 确 切 的 值 不 重要 你可以使用 auto  from  enum  import  enum  auto  class  colorenum 
green 3 值 将 由 generatenextvalue  来 选择 该函数 可以被 重载 class  autonameenum 
west  west  注解 默认 generatenextvalue  方法 的 目标 是 提供 所 给出 的最后一个 int  所 在 序列 的下一个 int  但 这种 行为 方式 属于 实现细节 并且 可能 发生 改变
 注解 generatenextvalue  方法 定义 必须在 任何其他 成员 之前
 迭代
 对 枚举成员 的 迭代 不 会 给出 别名 listshape  shape
circle 3 特殊 属性 members  是一个 从 名称 到 成员 的只读 有 序 映射
 它包含 枚举 中定义的 所有 名称 包括 别名 for  name  member  in  shape
square 2 members  属性 可被用于 对 枚举成员 进行 详细 的 程序 化 访问
 例如 找 出 所有 别名 name  for  name  member  in  shape
 比较
 枚举成员 是 按 标识 号 进行比较 的 color
blue  true  枚举 值 之间的 排序 比较 不 被 支持
 enum  成员 不 属于 整数 另请参阅 下文 的 intenum  color
blue  traceback  most  recent  call  last  file  stdin  line 1 in  module  typeerror  not  supported  between  instances  of  color  and  color  相等 比较 的 定义 如 下 color
blue  true  与 非 枚举 值 的 比较 将总是 不 相等 同样 地 intenum  被 显式 设计 成 不同的 行为 参见 下文 color
 允许 的 枚举成员 和 属性
 受限 的 enum  子类化
 一个新的 enum  类 必须 基于 一个 enum  类 至多 一个 实体 数据类型 以及 出 于 实际 需要 的 任意 多个 基于 object  的 mixin  类
 这些 基类 的顺序 为 class  enumnamemixin 
 datatype  baseenum  pass  另外 仅当 一个 枚举 未定义 任何 成员 时才 允许 子类化 该 枚举
 因此 禁止 这样 的写法 class  morecolorcolor 
 typeerror  cannot  extend  enumerations  但是 允许 这样 的写法 class  fooenum 
 允许 子类化 定义了 成员的 枚举 将 会导致 违 反 类型 与 实例 的 某些 重要的 不可变 规则
 在 另一 方面 允许在 一 组 枚举 之间 共享 某些 通 用 行为 也是 有意义 的
 请参阅 示例 orderedenum 

 封存
 枚举 可以被 封存 与 解封 from  test
tomato  true  封存 的 常规 限制 同样 适用 可 封存 枚举 必须在 模块 的 最高层级 中定义 因为 解封 操作 要求 它们可以 从 该模块 导入
 注解 使用 pickle  协议 版本4 可以 方便地 封存 嵌套 在其他 类 中 的 枚举
 通过 在 枚举 类 中定义 reduceex  可以 对 enum  成员的 封存 解封 方式 进行 修改
 功能 性 api
 派生 的 枚举
intenum
 所提供的 第一个 变种 enum  同时 也是 int  的一个子类
 intenum  的成员 可 与 整数 进行比较 通过 扩展 不同类型 的 整数 枚举 也可以 相互 进行比较 from  enum  import  intenum  class  shapeintenum 
post  true  不 过 它们 仍然 不 可 与 标准 enum  枚举 进行比较 class  shapeintenum 
red  falseintenum  值 在其他 方面 的 行为 都 如 你 预期的 一样 类似于 整数 intshape
intflag
flag
 其他 事项
 何 时 使用 new  与 init
 当 你想要 定制 enum  成员的 实际 值 时 必须使用 new
 任何其他 修改 可以用 new  也可以 用 init  应 优先 使用 init
 举例来说 如果你 要 向 构造器 传入 多个 条目 但 只 希望 将 其中一个 作为 值 class  coordinatebytes  enum 
 有趣 的 示例
 虽然 enum  intenum  intflag  和 flag  预期 可 覆盖 大多数 应用 场景 但它们 无法 覆盖 全部
 这里 有一些 不同类型 枚举 的 方案 它们可以 被 直接使用 或 是作为 自 行 创建 的 参考 示例
 省略 值
 在 许多 应用 场景 中 人 们都 不 关 心 枚举 的 实际 值 是什么
 有 几个 方式 可以定义 此 种类型的 简单 枚举 使用 auto  的 实例 作为 值 使用 object  的 实例 作为 值 使用 描述 性 的 字符串 作为 值 使用 元组 作为 值 并 用 自定义 的 new  以 一个 int  值 来 替代 该 元组 使用 以 上 任何 一种 方法 均可 向 用户 指明 值 并 不 重要 并且 使 人 能够 添加、 移除 或 重 排序 成员 而不必 改变 其余 成员的 数值
 无论 你 选择 何 种方法 你 都 应当 提供一个 repr  并且它 也 需要 隐藏 不 重要的 值 class  novalueenum 
 使用 auto  使用 auto  的形式 如 下 class  colornovalue 
green  使用 object  使用 object  的形式 如 下 class  colornovalue 
green  使用 描述 性 字符串 使用 字符串 作为 值 的形式 如 下 class  colornovalue 
value  go  使用自定义 的 new  使用 自动 编号 new  的形式 如 下 class  autonumbernovalue 
value 2 要实现 更 通用的 autonumber  请 添加 args  到 签名 中 class  autonumbernovalue 
 这样 当你 从 autonumber  继承 时 你 将 可以 编写 你自己的 init  来处理 任何 附加 参数 class  swatchautonumber 
pantone  unknown  注解 如果定义了 new  则 它会在 创建 enum  成员 期间 被使用 随后 它将被 enum  的 new  所 替换 该方法 会 在 类 创建 后 被用来 查找 现有 成员
orderedenum
 一个 有 序 枚举 它 不 是基于 intenum  因此 保持 了 正常的 enum  不变 特性 例如 不 可 与其他 枚举 进行比较 class  orderedenumenum 
duplicatefreeenum
 如果 发 现 重复 的成员 名称 则将引发 错误 而不是 创建 别名 class  duplicatefreeenumenum 
 valueerror  aliases  not  allowed  in  duplicatefreeenum  grene  green  注解 这个例子 适用于 子类化 enum  来 添加 或 改变 禁用 别名 以 及其他 行为
 如果需 要 的改变 只是 禁用 别名 也 可以选择 使用 unique  装饰器
planet
 如果定义了 new  或 init  则 枚举成员 的值将 被传给 这些方法 class  planetenum 
timeperiod
 一个 演示 如何使用 ignore  属性 的 例子 from  datetime  import  timedelta  class  periodtimedelta  enum 
 各种 枚举 有 何 区别？
 枚举 具有 自定义 的 元 类 它 会影响 所 派生 枚举 类 及其 实例 成员的 各个 方面
 枚举 类
enummeta  元 类 负责 提供 contains  dir  iter  及其他 方法 以 允许用户 通过 enum  类 来完成 一般 类 做 不 到 的事情 例如 listcolor  或 someenumvar  in  color
 enummeta  会 负责 确保 最终 enum  类 中 的各种 其他方法 是 正确的 例如 newgetnewargs  str  和 repr
 枚举成员 即 实例
 有关 枚举成员 最 有趣 的 特 点 是 它们都 是 单 例 对象
 enummeta  会 在 创建 enum  类 本身 时 将它们 全部 创建 完成 然后 准备 好 一个 自定义 的 new  通过 只 返回 现有的 成员 实例 来 确保 不会再 实例化 新 的 对象
 细节 要 点
xmldom  the  document  object  model  api
 see  section  一致性 for  a  detaileddiscussion  of  mapping  requirements
 参见 document  object  model  dom  level 2 specification  the  w 3 c  recommendation  upon  which  the  python  dom  api  is  based
 模块内容
objects  in  the  dom
dom  的 权 威 文档 是 来自 w 3 c  的 dom  规范
 请注意 dom  属性 也 可以作为 节点 而不是 简单的 字符串 进行 操作
 然而 必须 这样做 的 情况 相当 少 见 所 以 这种 用 法 还没有 记录 下 来
 接口 部 件 目 的 domimplementation  domimplementation  objects  底层 实现 的 接口
 node  节点 对象 文档中 大多数 对象 的基本 接口
 nodelist  节点 列表对象 节点 序列 的 接口
 documenttype  文档 类型对象 有关 处理 文档 所需 声明 的 信息
 document  文档 对象 表示 整个 文档 的 对象
 element  元素 对象 文档 层次结构 中的元素 节点
 attr  attr  对象 元素 节点 上 的 属性 值 节点
 comment  注释 对象 源 文档中 注释 的 表示形式
 text  text  和 cdatasection  对象 包含 文档中 文本 内容的 节点
 processinginstruction  processinginstruction  对象 processing  instruction  representation
 另一 节 描述了 在 python  中 使用 dom  定义 的 异常
domimplementation  objects
 节点 对象
 注解 this  is  based  on  a  proposed  dom  level 3 api  which  is  still  in  the  working  draft  stage  but  this  particular  interface  appears  uncontroversial
 节点 列表对象
 文档 类型对象
 文档 对象
 元素 对象
attr  对象
namednodemap  对象
 注释 对象
text  和 cdatasection  对象
 注解 the  use  of  a  cdatasection  node  does  not  indicate  that  the  node  represents  a  complete  cdata  marked  section  only  that  the  content  of  the  node  was  part  of  a  cdata  section
processinginstruction  对象
 异常
the  exception  codes  defined  in  the  dom  recommendation  map  to  theexceptions  described  above  according  to  this  table  常 数 异常 domstringsizeerr  domstringsizeerr  hierarchyrequesterr  hierarchyrequesterr  indexsizeerr  indexsizeerr  inuseattributeerr  inuseattributeerr  invalidaccesserr  invalidaccesserr  invalidcharactererr  invalidcharactererr  invalidmodificationerr  invalidmodificationerr  invalidstateerr  invalidstateerr  namespaceerr  namespaceerr  notfounderr  notfounderr  notsupportederr  notsupportederr  nodataallowederr  nodataallowederr  nomodificationallowederr  nomodificationallowederr  syntaxerr  syntaxerr  wrongdocumenterr  wrongdocumenterr 
 一致性
 类型 映射
 将根据 下 表 将 dom  规范 中使用的 idl  类型 映射 为 python  类型
 idl  类型 python  类型 boolean  bool  或 int  int  int  long  int  int  unsigned  int  int  domstring  str  或 bytes  null  none 
accessor  methods
string  常见的 字符串 操作
 源代码 libstring
py  参见 文本 序列类型 str  字符串 的 方法
 字符串 常量
 此 模块中定义的 常量 为 string
asciiletters  下文 所述 asciilowercase  和 asciiuppercase  常量 的 拼 连
 该值 不 依赖于 语言 区域
asciilowercase  小写字母 abcdefghijklmnopqrstuvwxyz
 该值 不 依赖于 语言 区域 不 会 发生改变
asciiuppercase  大写字母 abcdefghijklmnopqrstuvwxyz
 该值 不 依赖于 语言 区域 不 会 发生改变
digits  字符串0123456789
hexdigits  字符串0123456789 abcdefabcdef
octdigits  字符串01234567
punctuation  由 在 c  区域设置 中 被视为 标 点 符号 的 ascii  字符 所 组成的 字符串
printable  由 被视为 可打印 符号 的 ascii  字符 组成的 字符串
 这是 digits  asciiletters  punctuation  和 whitespace  的 总 和
whitespace  由 被视为 空白符 号 的 ascii  字符 组成的 字符串
 其 中 包括 空格、 制表、 换 行、 回 车、 进 纸 和 纵 向 制表符
 自定义 字符串格式化
 内置的 字符串 类提供了 通过使用 pep 3101 所描述的 format  方法 进行 复杂 变量 替换 和 值 格式化 的能力
 string  模块中的 formatter  类 允许你 使用 与内置 format  方法 相同 的 实现 来创建 并 定制 你自己的 字符串格式化 行为
formatter  formatter  类 包含 下列 公有 方法 formatformatstring  args  kwargs  首 要 的 api  方法
 它接受一个 格式字符串 和 任意 一 组 位置 和 关键字参数
 它 只是 一个 调用 vformat  的 包装器
 在3
7 版更改 格式字符串 参数 现在是 仅限位置 参数
 vformatformatstring  args  kwargs  此 函数 执行 实际 的 格式化 操作
 它 被 公开 为 一个单独的 函数用于 需要 传入一个 预定义 字母 作为参数 而不是 使用 args  和 kwargs  语 法 将 字典 解包 为 多个 单独 参数 并 重 打包的 情况
 vformat  完成 将 格 式 字符串 分 解 为 字符 数据 和 替换 字段 的 工作
 它 会 调用 下文 所述 的 几种 不同 方法
 此外 formatter  还 定义了 一些 旨在 被 子类 替换 的 方法 parseformatstring  循环 遍历 formatstring  并返回一个 由 可迭代对象 组成的 元组 literaltext  fieldname  formatspec  conversion
 它 会 被 vformat  用来 将 字符串 分 解 为 文本 字面值 或 替换 字段
 元组 中的值 在 概念 上 表示 一段 字面 文本 加上 一个 替换 字段
 如果没有 字 面 文本 如果 连续 出现 两个 替换 字段 就 会发生 这种情况 则 literaltext  将是一个 长度为 零 的 字符串
 如果没有 替换 字段 则 fieldname  formatspec  和 conversion  的值将 为 none
 getfieldfieldname  args  kwargs  给定 fieldname  作为 parse  见 上 文 的返回值 将其转换为 要 格式化 的 对象
 返回 一个元组 obj  usedkey
 默认 版本 接受 在 pep 3101 所定义 形式 的 字符串 例如0 name  或 label
title 
 args  和 kwargs  与 传给 vformat  的 一样
 返回值 usedkey  与 getvalue  的 key  形参 具有相同的 含义
 getvaluekey  args  kwargs  提取 给定的 字段 值
 key  参数 将 为 整数或 字符串
 如果是 整数 它 表 示 args  中 位置参数 的 索引 如果是 字符串 它 表示 kwargs  中 的 关 键字参数 名
 args  形参 会 被设为 vformat  的 位置参数 列表 而 kwargs  形参 会 被设为 由 关键字参数 组成的 字典
 对 于 复合 字段 名称 仅 会 为 字段 名称 的第一个 组件 调用 这些函数 后续 组 件 会通过 普通 属性 和 索引 操作 来进行 处理
 因此 举例来说 字段 表达式0
name  将导致 调用 getvalue  时 附 带 key  参数 值0
 在 getvalue  通过调用 内置的 getattr  函数返回 后 将 会 查找 name  属性
 如果 索引 或 关键字 引用 了 一个 不存在 的 项 则将引发 indexerror  或 keyerror
 checkunusedargsusedargs  args  kwargs  在必要时 实现 对 未 使用 参数 进行 检测
 此 函数的参数 是 是 格式字符串 中 实际 引用 的 所有 参数 键 的 集合 整数表示 位置参数 字符串表示 名称 参数 以及 被传给 vformat  的 args  和 kwargs  的 引用
 未 使用 参数 的 集合 可以 根据 这些 形参 计算 出来
 如果 检测 失败 则 checkunusedargs  应 会引发 一个异常
 formatfieldvalue  formatspec  formatfield  会 简单地 调用 内置 全局 函数 format
 提供 该方 法 是为了 让 子类 能够 重载 它
 convertfieldvalue  conversion  使用 给定的 转换 类型 来自 parse  方法 所返回的 元组 来 转换 由 getfield  所返回的 值
 默认 版本 支持 s  str  r  repr  和 a  ascii  等 转换 类型
 格式字符串 语法
 格式 规格 迷 你 语言
 格式 规格 在 格式字符串 所 包含的 替换 字段 内部 使用 用 于 定义 单个 值 应 如何 呈 现 参见 格式字符串 语法 和 格式化 字符串字面值
 它们 也可以被 直接 传给 内置的 format  函数
 每 种 可 格式化 的 类型 都可以 自 行 定义 如何 对 格式 规格 进行 解读
 大多数 内置类型 都 为 格式 规格 实现了 下列 选项 不 过 某些 格式化 选项 只 被 数值 类型 所 支持
 一般 约定 空 的 格式 描述 将 产生 与 在 值 上调用 str  相同 的结果
 非空 格式 描述 通常会 修改 此 结果
 标准 格式 说明符 的 一般 形式 如 下 formatspec  fillalignsign 0 widthgroupingoption
precisiontype  fill  any  character  align  sign  width  digit  groupingoption  precision  digit  type  b  c  d  e  e  f  f  g  g  n  o  s  x  x  如果指定了 一个有效的 align  值 则可以 在 该值 前面 加一个 fill  字符 它可以 为 任意 字符 如果省略 则 默认为 空格符
 在 格式化 字符串字面值 或 在 使用 str
format  方法 时 是 无法 使用 花括号 字面值 or  作为 fill  字符 的
 但是 通过 嵌套 替换 字段 插入 花括号 则 是可以 的
 这 个 限制 不 会影响 format  函数
 各种 对齐 选项 的含义 如 下 选项 意义 强制 字段 在 可 用 空间 内 左 对齐 这是 大多数 对象 的 默认值
 强制 字段 在 可 用 空间 内 右 对齐 这是 数字 的 默认值
 强制 将 填充 放置 在 符号 如果有 之后 但 在 数字 之前
 这 用 于 以000000120 形式 打印 字段
 此 对齐 选项 仅 对 数字类型 有效
 当0 紧 接 在 字 段 宽度 之前 时 它 成为 默认值
 强制 字段 在 可 用 空间 内 居 中
 请注意 除非 定义了 最小 字段 宽度 否则 字段 宽度 将 始终 与 填充 它 的 数据 大小 相同 因此 在这种情况下 对齐 选项 没 有意义
sign  选项 仅 对 数字类型 有效 可以是 以 下 之一 选项 意义 表示 标志 应该 用 于 正 数 和 负数
 表示 标志 应 仅 用 于 负数 这是 默认行为
 space  表示 应 在 正 数 上 使用 前导 空格 在 负数 上 使用 减 号
 选项 可以让 替代 形式 被用于 转换
 替代 形式 可 针对 不同类型 分别 定义
 此 选项 仅 对 整数、 浮点、 复数 和 decimal  类型 有效
 对 于 整数 类型 当使用 二进制、 八进制 或 十六进制 输出 时 此 选项 会 为 输出 值 添加 相应的0 b 0 o  或0 x  前缀
 对 于 浮点数、 复数 和 decimal  类型 替代 形式 会 使得 转换 结果 总 是包含 小数点 符号 即使 其 不带 小 数
 通常 只有在 带有 小 数 的情况下 此 类 转换 的结果 中 才会 出现 小数点 符号
 此外 对 于 g  和 g  转换 末尾 的 零 不 会 从 结果 中被移除
 选项 表示 使用 逗号 作为 千 位分隔符
 对 于 感 应 区域设置 的 分隔符 请改用 n  整数表示 类型
 在3
1 版更改 添加了 选项 另请参阅 pep 378
 选项 表示 对 浮点 表示类型 和 整数表示 类型 d  使用 下划线 作为 千 位分隔符
 对 于 整数表示 类型 b  o  x  和 x  将 为 每4 个 数 位 插入 一个 下划线
 对 于其他 表示类型 指定 此 选项 则 将导致 错误
 在3
6 版更改 添加了 选项 另请参阅 pep 515
width  是一个 定义 最小 总 字段 宽度 的 十进制 整数 包括 任何 前缀、 分隔符 和其他 格式化字符
 如果未指定 则 字段 宽度 将 由 内容 确定
 当 未 显式 给出 对齐方 式 时 在 width  字段 前 加一个 零0 字段 将 为 数字类型 启用 感知 正负 号 的 零 填充
 这相当于 设置 fill  字符 为0 且 alignment  类型 为
precision  是一个 十进制 数字 表示 对 于 以 f  and  f  格式化 的 浮点数 值 要 在 小数点 后 显示 多少 个 数 位 或者 对 于 以 g  或 g  格式化 的 浮点数 值 要 在 小数点 前 后 共 显示 多少 个 数 位
 对 于 非 数字类型 该 字段 表示 最大 字段 大小—— 换句话说 就是 要使用 多少 个 来自 字段 内容的 字符
 对 于 整数值 则 不允许 使用 precision
 最后 type  确定 了 数据 应 如何 呈 现
 可用的 字符串表示 类型 是 类型 意义 s  字符串格式
 这是 字符串 的 默认 类型 可以 省略
 none  和 s  一样
 可用的 整数表示 类型 是 类型 意义 b  二进制 格式
 输出 以2 为基数 的 数字
 c  字符
 在 打印 之前 将 整数 转换为 相应的 unicode  字符
 d  十进制 整数
 输出 以10 为基数 的 数字
 o  八进制 格式
 输出 以8 为基数 的 数字
 x  十六进制 格式
 输出 以16 为基数 的 数字 使用 小写字母 表示9 以 上 的 数 码
 x  十六进制 格式
 输出 以16 为基数 的 数字 使用 大写字母 表示9 以 上 的 数 码
 n  数字
 这 与 d  相似 不同之处在于 它 会 使用当前 区域设置 来 插入 适当 的 数字 分隔 字符
 none  和 d  相同
 在 上述 的 表示类型 之外 整数 还可以 通过 下列 的 浮点 表示类型 来 格式化 除了 n  和 none
 当 这样做 时 会 在 格式化 之前 使用 float  将 整数 转换为 浮点数
 浮点数 和 小 数值 可用的 表示类型 有 类型 意义 e  指 数 表示
 以 使用 字母 e  来 标 示 指 数 的 科学 计数 法 打印 数字
 默认 的 精 度 为6
 e  指 数 表示
 与 e  相似 不同之处在于 它 使用 大写字母 e  作为 分隔 字 符
 f  定 点 表示
 将 数字 显示 为 一个 定 点数
 默认 的 精确 度 为6
 f  定 点 表示
 与 f  相似 但 会 将 nan  转 为 nan  并 将 inf  转 为 inf
 g  常规 格式
 对 于给定 的精度 p 1 这 会 将 数值 舍入到 p  位 有效 数字 再 将结果 以 定 点 格式 或 科学 计数 法 进行 格式化 具 体 取决于 其 值 的大小
 准确 的 规则 如 下 假设 使用 表示类型 e  和 精度 p 1 进行 格式化 的 结 果 具有 指 数值 exp
 那 么 如果 m  exp  p  其 中 m  以4 表示 浮 点 值 而 以6 表示 decimal  值 该 数字 将 使用 类型 f  和 精度 p 1 exp  进行 格式化
 否则 的话 该 数字 将 使用 表示类型 e  和 精度 p 1 进行 格式化
 在 两 种情况下 都会 从 有效 数字 中移除 无 意 义 的末尾 零 如果 小数点 之后 没有 余 下 数字 则 小数点 也会 被移除 除非 使用了 选 项
 正负 无穷 正负 零 和 nan  会 分别 被 格式化 为 inf  inf 00 和 nan  无论 精度 如何 设 定
 精度0 会被视为 等同于 精度1
 默认 精度 为6
 g  常规 格式
 类似于 g  不同之处在于 当 数值 非常 大 时 会 切换 为 e
 无穷 与 nan  也会 表示为 大写 形式
 n  数字
 这 与 g  相似 不同之处在于 它 会 使用当前 区域设置 来 插入 适当 的 数字 分隔 字符
 百 分 比
 将 数字 乘 以100 并 显示 为 定 点 f  格式 后面 带 一个 百 分 号
 none  类似于 g  不同之处在于 当使用 定 点 表示法 时 小数点 后 将 至 少 显示 一 位
 默认 精度 与 表示 给定 值 所需的 精度 一样
 整 体 效 果 为 与其他 格式 修 饰 符 所 调整 的 str  输出 保持 一致

 格式 示例
 本节 包含 str
format  语法 的 示例 以及 与 旧式 格式化 的 比较
 该 语法 在大多数情况下 与 旧式 的 格式化 类似 只是 增加了 和 来 取 代
 例如03
2 f  可以被 改 写 为03
 新 的 格式 语法 还 支持 新增 的不同 选项 将 在 以下示例 中 说明
 按 位置 访问 参数012
formatabra  cad  arguments  indices  can  be  repeated  abracadabra  按 名称 访问 参数 coordinates  latitude  longitude
81 w  访问 参数 的 属性 c 35 j  the  complex  number 0 is  formed  from  the  real  part 0
 strpoint 42 point 42 访问 参数 的 项 coord 35 x 00 y 01
formatcoord  x 3 y 5 替代 s  和 r  repr  shows  quotes  r  str  doesnt  s
formattest 1 test 2 repr  shows  quotes  test 1 str  doesnt  test 2 对齐 文本 以及 指定 宽度30
formatcentered  use  as  a  fill  char  centered  替代 f  f  和 f  以及 指定 正负 号 f  f
140000 替代 x  和 o  以及 转换 基于 不同 进 位 制 的 值 format  also  supports  binary  numbers  int 0 d  hex 0 x  oct 0 o  bin 0 b
format 42 int 42 hex 0 x 2 a  oct 0 o 52 bin 0 b 101010 使用 逗号 作为 千 位分隔符
format 12345678901234567890 表示为 百 分 数 points 19 total 22 correct  answers 
36 使用 特定 类型 的 专属 格式化 import  datetime  d  datetime
formatd 20100704121558 嵌套 参数 以及 更复杂的 示例 for  align  text  in  zip  left  center  right 
 模板 字符串
 辅助函数
capwordss  sepnone  使用 str
split  将 参数 拆分 为 单词 使用 str
capitalize  将 单词 转 为 大写 形式 使用 str
join  将 大写 的单词 进行 拼接
 如果可选 的 第 二个参数 sep  被 省略或为 none  则 连续 的 空白字符 会 被替换为 单个 空 格符 并且 开头 和 末尾 的 空白字符 会 被移除 否则 sep  会 被用来 拆分 和 拼接 单词
mailbox  manipulate  mailboxes  in  various  formats
 源代码 libmailbox
 参见 模块 email  represent  and  manipulate  messages
mailbox  对象
 警告 be  very  cautious  when  modifying  mailboxes  that  might  be  simultaneously  changed  by  some  other  process
 在3
2 版更改 support  for  binary  input  was  added
 注解 the  behavior  of  iter  is  unlike  that  of  dictionaries  which  iterate  over  keys
3
2 新版功能
 在3
2 版更改 the  file  object  really  is  a  binary  file  previously  it  was  incorrectly  returned  in  text  mode
 注解 unlike  other  representations  of  messages  filelike  representations  are  not  necessarily  independent  of  the  mailbox  instance  that  created  them  or  of  the  underlying  mailbox
 注解 unlike  with  dictionaries  keyword  arguments  are  not  supported
maildir
 注解 the  maildir  specification  requires  the  use  of  a  colon  in  certain  message  file  names
 some  mailbox  methods  implemented  by  maildir  deserve  special  remarks  addmessage  setitemkey  message  updatearg  警告 these  methods  generate  unique  file  names  based  upon  the  current  process  id
 参见 maildir  man  page  from  courier  a  specification  of  the  format
mbox
 参见 mbox  man  page  from  tin  a  specification  of  the  format  with  details  on  locking
mh
 注解 alreadyissued  keys  are  invalidated  by  this  operation  and  should  not  be  subsequently  used
 参见 nmh  message  handling  system  home  page  of  nmh  an  updated  version  of  the  original  mh
babyl
 注解 the  actual  messages  are  inspected  to  determine  which  labels  exist  in  the  mailbox  rather  than  consulting  the  list  of  labels  in  the  babyl  options  section  but  the  babyl  section  is  updated  whenever  the  mailbox  is  modified
 参见 format  of  version 5 babyl  files  a  specification  of  the  babyl  format
mmdf
 参见 mmdf  man  page  from  tin  a  specification  of  mmdf  format  from  the  documentation  of  tin  a  newsreader
message  objects
maildirmessage
 standard  flags  for  maildir  messages  are  as  follows  标记 意义 解释 d  草 稿 under  composition  f  已 标记 标记为 重要 p  已 读 转 发 重新 发送 或 退 回 r  已 回复 回复 给 s  查看 读取 t  已 删除 标记为 以 后 删除 maildirmessage  实例 提供 以下方法 getsubdir  return  either  new  if  the  message  should  be  stored  in  the  new  subdirectory  or  cur  if  the  message  should  be  stored  in  the  cur  subdirectory
 注解 a  message  is  typically  moved  from  new  to  cur  after  its  mailbox  has  been  accessed  whether  or  not  the  message  is  has  been  read
when  a  maildirmessage  instance  is  created  based  upon  anmboxmessage  or  mmdfmessage  instance  the  status  and  xstatusheaders  are  omitted  and  the  following  conversions  take  place  结果状态 mboxmessage  或 mmdfmessage  状态 cur  子目录 o  标记 f  标记 f  标记 r  标记 a  标记 s  标记 r  标记 t  标记 d  标记 when  a  maildirmessage  instance  is  created  based  upon  an  mhmessageinstance  the  following  conversions  take  place  结果状态 mhmessage  状态 cur  子目录 unseen  序列 cur  subdirectory  and  s  flag  非 unseen  序列 f  标记 flagged  序列 r  标记 replied  序列 when  a  maildirmessage  instance  is  created  based  upon  ababylmessage  instance  the  following  conversions  take  place  结果状态 babylmessage  状态 cur  子目录 unseen  标签 cur  subdirectory  and  s  flag  非 unseen  标签 p  标记 forwarded  或 resent  标签 r  标记 answered  标签 t  标记 deleted  标签
mboxmessage
 conventional  flags  for  mbox  messages  are  as  follows  标记 意义 解释 r  读取 读取 o  old  以 前 由 mua  检测 d  已 删除 标记为 以 后 删除 f  已 标记 标记为 重要 a  已 回复 回复 给 the  r  and  o  flags  are  stored  in  the  status  header  and  the  d  f  and  a  flags  are  stored  in  the  xstatus  header
when  an  mboxmessage  instance  is  created  based  upon  amaildirmessage  instance  a  from  line  is  generated  based  upon  themaildirmessage  instances  delivery  date  and  the  followingconversions  take  place  结果状态 maildirmessage  状态 r  标记 s  标记 o  标记 cur  子目录 d  标记 t  标记 f  标记 f  标记 a  标记 r  标记 when  an  mboxmessage  instance  is  created  based  upon  an  mhmessageinstance  the  following  conversions  take  place  结果状态 mhmessage  状态 r  标记 和 o  标记 非 unseen  序列 o  标记 unseen  序列 f  标记 flagged  序列 a  标记 replied  序列 when  an  mboxmessage  instance  is  created  based  upon  a  babylmessageinstance  the  following  conversions  take  place  结果状态 babylmessage  状态 r  标记 和 o  标记 非 unseen  标签 o  标记 unseen  标签 d  标记 deleted  标签 a  标记 answered  标签 when  a  message  instance  is  created  based  upon  an  mmdfmessageinstance  the  from  line  is  copied  and  all  flags  directlycorrespond  结果状态 mmdfmessage  状态 r  标记 r  标记 o  标记 o  标记 d  标记 d  标记 f  标记 f  标记 a  标记 a  标记
mhmessage
 some  mail  reading  programs  although  not  the  standard  mh  and  nmh  use  sequences  in  much  the  same  way  flags  are  used  with  other  formats  as  follows  序列 解释 未 读 未 读取 但 先前 被 mua  检测到 已 回复 回复 给 已 标记 标记为 重要 mhmessage  instances  offer  the  following  methods  getsequences  return  a  list  of  the  names  of  sequences  that  include  this  message
when  an  mhmessage  instance  is  created  based  upon  a  maildirmessageinstance  the  following  conversions  take  place  结果状态 maildirmessage  状态 unseen  序列 非 s  标记 replied  序列 r  标记 flagged  序列 f  标记 when  an  mhmessage  instance  is  created  based  upon  an  mboxmessage  ormmdfmessage  instance  the  status  and  xstatus  headers  areomitted  and  the  following  conversions  take  place  结果状态 mboxmessage  或 mmdfmessage  状态 unseen  序列 非 r  标记 replied  序列 a  标记 flagged  序列 f  标记 when  an  mhmessage  instance  is  created  based  upon  a  babylmessageinstance  the  following  conversions  take  place  结果状态 babylmessage  状态 unseen  序列 unseen  标签 replied  序列 answered  标签
babylmessage
 the  attributes  are  as  follows  标签 解释 未 读 未 读取 但 先前 被 mua  检测到 deleted  标记为 以 后 删除 filed  复制 到 另一个 文件 或 邮 箱 answered  回复 给 forwarded  已 转 发 edited  由 用户 修改 resent  已 重 发 by  default  rmail  displays  only  visible  headers
 babylmessage  instances  offer  the  following  methods  getlabels  返回 邮件 上 的 标签 列表
 setlabelslabels  将 消息 上 的 标签 列表 设置为 labels 
 addlabellabel  将 label  添加到 消息 上 的 标签 列表中
 removelabellabel  从 消息 上 的 标签 列表中 删除 label 
when  a  babylmessage  instance  is  created  based  upon  amaildirmessage  instance  the  following  conversions  take  place  结果状态 maildirmessage  状态 unseen  标签 非 s  标记 deleted  标签 t  标记 answered  标签 r  标记 forwarded  标签 p  标记 when  a  babylmessage  instance  is  created  based  upon  an  mboxmessageor  mmdfmessage  instance  the  status  and  xstatus  headers  areomitted  and  the  following  conversions  take  place  结果状态 mboxmessage  或 mmdfmessage  状态 unseen  标签 非 r  标记 deleted  标签 d  标记 answered  标签 a  标记 when  a  babylmessage  instance  is  created  based  upon  an  mhmessageinstance  the  following  conversions  take  place  结果状态 mhmessage  状态 unseen  标签 unseen  序列 answered  标签 replied  序列
mmdfmessage
 conventional  flags  for  mmdf  messages  are  identical  to  those  of  mbox  message  and  are  as  follows  标记 意义 解释 r  读取 读取 o  old  以 前 由 mua  检测 d  已 删除 标记为 以 后 删除 f  已 标记 标记为 重要 a  已 回复 回复 给 the  r  and  o  flags  are  stored  in  the  status  header  and  the  d  f  and  a  flags  are  stored  in  the  xstatus  header
when  an  mmdfmessage  instance  is  created  based  upon  amaildirmessage  instance  a  from  line  is  generated  based  upon  themaildirmessage  instances  delivery  date  and  the  followingconversions  take  place  结果状态 maildirmessage  状态 r  标记 s  标记 o  标记 cur  子目录 d  标记 t  标记 f  标记 f  标记 a  标记 r  标记 when  an  mmdfmessage  instance  is  created  based  upon  an  mhmessageinstance  the  following  conversions  take  place  结果状态 mhmessage  状态 r  标记 和 o  标记 非 unseen  序列 o  标记 unseen  序列 f  标记 flagged  序列 a  标记 replied  序列 when  an  mmdfmessage  instance  is  created  based  upon  a  babylmessageinstance  the  following  conversions  take  place  结果状态 babylmessage  状态 r  标记 和 o  标记 非 unseen  标签 o  标记 unseen  标签 d  标记 deleted  标签 a  标记 answered  标签 when  an  mmdfmessage  instance  is  created  based  upon  an  mboxmessageinstance  the  from  line  is  copied  and  all  flags  directlycorrespond  结果状态 mboxmessage  状态 r  标记 r  标记 o  标记 o  标记 d  标记 d  标记 f  标记 f  标记 a  标记 a  标记
 异常
 示例
 互联网 协议 和 支持
urlliberror  urllibrequest  引发的异常 类
 源代码 liburlliberror
pyurllib
error  模块 为 urllib
request  所 引发的异常 定义了 异常类
 基础 异常类 是 urlerror
 下列 异常会被 urllib
error  按 需 引发 exception  urllib
urlerror  处理程序 在 遇到 问题 时会引发 此 异常 或 其 派生 的 异常
 它 是 oserror  的一个子类
 reason  此 错误 的原因
 它可以 是一个 消息 字符串或 另一个 异常 实例
 在3
3 版更改 urlerror  已 被设为 oserror  而不是 ioerror  的 子 类
httperror  虽然 是 一个异常 urlerror  的一个子类 httperror  也可以 作为一个 非 异常 的 文件 类 返回值 与 urlopen  返 所 回的对象 相同
 这 适用于 处理 特殊 http  错误 例如 作为 认 证 请求 的时候
 code  一个 http  状态 码 具体 定义 见 rfc 2616
 这 个数字 的 值 对应于 存 放在 http
responses  代码 字典中 的 某个 值
 reason  这通常 是一个 解释 本 次 错误 原因 的 字符串
 headers  导致 httperror  的特定 http  请求的 http  响应 头
3
4 新版功能
contenttooshorterrormsg  content  此 异常 会 在 urlretrieve  函数 检测到 已 下载 的 数据 量 小于 期 待 的 数据 量 由 contentlength  头 给定 时 被引发
 content  属性 中 将 存放 已 下 载 可能 被 截断 的 数据
 队列 集
 源代码 libasyncioqueues
pyasyncio  队列 被设计 成 与 queue  模块 类似
 尽管 asyncio  队列 不 是线程安全的 但是 他们 是 被设计 专用 于 asyncawait  代码
 注意 asyncio  的 队列 没有 timeout  形参 请使用 asyncio
waitfor  函数 为 队列 添加 超时 操作
 参见 下面的 examples  部分
 队列
 优先级 队列
priorityqueue  queue  的 变体 按 优先级 顺序 取出 条目 最小的 先 取出
 条目 通常是 prioritynumber  data  形式 的 元组
 后 进先出 队列
lifoqueue  queue  的 变体 先 取出 最近 添加 的 条目 后 进先出
 异常
queueempty  当 队列 为空 的时候 调用 getnowait  方法 而 引发 这 个 异常
queuefull  当 队列中 条目 数量 已经 达到 它 的 maxsize  的时候 调用 putnowait  方法 而 引发的异常
 示例
 队列 能 被用于 多个 的 并 发 任务 的 工作 量 分配 import  asyncio  import  random  import  time  async  def  workername  queue  while  true  get  a  work  item  out  of  the  queue
curses  终端 字符 单元 显示 的 处理
curses  模块提供了 curses  库 的 接口 这是 可移植 高级 终端 处理 的 事实 标准
 虽然 curses  在 unix  环境中 使用 最 为 广泛 但也 有 适用于 windowsdos  以 及其他 可能的 系统 的 版本
 此 扩展模块 旨在 匹配 ncurses  的 api  这是一个 部 署 在 linux  和 unix  的 bsd  变体 上 的 开源 curses  库
 注解 每 当 文档 提 到 字符 时 它可以 被 指定 为 一个整数 一个 单 字符 unicode  字符串 或者一个 单 字节 的 字节 字符串
 每 当 此 文档 提 到 字符串 时 它 可 以 被 指定 为 一个 unicode  字符串 或者一个 字节 字符串
 注解 从5
4 版本 开始 ncurses  库 使用 nllanginfo  函数来 决定 如何 解释 非 ascii  数据
 这意味着 你需要 在程序中 调用 locale
setlocale  函数 并 使用 一种 系统中 可用的 编码 方法来 编码 unicode  字符串
 这个例子 使用了 系 统 默认 的 编码 import  locale  locale
getpreferredencoding  然后 使用 code  作为 str
encode  调用 的 编码
 参见 模块 curses
ascii  在 ascii  字符 上 工作 的工具 无论 你 的 区域设置 是什么
 模块 curses
panel  为 curses  窗口 添加 深度 的 面板 栈 扩展
 模块 curses
textpad  用 于 使 curses  支持 emacs  式 绑定 的 可 编辑 文本 部 件
 用 python  进行 curses  编程 关于 配合 python  使用 curses  的 教 学 材 料 由 andrew  kuchling  和 eric  raymond  撰写
 python  源码 发布 包 的 toolsdemo  目录 包含了 一些 使用 此模块 所提供的 curses  绑定 的 示例 程序
 函数
window  对象
 常量
pipes  终端 管道 接口
 源代码 libpipes
pypipes  定义了一个 类 用来 抽象 pipeline  的概念 将 数据 从 一个 文件 转 到 另一 文件 的 转换器 序列
 由 于 模块 使用了 binsh  命令行 因此 要求 有 posix  或 兼容 os
system  和 os
popen  的 终端 程序
pipes  模块定义了以下 的 类 class  pipes
template  对 管道 的 抽象
 示例 import  pipes  t  pipes
 模板 对象
 模板 对象 有 以下方法 template
reset  将 一个 管道 模板 恢复 为 初始 状态
clone  返回一个新的 等价 的 管道 模板
debugflag  如果 flag  为真值则 启用 调试
 否则 禁用 调试
 当 启用 调试 时 要执 行 的 命令 会 被 打印出 来 并且 会 给 予 终端 set  x  命令 以 输出 更 详细 的 信 息
appendcmd  kind  在 末尾 添加 一个新的 动作
 cmd  变量 必须为一个 有效的 bourne  终端 命令
 kind  变量 由 两个 字母 组成
 第一个 字母 可以为 这 表示 命令 将 读取 其 标准输入 f  这 表示 命令 将 读取 在命令行中 给定的 文件 或
 这 表示 命令 将 不 读取 输入 因而 必须 放在 前面
 类似地 第二个 字母 可以为 这 表示 命令 将 写入到 标准输出 f  这 表示 命令 将 写入 在命令行中 给定的 文件 或
 这 表示 命令 将 不 执行 写入 因而 必须 放在 末尾
prependcmd  kind  在 开头 添加 一个新的 动作
 请参阅 append  获取 相应 参数 的 说明
openfile  mode  返回 一个 文件类对象 打开 到 file  但是 将 从 管道 读取或写入
 请注意 只能 给出 r  w  中的一个
copyinfile  outfile  通过 管道 将 infile  拷贝 到 outfile
colorsys  颜色 系统 间 的 转换
 源代码 libcolorsys
pycolorsys  模块定义了 计算机 显示 器 所用的 rgb  red  green  blue  色 彩 空间 与 三种 其他 色 彩 坐标 系统 yiq  hls  hue  lightness  saturation  和 hsv  huesaturation  value  表示 的 颜色 值 之间的 双 向 转换
 所有这些 色 彩 空间 的 坐标 都 使用 浮点数 值 来表示
 在 yiq  空间中 y  坐标 取值 为0 和1 之间 而 i  和 q  坐标 均 可以为 正 数 或 负数
 在 所有其他 空间中 坐标 取值 均为0 和1 之间
 参见 有关 色 彩 空间 的更多信息 可 访问 httpspoynton
html  和 httpswww
colorsys  模块定义了 如 下 函数 colorsys
rgbtoyiqr  g  b  把 颜色 从 rgb  值 转 为 yiq  值
yiqtorgby  i  q  把 颜色 从 yiq  值 转 为 rgb  值
rgbtohlsr  g  b  把 颜色 从 rgb  值 转 为 hls  值
hlstorgbh  l  s  把 颜色 从 hls  值 转 为 rgb  值
rgbtohsvr  g  b  把 颜色 从 rgb  值 转 为 hsv  值
hsvtorgbh  s  v  把 颜色 从 hsv  值 转 为 rgb  值
 示例 import  colorsys  colorsys
time  时间 的 访问 和 转换
 函数
clock  id  常量
 时区 常量
altzone  本地 dst  时区的 偏移量 以 utc  为单位 的 秒数 如果 已 定义
 如果 当 地 dst  时区 在 utc  以 东 如 在 西 欧 包括 英 国 则 是 负数
 只有 当 daylight  非零 时才 使用 它
 见 下面的 注释
daylight  如果定义了 dst  时区 则 为 非零
 见 下面的 注释
timezone  本地 非 dst  时区的 偏移量 utc  以 西 的 秒数 西 欧 大部分 地 区 为负 美 国 为 正 英 国 为零
 见 下面的 注释
tzname  两个 字符串 的 元组 第一个 是 本地 非 dst  时区的 名称 第二个 是 本地 dst  时区 的 名称
 如果未 定义 dst  时区 则 不应 使用 第二个 字符串
 见 下面的 注释
 注解 对 于 上述 时区 常量 altzone 、 daylight 、 timezone  和 tzname  该值 由 模块 加载 时 有效 的时区 规则 确定 或者 最后一 次 tzset  被 调 用 时 并且 在 过去 的 时间 可能不 正确
 建议 使用 来自 localtime  结果的 tmgmtoff  和 tmzone  来获取 时区 信息
 参见 模块 datetime  更多 面向对象 的 日期和时间 接口
 模块 locale  国际化 服务
 区域设置 会影响 strftime  和 strptime  中 许多 格式 说明符 的 解析
 模块 calendar  一般 日 历 相关 功能
 这个模块 的 timegm  是 函数 gmtime  的 反 函 数
 脚注1 现 在 不 推荐 使用 z  但是 所有 ansi  c  库 都 不支持 扩展 为 首选 小 时 分 钟 偏移量 的 z  转义 符
 此外 严格 的1982 年 原始 rfc 822 标准 要求 两 位 数 的 年份 y  而不是 y  但是 实际 在2000 年 之前 很 久 就 转 移 到 了4 位 数 年
 之后 rfc 822 已经 废 弃 了4 位 数 的 年份 首先 被 推荐 rfc 1123 然后 被 rfc 2822 强制 执行
socketserver  a  framework  for  network  servers
server  creation  notes
 在3
7 版更改 socketserver
serverclose  and  socketserver
serverclose  now  waits  until  all  child  processes  and  nondaemonic  threads  complete
server  对象
 在3
3 版更改 added  serviceactions  call  to  the  serveforever  method
3
3 新版功能
 在3
6 版更改 now  only  called  for  exceptions  derived  from  the  exception  class
 在3
6 版更改 support  for  the  context  manager  protocol  was  added
request  handler  objects
 在3
6 版更改 streamrequesthandler
wfile  also  supports  the  io
 示例
socketservertcpserver  example
socketserverudpserver  example
asynchronous  mixins
 传输 和 协议
 传输
 源码 libasynciotransports
py  传输 属于 asyncio  模块中的 类 用来 抽象 各种 通信 通道
 传输 对象 总是 由 异步 io  事件循环 实例化
 异步 io  实现 tcp 、 udp 、 ssl  和 子进程 管道 的 传输
 传输 上可用 的 方法 由 传输的 类型 决定
 传输 类 属于 线程 不安全
 传输 层级
basetransport  所有 传输的 基类
 包含所 有 异步 io  传输 共 用 的 方法
writetransportbasetransport  只 写 链接 的基础 传输
 writetransport  类的实例 由 loop
connectwritepipe  事件循环方 法 返回 也 被 子进程 相关的 方法 如 loop
subprocessexec  使用
readtransportbasetransport  只读 链接 的基础 传输
 readtransport  类的实例 由 loop
connectreadpipe  事件循环方法 返回 也 被 子进程 相关的 方法 如 loop
subprocessexec  使用
transportwritetransport  readtransport  接口 代表一个 双 向 传输 如 tcp  链接
 用户 不 用 直接 实例化 传输 调用 一个 功能 函数 给 它 传递 协议 工厂 和 其 它 需 要 的 信息 就可以 创建 传输 和 协议
 传输 类实例 由 如 loop
createconnection 、 loop
createunixconnection 、 loop
createserver 、 loop
sendfile  等 这 类 事件循环方法 使用 或 返回
datagramtransportbasetransport  数据 报 udp  传输 链接
 datagramtransport  类实例 由 事件循环方法 loop
createdatagramendpoint  返回
subprocesstransportbasetransport  表示 父 进程 和 子进程 之间 连接 的 抽象
 subprocesstransport  类的实例 由 事件循环方法 loop
subprocessshell  和 loop
subprocessexec  返回
 基础 传输
 只读 传输
 只 写 传输
 数据 报 传输
sendtodata  addrnone  将 data  字节串 发送到 addr  基于 传输的 目标 地址 所 给定的 远 端 对 等 方
 如果 addr  为 none  则 将 数据 发送到 传输 创建时 给定的 目标 地址
 此方法 不 会阻塞 它 会 缓冲 数据并 安排 其 被 异步 地 发出
abort  立即 关闭 传输 不 会等待 已 提交 的 操作 执行 完毕
 已 缓存 的 数据 将 会 丢失
 不 会 接收 更多的 数据
 协议 的 protocol
connectionlost  方法 最终 将 附带 none  作为参数 被调用
 子进程 传输
getpid  将 子进程 的 进程 id  以 整数 形式返回
getpipetransportfd  返回 对应于 整数 文件描述符 fd  的 通信 管道 的 传输0 标准输入 stdin  的 可读 流式 传输 如果 子进程 创建时 未 设置 stdinpipe  则 为 none 1 标准输出 stdout  的 可 写 流式 传输 如果 子进程 创建时 未 设置 stdoutpipe  则 为 none 2 标准错误 stderr  的 可 写 流式 传输 如果 子进程 创建时 未 设置 stderrpipe  则 为 none  其他 fd  nonesubprocesstransport
getreturncode  返回 整数 形式 的 进程 返回 码 或者如果 还 未 返回 则 为 none  这 类似于 subprocess
returncode  属性
kill  杀 死 子进程
 在 posix  系统中 函数 会 发送 sigkill  到 子进程
 在 windows  中 此方 法 是 terminate  的别名
 另请参 见 subprocess
sendsignalsignal  发送 signal  编号 到 子进程 与 subprocess
sendsignal  一 样
terminate  停止 子进程
 在 posix  系统中 此方法会 发送 sigterm  到 子进程
 在 windows  中 则 会 调用 windows  api  函数 terminateprocess  来 停止 子进程
 另请参 见 subprocess
close  通过调用 kill  方法来 杀 死 子进程
 如果 子进程 尚未 返回 并 关闭 stdin  stdout  和 stderr  管道 的 传输
 协议
 源码 libasyncioprotocols
pyasyncio  提供了一 组 抽象基类 它们 应当被 用于实现 网络 协议
 这些类 被设计为 与 传输 配合 使用
 抽象 基础 协议 类 的子类 可以 实现 其中的 部分 或 全部 方法
 所有这些 方法都 是 回调 它们 由 传输 或 特定 事件 调用 例如 当 数据 被 接收 的时候
 基础 协议 方法 应当 由 相应的 传输 来 调用
 基础 协议
baseprotocol  带有 所有 协议 的 共享 方法 的基础 协议
protocolbaseprotocol  用于实现 流式 协议 tcp  unix  套接字 等等 的 基类
bufferedprotocolbaseprotocol  用于实现 可 对 接收 缓冲区 进行 手动 控制 的 流式 协议 的 基类
datagramprotocolbaseprotocol  用于实现 数据 报 udp  协议 的 基类
subprocessprotocolbaseprotocol  用于实现 与 子进程 通信 单 向 管道 的 协议 的 基类
 基础 协议
 所有 asyncio  协议 均可 实现 基础 协议 回调
 连接 回调 连接 回调 会 在所有 协议 上 被调用 每个 成功 的 连接 将 恰好 调用一次
 所有其他 协议 回调 只能 在以下 两个方法 之间 被调用
connectionmadetransport  连接 建立 时被调用
 transport  参数 是 代表 连接 的 传输
 此 协议 负责 将 引用 保存 至 对应的 传输
connectionlostexc  连接 丢失 或 关闭 时 将 被调用
 方法 的 参数 是 一个异常 对象 或 为 none
 后者 意味着 收到 了 常规 的 eof  或者 连接 被 连接 的 一 端 取消 或 关闭
 流 程控制 回调 流 程控制 回调 可 由 传输 来 调用 以 暂 停 或 恢复 协议 所 执行 的 写入 操作
 请查看 setwritebufferlimits  方法 的 文档 了解详情
pausewriting  当 传输的 缓冲区 升 至 高 水 位 以 上 时 将 被调用
resumewriting  当 传输的 缓冲区 降 到 低 水 位 以 下 时 将 被调用
 如果 缓冲区大小 等于 高 水 位 值 则 pausewriting  不会被 调用 缓冲区大小 必须 要 高 于 该值
 相反 地 resumewriting  会 在 缓冲区大小 等于 或 小于 低 水 位 值 时被调用
 这些 结束 条件 对 于 当 两个 水 位 取 零值 时 也 能 确保 符合 预期的 行为 是 很重要 的
 流式 协议
 事件 方法 例如 loop
createserver  loop
createunixserverloop
createconnection  loop
createunixconnectionloop
connectacceptedsocket  loop
connectreadpipe  和 loop
connectwritepipe  都 接受 返回 流式 协议 的工厂
datareceiveddata  当 收到 数据 时被调用
 data  为 包含 入 站 数据 的 非空 字节串对象
 数据 是否 会 被 缓冲、 分块 或 重 组 取决于 具体 传输
 通常 你 不应 依赖于 特定 的 语义 而 应 使 你 的 解析 具有 通 用 性 和 灵活 性
 但是 数据 总是 要 以 正确的 顺 序 被 接收
 此方法 在 连接 打开 期间 可以 被调用 任意 次 数
 但是 protocol
eofreceived  最多 只会 被 调用一次
 一旦 eofreceived  被调用 datareceived  就 不会再 被调用
eofreceived  当 发出 信号 的另一 端 不再 继续 发送 数据 时 例如 通过调用 transport
writeeof  如果 另一 端 也 使用 asyncio  的话 被调用
 此方法 可能 返回 假值 包括 none  在此情况下 传输 将 会 自 行 关闭
 相反 地 如果此 方法 返回真值 将 以 所用的 协议 来确定 是否 要 关闭 传输
 由 于 默 认实现 是 返回 none  因此它 会 隐式地 关闭 连接
 某些 传输 包括 ssl  在 内 并 不支持 半 关闭 的 连接 在此情况下 从 该方法 返 回真值 将导致 连接 被关闭
 状态 机 start  connectionmade  datareceived  eofreceived  connectionlost  end
 缓冲 流 协议
3
7 新版功能
 带 缓冲 的 协议 可 与 任何 支持 流式 协议 的 事件循环方法 配合 使用
bufferedprotocol  实现 允许 显式 手动 分配 和 控制 接收 缓冲区
 随后 事件循环 可以使用 协议 提供的 缓冲区 来避免 不 必要的 数据 复制
 这 对 于 接收 大量 数据 的 协议 来说 会 有 明显 的性能 提升
 复杂的 协议 实现 能 显 著 地 减少 缓冲区 分配 的数量
 以 下 回调 是 在 bufferedprotocol  实例 上 被调用 的 bufferedprotocol
getbuffersizehint  调用 后 会 分配 新 的 接收 缓冲区
 sizehint  是 推荐的 返回 缓冲区 最小 尺寸
 返回 小于 或 大于 sizehint  推荐 尺寸 的 缓冲区 也是 可接受 的
 当 设 为1 时 缓冲区 尺寸 可以是 任意 的
 返回 尺寸 为零 的 缓冲区 则 是 错误 的
 getbuffer  必须返回 一个 实现了 缓冲区 协议 的 对象
bufferupdatednbytes  用 接收 的 数据 更新 缓冲区 时被调用
 nbytes  是 被 写入到 缓冲区 的 字节 总 数
eofreceived  请查看 protocol
eofreceived  方法 的 文档
 在 连接 期间 getbuffer  可以 被调用 任意 次 数
 但是 protocol
eofreceived  最多 只能 被 调用一次 如果 被调用 则 在 此 之后 getbuffer  和 bufferupdated  不 能 再 被调用
 状态 机 start  connectionmade  getbuffer  bufferupdated  eofreceived  connectionlost  end
 数据 报 协议
 子进程 协议
 数据 报 协议 实例 应当 由 传递给 loop
subprocessexec  和 loop
subprocessshell  方法 的 协议 工厂 来 构造
pipedatareceivedfd  data  当 子进程 向其 stdout  或 stderr  管道 写入 数据 时被调用
 fd  是 以 整数表示 的 管道 文件描述符
 data  是包含 已 接收 数据 的 非空 字节串对象
pipeconnectionlostfd  exc  与 子进程 通信 的 其中一个 管道 关闭 时被调用
 fd  以 整数表示 的 已 关闭 文件描述符
processexited  子进程 退出 时被调用
 示例
tcp  回显 服务器
 使用 loop
createserver  方法 创建 tcp  回显 服务器 发 回 已 接收 的 数据并 关闭 连接 import  asyncio  class  echoserverprotocolasyncio
runmain  参见 使用 流 的 tcp  回显 服务器 示例 使用了 高层级的 asyncio
startserver  函数
tcp  回显 客户端
 使用 loop
createconnection  方法 的 tcp  回显 客户端 发送 数据并 等待直到 连接 被关闭 import  asyncio  class  echoclientprotocolasyncio
runmain  参见 使用 流 的 tcp  回显 客户端 示例 使用了 高层级的 asyncio
openconnection  函数
udp  回显 服务器
 使用 loop
createdatagramendpoint  方法 的 udb  回显 服务器 发 回 已 接收 的 数据 import  asyncio  class  echoserverprotocol  def  connectionmadeself  transport  self
udp  回显 客户端
 使用 loop
createdatagramendpoint  方法 的 udp  回显 客户端 发送 数据并 在 收到 回 应 时 关闭 传输 import  asyncio  class  echoclientprotocol  def  initself  message  onconlost  self
 链接 已存在 的 套接字
 附带 一个 协议 使用 loop
createconnection  方法 等待直到 套接字 接收 数据 import  asyncio  import  socket  class  myprotocolasyncio
runmain  参见 使用 低层级的 loop
addreader  方法来 注册一个 fd  的 监视 文件描述符 以 读取 事件 示例
 使用 在 协程 中 通过 openconnection  函数创建 的高层级 流 的 注册一个 打 开 的 套接字 以 等待 使用 流 的 数据 示例
loopsubprocessexec  与 subprocessprotocol
 一个 使用 子进程 协议 来获取 子进程 的 输出 并 等待 子进程 退出 的 示例
 这 个 子进程 是 由 loop
subprocessexec  方法 创建 的 import  asyncio  import  sys  class  dateprotocolasyncio
rungetdate  printfcurrent  date  date  另请参阅 使用 高层级 api  编写 的 相同 示例
symbol  与 python  解析树 一起使用 的常量
 源代码 libsymbol
py  此模块提供 用于表示 解析树 内部 节点 数值 的常量
 与 大多数 python  不同 这些 常量 使用 小写 字符 名称
 请参阅 python  发行版 中 的 grammargrammar  文件 来获取 该 语言 语法 上下文中 对 这些 名称 的 定义
 这些 名称 所 映射 的特定 数字 值可能 会 在 python  版本 之间 更改
 警告 symbol  模块 已 弃用并将在 未来的 python  版本 中被移除
 此模块 还提供了 一个 额外的 数据 对象 symbol
symname  将 此 模块中定义的 常量 的 数值 映射 回 名称 字符串 的字典 允许 生成 更 加 人 类 可读的 解析树 表示
tkinter  tcltk  的 python  接口
tkinter  模块
 在大多数 时候 你 只需要 tkinter  就 足够 了 但也 有一些 额外的 模块 可 供 使用
tk  接口 位于 一个 名 字 tkinter  的 二进制 模块 当 中
 此模块 包含了 低层级的 tk  接口 它 不应该 被 应用程序 员 所 直接使用
 它 通常是 一个 共享库 或 dll  但 在某些 情况下 也可能 被 静态 链接到 python  解释器
 除了 tk  接口 tkinter  也 包含了 若 干 python  模块 tkinter
constants  是 其 中 最 重要的
 导入 tkinter  会自动 导入 tkinter
constants  所 以 要使用 tkinter  通常 你 只需要 一条 简单的 import  语句 import  tkinter  或者 更 常用的 from  tkinter  import  class  tkinter
tkscreennamenone  basenamenone  classnametk  usetk 1 tk  类 被初始化 时 无 参数
 此 时 会创建一个 tk  顶 级 控件 通常是 应用程序 的 主 窗口
 每个 实例 都 有自己 关联的 tcl  解释器
tclscreennamenone  basenamenone  classnametk  usetk 0 tcl  函数 是一个 工厂函数 它 创建 的 对象 与 tk  类 创建 的 对象 非常 相 似 只是 它 不 初始化 tk  子 系统
 在 不 想 创建 或 无法 创建 如 没有 x  server  的 unixlinux  系统 额外的 顶 层 窗口 的 环境中 驱 动 tcl  解释器 时 这一点 非常有用
 由 tcl  对象 创建 的 对象 可以通过 调用 其 loadtk  方法 来创建 顶 层 窗口 并 初始化 tk  子 系统
 提供 tk  支持 的 其他模块 包括 tkinter
colorchooser  让 用户 选择 颜色 的 对话框
commondialog  在 此处 列出 的其他 模块中定义的 对话框的 基类
tkinter  life  preserver
how  to  use  this  section
a  simple  hello  world  program
a  very  quick  look  at  tcltk
 注释 these  classes  are  provided  for  the  purposes  of  organizing  certain  functions  under  one  namespace
 例如 button 
mapping  basic  tk  into  tkinter
how  tk  and  tkinter  are  related
handy  reference
setting  options
 索引 意义 示例0 选项 名称 relief 1 数据库 查找 的 选项 名称 relief 2 数据库 查找 的 选项 类 relief 3 默认值 raised 4 当前 值 groove  示例 printfred
the  packer
packer  options
ipadx  和 ipady  a  distance  designating  internal  padding  on  each  side  of  the  slave  widget
padx  和 pady  a  distance  designating  external  padding  on  each  side  of  the  slave  widget
coupling  widget  variables
 例如 import  tkinter  as  tk  class  apptk
the  window  manager
tk  option  data  types
 位 图 there  are  eight  builtin  named  bitmaps  error  gray 25 gray 50 hourglass  info  questhead  question  warning
callback  回调 this  is  any  python  function  that  takes  no  arguments
bindings  and  events
 the  form  of  the  bind  method  is  def  bindself  sequence  func  addwhere  序列 is  a  string  that  denotes  the  target  kind  of  event
 例如 def  turnredself  event  event
 tk  tkinter  event  field  tk  tkinter  event  field  f  焦 点 a  char  h  height  e  sendevent  k  keycode  k  keysym  s  状 况 n  keysymnum  t  time  t  类型 w  宽度 w  widget  x  x  x  xroot  y  y  y  yroot 
the  index  parameter
images
 参见 the  pillow  package  adds  support  for  formats  such  as  bmp  jpeg  tiff  and  webp  among  others
file  handlers
zipapp  manage  executable  python  zip  archives
3
5 新版功能
 the  module  provides  both  a  命令行接口 and  a  python  api
basic  example
the  following  example  shows  how  the  命令行接口 can  be  used  to  createan  executable  archive  from  a  directory  containing  python  code
 whenrun  the  archive  will  execute  the  main  function  from  the  modulemyapp  in  the  archive
 命令行接口
3
7 新版功能
python  api
3
7 新版功能 added  the  filter  and  compressed  arguments
 示例
specifying  the  interpreter
creating  standalone  applications  with  zipapp
making  a  windows  executable
caveats
the  python  zip  application  archive  format
fnmatch  unix  文件名 模式 匹配
 源代码 libfnmatch
py  此模块提供了 unix  shell  风格的 通 配 符 它们 并 不 等同于 正则表达式 关于 后者 的 文档 参见 re  模块
 shell  风格 通 配 符 所使用的 特殊 字符 如 下 模式 意义 匹配 所有 匹配任何 单个字符 seq  匹配 seq  中的任何 字符 seq  匹配任何 不 在 seq  中 的 字符 对 于 字面值 匹配 请 将 原 字符 用 方括号 括 起来
 例如 将 匹配字符
 注意 文件名 分隔符 unix  上 为 不 是 此模块 所 特 有 的
 请参见 glob  模块 了解 文件名 扩展 glob  使用 filter  来 匹配 文件名 的 各个 部分
 类似地 以 一个 句 点 打头 的文件名 也不 是 此模块 所 特 有 的 可以通过 和 模式 来 匹配
fnmatchfilename  pattern  检测 filename  字符串 是否 匹配 pattern  字符串 返回 true  或 false
 两个 形参 都会 使用 os
normcase  进行 大小写 正 规 化
 fnmatchcase  可被用于 执行 大小写 敏感 的 比较 无论 这 是否为 所 在 操作 系统 的 标准
 这个例子 将打印 当前目录 下 带有 扩展名
txt  的 所有 文件名 import  fnmatch  import  os  for  file  in  os
fnmatchcasefilename  pattern  检测 filename  是否 匹配 pattern  返回 true  或 false  此 比较 是 大小写 敏感 的 并且不 会 应用 os
filternames  pattern  返回 names  列表中 匹配 pattern  的 子集
 它 等价于 n  for  n  in  names  if  fnmatchn  pattern  但 其 实现 更 为 高效
translatepattern  返回 shell  风格 pattern  转换成 的正则表达式 以便 用 于 re
 示例 import  fnmatch  re  regex  fnmatch
txt  参见 模块 glob  unix  shell  风格 路径 扩展
telnetlib  telnet  client
 在3
6 版更改 context  manager  support  added  参见 rfc 854 telnet  protocol  specification  definition  of  the  telnet  protocol
telnet  objects
close  关闭 连接 对象
 在3
3 版更改 this  method  used  to  raise  socket
error  which  is  now  an  alias  of  oserror
telnet  example
doctest  测试 交互 性 的 python  示例
 源代码 libdoctest
pydoctest  模块 寻找 像 python  交互式 代码 的 文本 然后 执行 这些 代码 来 确保 它们的 确 就像 展示 的 那样 正确 运行 有许多 方法来 使用 doctest  通过 验证 所有 交互式 示例 仍然 按照 记录 的方式 工作 以 此 来 检查 模块的文档 字 符串 是否 是 最新的
 to  perform  regression  testing  by  verifying  that  interactive  examples  from  a  test  file  or  a  test  object  work  as  expected
 to  write  tutorial  documentation  for  a  package  liberally  illustrated  with  inputoutput  examples
 depending  on  whether  the  examples  or  the  expository  text  are  emphasized  this  has  the  flavor  of  literate  testing  or  executable  documentation
 下面是一个 小 却 完整的 示例 模块 this  is  the  example  module
 the  example  module  supplies  one  function  factorial
 for  example  factorial 5120 def  factorialn  return  the  factorial  of  n  an  exact  integer 0
 factorialn  for  n  in  range 6112624120 factorial 30265252859812191058636308480000000 factorial 1 traceback  most  recent  call  last 
 valueerror  n  must  be 0 factorials  of  floats  are  ok  but  the  float  must  be  an  exact  integer  factorial 30
1 traceback  most  recent  call  last 
 valueerror  n  must  be  exact  integer  factorial 30
0265252859812191058636308480000000 it  must  also  not  be  ridiculously  large  factorial 1 e 100 traceback  most  recent  call  last 
 overflowerror  n  too  large  import  math  if  not  n 0 raise  valueerrorn  must  be 0 if  math
floorn  n  raise  valueerrorn  must  be  exact  integer  if  n 1 n  catch  a  value  like 1 e 300 raise  overflowerrorn  too  large  result 1 factor 2 while  factor  n  result  factor  factor 1 return  result  if  name  main  import  doctest  doctest
testmod  如果你 直接 在命令行 里 运行 example
py  doctest  将 发 挥 他 的作用
 python  example
 简单 用 法 检查 docstrings  中 的 示例
 开始 使用 doctest  的 最简单 方法 但 不一定 是 你 将 继续 这样做 的 方式是 结束 每个模块 m  使用 if  name  main  import  doctest  doctest
simple  usage  checking  examples  in  a  text  file
how  it  works
which  docstrings  are  examined
how  are  docstring  examples  recognized
whats  the  execution  context
what  about  exceptions
option  flags
3
4 新版功能 the  o  command  line  option
 在3
2 版更改 ignoreexceptiondetail  now  also  ignores  any  information  relating  to  the  module  containing  the  exception  under  test
3
4 新版功能
directives
 警告
 another  is  to  do  d  sortedfoo  d  harry  hermione  注解 before  python 3
basic  api
 for  a  lessformal  introduction  to  these  two  functions  see  sections  简单 用 法 检查 docstrings  中 的 示例 and  simple  usage  checking  examples  in  a  textfile
unittest  api
 在3
5 版更改 doctestsuite  returns  an  empty  unittest
advanced  api
doctest  对象
example  objects
doctestfinder  对象
doctestparser  对象
doctestrunner  对象
outputchecker  对象
 调试
soapbox
formatfail  total  脚注1 examples  containing  both  expected  output  and  an  exception  are  not  supported
gzip  对 gzip  格式 的 支持
 用法示例
 读取 压缩文件 示例 import  gzip  with  gzip
read  创建 gzip  文件 示例 import  gzip  content  blots  of  content  here  with  gzip
writecontent  使用 gzip  压缩 已有的 文件 示例 import  gzip  import  shutil  with  openhomejoefile
copyfileobjfin  fout  使用 gzip  压缩 二进制 字符串 示例 import  gzip  sin  blots  of  content  here  sout  gzip
compresssin  参见 模块 zlib  支持 gzip  格式 所 需要 的基本 压缩 模块
 命令行界面
gzip  模块提供了 简单的 命令行界面 用 于 压缩和解压 缩文件
 在 执行 后 gzip  模块 会保留 输入 文件
 在3
8 版更改 添加 一个带有 用 法 说明 的 新 命令行界面 命令
 默认情况下 当你 要执行 cli  时 默认 压缩 等级 为6
 命令行选项
file  如果 file  未指定 则 从 sys
stdin  读取
fast  指明 最 快速 的 压缩 方法 较 低 压缩 率
best  指明 最 慢 速 的 压缩 方法 最高 压缩 率
d  decompress  解压缩 给定的 文件
h  help  显示 帮助消息
atexit  退出 处理器
atexit  模块定义了 清理 函数 的 注册 和 反 注册 函数
 被 注册的 函数 会 在 解释器 正常 终止 时 执行
 atexit  会 按照 注册 顺序 的 逆 序 执行 如果你 注册 了 ab  和 c  那么 在 解释器 终止 时 会 依 序 执行 c  b  a
 注意 通过 该模块 注册的 函数 在 程序 被 未被 python  捕获 的 信号 杀 死 时 并不会 执行 在 检测到 python  内部 致 命 错误 以及 调用 了 os
exit  时 也 不会执行
 在3
7 版更改 当 配合 capi  子 解释器 使用 时 已 注册 函数 是 它们所 注册 解释器中 的局部 对象
registerfunc  args  kwargs  将 func  注册 为 终止 时 执行 的 函数
 任何 传给 func  的 可选的 参数都 应 当 作为参数 传给 register
 可以 多次 注册 同样的 函数 及 参数
 在 正常的 程序 终止 时 举例来说 当 调用 了 sys
exit  或 是 主模块 的 执 行 完成 时 所有 注册 过 的 函数 都会 以 后 进先出 的顺序 执行
 这样做 是 假定 更 底层 的 模块 通常会 比 高层 模块 更早 引入 因此 需要更 晚 清理
 如果在 exit  处理程序 执行 期间 引发了 异常 将 会打印 回溯 信息 除非 引发 的 是 systemexit  并且 异常 信息 会 被 保存
 在所有 exit  处理程序 获得 运行 机 会 之后 所引发的 最后一个 异常会被 重新引发
 这个函数 返回 func  对象 可以把 它 当 作 装饰器 使用
unregisterfunc  从 解释器 关闭 前 要 运行 的 函数 列表 中移除 func
 在 调用 unregister  之后 当 解释器 关闭 时 会 确保 func  不会被 调用 即使 它 被 多次 注册
 如 果 func  之前 没有 被 注册 unregister  会 静默地 不 做 任何 操作
 参见 模块 readline  使用 atexit  读写 readline  历史文件 的 有用的 例子
atexit  示例
 以 下 简单 例子演示了 一个 模块 在 被导入 时 如何从 文件 初始化 一个 计数器 并 在 程序 终结 时 自动 保存 计数器 的 更新 值 此操作 不 依赖于 应用 在 终结 时 对 此模块 进行 显式 调用
 try  with  opencounterfile  as  infile  count  intinfile
registersavecounter  位置 和 关键字参数 也可 传入 register  以便 传递给 被调用 的 已 注册 函数 def  goodbyename  adjective  printgoodbye  s  it  was  s  to  meet  you
registergoodbye  adjectivenice  namedonny  作为 decorator  使用 import  atexit  atexit
 只有在 函数 不需要 任何 参数调用 时 才能 工作
winsound  soundplaying  interface  for  windows
 all  win 32 systems  support  at  least  the  following  most  systems  support  many  more  playsound  name  corresponding  control  panel  sound  name  systemasterisk  asterisk  systemexclamation  exclamation  systemexit  exit  windows  systemhand  critical  stop  systemquestion  question  例如 import  winsound  play  windows  exit  sound
 注解 this  module  does  not  support  playing  from  a  memory  image  asynchronously  so  a  combination  of  this  flag  and  sndasync  will  raise  runtimeerror
 注解 this  flag  is  not  supported  on  modern  windows  platforms
 注解 this  flag  is  not  supported  on  modern  windows  platforms
uu  对 uuencode  文件进行 编码与解码
posix  最常见的 posix  系统调用
 此模块提供了 对 基于 c  标准 和 posix  标准 一种 稍 加 修改 的 unix  接口 进行 标准 化 的 系统 功能 的 访问
 请 勿 直接 导入 此模块
 而 应 导入 os  模块 它 提供了 此 接口 的 可移植 版本
 在 unix  上 os  模块提供了 posix  接口 的 一个 超 集
 在 非 unix  操作系统 上 posix  模块 将 不可用 但 会通过 os  接口 提供 它 的 一个 可 用 子集
 一旦 导入 了 os  用 它 替代 posix  时就 没有 性能 惩 罚
 此外 os  还 提供了一些 附加 功能 例如 在 os
environ  中 的某个 条目 被修改 时 会自动 调用 putenv
 错误 将作为 异常 被 报告 对 于 类型 错误 会 给出 普通 异常 而 系统调用 所 报告 的 异常 则会引发 oserror
 大 文件 支持
 某些 操作系统 包括 aix  hpux  irix  和 solaris  可 对 int  和 long  为32 位 值 的 c  编程 模 型 提供 大于2 gib  的 文件 的 支持
 这 在 通常情况下 是 以 将 相关 数据 长度 和 偏移 类型 定义为64 位 值 的方式来 实现 的
 这样的 文件 有 时 被称为 大 文件
python  中 的 大 文件 支持 会 在 offt  的大小 超过 long  且 long  long  至少 与 offt  一样 大 时 被 启用
 要 启用 此 模式 可能 必须在 启用 特定 编译 旗标 的情况下 执行 python  配置 和 编译
 例如 在 最近 几个 版本 的 irix  中 默认 启用 了 大 文件 支持 但 在 solaris 2
6 和2
7 中 你 还需要 执行 这样的 操作 cflagsgetconf  lfscflags  optg  o 2 cflags 
configure  在 支持 大 文件 的 linux  系统中 可以 这样做 cflagsdlargefile 64 source  dfileoffsetbits 64 optg  o 2 cflags 
 重要的 模块内容
 除了 os  模块 文档 已 说明 的 许多 函数 posix  还 定义了 下列 数据 项 posix
environ  一个 表示 解释器 启动 时间 点 的 字符串 环境 的字典
 键和值 的 类型 在 unix  上 为 bytes  而 在 windows  上 为 str
 例如 environbhome  windows  上 的 environhome  是 你 的 家 目录 的 路径名 等价于 c  中 的 getenvhome
 修改 此 字典 不 会影响 由 execv  popen  或 system  所 传入的 字 符串 环境 如果你需要 修改 环境 请 将 environ  传给 execve  或者 为 system  或 popen  的 命令 字符串 添加 变量 赋值 和 export  语句
 在3
2 版更改 在 unix  上 键和值 为 bytes  类型
 注解 os  模块提供了 对 environ  的替代 实现 它会在 被修改 时 更新 环境
 还要注意 更新 os
environ  将导致 此 字典 失效
 推荐 使 用这个 os  模 块 版本 而不是 直接访问 posix  模块
 网络 和 进程 间 通信
concurrent  包
 目前 此 包 中 只有一个 模块 concurrent
futures —— 启动 并 行 任务
zipfile  使用 zip  存档
 源代码 libzipfile
pyzip  文件格式 是一个 常用的 归档 与 压缩 标准
 这 个 模块提供了 创建、 读取、 写入、 添加 及 列出 zip  文件 的工具
 任何对 此模块 的 进 阶 使用 都 将 需要 理解 此 格式 其 定义 参见 pkzip  应用程序 笔 记
 此模块 目前 不 能 处理 分 卷 zip  文件
 它可以 处理 使用 zip 64 扩展 超过4 gb  的 zip  文件 的 zip  文件
 它 支持 解 密 zip  归档 中 的 加密 文件 但是 目前 不 能 创建一个 加密 的 文件
 解 密 非常 慢 因为它 是 使用 原生 python  而不是 c  实现 的
 这个模块 定义了以下 内容 exception  zipfile
badzipfile  为 损坏 的 zip  文件 抛出 的 错误
3
2 新版功能
badzipfile  badzipfile  的别名 与 旧版本 python  保持 兼容性
3
2 版后已移除
largezipfile  当 zip  文件 需要 zip 64 功能 但是 未 启用 时 会抛出 此 错误
zipfile  用 于 读写 zip  文件 的 类
 欲 了解 构造函数 的描述 参阅 段落 zipfile  对象
path  用 于 zip  文件 的 兼容 pathlib  的 包装器
 详情参见 path  对象
3
8 新版功能
pyzipfile  用于创建 包含 python  库 的 zip  归档 的 类
zipinfofilenamenoname  datetime 198011000 用于表示 档案 内 一个 成员 信息 的 类
 此 类的实例 会 由 zipfile  对象 的 getinfo  和 infolist  方法 返回
 大多数 zipfile  模块 的 用户 都 不必 创建 它们 只需 使用 此模块 所创建的 实例
 filename  应当 是 档案 成员的 全 名 datetime  应当 是包含 六 个 字段 的描述 最近 修改 时间 的 元组 这些 字段 的描述 请参阅 zipinfo  对象
iszipfilefilename  根据 文件 的 magic  number  如果 filename  是 一个有效的 zip  文件 则返 回 true  否则返回 false
 filename  也可能 是一个 文件 或 类 文件 对 象
 在3
1 版更改 支持 文件 或 类 文件对象
zipstored  未被 压缩 的归档 成员的 数字 常 数
zipdeflated  常用的 zip  压缩 方法 的 数字 常 数
 需要 zlib  模块
zipbzip 2 bzip 2 压缩 方法 的 数字 常 数
 需要 bz 2 模块
3
3 新版功能
ziplzma  lzma  压缩 方法 的 数字 常 数
 需要 lzma  模块
3
3 新版功能
 注解 zip  文件格式 规范 包括 自2001 年 以 来 对 bzip 2 压缩 的 支持 以及 自2006 年 以 来 对 lzma  压缩 的 支持
 但是 一 些工具 包括 较 旧 的 python  版本 不支持 这些 压缩 方法 并且 可能 拒 绝 完全 处理 zip  文件 或者 无法 提取 单个 文件
 参见 pkzip  应用程序 笔 记 phil  katz  编写 的 zip  文件格式 文档 此 格式 和 使用 的 算法的 创建 者
 infozip  主 页 有关 infozip  项目的 zip  存档 程序 和 开发 库 的 信息
zipfile  对象
path  对象
pyzipfile  对象
pyzipfile  构造器接受 与 zipfile  构造器 相同 的 形参 以及 一个 额外的 形参 optimize
pyzipfilefile  moder  compressionzipstored  allowzip 64 true  optimize 13
2 新版功能 optimize  形参
 在3
4 版更改 默认 启用 zip 64 扩展
 实例 在 zipfile  对象 所 具有 的 方法 以 外还 附加 了 一个 方法 writepypathname  basename  filterfuncnone  查找
py  文件 并 将 相应的 文件 添加到 归档
 如果 pyzipfile  的 optimize  形参 未 给定 或 为1 则 相应的 文件 为
pyc  文件 并 在必要时 进行 编译
 如果 pyzipfile  的 optimize  形参 为01 或2 则 限 具有 相应 优化 级别 参见 compile  的 文件 会 被添加到 归档 并 在必要时 进行 编译
 如果 pathname  是 文件 则 文件名 必须 以
py  为 后缀 并且 只有 相应的
pyc  文件 会 被添加到 最高层级 不带 路径 信息
 如果 pathname  不 是 以
py  为 后缀 的 文件 则将引发 runtimeerror
 如果它 是 目录 并且 该 目录 不是一个 包 目录 则 所有的
pyc  文件 会 被添加到 最高层级
 如果 目录 是一个包 目录 则 所有的
pyc  会 被添 加到 包 名 所 表示 的 文件 路径 下 并且 如果有 任何 子目录 为 包 目录 则 会 以 排 好 的顺序 递归地 添加 这些 目录
 basename  仅限 在内部 使用
 如果给定 filterfunc  则 它 必须是一个 接受 单个 字符串 参数的函数
 在 将 其 添加到 归档 之前 它将被 传入 每个 路径 包括 每个 单独 的完整 路径
 如果 filterfunc  返回 假值 则 路径 将不会 被添加 而 如果它 是 一 个 目录 则 其内容 将被忽略
 例如 如果我们 的 测试 文件 全 都 位于 test  目录 或 以 字符串 test  打头 则 我们可以 使用 一个 filterfunc  来 排除 它们 zf  pyzipfilemyprog
writepymyprog  filterfuncnotests  writepy  方法 会产生 带有 这样 一些 文件名 的归档 string
myfile 3
4 新版功能 filterfunc  形参
 在3
2 版更改 pathname  形参 接受一个 pathlike  object
 在3
7 版更改 递归 排序 目录 条目
zipinfo  对象
zipinfo  类的实例 会通过 getinfo  和 zipfile  对象 的 infolist  方法 返回
 每个 对象 将 存储 关于 zip  归档 的 一个 成员的 信息
 有 一个 类 方法可以 为 文件系统 文件 创建 zipinfo  实例 classmethod  zipinfo
fromfilefilename  arcnamenone  stricttimestampstrue  为 文件系统 中的文件 构造一个 zipinfo  实例并 准备 将 其 添加到 一个 zip  文件
 filename  应 为 文件系统 中 某个 文件 或 目录 的 路径
 如果指定了 arcname  它 会 被用作 归档 中 的 名称
 如果未指定 arcname  则 所 用 名称 与 filename  相同 但 将 去除 任何 驱 动器 盘 符 和 打头 的 路径 分隔符
 stricttimestamps  参数 在 设 为 false  时 允许 压缩 早 于19800101 的 文件 代 价 时 会 将 时间戳 设 为19800101
 类似 的 行为 也会 对 晚 于21071231 的 文件 发生 时间戳 也会 被设为 该 上限 值
3
6 新版功能
 在3
2 版更改 filename  形参 接受一个 pathlike  object
3
8 新版功能 stricttimestamps  仅限 关键字参数 实例 具有 下列 方法和属性 zipinfo
isdir  如果此 归档 成员 是一个 目录 则返回 true
 这 会 使用 条目 的 名称 目录 应当 总是 以 结尾
3
6 新版功能
filename  归档 中的文件 名称
datetime  上 次 修改 存档 成员的 时间 和 日期
 这是 六 个 值 的 元组 索引 值0 year 19801 月1 为基数2 月 份 中 的 日期1 为基数3 小 时0 为基数4 分 钟0 为基数5 秒0 为基数 注解 zip  文件格式 不支持1980 年 以 前 的 时间戳
compresstype  归档 成员的 压缩 类型
comment  bytes  对象 形式 的 单个 归档 成员的 注释
extra  扩展 字段 数据
 pkzip  application  note  包含 一些 保存 于 该 bytes  对象 中 的 内部 结构 的 注释
createsystem  创建 zip  归档 所用的 系统
createversion  创建 zip  归档 所用的 pkzip  版本
extractversion  需要 用来 提取 归档 的 pkzip  版本
reserved  必须为 零
flagbits  zip  标志 位
volume  文件 头 的 分 卷 号
internalattr  内部 属性
externalattr  外部 文件 属性
headeroffset  文件 头 的 字节 偏移量
crc  未 压缩文件 的 crc 32
compresssize  已 压缩数据 的大小
filesize  未 压缩文件 的大小
 命令行界面
zipfile  模块提供了 简单的 命令行接口 用 于 与 zip  归档 的 交互
 如果你想要 创建一个新的 zip  归档 请 在 c  选项 后 指定 其 名称 然后 列出 应当被 包含的 文件名 python  m  zipfile  c  monty
txt  传入一个 字典 也是 可接受 的 python  m  zipfile  c  monty
zip  lifeofbrian 1979 如果你想要 将 一个 zip  归档 提取 到 指定 的 目录 请使用 e  选项 python  m  zipfile  e  monty
zip  targetdir  要获取 一个 zip  归档 中的文件 列表 请使用 l  选项 python  m  zipfile  l  monty
 命令行选项
l  zipfilelist  zipfile  列出 一个 zipfile  中 的文件名
 sourcen  基于 源文件 创建 zipfile
e  zipfile  outputdirextract  zipfile  outputdir  将 zipfile  提取 到 目标 目录中
t  zipfiletest  zipfile  检测 zipfile  是否 有效
 解压缩 的 障 碍
zipfile  模块 的 提取 操作 可能会 由 于 下 面列出的 障 碍 而 失败
 由 于 文件 本身
 解压缩 可能 由 于 不 正确的 密码 crc  校 验 和 zip  格式 或 不受支持 的 压缩 解 密 方法 而 失败
 文件系统 限制
 超出 特定 文件系统 上 的 限制 可能 会导致 解压缩 失败
 例如 目录 条目 所 允许 的 字符、 文件名 的长度、 路径名 的长度、 单个 文件 的大小 以及 文件 的数量 等等
 资源 限制
 缺 乏 内存 或 磁盘 空间 将 会导致 解压缩 失败
 例如 作用于 zipfile  库 的 解压缩 炸 弹 即 zip  bomb  就 可能 造成 磁盘 空间 耗 尽
 中断
 在 解压缩 期间 中断 执行 例如 按下 ctrlc  或 杀 死 解压缩 进程 可能 会导致 归档 文件 的 解压缩 不完整
 提取 的 默认行为
 不 了解 提取 的 默认行为 可能导致 不 符合 期望的 解压缩 结果
 例如 当 提取 相同 归档 两次 时它会 不 经 询 问 地 覆盖 文件
dataclasses  数据类
 源码 libdataclasses
py  这个模块 提供了一个 装饰器 和 一些 函数用于 自动 添加 生成 的 specialmethods  例如 init  和 repr  到 用户定义的 类
 它 最初 描述 于 pep 557
 在这些 生成 的 方法 中使用的 成员 变量 使用 pep 526 类型 注释 定义
 例如 这 段 代码 from  dataclasses  import  dataclass  dataclass  class  inventoryitem  class  for  keeping  track  of  an  item  in  inventory
quantityonhand  除 其他 事情 外 将 添加 init  其 看起来 像 def  initself  name  str  unitprice  float  quantityonhand  int 0 self
quantityonhand  quantityonhand  请注意 此方法 会自动 添加到 类 中 它 不会在 上面 显示 的 inventoryitem  定义 中 直接 指定
3
7 新版功能
 模块级 装饰器、 类和函数
 初始化 后 处理
 生成 的 init  代码 将 调用 一个名为 postinit  的 方法 如果在 类 上 已经 定义了 postinit 
 它通常 被称为 self
postinit 
 但是如果 定义了 任何 initvar  字段 它们也 将 按照 它们在 类 中定义的 顺序 传递给 postinit 
 如果没有 init  方法 生成 那么 postinit  将 不会被 自动 调用
 在其他 用 途 中 这允许 初始化 依赖于 一个或多个 其他 字段 的 字段 值
 例如 dataclass  class  c  a  float  b  float  c  float  fieldinitfalse  def  postinitself  self
b  有关 将 参数 传递给 postinit  的 方法 请参阅 下面 有关 仅 初始化 变量 的 段落
 另请参阅 关于 replace  处理 initfalse  字段 的 警告
 类变量
 两个 地方 dataclass  实际 检查 字段 类型 的 之一 是 确定 字段 是否 是 如 pep 526 所定义的 类变量
 它 通过 检查 字段 的 类型 是否为 typing
classvar  来完成 此操作
 如果一个 字段 是一个 classvar  它将被 排除 在 考虑 范围 之外 并 被 数据类 机制 忽略
 这样的 classvar  伪 字段 不 会 由 模块级 的 fields  函数返回
 仅 初始化 变量
 另一个 dataclass  检查 类型 注解 地方 是为了 确定 一个 字段 是否 是一个 仅 初始化 变量
 它 通过 查看 字段 的 类型 是否为 dataclasses
initvar  类型 来实现
 如果一个 字段 是一个 initvar  它 被认为 是一个 称为 仅 初始化 字段 的 伪 字段
 因为它 不是一个 真正 的 字段 所 以 它 不会被 模块级 的 fields  函数返回
 仅 初始化 字段 作为参数 添加到 生成 的 init  方法 中 并 传递给 可选的 postinit  方法
 数据类 不 会 使用它们
 例如 假设 一个 字段 将 从 数据库 初始化 如果在 创建 类 时 未 提供 其 值 dataclass  class  c  i  int  j  int  none  database  initvardatabasetype  none  def  postinitself  database  if  self
lookupj  c  c 10 databasemydatabase  在这种情况下 fields  将 返回 i  和 j  的 field  对象 但 不包括 database 
 冻结 的 实例
 无法 创建 真正 不可变的 python  对象
 但是 通过将 frozentrue  传递给 dataclass  装饰器 你可以 模拟 不变 性
 在这种情况下 数据类 将 向 类 添加 setattr  和 delattr  方法
 些 方法 在 调用 时会引发 frozeninstanceerror 
 使用 frozentrue  时 会 有 很小 的性能 损 失 init  不 能 使用 简单的 赋值 来 初始化 字段 并 必须使用 object
 setattr 
 继承
 当 数组 由 dataclass  装饰器 创建 时它会 查看 反向 mro  中的所有 类 的 基类 即 从 object  开始 并且 对 于 它 找到 的 每个 数据类 将 该 基类 中 的 字段 添加到 字段 的 有 序 映射中
 添加 完 所有 基类 字段 后 它 会 将 自己的 字段 添加到 有 序 映射中
 所有 生成 的 方法都 将 使用 这种 组合 的 计算 的 有 序 字段 映射
 由 于 字段 是 按 插入顺序 排列 的因此 派生类 会 重载 基类
 一个例子 dataclass  class  base  x  any 15
0 y  int 0 dataclass  class  cbase  z  int 10 x  int 15 最后 的 字段 列表 依 次 是 x 、 y 、 z 
 x  的 最终 类型 是 int  如 类 c  中 所指定的 那样
 为 c  生成 的 init  方法 看起来 像 def  initself  x  int 15 y  int 0 z  int 10
 默认 工厂函数
 如果一个 field  指定了 一个 defaultfactory  当 需要 该 字段 的 默 认值 时 将 使用 零 参数调用 它
 例如要 创建 列表 的新实例 请使用 mylist  list  fielddefaultfactorylist  如果一个 字段 被 排除 在 init  之外 使用 initfalse  并且 字 段 也 指定 defaultfactory  则 默认 的 工厂函数 将 始终 从 生成 的 init  函数调用
 发生 这种情况 是因为 没有 其他方法 可以为 字段 提供 初 始 值
 可变的 默认值
python  在 类属性 中 存储 默认 成员 变量 值
 思 考 这个例子 不 使用 数据类 class  c  x  def  addself  element  self
x  请注意 类 c  的两个 实例 共享 相同 的 类变量 x  如 预期的 那样
 使用 数据类 如果 此 代码 有效 dataclass  class  d  x  list  def  addself  element  self
x  element  它 生成 的 代码 类似于 class  d  x  def  initself  xx  self
x  这 与 使用 类 c  的 原始 示例 具有相同的 问题
 也就是说 在 创建 类实例 时 没 有 为 x  指定 值 的 类 d  的两个 实例 将 共享 相同 的 x  副本
 由 于 数据类 只 使用 普通的 python  类 创建 因此 它们也 会 共享 此行为
 数据类 没有 通 用 的 方法来 检测 这种情况
 相反 如果 数据类 检测到 类型 为 list 、 dict  或 set  的 默认 参数 则会引发 typeerror 
 这是一个 部分 解决方案 但 它可以 防止 许多 常见 错误
 使用默认 工厂函数 是一种 创建 可变 类型 新实例 的 方法 并将其 作为 字段 的 默 认值 dataclass  class  d  x  list  fielddefaultfactorylist  assert  d
 异常
frozeninstanceerror  在 使用 frozentrue  定义 的数据类 上调用 隐式 定义 的 setattr  或 delattr  时引发
codeop  编译 python  代码
 源代码 libcodeop
pycodeop  模块提供了 可以 模拟 python  读取 执行 打印 循环 的 实 用 程序 就像 在 code  模块 中 一样
 因此 您 可能不 希望 直接使用 该模块 如果你想 在 程序 中包含 这样 一个 循环 你可能 需要使用 code  模块
 这 个 任务 有两个 部分1
 能够 判断 一 行 输入 是否 完成 了 一个 python  语句 简 而言 之 告诉 我们 是否 要 打印 或

 记住 用户 已 输入 了 哪些 future  语句 这样 后续的 输入 可以 在这些 语句 被 启 用 的 状态 下 被 编译
codeop  模块提供了 分别 以及 同时 执行 这两个 部分 的方式
 只 执行 前 一部分 codeop
compilecommandsource  filenameinput  symbolsingle  尝试 编译 source  这 应当 是一个 python  代码 字符串 并且 在 source  是有效的 python  代码 时返回 一个 代码对象
 在此情况下 代码对象 的 filename  属性 将 为 filename  其 默认值为 input
 如果 source  不 是 有效的 python  代码 而 是有效的 python  代码 的 一个 前缀 时 将 返回 none
 如果 source  存 在 问题 将 引发异常
 如果存在 无效的 python  语法 将 引 发 syntaxerror  而 如果存在 无效的 字面值 则将引发 overflowerror  或 valueerror
 symbol  参数 确定 source  是作为 一条 语句 对 应 默认值 single  作为 一系列 语句 exec  还是 作为一个 expression  eval  进行 编译
 任何其他 值 都 将导致 引发 valueerror
 注解 解析器 有可能 但 很 不 常见 会 在 到达 源码 结尾 之前 停止 解析 并 成功 输出 结果 在这种情况下 末尾 的符号 可能 会被忽略 而不是 引发错误
 例如 一个 反斜杠 加 两个 换行符 之后 可以 跟 随 任何 无 意义 的符号
 一旦 解析器 api  得到 改进 将 修正 这个问题
compile  这个类 的 实例 具有 call  方法 其 签名 与 内置函数 compile  相 似 区别在于 如果该 实例 编译 了 包含 future  语句 的 程序 文本 则 实 例 会‘ 记住’ 并 使用 已 生效 的 语句 编译 所有 后续 程序 文本
commandcompiler  这个类 的 实例 具有 call  方法 其 签名 与 compilecommand  相 似 区别在于 如果该 实例 编译 了 包含 future  语句 的 程序 文本 则 实 例 会‘ 记住’ 并 使用 已 生效 的 语句 编译 编译 所有 后续 程序 文本
xmlrpcclient  xmlrpc  client  access
 源代码 libxmlrpcclient
 警告 the  xmlrpc
 if  you  need  to  parse  untrusted  or  unauthenticated  data  see  xml  漏洞
 在3
5 版更改 for  https  uris  xmlrpc
client  now  performs  all  thenecessary  certificate  and  hostname  checks  by  default
 在3
3 版更改 the  usebuiltintypes  flag  was  added
 在3
8 版更改 the  headers  parameter  was  added
both  the  http  andhttps  transports  support  the  url  syntax  extension  for  http  basicauthentication  httpuserpasshostportpath
 the  userpassportion  will  be  base 64 encoded  as  an  http  authorization  header  andsent  to  the  remote  server  as  part  of  the  connection  process  wheninvoking  an  xmlrpc  method
 you  only  need  to  use  this  if  the  remoteserver  requires  a  basic  authentication  user  and  password
 if  an  httpsurl  is  provided  context  may  be  ssl
sslcontext  and  configures  thessl  settings  of  the  underlying  https  connection
the  returned  instanceis  a  proxy  object  with  methods  that  can  be  used  to  invokecorresponding  rpc  calls  on  the  remote  server
 if  the  remote  serversupports  the  introspection  api  the  proxy  can  also  be  used  to  querythe  remote  server  for  the  methods  it  supports  service  discovery  andfetch  other  serverassociated  metadata
types  that  are  conformablee
 that  can  be  marshalled  through  xml  include  the  following  andexcept  where  noted  they  are  unmarshalled  as  the  same  python  type  xmlrpc  类型 python  数据类型 boolean  bool  int  i 1 i 2 int  的范围 从2147483648 到2147483647
 值 将 获得 i 4 i 8 或者 int  标志
 biginteger  double  或 float  float
 值 将 获得 double  标志
 string  str  array  list  或 tuple  包含 整 合 元素
 数组 以 lists  形式返回
 struct  dict
iso 8601 datetime  或 datetime
 返回 的 类型 取决于 usebuiltintypes  和 usedatetime  标志 的 值
 base 64 binary  bytes  或 bytearray
 返回 的 类型 取决于 usebuiltintypes  标志 的 值
 nil  none  常量
 仅当 allownone  为 true  时才 允许 传递
 bigdecimal  decimal
 仅 返回 类型
 this  is  the  full  set  of  data  types  supported  by  xmlrpc
 在3
5 版更改 added  the  context  argument
 在3
6 版更改 added  support  of  type  tags  with  prefixes  e
 参见 xmlrpc  howto  a  good  description  of  xmlrpc  operation  and  client  software  in  several  languages
serverproxy  对象
 在3
5 版更改 instances  of  serverproxy  support  the  contextmanager  protocol  for  closing  the  underlying  transport
datetime  对象
binary  对象
fault  对象
protocolerror  对象
multicall  对象
convenience  functions
 在3
3 版更改 the  usebuiltintypes  flag  was  added
example  of  client  usage
example  of  client  and  server  usage
 脚注1 this  approach  has  been  first  presented  in  a  discussion  on  xmlrpc
smtplib  smtp  协议 客户端
 在3
3 版更改 支持 了 with  语句
 在3
3 版更改 sourceaddress  argument  was  added
3
5 新版功能 the  smtputf 8 extension  rfc 6531 is  now  supported
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socketclass  smtplib
 在3
3 版更改 增加了 context
 在3
3 版更改 sourceaddress  argument  was  added
 在3
4 版更改 the  class  now  supports  hostname  check  with  ssl
3
6 版后已移除 keyfile  and  certfile  are  deprecated  in  favor  of  context
 please  use  ssl
loadcertchain  instead  or  let  ssl
createdefaultcontext  select  the  systems  trusted  ca  certificates  for  you
 在3
9 版更改 if  the  timeout  parameter  is  set  to  be  zero  it  will  raise  a  valueerror  to  prevent  the  creation  of  a  nonblocking  socketlmtphost  portlmtpport  localhostnamenonesourceaddressnone  timeout  the  lmtp  protocol  which  is  very  similar  to  esmtp  is  heavily  based  on  the  standard  smtp  client
 在3
9 版更改 the  optional  timeout  parameter  was  added
 在3
4 版更改 smtpexception  became  subclass  of  oserrorexception  smtplib
3
5 新版功能
 参见 rfc 821 simple  mail  transfer  protocol  protocol  definition  for  smtp
smtp  objects
 在3
5 版更改 added  debuglevel 2
 注解 many  sites  disable  smtp  vrfy  in  order  to  foil  spammers
 在3
5 版更改 smtpnotsupportederror  may  be  raised  and  the  initialresponseok  parameter  was  added
3
5 新版功能
3
6 版后已移除 keyfile  and  certfile  are  deprecated  in  favor  of  context
 please  use  ssl
loadcertchain  instead  or  let  ssl
createdefaultcontext  select  the  systems  trusted  ca  certificates  for  you
 在3
3 版更改 增加了 context
 在3
4 版更改 the  method  now  supports  hostname  check  with  sslcontext
 在3
5 版更改 the  error  raised  for  lack  of  starttls  support  is  now  the  smtpnotsupportederror  subclass  instead  of  the  base  smtpexception
 注解 the  fromaddr  and  toaddrs  parameters  are  used  to  construct  the  message  envelope  used  by  the  transport  agents
 在3
2 版更改 msg  may  be  a  byte  string
 在3
5 版更改 smtputf 8 support  added  and  smtpnotsupportederror  may  be  raised  if  smtputf 8 is  specified  but  the  server  does  not  support  it
3
2 新版功能
3
5 新版功能 support  for  internationalized  addresses  smtputf 8
smtp  example
quit  注解 in  general  you  will  want  to  use  the  email  packages  features  to  construct  an  email  message  which  you  can  then  send  via  sendmessage  see  email  示例
os  多种 操作系统 接口
 文件名 命令行参数 以及 环境变量。
 在 python  中 使用 字符串 类型 表示 文件名、 命令行参数 和 环境变量
 在某些 系统上 在 将 这些 字符串 传递给 操作系统 之前 必须 将 这些 字符串 解码 为 字节
python  使用 文件系统 编码 来执行 此 转换 请参阅 sys
getfilesystemencoding 
 在3
1 版更改 在某些 系统上 使用 文件系统 编码 进行 转换 可能会 失败
 在这种情况下 python  会 使用 代理 转义 编码 错误 处理器 这意味着 在 解码 时 不 可 解码 的 字节 被 unicode  字符 udcxx  替换 并且 这些 字节 在 编码 时 再次 转换为 原始 字节
 文件系统 编码 必须 保证 成功 解码 小于128 的 所有 字节
 如果文件 系统 编码 无法 提供 此 保证 api  函数 可能 会引发 unicodeerrors 
 进程 参数
 创建 文件对象
 这些函数 创建新的 file  objects 
 参见 open  以获取 打开 文件描述符的 相关信息
os
fdopenfd  args  kwargs  返回 打开 文件描述符 fd  对 应 文件 的 对象
 类似 内建 open  函数 二 者 接受 同样的 参数
 不同之处在于 fdopen  第一个参数 应该 为整数
 文件描述符 操作
 查询 终端 的 尺寸
3
3 新版功能
getterminalsizefdstdoutfileno  返回 终端 窗口 的 尺寸 格式 为 columns  lines  它 是 类型 为 terminalsize  的 元组
 可选参数 fd  默认为 stdoutfileno  或 标准输出 指定 应 查询 的 文件 描述符
 如果 文件描述符 未 连接到 终端 则 抛出 oserror  异常
getterminalsize  是 供 常规 使用 的 高阶 函数 os
getterminalsize  是 其 底层 的 实现
 可用性 unix  windows
terminalsize  元组 的子类 存储 终端 窗口 尺寸 columns  lines
 columns  终端 窗口 的 宽度 单位 为 字符
 lines  终端 窗口 的 高度 单位 为 字符
 文件描述符的 继承
3
4 新版功能
 每个 文件描述符 都有一个 inheritable  可继承 标志 位 该 标志 位 控制 了 文件描述符 是否 可以 由 子进程 继承
 从 python 3
4 开始 由 python  创建 的文件描述符 默认 是不可 继承 的
 在 unix  上 执行 新 程序 时 不 可继承 的文件描述符 在 子进程 中 是 关闭 的其他 文件描述符 将 被 继承
 在 windows  上 不 可继承 的 句柄 和 文件描述符 在 子进程 中 是 关闭 的 但 标准 流 文件描述符0、1 和2 即 标准输入、 标准输出 和 标准错误 是 始终 继承 的
 如果 使用 spawn  函数 所有 可继承 的 句柄 和 文件描述符 都 将 被 继承
 如果 使用 subprocess  模块 将 关闭 除 标准 流 以外的 所有 文件描述符 并 且仅当 closefds  参数为 false  时才 继承 可继承 的 句柄
getinheritablefd  获取 指定 文件描述符的 可继承 标志 位 为 布尔值
setinheritablefd  inheritable  设置 指定 文件描述符的 可继承 标志 位
gethandleinheritablehandle  获取 指定 句柄 的 可继承 标志 位 为 布尔值
 可用性 windows
sethandleinheritablehandle  inheritable  设置 指定 句柄 的 可继承 标志 位
 可用性 windows
 文件和目录
linux  扩展 属性
 进程 管理
 调度 器 接口
 这些函数 控制 操作系统 如何 为 进程 分配 cpu  时间
 它们 仅 在某些 unix  平台 上可用
 更多细节 信息请 查阅 你所 用 unix  的 指南 页面
3
3 新版功能
 以 下 调度策略 如果 被 操作系统 支持 就会 对 外 公开
schedother  默认 调度策略
schedbatch  用 于 cpu  密集 型 进程 的 调度策略 它 会 尽 量 为 计算机 中 的其余 任务 保留 交互 性
schedidle  用 于 极 低 优先级 的 后 台 任务 的 调度策略
schedsporadic  用 于 偶 发 型 服务 程序 的 调度策略
schedfifo  先 进先出 的 调度策略
schedrr  循环 式 的 调度策略
schedresetonfork  此 旗标 可 与 任何其他 调度策略 进行 or  运算
 当 带有 此 旗标 的 进程 设置 分 叉 时 其 子进程 的 调度策略 和 优先级 会 被 重置 为默认值
schedparamschedpriority  这个类 表示 在 schedsetparam  schedsetscheduler  和 schedgetparam  中使用的 可 修改 调度 形参
 它 属于 不 可变对象
 目前 它 只有一个 可能的 形参 schedpriority  一个 调度策略 的调度 优先级
schedgetpriorityminpolicy  获取 policy  的最小 优先级 数值
 policy  是 以 上 调度策略 常量 之一
schedgetprioritymaxpolicy  获取 policy  的 最高 优先级 数值
 policy  是 以 上 调度策略 常量 之一
schedsetschedulerpid  policy  param  设置 pid  为 pid  的 进程 的 调度策略
pid  为0 指 的 是 调用 本 方法 的 进 程
policy  是 以 上 调度策略 常量 之一
param  是一个 schedparam  实例
schedgetschedulerpid  返回 pid  为 pid  的 进程 的 调度策略
pid  为0 指 的 是 调用 本 方法 的 进 程
 返回 的 结果是 以 上 调度策略 常量 之一
schedsetparampid  param  设置 pid  为 pid  的 进程 的某个 调度 参数
pid  为0 指 的 是 调用 本 方法 的 进程
param  是一个 schedparam  实例
schedgetparampid  返回 pid  为 pid  的 进程 的调度 参数为 一个 schedparam  实例
pid  为0 指 的 是 调用 本 方法 的 进程
schedrrgetintervalpid  返回 pid  为 pid  的 进程 在 时间 片 轮 转 调度 下 的 时间 片 长度 单位 为 秒
pid  为0 指 的 是 调用 本 方法 的 进程
schedyield  自 愿 放 弃 cpu
schedsetaffinitypid  mask  将 pid  为 pid  的 进程 为零则 为 当前进程 限制 到 一 组 cpu  上
mask  是 整数 的可迭代对象 表示 应 将 进程 限制 在 其中的 一 组 cpu
schedgetaffinitypid  返回 pid  为 pid  的 进程 为零则 为 当前进程 被 限制 到 的 那 一 组 cpu
 其他 系统 信息
 随机数
getrandomsize  flags 0 获得 最多 为 size  的 随机字节
 本 函数返回 的字节数 可能 少 于 请求的 字节 数
 这些 字节 可用于 为 用户 空间 的 随机数生成器 提供 种子 或 用 于 加密 目 的
 getrandom  依赖于 从 设备 驱 动 程序 和其他 环境 噪 声 源 收集 的 熵
 不必 要 地 读取 大量 数据 将 对 使用 devrandom  和 devurandom  设备 的其他 用 户 产生 负 面 影响
 flags  参数 是一个 位 掩 码 可以是 零 个或多个 下列 值 以 或 运算 组合 os
grndrandom  和 grndnonblock
 另请参阅 linux  getrandom  手册 页
 可用性 linux 3
17 或更高 版本
3
6 新版功能
urandomsize  返回 大小 为 size  的 字符串 它 是 适合 加密 使用 的 随机字节
 本 函数 从 系统 指定 的 随机 源 获取 随机字节
 对 于 加密 应用程序 返回 的 数据 应 有 足够的 不 可 预 测 性 尽管 其 确 切 的 品 质 取决于 操作系统的 实现
 在 linux  上 如果 getrandom  系统调用 可 用 它 将 以 阻塞模式 使用 阻塞直到 系统 的 urandom  熵 池 初始化 完毕 内 核 收集 了128 位 熵
 原 理 请参阅 pep 524
 在 linux  上 getrandom  可以 以 非阻塞 模式 使 用 grndnonblock  标志 获取 随机字节 或者 轮询 直到 系统 的 urandom  熵 池 初始化 完毕
 在 类 unix  系统上 随机字节 是 从 devurandom  设备 读取 的
 如果 devurandom  设备 不可用 或 不 可读 则 抛出 notimplementederror  异 常
 在 windows  上 将 使用 cryptgenrandom
 参见 secrets  模块提供了 更高级 的功能
 所 在 平台 会 提供 随机数生成器 有 关 其 易于 使用 的 接口 请参阅 random
 在3
0 版更改 在 linux  上 getrandom  现 在 以 阻塞模式 使用 以 提高 安全 性
 在3
2 版更改 在 linux  上 如果 getrandom  系统调用 阻塞 urandom  熵 池 尚未 初始化 完毕 则 退 回 一步 读取 devurandom
 在3
5 版更改 在 linux 3
17 和 更高 版本 上现在 使用 getrandom  系统调用 如果可 用
 在 openbsd 5
6 和 更高 版本 上现在 使用 getentropy  c  函数
 这些函数 避免 了 使用 内部 文件描述符
grndnonblock  默认情况下 从 devrandom  读取 时 如果没有 可用的 随机字节 则 getrandom  会阻塞 从 devurandom  读取 时如果 熵 池 尚未 初始化 则 会阻塞
 如果设置 了 grndnonblock  标志 则 这 些情况下 getrandom  不 会阻 塞 而 是 立即 抛出 blockingioerror  异常
3
6 新版功能
grndrandom  如果设置 了 此 标志 位 那么 将 从 devrandom  池 而不是 devurandom  池 中提取 随机字节
3
6 新版功能
emailerrors  异常 和 缺 陷 类
emailgenerator  generating  mime  documents
3
2 新版功能
 在3
3 版更改 添加了 policy  关键字
 在3
6 版更改 the  default  behavior  of  the  manglefrom  and  maxheaderlen  parameters  is  to  follow  the  policy
 在3
3 版更改 添加了 policy  关键字
 在3
6 版更改 the  default  behavior  of  the  manglefrom  and  maxheaderlen  parameters  is  to  follow  the  policy
 在3
2 版更改 added  support  for  reencoding 8 bit  message  bodies  and  the  linesep  argument
 脚注1 this  statement  assumes  that  you  use  the  appropriate  setting  for  unixfrom  and  that  there  are  no  policy  settings  calling  for  automatic  adjustments  for  example  refoldsource  must  be  none  which  is  not  the  default
turtle  海龟 绘图
 源码 libturtle
 概述
 可用的 turtle  和 screen  方法 概 览
turtle  方法
 海龟 动作 移动 和 绘制 forward  fd  前进 backward  bk  back  后 退 right  rt  右 转 left  lt  左 转 goto  setpos  setposition  前 往 定位 setx  设置 x  坐标 sety  设置 y  坐标 setheading  seth  设置 朝 向 home  返回 原 点 circle  画 圆 dot  画 点 stamp  印 章 clearstamp  清除 印 章 clearstamps  清除 多个 印 章 undo  撤 消 speed  速度 获取 海龟的 状态 position  pos  位置 towards  目标 方向 xcor  x  坐标 ycor  y  坐标 heading  朝 向 distance  距离 设置 与 度 量 单位 degrees  角度 radians  弧度 画笔 控制 绘图 状态 pendown  pd  down  画笔 落 下 penup  pu  up  画笔 抬 起 pensize  width  画笔 粗 细 pen  画笔 isdown  画笔 是否 落 下 颜色 控制 color  颜色 pencolor  画笔颜色 fillcolor  填充颜色 填充 filling  是否 填充 beginfill  开始 填充 endfill  结束 填充 更多 绘图 控制 reset  重置 clear  清空 write  书 写 海龟 状态 可 见 性 showturtle  st  显示 海龟 hideturtle  ht  隐藏 海龟 isvisible  是否可 见 外 观 shape  形状 resizemode  大小 调整 模式 shapesize  turtlesize  形状 大小 shearfactor  剪 切 因 子 settiltangle  设置 倾 角 tiltangle  倾 角 tilt  倾 斜 shapetransform  变 形 getshapepoly  获取 形状 多边形 使用 事件 onclick  当 鼠标 点击 onrelease  当 鼠标 释放 ondrag  当 鼠标 拖 动 特殊 海龟 方法 beginpoly  开始 记录 多边形 endpoly  结束 记录 多边形 getpoly  获取 多边形 clone  克 隆 getturtle  getpen  获取 海龟 画笔 getscreen  获取 屏幕 setundobuffer  设置 撤 消 缓冲区 undobufferentries  撤 消 缓冲区 条目 数
turtlescreenscreen  方法
 窗口 控制 bgcolor  背景 颜色 bgpic  背景 图片 clear  clearscreen  清 屏 reset  resetscreen  重置 screensize  屏幕 大小 setworldcoordinates  设置 世界 坐标 系 动 画 控制 delay  延迟 tracer  追踪 update  更新 使用 屏幕 事件 listen  监听 onkey  onkeyrelease  当 键 盘 按下 并 释放 onkeypress  当 键 盘 按下 onclick  onscreenclick  当 点击 屏幕 ontimer  当 达到 定 时 mainloop  done  主 循环 设置 与 特殊方法 mode  模式 colormode  颜色 模式 getcanvas  获取 画 布 getshapes  获取 形状 registershape  addshape  添加 形状 turtles  所有 海龟 windowheight  窗口 高度 windowwidth  窗口 宽度 输入 方法 textinput  文本 输入 numinput  数字 输入 screen  专 有 方法 bye  退出 exitonclick  当 点击 时 退出 setup  设置 title  标题
rawturtleturtle  方法 和 对 应 函数
 本节 中 的大部分 示例 都 使用 turtle  类 的 一个实例 命名为 turtle
 海龟 动作
 获取 海龟的 状态
pos  返回 海龟 当前的 坐标 xy  为 vec 2 d  矢 量 类对象
towardsx  ynone  参数 x  一个 数值 或 数值 对 矢 量 或 一个 海龟 实例 y  一个 数值—— 如果 x  是一个 数值 否则为 none  从 海龟 位置 到 由 xy  矢 量 或 另一 海龟 对 应 位置 的 连 线 的 夹 角
 此 数值 依 赖于 海龟 初始 朝 向 由 standardworld  或 logo  模式 设置 所 决定
xcor  返回 海龟的 x  坐标
ycor  返回 海龟的 y  坐标
heading  返回 海龟 当前的 朝 向 数值 依赖于 海龟 模式 参见 mode
distancex  ynone  参数 x  一个 数值 或 数值 对 矢 量 或 一个 海龟 实例 y  一个 数值—— 如果 x  是一个 数值 否则为 none  返回 从 海龟 位置 到 由 xy  适 量 或 另一 海龟 对 应 位置 的 单位 距离
 度 量 单位 设置
 画笔 控制
 绘图 状态 turtle
down  画笔 落 下 移动 时 将 画 线
up  画笔 抬 起 移动 时 不 画 线
widthwidthnone  参数 width  一个 正 数值 设置 线 条 的 粗 细 为 width  或 返回 该值
 如果 resizemode  设 为 auto  并 且 turtleshape  为 多边形 该 多边形 也 以 同样 组 细 的 线 条 绘制
 如 未指定 参 数则返回 当前的 pensize
penpennone  pendict  参数 pen  一个包含 部分 或 全部 下列 键 的字典 pendict  一个或多个 以 下列 键 为 关键字 的 关键字参数 返回 或 设置 画笔 的 属性 以 一个 包含以下 键值对 的 画笔 字典 表示 shown  truefalse  pendown  truefalse  pencolor  颜色 字符串或 颜色 元组 fillcolor  颜色 字符串或 颜色 元组 pensize  正 数值 speed 0
10 范围内 的 数值 resizemode  auto  或 user  或 noresize  stretchfactor  正 数值 正 数值 outline  正 数值 tilt  数值 此 字典 可 作为 后续调用 pen  时 的 参数 以 恢复 之前的 画笔 状态
 另外 还 可 将 这些 属性 作为 关键 词 参数 提交
 使用 此 方式 可以用 一条 语句 设置 画笔 的 多个 属性
isdown  如果 画笔 落 下 返回 true  如果 画笔 抬 起 返回 false
isdown  true  颜色 控制 turtle
pencolorargs  返回 或 设置 画笔颜色
 允许 以 下 四 种 输入 格式 pencolor  返回 以 颜色 描述 字符串或 元组 见 示例 表示 的当前 画笔颜色
 可用作 其 他 colorpencolorfillcolor  调用 的 输入
 pencolorcolorstring  设置 画笔颜色 为 colorstring  指定 的 tk  颜色 描述 字符串 例如 red 、 yellow  或33 cc 8 c
 pencolorr  g  b  设置 画笔颜色 为 以 r  g  b  元组 表示 的 rgb  颜色
r  g  b  的 取值 范围 应 为0
colormodecolormode  的 值 为1
0 或255 参 见 colormode
 pencolorr  g  b  设置 画笔颜色 为 以 r  g  b  表示 的 rgb  颜色
r  g  b  的 取值 范围 应 为0
 如果 turtleshape  为 多边形 该 多边形 轮 廓 也 以 新 设置 的 画笔颜色 绘制
fillcolorargs  返回 或 设置 填充颜色
 允许 以 下 四 种 输入 格式 fillcolor  返回 以 颜色 描述 字符串或 元组 见 示例 表示 的当前 填充颜色
 可用作 其 他 colorpencolorfillcolor  调用 的 输入
 fillcolorcolorstring  设置 填充颜色 为 colorstring  指定 的 tk  颜色 描述 字符串 例如 red 、 yellow  或33 cc 8 c
 fillcolorr  g  b  设置 填充颜色 为 以 r  g  b  元组 表示 的 rgb  颜色
r  g  b  的 取值 范围 应 为0
colormodecolormode  的 值 为1
0 或255 参 见 colormode
 fillcolorr  g  b  设置 填充颜色 为 r  g  b  表示 的 rgb  颜色
r  g  b  的 取值 范围 应 为0
 如果 turtleshape  为 多边形 该 多边形 内部 也 以 新 设置 的 填充颜色 填充
colorargs  返回 或 设置 画笔颜色 和 填充颜色
 允许 多种 输入 格式
 使用 如 下0 至3 个参数 color  返回 以 一 对 颜色 描述 字符串或 元组 表示 的当前 画笔颜色 和 填充颜色 两者 可 分别 由 pencolor  和 fillcolor  返回
 colorcolorstring  colorrgb  colorrgb  输入 格式 与 pencolor  相同 同时 设置 填充颜色 和 画笔颜色 为 指定 的 值
 colorcolorstring 1 colorstring 2 colorr 1 g 1 b 1 r 2 g 2 b 2 相当于 pencolorcolorstring 1 加 fillcolorcolorstring 2 使用 其他 输入 格式 的 方法也 与 之 类似
 如果 turtleshape  为 多边形 该 多边形 轮 廓 与 填充 也 使用 新 设置 的 颜色
0 另 参见 screen  方法 colormode
 填充 turtle
filling  返回 填充 状态 填充 为 true  否则为 false
beginfill  在 绘制 要 填充 的 形状 之前 调用
endfill  填充 上 次调用 beginfill  之后 绘制 的 形状
 自 相 交 多边形 或多个 形状 间 的 重 叠 区域 是否 填充 取决于 操作系统的 图形 引擎、 重 叠 的 类型 以及 重 叠 的 层 数
 例如 上面的 turtle  多 芒 星 可能会 全部 填充 为 黄 色 也可能 会 有一些 白 色 区域
endfill  更多 绘图 控制 turtle
reset  从 屏幕 中删除 海龟的 绘图 海龟 回 到 原 点 并设置 所有 变量 为默认值
clear  从 屏幕 中删除 指定 海龟的 绘图
 不 移动 海龟
 海龟的 状态 和 位置 以 及其他 海 龟 的 绘图 不受 影响
writearg  movefalse  alignleft  fontarial 8 normal  参数 arg  要 书 写 到 turtlescreen  的 对象 move  truefalse  align  字符串 left  center  或 right  font  一个 三 元组 fontname  fontsize  fonttype  书 写 文本 arg  指定 的 字符串 到 当前 海龟 位置 align  指定 对齐方 式 left  center  或 rightfont  指定 字 体
 如果 move  为 true  画笔 会 移动 到 文本 的 右 下 角
 默认 move  为 false
 海龟 状态
 使用 事件
 特殊 海龟 方法
beginpoly  开始 记录 多边形 的 顶 点
 当前 海龟 位置 为 多边形 的第一个 顶 点
endpoly  停止 记录 多边形 的 顶 点
 当前 海龟 位置 为 多边形 的最后一个 顶 点
 它 将 连 线 到 第一个 顶 点
getpoly  返回 最新 记录 的 多边形
clone  创建并返回 海龟的 克 隆 体 具有相同的 位置、 朝 向 和 海龟 属性
getpen  返回 海龟 对象 自身
 唯一 合理的 用 法 作为一个 函数来 返回 匿名 海龟 pet  getturtle  pet
getscreen  返回 作为 海龟 绘图 场 所 的 turtlescreen  类对象
 该对象 将 可调用 turtlescreen  方法
setundobuffersize  参数 size  一个 整型数 值 或 none  设置或 禁用 撤 消 缓冲区
 如果 size  为 一个 整型数 则 将 开 辟 一个 指定 大小 的 空 缓冲区
size  表示 可 使用 undo  方法 函数 撤 消 的 海龟 命令 的 次 数 上限
 如果 size  为 none  则 禁用 撤 消 缓冲区
undobufferentries  返回 撤 销 缓冲区 里 的 条目 数
 复合 形状
 要使用 由 多个 不同 颜色 多边形 构成的 复合 海龟 形状 你必须 明确 地 使用 辅助 类 shape  具体 步骤 如 下1
 创建一个 空 shape  对象类型 为 compound
 按照 需要使用 addcomponent  方法 向 此 对象 添加 多个 部 件
 例如 s  shapecompound  poly 100105010105 s
 接下来 将 shape  对象 添加到 screen  对象 的 形状 列表并 使用 它 registershapemyshape  s  shapemyshape  注解 shape  类 在 registershape  方法 的 内部 以 多 种方式 使用
 应用程序 编 写 者 只有 在 使用 上述 的 复合 形状 时才 需要 处理 shape  类
turtlescreenscreen  方法 及 对 应 函数
 本节 中 的大部分 示例 都 使用 turtlescreen  类 的 一个实例 命名为 screen
 窗口 控制
 动 画 控制
delaydelaynone  参数 delay  正 整型数 设置或 返回 以 毫 秒 数表示的 延迟 值 delay
 这 约 等于 连续 两次 画 布 刷新 的 间隔 时间
 绘图 延迟 越 长 动 画 速度 越 慢
 可选参数 screen
tracernnone  delaynone  参数 n  非负 整型数 delay  非负 整型数 启用 禁用 海龟 动 画 并设置 刷新 图形 的 延迟 时间
 如果指定 n  值 则 只有 每 第 n  次 屏幕 刷新 会 实际 执行
 可被用来 加 速 复杂 图形 的 绘制
 如果 调 用 时 不带参数 则 返回当前 保存 的 n  值
 第二个 参数 设置 延迟 值 参见 delay
update  执行 一次 turtlescreen  刷新
 在 禁用 追踪 时 使用
 另 参见 rawturtleturtle  方法 speed
 使用 屏幕 事件
 输入 方法
textinputtitle  prompt  参数 title  字符串 prompt  字符串 弹出 一个 对话框 窗口 用来 输入 一个字符串
 形参 title  为 对话框 窗口 的 标题 prompt  为 一条 文本 通常 用来 提示 要 输入 什么 信息
 返回 输入 的 字符串
 如果 对话框 被取消 则返回 none
 screen
numinputtitle  prompt  defaultnone  minvalnone  maxvalnone  参数 title  字符串 prompt  字符串 default  数值 可选 minval  数值 可选 maxval  数值 可选 弹出 一个 对话框 窗口 用来 输入 一个 数值
title  为 对话框 窗口 的 标题 prompt  为 一条 文本 通常 用来 描述 要 输入 的 数值 信息
default  默认值 minval  可 输入 的最小 值 maxval  可 输入 的最大 值
 输入 数值 的 必须在 指 定 的 minval 
 maxval  范围 之内 否则将 给出 一条 提示 对话框 保持 打开 等待 修改
 返回 输入 的 数值
 如果 对话框 被取消 则返回 none
 screen
 设置 与 特殊方法
modemodenone  参数 mode  字符串 standard  logo  或 world  其 中 之一 设置 海龟 模式 standard  logo  或 world  并 执行 重置
 如 未指定 模 式 则 返回当前 的 模式
 standard  模式 与 旧 的 turtle  兼容
logo  模式 与 大部分 logo  海龟 绘图 兼容
world  模式 使用 用户自定义 的 世界 坐标 系
 注意 在 此 模式下 如果 xy  单位 比 率 不 等于1 则 角度 会显 得 扭 曲
 模式 初始 海龟 朝 向 正 数 角度 standard  朝 右 东 逆 时 针 logo  朝 上 北 顺 时 针 modelogo  resets  turtle  heading  to  north  mode  logoturtle
colormodecmodenone  参数 cmode  数值1
0 或255 其 中 之一 返回 颜色 模式 或 将其设 为1
0 或255
 构成 颜色 三 元组 的 r  g  b  数值 必须在0
cmode  范围 之内
getcanvas  返回 此 turtlescreen  的 canvas  对象
 供 了解 tkinter  的 canvas  对象 内 部 机 理 的 人 士 使用
getshapes  返回 所有 当前 可 用 海龟 形状 的 列表
addshapename  shapenone  调用 此 函数 有三 种不同 方式1
 name  为 一个 gif  文件 的文件名 shape  为 none  安装 相应的 图 像 形状
 screen
gif  注解 当 海龟 转 向 时 图像 形状 不 会 转 动 因此 无法 显示 海龟的 朝 向2
 name  为 指定 的 字符串 shape  为 由 坐标 值 对 构成的 元组 安装 相应 的 多边形 形状
 name  为 指定 的 字符串 为 一个 复合 shape  类对象 安装 相应的 复合 形状
 将 一个 海龟 形状 加入 turtlescreen  的 形状 列表
 只 有这样 注册 过 的 形状 才 能 通过 执行 shapeshapename  命令 来 使用
turtles  返回 屏幕 上 的 海龟 列表
windowheight  返回 海龟 窗口 的 高度
 screen
windowwidth  返回 海龟 窗口 的 宽度
 screen
screen  专 有 方法 而非 继承自 turtlescreen
bye  关闭 海龟 绘图 窗口
exitonclick  将 bye  方法 绑定到 screen  上 的 鼠标 点击 事件
 如果 配置字典 中 usingidle  的 值 为 false  默认值 则 同时 进入 主 事 件循环
 注 如果 启动 idle  时 使用了 n  开 关 无 子进程 turtle
cfg  中 此 数值 应 设 为 true
 在此情况下 idle  本身 的 主 事件循 环 同样 会 作用于 客户 脚本
setupwidthcfgwidth  heightcfgheight  startxcfgleftright  startycfgtopbottom  设置 主 窗口 的 大小和 位置
 默认 参数 值 保存在 配置字典 中 可通过 turtle
cfg  文件进行 修改
 参数 width  如 为 一个 整型数 值表示 大小 为 多少 像 素 如 为 一个浮 点 数值 则表示 屏幕 的 占 比 默认为 屏幕 的50 height  如 为 一个 整型数 值表示 高度 为 多少 像 素 如 为 一个浮 点 数值 则表示 屏幕 的 占 比 默认为 屏幕 的75 startx  如 为 正 值表示 初始 位置 距离 屏幕 左边 缘 多少 像 素 负 值表示 距离 右 边 缘 none  表示 窗口 水 平 居 中 starty  如 为 正 值表示 初始 位置 距离 屏幕 上 边 缘 多少 像 素 负 值表示 距离 下 边 缘 none  表示 窗口 垂 直 居 中 screen
titletitlestring  参数 titlestring  一个字符串 显示 为 海龟 绘图 窗口 的 标题 栏 文本 设置 海龟 窗口 标题 为 titlestring  指定 的 文本
 公共 类
 帮助 与 配置
 如何使用 帮助
screen  和 turtle  类 的 公 用 方法 以 文档字符串 提供了 详细 的 文档
 因此可以 利用 python  帮助 工具 获取 这些 在 线 帮助 信息 当使用 idle  时 输入 函数 方法调用 将 弹出 工具 提示 显示 其 签名 和 文档 字符 串 的 头 几 行
 对 文 法 或 函数调用 help  将显示 其 文档字符串 helpscreen
penup  方法 对 应 函数 的 文档字符串 的形式 会 有一些 修改 helpbgcolor  help  on  function  bgcolor  in  module  turtle  bgcolorargs  set  or  return  backgroundcolor  of  the  turtlescreen
 aliases  penup  pu  up  no  argument  example  penup  这些 修改 版 文档字符串 是 在 导入时 与 方法 对 应 函数 的 定义 一起 自动 生成 的
 文档字符串 翻译 为 不同的 语言
 如何 配置 screen  和 turtle
turtledemo  演示 脚本 集
turtledemo  包 汇 集 了 一 组 演示 脚本
 这些 脚本 可以通过 以 下 命令 打开 所提供的 演示 查看 器 运行 和 查看 python  m  turtledemo  此外 你也可以 单独 运行 其中的 演示 脚本
 例如 python  m  turtledemo
bytedesignturtledemo  包 目录中 的内容 一个 演示 查看 器 main
py  可用来 查看 脚本 的 源码 并 即 时 运行
 多个 脚本 文件 演示 turtle  模块 的不同 特性
 所有 示例 可通过 examples  菜单 打开
 也可以 单独 运行 每个 脚本
 一个 turtle
cfg  文件 作为 说明 如何 编写 并 使用 模块 配置文件 的 示例 模板
 演示 脚本 清 单 如 下 名称 描述 相关 特性 bytedesign  复杂的 传统 海龟 绘图 模式 tracer  delay  update  chaos  绘制 verhulst  动态 模 型 演示 通 世界 坐标 系 过 计算机 的 运算 可能会 生成 令人 惊 叹 的结果 clock  绘制 模拟 时钟 显示 本机 的当前 时间 海龟 作为 表 针 ontimer  colormixer  试 验 r  g  b  颜色 模式 ondrag  当 鼠标 拖 动 forest  绘制3 棵 广 度 优先 树 随机 化 fractalcurves  绘制 hilbert  koch  曲 线 递归 lindenmayer  文 化 数学 印 度 装饰 艺 术 l  系统 minimalhanoi  汉 诺 塔 矩 形 海龟 作为 汉 诺 盘 shape  shapesize  nim  玩 经 典 的 尼 姆 游 戏 开始 时 有三 海龟 作为 小 棒 事件 驱 动 堆 小 棒 与 电 脑 对 战
 鼠标 键 盘 paint  超 极 简 主 义 绘 画 程序 onclick  当 鼠标 点击 peace  初 级 技巧 海龟 外 观 与 动 画 penrose  非 周期 性 地 使用 风 筝 和 飞 镖 形状 铺 stamp  印 章 满 平 面 planetandmoon  模拟 引 力 系统 复合 开 关 vec 2 d  类 rounddance  两 两 相对 并 不 断 旋 转 舞 蹈 的 海龟 复合 形状 clone  shapesize  tilt  getshapepoly  update  sortinganimate  动态 演示 不同的 排序 方法 简单 对齐 随机 化 tree  一 棵 图形 化 的 广 度 优先 树 使 clone  克 隆 用 生成器 twocanvases  简单 设计 两 块 画 布 上 的 海龟 wikipedia  一个 来自 介绍 海龟 绘图 的 维 基 百 科 clone  undo  文 章 的 图 案 yinyang  另一个 初 级 示例 circle  画 圆 祝 你 玩 得 开 心
python 26 之后 的变化
 turtle
windowwidth  和 turtle
windowheight  方法 已被 去除
 具有 这些 名称 和 功能 的 方法 现 在 只 限于 screen  类 的 方法
 但 其 对应的 函数 仍然可 用
 实际上 在 python 2
6 中 这些方法 就 已经 只是 从 对应的 turtlescreenscreen  类 的 方法 复 制 而 来
 turtle
fill  方法 已被 去除
beginfill  和 endfill  的 行为 则 有 细 微 改变 现 在 每个 填充 过程 必须 以 一个 endfill  调用 来 结束
 新增了 一个 turtle
filling  方法
 该 方法返回一个 布尔值 如果 填充 过 程 正 在 进行 为 true  否则为 false
 此行为 相当于 python 2
6 中 不带 参数 的 fill  调用
python 30 之后 的变化
 新增了 turtle
shapetransform  和 turtle
getshapepoly  方法
 这样就 可以使用 所有 标准 线 性 变 换 来 调整 海龟 形状
turtle
tiltangle  的功能 已被 加 强 现在可 被用来 获取 或 设 置 倾 角
turtle
settiltangle  已弃用
 新增了 screen
onkeypress  方法 作为 对 screen
onkey  的 补 充 实 际 就是 将 行为 绑定到 keyrelease  事件
 后者 相应 增加了 一个别名 screen
 新增了 screen
mainloop  方法
 这样 当 仅 需 使用 screen  和 turtle  对 象 时 不需要 再 额外 导入 mainloop
 新增了 两个方法 screen
textinput  和 screen
 用来 弹出 对话框 接受 输入 并 分别 返回 字符串 和 数值
 两个 新 的 示例 脚本 tdemonim
py  和 tdemorounddance
py  被加入 到 libturtledemo  目录中
urllibrequest  用 于 打开 url  的 可扩展 库
request  对象
fullurl  传给 构造函数 的 原始 url
 在3
4 版更改
originreqhost  请求的 原始 主机 不 含 端口
selector  uri  路径
 若 request  使用 代理 选择 器 将 会 是 传给 代理 的完整 url
 在3
4 版更改 changing  value  of  request
data  now  deletes  contentlength  header  if  it  was  previously  set  or  calculated
unverifiable  布尔 表明 请求 是否为 rfc 2965 中定义的 无法 证 实 的
3
3 新版功能
 在3
4 版更改 a  default  value  can  now  be  set  in  subclasses  previously  it  could  only  be  set  via  the  constructor  argument
 在3
3 版更改 getmethod  now  looks  at  the  value  of  request
addunredirectedheaderkey  header  添加一个 不会被 加入 重定向 请求的 头 部
3
4 新版功能
getfullurl  返回 构造器 中 给定的 url
 在3
4 版更改
 返回 request
 在3
4 版更改 the  request  methods  adddata  hasdata  getdatagettype  gethost  getselector  getoriginreqhost  andisunverifiable  that  were  deprecated  since 3
openerdirector  对象
openerdirector  实例 有 以下方法 openerdirector
 protocolopen — 句柄 知道如何 打开 protocol  urls  的 信号
 查看 basehandler
protocolopen  以获取 更多信息
 查看 basehandler
httperrornnn  以获取 更多信息
 protocolerror — 句柄 知道如何 处理 来自 非 http  protocol  的 错误 的 信号
 protocolrequest — 句柄 知道如何 预 处理 protocol  请求的 信号
 查看 basehandler
protocolrequest  以获取 更多信息
 protocolresponse — 句柄 知道如何 后 处理 protocol  响应 的 信 号
 查看 basehandler
protocolresponse  以获取 更多信息
basehandler  对象
 注解 the  convention  has  been  adopted  that  subclasses  defining  protocolrequest  or  protocolresponse  methods  are  named  processor  all  others  are  named  handler
httpredirecthandler  对象
 注解 some  http  redirections  require  action  from  this  modules  client  code
 注解 the  default  implementation  of  this  method  does  not  strictly  follow  rfc 2616 which  says  that 301 and 302 responses  to  post  requests  must  not  be  automatically  redirected  without  confirmation  by  the  user
httpcookieprocessor  对象
proxyhandler  对象
httppasswordmgr  对象
httppasswordmgrwithpriorauth  对象
abstractbasicauthhandler  对象
httpbasicauthhandler  对象
proxybasicauthhandler  对象
abstractdigestauthhandler  对象
httpdigestauthhandler  对象
proxydigestauthhandler  对象
httphandler  对象
httpshandler  对象
filehandler  对象
 在3
2 版更改 this  method  is  applicable  only  for  local  hostnames
 when  a  remote  hostname  is  given  an  urlerror  is  raised
datahandler  对象
ftphandler  对象
cacheftphandler  对象
unknownhandler  对象
httperrorprocessor  对象
 示例
in  addition  to  the  examples  below  more  examples  are  given  in  howto  使用 urllib  包 获取 网络 资源
legacy  interface
urlopenerproxiesnone  x 5093
3 版后已移除
3
3 版后已移除
 注解 according  to  the  letter  of  rfc 2616301 and 302 responses  to  post  requests  must  not  be  automatically  redirected  without  confirmation  by  the  user
 注解 when  performing  basic  authentication  a  fancyurlopener  instance  calls  its  promptuserpasswd  method
urllibrequest  restrictions
 在3
4 版更改 added  support  for  data  urls
hmac  基于 密钥 的 消息 验证
chunk  读取 iff  分块 数据
 源代码 libchunk
py  本 模块提供了一个 读取 使用 ea  iff 85 分块的 数据 的 接口 chunks
1 这种 格式 使用 的 场合 有 audio  interchange  file  format  aiffaiffc  和 realmedia  file  format  rmff  等
 与 它们 密 切 相关的 wave  音频 文件 也可 使用 此模块 来读取
 一个 分块 具 有以下 结构 偏移 长度 内容04 区 块 id 44 大 端 字节顺序 的 块 大小 不包括 头8 n  数据 字节 其 中 n  是 前 一 字段 中 给出的 大小8 n 0 或1 如果 n  为 奇 数 且 使用 块 对齐 则 需要 填充 字节 id  是一个4 字节 的 字符串 用 于 标识 块 的 类型
 大小 字段32 位 的 值 使用 大 端 字节序 编码 给出 分块 数据 的大小 不包括8 字节 的 标头
 使用 由 一个 或更多 分块 组成的 iff  类型 文件
 此处 定义 的 chunk  类 的 建议 使用 方式是 在 每个 分块 开始 时 实例化 一个实例 并 从 实例 读取 直到 其 末尾 在 那 之后 可以 再 实例化 新 的 实例
 到达 文件末尾 时 创建 新实例 将 会 失败 并 引发 eoferror  异常
chunkfile  aligntrue  bigendiantrue  inclheaderfalse  代表一个 分块的 类
 file  参数 预期 为 一个 文件类对象
 特别地 也 允许 该 类的实例
 唯一 必需 的 方法 是 read
 如果存在 seek  和 tell  方法 并且没有 引发异常 它们也 会 被使用
 如果存在 这些方法 并 且 引发了 异常则 它们不 应 改变 目标 对象
 如果可选 参数 align  为真值 则 分块 应当 以2 字节 边界 对齐
 如果 align  为假值 则 不 使用 对齐
 此 参数默认 为真值
 如果可选 参数 bigendian  为假值 分块 大小 应当为 小 端 序
 这 对 于 wave  音频 文件 是 必须 的
 此 参数默认 为真值
 如果可选 参数 inclheader  为真值则 分块 标头 中 给出的 大小 将 包括 标头 的大小
 此 参数默认 为假值
 chunk  对象 支持 下列方法 getname  返回 分块的 名称 id
 这是 分块的 头4 个字节
 getsize  返回 分块的 大小
 close  关闭 并 跳 转 到 分块的 末尾
 这 不 会 关闭 下层的 文件
 在 close  方法 已 被调用 后 其余 方法 将会引发 oserror
 在 python 3
3 之前 它们 曾 会引发 ioerror  现 在 这是 oserror  的一个别名
 isatty  返回 false
 seekpos  whence 0 设置 分块的 当前位置
 whence  参数为 可 选项 并且 默认为0 绝对 文 件 定位 其他值 还有1 相对 当前位置 查找 和2 相对 文件末尾 查找
 没有 返回值
 如果 下层 文件 不支持 查找 则 只 允许 向 前 查找
 tell  将 当前位置 返回 到 分块
 readsize 1 从 分块 读取 至多 size  个字节 如果在 获得 size  个字节 之前 已 到达 分块 末尾 则 读取 的 字节 会 少 于 此 数量
 如果 size  参数 为负值 或 被 省略 则 读取 所有 字节 直到 分块 末尾
 当 立即 遇到 分块 末尾 则返回 空字 节串对象
 skip  跳 到 分块 末尾
 此 后 对 分块 再次 调用 read  将 返回 b
 如果你 对 分块 的内容 不 感兴趣 则 应当 调用此方法 以 使 文件 指向 下 一 分块的 开头
 脚注1 ea  iff 85 交换 格式 文件 标准 jerry  morrison  electronic  arts 1985 年1 月
pyclbr  python  模块 浏览器 支持
 源代码 libpyclbr
pypyclbr  模块提供了 对 于 以 python  编写 的 模块中定义的 函数、 类 和 方法 的 受限 信息
 这种 信息 足够 用 来实现 一个 模块 浏览器
 这种 信息 是 从 python  源代码 中 直接 提取 而非 通过 导入模块 因此 该 模块可以 安全地 用 于 不受 信 任 的 代码
 此 限制 使得 非 python  实现 的 模块 无法 使用 此模块 包括 所有 标准 和 可选的 扩展模块
readmodulemodule  pathnone  返回 一个 将 模块层级 的 类 名 映射到 类 描述器 的字典
 如果可能 将 会 包括 已 导入 基类 的 描述器
 形参 module  为 要 读取 模块名称 的 字符串 它 可能是 某个 包 内部 的 模块名称
 path  如果给出 则 为 添加到 sys
path  开头的 目录 路径 序列 它 会 被用于 定位 模块 的 源代码
 此 函数 为 原始 接口 仅 保留 用 于 向下兼容
 它 会返回 以 下内容 的过滤 版本
readmoduleexmodule  pathnone  返回 一个 基于 字典 的 树 其中包含 与 模块 中 每个 用 def  或 class  语句 定义 的 函数和类 相 对应的 函数和类 描述器
 被 返回 的字典 会 将 模块层级 的 函 数和类 名 映射到 它们的 描述器
 嵌套的 对象会被 输入 到 它们的 上 级 子目录 中
 与 readmodule  一样 module  指明 要 读取 的 模块 而 path  会 被添加 到 sys
 如果 被 读取 的 模块 是一个包 则返回 的字典 将 具有 path  键 其 值 是一个包含 包 搜索路径 的 列表
3
7 新版功能 嵌套 定义 的 描述器
 它们 通过 新 的 子 属性 来访问
 每个 定义 都会 有 一个新的 上 级 属性
 这些函数 所返回的 描述器 是 function  和 class  类的实例
 用户 不应 自 行 创建 这些 类的实例
function  对象
function  类的实例 描述了 由 def  语句 所定义的 函数
 它们 具有 下列 属性 function
file  函数定义 所在的 文件 名称
module  定义了 所描述 函数 的 模块名称
name  函数 名称
lineno  定义 在 文件 中 起始 位置 的 行 号
parent  对 于 最高层级 函数 为 none
 对 于 嵌套 函数 则 为 上 级函数
3
7 新版功能
children  将 名称映射 到 嵌套 函数和类 描述器 的字典
3
7 新版功能
class  对象
class  类的实例 描述了 由 class  语句 所定义的 类
 它们 具有与 function  对象 相同 的 属性 以及 两个 额外 属性
file  类定义 所在的 文件 名称
module  定义了 所描述 类 的 模块名称
name  类 名称
lineno  定义 在 文件 中 起始 位置 的 行 号
parent  对 于 最高层级 类 为 none
 对 于 嵌套 类 则 为 上 级 类
3
7 新版功能
children  将 名称映射 到 嵌套 函数和类 描述器 的字典
3
7 新版功能
super  一个 class  对象 的 列表 它们 描述了 所描述 类 的 直接 基类
 被 命名为 超 类 但 无法被 readmoduleex  发 现 的 类 会 作为 类 名 字符串 而非 class  对象 列出
methods  一个 将 方法 名 映射到 行 号 的字典
 此 属性 可 从 更新 的 子目录 中 获取 仅 保留 用 于 向下兼容
pydoc  文档 生成器 和 在 线 帮助 系统
ensurepip  bootstrapping  the  pip  installer
3
4 新版功能
 注解 this  module  does  not  access  the  internet
 参见 安装 python  模块 the  end  user  guide  for  installing  python  packages  pep 453 explicit  bootstrapping  of  pip  in  python  installations  the  original  rationale  and  specification  for  this  module
command  line  interface
module  api
 注解 the  bootstrapping  process  has  side  effects  on  both  sys
 注解 the  bootstrapping  process  may  install  additional  modules  required  by  pip  but  other  software  should  not  assume  those  dependencies  will  always  be  present  by  default  as  the  dependencies  may  be  removed  in  a  future  version  of  pip
xmldompulldom  support  for  building  partial  dom  trees
 警告 the  xml
 if  you  need  to  parse  untrusted  or  unauthenticated  data  see  xml  漏洞
 在3
1 版更改 the  sax  parser  no  longer  processes  general  externalentities  by  default  to  increase  security  by  default
 to  enableprocessing  of  external  entities  pass  a  custom  parser  instance  in  from  xml
setfeaturefeatureexternalges  true  parsefilename  parserparser  示例 from  xml
domeventstream  objects
domeventstreamstream  parser  bufsize 3
8 版后已移除 support  for  sequence  protocol  is  deprecated
types  动态 类型 创建 和 内置类型 名称
 源代码 libtypes
py  此 模块定义了一 些工具 函数用于 协 助 动态 创建新的 类型
 它还 为 某些 对象类型 定义了 名称 这些 名称 由 标准 python  解释器 所 使用 但 并 不 像 内置的 int  或 str  那样 对 外 公开
 最后 它还 额外 提供了一些 类型 相关 但 重要 程度 不 足以 作为 内置 对象 的工具 类和函数
 动态 类型 创建
newclassname  bases  kwdsnone  execbodynone  使用 适当的 元 类 动态 地 创建一个 类对象
 前 三个参数 是 组成 类定义 头 的 部 件 类 名称 基类 有 序 排列 关键字参数 例如 metaclass
 execbody  参数 是一个 回调 函数用于 填充 新 创建 类 的 命名空间
 它 应当 接受 类 命名空间 作为 其 唯一的 参数 并 使用 类 内容 直接 更新 命名空间
 如果未 提供 回调函数 则 它 就 等效 于 传入 lambda  ns  ns
3
3 新版功能
prepareclassname  bases  kwdsnone  计算 适当的 元 类 并 创建 类 命名空间
 参数 是 组成 类定义 头 的 部 件 类 名称 基类 有 序 排列 以及 关键字参数 例如 metaclass
 返回值 是一个3 元组 metaclass  namespace  kwds  metaclass  是 适当的 元 类 namespace  是 预 备 好 的 类 命名空间 而 kwds  是 所 传入 kwds  参数 移除 每个 metaclass  条目 后 的 已 更新 副本
 如 果未 传入 kwds  参数 这 将 为 一个空 字典
3
3 新版功能
 在3
6 版更改 所 返回 元组中 namespace  元素 的 默认值 已 被改变
 现 在 当 元 类 没有 prepare  方法 时 将 会 使用 一个 保留 插入顺序 的 映射
 参见 元 类 这些函数 所支持的 类 创建 过程 的完整 细节 pep 3115 python 3000 中的元 类 引入 prepare  命名空间 钩子 types
resolvebasesbases  动态 地 解析 mro  条目 具体 描述 见 pep 560
 此函数会 在 bases  中查找 不 是 type  的 实例 的 项 并返回一个 元组其 中 每个 具有 mroentries  方法 的 此 种 对象 对象 将 被替换为 调用 该方法 解包 后的结果
 如果一个 bases  项 是 type  的 实例 或 它 不 具有 mroentries  方法 则 它 将 不 加 改变 地 被 包含在 返回 的 元组中
3
7 新版功能
 参见 pep 560 对 类型 模块 和 泛型类型 的 核心 支持
 标准 解释器 类型
 附加 工具 类和函数
simplenamespace  一个简单的 object  子 类提供了 访问 其 命名空间 的 属性 以及 一个 有 意 义 的 repr
 不同于 object  对 于 simplenamespace  你可以 添加 和 移除 属性
 如果 一个 simplenamespace  对象 使用 关键字参数 进行 初始化 这些参数 会 被 直 接 加入 下层 命名空间
 此 类型 大致 等价于 以下代码 class  simplenamespace  def  initself  kwargs  self
dict  simplenamespace  可被用于 替代 class  ns  pass
 但 是对于 结构化 记录 类型 则 应 改 用 namedtuple
3
3 新版功能
 在3
9 版更改 repr  中 的 属性 顺序 由 字母 顺序 改 为 插入顺序 类似 dict
dynamicclassattributefgetnone  fsetnone  fdelnone  docnone  在 类 上 访问 getattr  的 路 由 属性
 这是一个 描述器 用 于 定义 通过 实例 与 通过 类 访问 时 具有 不同 行为 的 属性
 当 实例 访问 时 保持 正常 行为 但 当 类 访问 属性 时 将 被 路 由 至 类 的 getattr  方法 这 是通过 引发 attributeerror  来完成 的
 这允许 有 在 实例 上 激活 的 特性 属性 同时 又 有 在 类 上 的 同名 虚拟 属性 一个 例子 请参见 enum
enum
3
4 新版功能
 协程 工具 函数
coroutinegenfunc  此 函数 可 将 generator  函数 转换为 返回 基于生成器的协程 的 coroutine  function
 基于生成器的协程 仍然 属于 generator  iterator  但 同时 又 可 被视为 coroutine  对象 兼 awaitable
 不 过 它 没 有必要 实现 await  方法
 如果 genfunc  是一个 生成器函数 它将被 原地 修改
 如果 genfunc  不是一个 生成器函数 则 它会被 包装
 如果它 返回 一个 collections
generator  的 实例 该实例 将 被 包装 在 一个 awaitable  代理对象 中
 所有其他 对象类型 将 被 原 样 返回
3
5 新版功能
xmlrpc  xmlrpc  服务 端 与 客户端 模块
xmlrpc  是一种 远程 过程 调用 方法 它 使用 通过 http  传递 的 xml  作为 载 体
 有 了 它 客户端 可以在 远程 服务器 上调用 带参数 的 方法 服务器 以 uri  命名 并 获取 结构化 的 数据
xmlrpc  是一个 集合 了 xmlrpc  服务 端 与 客户端 实现 模块 的 包
 这些模块 是 xmlrpc
winreg  windows  注册表 访问
 这些函数 将 windows  注册表 api  暴 露 给 python
 为 了 确保 即 便 程序员 忽略 了 显式 关闭 句柄 该 句柄 依 然 能够 正确 关闭 它 使用了 一个 handle  对象 而不是 整数 来 作为 注册表 句柄
 在3
3 版更改 该 模块中的 几个 函数 被用于 引发 windowserror  该异常 现在是 oserror  的别名
 函数
 常 数
hkey  constants
access  rights
value  types
3
6 新版功能
3
6 新版功能
registry  handle  objects
 引发一个 审计事件 winreg
detach  附带参数 key
 加密 服务
 本章中描述的模块 实现了 加密 性 质 的各种 算法
 它们可以 在 安装 时 自 行 选择
 在 unix  系统上 crypt  模块 也可以使用
 以下是 为 内容 概 要 hashlib  安全 哈希 与 消息 摘要 哈希 算法 shake  可变 长度 摘要 密钥 派生 blake 2 创建 哈希 对象 常 数 示例 简单 哈希 使用 不同的 摘要 大小 密钥 哈希 随机 哈希 个 性 化 树 形 模式 开发人员 hmac  基于 密钥 的 消息 验证 secrets  生成 安全 随机 数字 用 于 管理 密码 随机数 生成 凭据 凭据 应当使用 多少 个字节？ 其他 功能 应用 技巧 与 最佳 实 践
timeit  测量 小 代码 片段 的 执行 时间
 源码 libtimeit
py  该模块 提供了一种 简单的 方法来 计算 一 小 段 python  代码 的 耗 时
 它 有 命令行界面 以及 一个 可调用 方法
 它 避免 了许多 用 于 测量 执行 时间 的 常见 陷阱
 另 见 tim  peters  对 oreilly  出 版 的 python  cookbook  中 算法 章节 的 介绍
 基本 示例
 以下示例 显示了 如何使用 命令行界面 来 比较 三个 不同的 表达式 python 3 m  timeit 
2 usec  per  loop  这可以通过 python  接口 实现 import  timeit  timeit
23702679807320237 从 python  接口 还可以 传 出 一个可调用对象 timeit
19665591977536678 但 请注意 timeit  仅在 使用 命令行界面 时 会自动 确定 重复 次 数
 在 示例 一节 你可以 找到 更多的 进 阶 示例
python  接口
 该 模块定义了 三个 便 利 函数 和 一个 公共 类 timeit
timeitstmtpass  setuppass  timerdefault  timer  number 1000000 globalsnone  使用 给定 语句、 setup  代码 和 timer  函数 创建一个 timer  实例并 执行 number  次 其 timeit  方法
 可选的 globals  参数指定 用 于 执 行 代码 的 命名空间
 在3
5 版更改 添加 可选参数 globals 
repeatstmtpass  setuppass  timerdefault  timer  repeat 5 number 1000000 globalsnone  使用 给定 语句、 setup  代码 和 timer  函数 创建一个 timer  实例并 使用 给定的 repeat  计数 和 number  执行 运行 其 repeat  方法
 可 选 的 globals  参数指定 用 于 执行 代码 的 命名空间
 在3
5 版更改 添加 可选参数 globals 
 在3
7 版更改 repeat  的 默认值 由3 更改 为5
defaulttimer  默认 的 计时器 总是 time
perfcounter 
 在3
3 版更改 time
perfcounter  现在是 默认 计时器
timerstmtpass  setuppass  timertimer  function  globalsnone  用 于 小 代码 片段 的计数 执行 速度 的 类
 构造函数 接受一个 将 计时 的 语句、 一个用于 设置 的附加 语句 和 一个 定 时 器 函 数
 两个 语句 都 默认为 pass  计时器 函数 与 平台 有关 请参阅 模块 文 档字符串
 stmt  和 setup  也 可能包含 多个 以 或 换行符 分隔 的 语句 只要 它们 不包含 多 行 字符串文字 即可
 该 语句 默认 在 timeit  的 命名 空间 内 执行 可以通过将 命名空间 传递给 globals  来 控制 此行为
 要 测量 第一个 语句 的 执行 时间 请使用 timeit  方法
 repeat  和 autorange  方法 是 方便的 方法来 调用 timeit  多次
 setup  的 执行 时间 从 总 体 计时 执行 中 排除
 stmt  和 setup  参数 也可以使用 不带参数 的可调用对象
 这 将 在 一个 计 时 器 函数 中 嵌入 对 它们的 调用 然后 由 timeit  执行
 请注意 由 于 额 外 的 函数调用 在这种情况下 计时 开销 会 略 大 一些
 在3
5 版更改 添加 可选参数 globals 
 timeitnumber 1000000 执行 number  次 主要 语句
 这 将 执行 一次 setup  语句 然后 返回 执行 主 语句 多次 所需的 时间 以 秒 为单位 测量 为 浮点数
 参数 是通过 循环 的 次 数默认为 一 百 万
 要使用的 主 语句、 setup  语句 和 timer  函数 将 传递 给 构造函数
 注解 默认情况下 timeit  暂 时 关闭 garbage  collection 
 这种方 法 的 优点 在于它 使 独立 时 序 更 具 可 比 性
 缺 点 是 gc  可能是 所 测量 功能 性 能 的重要 组成部分
 如果 是这样 可以在 setup  字符串中的 第一个 语句 重新 启用 gc
 例如 timeit
timeit  autorangecallbacknone  自动 决定 调用 多少 次 timeit 
 这是一个 便 利 函数 它 反 复 调用 timeit  以便 总 时间0
2 秒 返回 最终 循环 次 数 循环 所用的 时间
 它 调用 timeit  的 次 数 以 序列125102050
 递 增 直到 所用的 时间 至少 为0
2 秒
 如果给出 callback  并且不 是 none  则 在每次 试 验 后 将 使用 两个参 数 调用 它 callbacknumber  timetaken 
3
6 新版功能
 repeatrepeat 5 number 1000000 调用 timeit  几 次
 这是一个 方便的 函数 它 反 复 调用 timeit  返回结果 列表
 第一个 参数指定 调用 timeit  的 次 数
 第二个 参数指定 timeit  的 number  参数
 注解 从 结果 向 量 计算 并 报告 平均值 和 标准差 这些 是 很 诱 人 的
 但是 这 不 是 很有用
 在 典型 情况下 最低 值 给出了 机器 运行 给定 代码段 的速度 的 下 限 结果 向 量 中 较 高 的 值 通常不 是 由 python  的速度 变化 引 起 的 而 是 由 于其他 过程 干 扰 你 的 计时 准确 性
 所 以 结果的 min  可能是 你应该 感兴趣 的唯一 数字
 之后 你应该 看 看 整个 向 量 并 应用 常 识 而不是 统计
 在3
7 版更改 repeat  的 默认值 由3 更改 为5
 printexcfilenone  帮助 程序 从 计时 代码中 打印 回溯
 典型 使用 t  timer
printexc  与 标准 回溯 相比 优 势 在 于 将显示 已编译 模板 中 的 源 行
 可选的 file  参数 指向 发送 回溯 的 位置 它 默认为 sys
stderr 
 命令行界面
 从 命令行 调用 程序 时 使用以下 表 单 python  m  timeit  n  n  r  n  u  u  s  s  h  statement 
 如果 了解 以 下 选项 n  n  numbern  执行 语句 多少 次 r  n  repeatn  重复 计时器 的 次 数默认为5 s  s  setups  最初 要执行 一次 的 语句 默认为 pass  p  process  测量 进程 时间 而不是 wallclock  时间 使用 time
processtime  而 不 是 time
perfcounter  这是 默认值3
3 新版功能
u  unitu  指定 定 时 器 输出 的 时间 单位 可以选择 nsecusecmsec  或 sec 3
5 新版功能
v  verbose  打印 原始 计时 结果 重复 更多 位 数 精度 h  help  打印 一条 简短 的 使用 信息 并 退出 可以通过将 每一 行 指定 为 单独的 语句 参数 来 给出 多 行 语句 通过 在 引号 中包含 参数 并 使用 前导 空格 可以 缩进 行
 多个 s  选项 的 处理 方式 相似
 如果未 给出 n  则 会通过 尝试 按 序列125102050
 递 增 的 数值 来 计算 合适的 循环 次 数 直到 总 计 时间 至少 为0
2 秒
defaulttimer  测量 可能 受到 在同一 台 机器 上 运行 的其他 程序 的 影响 因此在 需要 精确 计时 时 最好 的做法是 重复 几 次 计时 并 使用 最佳 时间
 r  选项 对 此 有 利 在大多数情况下 默认 的5 次 重复 可能 就 足够 了
 你可以使用 time
processtime  来 测量 cpu  时间
 注解 执行 pass  语句 会产生 一 定 的 基 线 开销
 这里 的 代码 不 会 试 图 隐藏 它 但 你 应 该 知道 它
 可以通过 不带参数 调用 程序来 测量 基 线 开销 并且 python  版本 之间 可能会 有 所 不同
 示例
unix  专 有 服务
 本章 描述 的 模块提供了 unix  操作系统 独 有 特性 的 接口 在某些 情况下 也 适用于 它 的 某些 或 许多 衍 生 版
 以 下 为 模块 概 览 posix  最常见的 posix  系统调用 大 文件 支持 重要的 模块内容 pwd  用户 密码 数据库 spwd  the  shadow  password  database  grp  组 数据库 crypt  function  to  check  unix  passwords  hashing  methods  module  attributes  模块 函数 示例 termios  posix  风格的 tty  控制 示例 tty  终端 控制 功能 pty  伪 终端 工具 示例 fcntl  the  fcntl  and  ioctl  system  calls  pipes  终端 管道 接口 模板 对象 resource  resource  usage  information  resource  limits  resource  usage  nis  sun  的 nis  黄 页 接口 unix  syslog  库 例 程 示例 简单 示例
ssl  套接字 对象 的 tlsssl  包装器
 方法、 常量 和 异常处理
 套接字 创建
 从 python 3
2 和2
9 开始 建议 使用 sslcontext  实例 的 sslcontext
wrapsocket  来 将 套接字 包装 为 sslsocket  对象
 辅助函数 createdefaultcontext  会 返回一个新的 带有 安全 默认 设置 的 上下文
 旧 的 wrapsocket  函数 已被弃用 因为它 效率 较 差 并且不 支持 服务器 名称 提示 sni  和 主机 匹配
 客户端 套接字 实例 采用 默认 上下文 和 ipv 4 ipv 6 双 栈 import  socket  import  ssl  hostname  www
version  客户端 套接字 示例 带有 自定义 上下文 和 ipv 4 hostname  www
version  服务器 套接字 实例 在 localhost  上 监听 ipv 4 context  ssl
 上下文 创建
 便捷 函数可以 帮助 创建 sslcontext  对象 用 于 常见的 目 的
serverauth  cafilenone  capathnone  cadatanone  返回一个新的 sslcontext  对象 使用 给定 purpose  的 默认 设置
 该 设置 由 ssl  模块 选择 并且 通常是 代表一个 比 直接调用 sslcontext  构 造器 时 更高的 安全 等级
 cafile  capath  cadata  代表 用 于 进行 证 书 核 验 的 可选 受 信 任 ca  证 书 与 sslcontext
loadverifylocations  的 一致
 如果 三个参数 均 为 none  此 函数可以 转 而 选择 信 任 系统 的 默认 ca  证 书
 设置 包括 protocoltls  opnosslv 2 以及 opnosslv 3 具有 不 带 rc 4 和 不带 无 身 份 验证 密码 套件 的 高度 加密 密码 套件
 传入 serverauth  作为 purpose  会把 verifymode  设 为 certrequired  并且 加载 指定 ca  证 书 当 给出 cafile  capath  和 cadata  中 的 至少 一个 或者 使用 sslcontext
loaddefaultcerts  来 加载 默认 ca  证 书
 当 keylogfilename  受支持 并且 设置了 环境变量 sslkeylogfile  时 createdefaultcontext  会 启用 密钥 日志记录
 注解 协议、 选项、 密码 和其他 设置 可 随 时 更改 为 更 具 约 束 性 的 值 而无 须 事 先 弃 用
 这些 值 代表 了 兼容性 和 安全 性 之间的 合理 平 衡
 如果你 的应用 需要 特 定 的 设置 你 应当 创建一个 sslcontext  并 自 行 应用 设置
 注解 如果你 发 现 当 某些 较 旧 的 客户端 或 服务器 尝试 与 用此函数 创建 的 sslcontext  进行 连接 时 收到 了 报 错 提示 protocol  or  cipher  suite  mismatch  这 可能是 因为它们 只 支持 ssl 3
0 而 它 被 此 函数 用 opnosslv 3 排除 掉 了
0 被 广泛 认为 完全 不可用
 如果你 仍 希望 继续 使用 此 函数 但 仍 允许 ssl 3
0 连接 你可以使用 以下代码 重新 启 用它们 ctx  ssl
opnosslv 33
4 新版功能
 在3
4 版更改 rc 4 被 从 默认 密码 字符串 中 丢弃
 在3
6 版更改 chacha 20 poly 1305 被添加到 默认 密码 字符串 中
3 des  被 从 默认 密码 字符串 中 丢弃
 在3
8 版更改 增加了 对 密钥 日志记录 至 sslkeylogfile  的 支持
 异常
sslerror  引发 此 异常 以 提示 来自 下层 ssl  实现 目前 由 openssl  库 提供的 错误
 它 表示 在 下层 网络 连接 之 上 叠 加 的高层级 加密 和 验证 层 存 在 某种 问题
 此 错 误 是 oserror  的一个子类 型
 sslerror  实例 的 错误 和 消息 是 由 openssl  库 提供的
 在3
3 版更改 sslerror  曾 经 是 socket
error  的一个子类 型
 library  一个 字符串形式 的 助 记 符 用来 指明 发生错误 的 openssl  子模块 例如 ssl  pem  或 x 509
 可能的 取值 范围 依赖于 openssl  的 版本
3
3 新版功能
 reason  一个 字符串形式 的 助 记 符 用来 指明 发生错误 的原因 例如 certificateverifyfailed
 可能的 取值 范围 依赖于 openssl  的 版 本
3
3 新版功能
sslzeroreturnerror  sslerror  的子类 当 尝试 读取或写入 且 ssl  连接 已被 完全 关闭 时会被 引 发
 请注意 这 并 不 意味着 下层的 传输 读取 tcp  已 被关闭
3
3 新版功能
sslwantreaderror  sslerror  的子类 当 尝试 读取或写入 数据 但 在 请求 被 满足 之前 还需要 在 下层的 tcp  传输 上 接收 更多 数据 时会被 非阻塞 型 ssl  套接字 引发
3
3 新版功能
sslwantwriteerror  sslerror  的子类 当 尝试 读取或写入 数据 但 在 请求 被 满足 之前 还需要 在 下层的 tcp  传输 上 发送 更多 数据 时会被 非阻塞 型 ssl  套接字 引发
3
3 新版功能
sslsyscallerror  sslerror  的子类 当 尝试 在 ssl  套接字 上 执行 操作 时 遇到 系统 错误时 会 被引发
 不幸的是 没有 简单的 方式 能 检查 原始 errno  编号
3
3 新版功能
ssleoferror  sslerror  的子类 当 ssl  连接 被 突 然 终止 时会被 引发
 通常 当 遇到 此 错误时 你 不应 再 尝试 重 用 下层的 传输
3
3 新版功能
sslcertverificationerror  sslerror  的子类 当 证 书 验证 失败 时会被 引发
3
7 新版功能
 verifycode  一个数字 形式 的 错误 编号 用于表示 验证 错误
 verifymessage  用于表示 验证 错误 的 人 类 可读的 字符串
certificateerror  sslcertverificationerror  的别名
 在3
7 版更改 此 异常 现在是 sslcertverificationerror  的别名
 随机 生成
randbytesnum  返回 num  个 高 加密 强 度 伪随机 字节数据
 如果 prng  未 使用 足够的 数据 作为 随机 种子 或者如果 当前 rand  方法 不支持 该 操作 则会引发 sslerror
 randstatus  可被用来 检查 prng  的 状态 而 randadd  可被用来 为 prng  设置 随机 种子
 对 于 几乎所有 应用程序 都 更 推荐 使用 os
urandom
 请 阅读 维 基 百 科 文 章 cryptographically  secure  pseudorandom  number  generator  csprng  以 了解 对 于 高 加密 强 度 生成器 的 具体 要求
3
3 新版功能
randpseudobytesnum  返回 bytes  iscryptographic  bytes  是 num  个 伪随机 字节数据 如 果 所生成的 字节数据 为 高 加密 强 度 则 iscryptographic  为 true
 如果 当前 rand  方法 不支持 此操作 则会引发 sslerror
 所生成的 伪随机 字节 序列 如果 具有 足够的 长度 则 将 会 具有 唯一 性 并 是 并非 不 可 预 测
 它们 可被用于 非 加密 目 的 以及 加密 协议 中 的特定 目 的 但 通常不 可被用于 密钥 生成 等 目 的
 对 于 几乎所有 应用程序 都 更 推荐 使用 os
urandom
3
3 新版功能
3
6 版后已移除 openssl  已弃用 了 ssl
randpseudobytes  请改用 ssl
randbytes
randstatus  如果 ssl  伪 随机数生成器 已 使用‘ 足够的’ 随机性 作为 种子 则返回 true  否则返回 false
 你可以使用 ssl
randegd  和 ssl
randadd  来 增加 伪 随机数生成器 的 随机性
randegdpath  如果你 在 某 处 运行 了 一个 熵 收集 守护 程序 egd  且 path  是 向其 打开 的 套接字 连接 路径名 此 函数 将 从 该 套接字 读取256 个字节 的 随机性 数据并 将 其 添加到 ssl  伪 随机数生成器 以 增加 所生成 密钥 的 安全 性
 此操作 通常 只 在没有 更好 随机性 源 的 系统上 才 是 必要的
 请查看 httpegd
net  或 httpprngd
net  来 了解有关 熵 收集 守护 程序 源 的 信息
 可用性 对 于 libressl  和 openssl 1
0 不可用
randaddbytes  entropy  将 给定的 bytes  混合 到 ssl  伪 随机数生成器 中
 形参 entropy  float  类型 是 数据 所 包含的 熵 的 下 界 因此 你可以 总是 使用0
 请 查看 rfc 1750 了解有关 熵 源 的更多信息
 在3
5 版更改 现在接受 可 写 的 字节 类对象
 证 书 处理
 常 数
3
6 新版功能
3
6 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
4 新版功能
3
6 新版功能
3
6 新版功能
3
6 新版功能
3
6 新版功能
3
6 版后已移除 use  protocoltls  instead
 警告 ssl  version 2 is  insecure
3
6 版后已移除 openssl  has  removed  support  for  sslv 2
 警告 ssl  version 3 is  insecure
3
6 版后已移除 openssl  has  deprecated  all  version  specific  protocols
 use  the  default  protocol  protocoltls  with  flags  like  opnosslv 3 instead
3
6 版后已移除 openssl  has  deprecated  all  version  specific  protocols
 use  the  default  protocol  protocoltls  with  flags  like  opnosslv 3 instead
3
4 新版功能
3
6 版后已移除 openssl  has  deprecated  all  version  specific  protocols
 use  the  default  protocol  protocoltls  with  flags  like  opnosslv 3 instead
3
4 新版功能
3
6 版后已移除 openssl  has  deprecated  all  version  specific  protocols
 use  the  default  protocol  protocoltls  with  flags  like  opnosslv 3 instead
3
2 新版功能
3
2 新版功能
3
6 版后已移除 sslv 2 is  deprecatedssl
3
2 新版功能
3
6 版后已移除 sslv 3 is  deprecatedssl
3
2 新版功能
3
7 版后已移除 the  option  is  deprecated  since  openssl 1
0 use  the  new  sslcontext
3
4 新版功能
3
7 版后已移除 the  option  is  deprecated  since  openssl 1
3
4 新版功能
3
7 版后已移除 the  option  is  deprecated  since  openssl 1
3
7 新版功能
3
7 版后已移除 the  option  is  deprecated  since  openssl 1
 it  was  added  to 2
0 for  backwards  compatibility  with  openssl 1
3
7 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
8 新版功能
3
3 新版功能
3
6 新版功能
3
5 新版功能
3
7 新版功能
3
3 新版功能
3
2 新版功能
3
3 新版功能
3
7 新版功能
3
7 新版功能
3
7 新版功能
3
7 新版功能
3
7 新版功能
3
7 新版功能
3
3 新版功能
2 k 26 jan 20173
2 新版功能
opensslversioninfo 10211153
2 新版功能
opensslversionnumber 0 x 100020 bf 3
2 新版功能
3
4 新版功能
3
6 新版功能
3
4 新版功能
3
4 新版功能
3
6 新版功能
3
7 新版功能
ssl  sockets
socket  ssl  sockets  provide  the  following  methods  of  套接字 对象 accept  bind  close  connect  detach  fileno  getpeername  getsockname  getsockopt  setsockopt  gettimeout  settimeout  setblocking  listen  makefile  recv  recvinto  but  passing  a  nonzero  flags  argument  is  not  allowed  send  sendall  with  the  same  limitation  sendfile  but  os
 在3
5 版更改 the  sendfile  method  was  added
 在3
5 版更改 the  shutdown  does  not  reset  the  socket  timeout  each  time  bytes  are  received  or  sent
 the  socket  timeout  is  now  to  maximum  total  duration  of  the  shutdown
3
6 版后已移除 it  is  deprecated  to  create  a  sslsocket  instance  directly  use  sslcontext
wrapsocket  to  wrap  a  socket
 在3
7 版更改 sslsocket  instances  must  to  created  with  wrapsocket
 在3
5 版更改 the  socket  timeout  is  no  more  reset  each  time  bytes  are  received  or  sent
 the  socket  timeout  is  now  to  maximum  total  duration  to  read  up  to  len  bytes
3
6 版后已移除 use  recv  instead  of  read
 在3
5 版更改 the  socket  timeout  is  no  more  reset  each  time  bytes  are  received  or  sent
 the  socket  timeout  is  now  to  maximum  total  duration  to  write  buf
3
6 版后已移除 use  send  instead  of  write
 注解 the  read  and  write  methods  are  the  lowlevel  methods  that  read  and  write  unencrypted  applicationlevel  data  and  decryptencrypt  it  to  encrypted  wirelevel  data
 在3
4 版更改 the  handshake  method  also  performs  matchhostname  when  the  checkhostname  attribute  of  the  sockets  context  is  true
 在3
5 版更改 the  socket  timeout  is  no  more  reset  each  time  bytes  are  received  or  sent
 the  socket  timeout  is  now  to  maximum  total  duration  of  the  handshake
 在3
7 版更改 hostname  or  ip  address  is  matched  by  openssl  during  handshake
 the  function  matchhostname  is  no  longer  used
 in  case  openssl  refuses  a  hostname  or  ip  address  the  handshake  is  aborted  early  and  a  tls  alert  message  is  send  to  the  peer
org  version 3 注解 to  validate  a  certificate  for  a  particular  service  you  can  use  the  matchhostname  function
 在3
2 版更改 the  returned  dictionary  includes  additional  items  such  as  issuer  and  notbefore
 在3
4 版更改 valueerror  is  raised  when  the  handshake  isnt  done
 the  returned  dictionary  includes  additional  x 509 v 3 extension  items  such  as  crldistributionpoints  caissuers  and  ocsp  uris
 在3
9 版更改 ipv 6 address  strings  no  longer  have  a  trailing  new  line
3
5 新版功能
3
3 新版功能
3
3 新版功能
3
5 新版功能
3
3 新版功能
 注解 only  available  with  openssl 1
3
8 新版功能
3
5 新版功能
3
2 新版功能
3
2 新版功能
3
2 新版功能
 在3
7 版更改 the  attribute  is  now  always  ascii  text
 when  serverhostname  is  an  internationalized  domain  name  idn  this  attribute  now  stores  the  alabel  form  xnpythnmua
3
6 新版功能
sessionreused 3
6 新版功能
ssl  contexts
3
2 新版功能
 heres  a  table  showing  which  versions  in  a  client  down  the  side  can  connect  to  which  versions  in  a  server  along  the  top  客户端 服务器 sslv 2 sslv 3 tls 3 tlsv 1 tlsv 1
2 sslv 2 是 否 否1 否 否 否 sslv 3 否 是 否2 否 否 否 tls  sslv 233 否1 否2 是 是 是 是 tlsv 1 否 否 是 是 否 否 tlsv 1
1 否 否 是 否 是 否 tlsv 1
2 否 否 是 否 否 是 脚注1 sslcontext  disables  sslv 2 with  opnosslv 2 by  default
 参见 createdefaultcontext  lets  the  ssl  module  choose  security  settings  for  a  given  purpose
 在3
6 版更改 the  context  is  created  with  secure  default  values
 the  options  opnocompression  opcipherserverpreference  opsingledhuse  opsingleecdhuse  opnosslv 2 except  for  protocolsslv 2 and  opnosslv 3 except  for  protocolsslv 3 are  set  by  default
 the  initial  cipher  suite  list  contains  only  high  ciphers  no  null  ciphers  and  no  md 5 ciphers  except  for  protocolsslv 2
certstorestats  crl 0 x 509 ca 1 x 50923
4 新版功能
 在3
3 版更改 new  optional  argument  password
3
4 新版功能
 在3
4 版更改 new  optional  argument  cadatasslcontext
 注解 certificates  in  a  capath  directory  arent  loaded  unless  they  have  been  used  at  least  once
3
4 新版功能
 示例 ctx  ssl
3
6 新版功能
 注解 when  connected  the  sslsocket
3
5 新版功能
3
3 新版功能
3
7 新版功能
3
4 新版功能
3
3 新版功能
3
3 新版功能
 参见 ssltls  perfect  forward  secrecy  vincent  bernat
 在3
5 版更改 always  allow  a  serverhostname  to  be  passed  even  if  openssl  does  not  have  sni
 在3
6 版更改 session  argument  was  added
 在3
7 版更改 the  method  returns  on  instance  of  sslcontext
3
7 新版功能
 在3
6 版更改 session  argument  was  added
 在3
7 版更改 the  method  returns  on  instance  of  sslcontext
3
7 新版功能
 示例 import  socket  ssl  context  ssl
com 4433
4 新版功能
 在3
7 版更改 verifymode  is  now  automatically  changed  to  certrequired  when  hostname  checking  is  enabled  and  verifymode  is  certnone
 注解 this  features  requires  openssl 0
3
8 新版功能
 注解 this  features  requires  openssl 1
 注解 this  attribute  is  not  available  unless  the  ssl  module  is  compiled  with  openssl 1
3
7 新版功能
 注解 this  attribute  is  not  available  unless  the  ssl  module  is  compiled  with  openssl 1
3
7 新版功能
 注解 this  attribute  is  not  available  unless  the  ssl  module  is  compiled  with  openssl 1
3
8 新版功能
 注解 with  versions  of  openssl  older  than 0
 在3
6 版更改 sslcontext
options  returns  options  flags  ssl
 注解 only  available  with  openssl 1
3 support  the  property  value  is  none  and  cant  be  modified 3
8 新版功能
 注解 only  writeable  with  openssl 1
3
7 新版功能
3
4 新版功能
 在3
6 版更改 sslcontext
verifyflags  returns  verifyflags  flags  ssl
 在3
6 版更改 sslcontext
verifymode  returns  verifymode  enum  ssl
certificates
certificate  chains
ca  certificates
combined  key  and  certificate
selfsigned  certificates
 示例
testing  for  ssl  support
clientside  operation
serverside  operation
notes  on  nonblocking  sockets
 在3
5 版更改 in  earlier  python  versions  the  sslsocket
send  method  returned  zero  instead  of  raising  sslwantwriteerror  or  sslwantreaderror
select  sock  参见 the  asyncio  module  supports  nonblocking  ssl  sockets  and  provides  a  higher  level  api
memory  bio  support
3
5 新版功能
 可以使用 以下方法 context  serverside  serverhostname  session  sessionreused  read  write  getpeercert  selectedalpnprotocol  selectednpnprotocol  cipher  sharedciphers  compression  pending  dohandshake  verifyclientposthandshake  unwrap  getchannelbinding  version  when  compared  to  sslsocket  this  object  lacks  the  following  features  any  form  of  network  io  recv  and  send  read  and  write  only  to  the  underlying  memorybio  buffers
 在3
7 版更改 sslobject  instances  must  to  created  with  wrapbio
ssl  session
3
6 新版功能
security  considerations
best  defaults
manual  settings
 在3
7 版更改 hostname  matchings  is  now  performed  by  openssl
 pythonno  longer  uses  matchhostname
multiprocessing
tls
3
7 新版功能
libressl  support
 参见 class  socket
socket  documentation  of  underlying  socket  class  ssltls  strong  encryption  an  introduction  apache  http  server  文档 介绍 rfc 1422 privacy  enhancement  for  internet  electronic  mail  part  ii  certificatebased  key  management  steve  kent  rfc 4086 randomness  requirements  for  security  donald  e
emailutils  其他 工具
urllibrobotparser  robotstxt  语法分析程序
 源代码 liburllibrobotparser
py  此模块提供了 一个单独的 类 robotfileparser  它可以 回 答 关于 某个 特定 用户 代理 是否 能 在 web  站 点 获取 发布 robots
txt  文件 的 url  的 问题
 有关 robots
txt  文件 结构 的 更多细节 请参阅 httpwww
robotfileparserurl  这个类 提供了一些 可以 读取、 解析 和 回 答 关于 url  上 的 robots
txt  文 件 的 问题 的 方法
 seturlurl  设置 指向 robots
txt  文件 的 url
 read  读取 robots
txt  url  并将其 输入 解析器
 parselines  解析 行 参数
 canfetchuseragent  url  如果 允许 useragent  按照 被解析 robots
txt  文件中的 规则 来获取 url  则返回 true
 mtime  返回 最近 一次 获取 robots
txt  文件 的 时间
 这 适用于 需要 定 期 检查 robots
txt  文件 更新 情况 的 长时间 运行 的 网 页 爬 虫
 modified  将 最近 一次 获取 robots
txt  文件 的 时间 设置 为当前 时间
 crawldelayuseragent  为 指定 的 useragent  从 robots
txt  返回 crawldelay  形参
 如果此 形参 不存在或 不 适用于 指定 的 useragent  或者 此 形参 的 robots
txt  条目 存 在 语法错误 则返回 none
3
6 新版功能
 requestrateuseragent  以 named  tuple  requestraterequests  seconds  的形式 从 robots
txt  返回 requestrate  形参 的内容
 如果此 形参 不存在或 不 适用于 指定 的 useragent  或者 此 形参 的 robots
txt  条目 存 在 语 法错误 则返回 none
3
6 新版功能
 sitemaps  以 list  的形式 从 robots
txt  返回 sitemap  形参 的内容
 如 果 此 形参 不存在 或者 此 形参 的 robots
txt  条目 存 在 语法错误 则返回 none
3
8 新版功能
 下面的 例子演示了 robotfileparser  类 的基本 用 法 import  urllib
 互联网 数据 处理
 本章 介绍了 支持 处理 互联网 上 常 用 数据格式 的 模块
 email  电子邮件 与 mime  处理 包 email
message  表示一 封 电子邮件 信息 email
parser  解析 电子邮件 信息 feedparser  api  parser  api  附加 说明 email
errors  异常 和 缺 陷 类 email
contentmanager  managing  mime  content  content  manager  instances  email  示例 email
encoders  编码器 email
utils  其他 工具 email
iterators  迭代器 json  json  编码和解码 器 基本 使用 编码器 和 解码器 异常 标准 符合 性 和 互 操作 性 字符 编码 infinite  和 nan  数值 对象中的 重复 名称 顶 级 非 对象 非 数组 值 实现 限制 命令行界面 命令行选项 mailcap  mailcap  文件 处理 mailbox  manipulate  mailboxes  in  various  formats  mailbox  对象 maildir  mbox  mh  babyl  mmdf  message  objects  maildirmessage  mboxmessage  mhmessage  babylmessage  mmdfmessage  异常 示例 mimetypes  map  filenames  to  mime  types  mimetypes  objects  base 64 base 16 base 32 base 64 base 85 数据 编码 binhex  对 binhex 4 文件进行 编码和解码 注释 binascii  二进制 和 ascii  码 互 转 quopri  编码与解码 经过 mime  转 码 的 可打印 数据 uu  对 uuencode  文件进行 编码与解码
tokenize  对 python  代码 使用 的 标记 解析器
 源码 libtokenize
 为 了 简化 标记 流 的 处理 所有的 运算符 和 定 界 符 以及 ellipsis  返回 时 都会 打 上 通用的 op  标记
 可以通过 tokenize
tokenize  返回 的 namedtuple  对象 的 exacttype  属性来 获得 确 切 的 标记 类型
 对 输入 进行 解析 标记
 主要 的 入 口 是一个 生成器 generatortokenize
tokenizereadline  生成器 tokenize  需要 一个 readline  参数 这 个 参数必须是 一个 可 调用 对象 且 能 提供 与 文件对象 的 io
readline  方法 相同 的 接 口
 每次 调用 这个函数 都 要 返回 字节 类型 输入 的 一 行 数据
 在3
1 版更改 added  support  for  named  tuples
 在3
3 版更改 added  support  for  exacttype
3
2 新版功能
tokenerror  raised  when  either  a  docstring  or  expression  that  may  be  split  over  several  lines  is  not  completed  anywhere  in  the  file  for  example  beginning  of  docstring  或者123 note  that  unclosed  singlequoted  strings  do  not  cause  an  error  to  beraised
commandline  usage
3
3 新版功能
 示例
readline  for  token  in  tokens  printtoken  或者 通过 tokenize  直接 读取 字节数据 import  tokenize  with  openhello
emailheaderregistry  custom  header  objects
py 3
6 新版功能1 headers  are  represented  by  customized  subclasses  of  str
 the  default  mappings  are  subject  uniqueunstructuredheader  date  uniquedateheader  resentdate  dateheader  origdate  uniquedateheader  sender  uniquesingleaddressheader  resentsender  singleaddressheader  到 uniqueaddressheader  resentto  addressheader  cc  uniqueaddressheader  resentcc  addressheader  bcc  uniqueaddressheader  resentbcc  addressheader  从 uniqueaddressheader  resentfrom  addressheader  replyto  uniqueaddressheader  mimeversion  mimeversionheader  contenttype  contenttypeheader  contentdisposition  contentdispositionheader  contenttransferencoding  contenttransferencodingheader  messageid  messageidheader  headerregistry  has  the  following  methods  maptotypeself  name  cls  name  is  the  name  of  the  header  to  be  mapped
 the  general  form  of  an  address  is  displayname  usernamedomain  或者 usernamedomain  where  each  part  must  conform  to  specific  syntax  rules  spelled  out  in  rfc 5322
 脚注1 originally  added  in 3
glob  unix  风格 路径名 模式 扩展
configparser  配置文件 解析器
 源代码 libconfigparser
py  此模块提供了 它 实现 一种 基本 配置 语言 configparser  类 这种 语言 所提供的 结构 与 microsoft  windows  ini  文件 的 类似
 你可以使用 这种 语言 来 编写 能够 由 最终 用户 来 自定义 的 python  程序
 注解 这 个 库 并 不 能够 解析 或写入 在 windows  registry  扩展 版本 ini  语法 中 所使用的 值 类型 前缀
 参见 模块 shlex  支持 创建 可 被用作 应用 配置文件 的替代 的 unix  终端 式 微 语言
 模块 json  json  模块实现了 一个 javascript  语法 的 子集 它 也 可被用于 这种 目 的
 快速 起 步
 让我们 准备 一个 非常 基本的 配置文件 它 看起来 是这样的 default  serveraliveinterval 45 compression  yes  compressionlevel 9 forwardx 11 yes  bitbucket
com  port 50022 forwardx 11 noini  文件 的 结构 描述 见 以 下 章节
 总 的 来说 这种 文件 由 多个 节 组成 每个 节 包含 多个 带有 值 的 键
 configparser  类可以 读取 和写入 这种 文件
 让我们 先 通过 程序 方式来 创建 上述 的 配置文件
 如 你所 见 我们可以 把 配置 解析器 当 作 一个字典 来处理
 两者 确实 存 在 差异 将 在 后 文 说明 但是 其 行为 非常 接近 于 字典 所 具有 一般 行为
 现 在 我们 已经 创建 并 保存 了 一个 配置文件 让我们 再 将 它 读取 出来 并 探 究 其中包含 的 数据
orgforwardx 11 yes  正 如 我们 在上面 所 看到 的 相关的 api  相当 直 观
 唯一 有 些 神 奇 的地方 是 default  小节 它 为 所有其他 小节 提供了 默认值1
 还要注意 小节 中 的 键 大小写 不 敏感 并且 会 存储为 小写 形式1
 支持 的 数据类型
 配置 解析器 并不会 猜 测 配置文件 中 值 的 类型 而 总是 将它们 在内部 存储为 字符串
 这意味着 如果你需要 其他 数据类型 你 应当 自己 来 转换 inttopsecretport 50022 floattopsecretcompressionlevel 9
0 由 于 这种 任务 十分 常 用 配置 解析器 提供了 一系列 便捷 的 获取 方法 来处理 整数、 浮点数 和 布尔值
 最后一个 类型 的 处理 最 为 有趣 因为 简单地 将 值 传给 bool  是没有 用 的 boolfalse  仍然 会 是 true
 为 解决 这个问题 配置 解析器 还提供了 getboolean
 这个方法 对 大小写 不 敏感 并 可 识别 yesno  onoff  truefalse  和101 等 布尔值
 例如 topsecret
org  compression  true  除了 getboolean  配置 解析器 还提供了 同 类 的 getint  和 getfloat  方法
 你可以 注册 你自己的 转换器 并 或 是 定制 已 提供的 转换器
1
 回退 值
 与 字典 类似 你可以使用 某个 小节 的 get  方法 来提供 回退 值 topsecret
getcipher 3 descbc 3 descbc  请注意 默认值 会 优先 于 回退 值
 例如 在 我们 的 示例中 compressionlevel  键 仅在 default  小节 被 指定
 如果你 尝试 在 topsecret
com  小节 获取 它 我们 将总是 获取 到 默认值 即使 我们 指定了 一个 回退 值 topsecret
getcompressionlevel 39 还需要 注意 的 一点 是 解析器 层级的 get  方法 提供了 自定义 的 更复杂 接口 它 被 维护 用 于 向下兼容
 当使用 此方法 时 回退 值 可以通过 fallback  仅限 关键字参数 来提供 config
 fallbackno  such  things  as  monsters  no  such  things  as  monsters  同样的 fallback  参数 也可 在 getint  getfloat  和 getboolean  方法 中 使用 例如 batchmode  in  topsecret  false  topsecret
 受支持的 ini  文件 结构
 配置文件 是 由 小节 组成的 每个 小节 都有一个 section  标头 加上 多个 由 特定 字符串 默认为 或1 分隔 的 键值 条目
 默认情况下 小节 名 对 大小写 敏感 而 键 对 大小写 不 敏感1
 键和值 开头 和 末尾 的空格 会 被移除
 值可以 被省略 在此情况下 键值 分隔符 也可以 被省略
 值 还可以 跨 越 多 行 只要 其他 行 带有 比 值 的 第一行 更 深 的缩进
 依 据 解析器 的 具体 模式 空白 行 可能 被视为 多 行 值 的 组成部分 也可能 被忽略
 配置文件 可以包含 注释 要 带有 指定 字符 前缀 默认为 和1
 注释 可以 单独 出现于 原 本 的空白 行 并 可 使用 缩进
1 例如 simple  values  keyvalue  spaces  in  keysallowed  spaces  in  valuesallowed  as  well  spaces  around  the  delimiter  obviously  you  can  also  use  to  delimit  keys  from  values  all  values  are  strings  values  like  this 1000000 or  this 3
 值 的 插值
 在 核心 功能 之 上 configparser  还 支持 插值
 这意味着 值可以 在 被 get  调用 返回 之前 进行 预 处理
basicinterpolation  默认 实现 由 configparser  来 使用
 它允许 值 包含 引用 了 相同 小节 中 其他 值 或者 特殊 的 默认 小节 中的值 的 格式字符串1
 额外的 默认值 可以在 初始 化 时 提供
 例如 paths  homedir  users  mydir  homedirslumberjack  mypictures  mydirspictures  escape  gain 80 use  a  to  escape  the  sign  is  the  only  character  that  needs  to  be  escaped  在 上面的例子 里 configparser  的 interpolation  设 为 basicinterpolation  这 会 将 homedirs  求 解 为 homedir  的 值 在这里 是 users
 mydirs  的 将 被 实际 求 解 为 userslumberjack
 所有 插值 都 是 按 需 进行 的 这样 引用 链 中使用的 键 不必 以 任何 特定 顺序 在 配置文件 中 指明
 当 interpolation  设 为 none  时 解析器 会 简单地 返回 mydirspictures  作为 mypictures  的 值 并返回 homedirslumberjack  作为 mydir  的 值
extendedinterpolation  一个用于 插值 的替代 处理程序 实现了 更高级 的语法 它 被用于 zc
buildout  中 的 实例
 扩展 插值 使用 sectionoption  来表示 来 自 外部 小节 的 值
 插值 可以 跨 越 多个 层级
 为 了 方便 使用 section  部 分 可 被省略 插值 会 默认 作用于 当前 小节 可能会 从 特殊 小节 获取 默认值
 例如 上面 使用 基本 插值 描述 的 配置 使用 扩展 插值 将 是 这 个 样 子 paths  homedir  users  mydir  homedirlumberjack  mypictures  mydirpictures  escape  cost 80 use  a  to  escape  the  sign  is  the  only  character  that  needs  to  be  escaped  来自 其他 小节 的 值 也可以被 获取 common  homedir  users  librarydir  library  systemdir  system  macportsdir  optlocal  frameworks  python 3
 映射 协议 访问
 定制 解析器 行为
 旧式 api  示例
 主要 出 于 向下兼容 性 的 考虑 configparser  还 提供了一种 采用 显式 getset  方法 的 旧式 api
 虽然 以 下 介绍 的 方法 存 在 有效的 用 例 但 对 于 新 项目 仍 建议 采用 映射 协议 访问
 旧式 api  在 多 数 时候 都 更复杂、 更 底层 并且 完全 违 反 直 觉
 一个 写入 配置文件 的 示例 import  configparser  config  configparser
writeconfigfile  一个 再次 读取 配置文件 的 示例 import  configparser  config  configparser
getsection 1 foo  要获取 插值 请使用 configparser  import  configparser  cfg  configparser
getsection 1 monster  fallbacknone  none  默认值 在 两 种类型的 configparser  中 均可 用
 它们将 在 当 某个 选项 未 在 别 处 定义 时 被用于 插值
configparser  对象
defaultsect  interpolationbasicinterpolation  converters  主 配置 解析器
 当 给定 defaults  时它会 被初始化 为 包含 固 有 默认值 的 字典
 当 给定 dicttype  时 它 将 被用来 创建 包含 节、 节 中 的 选项 以及 默认值 的字典
 当 给定 delimiters  时它会 被用作 分隔 键 与 值 的 子 字符串 的 集合
 当 给 定 commentprefixes  时 它 将 被用作 在 否则为 空行 的 注释 的 前缀 子 字符 串 的 集合
 注释 可以被 缩进
 当 给定 inlinecommentprefixes  时 它 将 被用作 非空 行 的 注释 的 前缀 子 字符串 的 集合
 当 strict  为 true  默认值 时 解析器 在 从 单个 源文件、 字符串或 字典 读取 时 将 不允许 任何 节 或 选项 出现 重复 否 则会引发 duplicatesectionerror  或 duplicateoptionerror
 当 emptylinesinvalues  为 false  默认值 true  时 每个 空行 均 表示一个 选项 的 结束
 在其他情况下 一个 多 行 选项 内部 的 空行 会 被 保留 为 值 的一部分
 当 allownovalue  为 true  默认值 false  时 将 接受 没有 值 的 选项 此 种 选项 的值将 为 none  并且 它们会 以 不带 末尾 分隔 符 的形式 被 序列化
 当 给定 defaultsection  时 它 将 指定 存放 其他 节 的 默认值 和 用 于 插值 的 特殊 节 的 名称 通常 命名为 default
 该值 可通过 使用 defaultsection  实例属性 在运行时 被 读取 或 修改
 插值 行为 可通过 给出 interpolation  参数 提供 自定义 处理程序 的方式来 定 制
 none  可用来 完全 禁用 插值 extendedinterpolation  提供了一 种 更高级 的 变体 形式 它 的 设计 受到 了 zc
buildout  的 启 发
 有关 该 主 题 的更多信息请参 见 专门 的 文档 章节
 插值 中使用的 所有 选项 名称 将 像 任何其他 选项 名称 引用 一样 通过 optionxform  方法来 传递
 例如使用 optionxform  的 默认 实现 它 会 将 选项 名称 转换为 小写 形式 时 值 foo  bars  和 foo  bars  是 等价 的
 当 给定 converters  时 它 应当为 一个字典 其 中 每个键 代表一个 类型 转 换器 的 名称 而 每个 值 则 为 实现 从字符串 到 目标 数据类型 的 转换 的可调用对象
 每个 转换器 会 获得 其 在 解析器 对象 和 节 代理 上 对应的 get  方法
 在3
1 版更改 默认 的 dicttype  为 collections
 在3
2 版更改 添加了 allownovalue  delimiters  commentprefixes  strict  emptylinesinvalues  defaultsection  以及 interpolation
 在3
5 版更改 添加了 converters  参数
 在3
7 版更改 defaults  参数 会通过 readdict  来读取 提供 全 解 析器 范围内 一致的 行为 非 字符串 类型 的键和值 会 被 隐式地 转换为字符串
 在3
8 版更改 默认 的 dicttype  为 dict  因为它 现在会 保留 插入顺 序
 defaults  返回包含 实例 范围内 默认值 的字典
 sections  返回 可 用 节 的 列表 default  section  不包括 在 该 列表中
 addsectionsection  向 实例 添加 一个名为 section  的 节
 如果给定 名称 的 节 已存在 将 会 引发 duplicatesectionerror
 如果 传入 了 default  section  名称 则会引发 valueerror
 节 名称 必须为 字符串 如果不 是 则会引发 typeerror
 在3
2 版更改 非 字符串 的 节 名称 将引发 typeerror
 hassectionsection  指明 相应 名称 的 section  是否 存在于 配置 中
 default  section  不 包含在 内
 optionssection  返回 指定 section  中 可 用 选项 的 列表
 hasoptionsection  option  如果给定 的 section  存 在 并且 包含 给定的 option  则返回 true  否则返回 false
 如果指定 的 section  为 none  或 空字符串 则 会 使用 default
 readfilenames  encodingnone  尝试 读取并 解析 一个包含 文件名 的可迭代对象 返回 一个 被 成功 解析 的 文 件 名 列表
 如果 filenames  为 字符串、 bytes  对象 或 pathlike  object  它 会 被当作 单个 文件 来处理
 如果 filenames  中 名称 对应的 某个 文件 无 法 被 打开 该文件 将被忽略
 这样的 设计 使得 你可以 指定 包含 多个 潜在 配置文件 位置 的可迭代对象 例如 当前目录、 用户 家 目录 以及 某个 系统 级 目录 存在于 该 可迭代对象 中的所有 配置文件 都 将 被 读取
 如果 名称 对应的 文件 全 都 不存在 则 configparser  实例 将 包含一个 空 数据 集
 一个 要求 从 文件 加载 初始 值 的应用 应当 在 调用 read  来获 取 任何 可选 文件 之前 使用 readfile  来 加载 所 要求 的 一个或多个 文 件 import  configparser  os  config  configparser
cfg  encodingcp 12503
2 新版功能 encoding  形参
 在 之前 的版本中 所有 文件 都 将 使用 open  的 默认 编码格式 来读取
3
1 新版功能 filenames  形参 接受一个 pathlike  object
3
7 新版功能 filenames  形参 接受一个 bytes  对象
 readfilef  sourcenone  从 f  读取并 解析 配置 数据 它 必须是一个 产生 unicode  字符串 的可迭 代 对象例如 以 文本模式 打开的文件
 可选参数 source  指定 要 读取 的 文件 名称
 如果未 给出 并且 f  具有 name  属性 则 该 属性 会 被用作 source  默认值为
3
2 新版功能 替代 readfp
 readstringstring  sourcestring  从字符串 中 解析 配置 数据
 可选参数 source  指定一个 所 传入 字符串 的 上下文 专属 名称
 如果未 给出 则会使用 string
 这通常 应 为 一个 文件 系统路径 或 url
3
2 新版功能
 readdictdictionary  sourcedict  从 任意 一个 提供了 类似于 字典 的 items  方法的对象 加载 配置
 键 为 节 名称 值 为 包含 节 中 所 出现 的键和值 的字典
 如果 所用的 字典 类型 会 保留 顺序 则 节 和 其中的 键 将按 顺序 加入
 值会被 自动 转换为字符串
 可选参数 source  指定一个 所 传入 字 曲 的 上下文 专属 名称
 如果未 给 出 则会使用 dict
 此方法 可被用于 在 解析器 之间 拷贝 状态
3
2 新版功能
 getsection  option  rawfalse  varsnone  fallback  获取 指定 名称 的 section  的 一个 option  的 值
 如 果提供了 vars  则 它 必须为一个 字典
 option  的 查找 顺序 为 vars  如果 有提供、 section  以及 defaultsect
 如果未 找到 该 键 并且 提供 了 fallback  则 它 会 被用作 回退 值
 可以提供 none  作为 fallback  值
 所有 插值 会 在 返回值 中 被 展开 除非 raw  参数 为真值
 插值 键 所使用的 值 会按 与 选项 相同 的方式来 查找
 在3
2 版更改 raw  vars  和 fallback  都 是 仅限 关键字参数 以防止 用户 试 图 使用 第三个 参数 作 业 为 fallback  回退 值 特别是 在 使 用 映射 协议 的时候
 getintsection  option  rawfalse  varsnone  fallback  将 在 指定 section  中 的 option  强制转换 为整数 的便捷 方法
 参见 get  获取对 于 raw  vars  和 fallback  的 解释
 getfloatsection  option  rawfalse  varsnone  fallback  将 在 指定 section  中 的 option  强制转换 为 浮点数 的便捷 方法
 参 见 get  获取对 于 raw  vars  和 fallback  的 解释
 getbooleansection  option  rawfalse  varsnone  fallback  将 在 指定 section  中 的 option  强制转换 为 布尔值 的便捷 方法
 请 注意 选项 所 接受 的 值 为1 yes  true  和 on  它们会 使得 此方法 返回 true  以及0 no  false  和 off  它们会 使得 此方法 返回 false
 这些 字符串 值 会 以 对 大小写 不 敏感 的方式 被 检测
 任何其他 值 都 将导致 引发 valueerror
 参见 get  获取对 于 raw  vars  和 fallback  的 解释
 itemsrawfalse  varsnone  itemssection  rawfalse  varsnone  当 未 给出 section  时 将 返回 由 sectionname  sectionproxy  对 组成的列表 包括 defaultsect
 在其他情况下 将 返回给定 的 section  中 的 option  的 name  value  对 组成的列表
 可选参数 具有与 get  方法 的 参数 相同 的 含 义
 在3
8 版更改 vars  中 的 条目 将 不 在 结果 中出现
 之前的 行为 混 淆 了 实际 的 解析器 选项 和 为 插值 提供的 变量
 setsection  option  value  如果给定 的 节 存在则 将 所 给出的 选项 设 为 指定 的 值 在其他情况下 将 引 发 nosectionerror
 option  和 value  必须为 字符串 如果不 是 则将引发 typeerror
 writefileobject  spacearounddelimiterstrue  将 配置 的 表示形式 写入 指定 的 file  object  该对象 必须 以 文本模式 打 开 接受 字符串
 此 表示形式 可 由 将 来 的 read  调用 进行 解析
 如果 spacearounddelimiters  为真值 键和值 之前的 分隔符 两 边 将 加上 空格
 removeoptionsection  option  将 指定 的 option  从 指定 的 section  中移除
 如果指定 的 节 不存在 则会引发 nosectionerror
 如果要 移除 的 选项 存在则 返回 true  在其他情况下 将 返回 false
 removesectionsection  从 配置 中移除 指定 的 section
 如果指定 的 节 确实 存在则 返回 true 
 在其他情况下 将 返回 false
 optionxformoption  将 选项名 option  转换为 输入 文件中的 形式 或 客户端 代码 所 传入的 应当 在内部 结构 中使用的 形式
 默认 实现 将 返回 option  的 小写 形式 版本 子类 可以 重载 此行为 或者 客户端 代码 也可以在 实例 上 设置 一个具有 此 名称 的 属性来 影响 此行为
 你 不需要 子类化 解析器 来 使用 此方法 你也可以 在 一个实例 上 设置 它 或 使用 一个 接受 字符串参数 并返回 字符串 的 函数
 例如 将 它 设 为 str  将 使得 选项 名称 变得 大小写 敏感 cfgparser  configparser  cfgparser
optionxform  str  请注意 当 读取 配置文件 时 选项 名称 两 边 的空格 将 在 调用 optionxform  之前被 去除
 readfpfp  filenamenone 3
2 版后已移除 使用 readfile  来 代替
 在3
2 版更改 readfp  现在将 在 fp  上 执行 迭代 而不是 调用 fp
 对 于 调用 readfp  时 传入 不支持 迭代 的 参数 的 现有 代码 可以在 文件 类对象 外 使用以下 生成器 作为 包装器 def  readlinegeneratorfp  line  fp
readline  不再 使用 parser
readfpfp  而 是 改 用 parser
maxinterpolationdepth  当 raw  形参 为假值 时 get  所 采用 的 递归 插值 的最大 深度
 这 只 在 使 用 默认 的 interpolation  时 会 起作用
rawconfigparser  对象
defaultsect  interpolation  旧式 configparser
 它 默认 禁用 插值 并且 允许 通过 不安全 的 addsection  和 set  方法 以及 旧式 defaults  关键字参数 处理 来 设 置 非 字符串 的 节 名、 选项名 和 值
 在3
8 版更改 默认 的 dicttype  为 dict  因为它 现在会 保留 插入顺 序
 注解 考虑 改 用 configparser  它 会 检查 内部 保存 的 值 的 类型
 如果你不 想 要 插值 你可以使用 configparserinterpolationnone
 addsectionsection  向 实例 添加 一个名为 section  的 节
 如果给定 名称 的 节 已存在 将 会 引发 duplicatesectionerror
 如果 传入 了 default  section  名称 则会引发 valueerror
 不 检查 section  以 允许用户 创建 以 非 字符串 命名 的 节
 此行为 已 不受 支持 并 可能导致 内部 错误
 setsection  option  value  如果给定 的 节 存在则 将 给定的 选项 设 为 指定 的 值 在其他情况下 将引发 nosectionerror
 虽然 可能 使用 rawconfigparser  或 使用 configparser  并 将 raw  形参 设 为真值 以便 实现 非 字符串 值 的 internal  存储 但是 完整 功能 包括 插值 和 输出 到 文件 只能 使用 字 符串值 来实现
 此方法 允许用户 在内部 将 非 字符串 值 赋 给 键
 此行为 已 不受支持 并 会 在 尝试 写入到 文件 或 在 非 原始 模式下 获取 数据 时 导致 错误
 请使用 映射 协议 api  它 不允许 出现 这样的 赋值
 异常
lzma  用 lzma  算法 压缩
3
3 新版功能
 源代码 liblzma
py  此模块提供了 可以 压缩和解压 缩 使用 lzma  压缩 算法的 数据 的 类 和 便 携 函数
 其 中 还 包含 支持 xz  工具 所使用的
xz  和 旧式
lzma  文件格式 的 文件 接口 以及 相应的 原始 压缩数据 流
 此模块 所提供的 接口 与 bz 2 模块 的 非常 类似
 但是 请注意 lzmafile  不 是 线程安全的 这 与 bz 2
bz 2 file  不同 因此如果 你需要 在多个 线程中 使用 单个 lzmafile  实例 则需要 通过 锁 来 保护 它
lzmaerror  当 在 压缩 或 解压缩 期间 或 是 在 初始化 压缩 器 解压缩 器 的 状态 期间发生 错误时 此 异常会被 引发
 读写 压缩文件
 在内存中 压缩和解 压缩数据
lzmacompressorformatformatxz  check 1 presetnone  filtersnone  创建一个 压缩 器对象 此 对象 可被用来 执行 增量 压缩
 压缩 单个 数据 块 的 更 便 捷方式 请参阅 compress
 format  参数指定 应当使用 哪 种 容器 格式
 可能的 值 有 formatxz 
xz  容器 格式
 这是 默认 格式
 formatalone  传统的
lzma  容器 格式
 这种 格式 相比
xz  更 为 受限 它 不支持 一致性 检查 或 多重 过滤器
 formatraw  原始 数据流 不 使用 任何 容器 格式
 这 个 格式 描述器 不支持 一致性 检查 并且 要求 你必须 指定一个 自定义 的 过滤器链 用 于 压缩和解压 缩
 此外 以 这种方式 压缩 的 数据 不 可 使用 formatauto  来 解压缩 参见 lzmadecompressor
 check  参数指定 要 包含在 压缩数据 中 的 一致性 检查 类型
 这种 检查 在 解压 缩 时 使用 以 确保 数据 没有 被 破坏
 可能 的值是 checknone  没有 一致性 检查
 这是 formatalone  和 formatraw  的 默认值 也是 唯一 可接受 的 值
 checkcrc 3232 位 循环 冗 余 检查
 checkcrc 6464 位 循环 冗 余 检查
 这是 formatxz  的 默认值
 checksha 256256 位 安全 哈希 算法
 如果指定 的 检查 不受支持 则会引发 lzmaerror
 压缩 设置 可 被 指定 为 一个 预 设 的 压缩 等级 通过 preset  参数 或 以 自 定 义 过滤器链 来 详细 设置 通过 filters  参数
 preset  参数 如果提供 应当为 一个0 到9 包括 边界 之间的 整 数 可以选择 与 常 数 presetextreme  进行 or  运算
 如果 preset  和 filters  均 未 给出 则 默认行为 是 使用 presetdefault  预 设 等级6
 更高的 预 设 等级 会产生 更 小 的 输出 但 会 使得 压缩 过程 更 缓 慢
 注解 除了 更 加 cpu  密集 使用 更高的 预 设 等级 来 压缩 还需要 更多的 内存 并 产 生 需要 更多 内存 来 解压缩 的 输出
 例如使用 预 设 等级9 时 一个 lzmacompressor  对象 的开销 可以 高 达800 mib
 出 于 这样的 原因 通 常 最好 是 保持 使用默认 预 设 等级
 filters  参数 如果提供 应当 指定一个 过滤器链
 详情参见 指定 自 定 义 的 过滤器链
 compressdata  压缩 data  一个 bytes  object  返回包含 针对 输入 的 至少 一部分 已 压缩数据 的 bytes  对象
 一 部 data  可能会 被 放入 内部 缓冲区 以便 用 于 后续的 compress  和 flush  调用
 返回 的 数据 应当 与 之前 任何 compress  调用 的 输出 进行 拼接
 flush  结束 压缩 进程 返回包含 保存在 压缩 器 的 内部 缓冲区 中 的 任意 数据 的 bytes  对象
 调用此方法 之后 压缩 器 将 不 可 再 被使用
lzmadecompressorformatformatauto  memlimitnone  filtersnone  创建一个 压缩 器对象 此 对象 可被用来 执行 增量 解压缩
 一次性 解压缩 整个 压缩数据 流 的 更 便 捷方式 请参阅 decompress
 format  参数指定 应当被 使用 的容器 格式
 默认值为 formatauto  它 可以 解压缩
xz  和
lzma  文件
 其他可 能 的 值 为 formatxz  formatalone  和 formatraw
 memlimit  参数指定 解压缩 器 可以使用 的内存 上限 字节数
 当使用 此 参数 时如果 不可能 在给定 内存 上限 之内 解压缩 输入 数据 则 解压缩 将 失败 并 引发 lzmaerror
 filters  参数指定 用于创建 被 解压缩 数据流 的 过滤器链
 此 参数 在 format  为 formatraw  时 要求 提供 但 对 于其他 格式 不应 使用
 有关 过滤器链 的 更多信息请参阅 指定 自定义 的 过滤器链
 注解 这个类 不 会 透明 地 处理 包含 多个 已 压缩数据 流 的 输入 这 不同于 decompress  和 lzmafile
 要 通过 lzmadecompressor  来 解压缩 多个 数据流 输入 你必须 为每个 数据流 都 创建一个新的 解压缩 器
 decompressdata  maxlength 1 解压缩 data  一个 byteslike  object  返回 字节串 形式 的 解压缩 数据
 某些 data  可以 在内部 被 缓冲 以便 用 于 后续的 decompress  调用
 返回 的 数据 应当 与 之前 任何 decompress  调 用 的 输出 进行 拼接
 如果 maxlength  为 非 负数 将 返回 至多 maxlength  个字节 的 解压 缩数据
 如果 达到 此 限制 并且 可以 产生 后续 输出 则 needsinput  属 性 将 被设为 false
 在这种情况下 下 一次 decompress  调用 提 供 的 data  可以为 b  以 获取更多 的 输出
 如果所 有 输入 数据 都 已被 解压缩 并返回 或 是 因为它 少 于 maxlength  个字节 或 是因为 maxlength  为 负数 则 needsinput  属性 将 被设为 true
 在 到达 数据流 末尾 之后 再 尝试 解压缩 数据 会引发 eoferror
 在 数据流 末尾 之后 获取 的 任何 数据 都 会被忽略 并 存储 至 unuseddata  属性
 在3
5 版更改 添加了 maxlength  形参
 check  输入 流 使用 的 一致性 检查 的 id
 这可能 为 checkunknown  直到 已 解 压 了 足够的 输入 数据 来确定 它 所使用的 一致性 检查
 eof  若 达到 了 数据流 末尾 标识符 则 为 true
 unuseddata  压缩数据 流 的末尾 还有 数据
 在 达到 数据流 末尾 之前 这 个 值 将 为 b
 needsinput  如果在 要求 新 的 未 解压缩 输入 之前 decompress  方法 可以提供 更多的 解压缩 数据 则 为 false
3
5 新版功能
compressdata  formatformatxz  check 1 presetnone  filtersnone  压缩 data  一个 bytes  对象 返回包含 压缩数据 的 bytes  对象
 参见 上 文 的 lzmacompressor  了解有关 format  check  preset  和 filters  参数 的 说明
decompressdata  formatformatauto  memlimitnone  filtersnone  解压缩 data  一个 bytes  对象 返回包含 解压缩 数据 的 bytes  对 象
 如果 data  是 多个 单独 压缩数据 流 的 拼接 则 解压缩 所有 相应 数据流 并 返回结果 的 拼接
 参见 上 文 的 lzmadecompressor  了解有关 format  memlimit  和 filters  参数 的 说明
 杂项
ischecksupportedcheck  如果 本 系统 支持 给定的 一致性 检查 则返回 true
 checknone  和 checkcrc 32 总是 受支持
 checkcrc 64 和 checksha 256 或 许 不可用 如果你 正 在 使用 基于 受 限制 特性 集 编译 的 liblzma  版本 的话
 指定 自定义 的 过滤器链
 示例
 在 已 压缩 的 数据 中读取 import  lzma  with  lzma
read  创建一个 压缩文件 import  lzma  data  binsert  data  here  with  lzma
writedata  在内存中 压缩文件 import  lzma  datain  binsert  data  here  dataout  lzma
compressdatain  增量 压缩 import  lzma  lzc  lzma
joinout 1 out 2 out 3 out 4 写入 已 压缩数据 到 已 打开的文件 import  lzma  with  openfile
writebnot  compressedn  使用自定义 过滤器链 创建一个 已 压缩文件 import  lzma  myfilters  id  lzma
fractions  分 数
 源代码 libfractions
pyfractions  模块 支持 分 数 运算
 分 数 实例 可以 由 一 对 整数 一个 分 数 或者一个 字符串 构建 而 成
fractionstring  第一个 版本 要求 numerator  和 denominator  是 numbers
rational  的 实例并 返回一个新的 fraction  实例 其 值 为 numeratordenominator
 如果 denominator  为0 将会引发 zerodivisionerror
 第二个 版本 要求 otherfraction  是 numbers
rational  的 实例 并返回一个 fraction  实例 且 与 传入 值 相等
 下 两个 版本 接受 float  或 decimal
decimal  的 实例 并返回一个 fraction  实例 且 与 传入 值 完全 相等
 请注意 由 于 二进制 浮点数 通常 存 在 的 问题 参见 浮点 算术 争 议 和 限制 fraction 1
1 的 参数 并不会 精 确 等于1110 因此 fraction 1
1 也 不 会 返回 用户 所 期望的 fraction 1110
 请参阅 下文中 limitdenominator  方法 的 文 档
 构造器 的最后一个 版本 接受一个 字符串或 unicode  实例
 此 实例 的 通常 形式 为 sign  numerator  denominator  其中的 可 选项 sign  可以为 或 并且 numerator  和 denominator  如果存在 是 十进制数 码 的 字符串
 此外 float  构造 器 所 接受 的 任何 表示一个 有限 值 的 字符串 也 都 为 fraction  构造器 所 接受
 不 论 哪 种形式 的 输入 字符串 也 都可以 带有 前缀 和 或 后缀 的 空格符
 这里 是一些 示例 from  fractions  import  fraction  fraction 1610 fraction 85 fraction 123 fraction 1231 fraction  fraction 01 fraction 37 fraction 37 fraction 37 fraction 37 fraction 1
1 fraction 1110 fraction  类 继承自 抽象基类 numbers
rational  并 实现了 该类的 所有 方法 和 操作
 fraction  实例 是 可哈希 的 并 应当 被视为 不 可变对象
 此 外 fraction  还 具 有以下 属性 和 方法 在3
2 版更改 fraction  构造器 现在接受 float  和 decimal
decimal  实例
 在3
9 版更改 现在会 使用 math
gcd  函数来 正 规 化 numerator  和 denominator
gcd  总是返回 int  类型
 在之前版本中 gcd  的 类型 取决于 numerator  和 denominator  的 类型
 numerator  最简 分 数 形式 的 分 子
 denominator  最简 分 数 形式 的 分 母
 asintegerratio  返回 由 两个 整数 组成的 元组 两 数 之 比 等于 该 分 数 的 值 且 其 分 母 为 正 数
3
8 新版功能
 fromfloatflt  此 类 方法 可 构造一个 fraction  来表示 flt  的 精确 值 该 参数必须 是一个 float
 请注意 fraction
3 的 值 并 不 等于 fraction 310
 注解 从 python 3
2 开始 在 构造 fraction  实例时 可以直接 使用 float
 fromdecimaldec  此 类 方法 可 构造一个 fraction  来表示 dec  的 精确 值 该 参数必须 是一个 decimal
decimal  实例
 注解 从 python 3
2 开始 在 构造 fraction  实例时 可以直接 使用 decimal
decimal  实例
 limitdenominatormaxdenominator 1000000 找到 并返回一个 fraction  使得 其 值 最接近 self  并且 分 母 不 大于 maxdenominator
 此方法 适用于 找 出 给定 浮点数 的 有 理 数 近似值 from  fractions  import  fraction  fraction 3
limitdenominator 1000 fraction 355113 或 是 用来 恢复 被 表示为 一个浮点数 的 有 理 数 from  math  import  pi  cos  fractioncospi 3 fraction 45035996273704979007199254740992 fractioncospi 3
limitdenominator  fraction 1110 floor  返回 最大 的 int  self
 此方法 也 可通过 math
floor  函数 来 使用 from  math  import  floor  floorfraction 3551133 ceil  返回 最小的 int  self
 此方法 也 可通过 math
ceil  函数来 使用
 round  roundndigits  第一个 版本 返回 一个 int  使得 其 值 最接近 self  位 值 为 二 分 之一 时 只 对 偶 数 舍入
 第二个 版本 会 将 self  舍入到 最接近 fraction 110 ndigits  的 倍 数如果 ndigits  为负值 则 为 逻辑运算 位 值 为 二 分 之一 时 同样 只 对 偶 数 舍入
 此方法 也 可通过 round  函数来 使 用
 参见 numbers  模块 构成 数字 塔 的 所有 抽象基类
itertools  为 高效 循环 而 创建 迭代器 的 函数
itertool  函数
itertools  配 方
 本节 将 展示 如何使用 现有的 itertools  作为 基础 构 件 来创建 扩展 的 工具集
 基本上 所有这些 西 方 和 许 许多 多其他 的 配 方 都 可以通过 python  package  index  上 的 moreitertools  项目 来 安装 pip  install  moreitertools  扩展 的工具 提供了 与 底层 工具集 相同 的 高 性能
 保持 了 超 棒 的内存 利用 率 因为 一次 只 处理 一个元素 而不是 将 整个 可迭代对象 加载 到 内存
 代码 量 保持 得 很小 以 函数 式 风格 将 这 些工具 连接 在一起 有 助 于 消除 临时 变量
 速度 依 然 很 快 因为 倾 向 于 使用 矢 量 化 构 件 来 取 代 解释器 开销 大 的 for  循环 和 generator
tkintermessagebox  tkinter  消息 提示
 源代码 libtkintermessagebox
pytkinter
messagebox  模块提供了一个 模板 基类 以及 多个 常 用 配置 的便捷 方法
 消息 框 为 模式 窗口 并 将 基于 用户 的 选择 返回 true  false  ok  none  yesno  的一个子 集
 常 用 消息 框 风格 和 布局 包括 但不 限于 图片 class  tkinter
messagemasternone  options  创建一个 默认 信息 消息 框
 信息 消息 框 tkinter
showinfotitlenone  messagenone  options  警告 消息 框 tkinter
showerrortitlenone  messagenone  options  疑 问 消息 框 tkinter
imaplib  imap 4 protocol  client
87 在3
5 版更改 支持 了 with  语句
 在3
9 版更改 the  optional  timeout  parameter  was  added
 在3
3 版更改 sslcontext  parameter  was  added
 在3
4 版更改 the  class  now  supports  hostname  check  with  ssl
3
6 版后已移除 keyfile  and  certfile  are  deprecated  in  favor  of  sslcontext
 please  use  ssl
loadcertchain  instead  or  let  ssl
createdefaultcontext  select  the  systems  trusted  ca  certificates  for  you
 在3
9 版更改 the  optional  timeout  parameter  was  added
 参见 documents  describing  the  protocol  and  sources  and  binaries  for  servers  implementing  it  can  all  be  found  at  the  university  of  washingtons  imap  information  center  httpswww
imap 4 objects
 在3
5 版更改 string  usernames  and  passwords  are  now  encoded  to  utf 8 instead  of  being  limited  to  ascii
3
5 新版功能 the  enable  method  itself  and  rfc 6855 support
 在3
8 版更改 the  method  no  longer  ignores  silently  arbitrary  exceptions
 在3
9 版更改 the  timeout  parameter  was  added
 示例 m  is  a  connected  imap 4 instance
3
2 新版功能
 在3
4 版更改 the  method  now  supports  hostname  check  with  ssl
expunge  注解 creating  flags  containing  for  example  test  violates  rfc 3501 the  imap  protocol
3
9 新版功能
3
5 新版功能
imap 4 example
 子进程
 源代码 libasynciosubprocess
py  libasynciobasesubprocess
py  本节 介绍了 用于创建 和 管理 子进程 的高层级 asyncawait  asyncio  api
 下面的例子 演示了如何 用 asyncio  运行 一个 shell  命令 并 获取 其 结果 import  asyncio  async  def  runcmd  proc  await  asyncio
runrunls  zzz  将打印 ls  zzz  exited  with 1 stderr  ls  zzz  no  such  file  or  directory  由 于所有 asyncio  子进程 函数 都 是 异步 的 并且 asyncio  提供了 许多 工具 用来 配合 这些函数 使用 因此 并 行 地 执行 和 监视 多个 子进程 十分 容易
 要 修改 上面的例子 来 同时 运行 多个 命令 确实 是非常 简单的 async  def  main  await  asyncio
runmain  另请参阅 examples  小节
 创建 子进程
createsubprocessexecprogram  args  stdinnone  stdoutnone  stderrnone  loopnone  limitnone  kwds  创建一个 子进程
 limit  参数为 process
stdout  和 process
stderr  设置 streamreader  包装器 的 缓冲区 上限 如果 将 subprocess
pipe  传给 了 stdout  和 stderr  参数
 返回 一个 process  实例
 有关 其他 形参 的 说明 请 查阅 loop
subprocessexec  的 文档
10 loop  形参
createsubprocessshellcmd  stdinnone  stdoutnone  stderrnone  loopnone  limitnone  kwds  运行 cmd  shell  命令
 limit  参数为 process
stdout  和 process
stderr  设置 streamreader  包装器 的 缓冲区 上限 如果 将 subprocess
pipe  传给 了 stdout  和 stderr  参数
 返回 一个 process  实例
 有关 其他 形参 的 说明 请 查阅 loop
subprocessshell  的 文档
 重要 应用程序 要 负责 确保 正确地 转义 所有 空白字符 和 特殊 字符 以防止 shell  注 入 漏洞
 shlex
quote  函数可以 被用来 正确地 转义 字符串 中 可以被 用来 构造 shell  命令 的 空白字符 和 特殊 shell  字符
10 loop  形参
 注解 如果 使用了 proactoreventloop  则 子进程 将 在 windows  中 可 用
 详情参 见 windows  上 的 子进程 支持
 参见 asyncio  还有 下列 低层级 api  可 配合 子进程 使用 loop
connectwritepipe  以及 子进程 传输 和 子进程 协议
 常 数
pipe  可以被 传递给 stdin  stdout  或 stderr  形参
 如果 pipe  被传递给 stdin  参数则 process
stdin  属性 将 会 指向 一个 streamwriter  实例
 如果 pipe  被传递给 stdout  或 stderr  参数则 process
stdout  和 process
stderr  属性 将 会 指向 streamreader  实例
stdout  可 以用作 stderr  参数 的 特殊 值表示 标准错误 应当被 重定向 到 标准输出
devnull  可 以用作 stdin  stdout  或 stderr  参数 来处理 创建 函数 的 特殊 值
 它 表示 将 为 相应的 子进程 流 使用 特殊 文件 os
devnull
 与 子进程 交互
createsubprocessexec  和 createsubprocessshell  函数 都 返回 process  类的实例
 process  是一个 高层级 包装器 它允许 与 子进程 通信 并 监视 其 完成 情况
process  一个用于 包装 createsubprocessexec  and  createsubprocessshell  函数创建 的 os  进程 的 对象
 这个类 被设计为 具有与 subprocess
popen  类 相似的 api  但 两者 有一些 重要的 差异 不同于 popenprocess  实例 没有 与 poll  方法 等价 的 方法 communicate  和 wait  方法 没有 timeout  形参 要使用 waitfor  函数 process
wait  方法 是 异步 的 而 subprocess
wait  方法 则 被 实现 为 阻塞 型 忙 循环 universalnewlines  形参 不 被 支持
 这个类 不 是线程安全的
 请参阅 子进程 和 线程 部分
 coroutine  wait  等待 子进程 终结
 设置 并返回 returncode  属性
 注解 当使用 stdoutpipe  或 stderrpipe  并且 子进程 产生 了 足以 阻塞 os  管道 缓冲区 等待 接收 更多的 数据 的 输出 时 此方法 会发生 死 锁
 当 使用 管道 时 请使用 communicate  方法 来避免 这种情况
 coroutine  communicateinputnone  与 进程 交互1
 发送 数据 到 stdin  如果 input  不 为 none 2
 从 stdout  和 stderr  读取数据 直至 到达 eof 3
 等待 进程 终结
 可选的 input  参数为 将 被 发送到 子进程 的 数据 bytes  对象
 返回 一个元组 stdoutdata  stderrdata
 如果在 将 input  写入到 stdin  时 引发了 brokenpipeerror  或 connectionreseterror  异常 异常 会被忽略
 此 条件 会 在 进程 先 于 所 有 数据 被 写入到 stdin  之前 退出时 发生
 如果 想要 将 数据 发送到 进程 的 stdin  则 创建 进程时 必须使用 stdinpipe
 类似地 要 在 结果 元组中 获得 任何 不 为 none  的 值 则 创建 进程时 必须使用 stdoutpipe  和 或 stderrpipe  参数
 注意 数据 读取 在内存中 是 带 缓冲 的 因此如果 数据 量 过 大 或 不受 则 不 要 使用 此方法
 sendsignalsignal  将 信号 signal  发送 给 子进程
 注解 在 windows  上 sigterm  是 terminate  的别名
 ctrlcevent  和 ctrlbreakevent  可 被 发送 给 创建时 设置了 creationflags  形参 且 其 中 包括 createnewprocessgroup  的 进 程
 terminate  停止 子进程
 在 posix  系统中 此方法会 发送 signal
sigterm  给 子进程
 在 windows  上 会 调用 win 32 api  函数 terminateprocess  以 停止 子 进程
 kill  杀 掉 子进程
 在 posix  系统中 此方法会 发送 sigkill  给 子进程
 在 windows  上 此方法 是 terminate  的别名
 stdin  标准输入 流 streamwriter  或者如果 进程 创建时 设置了 stdinnone  则 为 none
 stdout  标准输出 流 streamreader  或者如果 进程 创建时 设置了 stdoutnone  则 为 none
 stderr  标准错误 流 streamreader  或者如果 进程 创建时 设置了 stderrnone  则 为 none
 警告 使用 communicate  方法 而非 process
write  await  process
read  或 await  process
 这可以 避 免 由 于 流 暂 停 读取或写入 并 阻塞 子进程 而 导致 的 死 锁
 pid  进程 标识 号 pid
 注意 对 于 由 note  that  for  processes  created  by  the  createsubprocessshell  函数 所创建的 进程 这 个 属性 将 是 所生成 的 shell  的 pid
 returncode  当 进程 退出时 返回 其 代 号
 none  值表示 进程 尚未 终止
 一个 负值 n  表示 子进程 被 信号 n  中断 仅 posix
 子进程 和 线程
 标准 asyncio  事件循环 默认 支持 从 不同 线程中 运行 子进程
 在 windows  上 子进程 默认 只 由 proactoreventloop  提供 selectoreventloop  没有 子进程 支持
 在 unix  上 会 使用 child  watchers  来 让 子进程 结束 等待 详情 请参阅 进程 监视器
 在3
8 版更改 unix  对 于 从 不同 线程中 无 限制 地 生成 子进程 会 切换 为 使用 threadedchildwatcher
 使用 不 活动 的 当前 子 监视器 生成 子进程 将引发 runtimeerror
 请注意 其他的 事件循环 实现 可能 有 其 本身 的 限制 请查看 它们 各 自 的 文档
 参见 asyncio  中 的 并 发 和 多线程 章节
 示例
 一个 使用 process  类 来 控制 子进程 并 用 streamreader  类 来 从 其 标准输出 读取 信息 的 示例
 这 个 子进程 是 由 createsubprocessexec  函数创建 的 import  asyncio  import  sys  async  def  getdate  code  import  datetime  printdatetime
rungetdate  printfcurrent  date  date  另请参阅 使用 低层级 api  编写 的 相同 示例
pycompile  编译 python  源文件
 数据类型
xmletreeelementtree  elementtree  xml  api
 源代码 libxmletreeelementtree
pyxml
elementtree  模块实现了 一个简单 高效 的 api  用 于 解析 和 创建 xml  数据
 在3
3 版更改 this  module  will  use  a  fast  implementation  wheneveravailable
3
3 版后已移除 the  xml
celementtree  module  is  deprecated
 警告 xml
elementtree  模块 对 于 恶 意 构建 的 数据 是 不安全 的
 如果需要 解 析 不 可 信 或 未 经 身 份 验证 的 数据 请参见 xml  漏洞
 教程
 这是一个 使用 xml
elementtree  简 称 et  的 简短 教程
 目标 是 演示 模块 的一些 构建 块 和 基本 概念
xml  树 和 元素
xml  是一种 固 有 的 分 层 数据格式 最 自然 的 表示 方法 是 使用 树
 为 此 et  有两个 类 elementtree  将 整个 xml  文档 表示为 一个 树 element  表示 该 树 中 的 单个 节点
 与 整个 文档 的 交互 读写 文件 通常 在 elementtree  级别 完成
 与 单个 xml  元素 及其 子 元素 的 交互 是 在 element  级别 完成 的
 解析 xml
 我们将 使用以下 xml  文档 作为 本节 的 示例 数据 xml  version 1
0 data  country  nameliechtenstein  rank 1 rank  year 2008 year  gdppc 141100 gdppc  neighbor  nameaustria  directione  neighbor  nameswitzerland  directionw  country  country  namesingapore  rank 4 rank  year 2011 year  gdppc 59900 gdppc  neighbor  namemalaysia  directionn  country  country  namepanama  rank 68 rank  year 2011 year  gdppc 13600 gdppc  neighbor  namecosta  rica  directionw  neighbor  namecolombia  directione  country  data  可以通过 从 文件 中读取 来 导入 此 数据 import  xml
getroot  或 直接 从字符串 中 解析 root  et
fromstringcountrydataasstringfromstring  将 xml  从字符串 直接 解析为 element  该 元素 是 已 解析树 的 根 元素
 其他 解析 函数 可能会 创建一个 elementtree 
 确 切 信息请 查阅 文档
 作为 element  root  具有 标签 和 属性 字典 root
attrib  还有 可以 迭代 的 子 节点 for  child  in  root 
 country  name  liechtenstein  country  name  singapore  country  name  panama  子 级 是可以 嵌套的 我们可以 通过 索引 访问 特定的 子 级 节点 root 01
text 2008 注解 并非 xml  输入 的所有元素 都 将作为 解析树 的 元素 结束
 目前 此模块 跳过 输入 中的任何 xml  注释、 处理 指令 和 文档 类型 声明
 然而 使用 这个模块 的 api  而 不 是 从 xml  文本 解析 构建 的 树 可以包含 注释 和 处理 指令 生成 xml  输出 时 同样 包含 这些 注释 和 处理 指令
 可以通过将 自定义 treebuilder  实例 传递给 xmlparser  构造函数 来访问 文档 类型 声明
pull  api  进行 非阻塞 解析
 查找 感兴趣的 元素
element  有一些 很 有效的 方法 可 帮助 递归 遍历 其 下 的 所有子 树 包括 子 级 子 级 的 子 级 等等
 例如 element
findall  仅 查找 当前 元素 的 直接 子 元素 中 带有 指定 标签 的 元素
element
find  找 带有 特定 标签 的 第一个 子 级 然后 可以用 element
text  访问 元素 的 文本 内容
 element
get  访问 元素 的 属性 for  country  in  root
 liechtenstein 1 singapore 4 panama 68 通过使用 xpath  可以更 精确 地 指定 要 查找 的 元素
 修改 xml  文件
 构建 xml  文档
subelement  函数 还 提供了一种 便捷 方法来 为给定 元素 创建新的 子 元素 a  et
 使用 命名空间 解析 xml
 其他 资源
xpath  支持
 示例
 支持 的 xpath  语法
 语法 含义 tag  selects  all  child  elements  with  the  given  tag
 在3
8 版更改 support  for  starwildcards  was  added
 选择 所有子 元素 包括 注释 和 处理 说明
 例如 egg  选择 所有 名为 egg  的 孙 元素

 选择 当前 节点
 这 在 路径 的开头 非常有用 用 于 指示 它 是 相对 路径
 selects  all  subelements  on  all  levels  beneath  the  current  element
 attrib  选择 具有 给定 属性 的所有元素
 attribvalue  选择 给定 属性 具有 给定 值 的所有元素
 该值 不 能包含 引号
 tag  选择 所有 包含 tag  子 元素 的 元素
 只 支持 直 系 子 元素

text  选择 完整 文本 内容 等于 text  的所有元素 包括 后 代
3
7 新版功能
 tagtext  选择 所有 包含 名为 tag  的 子 元素 的 元素 这些 子 元素 包 括 后 代 的完整 文 本 内容 等于 给定的 text 
 position  selects  all  elements  that  are  located  at  the  given  position
 谓 词 方括号 内 的 表达式 之前 必须 带有 标签 名称 星 号 或其他 谓 词
position  谓 词 前 必须 有 标签 名称
 参考 引用
 函数
0 转换 功能
 典型 使用 xmldata  root
xml  outoutfile  the  configuration  options  are  as  follows  withcomments  set  to  true  to  include  comments  default  false  striptext  set  to  true  to  strip  whitespace  before  and  after  text  content  默认值 否 rewriteprefixes  set  to  true  to  replace  namespace  prefixes  by  nnumber  默认值 否 qnameawaretags  a  set  of  qname  aware  tag  names  in  which  prefixes  should  be  replaced  in  text  content  default  empty  qnameawareattrs  a  set  of  qname  aware  attribute  names  in  which  prefixes  should  be  replaced  in  text  content  default  empty  excludeattrs  a  set  of  attribute  names  that  should  not  be  serialised  excludetags  a  set  of  tag  names  that  should  not  be  serialised  in  the  option  list  above  a  set  refers  to  any  collection  or  iterable  of  strings  no  ordering  is  expected
3
8 新版功能
 在3
8 版更改 the  dump  function  now  preserves  the  attribute  order  specified  by  the  user
3
2 新版功能
3
9 新版功能
 注解 iterparse  only  guarantees  that  it  has  seen  the  character  of  a  starting  tag  when  it  emits  a  start  event  so  the  attributes  are  defined  but  the  contents  of  the  text  and  tail  attributes  are  undefined  at  that  point
3
4 版后已移除 parser  参数
 在3
8 版更改 the  comment  and  pi  events  were  added
3
2 新版功能
3
4 新版功能 shortemptyelements  形参
3
8 新版功能 the  xmldeclaration  and  defaultnamespace  parameters
 在3
8 版更改 the  tostring  function  now  preserves  the  attribute  order  specified  by  the  user
3
2 新版功能
3
4 新版功能 shortemptyelements  形参
3
8 新版功能 the  xmldeclaration  and  defaultnamespace  parameters
 在3
8 版更改 the  tostringlist  function  now  preserves  the  attribute  order  specified  by  the  user
xinclude  支持
 示例
 document  结果 可能 如下所示 document  xmlnsxihttpwww
 参考 引用
 函数
3
9 新版功能 the  baseurl  and  maxdepth  parameters
 元素 对象
 tag  一个 标识 此 元素 意味着 何 种 数据 的 字符串 换句话说 元素 类型
3
2 新版功能
3
2 新版功能
3
2 新版功能
3
2 新版功能
elementtree  对象
3
2 新版功能
3
4 新版功能 shortemptyelements  形参
 在3
8 版更改 the  write  method  now  preserves  the  attribute  order  specified  by  the  user
qname  objects
treebuilder  objects
3
8 新版功能
3
8 新版功能
3
2 新版功能
3
8 新版功能
3
8 新版功能
3
8 新版功能
xmlparser  对象
 在3
8 版更改 parameters  are  now  keywordonly
 the  html  argument  no  longer  supported
xmlpullparser  对象
 注解 xmlpullparser  only  guarantees  that  it  has  seen  the  character  of  a  starting  tag  when  it  emits  a  start  event  so  the  attributes  are  defined  but  the  contents  of  the  text  and  tail  attributes  are  undefined  at  that  point
3
4 新版功能
 在3
8 版更改 the  comment  and  pi  events  were  added
 异常
 脚注1 the  encoding  string  included  in  xml  output  should  conform  to  the  appropriate  standards
 低层级 api  索引
 本 页 列出 所有 低层级的 asyncio  api
 获取 事件循环
getrunningloop  获取 当前 运行 的事件循环 首选 函数
 asyncio
geteventloop  获得 一个 事件循环 实例 当前 或 通过 策略
 asyncio
seteventloop  通过 当前 策略 将 事件循环 设置 当前 事件循环
 asyncio
neweventloop  创建一个新的 事件循环
 示例 使用 asyncio
 事件循环方法 集
 查阅 事件循环方法 相关的 主要 文档 段落
 生 命 周期 loop
rununtilcomplete  运行 一个 期 程 任务 可等待对象 直到 完成
 loop
runforever  一 直 运行 事件循环
 loop
stop  停止 事件循环
 loop
close  关闭 事件循环
 loop
isrunning  返回 true  如果 事件循环 正在运行
 loop
isclosed  返回 true  如果 事件循环 已经被 关闭
 await  loop
shutdownasyncgens  关闭 异步生成器
 调试 loop
setdebug  开 启 或 禁用 调试模式
 loop
getdebug  获取 当前 测试 模式
 调度 回调函数 loop
callsoon  尽 快 调用 回调
 loop
callsoonthreadsafe  loop
callsoon  方法 线程安全的 变体
 loop
calllater  在给定 时间 之后 调用 回调函数
 loop
callat  在 指定 时间 调用 回调函数
 线程 进程 池 await  loop
runinexecutor  在 concurrent
futures  执行器 中 运行 一个独 占 cpu  或 其 它 阻塞 函数
 loop
setdefaultexecutor  设置 loop
runinexecutor  默认 执行器
 任务 与 期 程 loop
createfuture  创建一个 future  对象
 loop
createtask  将 协程 当 作 task  一样 调度
 loop
settaskfactory  设置 loop
createtask  使用 的工厂 它 将 用来 创建 tasks 
 loop
gettaskfactory  获取 loop
createtask  使用 的工厂 它 用来 创建 tasks 
 dns  await  loop
getaddrinfo  异步 版 的 socket
getaddrinfo 
 await  loop
getnameinfo  异步 版 的 socket
getnameinfo 
 网络 和 ipc  await  loop
createconnection  打开一个 tcp  链接
 await  loop
createserver  创建一个 tcp  服务
 await  loop
createunixconnection  打开一个 unix  socket  连接
 await  loop
createunixserver  创建一个 unix  socket  服务
 await  loop
connectacceptedsocket  将 socket  包装 成 transport  protocol  对
 await  loop
createdatagramendpoint  打开一个 数据 报 udp  连接
 await  loop
sendfile  通过 传输 通道 发送 一个 文件
 await  loop
starttls  将 一个 已 建立 的 链接 升级 到 tls
 await  loop
connectreadpipe  将 管道 读取 端 包装 成 transport  protocol  对
 await  loop
connectwritepipe  将 管道 写入 端 包装 成 transport  protocol  对
 套接字 await  loop
sockrecv  从 socket  接收 数据
 await  loop
sockrecvinto  从 socket  接收 数据 到 一个 缓冲区 中
 await  loop
socksendall  发送 数据 到 socket 
 await  loop
sockconnect  链接 await  loop
sockconnect 
 await  loop
sockaccept  接受一个 socket  链接
 await  loop
socksendfile  利用 socket  发送 一个 文件
 loop
addreader  开始 对 一个 文件描述符的 可读性 的 监视
 loop
removereader  停止 对 一个 文件描述符的 可读性 的 监视
 loop
addwriter  开始 对 一个 文件描述符的 可 写 性 的 监视
 loop
removewriter  停止 对 一个 文件描述符的 可 写 性 的 监视
 unix  信号 loop
addsignalhandler  给 signal  添加一个 处理 回调函数
 loop
removesignalhandler  删除 signal  的 处理 回调函数
 子进程 loop
subprocessexec  衍 生 一个 子进程 loop
subprocessshell  从 终端 命令 衍 生 一个 子进程
 错误处理 loop
callexceptionhandler  调用 异常处理器
 loop
setexceptionhandler  设置 一个新的 异常处理器
 loop
getexceptionhandler  获取 当前 异常处理器
 loop
defaultexceptionhandler  默认 异常处理器 实现
 示例 使用 asyncio
geteventloop  和 loop
 使用 loop
 使用 loop
createconnection  实现 echo  客户端
 使用 loop
createconnection  去 链接 socket
 使用 addreader  监听 fd  文件描述符的 读取 事件
 使用 loop
 使用 loop
addsignalhandler
 传输
 协议
 协议 类可以 由 下面 回调 方法 实现 callback  connectionmade  链接 建立 时被调用
 callback  connectionlost  链接 丢失 或 关闭 时被调用
 callback  pausewriting  传输的 缓冲区 超过 高 位 标记 位 时被调用
 callback  resumewriting  传输的 缓冲区 传 送到 低 位 标记 位 时被调用
 流 协议 tcp  unix  套接字 管道 callback  datareceived  接收到 数据 时被调用
 callback  eofreceived  接收到 eof  时被调用
 缓冲 流 协议 callback  getbuffer  调用 后 会 分配 新 的 接收 缓冲区
 callback  bufferupdated  用 接收 的 数据 更新 缓冲区 时被调用
 callback  eofreceived  接收到 eof  时被调用
 数据 报 协议 callback  datagramreceived  接收到 数据 报 时被调用
 callback  errorreceived  前 一个 发送 或 接收 操作 引发 oserror  时被调用
 子进程 协议 callback  pipedatareceived  子进程 向 stdout  或 stderr  管道 写入 数据 时被调用
 callback  pipeconnectionlost  与 子进程 通信 的 其中一个 管道 关闭 时被调用
 callback  processexited  子进程 退出 时被调用

 事件循环 策略
 策略 是 改变 asyncio
geteventloop  这 类 函数 行为 的 一个 底层 机制
 更多细节 可以 查阅 策略 部分
 访问 策略 asyncio
geteventlooppolicy  返回 当前进程 域 的 策略
 asyncio
seteventlooppolicy  设置 一个新的 进程 域 策略
 abstracteventlooppolicy  策略 对象 的 基类

codecs  编解码器 注册 和 相关 基类
 编解码器 基类
codecs  模块定义了 一系列 基类 用来 定义 配合 编解码器 对象进行 工作 的 接口 并且 也 可用作 定制 编解码器 实现 的基础
 每 种 编解码器 必须 定义 四个 接口 以便 用 作 python  中 的 编解码器 无 状态 编码器、 无 状态 解码器、 流 读取 器 和 流 写入 器
 流 读取 器 和写入 器 通常会 重 用 无 状态 编码器 解码器 来实现 文件 协议
 编解码器 作者 还需要 定义 编解码器 将 如何处理 编码和解码 错误
 错误处理 方案
 无 状态 的 编码和解码
 增量 式 的 编码和解码
 流式 的 编码和解码
 编码格式 与 unicode
 标准 编码
python  专属的 编码格式
 有一些 预定义 编解码器 是 python  专属的 因此 它们在 python  之外 没 有意义
 这些 编解码器 按 其 所 预期的 输入和输出 类型 在 下 表 中 列出 请注意 虽然 文本 编码 是 编解码器 最常见的 使用 场景 但 下层的 编解码器 架构 支持 任意 数据 转换 而 不仅 是 文本 编码
 对 于 非 对 称 编解码器 该 列 描述 的含义 是 编码 方向
 文 字 编码
 二进制 转换
 文 字 转换
encodingsidna  应用程序中 的 国际化 域名
 此 模块实现了 rfc 3490 应用程序中 的 国际化 域名 和 rfc 3492 nameprep  用 于 国际化 域名 idn  的 stringprep  配置文件
 它 是 在 punycode  编码格式 和 stringprep  的基础 上 构建 的
 这些 rfc  共同 定义了一个 在 域名 中 支持 非 ascii  字符 的 协议
 一个包含 非 ascii  字符 的 域名 例如 www
nu  会 被转换为 兼容 ascii  的 编码格式 简 称 ace  例如 www
 随后 此 域名 的 ace  形式 可以用 于所有 由 于特定 协议 而 不允许 使用 任意 字符 的 场合 例如 dns  查询 http  host  字段 等等
 此 转换 是 在 应用 中进行 的 如 有可能 将 对 用户可 见 应用 应当 透明 地 将 unicode  域名 标签 转换为 线 上 的 idna  并 在 ace  标签 被 呈 现 给 用户 之前 将其转换 回 unicode
python  以 多 种方式 支持 这种 转换 idna  编解码器 执行 unicode  和 ace  之间的 转换 基于 在 section 3
1 of  rfc 3490 中定义的 分隔 字符 将 输入 字符串 拆分 为 标签 再 根据 需要 将每个 标签 转换为 ace  相反 地 又 会 基于
 分隔符 将 输入 字节串 拆分 为 标签 再 将 找到 的 任何 ace  标签 转换为 unicode
 此外 socket  模块 可 透明 地 将 unicode  主机名 转换为 ace  以便 应用 在 将它们 传给 socket  模块 时 无 须 自 行 转换 主机名
 除 此 之外 许多 包含以 主机名 作为 函数 参数 的 模块 例如 http
client  和 ftplib  都 接受 unicode  主机名 并且 http
client  也会 在 host  字段 中 透明 地 发送 idna  主机名 如果它 需要 发送 该 字段 的话
 当 从 线 路 接收 主机名 时 例如 反向 名称 查找 到 unicode  的 转换 不 会自动 被执行 希望 向 用户 提供 此 种 主机名 的应用 应当 将它们 解码 为 unicode
encodings
idna  模块还 实现了 nameprep  过程 该 过程 会 对 主机名 执行 特定的 规范 化 操作 以 实现 国际 域名 的 大小写 不 敏感 特性 与 合并 相似的 字符
 如果有 需要 可以直接 使用 nameprep  函数
namepreplabel  返回 label  经过 名称 处理 操作 的 版本
 该 实现 目前 基于 查询 字符串 因 此 allowunassigned  为真值
toasciilabel  将 标签 转换为 ascii  规则 定义 见 rfc 3490
 usestd 3 asciirules  预 设 为假值
tounicodelabel  将 标签 转换为 unicode  规则 定义 见 rfc 3490
encodingsmbcs  windows  ansi  代码 页
encodingsutf 8 sig  带 bom  签名 的 utf 8 编解码器
emailencoders  编码器
copyreg  注册 配合 pickle  模块 使用 的 函数
 源代码 libcopyreg
pycopyreg  模块提供了 可 在 封存 特定 对象 时 使用 的一种 定义 函数 方式
pickle  和 copy  模块 会 在 封存 拷贝 特定 对象 时 使用 这些函数
 此模块提供了 非 类对象 构造器 的 相关 配置 信息
 这样的 构造器 可以是 工厂函数 或 类实例
constructorobject  将 object  声明为 一个有效的 构造器
 如果 object  是不可 调用 的 因 而不是 一个有效的 构造器 则会引发 typeerror
pickletype  function  constructornone  声明 该 function  应当 被用作 type  类型对象 的 归 约 函数
 function  应当 返回 字符串或 包含 两 到 三个 元素 的 元组
 如 果提供了 可选的 constructor  形参 它 应当 是一个 可用来 重 建 相应 对象 的可调用对象 在 调用 该对象 时 应 传入 由 function  所返回的 参数 元组
 如果 object  是一个 类 或 constructor  是不可 调用 的 则将引发 typeerror
 请查看 pickle  模块 了解 function  和 constructor  所 要求 的 接口 的 详情
 请注意 一个 pickler  对象 或 pickle
pickler  的子类 的 dispatchtable  属性 也可以 被用来 声明 归 约 函数
 示例
 以下示例 将 会显示 如何 注册一个 封存 函数 以及 如何 来 使用 它 import  copyreg  copy  pickle  class  c
nis  sun  的 nis  黄 页 接口
nis  模块提供了 对 nis  库 的 轻 量 级 包装 适用于 多个 主机 的 集 中 管理
 因为 nis  仅 存在于 unix  系统 此模块 仅在 unix  上可用
nis  模块定义了以下 函数 nis
matchkey  mapname  domaindefaultdomain  返回 key  在 映射 mapname  中 的 匹配 结果如 无 结果 则会引发 错误 nis
error
 两个参数 都应 为 字符串 key  定 长8 个 比特
 返回值 为 任意 字节数组 可 包含 null  和其他 特殊 值
 请注意 如果 mapname  是另一 名称 的别名 则 会先 检查 别名
 domain  参数 可 允许 重载 用 于 查找 的 nis  域
 如果未指定 则会在 默认 nis  域 中查找
catmapname  domaindefaultdomain  返回 一个字典 其 元素 为 key  到 value  的 映射 使得 matchkey  mapnamevalue
 请注意 字典 的键和值 均为 任意 字节数组
 请注意 如果 mapname  是另一 名称 的别名 则 会先 检查 别名
 domain  参数 可 允许 重载 用 于 查找 的 nis  域
 如果未指定 则会在 默认 nis  域 中查找
mapsdomaindefaultdomain  返回 全部 可 用 映射 的 列表
 domain  参数 可 允许 重载 用 于 查找 的 nis  域
 如果未指定 则会在 默认 nis  域 中查找
getdefaultdomain  返回 系统 默认 的 nis  域
nis  模块定义了以下 异常 exception  nis
error  当 nis  函数返回 一个 错误码 时 引发的异常
 自定义 python  解释器
 本章中描述的模块 允许 编写 类似于 python  的 交互式 解释器 的 接口
 如果你想要 一个 支持 附加 一些 特殊 功能 到 python  语言 的 python  解释器 你应该 看 看 code  模块
 codeop  模块 是 低层级的 用 于 支持 编译 可能不 完整的 python  代码块
 本章 描述 的完整 模块 列表 如 下 code  解释器 基类 交互 解释器 对象 交互式 控制台 对象 codeop  编译 python  代码
 导入模块
 本章中 介绍 的 模块提供了 导入 其他 python  模块 和 挂 钩 以 自定义 导入 过程 的 新 方法
 本章 描述 的完整 模块 列表 如 下 zipimport  从 zip  存档 中 导入模块 zipimporter  对象 示例 pkgutil  包 扩展 工具 modulefinder  查找 脚本 使用 的 模块 modulefinder  的 示例 用 法 runpy  locating  and  executing  python  modules  importlib  import  的 实现 概述 函数 importlib
abc —— 关于 导入 的抽象基类 importlib
resources  资源 importlib
util  utility  code  for  importers  示例 importing  programmatically  checking  if  a  module  can  be  imported  importing  a  source  file  directly  setting  up  an  importer  approximating  importlib
metadata  概述 可 用 api  entry  points  distribution  metadata  distribution  versions  distribution  files  distribution  requirements  distributions  extending  the  search  algorithm
msvcrt  来自 ms  vc  运行时 的有用 例 程
 这些函数 提供了对 windows  平台上 一些 有 用 功能 的 访问
 一些 更高 级别 的 模块 使用 这些函数 来构建 其 服务 的 windows  实现
 例如 getpass  模块 在 实现 getpass  函数 时 使用了 这些函数
 关于 这些函数 的更多信息 可以在 平台 api  文档 中找到
 该 模块实现了 控制台 io  api  的 普通 和 宽 字符 变体
 普通的 api  只 处理 ascii  字符 国际化 应用 受限
 应该 尽可能 地 使用 宽 字符 api 
 在3
3 版更改 此模块中 过去 会引发 ioerror  的 操作 现在将 引发 oserror
 文件 操作
lockingfd  mode  nbytes  基于 文件描述符 fd  从 c  运行时 锁定 文件 的 某一 部分
 失败时 引发 oserror
 锁定 的 文件 区域 从 当前 文件 位置 开始 扩展 nbytes  个字节 并 可能 持续 到 超出 文件末尾
 mode  必须为 下 面列出的 lk  之一
 一 个 文件中的 多个 区域 可以被 同时 锁定 但是 不 能 重 叠
 相 邻 区域 不会被 合并 它们 必须 单独 被 解锁
 引发一个 审计事件 msvcrt
locking  附带参数 fd  mode  nbytes 
lkrlck  锁定 指定 的 字节数据
 如果 字节数据 无法被 锁定 程序 会 在1 秒 之后 立即 重 试
 如果在10 次 尝试 后 字节数据 仍 无法被 锁定 则会引发 oserror
lknbrlck  锁定 指定 的 字节数据
 如果 字节数据 无法被 锁定 则会引发 oserror
lkunlck  解锁 指定 的 字节数据 该对象 必须在 之前被 锁定
setmodefd  flags  设置 文件描述符 fd  的 行 结束 符 转 写 模式
 要 将其设 为 文本模式 则 flags  应当为 os
otext  设 为 二进制模式 则 应当为 os
obinary 
openosfhandlehandle  flags  基于 文件 句柄 handle  创建一个 c  运行时 文件描述符
 flags  形参 应 当 os
oappend  os
ordonly  和 os
otext  按位 or  的结果
 返 回 的文件描述符 可以 被用作 os
fdopen  的 形参 以 创建一个 文件对象
 引发一个 审计事件 msvcrt
openosfhandle  附带参数 handle  flags
getosfhandlefd  返回 文件描述符 fd  的 文件 句柄
 如果 fd  不 能 被 识别 则会引发 oserror
 引发一个 审计事件 msvcrt
getosfhandle  附带参数 fd
 控制台 io
kbhit  如果有 某个 按键 正在等待 被 读取 则返回 true
getch  读取 一个 按键 并 将结果 字符 返回 为 一个 字节串
 不 会 有 内容 回显 到 缝 制台
 如果 还 没有任何 键 被 按下 此 调用 将 会阻塞 但它 将不会 等待 enter  被 按下
 如果 按下 的 键 是 一个特殊 功能 键 此 函数 将 返回000 或 xe 0 下 一次 调用 将 返回 键 代码
 controlc  按钮 无法 使用 此 函数 来读取
getwch  getch  的 宽 字符 版本 返回 一个 unicode  值
getche  类似于 getch  但 按键 如果 表示一个 可打印 字符 则 它将被 回显
getwche  getche  的 宽 字符 版本 返回 一个 unicode  值
putchchar  将 字符串 char  打印到 终端 不 使用 缓冲区
putwchunicodechar  putch  的 宽 字符 版本 接受一个 unicode  值
ungetchchar  使得 字节串 char  被 推 回 终端 缓冲区 它 将 是 被 getch  或 getche  读取 的下一个 字符
ungetwchunicodechar  ungetch  的 宽 字符 版本 接受一个 unicode  值
 其他 函数
heapmin  强制 malloc  堆 清空 自身 并 将 未 使用 的 块 返回给 操作系统
 失败时 这 将引发 oserror
ipaddress  ipv 4 ipv 6 操作 库
 源代码 libipaddress
pyipaddress  提供了 创建、 处理 和 操作 ipv 4 和 ipv 6 地址 和 网络 的功能
 该 模块中的 函数和类 可以直接 处理 与 ip  地址 相关的 各种 任务 包括 检查 两个 主机 是否 在同一 个 子 网 中 遍历 某个 子 网 中的所有 主机 检查 一个字符串 是否 是 一个有效的 ip  地址 或 网络 定义 等等
 这是 完整的 模块 api  参考— 若 要 查看 概述 请 见 ipaddress  模块 介绍
3
3 新版功能
 方便的 工厂函数
ipaddress  模块提供 来 工厂函数 来 方便地 创建 ip  地址 网络 和 接口 ipaddress
ipaddressaddress  返回 一个 ipv 4 address  或 ipv 6 address  对象 取决于 作为参数 传递 的 ip  地址
 可以提供 ipv 4 或 ipv 6 地址 小于232 的 整数 默认 被认为 是 ipv 4
 如果 address  不 是有效的 ipv 4 或 ipv 6 地址 则 会抛出 valueerror
ipnetworkaddress  stricttrue  返回 一个 ipv 4 network  或 ipv 6 network  对象 具体 取决于 作为参数 传 入 的 ip  地址
 address  是 表示 ip  网 址 的 字符串或 整数
 可以提供 ipv 4 或 ipv 6 网 址 小于232 的 整数 默认 被视为 ipv 4
 strict  会 被 传给 ipv 4 network  或 ipv 6 network  构造器
 如果 address  不 表示 有效的 ipv 4 或 ipv 6 网 址 或者 网络 设置了 host  比特位 则会引发 valueerror
ipinterfaceaddress  返回 一个 ipv 4 interface  或 ipv 6 interface  对象 取决于 作为参数 传 递 的 ip  地址
 address  是 代表 ip  地址的 字符串或 整数
 可以提供 ipv 4 或 ipv 6 地址 小于232 的 整数 默认 认为 是 ipv 4
 如果 address  不 是有效的 ipv 4 或 ipv 6 地址 则 会抛出 一个 valueerror
 这些 方便的 函数 的 一个 缺 点 是需要 同时 处理 ipv 4 和 ipv 6 格式 这意味着 提供的 错误信息 并 不 精 准 因为 函数 不 知道 是 打 算 采用 ipv 4 还是 ipv 6 格式
 更 详细 的 错误报告 可以通过 直接调用 相应 版本 的 类 构造函数 来 获得
ip  地址
 地址 对象
conversion  to  strings  and  integers
 运算符
ip  network  definitions
prefix  net  mask  and  host  mask
network  objects
 在3
5 版更改 added  the  twotuple  form  for  the  address  constructor  parameter
subnetofa  true 3
7 新版功能
supernetofb  true 3
7 新版功能
13203
7 版后已移除 it  uses  the  same  ordering  and  comparison  algorithm  as  and  class  ipaddress
 在3
5 版更改 added  the  twotuple  form  for  the  address  constructor  parameter
 运算符
 迭代 network  objects  can  be  iterated  to  list  all  the  addresses  belonging  tothe  network
interface  objects
 运算符
other  module  level  functions
custom  exceptions
asynchat  异步 socket  指令 响应 处理器
py 3
6 版后已移除 请使用 asyncio  替代
 注解 该模块 仅 为 提供 向后兼容
 我们 推荐 在 新 代码中使用 asyncio 
 term  描述 string  will  call  foundterminator  when  the  string  is  found  in  the  input  stream  integer  will  call  foundterminator  when  the  indicated  number  of  characters  have  been  received  none  the  channel  continues  to  collect  data  forever  note  that  any  data  following  the  terminator  will  be  available  for  reading  by  the  channel  after  foundterminator  is  called
asynchat  example
distutils  构建和 安装 python  模块
distutils  包 为 将 待 构建和 安装 的 额外的 模块 打包 成 python  安装包 提供 支持
 新 模块 既 可以是 百 分 百 的 纯 python  也可以是 用 c  写 的扩展模块 或者 可以是一 组 包含了 同时 用 python  和 c  编码 的 python  包
 大多数 python  用户 不 会 想要 直接使用 这 个 包 而 是 使用 python  包 官 方 维护 的 跨 版本 工具
 特别地 setuptools  是一个 对 于 distutils  的 增强 选项 它 能 提供 对 声明 项目 依赖 的 支持 额外的 用 于 配置 哪些 文件 包含在 源代码 发布 中 的机制 包括 与 版本 控制 系统 集 成 需要 的 插 件 生成 项目 进入 点 的能力 进入 点 可用作 应用 插 件系统 的基础 自动 在 安装 时间 生成 windows  命令行 可执行文件 的能力 而不是 需要 预 编译 它们 跨 所有 受支持的 python  版本上 的 一致的 表 现 推荐的 pip  安装 器 用 setuptools  运行 所有的 setup
py  脚本 即使 脚本 本身 只 引 了 distutils  包
 参考 python  packaging  user  guide   获得 更多信息
 为 了 打包 工具 的 作者 和 用户 能 更好 理解 当前的 打包 和 分发 系统 遗 留 的 基于 distutils  的 用户 文档 和 api  参考 保持 可 用 安装 python  模块 旧版 分发 python  模块 遗 留 版本
ossaudiodev  access  to  osscompatible  audio  devices
 在3
3 版更改 此模块中 过去 会引发 ioerror  的 操作 现在将 引发 oserror
 参见 open  sound  system  programmers  guide  the  official  documentation  for  the  oss  c  api  the  module  defines  a  large  number  of  constants  supplied  by  the  oss  device  driver  see  syssoundcard
audio  device  objects
 在3
5 版更改 现在支持 可 写 的 字节 类对象
 在3
5 版更改 现在支持 可 写 的 字节 类对象
 在3
2 版更改 audio  device  objects  also  support  the  contextmanagement  protocol  i
 some  of  the  formats  supported  by  oss  are  文件格式 描述 afmtmulaw  a  logarithmic  encoding  used  by  sun 
 common  rates  are  采样 率 描述8000 devaudio  的 默认 采样 率11025 语 音 录 音2205044100 cd  品 质 的 音频16 位 采样 和2 通道96000 dvd  品 质 的 音频24 位 采样 ossaudiodevice
mixer  device  objects
 在3
2 版更改 mixer  objects  also  support  the  context  managementprotocol
multiprocessing  基于 进程 的 并 行
 源代码 libmultiprocessing
 概述
multiprocessing  是一个 支持 使用 与 threading  模块 类似 的 api  来 产生 进程 的 包
 multiprocessing  包 同时 提供了 本地 和 远程 并 发 操作 通过使用 子进程 而非 线程 有效 地 绕 过 了 全局 解释器 锁
 因此 multiprocessing  模块 允许 程序员 充 分 利用 给定 机器 上 的多个 处理器
 它 在 unix  和 windows  上 均可 运行
multiprocessing  模块还 引入了 在 threading  模块 中没有 的 api
 一个 主要 的 例子 就是 pool  对象 它 提供了一种 快捷 的 方法 赋 予 函数 并 行 化 处理 一系列 输入 值 的能力 可以将 输入 数据 分配 给 不同 进程 处理 数据并 行
 下面的 例子演示了 在 模块中定义 此 类 函数 的 常见 做法 以便 子进程 可以 成功 导入 该模块
 这 个 数据并 行 的基本 例子 使用了 pool  from  multiprocessing  import  pool  def  fx  return  xx  if  name  main  with  pool 5 as  p  printp
mapf 123 将 在 标准输出 中 打印149
process  类
 在 multiprocessing  中 通过 创建一个 process  对象 然后 调用 它 的 start  方法 来生成 进程
 process  和 threading
thread  api  相同
 一个简单的 多 进程 程序 示例 是 from  multiprocessing  import  process  def  fname  printhello  name  if  name  main  p  processtargetf  argsbob  p
join  要 显示 所 涉及 的 各个 进程 id  这是一个 扩展 示例 from  multiprocessing  import  process  import  os  def  infotitle  printtitle  printmodule  name  name  printparent  process  os
join  关于 为什么 if  name  main  部分 是 必需 的 解释 请参见 编程 指导
 上下文 和 启动方法
 在 进程 之间 交换 对象
multiprocessing  支持 进程 之间的 两种 通信 通道 队列 queue  类 是一个 近似 queue
queue  的 克 隆
 例如 from  multiprocessing  import  process  queue  def  fq  q
join  队列 是 线程 和 进程 安全 的
 管道 pipe  函数返回 一个 由 管道 连接 的 连接 对象 默认情况下 是 双 工 双 向
 例如 from  multiprocessing  import  process  pipe  def  fconn  conn
join  返回 的两个 连接 对象 pipe  表示 管道 的 两 端
 每个 连接 对象 都有 send  和 recv  方法 相互 之间的
 请注意 如果两 个 进程 或 线 程 同时 尝试 读取或写入 管道 的 同一 端 则 管道 中 的 数据 可能会 损坏
 当然 在不同 进程中 同时 使用 管道 的不同 端 的情况下 不存在 损坏 的 风 险
 进程 间 同步
 对 于所有 在 threading  存在的 同步 原语 multiprocessing  中 都有 类似 的 等价 物
 例如 可以使用 锁 来 确保 一次 只有一个 进程 打印到 标准输出 from  multiprocessing  import  process  lock  def  fl  i  l
start  不 使用 锁 的情况下 来自 于 多 进程 的 输出 很容易 产生 混 淆
 进程 间 共享 状态
 如 上 所述 在 进行 并 发 编程 时 通常 最好 尽 量 避免 使用 共享 状态
 使用 多个 进程时 尤其 如 此
 但是 如果你 真 的 需要使用 一些 共享 数据 那么 multiprocessing  提供了 两种 方法
 共享内存 可以使用 value  或 array  将 数据 存储在 共享内存 映射中
 例如以下 代码 from  multiprocessing  import  process  value  array  def  fn  a  n
value  printarr  将打印3
14159270123456789 创建 num  和 arr  时 使用 的 d  和 i  参数 是 array  模块 使用 的 类型 的 typecode  d  表示 双精度 浮点数 i  表示 有 符号 整数
 这些 共享 对象 将 是 进程 和 线程安全的
 为 了 更 灵活 地 使用 共享内存 可以使用 multiprocessing
sharedctypes  模块 该模块 支持 创建 从 共享 内存分配 的 任意 ctypes  对象
 服务 进程 由 manager  返回 的 管理器 对象 控制 一个 服务 进程 该 进程 保存 python  对 象 并 允许 其他 进程 使用 代理 操作 它们
 manager  返回 的 管理器 支持 类型 list 、 dict 、 namespace 、 lock 、 rlock 、 semaphore 、 boundedsemaphore 、 condition 、 event 、 barrier 、 queue 、 value  和 array 
 例如 from  multiprocessing  import  process  manager  def  fd  l  d 11 d 22 d 0
join  printd  printl  将打印0
25 none 11229876543210 使用 服务 进程 的 管理器 比 使用 共享内存 对象 更 灵活 因为它们 可以 支持 任意 对象类型
 此外 单个 管理器 可以通过 网络 由 不同 计算机 上 的 进程 共享
 但 是 它们 比 使用 共享内存 慢
 使用 工作 进程
pool  类 表示一个 工作 进程 池
 它 具有 允许 以 几 种不同 方式 将 任务 分配 到 工作 进程 的 方法
 例如 from  multiprocessing  import  pool  timeouterror  import  time  import  os  def  fx  return  xx  if  name  main  start 4 worker  processes  with  poolprocesses 4 as  pool  print 014
timeouterror  printfor  the  moment  the  pool  remains  available  for  more  work  exiting  the  withblock  has  stopped  the  pool  printnow  the  pool  is  closed  and  no  longer  available  请注意 进程 池 的 方法 只能 由 创建 它 的 进程 使用
 注解 这 个 包 中 的功能 要求 子进程 可以 导入 main  模块
 虽然 这 在 编程 指导 中 有 描述 但 还是 需要 提 前 说明 一 下
 这意味着 一些 示例 在交互式 解释器中 不 起作用 比如 multiprocessing
pool  示例
 例如 from  multiprocessing  import  pool  p  pool 5 def  fx 
mapf 123 process  poolworker 1 process  poolworker 2 process  poolworker 3 traceback  most  recent  call  last  traceback  most  recent  call  last  traceback  most  recent  call  last  attributeerror  module  object  has  no  attribute  f  attributeerror  module  object  has  no  attribute  f  attributeerror  module  object  has  no  attribute  f  如果 尝试 执行 上面的 代码 它 会 以 一种 半 随机 的方式 将 三个 完整的 堆栈 内容 交 替 输出 然后 你 只能 以 某 种方式 停止 父 进程
 参考
multiprocessing  包 主要 复制 了 threading  模块 的 api
process  和 异常
 管道 和 队列
 杂项
activechildren  返回 当前进程 存 活 的 子进程 的 列表
 调用 该方法 有 等待 已经 结束 的 进程 的 副作 用
cpucount  返回 系统 的 cpu  数量
 该 数量 不同于 当前进程 可以使用 的 cpu  数量
 可用的 cpu  数量 可以 由 lenos
schedgetaffinity 0 方法 获得
 可能 引发 notimplementederror 
 参见 os
cpucountmultiprocessing
currentprocess  返回 与 当前进程 相 对应的 process  对象
 和 threading
currentthread  相同
multiprocessing
parentprocess  返回 父 进程 process   对象 和 父 进程 调用 currentprocess  返回 的 对象 一样
 如果一个 进程 已经 是 主 进程 parentprocess  会返回 none
3
8 新版功能
multiprocessing
freezesupport  为 使用了 multiprocessing   的 程序 提供 冻结 以 产生 windows  可执行文 件 的 支持
 在 py 2 exe  pyinstaller  和 cxfreeze  上 测试 通 过 需要 在 main  模块 的 if  name  main  该 行 之后 马 上调用 该函 数
 例如 from  multiprocessing  import  process  freezesupport  def  f  printhello  world  if  name  main  freezesupport  processtargetf
start  如果没有 调用 freezesupport  在 尝试 运行 被 冻结 的 可执行文件 时 会抛 出 runtimeerror  异常
 对 freezesupport  的 调用 在 非 windows  平台上 是 无效的
 如果该 模 块 在 windows  平台 的 python  解释器中 正常 运行 该 程序 没有 被 冻结 调 用 freezesupport  也是 无效的
getallstartmethods  返回 支持 的 启动方法 的 列表 该 列表 的 首 项 即 为 默认 选项
 可能的 启动方法 有 fork  spawn  和 forkserver 
 在 windows  中 只有 spawn  是 可用的
 unix  平台 总是 支持 fork  和 spawn  且 fork  是 默认值
3
4 新版功能
getcontextmethodnone  返回 一个 context  对象
 该 对象具有 和 multiprocessing  模块 相同 的 api 
 如果 method  设置 成 none  那么 将 返回 默认 上下文 对象
 否则 method   应该是 fork  spawn  forkserver 
 如果指定 的 启动方法 不存在 将 抛出 valueerror   异常
3
4 新版功能
multiprocessing
getstartmethodallownonefalse  返回 启动 进程时 使用 的 启动方法 名
 如果 启动方法 已经 固定 并且 allownone  被设置 成 false  那么 启动 方法 将 被 固定 为 默认 的 启动方法 并且 返回 其 方法 名
 如果 启动方法 没有 设 定 并且 allownone  被设置 成 true  那么 将 返回 none  
 返回值 将 为 fork  spawn  forkserver  或者 none 
 fork  是 unix  的 默认值 spawn  是 windows  的 默认值
3
4 新版功能
multiprocessing
setexecutable  设置 在 启动 子进程 时 使用 的 python  解释器 路径
 默认使用 sys
executable  嵌入式 编程 人员 可能需要 这样做 setexecutableos
exe  以 使 他们 可以创建 子进程
 在3
4 版更改 现 在 在 unix  平台上 使用 spawn   启动方法 时 支持 调 用 该方法
setstartmethodmethod  设置 启动 子进程 的 方法
 method  可以是 fork  spawn  或 者 forkserver 
 注意 这 最多 只能 调用一次 并且 需要 藏 在 main  模块 中 由 if  name  main  进行 保护
3
4 新版功能
 注解 multiprocessing  并没有 包含 类似 threading
activecount  threading
enumerate  threading
settrace  threading
timer  或者 threading
local  的 方法 和 类
 连接 connection  对象
 同步 原语
 共享 ctypes  对象
 管理器
 代理对象
 代理 是一个 指向 其他 共享 对象 的 对象 这个对象 很 可能在 另外 一个 进程中
 共享 对象 也可以 说 是 代理 指涉 的 对象
 多个 代理对象 可能 指向 同 一个 指涉对象
 代理对象 代理 了 指涉对象 的 一系列 方法调用 虽然 并不是 指涉对象 的 每个 方法都 有必要 被 代理
 通过 这种方式 代理 的 使用 方法可以 和 它 的 指涉对象 一样 from  multiprocessing  import  manager  manager  manager  l  manager
 l 416 l 254916 注意 对 代理 使用 str  函数 会返回 指涉对象 的 字符串表示 但是 repr  却 会返回 代理 本身 的 内部 字符串表示
 被 代理 的 对象 很重要 的 一点 是 必须 可以被 序列化 这样 才能 允许 他们 在 进程 间 传递
 因此 指涉对象 可以包含 代理对象
 这允许 管理器 中 列表、 字典 或者 其他 代理对象 对象 之间的 嵌套
 a  manager
list  b  manager
list  a
appendb  referent  of  a  now  contains  referent  of  b  printa  b  listproxy  object  typeid  list  at 
 b
appendhello  printa 0 b  hello  hello  类似地 字典 和 列表 代理 也可以 相互 嵌套 louter  manager
list  manager
dict  for  i  in  range 2 dfirstinner  louter 0 dfirstinnera 1 dfirstinnerb 2 louter 1 c 3 louter 1 z 26 printlouter 0 a 1 b 2 printlouter 1 c 3 z 26 如果 指涉对象 包含了 普通 list  或 dict  对象 对 这些 内部 可变对象 的 修改 不 会通过 管理器 传播 因为 代理 无法 得 知 被 包含的 值 什么 时候 被修改 了
 但是 把 存放 在 容器 代理 中的值 本身 是 会通过 管理器 传播 的 会 触发 代理对象 中 的 setitem  从而 有效 修改 这些 对象 所 以 可以把 修改 过 的 值 重新 赋值给 容器 代理 create  a  list  proxy  and  append  a  mutable  object  a  dictionary  lproxy  manager
list  lproxy
append  now  mutate  the  dictionary  d  lproxy 0 da 1 db 2 at  this  point  the  changes  to  d  are  not  yet  synced  but  by  updating  the  dictionary  the  proxy  is  notified  of  the  change  lproxy 0 d  在大多 是 使用 情 形 下 这种 实现 方式 并 不 比 嵌套 代理对象 方便 但是 依 然 演示了 对 于 同步 的一种 控制 级别
 注解 multiprocessing  中 的 代理 类 并没有 提供 任何对 于 代理 值 比较 的 支持
 所 以 我们 会 得到 如 下 结果 manager
list 123123 false  当 需要 比较 值 的时候 应该 替换为 使用 指涉对象 的 拷贝
class  multiprocessing
managers
baseproxy  代理对象 是 baseproxy  派生 类的实例
 callmethodmethodname  args  kwds  调用 指涉对象 的 方法 并 返回结果
 如果 proxy  是一个 代理 且 其 指涉 的 是 obj  那么 下面的 表达式 proxy
callmethodmethodname  args  kwds  相当于 求 取 以 下 表达式 的 值 getattrobj  methodnameargs  kwds  于 管理器 进程
 返回结果 会 是一个 值 拷贝 或者 一个新的 共享 对象 的 代理 见 函数 basemanager
register  中 关于 参数 methodtotypeid  的 文档
 如果这 个 调用 熬 出了 异常则 这 个 异常会被 callmethod  透 传 出来
 如果是 管理器 进程 本身 抛出 的一些 其他 异常则 会 被 callmethod  转换为 remoteerror  异常 重新 抛出
 特别 注意如果 methodname  没有 暴 露 出来 将会引发 一个异常
 callmethod  的 一个 使用 示例 l  manager
listrange 10 l
callmethodlen 10 l
callmethodgetitem  slice 27 equivalent  to  l 2723456 l
callmethodgetitem 20 equivalent  to  l 20 traceback  most  recent  call  last 
 indexerror  list  index  out  of  range  getvalue  返回 指涉对象 的 一份 拷贝
 如果 指涉对象 无法 序列化 则 会 抛出一个异常
 repr  返回 代理对象 的 内部 字符串表示
 str  返回 指涉对象 的 内部 字符串表示
 清理 代理对象 使用了 一个 弱引用 回调函数 当 它 被 垃圾回收 时 会 将 自己 从 拥有 此 指涉对象 的 管理器 上 反 注册 当 共享 对象 没有 被 任何 代理 器 引用 时会被 管理器 进程 删除
 进程 池
 监听 器 及 客户端
 认 证 密码
 日志
multiprocessingdummy  模块
dummy  复制 了 multiprocessing  的 api  不 过 是 在 threading  模块 之 上 包装 了 一 层
 编程 指导
 使用 multiprocessing  时 应 遵循 一些 指导 原 则 和 习 惯 用 法
 所有 start  方法
spawn  和 forkserver  启动 方式
 示例
 创建 和 使用自定义 管理器、 代理 的 示例 from  multiprocessing  import  freezesupport  from  multiprocessing
exposed  if  name  main  freezesupport  test  使用 pool  import  multiprocessing  import  time  import  random  import  sys  functions  used  by  test  code  def  calculatefunc  args  result  funcargs  return  s  says  that  ss  s  multiprocessing
freezesupport  test  一个 演示 如何使用 队列 来 向 一 组 工作 进程 提供 任务 并 收集 结果的 例子 import  time  import  random  from  multiprocessing  import  process  queue  currentprocess  freezesupport  function  run  by  worker  processes  def  workerinput  output  for  func  args  in  iterinput
selectors  高级 io  复 用 库
3
4 新版功能
 源码 libselectors
 概述
 注解 the  type  of  file  objects  supported  depends  on  the  platform  on  windows  sockets  are  supported  but  not  pipes  whereas  on  unix  both  are  supported  some  other  types  may  be  supported  as  well  such  as  fifos  or  special  file  devices
 参见 select  lowlevel  io  multiplexing  module
 类
 it  can  be  acombination  of  the  modules  constants  below  常 数 意义 eventread  可读 eventwrite  可 写 class  selectors
 注解 this  method  can  return  before  any  file  object  becomes  ready  or  the  timeout  has  elapsed  if  the  current  process  receives  a  signal  in  this  case  an  empty  list  will  be  returned
 在3
5 版更改 the  selector  is  now  retried  with  a  recomputed  timeout  when  interrupted  by  a  signal  if  the  signal  handler  did  not  raise  an  exception  see  pep 475 for  the  rationale  instead  of  returning  an  empty  list  of  events  before  the  timeout
3
5 新版功能
 示例
tkinterscrolledtext  滚动 文 字 控件
 源代码 libtkinterscrolledtext
pytkinter
scrolledtext  模块提供了一个 同名的 类 实现了 带有 垂 直 滚动 条 并 被 配置 为 可以 正常 运 作 的 文本 控件
 使用 scrolledtext  类 会 比 直接 配置 一个 文本 控件 附加 滚动 条 要 简单 得 多
 文本 控件 与 滚动 条 打包 在 一个 frame  中 grid  方法 和 pack  方法 的 布局 管理器 从 frame  对象 中 获得
 这允许 scrolledtext  控件 可以直接 用于实现 大多数 正常的 布局 管理 行为
 如果需要 更 具体 的 控制 可以 使用以下 属性 class  tkinter
scrolledtextmasternone  kw  frame  围 绕 文本 和 滚动 条 控件 的 框架
 vbar  滚动 条 控件
python  profilers  分析器
 源代码 libprofile
py  和 libpstats
profile  分析器 简 介
cprofile  和 profile  提供了 python  程序 的 确定性 性能 分析
profile  是 一 组 统计 数据描述 程序 的 各个 部分 执行 的 频 率 和 时间
 这些 统计 数据 可以通过 pstats  模块 格式化 为 报 表
python  标准库 提供了 同一 分析 接口 的 两 种不同 实现1
 对 于 大多数 用户 建议 使用 cprofile  这是一个 c  扩展 插 件 因为 其 合 理 的 运行 开销 所 以 适合 于 分析 长时间 运行 的 程序
 该 插 件 基于 lsprof  由 brett  rosen  和 ted  chaotter  贡献
 profile  是一个 纯 python  模块 cprofile  就是 模拟 其 接口 的 c  语言 实现 但它 会显 著 增加 配置 程序 的开销
 如果你 正 在 尝试 以 某 种方式 扩展 分析器 则 使用 此模块 可能会 更容易 完成 任务
 该模块 最初 由 jim  roskind  设计 和 编写
 注解 profiler  分析器 模块 被设计为 给 指定 的 程序 提供 执行 概 要 文件 而不是 用 于 基准 测试 目 的 timeit  才 是用于 此 目标 的 它 能 获得 合理 准确 的结果
 这 特别 适用于 将 python  代码 与 c  代码 进行 基准 测试 分析器 为 python  代码 引入 开销 但不会 为 c  级别 的 函数 引入 开销 因此 c  代码 似 乎 比 任何 python  代码 都 更快
 实 时 用户 手册
profile  和 cprofile  模块 参考
profile  和 cprofile  模块 都 提供 下列函数 profile
 see  上下文管理器 类型 import  cprofile  with  cprofile
printstats  在3
8 版更改 添加了 上下文管理器 支持
 enable  开始 收集 分析 数据
 仅在 cprofile  可 用
 disable  停止 收集 分析 数据
 仅在 cprofile  可 用
 createstats  停止 收集 分析 数据并 在内部 将结果 记录 为当前 profile
 dumpstatsfilename  将 当前 profile  的结果 写入 filename 
stats  类
 stats  对象 有 以下方法 stripdirs  this  method  for  the  stats  class  removes  all  leading  path  information  from  file  names
 the  following  are  the  valid  string  and  sortkey  有效 字符串参数 有效 枚举 参数 含义 calls  sortkey
calls  调用 次 数 cumulative  sortkey
cumulative  累积 时间 cumtime  na  累积 时间 file  na  文件名 filename  sortkey
filename  文件名 module  na  文件名 ncalls  na  调用 次 数 pcalls  sortkey
pcalls  原始 调用 计数 line  sortkey
line  行 号 name  sortkey
name  函数 名称 nfl  sortkey
nfl  名称 文件 行 stdname  sortkey
stdname  标准 名称 time  sortkey
time  内部 时间 tottime  na  内部 时间 note  that  all  sorts  on  statistics  are  in  descending  order  placing  most  time  consuming  items  first  where  as  name  file  and  line  number  searches  are  in  ascending  order  alphabetical
3
7 新版功能 added  the  sortkey  enum
3
9 新版功能 added  the  following  dataclasses  statsprofile  functionprofile
 什么是 确定性 性能 分析？
 确定性 性能 分析 旨在 反 映 这样 一个 事实 即 所有 函数调用、 函数返回 和 异常 事件 都 被 监 控 并且 对 这些 事件 之间的 间隔 在 此 期间 用户 的 代码 正 在 执行 进行 精确 计时
 相反 统计 分析 不 是 由 该模块 完成 随机 采样 有效 指令 指针 并 推 断 时间 花 费 在 哪 里
 后 一种 技术 传统 上 涉及 较 少 的开销 因为 代码 不需要 检测 但 只 提供了 时间 花 在 哪 里 的 相对 指示
 在 python  中 由 于 在 执行 过程中 总 有 一个 活动 的 解释器 因此 执行 确定性 评 测 不需要 插入 指令 的 代码
python  自动 为每个 事件 提供一个 dfn  钩子 可选 回调
 此外 python  的 解释 特性 往往 会 给 执行 增加 太 多 开销 以 至 于 在 典型 的 应用程序中 确定性 分析 往往 只会 增加 很小 的 处理 开销
 结果是 确定性 分析 并没有 那么 代 价 高 昂 但是 它 提供了 有关 python  程序 执行 的 大量 运行时 统计 信息
 调用 计数 统计 信息 可用于 识别 代码中 的 错误 意外 计数 并 识别 可能的 内 联 扩展 点 高 频 调用
 内部 时间 统计 可用于 识别 应 仔 细 优化 的 热 循环
 累积 时间 统计 可用于 识别 算法 选择 上 的 高 级别 错误
 请注意 该 分析器 中 对 累积 时间 的 异常处理 允许 直接 比较 算法的 递归 实现 与 迭代 实现 的 统计 信息
 局 限 性
 一个 限制 是 关于 时间 信息 的 准确 性
 确定性 性能 分析 存在一个 涉及 精度 的基本 问题
 最 明显 的 限制 是 底层 的 时钟 周期 大 约 为0
001 秒 通常
 因此 没有 什么 测量 会 比 底层 时钟 更 精确
 如果 进行 了 足够的 测量 那么 误 差 将 趋 于 平均
 不幸的是 删除 第一个 错误 会导致 第二个 错误 来源
 第二个 问题 是 从 调度 事件 到 分析器 调用 获取 时间 函数 实际 获取 时钟 状态 这 需要 一段 时间
 类似地 从 获取 时钟 值 然后 保存 开始 直到 再次 执行 用户 代码 为止 退出 分析器 事件 句柄 时 也 存在一 定 的 延迟
 因此 多次 调用 单个 函数 或 调用 多个 函数 通常会 累积 此 错误
 尽管 这种方式 的 误 差 通常 小于 时钟 的精度 小于 一个 时钟 周期 但它 可以 累积 并 变得 非常 可 观
 与 开销 较 低 的 cprofile  相比 profile  的 问题 更 为 严重
 出 于 这 个 原因 profile  提供了一种 针对 指定 平台 的 自 我 校 准 方法 以便 可以在 很大 程度 上 平均 地 消除 此 误 差
 校 准 后 结果将 更 准确 在 最小 二 乘 意义 上 但它 有 时 会产生 负数 当 调用 计数 异常 低 且 概率 之 神 对 您 不 利 时
 因此 不 要 对 产生 的 负数 感到 惊 慌
 它们 应该 只 在 你 手 工 校 准 分析器 的情况下 才会 出现 实际上 结果 比 没有 校 准 的 情况 要 好
 准确 估 量
profile  模块 的 profiler  会 从 每个 事件 处理 时间 中 减 去 一个 常量 以 补 偿 调用 time  函数 和 存储 结果 的开销
 默认情况下 常 数 为0
 对 于特定 的 平台 可 用以下 程序 获得 更好 修正 常 数 局 限 性
 当你 有 一个 一致的 答 案 时 有 三种 方法 可以使用 import  profile 1
 使用自定义 计时器
 be  warned  that  you  should  calibrate  the  profiler  class  for  the  timer  function  that  you  choose  see  准确 估 量
 for  most  machines  a  timer  that  returns  a  lone  integer  value  will  provide  the  best  results  in  terms  of  low  overhead  during  profiling
 os
times  is  pretty  bad  as  it  returns  a  tuple  of  floating  point  values
 if  you  want  to  substitute  a  better  timer  in  the  cleanest  fashion  derive  a  class  and  hardwire  a  replacement  dispatch  method  that  best  handles  your  timer  call  along  with  the  appropriate  calibration  constant
sched  事件 调度 器
 源码 libsched
pysched  模块 定义了一个 实现 通 用 事件 调度 程序 的 类 class  sched
sleep  scheduler  类 定义了一个 调度 事件 的通用 接口
 它需要 两个 函数来 实际 处 理 外部 世界—— timefunc  应当 不带参数 地调用 并返回一个 数字 时 间 可以为 任意 单位
 delayfunc  函数 应当 带 一个 参数调用 与 timefunc  的 输出 相 兼容 并且 应当 延迟 其 所指定的 时间 单位
 每个 事件 运行 后 还 将 调用 delayfunc  并 传入 参数0 以允许 其他线程 有 机 会 在 多 线程 应用中 运行
 在3
3 版更改 timefunc  和 delayfunc  参数 是可选的
 在3
3 版更改 scheduler  类可以 安全 的 在 多线程 环境中 使用
 示例 import  sched  time  s  sched
 调度 器对象
scheduler  实例 拥 有以下 方法和属性 scheduler
enterabstime  priority  action  argument  kwargs  安排 一个 新 事件
 time  参数 应该 有 一个 数字类型 兼容 的返回值 与 传递 给 构造函数 的 timefunc  函数 的返回值 兼容
 计划 在 相同 time  的 事件 将按 其 priority  的顺序 执行
 数字 越 小 表示 优先级 越 高
 执行 事件 意 为 执行 actionargument  kwargs
 argument  是包含 有 action  的 位置参数 的 序列
 kwargs  是包含 action  的关键字参 数 的字典
 返回值 是 一个事件 可用于 以 后 取消 事件 参见 cancel 
 在3
3 版更改 argument  参数 是可选的
 在3
3 版更改 添加了 kwargs  形参
enterdelay  priority  action  argument  kwargs  安排 延 后 delay  时间 单位 的 事件
 除了 相对 时间 其他 参数、 效果 和 返 回 值 与 enterabs  的 相同
 在3
3 版更改 argument  参数 是可选的
 在3
3 版更改 添加了 kwargs  形参
cancelevent  从 队列中 删除 事件
 如果 event  不 是 当前 队列中 的 事件 则 此方法将 引 发 valueerror
empty  如果 事件 队列 为空 则返回 true
runblockingtrue  运行 所有 预定 事件
 此方法将 等待 使用 传递给 构造函数 的 delayfunc  函数 进行 下 一个事件 然后 执行 它 依 此类推 直到 没有 更多的 计划 事件
 如果 blocking  为 false  则 执行 由 于 最 快 到 期 如果有 的 预定 事件 然 后 在 调度 程序中 返回 下 一个 预定 调用 的 截 止 时间 如果有
 action  或 delayfunc  都可以 引发异常
 在任何 一 种情况下 调度 程序 都 将 保持 一致 状态 并 传播 异常
 如果 action  引发异常 则 在 将 来 调用 run  时 不 会 尝试 该 事件
 如果 一系列 事件 的 运行 时间 比 下 一个事件 之前的 可 用 时间 长 那么 调度 程序 将 完全 落 后
 不 会发生 任何 事件 调用 代码 负责 取消 不再 相关的 事件
 在3
3 版更改 添加了 blocking  形参
queue  只读 属性 按照 将 要 运行 的顺序 返回 即 将 发生 的 事件 列表
 每个 事件 都 显示 为 named  tuple  包含以下 字段 time 、 priority 、 action 、 argument 、 kwargs
crypt  function  to  check  unix  passwords
hashing  methods
3
3 新版功能
3
7 新版功能
module  attributes
3
3 新版功能
 模块 函数
 在3
3 版更改 accept  crypt
method  values  in  addition  to  strings  for  salt
3
3 新版功能
 在3
7 版更改 added  the  rounds  parameter
 示例
 结构化 标记 处理 工具
python  支持 各种 模块 以 处理 各种 形式 的 结构化 数据 标记
 这 包括 使用标准 通 用 标记 语言 sgml  和 超 文本 标记 语言 html  的 模块 以及 使用 可扩展 标记 语言 xml  的 几个 接口
 html  超 文本 标记 语言 支持 html
parser  简单的 html  和 xhtml  解析器 html  解析器 的 示例 程序 htmlparser  方法 示例 html
entities  html  一般 实体 的 定义 xml  处理 模块 xml  漏洞 defusedxml  包 xml
elementtree  elementtree  xml  api  教程 xml  树 和 元素 解析 xml  pull  api  进行 非阻塞 解析 查找 感兴趣的 元素 修改 xml  文件 构建 xml  文档 使用 命名空间 解析 xml  其他 资源 xpath  支持 示例 支持 的 xpath  语法 参考 引用 函数 xinclude  支持 示例 参考 引用 函数 元素 对象 elementtree  对象 qname  objects  treebuilder  objects  xmlparser  对象 xmlpullparser  对象 异常 xml
dom  the  document  object  model  api  模块内容 objects  in  the  dom  domimplementation  objects  节点 对象 节点 列表对象 文档 类型对象 文档 对象 元素 对象 attr  对象 namednodemap  对象 注释 对象 text  和 cdatasection  对象 processinginstruction  对象 异常 一致性 类型 映射 accessor  methods  xml
handler  base  classes  for  sax  handlers  contenthandler  对象 dtdhandler  对象 entityresolver  对象 errorhandler  对象 xml
saxutils  sax  工具集 xml
xmlreader  interface  for  xml  parsers  xmlreader  对象 incrementalparser  对象 locator  对象 inputsource  对象 the  attributes  interface  the  attributesns  interface  xml
expat  fast  xml  parsing  using  expat  xmlparser  对象 expaterror  exceptions  示例 content  model  descriptions  expat  error  constants
uuid  uuid  objects  according  to  rfc
safeuuid 3
7 新版功能
fields  以 元组 形式 存放 的 uuid  的6 个整数 域 有 六 个单独的 属性 和 两个 派生 属性 域 意义 timelow  uuid  的 前32 位 timemid  接 前 一 域 的16 位 timehiversion  接 前 一 域 的16 位 clockseqhivariant  接 前 一 域 的8 位 clockseqlow  接 前 一 域 的8 位 node  uuid  的 最后48 位 time  uuid  的 总 长60 位 的 时间戳 clockseq 14 位 的 序列 号 uuid
3
7 新版功能
 在3
7 版更改 universally  administered  mac  addresses  are  preferred  over  locally  administered  mac  addresses  since  the  former  are  guaranteed  to  be  globally  unique  while  the  latter  are  not
 参见 rfc 4122 a  universally  unique  identifier  uuid  urn  namespace  this  specification  defines  a  uniform  resource  name  namespace  for  uuids  the  internal  format  of  uuids  and  methods  of  generating  uuids
 示例
htmlparser  简单的 html  和 xhtml  解析器
 源代码 libhtmlparser
py  这个模块 定义了一个 htmlparser  类 为 html  超 文本 标记 语言 和 xhtml  文本 文件 解析 提供 基础
htmlparser  convertcharrefstrue  创建一个 能 解析 无效 标记 的 解析器 实例
 如果 convertcharrefs  为 true  默认值 则 所有 字符 引用 scriptstyle  元素 中 的 除外 都 会自动 转换为 相应的 unicode  字符
 一个 htmlparser  类的实例 用来 接受 html  数据并 在 标记 开始、 标记 结 束、 文本、 注释 和其他 元素 标记 出现 的时候 调用 对应的 方法
 要实现 具体 的 行为 请使用 htmlparser  的子类 并 重载 其 方法
 这 个 解析器 不 检查 结束 标记 是否 与 开始 标记 匹配 也不 会 因 外层 元素 完毕 而 隐式 关闭 了 的 元素 引发 结束 标记 处理
 在3
4 版更改 convertcharrefs  关键字参数 被添加
 在3
5 版更改 convertcharrefs  参数 的 默认值 现 在 为 true
html  解析器 的 示例 程序
htmlparser  方法
 示例
cgitb  用 于 cgi  脚本 的 回溯 管理器
 源代码 libcgitb
pycgitb  模块提供了 用 于 python  脚本 的 特殊 异常 处理程序
 这 个 名称 有 一点 误 导 性
 它 最初 是 设计 用来 显示 html  格式 的 cgi  脚本 详细 回溯 信息
 但 后 来 被 一般 化 为 也可 显示 纯 文本 格式 的 回溯 信息
 激活 这个模块 之后 如果 发生了 未 被捕获 的异常将 会显示 详细 的 已 格式化 的 报告
 报告 显示 内容 包括 每个 层级的 源代码 摘 录 还有 当前 正在运行 的 函数的参数 和 局部变量 值 以 帮助 你 调试 问题
 你也可以 选择 将 此 信息 保存 至 文件 而不是 将 其 发送 至 浏览器
 要 启用 此 特性 只需 简单地 将 此 代码 添加到 你 的 cgi  脚本 的 最 顶 端 import  cgitb  cgitb
enableenable  函数 的 选项 可以 控制 是 将 报告 显示 在 浏览器 中 还是 将 报告 记录 到 文件 供 以 后 进行 分析
enabledisplay 1 logdirnone  context 5 formathtml  此 函数 可通过 设置 sys
excepthook  的 值 以 使 cgitb  模块 接 管 解释器 默 认 的 异常处理 机制
 可选参数 display  默认为1 并 可 被设为0 来 停止 将 回溯 发送 至 浏览 器
 如果给出 了 参数 logdir  则 回溯 会 被 写入文件
 logdir  的 值 应 当 是 一个用于 存放 所 写入文件 的 目录
 可选参数 context  是 要 在 回溯 中 的当前 源代码 行 前 后 显示 的 上下文行 数默认为5
 如果可选 参数 format  为 html  输出 将 为 html  格式
 任何其 它 值 都会 强制 启用 纯 文本 输出
 默认 取值 为 html
textinfo  context 5 此 函数 用于处理 info  一个包含 sys
excinfo  返回结果 的3 元组 所描述的 异常 将 其 回溯 格式化 为 文本 并 将结果 作为 字符串 返回
 可选参数 context  是 要 在 回溯 中 的当前 源码 行 前 后 显示 的 上下文行 数默认为5
htmlinfo  context 5 此 函数 用于处理 info  一个包含 sys
excinfo  返回结果 的3 元组 所描述的 异常 将 其 回溯 格式化 为 html  并 将结果 作为 字符串 返回
 可选参 数 context  是 要 在 回溯 中 的当前 源码 行 前 后 显示 的 上下文行 数默认为5
handlerinfonone  此 函数 使用默认 设置 处理 异常 即 在 浏览器 中显示 报告 但不 记录 到 文件
 当你 捕获 了 一个异常并 希望 使用 cgitb  来 报告 它 时 可以使用 此 函数
 可选的 info  参数 应 为 一个包含 异常 类型 异常 值 和 回溯 对象 的3 元组 与 sys
excinfo  所返回的 元组 完全 一致
 如果未 提供 info  参数 则 会 从 sys
excinfo  获取 当前 异常
unicodedata  unicode  数据库
builtins  内建 对象
 该模块提供 对 python  的 所有 内置 标识符 的 直接访问 例如 builtins
open  是 内置函数 的 全 名 open 
 请参阅 内置函数 和 内置 常量 的 文档
 大多数 应用程序 通常不 会 显式 访问 此模块 但 在 提供 与内置 值 同名的 对象 的 模块 中 可能 很有用 但 其 中 还需要 内置 该名称
 例如 在 一个 想要 实现 open  函数 的 模块 中 它 包装 了 内置的 open  这个模块 可以直接 使用 import  builtins  def  openpath  f  builtins
 作为一个 实现细节 大多数 模块 都 将 名称 builtins  作为 其 全局变量 的一部分 提供
 builtins  的 值 通常是 这个模块 或者 这个模块 的 值 dict  属性
 由 于 这是一个 实现细节 因此 python  的替代 实现 可能不 会 使用 它
dis  python  字节码 反汇编 器
pydis  模块 通过 反汇编 支持 cpython  的 bytecode  分析
 该模块 作为 输入 的 cpython  字节码 在 文件 includeopcode
h  中定义 并 由 编译器 和 解释器 使用
cpython  implementation  detail  字节码 是 cpython  解释器 的 实现细节
 不保证 不会在 python  版本 之间 添加、 删除 或 更改 字节码
 不应 考虑 将 此模块 的 跨 python  vm  或 python  版本 的 使用
 在3
6 版更改 每条 指令 使用2 个字节
 以 前 字节数 因 指令 而 异
 示例 给出 函数 myfunc  def  myfuncalist  return  lenalist  可以 使用以下 命令 显示 myfunc  的 反汇编 dis
dismyfunc 20 loadglobal 0 len 2 loadfast 0 alist 4 callfunction 16 returnvalue 2 是 行 号
 字节码 分析
3
4 新版功能
 字节码 分析 api  允许 将 python  代码 片段 包装 在 bytecode  对象 中 以便 轻松 访问 已编译 代码 的详细信息
bytecodex  firstlinenone  currentoffsetnone  分析 的 字节码 对应于 函数、 生成器、 异步生成器、 协程、 方法、 源代码 字符 串 或 代码对象 由 compile  返回
 这是 下 面列出的 许多 函数 的 便 利 包装 最 值得 注意 的 是 getinstructions  迭代 于 bytecode  的 实例 产生 字节码 操作 instruction  的 实例
 如果 firstline  不 是 none  则表示 应该 为 反汇编 代码中 的第一个 源 代码 行 报告 的 行 号
 否则 源 行 信息 如果有 的话 直接 来自 反汇编 的 代码 对象
 如果 currentoffset  不 是 none  则 它 指 的 是 反汇编 代码中 的 指令 偏 移量
 设置 它 意味着 dis  将 针对 指定 的 操作码 显示 当前 指令 标记
 classmethod  fromtracebacktb  从 给定 回溯 构造一个 bytecode  实例 将 设置 currentoffset  为 异 常 负责 的 指令
 codeobj  已编译 的 代码对象
 firstline  代码对象 的第一个 源代码 行 如果可 用 dis  返回 字节码 操作 的 格式化 视图 与 dis
dis  打印 相同 但 作为 多 行 字符串 返回
 info  返回 带有 关于 代码对象 的详细信息 的 格式化 多 行 字符串 如 codeinfo 
 在3
7 版更改 现在可以 处理 协程 和 异步生成器 对象
 示例 bytecode  dis
 分析 函数
python  字节码 说明
 操作码 集合
xmlsax  support  for  sax 2 parsers
 警告 the  xml
 if  you  need  to  parse  untrusted  or  unauthenticated  data  see  xml  漏洞
 在3
1 版更改 the  sax  parser  no  longer  processes  general  externalentities  by  default  to  increase  security
 before  the  parser  creatednetwork  connections  to  fetch  remote  files  or  loaded  local  files  fromthe  file  system  for  dtd  and  entities
 the  feature  can  be  enabled  againwith  method  setfeature  on  the  parser  object  and  argumentfeatureexternalges
 在3
8 版更改 the  parserlist  argument  can  be  any  iterable  not  just  a  list
 在3
5 版更改 added  support  of  str  instances
 参见 sax  the  simple  api  for  xml  this  site  is  the  focal  point  for  the  definition  of  the  sax  api
saxexception  objects
python  development  mode
3
7 新版功能
ctypes  python  的 外部函数 库
ctypes  是 python  的 外部函数 库
 它 提供了 与 c  兼容的 数据类型 并 允许 调用 dll  或 共享库 中的函数
 可 使用 该模块 以 纯 python  形式 对 这些 库 进行 封装
ctypes  教程
 注意 在 本 教程 中 的 示例 代码 使用 doctest  进行 过 测试 保证 其 正确 运行
 由 于 有 些 代码 在 linuxwindows  或 mac  os  x  下 的 表 现 不同 这些 代码 会 在 doctest  中包含 相关的 指令 注解
 注意 部分 示例 代码 引用 了 ctypes  cint  类型
 在 sizeoflong  sizeofint  的平台上 此 类型 是 clong  的一个别名
 所 以 在 程序 输出 clong  而不是 你 期望的 cint  时 不必 感到 迷 惑 它们 实际上是 同一 种类型
 载入 动态 连接 库
 操作 导入 的 动态链接库 中的函数
 调用函数
 基础 数据类型
ctypes  定义了 一些 和 c  兼容 的基本 数据类型 ctypes  类型 c  类型 python  数据类型 cbool  bool  bool 1 cchar  char  单 字符 字节串对象 cwchar  wchart  单 字符 字符串 cbyte  char  int  cubyte  unsigned  char  int  cshort  short  int  cushort  unsigned  short  int  cint  int  int  cuint  unsigned  int  int  clong  long  int  culong  unsigned  long  int  clonglong  int 64 或 long  long  int  culonglong  unsigned  int 64 或 unsigned  long  long  int  csizet  sizet  int  cssizet  ssizet  或 pyssizet  int  cfloat  float  float  cdouble  double  float  clongdouble  long  double  float  ccharp  char  nul  terminated  字节串对象 或 none  cwcharp  wchart  nul  terminated  字符串或 none  cvoidp  void  int  或 none 1
 构造函数 接受 任何 具有 真值 的 对象
 所有这些 类型 都可以 通过使用 正确 类型 和 值 的 可选 初始 值 调用 它们 来创建 cint  clong 0 cwcharphello  world  cwcharp 140018365411392 cushort 3 cushort 65533 由 于 这些类型 是可变 的 它们的 值 也可以在 以 后 更改 i  cint 42 printi  clong 42 printi
value 99 当 给 指针 类型的对象 ccharp  cwcharp  和 cvoidp  等 赋值 时 将 改变 它们 所指向的 内存地址 而 不 是 它们 所指向的 内存 区域 的 内容 这是 理 所 当然 的因为 python  的 bytes  对象 是不可变的 s  hello  world  cs  cwcharps  printcs  cwcharp 139966785747344 printcs
value  hi  there  prints  first  object  is  unchanged  hello  world  但 你 要注意 不 能 将它们 传递给 会 改变 指针 所 指 内存 的 函数
 如果你需要 可 改变 的内存块 ctypes  提供了 createstringbuffer  函数 它提供 多 种方式 创建 这种 内存块
 当前 的内存块 内容 可以通过 raw  属性 存 取 如果你 希望 将 它 作为 nul  结束 的 字符串 请使用 value  属性 from  ctypes  import  p  createstringbuffer 3 create  a 3 byte  buffer  initialized  to  nul  bytes  printsizeofp  reprp
raw 10 bhix 00 lox 00 x 00 x 00 x 00 x 00 createstringbuffer  函数 替代 以 前 的 ctypes  版本中 的 cbuffer  函数 仍然可 当 作 别名 使用 和 cstring  函数
createunicodebuffer  函数创建 包含 unicode  字符 的 可变 内存块 与 之 对应的 c  语言 类型 是 wchart
 调用函数 继续
 使用自定义 的 数据类型 调用函数
 指定 必 选参数 的 类型 函数 原型
 可以通过 设置 argtypes  属性 的 方法 指定 从 dll  中 导出 函数 的 必 选参数 类型
argtypes  必须是一个 c  数据类型 的 序列 这里 的 printf  可能不 是 个 好 例子 因为它 是 变长 参数 而且 每个 参数 的 类型 依赖于 格式化字符串 不 过 尝试 这 个 功能 也 很 方便 printf
20000037 指定 数据类型 可 以防止 不 合理的 参数传递 就像 c  函数 的 原型 并且 会自动 尝试 将 参数 转换为 需要 的 类型 printfbd  d  d 123 traceback  most  recent  call  last  file  stdin  line 1 in  module  argumenterror  argument 2 exceptions
00000013 如果你想 通过 自定义 类型 传递 参数 给 函数 必须 实现 fromparam  类 方法 才 能够 将 此 自定义 类型 用 于 argtypes  序列
fromparam  类 方法 接受一个 python  对象作为 函数 输入 它应该 进行 类型检查 或者 其他 必要的 操作 以 保证 接收到 的 对象 是 合法的 然后 返回 这个对象 或者 它 的 asparameter  属性 或者 其他 你想要 传递给 c  函数的参数
 这里 也 一样 返回 的结果 必须是 整型、 字符串、 二进制 字符串、 ctypes  类型 或者一个 具有 asparameter  属性 的 对象
 返回 类型
 传递 指针 或 以 引用 方式 传递 形参
 结构体 和 联合
 结构体 联合 字段 对齐 及 字节顺序
 默认情况下 结构体 和 联合 的 字段 与 c  的 字节 对齐 是 一样的
 也可以在 定义 子类 的时候 指定 类 的 pack  属性来 覆盖 这种 行为
 它必须 设置为 一个 正整数 表示 字段 的最大 对齐 字节
 这 和 msvc  中 的 pragma  packn  功能 一样
ctypes  中 的 结构体 和 联合 使用 的 是 本地 字节序
 要使用 非 本地 字节序 可以使用 bigendianstructure  littleendianstructure  bigendianunionand  littleendianunion  作为 基类
 这些类 不 能包含 指针 字段
 结构体 和 联合 中 的 位 域
 结构体 和 联合 中 是 可以包含 位 域 字段 的
 位 域 只 能用于 整型 字段 位 长度 通过 fields  中 的 第三个 参数指定 class  intstructure 
 数组
 指针
 可以将 ctypes  类型 数据 传入 pointer  函数创建 指针 from  ctypes  import  i  cint 42 pi  pointeri  指针 实例 拥有 contents  属性 它 返回 指针 指向 的 真 实 对象 如 上面的 i  对象 pi
contents  clong 42 注意 ctypes  并没有 oor  返回 原始 对象 每次 访问 这 个 属性 时 都会 构造 返回一个新的 相同 对象 pi
contents  false  将 这 个 指针 的 contents  属性 赋值为 另一个 cint  实例 将 会导致 该 指针 指向 该实例 的 内存地址 i  cint 99 pi
contents  clong 99 指针 对象 也可以通过 整数 下 标 进行 访问 pi 099 通过 整数 下 标 赋值 可以 改变 指针 所指向的 真 实 内容 printi  clong 99 pi 022 printi  clong 22 使用0 以外的 索引 也是 合法的 但是 你必须 确保 知道 自己 为什么 这 么 做 就像 c  语言中 你可以 访问 或者 修改 任意 内存 内容
 通常 只会 在 函数 接收 指针 是 才会 使用 这种 特性 而且 你 知道 这 个 指针 指向 的 是一个 数组 而不是 单个 值
 内部 细节 pointer  函数 不 只是 创建了 一个 指针 实例 它 首先 创建了 一个 指针 类型
 这是 通过调用 pointer  函数 实现 的 它 接收 ctypes  类型 为 参数 返回一个新的 类型 pi  pointercint  pi  class  ctypes
 无 参 调用 指针类型 可以 创建一个 null  指针
 null  指针 的 布尔值 是 false  nullptr  pointercint  printboolnullptr  false  解 引用 指针 的时候 ctypes  会 帮 你 检测 是否 指针 为 null  但是 解 引用 无效的 非 null  指针 仍 会导致 python  崩 溃 nullptr 0 traceback  most  recent  call  last 
 类型 转换
 通常情况下 ctypes  具有 严格 的 类型检查
 这 代表 着 如果在 函数 argtypes  中 或者 结构体 定义 成员 中 有 pointercint  类型 只有 相同 类型的实例 才会 被 接受
 也 有一些 例外
 比如 你可以 传递 兼容的 数组 实例 给 指针类型
 所 以 对 于 pointercint  ctypes  也可以 接受 cint  类型 的 数组 class  barstructure 
123 另外 如果一个 函数 argtypes  列表中 的 参数 显式 的 定义为 指针类型 如 pointercint  指针 所指向的 类型 这个例子 中 是 cint  也可以 传递给 函数
ctypes  会自动 调用 对应的 byref  转换
 可以 给 指针 内容 赋值为 none  将 其 设置为 null  bar
values  none  有 时候 你 拥有 一个 不兼容 的 类型
 在 c  中 你可以 将 一个 类型 强制转换 为 另一个
 ctypes  中 的 a  cast  函数 提供了 相同 的功能
 上面的 结构体 bar  的 value  字段 接收 pointercint  指针 或者 cint  数组 但是 不 能 接受 其他类型的 实例 bar
values  cbyte 4 traceback  most  recent  call  last  file  stdin  line 1 in  module  typeerror  incompatible  types  cbytearray 4 instance  instead  of  lpclong  instance  这种情况下 需要 手动 使用 cast  函数
cast  函数可以 将 一个 指针 实例 强制转换 为 另一种 ctypes  类型
 cast  接收 两个参数 一个 ctypes  指针 对象或者 可以被 转换为 指针 的 其他类型 对象 和 一个 ctypes  指针类型
 返回 第二个 类型 的 一个实例 该 返回 实例 和 第一个参数 指向 同一 片 内存 空间 a  cbyte 4 casta  pointercint  ctypes
 所 以 cast  可以用来 给 结构体 bar  的 values  字段 赋值 bar  bar  bar
 不完整 类型
 不完整 类型 即 还没有 定义 成员的 结构体、 联合 或者 数组
 在 c  中 它们 通常用 于 前 置 声明 然后 在 后面 定义 struct  cell  forward  declaration  struct  cell  char  name  struct  cell  next  直接 翻译 成 ctypes  的 代码 如 下 但是 这 行 不 通 class  cellstructure 
 traceback  most  recent  call  last  file  stdin  line 1 in  module  file  stdin  line 2 in  cell  nameerror  name  cell  is  not  defined  因为 新 的 cell  类 在 class  语句 结束 之前 还没有 完成 定义
 在 ctypes  中 我们可以 先 定义 cell  类 在 class  语句 结束 之后 再 设置 fields  属性 from  ctypes  import  class  cellstructure 
 next  pointercell  让我们 试 试
 我们 定义 两个 cell  实例 让 它们 互 相 指向 对 方 然后 通过 指针 链 式 访问 几 次 c 1 cell  c 1
 回调函数
 访问 dll  的 导出 变量
 一些 动态链接库 不 仅仅 导出 函数 也会 导出 变量
 一个例子 就是 python  库 本身 的 pyoptimizeflag  根据 启动 选项 o 、 oo  的不同 它 是 值可能 为0、1、2 的 整型
ctypes  可以通过 indll  类 方法 访问 这 类变量
 pythonapi  是用于 访问 python  c  接口 的 预定义 符号 optflag  cint
indllpythonapi  pyoptimizeflag  printoptflag  clong 0 如果 解释器 使用 o  选项 启动 这个例子 会打印 clong 1 如果 使用 oo  启动 则 会打印 clong 2
 一个 扩展 例子 同时 也 展示了 使用 指针 访问 python  导出 的 pyimportfrozenmodules  指针 对象
 对 文档中 这 个 值 的 解释 说明 该 指针 被初始化 为 指向 struct  frozen  数组 以 null  或者0 作为 结 束 标记
 当 一个 冻结 模块 被导入 首先 要 在这个 表 中搜索
 第三方 库 可以 以 此 来提供 动态 创建 的 冻结 模块 集合
 这 足以 证明 修改 这 个 指针 是 很有用 的
 为 了 让 实例 大小 不 至 于 太 长 这里 只 展示 如何使用 ctypes  读取 这 个 表 from  ctypes  import  class  structfrozenstructure 
 我们 定义了 struct  frozen   数据类型 接 着 就可以 获取 这 张 表 的 指针 了 frozentable  pointerstructfrozen  table  frozentable
indllpythonapi  pyimportfrozenmodules  由 于 table  是 指向 structfrozen  数组 的 指针 我们可以 遍历 它只 不 过 需要 自己 判断 循环 是否 结束 因为 指针 本身 并 不包含 长度
 它 早 晚 会 因为 访问 到 野 指针 或者 什么 的 把 自己 搞 崩 溃 所 以 我们 最好 在 遇到 null  后 就 让 它 退出 循环 for  item  in  table 
spam 161 python  的 冻结 模块 和 冻结 包 由 负 size  成员 表示 并不是 广 为 人 知 的事情 它们 仅仅 用于实 验
 例如 可以使用 import  hello  尝试 一 下 这 个 功能
 意外
ctypes  也 有自己的 边界 有 时候 会发生 一些 意 想 不 到 的事情
 比如 下面的例子 from  ctypes  import  class  pointstructure 
y 3434 嗯
 我们 预 想 应该 打印3412
 但是 为什么 呢 这是 rc
b  rc
a  这 行 代码 展开 后 的 步骤 temp 0 temp 1 rc
b  temp 1 注意 temp 0 和 temp 1 对象 始终 引用 了 对象 rc  的内容
 然后 执行 rc
a  temp 0 会把 temp 0 的内容 拷贝 到 rc  的 空间
 这 也 改变 了 temp 1 的内容
 最终 导致 赋值语句 rc
b  temp 1 没有 产生 预 想 的效果
 记住 访问 被 包含在 结构体、 联合、 数组中 的 对象 并不会 将 其 复制 出来 而 是 得到 了 一个 代理对象 它 是 对 根 对象 的 内部 内容的 一 层 包装
 下面是 另一个 可能 和 预期 有 偏 差 的 例子 s  ccharp  s
value  false  注解 使用 ccharp   实例化 的 对象 只能 将 其 值 设置为 bytes  或者 整数
 为什么 这里 打印 了 false ？ ctypes  实例 是一些 内存块 加上 一些 用 于 访问 这些 内存块的 descriptor  组成
 将 python  对象 存储在 内存块 并不会 存储 对象 本身 而 是 存储 了 对象 的 内容
 每次 访问 对象 的内容 都会 构造 一个新的 python  对象
 变长 数据类型
ctypes  对 变长 数组 和 结构体 提供了一些 支持
 valueerror  minimum  size  is 8 resizeshortarray 32 sizeofshortarray 32 sizeoftypeshortarray 8 这 非常 好 但是 要 怎 么 访问 数组中 额外的 元素 呢？ 因为 数组 类型 已经 定义 包含4 个元素 导致 我们 访问 新增 元素 时 会产生 以 下 错误 shortarray 0000 shortarray 7 traceback  most  recent  call  last 
 indexerror  invalid  index  使用 ctypes  访问 变长 数据类型 的 一个 可 行 方法 是 利用 python  的动态 特性 根据 具体 情况 在 知道 这 个 数据 的大小 后 重新 指定 这 个 数据 的 类型
ctypes  参考 手册
 寻找 动态链接库
 加载 动态链接库
 有 很多 方式 可以将 动态链接库 加载 到 python  进程
 其 中 之一 是 实例化 以 下 类 的 其中一个 class  ctypes
cdllname  modedefaultmode  handlenone  useerrnofalse  uselasterrorfalse  winmode 0 此 类的实例 即 已 加载 的 动态链接库
 库 中的函数 使用标准 c  调用 约定 并 假 定 返回 int 
 在 windows  上 创建 cdll  实例 可能会 失败 即使 dll  名称 确实 存 在
 当 某个 被 加载 dll  所 依赖 的 dll  未找到 时 将引发 oserror  错误 并附带 消 息 winerror 126 the  specified  module  could  not  be  found
 此 错 误消息 不包含 缺 失 dll  的 名称 因为 windows  api  并不会 返回 此 类 信息 这使得 此 错误 难以 诊 断
 要 解决 此 错误 并 确定 是 哪 一个 dll  未找到 你需 要 找 出 所 依赖 的 dll  列表并 使用 windows  调试 与 跟踪 工具 确定 是 哪 一个 未 找到
 参见 microsoft  dumpbin  工具 一个用于 查找 dll  依赖 的工具
oledllname  modedefaultmode  handlenone  useerrnofalse  uselasterrorfalse  winmode 0 仅 windows  此 类的实例 即 加载 好 的 动态链接库 其中的 函数 使用 stdcall  调用 约定 并且 假定 返回 windows  指定 的 hresult  返回 码
 hresult  的 值 包含的 信息 说明 函数调用 成功 还是 失败 以及 额外 错误码
 如果 返回值 表示 失败 会自动 抛出 oserror  异常
 在3
3 版更改 以 前 是 引发 windowserror
windllname  modedefaultmode  handlenone  useerrnofalse  uselasterrorfalse  winmode 0 仅 windows  此 类的实例 即 加载 好 的 动态链接库 其中的 函数 使用 stdcall  调用 约定 并 假定 默认 返回 int 
 在 windows  ce  上 只能 使用 stdcall  调用 约定 为 了 方便 windll  和 oledll  在这个 平台上 都 使用标准 调用 约定
 调用 动态 库 导出 的 函数 之前 python  会 释放 global  interpreter  lock  并 在 调用 后 重新 获取
pydllname  modedefaultmode  handlenone  这个类 实例 的 行为与 cdll  类似 只 不 过 不 会 在 调用函数 的时候 释放 gil  锁 且 调用 结束 后 会 检查 python  错误码
 如果 错误码 被设置 会抛出 一个 python  异常
 所 以 它只 在 直接调用 python  c  接口 函数 的时候 有 用
 通过使用 至少 一个参数 共享库 的 路径名 调用 它们可以 实例化 所有这些 类
 也可以 传入一个 已 加载 的 动态链接库 作为 handler  参数 其他情况 会 调用 系统 底层 的 dlopen  或 loadlibrary  函数 将 库 加载 到 进程 并 获取 其 句柄
mode  可以指定 库 加载 方式
 详情 请参见 dlopen 3 手册 页
 在 windows  上 会 忽略 mode  在 posix  系统上 总是会 加上 rtldnow  且 无法 配置
useerrno  参数 如果设置 为 true  可以 启用 ctypes  的机制 通过 一种 安全 的 方法 获取 系统 的 errno  错误码
 ctypes  维护 了 一个线程 局部变量 它 是 系统 errno  的 一份 拷贝 如果 调用 了 使用 useerrnotrue  创建 的 外部函数 errno  的值会 与 ctypes  自己 拷贝 的 那 一份 进行 交换 函数 执行 完 后 立即 再 交换 一次
the  function  ctypes
geterrno  returns  the  value  of  the  ctypesprivate  copy  and  the  function  ctypes
seterrno  changes  the  ctypesprivate  copy  to  a  new  value  and  returns  the  former  value
uselasterror  参数 如果设置 为 true  可以在 windows  上 启用 相同 的 策略 它 是通过 windows  api  函数 getlasterror   和 setlasterror  管理 的
 ctypes
getlasterror  和 ctypes
setlasterror  可用于 获取 和 设置 ctypes  自己 维护 的 windows  错误码 拷贝
winmode  参数 用于在 windows  平台上 指定 库 的 加载 方式 因为 mode  会被忽略
 他 接受 任何 与 win 32 api  的 loadlibraryex  的 标志 兼容的 值 作为参数
 省略 时 默认 设置 使用 最 安全 的 dll  加载 的 标志 以避免 dll  劫 持 等 问题
 传入 dll  的 全 路径 是 保证 正确 加载 库 及其 依赖 最 安全 的 方法
 在3
8 版更改 增加了 winmode  参数
rtldglobal  用 于 mode  参数 的 标识 值
 在 此 标识 不可用 的 系统上 它 被定义为 整数0
defaultmode  加载 动态链接库 的 默认 模式
 在 osx 10
3 上 它 是 rtldglobal  其余 系统上 是 rtldlocal 
 这些 类的实例 没有 共 用 方法
 动态链接库 的 导出 函数 可以通过 属性 或者 索引 的方式 访问
 注意 通过 属性 的方式 访问 会 缓存 这个函数 因而 每次 访问 它 时返回 的 都 是 同 一个 对象
 另一 方面 通过 索引 访问 每次 都会 返回一个新的 对象 from  ctypes  import  cdll  libc  cdlllibc
time  true  libctime  libctime  false  还有 下面 这些 属性 可 用 他们 的 名称 以 下划线 开头 以避免 和 导出 函数 重 名 pydll
handle  用 于 访问 库 的 系统 句柄
name  传入 构造函数 的 库 名称
 共享库 也可以通 用 使用 一个 预 制 对象 来 加载 这种 对象 是 libraryloader  类的实例 具体 做法 或 是 通过调用 loadlibrary  方法 或 是通过 将 库 作为 加载器 实例 的 属性来 提取
libraryloaderdlltype  加载 共享库 的 类
 dlltype  应当为 cdll  pydll  windll  或 oledll  类型 之一
 getattr  具有 特殊 的 行为 它允许 通过将 一个 共享库 作为 库 加载器 实例 的 属性 进行 访问 来 加载 它
 加载 结果将 被 缓存 因此 重复 的 属性 访问 每 次 都会 返回 相同 的 库
 loadlibraryname  加载 一个 共享库 到 进程中 并将其 返回
 此方法 总是 返回一个新的 库 实例
 可用的 预 制 库 加载器 有 如 下 这些 ctypes
cdll  创建 cdll  实例
windll  仅限 windows  创建 windll  实例
oledll  仅限 windows  创建 oledll  实例
pydll  创建 pydll  实例
 要 直接访问 c  python  api  可以使用 一个 现 成 的 python  共享库 对象 ctypes
pythonapi  一个 pydll  的 实例 它 将 python  c  api  函数 作为 属性 公开
 请注意 所 有 这些函数 都应 返回 c  int  当然 这 也不 是 绝对 的因此 你必须 分配 正确 的 restype  属性 以 使用 这些函数
 引发一个 审计事件 ctypes
dlopen  附带参数 name
 引发一个 审计事件 ctypes
dlsym  附带参数 library  name
 引发一个 审计事件 ctypes
dlsymhandle  附带参数 handle  name
 外部函数
 正 如 之前 小节 的 说明 外部函数 可 作为 被 加载 共享库 的 属性 来访问
 用此方 式 创建 的 函数对象 默认 接受 任意 数量的 参数 接受 任意 ctypes  数据 实例 作为参数 并且 返回 库 加载器 所指定的 默认 结果 类型
 它们是 一个 私有 类的实例 class  ctypes
funcptr  c  可调用 外部函数 的 基类
 外部函数 的 实例 也是 兼容 c  的 数据类型 它们 代表 c  函数 指针
 此行为 可通过 对 外部函数 对象 的 特殊 属性 赋值 来 自定义
 restype  赋值为 一个 ctypes  类型 来指定 外部函数 的结果 类型
 使用 none  表 示 void  即 不 返回 任何 结果的 函数
 赋值为 一个 不 为 ctypes  类型 的可调用 python  对象 也是 可以 的 在此情 况下 函数 应 返回 c  int  该 可调用对象 将 附带 此 整数 被调用 以允许 进 一步 的 处理 或 错误 检测
 这种 用 法 已被弃用 为 了 更 灵活的 后续 处理 或 错误 检测 请使用 一个 ctypes  数据类型 作为 restype  并 将 errcheck  属性 赋值为 一个可调用对象
 argtypes  赋值为 一个 ctypes  类型 的 元组 来指定 函数 所 接受 的 参数 类型
 使用 stdcall  调用 规范 的 函数 只能 附带 与 此 元组 长度 相同 数量的 参数 进行调 用 使用 c  调用 规范 的 函数 还 可接受 额外的 未 指明 参数
 当 外部函数 被调用时 每个 实际 参数 都会被 传给 argtypes  元组中 条目 的 fromparam  类 方法 此方法 允许 将 实际 参数 适配 为 此 外部函数 所 接受 的 对象
 例如 argtypes  元组中 的 ccharp  条目 将 使用 ctypes  约定 规则 把 作为参数 传入的 字符串 转换为 字节串对象
 新增 现在可以 将 不 是 ctypes  类型 的 条目 放入 argtypes  但 每个 条目 都必须 具有 fromparam  方法 用 于 返回 可 作为参数 的 值 整数、 字符 串、 ctypes  实例
 这样就 允许 定义 可 将 自定义 对象 适配 为 函数 形参 的 适配 器
 errcheck  将 一个 python  函数 或其他 可调用对象 赋值给 此 属性
 该 可调用对象 将 附带 三个 及 以 上 的 参数 被调用
 callableresult  func  arguments  result  是 外部函数 返回 的结果 由 restype  属性 指明
 func  是 外部函数 对象 本身 这样就 允许 重新 使用 相同 的可调用对象 来 对 多个 函数 进行 检查 或 后续 处理
 arguments  是一个包含 最初 传递给 函数调用 的 形参 的 元组 这样就 允许 对 所 用 参数 的 行为 进行 特别 处理
 此 函数 所返回的 对象 将 会 由 外部函数 调用 返回 但它 还可以 在 外部函数 调 用 失败时 检查 结果 并 引发异常
exception  ctypes
argumenterror  此 异常 会 在 外部函数 无法 对 某个 传入 参数 执行 转换 时 被引发
 引发一个 审计事件 ctypes
sehexception  并 附带参数 code
 引发一个 审计事件 ctypes
callfunction  附带参数 funcpointerarguments
 函数 原型
 工具 函数
addressofobj  以 整数 形式返回 内存 缓冲区 地址
 obj  必须为一个 ctypes  类型的实例
 引发一个 审计事件 ctypes
addressof  附带参数 obj
alignmentobjortype  返回 一个 ctypes  类型 的 对齐 要求
 objortype  必须为一个 ctypes  类 型 或 实例
byrefobj  offset  返回 指向 obj  的 轻 量 指针 该对象 必须为一个 ctypes  类型的实例
 offset  默认值为 零 且 必须为一个 将 被添加到 内部 指针 值 的 整数
 byrefobj  offset  对应于 这 段 c  代码 char  obj  offset  返回的对象 只能 被用作 外部函数 调用 形参
 它 的 行为 类似于 pointerobj  但 构造 起来 要 快 很多
castobj  type  此 函数 类似于 c  的 强制转换 运算符
 它 返回 一个 type  的新实例 该 实 例 指向 与 obj  相同 的内存块
 type  必须为 指针类型 而 obj  必须 为 可以 被作为 指针 来 解读 的 对象
createstringbufferinitorsize  sizenone  此函数会 创建一个 可变的 字符 缓冲区
 返回的对象 是一个 cchar  的 ctypes  数组
 initorsize  必须是一个 指明 数组 大小 的 整数 或者是一个 将 被用来 初始 化 数组 条目 的 字节串对象
 如果 将 一个 字节串对象 指定 为 第一个参数 则 将 使 缓冲区大小 比 其 长度 多 一 项 以便 数组 的最后一 项 为 一个 nul  终结 符
 可以 传入一个 整数 作为 第二个 参数 以允许 在 不 使用 字节串 长度 的情况下 指定 数组 大小
 引发一个 审计事件 ctypes
createstringbuffer  附带参数 init  size
createunicodebufferinitorsize  sizenone  此函数会 创建一个 可变的 unicode  字符 缓冲区
 返回的对象 是一个 cwchar  的 ctypes  数组
 initorsize  必须是一个 指明 数组 大小 的 整数 或者是一个 将 被用来 初始 化 数组 条目 的 字符串
 如果 将 一个字符串 指定 为 第一个参数 则 将 使 缓冲区大小 比 其 长度 多 一 项 以 便 数组 的最后一 项 为 一个 nul  终结 符
 可以 传入一个 整数 作为 第二个 参数 以允许 在 不 使用 字符串 长度 的情况下 指定 数组 大小
 引发一个 审计事件 ctypes
createunicodebuffer  附带参数 init  size
dllcanunloadnow  仅限 windows  此 函数 是一个 允许 使用 ctypes  实现 进程 内 com  服务 的 钩子
 它 将 由 ctypes  扩展 dll  所 导出 的 dllcanunloadnow  函数来 调用
dllgetclassobject  仅限 windows  此 函数 是一个 允许 使用 ctypes  实现 进程 内 com  服务 的 钩子
 它 将 由 ctypes  扩展 dll  所 导出 的 dllgetclassobject  函数来 调用
findlibraryname  尝试 寻找 一个 库 并返回 路径 名称
 name  是 库 名称 并且 不带 任何 前缀 如 lib  以及 后缀 如
so
dylib  或 版本号 形式 与 posix  链接器 选项 l  所用的 一致
 如果 找不到 库 则返回 none
 确 切 的功能 取决于 系统
findmsvcrt  仅限 windows  返回 python  以及 扩展模块 所使用的 vc  运行时 库 的文件名
 如果 无法 确定 库 名称 则返回 none
 如果你需要 通过调用 freevoid  来 释放 内存 例如 某个 扩展模块 所 分 配 的内存 重要的 一点 是 你 应当使用 分配 内存 的 库 中的函数
formaterrorcode  仅限 windows  返回 错误码 code  的 文本 描述
 如果未指定 错误码 则 会 通过调用 windows  api  函数 getlasterror  来 获得 最新的 错误码
getlasterror  仅限 windows  返回 windows  在 调用 线程中 设置 的 最新 错误码
 此函数会 直接调用 windows  getlasterror  函数 它并不 返回 错误码 的 ctypes  私有 副本
geterrno  返回 调用 线程中 系统 errno  变量 的 ctypes  私有 副本 的当前 值
 引发一个 审计事件 ctypes
geterrno  不 附带 任何 参数
getlasterror  仅限 windows  返回 调用 线程中 系统 lasterror  变量 的 ctypes  私有 副本 的当前 值
 引发一个 审计事件 ctypes
getlasterror  不 附带 任何 参数
memmovedst  src  count  与 标准 c  memmove  库 函数 相同 将 count  个字节 从 src  拷贝 到 dst 
 dst  和 src  必须为 整数或 可 被转换为 指针 的 ctypes  实例
memsetdst  c  count  与 标准 c  memset  库 函数 相同 将 位于 地址 dst  的内存块 用 count  个 字节 的 c  值 填充
 dst  必须为 指定 地址的 整数或 ctypes  实例
pointertype  这 个 工厂函数 创建并返回 一个新的 ctypes  指针类型
 指针类型 会 被 缓存 并 在内部 重 用 因此 重复 调用 此 函数 耗 费 不 大
 type  必须为 ctypes  类型
pointerobj  此函数会 创建一个新的 指向 obj  的 指针 实例
 返回的对象 类型 为 pointertypeobj
 注意 如果你 只是 想 向 外部函数 调用 传递 一个 对象 指针 你 应当使用 更 为 快 速 的 byrefobj
resizeobj  size  此 函数 可 改变 obj  的 内部 内存 缓冲区大小 其 参数必须 为 ctypes  类型 的 实例
 没有可 能 将 缓冲区 设 为 小于 对象类型的 本机 大小 值 该值 由 sizeoftypeobj  给出 但 将 缓冲区 加 大 则 是 可能的
seterrnovalue  设置 调用 线程中 系统 errno  变量 的 ctypes  私有 副本 的当前 值 为 value  并返回 原 来 的 值
 引发一个 审计事件 ctypes
seterrno  附带参数 errno
setlasterrorvalue  仅限 windows  设置 调用 线程中 系统 lasterror  变量 的 ctypes  私有 副本 的当前 值 为 value  并返回 原 来 的 值
 引发一个 审计事件 ctypes
setlasterror  附带参数 error
sizeofobjortype  返回 ctypes  类型 或 实例 的内存 缓冲区 以字节 表示 的大小
 其 功能 与 c  sizeof  运算符 相同
stringataddress  size 1 此 函数返回 从 内存地址 address  开始 的 以 字节串 表示 的 c  字符串
 如果 指定了 size  则将其 用 作 长度 否则将 假定 字符串 以 零值 结尾
 引发一个 审计事件 ctypes
stringat  附带参数 address  size
winerrorcodenone  descrnone  仅限 windows  此 函数 可能是 ctypes  中 名 字 起 得 最 差 的 函数
 它 会创建一 个 oserror  的 实例
 如果未指定 code  则 会 调用 getlasterror  来确 定 错误码
 如果未指定 descr  则 会 调用 formaterror  来获取 错误 的 文本 描述
 在3
3 版更改 以 前 是 会创建一个 windowserror  的 实例
wstringataddress  size 1 此 函数返回 从 内存地址 address  开始 的 以 字符串表示 的 宽 字节 字符串
 如果指定了 size  则将其 用 作 字符串中的 字符 数量 否则将 假定 字符串 以 零值 结尾
 引发一个 审计事件 ctypes
wstringat  附带参数 address  size
 数据类型
cdata  这 个 非 公有 类 是所有 ctypes  数据类型 的 共同 基类
 另外 所有 ctypes  类 型的实例 都 包含一个 存放 c  兼容 数据 的内存块 该 内存块的 地址 可 由 addressof  辅助函数 返回
 还有一个 实例变量 被 公开 为 objects  此 变量 包含 其他 在 内存块 包含 指针 的情况下 需要 保持 存 活 的 python  对象
 ctypes  数据类型 的通用 方法 它们都 是 类 方法 严 谨 地说 它们是 metaclass  的 方法 frombuffersource  offset  此 方法返回一个 共享 source  对象 缓冲区 的 ctypes  实例
 source  对象 必须 支持 可 写 缓冲区接口
 可选的 offset  形参 指定 以字节 表示 的 源 缓冲区 内 偏移量 默认值为 零
 如果 源 缓冲区 不 够 大 则会引发 valueerror
 引发一个 审计事件 ctypes
cdatabuffer  附带参数 pointer  size  offset
 frombuffercopysource  offset  此方法 创建一个 ctypes  实例 从 source  对象 缓冲区 拷贝 缓冲区 该 对象 必须是 可读的
 可选的 offset  形参 指定 以字节 表示 的 源 缓冲区 内 偏移量 默认值为 零
 如果 源 缓冲区 不 够 大 则会引发 valueerror
 引发一个 审计事件 ctypes
cdatabuffer  附带参数 pointer  size  offset
 fromaddressaddress  此方法会 使用 address  所指定的 内存 返回 一个 ctypes  类型的实例 该参数 必须为一个 整数
 引发一个 审计事件 ctypes
cdata  附带参数 address
 fromparamobj  此方法会 将 obj  适配 为 一个 ctypes  类型
 它 调用时 会 在 当 该 类型 存 在 于 外部函数 的 argtypes  元组 时 传入 外部函数 调用 所使用的 实际 对象 它必须 返回 一个 可 被用作 函数调用 参数 的 对象
 所有 ctypes  数据类型 都 带有 这个类 方法 的 默认 实现 它 通常会 返回 obj  如果该 对象 是 此 类型的实例 的话
 某些 类型 也 能 接受 其他对象
 indlllibrary  name  此 方法返回一个 由 共享库 导出 的 ctypes  类型
 name  为 导出 数据 的 符 号 名称 library  为 所 加载 的 共享库
 ctypes  数据类型 的通用 实例变量 bbase  有 时 ctypes  数据 实例并 不 拥有 它们所 包含的 内存块 它们 只是 共享 了 某 个 基 对象 的部分 内存块
 bbase  只读 成员 是 拥有 内存块的 根 ctypes  对象
 bneedsfree  这 个 只读 变量 在 ctypes  数据 实例 自身 已 分配 了 内存块 时 为真值 否则为 假值
 objects  这 个 成员 或者 为 none  或者 为 一个包含 需要 保持 存 活 以 使 内存块的 内 存 保持 有效的 python  对象 的字典
 这个对象 只是 出 于 调试 目 的 而 对 外 公开 绝对 不 要 修改 此 字典 的内容
 基础 数据类型
simplecdata  这 个 非 公有 类 是所有 基本 ctypes  数据类型 的 基类
 它 在这里 被 提 及 是因为 它包含 基本 ctypes  数据类型 共 有 的 属性
 simplecdata  是 cdata  的子类 因此 继承 了 其 方法和属性
 非 指针 及 不包含 指针 的 ctypes  数据类 型 现在将 可以被 封存
 实例 拥有 一个 属性 value  这 个 属性 包含 实例 的 实际 值
 对 于 整数 和 指针类型 它是一个 整数 对 于 字符 类型 它是一个 单 字符 字符串 对象 或 字符串 对 于 字符 指针类型 它是一个 python  字节串对象 或 字符串
 当 从 ctypes  实例 提取 value  属性 时 通常 每次 会 返回一个新的 对象
 ctypes  并 没有 实现 原始 对象 返回 它 总是会 构造 一个新的 对象
 所有其他 ctypes  对象 实例 也 同样 如 此
 基本 数据类型 当 作为 外部函数 调用 结果 被 返回 或者 作为 结构 字段 成员 或 数组 项 被 提取 时 会 透明 地 转换为 原生 python  类型
 换句话说 如果 某个 外部函数 具有 ccharp  的 restype  你 将总是 得到 一个 python  字节串对象 而 不 是 一个 ccharp  实例
 基本 数据类型 的子类 并 没有 继续 此行为
 因此如果 一个 外部函数 的 restype  是 cvoidp  的一个子类 你 将 从 函数调用 得到 一个 该 子 类的实例
 当然 你可以通过 访问 value  属性 来获取 指针 的 值
 这些 是 基本 ctypes  数据类型 class  ctypes
cbyte  代表 c  signed  char  数据类型 并 将 值 解读为 一个小 整数
 该构造器接 受一个可选的整数 初始化器 不会执行溢出检查
cchar  代表 c  char  数据类型 并 将 值 解读为 单个字符
 该构造器接受一个可选 的 字符串 初始化器 字符串 的长度 必须 恰好 为 一个字符
ccharp  当 指向一个 以 零 为 结束 符的字符串 时 代表 c  char  数据类型
 对 于 通 用 字符 指针 来说 也可能 指向 二进制数据 必须 要使用 pointercchar
 该 构造器接受一个 整数 地址 或者一个 字节串对象
cdouble  代表 c  double  数据类型
 该构造器接受一个可选的 浮点数 初始化器
clongdouble  代表 c  long  double  数据类型
 该构造器接受一个可选的 浮点数 初始化 器
 在 sizeoflong  double  sizeofdouble  的平台上 它 是 cdouble  的一个别名
cfloat  代表 c  float  数据类型
 该构造器接受一个可选的 浮点数 初始化器
cint  代表 c  signed  int  数据类型
 该构造器接受一个可选的 整数 初始化器 不会执行溢出检查
 在 sizeofint  sizeoflong  的平台上 它 是 clong  的一个别名
cint 8 代表 c 8 位 signed  int  数据类型
 通常是 cbyte  的一个别名
cint 16 代表 c 16 位 signed  int  数据类型
 通常是 cshort  的一个别名
cint 32 代表 c 32 位 signed  int  数据类型
 通常是 cint  的一个别名
cint 64 代表 c 64 位 signed  int  数据类型
 通常是 clonglong  的一个别名
clong  代表 c  signed  long  数据类型
 该构造器接受一个可选的 整数 初始化器 不会执行溢出检查
clonglong  代表 c  signed  long  long  数据类型
 该构造器接受一个可选 的整数初始 化器 不会执行溢出检查
cshort  代表 c  signed  short  数据类型
 该构造器接受一个可选的 整数 初始化器 不会执行溢出检查
csizet  代表 c  sizet  数据类型
cssizet  代表 c  ssizet  数据类型
3
2 新版功能
cubyte  代表 c  unsigned  char  数据类型 它 将 值 解读为 一个小 整数
 该构造器 接受一个可选的 整数 初始化器 不会执行溢出检查
cuint  代表 c  unsigned  int  数据类型
 该构造器接受一个可选的 整数 初始化器 不会执行溢出检查
 在 sizeofint  sizeoflong  的平台上 它 是 culong  的一个别名
cuint 8 代表 c 8 位 unsigned  int  数据类型
 通常是 cubyte  的一个别名
cuint 16 代表 c 16 位 unsigned  int  数据类型
 通常是 cushort  的一个别名
cuint 32 代表 c 32 位 unsigned  int  数据类型
 通常是 cuint  的一个别名
cuint 64 代表 c 64 位 unsigned  int  数据类型
 通常是 culonglong  的 一个 别名
culong  代表 c  unsigned  long  数据类型
 该构造器接受一个可选的 整数 初始化 器 不会执行溢出检查
culonglong  代表 c  unsigned  long  long  数据类型
 该构造器接受一 个可选的整数初 始化器 不会执行溢出检查
cushort  代表 c  unsigned  short  数据类型
 该构造器接受一个可选的 整数 初始化 器 不会执行溢出检查
cvoidp  代表 c  void  类型
 该值 被 表示为 整数 形式
 该构造器接受一个可选 的 整数 初始化器
cwchar  代表 c  wchart  数据类型 并 将 值 解读为 一 单个字符 的 unicode  字符串
 该构造器接受一个可选的 字符串 初始化器 字符串 的长度 必须 恰好 为 一个 字符
cwcharp  代表 c  wchart  数据类型 它必须 为 指向 以 零 为 结束 符 的 宽 字符串 的 指 针
 该构造器接受一个 整数 地址 或者一个 字符串
cbool  代表 c  bool  数据类型 更 准确 地说 是 c 99 bool
 它 的 值 可以为 true  或 false  并且 该构造器接受 任何 具有 逻辑值 的 对象
hresult  windows  专属 代表一个 hresult  值 它包含 某个 函数 或 方法调用 的 成功 或 错误信息
pyobject  代表 c  pyobject  数据类型
 不带参数 地调用 此 构造器 将 创建一个 null  pyobject  指针
ctypes
wintypes  模块提供了 其他 许多 windows  专属的 数据类型 例如 hwnd  wparam  或 dword
 还 定义了 一些 有用的 结构体 例如 msg  或 rect
 结构化 数据类型
unionargs  kw  本机 字节序 的 联合 所对应的 抽象基类
bigendianstructureargs  kw  大 端 字节序 的 结构体 所对应的 抽象基类
littleendianstructureargs  kw  小 端 字节序 的 结构体 所对应的 抽象基类
 非 本机 字节序 的 结构体 不 能包含 指针类型 字段 或 任何其他 包含 指针类型 字段 的 数据类型
structureargs  kw  本机 字节序 的 结构体 所对应的 抽象基类
 实际 的 结构体 和 联合 类型 必须 通过 子类化 这些类型 之一 来创建 并且 至少 要 定义一个 fields  类变量
 ctypes  将 创建 descriptor  它允许 通 过 直接 属性 访问 来读取 和写入 字段
 这些 是 fields  一个 定义 结构体 字段 的 序列
 其中的 条目 必须为2 元组或3 元组
 元 组 的第一 项 是 字段 名称 第二 项 指明 字段 类型 它 可以是任何 ctypes  数 据类型
 对 于 整数 类型 字段 例如 cint  可以 给定 第三个 可 选项
 它 必须是一 个 定义 字段 比特位 宽度 的 小 正整数
 字段 名称 在 一个 结构体 或 联合 中 必须 唯一
 不 会 检查 这 个 唯一 性 但 当 名称 出现 重复 时 将 只有一个 字段 可 被访问
 可以在 定义 structure  子类 的 类 语句 之后 再 定义 fields  类 变 量 这 将 允许 创建 直接 或 间接 引用 其 自身 的 数据类型 class  liststructure  pass  list
 但是 fields  类变量 必须在 类型 第一次 被使用 创建 实例 调用 sizeof  等等 之前 进行 定义
 在 此 之后 对 fields  类变量 赋值 将会引发 attributeerror
 可以定义 结构体 类型 的子类 它们会 继承 基类 的 字段 再 加上 在 子类 中定义 的 任何 fields
 pack  一个可选的 小 整数 它允许 覆盖 实体 中 结构体 字段 的 对齐方 式
 当 fields  被赋值 时 必须 已经 定义了 pack  否则 它 将 没有 效果
 anonymous  一个可选的 序列 它 会 列出 未 命名 匿名 字段 的 名称
 当 fields  被赋值 时 必须 已经 定义了 anonymous  否则 它 将 没有 效果
 在 此 变量 中 列出的 字段 必须为 结构体 或 联合 类型 字段
 ctypes  将 在 结 构体 类型 中 创建 描述器 以允许 直接访问 嵌套 字段 而无需 创建 对应的 结构 体 或 联合 字段
 以下是 一个 示例 类型 windows  class  uunion  fields  lptdesc  pointertypedesc  lpadesc  pointerarraydesc  hreftype  hreftype  class  typedescstructure  anonymous  u  fields  u  u  vt  vartype  typedesc  结构体 描述了 一个 com  数据类型 vt  字段 指明 哪个 联合 字段 是有效的
 由 于 u  字段 被定义为 匿名 字段 现在可以 直接 从 typedesc  实例 访问 成员
 td
lptdesc  和 td
lptdesc  是 等价 的 但 前 者 速度 更快 因为它 不需要 创建 临时 的 联合 实例 td  typedesc  td
lptdesc  pointersometype  可以定义 结构体 的子类 它们会 继承 基类 的 字段
 如果 子 类定义 具有 单独的 fields  变量 在 其 中 指定 的 字段 会 被添加到 基类 的 字段 中
 结构体 和 联合 的 构造器 均可 接受 位置 和 关键字参数
 位置参数 用 于 按照 fields  中 的 出现 顺序 来 初始化 成员 字段
 构造器 中 的 关键字参数 会 被 解读为 属性 赋值 因此 它们将 以 相应的 名称 来 初始化 fields  或 为 不 存 在 于 fields  中 的 名称 创建新的 属性
 数组 与 指针
arrayargs  数组 的抽象基类
 创建 实际 数组 类型 的 推荐 方式是 通过将 任意 ctypes  类型 与 一个 正整数 相 乘
 作为 替代 方式 你也可以 子类化 这个类 型 并 定义 length  和 type  类变量
 数组 元素 可 使用标准 的 抽取 和 切片 方式来 读写 对 于 切 片 读取 结果 对象 本身 并非 一个 array
 length  一个 指明 数组中 元素 数量的 正整数
 超出 范围 的 抽取 会导致 indexerror
 该值 将 由 len  返回
 type  指明 数组中 每个元素 的 类型
 array  子类 构造器 可接受 位置参数 用来 按 顺序 初始化 元素
pointer  私有 对象 指针 的抽象基类
 实际 的 指针类型 是 通过调用 pointer  并附带 其 将 指向 的 类型 来创建 的 这 会 由 pointer  自动 完成
 如果一个 指针 指向 的 是 数组 则 其 元素 可 使用标准 的 抽取 和 切片 方式来 读写
 指针 对象 没有 长度 因此 len  将引发 typeerror
 抽取 负值 将 会 从 指针 之前 的内存 中读取 与 c  一样 并且 超出 范围 的 抽取 将 可能 因 非 法 访问 而 导致 崩 溃 视 你 的 运 气 而 定
 type  指明 所指向的 类型
 contents  返回 指针 所指向的 对象
 对 此 属性 赋值 会 使 指针 改 为 指向 所 赋值 的 对象
bisect  数组 二 分 查找 算法
 搜索 有 序列表
 上面的 bisect  函数 对 于 找到 插入 点 是 有用的 但 在 一般 的 搜索 任务 中 可能会 有 点 尴 尬
 下面5 个 函数 展示了 如何 将其转 变 成 有 序列 表中的 标准 查找 函数 def  indexa  x  locate  the  leftmost  value  exactly  equal  to  x  i  bisectlefta  x  if  i  lena  and  ai  x  return  i  raise  valueerror  def  findlta  x  find  rightmost  value  less  than  x  i  bisectlefta  x  if  i  return  ai 1 raise  valueerror  def  findlea  x  find  rightmost  value  less  than  or  equal  to  x  i  bisectrighta  x  if  i  return  ai 1 raise  valueerror  def  findgta  x  find  leftmost  value  greater  than  x  i  bisectrighta  x  if  i  lena  return  ai  raise  valueerror  def  findgea  x  find  leftmost  item  greater  than  or  equal  to  x  i  bisectlefta  x  if  i  lena  return  ai  raise  valueerror
 其他 示例
tkinterttk  tk  主题 部 件
 源代码 libtkinterttk
 参见 tk  widget  styling  support  一份 文档 介绍 tk  支持 的 主题
 使用 ttk
 开始 使用 ttk  导入模块 from  tkinter  import  ttk  重写 基础 tk  控件 导入 应 跟 随 tk  导入 from  tkinter  import  from  tkinter
 参见 converting  existing  applications  to  use  tile  widgets  a  monograph  using  tcl  terminology  about  differences  typically  encountered  when  moving  applications  to  use  the  new  widgets
ttk  控件
ttk  中 有18 种 部 件 其 中 十 二 种 已存在 于 tkinter  中 buttoncheckbutton  entry  frame  label  labelframe  menubuttonpanedwindow  radiobutton  scale  scrollbar  以及 spinbox
 另外 六 种 是 新增的 combobox  notebook  progressbar  separatorsizegrip  以及 treeview
 它们 全 都 是 widget  的子类
tk  代码 l 1 tkinter
labeltexttest  fgblack  bgwhitettk  代码 style  ttk
tlabel  有关 ttkstyling  的 更多信息请参阅 style  类 文档
 控件
widget  定义了 由 tk  带 主题 部 件 所支持的 标准 选项 和 方法 它们 不应该 被直接 实例化
 标准 选项
 所有 ttk  小 部 件 接受 以 下 选项 选项 描述 类 指定 窗口 类
 在 查询 选项 数据库中 窗口 的其他 选项 时 使用 该 类 确定 窗口 的 默认 绑定 标签 以及 选择 控件 的 默认 布局 和 样式
 此 选项 仅 为 只读 并且 只能 在 创建 窗口 时 指定
 光 标 指定 要 用 于 控件 的 鼠标 光 标
 如果设置 为 空字符串 默认值 则 为 父 控件 继承 光 标
 takefocus  确定 窗口 是否 在 键 盘 遍历 期间 接受 焦 点
 返回0 或1 返回 空字符串
 如 果 返 回0 则表示 在 键 盘 遍历 期间 应该 跳过 该 窗口
 如果为1 则表示 只要 可以 查 看 窗口 就 应该 接收 输入 焦 点
 并且 空字符串 意味着 遍历 脚 本 决定 是否 关 注 窗 口
 风格 可用于 指定 自定义 控件 样式

 可 滚动 控件 选项
 控件 支持 以 下 选项 使用 滚动 条 控制
 选项 描述 xscroll  命令 用 于 与 水 平 滚动 条 通 讯
 当 视图 在 控件 的 窗口 改变 控件 将 会 基 于 scroll  命令 生成 tcl  命令
 usually  this  option  consists  of  the  method  scrollbar
 this  will  cause  the  scrollbar  to  be  updated  whenever  the  view  in  the  window  changes
 yscroll  命令 用 于 与 垂 直 滚动 条 通 讯
 更多信息请参 考 上面的 信息

 标签 选项
 以 下 选项 支持 标签 按钮 已 及其他 类 按钮 的 控件
 选项 描述 文本 specifies  a  text  string  to  be  displayed  inside  the  widget
 文本 变量 specifies  a  name  whose  value  will  be  used  in  place  of  the  text  option  resource
 下划线 if  set  specifies  the  index 0 based  of  a  character  to  underline  in  the  text  string
 图片 specifies  an  image  to  display
 valid  values  are  text  只 显示 文本 image  只 显示 图片 top  bottom  left  right  分别 显示 图片 的上下 左 右 的 文本
 none  默认
 如果设置 显示 图片 否则 文本
 宽度 if  greater  than  zero  specifies  how  much  space  in  character  widths  to  allocate  for  the  text  label  if  less  than  zero  specifies  a  minimum  width
 兼容性 选项
 选项 描述 状 况 may  be  set  to  normal  or  disabled  to  control  the  disabled  state  bit
 控件 状态
 控件 状态 是 无 关 状态 标志 的 位 图
 标志 描述 活动 the  mouse  cursor  is  over  the  widget  and  pressing  a  mouse  button  will  cause  some  action  to  occur  禁用 在 程序 控制 下 控件 是 禁用 的 焦 点 控件 有 键 盘 焦 点 按 压 widget  is  being  pressed  选择 on  true  or  current  for  things  like  checkbuttons  and  radiobuttons  背景 windows  and  mac  have  a  notion  of  an  active  or  foreground  window
 the  background  state  is  set  for  widgets  in  a  background  window  and  cleared  for  those  in  the  foreground  window  只读 widget  should  not  allow  user  modification  alternate  a  widgetspecific  alternate  display  format  无效的 控件 的值是 无效的 a  state  specification  is  a  sequence  of  state  names  optionallyprefixed  with  an  exclamation  point  indicating  that  the  bit  is  off
ttkwidget
 组合 框
 选项
this  widget  accepts  the  following  specific  options  选项 描述 exportselection  boolean  value
 状 况 one  of  normal  readonly  or  disabled
 文本 变量 specifies  a  name  whose  value  is  linked  to  the  widget  value
 值 specifies  the  list  of  values  to  display  in  the  dropdown  listbox
 宽度 specifies  an  integer  value  indicating  the  desired  width  of  the  entry  window  in  averagesize  characters  of  the  widgets  font
 虚拟 事件
ttkcombobox
spinbox
 选项
this  widget  accepts  the  following  specific  options  选项 描述 从 float  value
 到 float  value
 增加 float  value
 值 sequence  of  string  or  float  values
 格式 string  value
 命令 python  callable
 虚拟 事件
ttkspinbox
 笔 记 本
 选项
this  widget  accepts  the  following  specific  options  选项 描述 height  if  present  and  greater  than  zero  specifies  the  desired  height  of  the  pane  area  not  including  internal  padding  or  tabs
 宽度 if  present  and  greater  than  zero  specified  the  desired  width  of  the  pane  area  not  including  internal  padding
tab  选项
there  are  also  specific  options  for  tabs  选项 描述 状 况 either  normal  disabled  or  hidden
 文本 specifies  a  text  to  be  displayed  in  the  tab
 图片 specifies  an  image  to  display  in  the  tab
 下划线 specifies  the  index 0 based  of  a  character  to  underline  in  the  text  string
tab  identifiers
virtual  events
ttknotebook
progressbar
 选项
this  widget  accepts  the  following  specific  options  选项 描述 orient  one  of  horizontal  or  vertical
 模式 one  of  determinate  or  indeterminate
 值 the  current  value  of  the  progress  bar
ttkprogressbar
separator
 选项
this  widget  accepts  the  following  specific  option  选项 描述 orient  one  of  horizontal  or  vertical
sizegrip
platformspecific  notes
bugs
treeview
 选项
this  widget  accepts  the  following  specific  options  选项 描述 columns  a  list  of  column  identifiers  specifying  the  number  of  columns  and  their  names
item  options
 选项 描述 文本 the  textual  label  to  display  for  the  item
 图片 a  tk  image  displayed  to  the  left  of  the  label
 值 the  list  of  values  associated  with  the  item
tag  options
the  following  options  may  be  specified  on  tags  选项 描述 foreground  specifies  the  text  foreground  color
 背景 specifies  the  cell  or  item  background  color
 图片 specifies  the  item  image  in  case  the  items  image  option  is  empty
column  identifiers
 注释 items  option  values  may  be  displayed  in  a  different  order  than  the  order  in  which  they  are  stored
virtual  events
 event  描述 treeviewselect  generated  whenever  the  selection  changes
ttktreeview
 stretch  truefalse  指明 列 宽度 是否 应该 在 部 件 大小 被改变 时 进行 相应的 调整
 width  width  以 像 素 表示 的 列 宽度
 要 配置 树 的 列 则 调用此方法 并 附带参数 column 0 deleteitems  delete  all  specified  items  and  all  their  descendants
 在3
8 版更改 selection  no  longer  takes  arguments
 for  changing  the  selection  state  use  the  following  selection  methods
 在3
6 版更改 items  can  be  passed  as  separate  arguments  not  just  as  a  single  tuple
 在3
6 版更改 items  can  be  passed  as  separate  arguments  not  just  as  a  single  tuple
 在3
6 版更改 items  can  be  passed  as  separate  arguments  not  just  as  a  single  tuple
 在3
6 版更改 items  can  be  passed  as  separate  arguments  not  just  as  a  single  tuple
ttk  styling
 参见 tcl 2004 conference  presentation  this  document  explains  how  the  theme  engine  worksclass  tkinter
layouts
tk  图形 用户界面 gui
textwrap  文本 自动换行 与 填充
 源代码 libtextwrap
pytextwrap  模块 提供了一些 快捷 函数 以及可 以 完成 所有 工作 的 类 textwrapper
 如果你 只是 要 对 一 两个 文本 字符串 进行 自动换行 或 填充 快捷 函数 应该 就 够 用 了 否则 的话 你应该 使用 textwrapper  的 实例 来 提高 效率
wraptext  width 70 kwargs  对 text  字符串 中 的 单独 段落 自动换行 以 使 每 行 长度 最多 为 width  个 字符
 返回 由 输出 行 组成的列表 行 尾 不带 换行符
 可选的 关键字参数 对应于 textwrapper  的 实例属性 具体 文档 见 下
 width  默认为70
 请参阅 textwrapper
wrap  方法 了解有关 wrap  行为 的详细信息
filltext  width 70 kwargs  对 text  中 的 单独 段落 自动换行 并返回 一个包含 被 自动换行 段落 的 单独 字符串
 fill  是 以 下 语句 的 快 捷方式 n
 特别 要 说明 的 是 fill  接受 与 wrap  完全 相同 的 关键字参数
shortentext  width  kwargs  折叠 并 截 短 给定的 text  以 符合 给定的 width
 首先 将 折叠 text  中 的空格 所有 连续 空格 替换 为单个 空格
 如果 结果 能 适合 width  则将其 返回
 否则将 丢弃 足够 数量的 末尾 单词 以 使得 剩余 单词 加 placeholder  能 适合 width  textwrap
 可选的 关键字参数 对应于 textwrapper  的 实际 属性 具体 见 下文
 请注 意 文本 在 被 传入 textwrapper  的 fill  函数 之前 会 被 折叠 因此 改变 tabsize  expandtabs  dropwhitespace  和 replacewhitespace  的值将 没有任何 效果
3
4 新版功能
dedenttext  移除 text  中 每 一行的 任何 相同 前缀 空白符
 这 可以用来 清除 三 重 引号 字符串 行 左侧 空格 而 仍然 在 源码 中显示 为 缩进 格 式
 请注意 制表符 和 空格符 都 被视为 是 空白符 但它们 并 不 相等 以 下 两 行 hello  和 thello  不 会被视为 具有相同的 前缀 空白符
 只包含 空白符 的 行 会 在 输入 时 被忽略 并 在 输出 时 被 标准 化 为单个 换行符
 例如 def  test  end  first  line  with  to  avoid  the  empty  line  s  hello  world  printreprs  prints  hellon  worldn  printreprdedents  prints  hellon  worldntextwrap
indenttext  prefix  predicatenone  将 prefix  添加到 text  中 选 定 行 的开头
 通过调用 text
splitlinestrue  来 对 行 进行 拆分
 默认情况下 prefix  会 被添加到 所有 不 是 只 由 空白符 包括 任何 行 结束 符 组成的 行
 例如 s  hellonn  nworld  indents  hellonn  n  world  可选的 predicate  参数 可用来 控制 哪些 行 要 缩进
 例如 可以 很容易 地 为 空行 或 只有 空白符 的 行 添加 prefix  printindents  lambda  line  true  hello  world 3
3 新版功能
wrap  fill  和 shorten  的作用 方式 为 创建一个 textwrapper  实例并 在 其 上调用 单个 方法
 该实例 不会被 重 用 因此 对 于 要使用 wrap  和 或 fill  来处理 许多 文本 字符串 的应用 来说 创建 你自己的 textwrapper  对象 可能会 更 有 效率
 文本 最好 在 空白符 位置 自动换行 包括 带 连 字符 单词 的 连 字符 之后 长 单词 仅 在必要时 会 被 拆分 除非 textwrapper
breaklongwords  被设为 假值
textwrapperkwargs  textwrapper  构造器接受 多个 可选的 关键字参数
 每个 关键字参数 对 应 一 个 实例属性 比如 说 wrapper  textwrapperinitialindent  就 相当于 wrapper  textwrapper  wrapper
initialindent  你可以 多次 重 用 相同 的 textwrapper  对象 并且 你也可以 在 使用 期间 通过 直接 向 实例属性 赋值 来 修改 它 的 任何 选项
 textwrapper  的 实例属性 以及 构造器 的 关键字参数 如下所示 width  默认70 自动换行 的最大 行 长度
 只要 输入 文本 中没有 长 于 width  的 单个 单词 textwrapper  就能 保证 没有 长 于 width  个 字 符 的 输出 行
 expandtabs  默认 true  如果 为真值则 text  中所有 的 制表符 将 使用 text  的 expandtabs  方法 扩展 为 空格符
 tabsize  默认8 如果 expandtabs  为真值则 text  中所有 的 制表符 将 扩展 为零 个或多个 空格 具体 取决于 当前 列 位置 和 给定的 制表 宽度
3
3 新版功能
 replacewhitespace  default  true  如果 为真值 在 制表符 扩展 之后、 自动换行 之前 wrap  方法 将 把 每个 空白字符 都 替换 为单个 空格
 会 被替换 的 空白字 符 如 下 制表 换行 垂 直 制表 进 纸 和 回 车 tnvfr
 注解 如果 expandtabs  为假值 且 replacewhitespace  为真值 每个 制表符 将 被替换为 单 个空格 这 与 制表符 扩展 是 不 一样的
 注解 如果 replacewhitespace  为假值 在 一行的 中 间 有可能 出现 换行符 并 导致 怪 异 的 输出
 因此 文本 应当使用 str
splitlines  或 类似 方法 拆分 为 段落 并 分别 进行 自动换行
 dropwhitespace  默认 true  如果 为真值 每一 行 开头 和 末尾 的 空白字符 在 包装 之 后、 缩进 之前 会 被丢弃
 但是 段落 开头的 空白字符 如果 后面 不带 任何 非 空白字符 则 不会被 丢弃
 如果 被丢弃 的 空白字符 占 据 了 一个 整 行 则 该 整 行 将 被丢弃
 initialindent  默认 将 被添加到 被 自动换行 输出 内容的 第一行 的 字符串
 其 长 度 会 被 计 入 第一行 的长度
 空字符串 不会被 缩进
 subsequentindent  default  将 被添加到 被 自动换行 输出 内容 除 第一行 外 的 所有 行 的 字符串
 其 长度 会 被 计 入 除 行 一 行 外 的 所有 行 的长度
 fixsentenceendings  默认 false  如果 为真值 textwrapper  将 尝试 检测 句 子 结尾 并 确 保 句 子 间 总是 以 恰好 两个 空格符 分隔
 对 于 使用 等 宽 字 体 的 文本 来说 通 常 都 需要 这样
 但是 句 子 检测 算法 并 不 完 美 它 假定 句 子 结尾 是一个 小写字母 加 字符
 或 中的一个 并 可能 带有 字符 或 最后 以 一个 空格 结束
 此 算法的 问题 之一 是 它 无法 区 分 以 下 文本 中 的 dr

 和 以 下 文本 中 的 spot

 fixsentenceendings  默认 为假值
 由 于 句 子 检测 算法 依赖于 string
lowercase  来确定 小写字母 以及 约定 在 句 点 后 使用 两 个空格 来 分隔 处于 同 一行的 句 子 因此 只 适用于 英 语 文本
 breaklongwords  默认 true  如果 为真值则 长度 超过 width  的单词 将 被 分开 以 保 证 行 的长度 不 会 超过 width
 如果 为假值 超 长 单词 不会被 分开 因 而 某些 行 的长度 可能会 超过 width
 超 长 单词 将 被 单独 作为一 行 以 尽 量 减少 超出 width  的 情况
 breakonhyphens  默认 true  如果 为真值 将根据 英 语 的 惯 例 首选 在 空白符 和 复合 词 的 连 字符 之后 自动换行
 如果 为假值 则 只有 空白符 会被视为 合适的 潜 在 断 行 位置 但 如果你 确实 不希望 出现 分开 的单词 则 你必须 将 breaklongwords  设 为假值
 之前版本 的 默认行为 总是 允许 分开 带有 连 字符 的单词
 maxlines  默认 none  如果不 为 none  则 输出 内容 将 最多 包含 maxlines  行 并 使 placeholder  出现在 输出 内容的 末尾
3
4 新版功能
 placeholder  默认
 该 文本 将 在 输出 文本 被 截 短 时 出现在 文本 末尾
3
4 新版功能
 textwrapper  还 提供了一些 公有 方法 类似于 模块层级 的便捷 函数 wraptext  对 text  字符串 中 的 单独 段落 自动换行 以 使 每 行 长度 最多 为 width  个 字符
 所有 自动换行 选项 均 获取 自 textwrapper  实例 的 实 例属性
 返回 由 输出 行 组成的列表 行 尾 不带 换行符
 如果 自动换行 输 出 结果 没有任何 内容 则返回 空列表
 filltext  对 text  中 的 单独 段落 自动换行 并 返回包含 被 自动换行 段落 的 单独 字符 串
pkgutil  包 扩展 工具
 源代码 libpkgutil
py  该模块 为 导入系统 提供了 工具 尤其 是 在 包 支持 方面
moduleinfomodulefinder  name  ispkg  一个包含 模块 信息 的 简短 摘要 的 命名元组
3
6 新版功能
3
3 版后已移除 this  emulation  is  no  longer  needed  as  the  standard  import  mechanism  is  now  fully  pep 302 compliant  and  available  in  importlib
3
3 版后已移除 this  emulation  is  no  longer  needed  as  the  standard  import  mechanism  is  now  fully  pep 302 compliant  and  available  in  importlib
 在3
3 版更改 updated  to  be  based  directly  on  importlib  rather  than  relying  on  the  package  internal  pep 302 import  emulation
 在3
4 版更改 updated  to  be  based  on  pep 451 pkgutil
 在3
3 版更改 updated  to  be  based  directly  on  importlib  rather  than  relying  on  the  package  internal  pep 302 import  emulation
 在3
3 版更改 updated  to  be  based  directly  on  importlib  rather  than  relying  on  the  package  internal  pep 302 import  emulation
 在3
4 版更改 updated  to  be  based  on  pep 451 pkgutil
 在3
3 版更改 updated  to  be  based  directly  on  importlib  rather  than  relying  on  the  package  internal  pep 302 import  emulation
 注解 only  works  for  a  finder  which  defines  an  itermodules  method
 在3
3 版更改 updated  to  be  based  directly  on  importlib  rather  than  relying  on  the  package  internal  pep 302 import  emulation
 例如 list  all  modules  python  can  access  walkpackages  list  all  submodules  of  ctypes  walkpackagesctypes
 注解 only  works  for  a  finder  which  defines  an  itermodules  method
 在3
3 版更改 updated  to  be  based  directly  on  importlib  rather  than  relying  on  the  package  internal  pep 302 import  emulation
getdatapackage  resource  从 包 中 获取一个 资源
3
9 新版功能
 分发 python  模块
 电子邮 箱 distutilssigpython
org  作为一个 流行的 开源 开发 项目 python  拥有 一个 活 跃 的 贡献 者 和 用户 支持 社 区 这些 社 区 也可以 让 他们 的 软件 可 供 其他 python  开发人员 在 开源 许可 条 款 下 使用
 这允许 python  用户 有效 地 共享 和协 作 从 其他 人 已经 创建 的解决方案 中 受 益 于 常见 有 时 甚至 是 罕 见 的 问题 以及 可以提供 他们 自己 的解决方案
 本 指南 涵盖 了 分发 部分 的 流程
 有关 安装 其他 python  项目的 指南 请参阅 安装 指南
 注解 对 于 企 业 和其他 机 构 用户 请注意 许多 组织 都 有自己的 政 策 来 使用 和 贡献 开源 软件
 在 使用 python  提供的 分发 和 安装 工具 时 请 考虑 这些 政 策
 关键 术 语
 开源 许可 与 协 作
 在 世界 上 大多数 地方 软件 自动 受 版权 保护
 这意味着 其他 开发人员 需要 明确 的 权限 来 复制 使用 修改 和 重新 分发 软件
 开源 许可 是一种 以 相对 一致 的方式 明确 授 予 此 类 权限 的方式 允许 开发人员 通过 为 各种 问题 免 费 提供 通 用 解决方案 来 有效 地 共享 和协 作
 这使得 许多 开发人员 可以将 更多 时间 用 于 关 注 他们 特定 情况 相对 独 特 的 问题
python  提供的 分发 工具 旨在 使 开发人员 选择 开源 时可以 合理 地 直接 将 其 自己的 贡献 回 馈 到 该 公共 软件 池
 无论 该 软件 是否 作为 开源 软件 发布 相同 的 分发 工具 也 可用于 在 组织 内 分发 软件
 安装 工具
 标准库 不包括 支持 现 代 python  打包 标准 的 构建 工具 因为 核心 开发 团队 已经 发 现 即使 在 旧版本 的 python  上 使用 一致 工作 的 标准 工具 也 很重要
 可以通过在 命令行 调用 pip  模块 来 安装 当前 推荐的 构建和 分发 工具 python  m  pip  install  setuptools  wheel  twine  注解 对 于 posix  用户 包括 mac  os  x  和 linux  用户 这些 说明 假定 使用 virtual  environment 
 对 于 windows  用户 这些 说明 假定 在 安装 python  时 选择 了 调整 系统 path  环境变量 的 选项
python  打 包用户指南 包含 有关 currently  recommended  tools  的更多 详细信息
 阅读 python  包用户指南
python  包装 用户指南 介绍了 创建 和 发布 项目 所 涉及 的 各个 关键 步骤 和 元素 项目的 结构 项目的 构建 与 打包 上 传 项目 到 python  packaging  index  the 
 我 该 如何？
 这 是一些 常见 任务 的 快速 解 答 或 相关 链接
 为 我 的项目 选择 一个 名 字？
 这 不 是一个简单的 主题 但 这里 有一些 提示 检查 python  packaging  index  以 查看 该名称 是否 已被 使用 检查 流行的 托 管 网 站 如 githubbitbucket  等等 看 是否 已 有 一个 该名称 的 项目 检查 您 正 在 考虑 的 名称 在 网络 搜索 中出现的 内容 避免 使用 特别 常见的 单词 尤其 是 具有 多重 含义 的单词 因为它们 会 使 用户 在 搜索 时 难以 找到 您 的 软件
 创建 和 分发 二进制 扩展？
 这 实际上是 一个 非常 复杂的 主题 根据 您 的 目标 可以提供 各种 替代 方案
 有关 更多信息 和 建议 请参阅 python  打包 指南
 参见 python  封装 使用 指南 二进制 扩展
 安装 python  模块
 电子邮 箱 distutilssigpython
org  作为一个 流行的 开源 开发 项目 python  拥有 一个 活 跃 的 贡献 者 和 用户 支持 社 区 这些 社 区 也可以 让 他们 的 软件 可 供 其他 python  开发人员 在 开源 许可 条 款 下 使用
 这允许 python  用户 有效 地 共享 和协 作 从 其他 人 已经 创建 的解决方案 中 受 益 于 常见 有 时 甚至 是 罕 见 的 问题 以及 可以提供 他们 自己 的解决方案
 本 指南 涵盖 了 分发 部分 的 流程
 有关 安装 其他 python  项目的 指南 请参阅 安装 指南
 注解 对 于 企 业 和其他 机 构 用户 请注意 许多 组织 都 有自己的 政 策 来 使用 和 贡献 开源 软件
 在 使用 python  提供的 分发 和 安装 工具 时 请 考虑 这些 政 策
 关键 术 语
 pip  是 首选 的 安装程序
 从 python 3
4 开始 它 默认 包含在 python  二进制 安 装程序中
 virtual  environment  是一种 半 隔 离 的 python  环境 允许 为 特定的 应用 安 装 各 自 的 包 而不是 安装到 整个 系统
 venv  是 创建虚拟环境 的 标准 工具 从 python 3
3 开始 成为 python  的 组 成部分
 从 python 3
4 开始 它 会 默认 安装 pip  到 所创建的 全部 虚拟环 境
 virtualenv  是 venv  的 第三方 替代 及其 前 身
 它允许 在 python 3
4 之前 的版本中 使用 虚拟环境 那些 版本 或 是 完全不 提供 venv  或 是 不 会自动 安装 pip  到 所创建的 虚拟环境
 python  packaging  index  是一个 由 python  用户 向 其他 用户 发布 开源 许可 软 件包的 公共 仓 库
 python  packaging  authority  是 负责 标准 打包 工具 以及 相关 元数据 和 文件格 式 标准 维护 与 改进的 开发人员 和 文档 作者 团队
 他们 基于 github  和 bitbucket  这两个 平台 维护 着 各种 工具、 文档 和 问题 追踪 系统
 distutils  是 最初 的 构建和 分发 系统 于1998 年 首次 加入 python  标准库
 虽然 直接使用 distutils  的方式 已被 淘 汰 它 仍然 是 当前 打包 和 分发 架 构 的基础 而且 它 不仅 仍然 是 标准库 的一部分 这 个 名称 还 以 其他方 式 存 在 例如 用 于 协 调 python  打包 标准 开发 流程 的 邮件列表 就 以 此 命名
 在3
5 版更改 现 在 推荐 使用 venv  来 创建虚拟环境
 参见 python  软件 包用户指南 创建 和 使用 虚拟环境
 基本 使用
 标准 打包 工具 完全 是 针对 命令行 使用 方式来 设计 的
 以 下 命令 将 从 python  packaging  index  安装 一个 模块 的 最新版本 及其 依赖 项 python  m  pip  install  somepackage  注解 对 于 posix  用户 包括 mac  os  x  和 linux  用户 本 指南 中 的 示例 假定 使用 了 virtual  environment
 对 于 windows  用户 本 指南 中 的 示例 假定 在 安 装 python  时 选择 了 修改 系统 path  环境变量
 在命令行中 指定一个 准确 或 最小 版本 也是 可以 的
 当使用 比较 运算符 例如 或其他 某些 可以被 终端 所 解析 的 特殊 字符 时 包 名称 与 版本号 应当 用 双引号 括 起来 python  m  pip  install  somepackage 1
4 minimum  version  通常 如果一个 匹配 的 模块 已安装 尝试 再次 安装 将不会 有任何 效果
 要 升级 现有 模块 必须 显式地 发出 请求 python  m  pip  install  upgrade  somepackage  更多 有关 pip  及其 功能 的 信息 和 资源 可以在 python  软件 包用户指南 中找到
 虚拟环境 的 创建 可 使用 venv  模块 来完成
 向 已 激活 虚拟环境 安装 软件包 可 使用 上 文 所 介绍 的 命令
 参见 python  软件 包用户指南 安装 python  分发 包
 我 应 如何？
 这 是一些 常见 任务 的 快速 解 答 或 相关 链接
 在 python 34 之前的 python  版本中 安装 pip ？
python  捆 绑 pip  是 从 python 3
4 才 开始 的
 对 于 更早 的 版本 pip  需要 引 导 安装 bootstrapped  具体 说明 参见 python  软件 包用户指南
 参见 python  软件 包用户指南 安装 软件包的 前 提 要求
 只 为当前 用户 安装 软件包？
 将 user  选项 传入 python  m  pip  install  将 只 为当前 用户 而非 为 系统 中的所有 用户 安装 软件包
 安装 科学 计算 类 python  软件包？
 许多 科学 计算 类 python  软件包 都有 复杂的 二进制 编译 文件 依赖 直接使用 pip  安装 目前 并 不太 容易
 在当前 情况下 通过 其他方 式 而非 尝试 用 pip  安装 这些 软件包 对 用户 来说 通常会 更容易
 参见 python  软件 包用户指南 安装 科学 计算 类 软件包
 使用 并 行 安装 的多个 python  版本？
 在 linux  mac  os  x  以 及其他 posix  系统中 使用 带 版本号 的 python  命令 配合 m  开 关 选项 来 运行 特定 版本 的 pip  python 2 m  pip  install  somepackage  default  python 2 python 2
4 也可以使用 带 特定 版本号 的 pip  命令
 在 windows  中 使用 py  python  启动器 命令 配合 m  开 关 选项 py 2 m  pip  install  somepackage  default  python 2 py 2
 常见的 安装 问题
 在 linux  的 系统 python  版本上 安装
linux  系统 通常会 将 某个 python  版本 作为 发行版 的一部分 包含在 内
 将 软件包 安装到 这 个 python  版本上 需要 系统 root  权限 并 可能会 干 扰 到 系统 包 管理器 和其他 系统 组件 的 运 作 如果 这些 组件 在 使用 pip  时 被 意外 升级 的话
 在 这样的 系统上 通过 pip  安装 软件包 通常 最好 是 使用 虚拟环境 或 分 用户 安装
 未 安装 pip
 安装 二进制 编译 扩展
python  通常 非常 依赖 基于 源代码 的 发布 方式 也就是 期望 最终 用户 在 安装 过程中 使用 源码 来 编译 生成 扩展模块
 随着 对 二进制 码 wheel  格式 支持 的 引入 以及 通过 python  packaging  index  至少 发布 windows  和 mac  os  x  版 的 wheel  文件 预 计 此 问题 将 逐 步 得到 解决 因为 用户 将 能够 更 频 繁 地 安装 预 编译 扩展 而不再 需要 自己 编译 它们
 某些 用来 安装 科学 计算 类 软件包 的解决方案 对 于 尚未 提供 预 编译 wheel  文件 的 那些 扩展模块 来说 也 有 助 于 用户 在 无需 进行 本机 编译 的情况下 获取 二进制 码 扩展模块
 参见 python  软件 包用户指南 二进制 码 扩展
 命令行 与 环境
cpython  解析器 会 扫描 命令行 与 环境 用于获取 各种 设置 信息
cpython  implementation  detail  其他 实现 的 命令行 方案 可能 有 所 不同
 更多 相关 资源 请参阅 其他 实现
 命令行
 对 python  发起调用 时 你可以 指定 以 下 的 任意 选项 python  bbdehiioqssuvvwx  c  command  m  modulename  script  args  当然 最常见的 用 例 就是 简单地 启动 执行 一个 脚本 python  myscript
 接口 选项
 通 用 选项
hhelp  打印 全部 命令行选项 的 简短 描述
vversion  打印 python  版本号 并 退出
 示例 输出 信息 如 下 python 3
0 b 2 如果 重复 给出 则 打印 有关 构建 的更多信息 例如 python 3
0201610053
6 新版功能 vv  选项
 其他 选项
 不 应当使用 的 选项
j  保留 给 jython  使用
 环境变量
 调试模式 变量
 设置 这些 变量 只会 在 python  的 调试 版本中 产生 影响
pythonthreaddebug  如果设置 python  将打印 线程 调试 信息
 需要使用 withpydebug  构建 选项 配置 python
pythondumprefs  如果设置 python  在 关闭 解释器 及 转 储 对象 和 引用计数 后 仍 将 保持 活动
 需要使用 withtracerefs  构建 选项 配置 python
 在 windows  上 使用 python
 本文档 旨在 概述 在 microsoft  windows  上 使用 python  时 应 了解 的 特定于 windows  的 行为
 与 大多数 unix  系统 和 服务 不同 windows  系统 没有 预 安装 python
 多 年 来 cpython  团队 已经 编译 了 每 一个 发行版 的 windows  安装程序 msi  包 已 便 windows  用户 下载 和 安装
 这些 安装程序 主要 用 于 每个 用户 单独 安装 python  时 添加 核心 解释器 和 库
 安装程序 还可以 为 一 台 机器 的 所有 用户 安装 并且 可以为 应用程序 本地 分发 提供 单独的 zip  文件
 如 pep 11 中 所述 python  仅 支持 微 软 产 品 支持 生 命 周期 内 的 windows  版本
 这意味着 python 3
9 支持 windows  vista  和 更新 版本
 如果需要 windowsxp  支持 请 安装 python 3
windows  提供了 许多 不同的 安装程序 每个 安装程序 都有一 定 的 优点 和 缺 点
 完整 安装程序 内 含所有 组件 对 于 使用 python  进行 任何 类型 项目的 开发人员 而言 它 是 最佳 选择
microsoft  store  包 是一个简单的 python  安装 适用于 运行 脚本 和 包 以及 使用 idle  或其他 开发 环境
 它需要 windows 10 但 可以 安全地 安装 而不会 破坏 其他 程序
 它 还提供了 许多 方便的 命令 来 启动 python  及其 工具
nuget
org  安装包 是用于 持续 集成 系统 的 轻 量 级 安装
 它 可用于 构建 python  包 或 运行 脚本 但不 可 更新 且没有 用户界面 工具
 可 嵌入 的 包 是 python  的最小 安装包 适合 嵌入到 更大 的 应用程序中
 完整 安装程序
 安装 步骤
 四个 python 3
9 安装程序 可 供 下载32 位 和64 位 版本 的 各 有两个
 webinstaller  网络 安装包 是一个 小 的 初始化 工具 它 将 在 安装 过程中 根据 需要 自动 下载 所需的 组件
 offline  installer  离 线 安装包 内 含 默认 安装 所需的 组件 可 选择 功能 仍 需要 internet  连接 下载
 请参阅 免 下载 安装 以 了解 在 安装 过程中 避免 下载 的 其他方法
 启动 安装程序 后 可以选择 以 下 两个 选项 之一 图片 如果 选择 install  now  立即 安装 您 不 需要 成为 管理 员 除非 需要 对 c  运行 库 进行 系统 更新 或者 为所有 用 户 安装 适用于 windows  的 python  启动器 python  将 安装到 您 的 用户 目录中 适用于 windows  的 python  启动器 将根据 第一 页 底 部 的 选项 安装 将 安装 标准库 测试 套件 启动器 和 pip  如果 选择 将 安装 目录 将 添加到 path  快 捷方式 仅 对 当前 用户可 见 选择 自定义 安装 将 允许 您 选择 要 安装 的功能、 安装 位置、 其他 选项 或 安装 后 的 操作
 如果要 安装 调试 符号 或 二进制文件 您 需要使用 此 选项
 如 要 为 全部 用户 安装 应 选择 自定义 安装
 在这种情况下 您 可能需要 提供 管理 凭据 或 批 准 python  将 安装到 program  files  目录中 适用于 windows  的 python  启动器 将 安装到 windows  目录中 安装 期间 可以选择 可选 功能 标准库 可以 预 编译 为 字节码 如果 选 中 安装 目录 将 添加到 系统 path  快 捷方式 所有 用户可 用
 删除 maxpath  限制
 历史 上 windows  的 路径 长度 限制为260 个 字符
 这意味着 长 于 此 的 路径 将 无法 解决 并 导致 错误
 在 最新版本的 windows  中 此 限制 可 被 扩展 到 大 约32000 个 字符
 但 需要 让 管理 员 激活 启用 win 32 长 路径 组 策略 或 在 注册表 键 hkeylocalmachinesystemcurrentcontrolsetcontrolfilesystem  中 设置 longpathsenabled  为1
 这允许 open  函数 os  模块 和 大多数 其他 路径 功能 接受 并返回 长度 超过260 个字符的 路径
 更改 上述 选项 后 无需 进一步 配置
 在3
6 版更改 python  中 启用 了 对 长 路径 的 支持
 无 ui  安装
 免 下载 安装
 由 于 下载 的 初始 安装包 中 未 包含 python  的 某些 可选 功能 如果 选择 安装 这些 功能 可能需要 internet  连接
 为 了 避免 这种 需要 可以 按 需 下载 所 有可能的 组件 以 创建一个 完整的 布局 该 布局 将不再 需要 internet  连接 而 不 管 所 选择 的 特性 是什么
 请注意此 下载 可能 比 要求 的 要 大 但是如果 要执行 大量 安装 则 拥有 本地 缓存​​ 的副本 非常有用
 从 命令 提示符 执行 以 下 命令 以 下载 所 有可能的 必需 文件
 请 记 得 要 将 python 3
exe  替换为 安装程序 的 实际 名称 并 在 单独的 目录中 创建 子目录 以避免 同名 文件 间 的 冲突
exe  layout  optional  target  directory  您 也可以 指定 quiet  选项 来 隐藏 进 度 显示
 修改 安装
microsoft  store  包
3
2 新版功能
microsoft  store  包 是一个 易于 安装 的 python  解释器 主要 用 于 交互式 使用 例如 学生
 要 安装 软件包 请 确保 您 拥有 最新的 windows 10 更新 并 在 microsoft  store  应用程序中 搜索 python 3
9
 确保 您 选择 的 应用程序 由 python  softwarefoundation  发布 并 安装
 警告 python  将 始终 在 microsoft  store  上 免 费 提供
 如果 要求 您 付 款 则表示 您 没 有 选择 正确的 包
 安装 完成后 可以在 开始 菜单 中找到 它 来 启动 python
 或者 可以在 命令 提示符 或 powershell  会话 中 输入 python  来 启动
 此外 可以 输入 pip  或 idle  来 使用 pip  和 idle
idle  也 在 开始 菜单 中
 所有 这 三个 命令 也可以使用 版本号 后缀 例如 python 3
exe  和 python 3
exe  以及 python
exe  其 中3
x  是 您 要 启动 的特定 版本 例如3
9
 在 设置 主 页 应用 和 功能 页面 中 点 选 管理 可选 功能 选择 与 每个 命令 关联的 python  版本
 建议 确保 pip  和 idle  与 选择 的 python  版本 一致
 可以使用 python  m  venv  创建虚拟环境 并 激活 并 正常 使用
 如果你 已经 安装了 另一个 版本 的 python  并 将 它 添加到 你 的 path  变量 中 那么 它 将作为 python
exe  而不是 来自 microsoft  store  的 那 个
 要 访问 新 安装 请使用 python 3
exe  或 python 3
exe 
py
exe  启动器 将 检测 此 python  安装 版 但 会 优先 使用 来自 传统 安装 器 的 安装 版
 要 删除 python  请 打开 设置 并 使用 应用程序 和 功能 或者 在 开始 中找到 python  然后 右 键 单 击 以 选择 卸 载
 卸 载 将 删除 该 已安装 python  程序 中的所有 软件包 但不会 删除 任何 虚拟环境
 已知 的 问题
 由 于 microsoft  store  应用程序 的 限制 python  脚本 可能无法 对 共享 位置 如 temp  和 注册表 进行 完全 写入 访问
 相反 它 将 写入 私 人 副本
 如果 脚本 必须 修改 共享 位置 则需要 安装 完整 安装程序
nugetorg  安装包
3
2 新版功能
nuget
org  是一个 精 简 的 python  环境 用 于 在没有 全局 安装 python  的 系统 的 持续 集成 和 构建
 虽然 nuget  是
net  的 包 管理器 但 是对于 包含 构建 时 工具 的 包 来说 它 也可以 很好 地 工作
 访问 nuget
org  获取 有关 使用 nuget  的 最新 信息
 下面的 摘要 对 python  开发人员 来说 已经 足够 了
  nuget
exe  命令行 工具 可以直接 从 httpsaka
msnugetclidl  下载 例如使用 curl  或 powershell
 使用 该 工具 安装64 位 或32 位 最新版本的 python  nuget
 要 选择 特定 版本 请 添加 version 3
y 
 输出 目录 可以从
 更改 包 将 安装到 子目录 中
 默认情况下 子目录 的 名称 与 包 的 名称 相同 如果没有 excludeversion  选项 则 此 名称 将 包含 已安装 的特定 版本
 子目录 里面 是一个包含 python  安装 的 tools  目录 without  excludeversion 
2 通常 nuget  包 不 可 升级 应该 平 行 安装 较 新 版本 并 使用 完整 路径 引用
 或者 手动 删除 程序 包 目录 并 再次 安装
 如果在 构建 之间 不 保留 文件 许多 ci  系统 将自动 执行 此操作
 除了 tools  目录 外还有 一个 buildnative  目录
 它 包含一个 msbuild  属性 文件 python
props  可以在 c  项目 中 使用 该文件 来 引用 python  安装
 包含 这些 设置 将自动 在 生成 中 使用 标头 和 导入 库
nuget
org  上 的 包 信息 页 是 www
orgpackagespython  对 于64 位 版本 和 www
orgpackagespythonx 86 表示32 位 版本
 可 嵌入 的 包
python  应用程序
 嵌入 python
 用 本地 代码 编写 的 应用程序 通常 需要 某种 形式 的 脚本 语言 嵌入式 python  发行版 可以用 于 此 目 的
 通常 应用程序 的大部分 都 是 本机 代码 某些 部分 将 调用 python
exe  或 直接使用 python 3
dll 
 无论是 哪 种情况 将 嵌入 的 发行版 解压缩 到 应用程序 安装 的 子目录 中 就 足以 提供 可 加载 的 python  解释器
 与 应用程序 使用 一样 包 可以 安装到 任何 位置 因为在 初始化 解释器 之前 有 机 会 指定 搜索路径
 否则 使用 嵌入式 发行版 和 常规 安装 之间 没有 根 本 区别
 替代 捆 绑 包
 除了 标准 的 cpython  发行版 之外 还 有一些 包含 附加 功能 的 修改 包
 以下是 热 门 版本 及其 主要 功能 的 列表 activepython  具有 多 平台 兼容性 的 安装程序 文档 pywin 32 anaconda  流行的 科学 模块 如 numpyscipy  和 pandas  和 conda  包 管理器
canopy  具有 编辑器 和其他 开发 工具 的 全 面 的 python  分析 环境
winpython  特定于 windows  的 发行版 包含 用 于 构建 包 的 预 构建 科学 包 和 工具
 请注意 这些 软件包 可能 不包含 最新版本的 python  或其他 库 并且不 由 核心 python  团队 维护 或 支持
 配置 python
 要 从 命令 提示符 方便地 运行 python  您可以 考虑 在 windows  中 更改 一些 默认 环境变量
 虽然 安装程序 提供了 为 您 配置 path  和 pathext  变量 的 选项 但 这 仅 适用于 单 版本、 全局 安装
 如果您 经常 使用 多个 版本 的 python  请 考虑 使用 适用于 windows  的 python  启动器
 附 录 设置 环境变量
 查找 python  可执行文件
 在3
5 版更改
 除了 使用 自动创建 的 python  解释器 的 开始 菜单 项 之外 您 可能 还 想 在 命令 提示符 下 启动 python
 安装程序 有 一个 选项 可以为 您 设置
 在 安装程序 的第一 页 上 可以选择 标记为 将 python  添加到 环境变量 的 选项 以 使 安装程序 将 安装 位置 添加到 path 
 还 添加了 scripts  文件 夹 的 位置
 这 允许你 输入 python  来 运行 解释器 并且 pip  用 于 包 安装程序
 因此 您 还可以 使用 命令行选项 执行 脚本 请参阅 命令行 文档
 如果在 安装 时 未 启用 此 选项 则 始终 可以 重新 运行 安装程序 选择 修改 并 启用 它
 或者 您可以 使用 附 录 设置 环境变量 的 方法 手动 修改 path 
 您 需要 将 python  安装 目录 添加到 path  环境变量 中 该 内容 与其他 条目 用 分 号分隔
 示例 变量 可能 如下所示 假设 前 两个 条目 已经 存 在 cwindowssystem 32 cwindowscprogram  filespython 3
utf 8 模式
 适用于 windows  的 python  启动器
3
3 新版功能
 用 于 windows  的 python  启动器 是一个 实 用 程序可 帮助 定位 和 执行 不同的 python  版本
 它允许 脚本 或 命令行 指示 特定 python  版本 的 首 选项 并 将 定位 并 执行 该 版本
 与 path  变量 不同 启动器 将 正确 选择 最 合适的 python  版本
 它 更 倾 向 于 按 用户 安装 而不是 系统 安装 并 按 语言 版本 排序 而不是 使用 最新 安装 的 版本
 启动器 最初 是 在 pep 397 中 指定 的
 入门
shebang  lines
shebang  lines  的 参数
shebang  lines  还可以 指定 要 传递给 python  解释器 的其他 选项
 例如 如果你 有 一个 shebang  lines  usrbinpython  v  然后 python  将 以 v  选项 启动
 自定义
 诊 断
 查找 模块
 附加 模块
 尽管 python  的 目标 是 在 所有平台 中 都 可移植 但是 windows  有一些 独 特 的 特性
 在 标准库 和 外部 都 有一些 模块 和 代码 片段 在 使用这些 特性
 特定于 windows  的 标准 模块 记录 在 windows  系统 相关 模块 中
pywin
mark  hammond  的  pywin 32 模块 是 一 组 用 于 高级 windows  特定 支持 的 模块
 这 包括 以 下 实 用 程序 组件 对象 模 型 com  win 32 api  调用 注册 事件 日志 microsoft  foundation  classes  mfc  用户界面 pythonwin  是 pywin 32 附带 的 一个 示例 mfc  应用程序
 它是一个 内置 调试器 的 可 嵌入 ide
 参见 win 32 how  do  i
 tim  golden  著 python  and  com  david  和 paul  boddie  著
cxfreeze
cxfreeze  是一个 distutils  的 扩展 参见 扩展 distutils  它 将 python  脚本 包装 成 可执行 的 windows  程序
exe  文件
 完成 此操作 后 您可以 分发 应用程序 而无需 用户 安装 python
wconio
 由 于 python  的 高级 终端 处理 层 curses  仅限 于 类 unix  系统 因此 windows  还有一个 独立的 库 用 于 python  的 windows  控制台 io 
wconio  是 turboc  的 conio
h  装饰器 用于创建 文本 用户界面
 在 windows  上 编译 python
 其他 平台
 随着 python  的 不 断 发 展 不再 支持 以 前 曾 经 支持 的一些 平台 由 于 缺少 用户 或 开发人员
 检查 pep 11 了解 所有 不支持 的 平台 的详细信息
 windows  ce  仍然 受支持
 cygwin  安装包 也 提供 安装 python  解释器 cf
 cygwin  package  source  maintainer  releases  有关 具有 预 编译 安装程序 平台 的详细信息 请参阅 python  for  windows
 编辑器 和 集成 开发 环境
 有 很多 支持 python  编程语言 的 集成 开发 环境
 大多数 编辑器 和 集成 开发 环境 支持 语法 高 亮 调试 工具 和 pep 8 检查
 请访问 python  editors  和 integrated  development  environments  以获取 完整 列表
 安装 和 使用 python
 这 一部分 文档 专门 介绍 在不同 平台上 配置 python  环境 的 一般 方法 解释器 的 调用 以及 方便 使用 python  的 技巧
 命令行 与 环境1
 命令行1
 接口 选项1
 通 用 选项1
 其他 选项1
 不 应当使用 的 选项1
 环境变量1
 调试模式 变量2
 在 unix  平台 中 使用 python 2
 获取 最新版本的 python 2
 在 linux  中2
 在 freebsd  和 openbsd  上2
 在 opensolaris  系统上2
 构建 python 2
 与 python  相关的 路径 和 文件2
 杂项3
 在 windows  上 使用 python 3
 完整 安装程序3
 安装 步骤3
 删除 maxpath  限制3
 无 ui  安装3
 免 下载 安装3
 修改 安装3
 microsoft  store  包3
 已知 的 问题3
 nuget
org  安装包3
 可 嵌入 的 包3
 python  应用程序3
 嵌入 python 3
 替代 捆 绑 包3
 配置 python 3
 附 录 设置 环境变量3
 查找 python  可执行文件3
 utf 8 模式3
 适用于 windows  的 python  启动器3
 入门3
 从 命令行3
 从 虚拟环境3
 从 脚本3
 从 文件 关联3
 shebang  lines  的 参数3
 自定义3
 通过 ini  文件 自定义3
 自定义 默认 的 python  版本3
 诊 断3
 查找 模块3
 附加 模块3
 在 windows  上 编译 python 3
 其他 平台4
 在 苹 果 系统上 使用 python 4
 获取 和 安装 macpython 4
 如何 运行 python  脚本4
 运行 有 图形 界面 的 脚本4
 配置4
 ide 4
 安装 额外的 python  包4
 mac  上 的 图形 界面 编程4
 在 mac  上 分发 python  应用程序4
 其他 资源5
 编辑器 和 集成 开发 环境
 在 unix  平台 中 使用 python
 获取 最新版本的 python
 在 linux  中
python  预 装 在大多数 linux  发行版 上 并 作为一个 包 提供给 所有其他 用户
 但是 您 可能 想要 使用 的 某些 功能 在 发行版 提供的 软件包 中 不可用
 这 时 您可以 从 源代码 轻松 编译 最新版本的 python
 如果 python  没有 预 先 安装 并且不 在 发行版 提供的 库 中 您可以 轻松 地 为 自己 使用 的 发行版 创建 包
 参阅 以 下 链接 参见 httpswww
html  对 于 debian  用户 httpsen
orgportalpackaging  对 于 opensuse  用户 httpsdocsold
html  对 于 fedora  用户 httpwww
html  对 于 slackware  用户
 在 freebsd  和 openbsd  上
 freebsd  用户 使用以下 命令 添加 包 pkg  install  python 3 openbsd  用户 使用以下 命令 添加 包 pkgadd  r  python  pkgadd  ftpftp
tgz  例如 i 386 用户 获取 python 2
1 的 可 用 版本 pkgadd  ftpftp
 在 opensolaris  系统上
 构建 python
 如果你想 自己 编译 cpython  首先 要 做 的 是 获取 source 
 您可以 下载 最新版本的 源代码 也 可以直接 提取 最新的 clone 
 如果你想要 制 作 补丁 则需要 克 隆 代码
 构建 过程 由 常 用 命令 组成
configure  make  make  install  特定 unix  平台 的 配置 选项 和 注意 事项 通常 记录 在 python  源代码 的 根 目录 下 的 readme
rst  文件 中
 警告 make  install  可以 覆盖 或 伪 装 python 3 二进制文件
 因此 建议 使用 make  altinstall  而不是 make  install  因为 后者 只 安装了 execprefixbinpythonversion 
 与 python  相关的 路径 和 文件
 杂项
 在 苹 果 系统上 使用 python
 作者 bob  savage  bobsavagemac
com  运行 mac  os  x  的 macintosh  上 的 python  原 则 上 与 任何其他 unix  平台上 的 python  非常 相似 但是 还 有一些 额外的 功能 例如 ide  和 包 管理器 值得 一 提
 获取 和 安装 macpython
8 附带 apple  预 安装 的 python 2
7
 如果你 愿 意 可以从 python  网 站 httpswww
org  安装 最新版本的 python 3
python  的当前 通 用 二进制 版本 可以在 mac  的 新 intel  和 传统 ppc  cpu  上 本地 运行
 你 安装 后 得到的 东西 有 会 有 一个 python 3
9 文件 夹 在你的 applications  文件 夹 中
 在这里 你可以 找到 idle  它 是作为 官 方 python  发行版 标准 组成部分 的 开发 环境 以及 pythonlauncher  它 负责 处理 在 finder  中 双 击 python  脚本 的 操作
 框架 libraryframeworkspython
framework  包括 python  可执行文件 和 库
 安装程序 将 此 位置 添加到 shell  路径
 要 卸 载 macpython  你可以 简单地 移除 这 三个 项目
 python  可执行文件 的符号链接 放在 usrlocalbin  中
apple  提供的 python  版本 分别 安装 在 systemlibraryframeworkspython
framework  和 usrbinpython  中
 你 永远不 应 修改 或 删除 这些 内容 因为它们 由 apple  控制 并 由 apple  或 第三方 软件 使用
 请 记住 如果你 选择 从 python
org  安装 较 新 的 python  版本 那么你 的 计算机 上 将 安装 两个 不同 但 都 有用的 python  因此你 的 路径 和 用 法 与 你想要 执行 的 操作 一致 非常 重要
idle  包含一个 帮助 菜单 允许你 访问 python  文档
 如果您 是 python  的 新 手 你应该 开始 阅读 该 文档中 的 教程 介绍
 如果你 熟悉 其他 unix  平台上 的 python  那么 你应该 阅读 有关 从 unix  shell  运行 python  脚本 的部分
 如何 运行 python  脚本
 在 mac  os  x  上 开始 使用 python  的最佳 方法 是通过 idle  集成 开发 环境 参见 ide  部分 并 在 ide  运行时 使用 帮助 菜单
 如果要 从 终端 窗口 命令行 或 finder  运行 python  脚本 首先 需要 一个 编辑器 来创建 脚本
 mac  os  x  附带 了许多 标准 的 unix  命令行 编辑器 如 vim  和 emacs 
 如果你想要 一个 更 mac  化 的 编辑器 那么 programbbedit  或 来自 bare  bones  software  的 textwrangler  参见 httpwww
html  是 不 错 的 选择 就 如 textmate  参见 httpsmacromates
com 
 其他 编辑器 包括 programgvim  httpmacvimdev
iomacvim  和 aquamacs  httpaquamacs
org 
 要 从 终端 窗口 运行 脚本 必须 确保 fileusrlocalbin  位于 shell  搜索路径 中
 要 从 finder  运行 你 的 脚本 你 有两个 选择 把 脚本 拖 拽 到 pythonlauncher  选择 pythonlauncher  作为 通过 finder  info  窗口 打开 脚本 或 任何
py  脚本 的 默认 应用程序 然后 双 击 脚本
 pythonlauncher  有 各种 首 选项 来 控制 脚本 的 启动 方式
 拖 拽 方式 允许你 为 一次 调用 更改 这些 选项 或 使用 其 首 选项 菜单 全局 更改 内容
 运行 有 图形 界面 的 脚本
 对 于 旧版本 的 python  你需要 注意 一个 mac  os  x  的 怪 异 之处 与 aqua  窗口 管理器 通信 的 程序 换 而言 之 任何 具有 图形 界面 的 程序 需要 以 特殊 方式 运行
 使用 pythonw  而不是 python  来 启动 这样的 脚本
 对 于 python 3
9 你可以使用 python  或者 pythonw
 配置
os  x  上 的 python  遵循 所有 标准 的 unix  环境变量 例如 pythonpath  但是 为 finder  启动 的 程序 设置 这些 变量 是 非 标准 的因为 finder  在 启动 时 不 读取 你 的
profile  或
cshrc 
 你需要 创建一个 文件
plist 
 有关 详细信息请参 阅 apple  的 技术 文档 qa 1067
 更多 关于 在 macpython  中 安装 python  包 的 信息 参阅 安装 额外的 python  包 部分
ide
macpython  附带 标准 的 idle  开发 环境
 有关 使用 idle  的 详细 介绍 请访问 httpwww
html 
 安装 额外的 python  包
 有 几个 方法可以 安装 额外的 python  包 可以通过 标准 的 python  distutils  模式 python  setup
py  install  安装 软件包
 许多 包 也可以通过 setuptools  扩展 或 pip  包装器 安装 请参阅 httpspip
io 
mac  上 的 图形 界面 编程
 使用 python  在 mac  上 构建 gui  应用程序 有 多种 选择
pyobjc  是一个 python  到 apple  的 objectiveccocoa  框架 的 绑定 这是 大多数 现 代 mac  开发 的基础
 有关 pyobjc  的 信息 请访问 httpspypi
 标准 的 python  gui  工具 包 是 tkinter  基于 跨平台 的 tk  工具 包 httpswww
tk 
 apple  的 os  x  捆 绑 了 aqua  原生 版本 的 tk  最新版本 可以从 httpswww
com  下载 和 安装 它 也可以 从 源代码 构建
wxpython  是 另一种 流行的 跨平台 gui  工具 包 可 在 mac  os  x  上 本机 运行
 软件包 和 文档 可 从 httpswww
org  获得
pyqt  是 另一种 流行的 跨平台 gui  工具 包 可 在 mac  os  x  上 本机 运行
 更多信息 可 在 httpsriverbankcomputing
comsoftwarepyqtintro  上 找到
 在 mac  上 分发 python  应用程序
 在 mac  上 部 署 独立 python  应用程序 的 标准 工具 是 py 2 app 
 有关 安装 和 使用 py 2 app  的更多信息请 访问 httpundefined
orgpythonpy 2 app 
 其他 资源
macpython  邮件列表 是 mac  上 python  用户 和 开发人员 的 优 秀 支持 资源 httpswww
orgcommunitysigscurrentpythonmacsig  另一个 有用的 资源 是 macpython  wiki  httpswiki
 安装 python  模块 旧版
 作者 greg  ward  参见 安装 python  模块 最新的 模块 安装 文档
 对 于 常规 python  使用 你 几乎 肯 定 像 使用 该 文档 而 非 这 个
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
 注解 本 指南 仅 介绍 构建和 分发 扩展 的基本 工具 这些 扩展 是作为 此 python  版本 的 一 部分 提供的
 第三方 工具 提供 更易 于 使用 和 更 安全 的替代 方案
 有关 详细信 息请参阅 python  打 包用户指南 中 的 快速 推荐 部分
 概述
 在 python 2
0 中 distutils  api  首次 被添加到 标准库中
 这 向 linux  发行版 维护 者 提供了一个 将 python  项目 转换为 发行版 软件包的 标准 方法 以及 向 系统 管理 员 们 提供了 直接 将 这些 软件包 安装到 目标 系统 的 标准 方法
see  安装 python  模块 and  分发 python  模块 for  more  details
distutils  based  source  distributions
standard  build  and  install
platform  variations
splitting  the  job  up
how  building  works
how  installation  works
 onunix  and  mac  os  x  which  is  also  unixbased  it  also  depends  onwhether  the  module  distribution  being  installed  is  pure  python  orcontains  extensions  nonpure  平台 标准 安装 位置 默认值 注释 单 一 unix  prefixlibpythonx
ysitepackages 1 类 unix  execprefixlibpythonx
ysitepackages 1 windows  prefixlibsitepackages  cpythonxylibsitepackages 2 注释1
 if  youwant  to  customize  your  installation  directories  more  heavily  seesection  自定义 安装 on  custom  installations
alternate  installation
alternate  installation  the  user  scheme
 here  are  the  values  for  unix  including  mac  os  x  文件类型 安装 目录 模块 userbaselibpythonx
ysitepackages  脚本 userbasebin  数据 userbase  c  头文件 userbaseincludepythonx
yabiflagsdistname  以下是 windows  上 使用 的 值 文件类型 安装 目录 模块 userbasepythonxysitepackages  脚本 userbasepythonxyscripts  数据 userbase  c  头文件 userbasepythonxyincludedistname  the  advantage  of  using  this  scheme  compared  to  the  other  onesdescribed  below  is  that  the  user  sitepackages  directory  is  undernormal  conditions  always  included  in  sys
alternate  installation  the  home  scheme
 filesare  installed  to  the  following  directories  under  the  installation  baseas  follows  文件类型 安装 目录 模块 homelibpython  脚本 homebin  数据 home  c  头文件 homeincludepythondistname  mentally  replace  slashes  with  backslashes  if  youre  on  windows
alternate  installation  unix  the  prefix  scheme
 files  areinstalled  as  follows  文件类型 安装 目录 python  模块 prefixlibpythonx
ysitepackages  扩展模块 execprefixlibpythonx
ysitepackages  脚本 prefixbin  数据 prefix  c  头文件 prefixincludepythonx
alternate  installation  windows  the  prefix  scheme
 files  are  installed  as  follows  文件类型 安装 目录 模块 prefixlibsitepackages  脚本 prefixscripts  数据 prefix  c  头文件 prefixincludedistname 
 自定义 安装
to  create  a  custom  installation  scheme  you  start  with  one  of  thealternate  schemes  and  override  some  of  the  installation  directoriesused  for  the  various  types  of  files  using  these  options  文件类型 覆盖 选项 python  模块 installpurelib  扩展模块 installplatlib  所有 模块 installlib  脚本 installscripts  数据 installdata  c  头文件 installheaders  these  override  options  can  be  relative  absolute  or  explicitlydefined  in  terms  of  one  of  the  installation  base  directories
plat  installscriptspythonscripts  installdatapythondata  或者 等价于 python  setup
plat  installscriptspythonscripts  installdatapythondata  或者 等价于 install  installbasehomepython  installpureliblib  installplatliblib
 注解 when  a  virtual  environment  is  activated  any  options  that  change  the  installation  path  will  be  ignored  from  all  distutils  configuration  files  to  prevent  inadvertently  installing  projects  outside  of  the  virtual  environment
modifying  pythons  search  path
distutils  configuration  files
location  and  names  of  config  files
 on  unix  and  mac  os  x  the  three  configuration  filesin  the  order  they  are  processed  are  文件类型 位置 和 文件名 注释 system  prefixlibpythonverdistutilsdistutils
cfg 3 and  on  windows  the  configuration  files  are  文件类型 位置 和 文件名 注释 system  prefixlibdistutilsdistutils
 注释1
syntax  of  config  files
building  extensions  tips  and  tricks
tweaking  compilerlinker  flags
using  nonmicrosoft  compilers  on  windows
 参见 cbuilder  compiler  information  about  the  free  c  compiler  from  borland  including  links  to  the  download  pages
 参见 building  python  modules  on  ms  windows  platform  with  mingw  information  about  building  the  required  libraries  for  the  mingw  environment
 脚注1 this  also  means  you  could  replace  all  existing  cofflibraries  with  omflibraries  of  the  same  name
2 欲 了解 更多信息请 查阅 httpswww
orgcygwin  和 httpwww
org 3 then  you  have  no  posix  emulation  available  but  you  also  dont  need  cygwin 1
 描述符 对象
 描述符 是 描述 对象 的 某些 属性 的 对象
 它们 存在于 类型对象 的 字典中
pytypeobject  pypropertytype  内建 描述符 类型 的 类型对象
int  pydescrisdatapyobject   descr  如果 描述符 对象 descr  描述 数据 属性 则返回 true  如果 描述 方法 则返 回 false
 descr  必须是 描述符 对象 没有 错误 检查
 呼 叫 协议
cpython  支持 两 种不同 的 调用 协议 tpcall  和 矢 量 调用
tpcall  协议
 设置 tpcall  的 类的实例 都是可 调用 的
 槽 位 的 签名 为 pyobject  tpcallpyobject  callable  pyobject  args  pyobject  kwargsa  call  is  made  using  a  tuple  for  the  positional  arguments  and  a  dictfor  the  keyword  arguments  similarly  to  callableargs  kwargs  inpython  code
the  vectorcall  protocol
3
9 新版功能
this  bears  repeating  警告 a  class  supporting  vectorcall  must  also  implement  tpcall  with  the  same  semantics
 注解 in  cpython 3
 递归 控制
vectorcall  support  api
3
8 新版功能
3
8 新版功能
3
8 新版功能
object  calling  api
 函数 callable  args  kwargs  pyobjectcall  pyobject  tuple  dictnull  pyobjectcallnoargs  pyobject  pyobjectcallonearg  pyobject 1 个 对象 pyobjectcallobject  pyobject  元组 null  pyobjectcallfunction  pyobject  format  pyobjectcallmethod  对象 char  format  pyobjectcallfunctionobjargs  pyobject  可变 参数 pyobjectcallmethodobjargs  对象 名称 可变 参数 pyobjectcallmethodnoargs  对象 名称 pyobjectcallmethodonearg  对象 名称1 个 对象 pyobjectvectorcall  pyobject  vectorcall  vectorcall  pyobjectvectorcalldict  pyobject  vectorcall  dictnull  pyobjectvectorcallmethod  参数 名称 vectorcall  vectorcall  pyobject  pyobjectcallpyobject   callable  pyobject   args  pyobject   kwargs  return  value  new  reference
 成功时返回结果在失败时抛出一个异常并返回 null
 成功时返回结果在失败时抛出一个异常并返回 null
3
9 新版功能
 成功时返回结果在失败时抛出一个异常并返回 null
3
9 新版功能
 成功时返回结果在失败时抛出一个异常并返回 null
 这等价于 python  表达式 callableargs
 成功时返回结果在失败时抛出一个异常并返回 null
 这等价于 python  表达式 callableargs
 在3
4 版更改 the  type  of  format  was  changed  from  char 
 成功时返回结果在失败时抛出一个异常并返回 null
 在3
4 版更改 the  types  of  name  and  format  were  changed  from  char 
 成功时返回结果在失败时抛出一个异常并返回 null
 这 和 python  表达式 callablearg 1 arg 2
 是 一样的
 成功时返回结果在失败时抛出一个异常并返回 null
 成功时返回结果在失败时抛出一个异常并返回 null
3
9 新版功能
 成功时返回结果在失败时抛出一个异常并返回 null
3
9 新版功能
 成功时返回结果在失败时抛出一个异常并返回 null
3
9 新版功能
3
9 新版功能
 成功时返回结果在失败时抛出一个异常并返回 null
3
9 新版功能
call  support  api
 集合 对象
 这 一 章节 详细 介绍了 set  和 frozenset  对象 的 公共 api
 任何 未 在 下 面列出的 功能 最好 是 使用 抽象 对象 协议 包括 pyobjectcallmethodpyobjectrichcomparebool  pyobjecthash  pyobjectreprpyobjectistrue  pyobjectprint  以及 pyobjectgetiter  或者 抽象 数字 协议 包括 pynumberand  pynumbersubtractpynumberor  pynumberxor  pynumberinplaceandpynumberinplacesubtract  pynumberinplaceor  以及 pynumberinplacexor  来访问
pysetobject  这 个 pyobject  的子类型 被用来 保存 set  和 frozenset  对象 的 内部 数据
 它 类似于 pydictobject  因为 对 于 小 尺寸 集合 来说 它 是 固定 大小 的 很 像 元组 的 存储 方式 并且 对 于 中 等 和 大 尺寸 集合 来说 它 将 指向 单独 的 可变 大小 的内存块 很 像 列表 的 存储 方式
 此 结构体 的 字段 不应 被视为 公有 并且 可能 发生改变
 所有 访问 应当 通过 已 写入 文档 的 api  来进行 而 不 可通过 操 纵 结构体 中的值
pytypeobject  pysettype  这是一个 pytypeobject  实例 表示 python  set  类型
pytypeobject  pyfrozensettype  这是一个 pytypeobject  实例 表示 python  frozenset  类型
 下列 类型检查 宏 适用于 指向 任意 python  对象 的 指针
 类似地 这些 构造函数 也 适用于 任意 可迭代 的 python  对象
int  pysetcheckpyobject   p  如果 p  是一个 set  对象或者 是 其子类型的实例 则返回真值
int  pyfrozensetcheckpyobject   p  如果 p  是一个 frozenset  对象或者 是 其子类型的实例 则返回真值
int  pyanysetcheckpyobject   p  如果 p  是一个 set  对象、 frozenset  对象或者 是 其子类型的实例则 返回真值
int  pyanysetcheckexactpyobject   p  如果 p  是一个 set  对象 或 frozenset  对象 但不是 其子类型的实例则 返回真值
int  pyfrozensetcheckexactpyobject   p  如果 p  是一个 frozenset  对象 但不是 其子类型的实例 则返回真值
 返回一个新的 set  其中包含 iterable  所返回的 对象
 iterable  可以为 null  表示 创建一个新的 空 集合
 成功时返回 新 的 集合 失败时返 回 null
 如果 iterable  实际上 不 是 可迭代对象 则引发 typeerror 
 该构造器 也 适用于 拷贝 集合 csets
 返回一个新的 frozenset  其中包含 iterable  所返回的 对象
 iterable  可以为 null  表示 创建一个新的 空 冻结 集合
 成功时返回 新 的 冻结 集合 失败时返回 null
 如果 iterable  实际上 不 是 可迭代对 象 则引发 typeerror
 下列函数 和 宏 适用于 set  或 frozenset  的 实例 或 是 其子类型的实例
pyssizet  pysetsizepyobject   anyset  返回 set  或 frozenset  对象 的长度
 等价于 lenanyset
 如果 anyset  不 是 set  frozenset  或 其子类型的实例 则会引发 pyexcsystemerror
pyssizet  pysetgetsizepyobject   anyset  宏 版本 的 pysetsize  不带 错误 检测
int  pysetcontainspyobject   anyset  pyobject   key  如果 找到 返回1 如果未 找到 返回0 如果 遇到 错误 则返回1
 不 同 于 python  contains  方法 此 函数 不 会自动 将 不 可哈希 的 集合 转 换为 临时 的 冻结 集合
 如果 key  为 不 可哈希 对象 则会引发 typeerror 
 如果 anyset  不 是 set  frozenset  或 其子类型的实例 则会引发 pyexcsystemerror
int  pysetaddpyobject   set  pyobject   key  添加 key  到 一个 set  实例
 也 可用于 frozenset  实例 类似于 pytuplesetitem  它 可被用来 为 全 新 冻结 集合 在 公开 给 其他 代码 之前 填 充 全 新 的 值
 成功时返回0 失败时返回1
 如果 key  为 不 可 哈希 对象 则会引发 typeerror
 如果没有 增 长 空间 则会引发 memoryerror
 如果 set  不 是 set  或 其子类型的实例 则会引发 systemerror
 下列函数 适用于 set  或 其子类型的实例 但不 可用于 frozenset  或 其子类型的实例
int  pysetdiscardpyobject   set  pyobject   key  如果 找到 并 移除 返回1 如果未 找到 无 操作 返回0 如果 遇到 错误 则返回1
 对 于 不存在 的 键 不 会引发 keyerror
 如果 key  为 不 可 哈希 对象 则会引发 typeerror
 不同于 python  discard  方法 此 函 数不会 自动将 不 可哈希 的 集合 转换为 临时 的 冻结 集合
 如果 set  不 是 set  或 其子类型的实例 则会引发 pyexcsystemerror
 返回 set  中 任意 对象 的 新 引用 并 从 set  中移除 该对象
 失败时返回 null
 如果 集合 为空 则会引发 keyerror
 如果 set  不 是 set  或 其子类型的实例 则会引发 systemerror
int  pysetclearpyobject   set  清空 现有 字典 的 所有 键值对
 弱引用对象
python  支持 弱引用 作为一 类对象
 具体 来说 有两种 直接 实现 弱引用 的 对象
 第 一种 就是 简单的 引用对象 第二 种 尽可能 地 作 用 为 一个 原 对象 的 代理
int  pyweakrefcheckob  如果 ob  是一个 引用 或者一个 代理对象 则返回 一个 true
int  pyweakrefcheckrefob  如果 ob  是一个 引用 则返回 true
int  pyweakrefcheckproxyob  如果 ob  是一个 代理对象 则返回 true
 返回 对象 ob  的 一个 弱引用对象
 该函数 总是会 返回一个新的 引用 但不 保证 创建一个新的 对象 它 有可能 返回 一个 现有的 引用对象
 第二个 形参 callback  为 一个可调用对象 它会在 ob  被作为 垃圾回收 时 接收 通知 它应该 接受一个 单独 形参 即 弱引用对象 本身
 callback  也可以 为 none  或 null
 如果 ob  不是一个 弱引用对象 或者如果 callback  不 是 可调用对象 none  或 null  该函数 将 返回 null  并 且 引发 typeerror
 返回 对象 ob  的 一个 弱引用 代理对象
 该函数 将总是 返回一个新的 引用 但 不保证 创建一个新的 对象 它 有可能 返回 一个 现有的 代理对象
 第二个 形 参 callback  为 一个可调用对象 它会在 ob  被作为 垃圾回收 时 接收 通 知 它应该 接受一个 单独 形参 即 弱引用对象 本身
 callback  也可以 为 none  或 null
 如果 ob  不是一个 弱引用对象 或者如果 callback  不 是 可调用对象 none  或 null  该函数 将 返回 null  并 且 引发 typeerror
 返回 弱引用对象 ref  的 被 引用对象
 如果 被 引用对象 不再 存在则 返回 pynone
 注解 该函数 返回 被 引用对象 的 一个 借 来 的 引用
 这意味着 除非 你 很 清楚 在 你 使用 期间 这个对象 不可能 被 销 毁 否则 你应该 始终 对 该对象 调用 pyincref
 类似 pyweakrefgetobject  但 实现 为 一个 不 做 类型检查 的 宏
 旧 缓冲协议
3
0 版后已移除
 这些函数 是 python 2 中 旧 缓冲协议 api  的 组成部分
 在 python 3 中 此 协议 已 不 复 存 在 但 这些函数 仍然 被 公开 以便 移植2
x  的 代码
 它们 被用作 新 缓冲协议 的 兼容性 包装器 但它们 并不会 在 缓冲 被 导出 时 向 你 提供对 所 获 资源 的 生 命 周期 控制
 因此 推荐 你 调用 pyobjectgetbuffer  或者 配合 pyargparsetuple  函数 族 使用 y  或 w  格式 码 来获取 一个 对象 的 缓冲 视图 并 在 缓冲 视图 可 被 释放 时 调用 pybufferrelease
int  pyobjectascharbufferpyobject   obj  const  char   buffer  pyssizet   bufferlen  返回 一个指向 可用作 基于 字符 的 输入 的只读 内存地址 的 指针
 obj  参数必 须 支持 单 段 字符 缓冲 接口
 成功时返回0 将 buffer  设 为 内存地址 并 将 bufferlen  设 为 缓冲区 长度
 出错 时返回1 并设置 一个 typeerror
int  pyobjectasreadbufferpyobject   obj  const  void   buffer  pyssizet   bufferlen  返回 一个指向 包含 任意 数据 的只读 内存地址 的 指针
 obj  参数必须 支持 单 段 可读 缓冲 接口
 成功时返回0 将 buffer  设 为 内存地址 并 将 bufferlen  设 为 缓冲区 长度
 出错 时返回1 并设置 一个 typeerror
int  pyobjectcheckreadbufferpyobject   o  如果 o  支持 单 段 可读 缓冲 接口 则返回1
 否则返回0
 此 函数总是 会 成功 执行
 请注意 此函数会 尝试 获取 并 释放 一个 缓冲区 并且 在 调用 对 应 函数 期间发生 的 异常会被 屏蔽
 要获取 错误报告 则 应 改 用 pyobjectgetbuffer
int  pyobjectaswritebufferpyobject   obj  void   buffer  pyssizet   bufferlen  返回 一个指向 可 写 内存地址 的 指针
 obj  必须 支持 单 段 字符 缓冲 接口
 成功时返回0 将 buffer  设 为 内存地址 并 将 bufferlen  设 为 缓冲 区 长度
 出错 时返回1 并设置 一个 typeerror
 模块 对象
3
3 新版功能
 在3
4 版更改 package  and  loader  are  set  to  none
3
3 新版功能
3
2 新版功能
3
2 版后已移除 pymodulegetfilename  raises  unicodeencodeerror  on  unencodable  filenames  use  pymodulegetfilenameobject  instead
initializing  c  modules
 see  构建 cc  扩展 or  extending  embeddedpython  for  details
 在3
5 版更改 prior  to  version 3
5 this  member  was  always  set  to  null  and  was  defined  as  inquiry  mreload  traverseproc  mtraverse  a  traversal  function  to  call  during  gc  traversal  of  the  module  object  or  null  if  not  needed
 在3
9 版更改 no  longer  called  before  the  module  state  is  allocated
 在3
9 版更改 no  longer  called  before  the  module  state  is  allocated
 在3
9 版更改 no  longer  called  before  the  module  state  is  allocated
singlephase  initialization
 注解 most  uses  of  this  function  should  be  using  pymodulecreate  instead  only  use  this  if  you  are  sure  you  need  it
multiphase  initialization
3
5 新版功能
3
5 新版功能
lowlevel  module  creation  functions
3
5 新版功能
 注解 most  uses  of  this  function  should  be  using  pymodulefromdefandspec  instead  only  use  this  if  you  are  sure  you  need  it
3
5 新版功能
3
5 新版功能
3
5 新版功能
3
5 新版功能
support  functions
 注解 unlike  other  functions  that  steal  references  pymoduleaddobject  only  decrements  the  reference  count  of  value  on  success
3
9 新版功能
module  lookup
3
3 新版功能
3
3 新版功能
 浮点数 对象
pyfloatobject  这 个 c  类型 pyobject  的子类型 代表一个 python  浮点数 对象
pytypeobject  pyfloattype  这是 个 属于 c  类型 pytypeobject  的 代表 python  浮点 类型的实例
 在 python  层 面 的 类型 float  是 同 一个 对象
int  pyfloatcheckpyobject   p  当 他 的 参数 是一个 c  类型 pyfloatobject  或者是 c  类型 pyfloatobject  的子类型 时 返回真
int  pyfloatcheckexactpyobject   p  当 他 的 参数 是一个 c  类型 pyfloatobject  但不是 c  类型 pyfloatobject  的子类型 时 返回真
 根据 字符串 str  的 值 创建一个 pyfloatobject  失败时返回 null
 根据 v  创建一个 pyfloatobject  对象 失败时返回 null
double  pyfloatasdoublepyobject   pyfloat  返回 一个 c  double  代表 pyfloat  的内容
 如果 pyfloat  不是一个 python  浮点数 对象 但是 具有 float  方法 此方法将 首先 被调用 将 pyfloat  转换成 一个 数 点数
 如果 float  未定义 则 将 回退 至 index
 如果失败 此方法将 返回1
0 因此 开发者 应当 调用 pyerroccurred  来 检查 错误
 在3
8 版更改 如果可 用 将 使用 index
double  pyfloatasdoublepyobject   pyfloat  返回 一个 pyfloat  内容的 c  double  表示 但 没有 错误 检查
 返回 一个 structseq  实例 其中包含 有关 float  的精度、 最小 值 和 最大 值 的 信息
 它 是 头文件 float
h  的 一个简单 包装
double  pyfloatgetmax  返回 最大 可表示 的 有限 浮点数 dblmax  为 c  double 
double  pyfloatgetmin  返回 最小 可表示 归 一 化 正 浮点数 dblmin  为 c  double 
 映射 协议
 参见 pyobjectgetitem 、 pyobjectsetitem  与 pyobjectdelitem
int  pymappingcheckpyobject   o  如果对象 提供 映射 协议 或 支持 切片 则返回1 否则返回0
 请注意 它 将 为具有 getitem  方法 的 python  类 返回1 因为在 一般 情况下 无 法 确定 它 所支持的 键 类型
 此 函数 总是会 成功 执行
pyssizet  pymappingsizepyobject   opyssizet  pymappinglengthpyobject   o  成功时返回 对象 o  中 键 的数量 失败时返回1
 这相当于 python  表 达式 leno
 返回 o  中 对应于 字符串 key  的 元素 或者 失败时返回 null
 这 相 当 于 python  表达式 okey
 另请参 见 also  pyobjectgetitem
int  pymappingsetitemstringpyobject   o  const  char   key  pyobject   v  在 对象 o  中 将 字符串 key  映射到 值 v
 失败时返回1
 这相当 于 python  语句 okey  v
 另请参 见 pyobjectsetitem
 此 函 数 不 会 增加 对 v  的 引用
int  pymappingdelitempyobject   o  pyobject   key  从 对象 o  中移除 对象 key  的 映射
 失败时返回1
 这相当于 python  语句 del  okey
 这是 pyobjectdelitem  的一个别名
int  pymappingdelitemstringpyobject   o  const  char   key  从 对象 o  中移除 字符串 key  的 映射
 失败时返回1
 这相当于 python  语句 del  okey
int  pymappinghaskeypyobject   o  pyobject   key  如果 映射 对象具有 键 key  则返回1 否则返回0
 这相当于 python  表达式 key  in  o
 此 函数 总是会 成功 执行
 请注意 在 调用 getitem  方法 期间发生 的 异常 将会被 屏蔽
 要获取 错误报告 请改用 pyobjectgetitem
int  pymappinghaskeystringpyobject   o  const  char   key  如果 映射 对象具有 键 key  则返回1 否则返回0
 这相当于 python  表达式 key  in  o
 此 函数 总是会 成功 执行
 请注意 在 调用 getitem  方法 期间发生 的 异常 将会被 屏蔽
 要获取 错误报告 请改用 pymappinggetitemstring
 成功时返回 对象 o  中 的 键 的 列表
 失败时返回 null
 在3
7 版更改 在之前版本中 此 函数返回 一个列表 或 元组
 成功时返回 对象 o  中的值 的 列表
 失败时返回 null
 在3
7 版更改 在之前版本中 此 函数返回 一个列表 或 元组
 成功时返回 对象 o  中 条目 的 列表 其中每 个条目 是一个包含 键值对 的 元 组
 失败时返回 null
 在3
7 版更改 在之前版本中 此 函数返回 一个列表 或 元组
 元组 对象
 操作系统 实 用 程序
3
6 新版功能
 警告 the  c  fork  call  should  only  be  made  from  the  main  thread  of  the  main  interpreter
3
7 新版功能
 警告 the  c  fork  call  should  only  be  made  from  the  main  thread  of  the  main  interpreter
3
7 新版功能
 警告 the  c  fork  call  should  only  be  made  from  the  main  thread  of  the  main  interpreter
3
7 新版功能
 参见 os
3
7 版后已移除 this  function  is  superseded  by  pyosafterforkchild
 参见 the  pyunicodedecodefsdefaultandsize  and  pyunicodedecodelocaleandsize  functions
3
5 新版功能
 在3
7 版更改 the  function  now  uses  the  utf 8 encoding  in  the  utf 8 mode
 在3
8 版更改 the  function  now  uses  the  utf 8 encoding  on  windows  if  pylegacywindowsfsencodingflag  is  zerochar  pyencodelocaleconst  wchart   text  sizet   errorpos  encode  a  wide  character  string  to  the  locale  encoding  with  the  surrogateescape  error  handler  surrogate  characters  in  the  range  udc 80
 参见 the  pyunicodeencodefsdefault  and  pyunicodeencodelocale  functions
3
5 新版功能
 在3
7 版更改 the  function  now  uses  the  utf 8 encoding  in  the  utf 8 mode
 在3
8 版更改 the  function  now  uses  the  utf 8 encoding  on  windows  if  pylegacywindowsfsencodingflag  is  zero
 编解码器 注册 与 支持 功能
int  pycodecregisterpyobject   searchfunction  注册 一个新的 编解码器 搜索 函数
 作为 副作 用 其 尝试 加载 encodings  包 如果 尚未 完成 请 确保 它 始终 位 于 搜索 函数 列表 的第一 位
int  pycodecknownencodingconst  char   encoding  根据 注册的 给定 encoding  的 编解码器 是否 已存在 而 返回1 或0
 此 函数 总 能 成功
 泛型 编解码器 基本 编码 api
 object  使用 由 errors  所定义的 错误处理 方法 传递给 定 encoding  的 编码器 函数
 errors  可以为 null  表示 使用 为 编码器 所定义的 默认 方 法
 如果 找不到 编码器 则会引发 lookuperror
 泛型 编解码器 基本 解码 api
 object  使用 由 errors  所定义的 错误处理 方法 传递给 定 encoding  的 解码器 函数
 errors  可以为 null  表示 使用 为 编解码器 所定义的 默认 方法
 如果 找不到 编解码器 则会引发 lookuperror
codec  查找 api
 在 下列函数 中 encoding  字符串 会 被 查找 并 转换为 小写字母 形式 这使得 通过 此 机制 查找 编码格式 实际上 对 大小写 不 敏感
 如果未 找到 任何 编解码器 则 将 设置 keyerror  并返回 null
 为给定的 encoding  获取一个 编码器 函数
 为给定的 encoding  获取一个 解码器 函数
 为给定的 encoding  获取一个 incrementalencoder  对象
 为给定的 encoding  获取一个 incrementaldecoder  对象
 为给定的 encoding  获取一个 streamreader  工厂函数
 为给定的 encoding  获取一个 streamwriter  工厂函数
 用 于 unicode  编码 错误 处理程序 的 注册表 api
unicode  对象 和 编码 解码器
unicode  对象
 自 从 python 3
3 中 实现了 pep 393 以 来 unicode  对象 在内部 使用 各种 表示形式 以便 在 保持 内存 效率 的 同时 处理 完整 范围 的 unicode  字符
 对 于所有 代码 点 都 低 于128、256 或65536 的 字符串 有一些 特殊 情况 否则 代码 点 必须 低 于1114112 这是 完整的 unicode  范围
 注解 the  legacy  unicode  object  will  be  removed  in  python 3
unicode  类型
3
3 新版功能
 在3
3 版更改 in  previous  versions  this  was  a 16 bit  type  or  a 32 bit  type  depending  on  whether  you  selected  a  narrow  or  wide  unicode  version  of  python  at  build  time
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
 在3
3 版更改 this  macro  is  now  inefficient  because  in  many  cases  the  pyunicode  representation  does  not  exist  and  needs  to  be  created  and  can  fail  return  null  with  an  exception  set
 try  to  port  the  code  to  use  the  new  pyunicodenbytedata  macros  or  use  pyunicodewrite  or  pyunicoderead
int  pyunicodeisidentifierpyobject   o  return 1 if  the  string  is  a  valid  identifier  according  to  the  language  definition  section  标识符 和关键字
 return 0 otherwise
 在3
9 版更改 the  function  does  not  call  pyfatalerror  anymore  if  the  string  is  not  ready
unicode  字符 属性
3
3 版后已移除 this  function  uses  simple  case  mappings
3
3 版后已移除 this  function  uses  simple  case  mappings
3
3 版后已移除 this  function  uses  simple  case  mappings
creating  and  accessing  unicode  strings
3
3 新版功能
3
3 新版功能
 the  following  format  characters  are  allowed  格式字符 类型 注释 不适用 文 字 字符
 c  整型 单个字符 表示为 c  语言 的 整型
 d  整型 相当于 printfd
1 u  无符号 整型 相当于 printfu
1 ld  长整型 相当于 printfld
1 li  长整型 相当于 printfli
1 lu  无符号 长整型 相当于 printflu
1 lld  long  long  相当于 printflld
1 lli  long  long  相当于 printflli
1 llu  无符号 long  long  相当于 printfllu
1 zd  pyssizet  相当于 printfzd
1 zi  pyssizet  相当于 printfzi
1 zu  sizet  相当于 printfzu
1 i  整型 相当于 printfi
1 x  整型 相当于 printfx
1 s  const  char  以 null  为 终止 符 的 c  字符 数组
 p  const  void  一个 c  指针 的 十六进制 表示形式
 基 本 等价于 printfp  但它 会 确 保 以 字面值0 x  开头 不 论 系统 平台 上 printf  的 输出 是什么
 a  pyobject  ascii  调用 的结果
 u  pyobject  a  unicode  object
 注解 the  width  formatter  unit  is  number  of  characters  rather  than  bytes
 在3
2 版更改 support  for  lld  and  llu  added
 在3
3 版更改 support  for  li  lli  and  zi  added
 在3
4 版更改 support  width  and  precision  formatter  for  s  a  u  v  s  r  added
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
3
3 新版功能
deprecated  pyunicode  apis
3
3 新版功能
3
2 新版功能
locale  encoding
 参见 the  pydecodelocale  function
3
3 新版功能
 在3
7 版更改 the  function  now  also  uses  the  current  locale  encoding  for  the  surrogateescape  error  handler  except  on  android
3
3 新版功能
 参见 the  pyencodelocale  function
3
3 新版功能
 在3
7 版更改 the  function  now  also  uses  the  current  locale  encoding  for  the  surrogateescape  error  handler  except  on  android
file  system  encoding
3
1 新版功能
 在3
6 版更改 接受一个 类 路径对象
3
2 新版功能
 在3
6 版更改 接受一个 类 路径对象
 参见 the  pydecodelocale  function
 在3
6 版更改 use  pyfilesystemdefaultencodeerrors  error  handler
 在3
6 版更改 use  pyfilesystemdefaultencodeerrors  error  handler
 参见 the  pyencodelocale  function
3
2 新版功能
 在3
6 版更改 use  pyfilesystemdefaultencodeerrors  error  handler
wchart  support
3
2 新版功能
 在3
7 版更改 raises  a  valueerror  if  size  is  null  and  the  wchart  string  contains  null  characters
builtin  codecs
generic  codecs
utf 8 codecs
3
3 新版功能
 在3
7 版更改 the  return  type  is  now  const  char  rather  of  char 
3
3 新版功能
 在3
7 版更改 the  return  type  is  now  const  char  rather  of  char 
utf 32 codecs
utf 16 codecs
utf 7 codecs
unicodeescape  codecs
rawunicodeescape  codecs
latin 1 codecs
ascii  codecs
character  map  codecs
mbcs  codecs  for  windows
3
3 新版功能
methods  slots
methods  and  slot  functions
3
3 新版功能
 在3
7 版更改 start  and  end  are  now  adjusted  to  behave  like  strstartend
 代码对象
 代码对象 是 cpython  实现 的 低 级 细节
 每个 代表一 块 尚未 绑定到 函数 中 的 可执行 代码
pycodeobject  用 于 描述 代码对象 的 对象 的 c  结构
 此 类型 字段 可 随 时 更改
pytypeobject  pycodetype  这是一个 pytypeobject  实例 其 表示 python  的 code  类型
int  pycodecheckpyobject   co  如果 co  是一个 code  对象 则返回 true
int  pycodegetnumfreepycodeobject   co  返回 co  中 的 自由 变量 数
 返回一个新的 代码对象
 如果你需要 一个 虚拟 代码对象 来 创建一个 代码 帧 请使用 pycodenewempty
 调用 pycodenew  直接 可以 绑定到 准确 的 python  版本 因为 字节码 的 定义 经常 变化
 类似于 pycodenew  但 带有一个 额外的 posonlyargcount  用 于 仅限 位置参数
3
8 新版功能
 返回 具有 指定 文件名、 函数 名 和 第一行 号 的 新 空 代码对象
 对 于 exec  或 eval  生成 的 代码对象 是 非 法 的
 异常处理
 注解 the  error  indicator  is  not  the  result  of  sys
printing  and  clearing
 抛出 异常
3
5 新版功能
3
4 新版功能
 可用性 windows
 可用性 windows
 可用性 windows
 可用性 windows
 可用性 windows
3
4 新版功能
 可用性 windows
3
3 新版功能
3
4 新版功能
3
2 新版功能
issuing  warnings
 the  standard  python  warning  categories  are  available  as  global  variables  whose  names  are  enumerated  at  标准 警告 类别
3
6 新版功能
3
4 新版功能
3
2 新版功能
3
6 新版功能
querying  the  error  indicator
 注解 do  not  compare  the  return  value  to  a  specific  exception  use  pyerrexceptionmatches  instead  shown  below
 注解 this  function  is  normally  only  used  by  code  that  needs  to  catch  exceptions  or  by  code  that  needs  to  save  and  restore  the  error  indicator  temporarily  e
 注解 this  function  is  normally  only  used  by  code  that  needs  to  save  and  restore  the  error  indicator  temporarily
 注解 this  function  does  not  implicitly  set  the  traceback  attribute  on  the  exception  value
 注解 this  function  is  not  normally  used  by  code  that  wants  to  handle  exceptions
3
3 新版功能
 注解 this  function  is  not  normally  used  by  code  that  wants  to  handle  exceptions
3
3 新版功能
signal  handling
 在3
5 版更改 on  windows  the  function  now  also  supports  socket  handles
exception  classes
3
2 新版功能
exception  objects
unicode  exception  objects
3
3 版后已移除3
11 pyunicode  is  deprecated  since  python 3
 please  migrate  to  pyobjectcallfunctionpyexcunicodeencodeerror  sonns 
3
3 版后已移除3
11 pyunicode  is  deprecated  since  python 3
 please  migrate  to  pyobjectcallfunctionpyexcunicodetranslateerror  onns 
 递归 控制
 在3
9 版更改 this  function  is  now  also  available  in  the  limited  api
 在3
9 版更改 this  function  is  now  also  available  in  the  limited  api
 标准 异常
 for  completenesshere  are  all  the  variables  c  名称 python  名称 注释 pyexcbaseexception  baseexception 1 pyexcexception  exception 1 pyexcarithmeticerror  arithmeticerror 1 pyexcassertionerror  assertionerror  pyexcattributeerror  attributeerror  pyexcblockingioerror  blockingioerror  pyexcbrokenpipeerror  brokenpipeerror  pyexcbuffererror  buffererror  pyexcchildprocesserror  childprocesserror  pyexcconnectionabortederror  connectionabortederror  pyexcconnectionerror  connectionerror  pyexcconnectionrefusederror  connectionrefusederror  pyexcconnectionreseterror  connectionreseterror  pyexceoferror  eoferror  pyexcfileexistserror  fileexistserror  pyexcfilenotfounderror  filenotfounderror  pyexcfloatingpointerror  floatingpointerror  pyexcgeneratorexit  generatorexit  pyexcimporterror  importerror  pyexcindentationerror  indentationerror  pyexcindexerror  indexerror  pyexcinterruptederror  interruptederror  pyexcisadirectoryerror  isadirectoryerror  pyexckeyerror  keyerror  pyexckeyboardinterrupt  keyboardinterrupt  pyexclookuperror  lookuperror 1 pyexcmemoryerror  memoryerror  pyexcmodulenotfounderror  modulenotfounderror  pyexcnameerror  nameerror  pyexcnotadirectoryerror  notadirectoryerror  pyexcnotimplementederror  notimplementederror  pyexcoserror  oserror 1 pyexcoverflowerror  overflowerror  pyexcpermissionerror  permissionerror  pyexcprocesslookuperror  processlookuperror  pyexcrecursionerror  recursionerror  pyexcreferenceerror  referenceerror 2 pyexcruntimeerror  runtimeerror  pyexcstopasynciteration  stopasynciteration  pyexcstopiteration  stopiteration  pyexcsyntaxerror  syntaxerror  pyexcsystemerror  systemerror  pyexcsystemexit  systemexit  pyexctaberror  taberror  pyexctimeouterror  timeouterror  pyexctypeerror  typeerror  pyexcunboundlocalerror  unboundlocalerror  pyexcunicodedecodeerror  unicodedecodeerror  pyexcunicodeencodeerror  unicodeencodeerror  pyexcunicodeerror  unicodeerror  pyexcunicodetranslateerror  unicodetranslateerror  pyexcvalueerror  valueerror  pyexczerodivisionerror  zerodivisionerror 3
3 新版功能 pyexcblockingioerror  pyexcbrokenpipeerrorpyexcchildprocesserror  pyexcconnectionerrorpyexcconnectionabortederror  pyexcconnectionrefusederrorpyexcconnectionreseterror  pyexcfileexistserrorpyexcfilenotfounderror  pyexcinterruptederrorpyexcisadirectoryerror  pyexcnotadirectoryerrorpyexcpermissionerror  pyexcprocesslookuperror  andpyexctimeouterror  介绍 如 下 pep 3151
3
5 新版功能 pyexcstopasynciteration  和 pyexcrecursionerror
3
6 新版功能 pyexcmodulenotfounderror
 这些 是 兼容性 别名 pyexcoserror  c  名称 注释 pyexcenvironmenterror  pyexcioerror  pyexcwindowserror 3 在3
3 版更改 这些 别名 曾 经 是 单独的 异常 类型
 注释1
 这是 其他 标准 异常 的 基类
 标准 警告 类别
 forcompleteness  here  are  all  the  variables  c  名称 python  名称 注释 pyexcwarning  warning 1 pyexcbyteswarning  byteswarning  pyexcdeprecationwarning  deprecationwarning  pyexcfuturewarning  futurewarning  pyexcimportwarning  importwarning  pyexcpendingdeprecationwarning  pendingdeprecationwarning  pyexcresourcewarning  resourcewarning  pyexcruntimewarning  runtimewarning  pyexcsyntaxwarning  syntaxwarning  pyexcunicodewarning  unicodewarning  pyexcuserwarning  userwarning 3
2 新版功能 pyexcresourcewarning
 注释1
 这是 其他 标准 警告 类别 的 基类
 稳定 的 应用程序 二进制 接口
 在 堆中 分配 对象
 为 新 分配 的 对象 op  初始化 它 的 类型 和 引用
 返回 初始化 后 的 对象
 如果 type  声明 这个对象 参 与 循环 垃圾 检测 那么 这个对象 会 被添加 进 垃圾 检测 的 对象 集 中
 这个对象 的其他 字段 不会被 影响
 它 的功能 和 pyobjectinit  一样 并且 初始化 变量 大小 的 对象 的长度
 使用 c  结构 类型 type  和 python  类型对象 type  分配 一个新的 python  对象
 未 在 该 python  对象 头 中定义的 字段 不会被 初始化 对象 的 引用计数 将 为 一
 内存分配 大小 由 type  对象 的 tpbasicsize  字段 来确 定
 使用 c  的 数据结构 类型 type  和 python  的 类型对象 type  分配 一个新的 python  对象
python  对象 头文件 中没有 定义 的 字段 不会被 初始化
 被 分配 的 内存 空间 预 留 了 type  结构 加 type  对象 中 tpitemsize  字段 提供的 size  字段 的 值
 这 对 于 实现 类似 元组 这种 能够 在 构造 期 决定 自己 大小 的 对 象 是 很 实 用 的
 将 字段 的 数组 嵌入到 相同 的 内存分配 中可以 减少 内存分配 的 次 数 这 提高 了 内存分配 的 效率
void  pyobjectdelvoid   op  释放 由 pyobjectnew  或者 pyobjectnewvar  分配 内存 的 对象
 这 通常 由 对象 的 type  字段 定义 的 tpdealloc  处理 函数来 调用
 调用 这个函 数 以 后 op  对象中的 字段 都 不 可以被 访问 因为 原 分配 的内存 空间 已 不再 是 一 个有效的 python  对象
pyobject  pynonestruct  像 none  一样的 python  对象
 这个对象 仅 可以使用 pynone  宏 访问 这 个 宏 取 得 指向 这个对象 的 指针
 参见 pymodulecreate  分配 内存 和 创建 扩展模块
 概述
python  的应用 编程 接口 api  使得 c  和 c  程序员 可以 在多个 层级 上 访问 python  解释器
 该 api  在 c  中 同样 可 用 但 为 简化 描述 通常 将 其 称为 pythonc  api
 使用 pythonc  api  有两个 基本的 理 由
 第一个 理 由 是为了 特定 目 的 而 编写 扩展模块 它们是 扩展 python  解释器 功能 的 c  模块
 这 可能是 最常见的 使用 场景
 第二个 理 由 是 将 python  用 作 更大 规 模 应用 的 组件 这种 技巧 通常 被称为 在 一个 应用中 embedding  python
 编写 扩展模块 的 过程 相对 来说 更易 于 理解 可以通过 菜 谱 的形式 分 步骤 介绍
 使用 某些 工具 可 在 一 定 程度 上 自动 化 这 一 过程
 虽然 人 们 在其他 应用中 嵌入 python  的做法 早 已 有 之 但 嵌入 python  的 过程 没有 编写 扩展模块 那样 方便 直 观
 许多 api  函数 在 你 嵌入 或 是 扩展 python  这两种 场景 下 都 能 发 挥 作 用 此外 大多数 嵌入 python  的 应用程序 也 需要 提供 自定义 扩展 因此在 尝试 在 实际 应用中 嵌入 python  之前 先 熟悉 编写 扩展 应该 会 是 个 好 主 意
 代码 标准
 如果你想要 编写 可 包含于 cpython  的 c  代码 你 必须 遵循 在 pep 7 中定义的 指导 原 则 和 标准
 这些 指导 原 则 适用于 任何 你所 要 扩展 的 python  版本
 在 编写 你自己的 第三方 扩展模块 时可以 不必 遵循 这些 规范 除非 你 准备 在 日 后 向 python  贡献 这些模块
 包含 文件
 使用 pythonc  api  所 需要 的全部 函数、 类型 和 宏 定义 可通过 下面 这 行 语句 包含 到 你的代码 之 中 define  pyssizetclean  include  python
h  这意味着 包含以下 标准 头文件 stdio
hstring
herrno
hlimits
hassert
h  和 stdlib
h  如果可 用
 注解 由 于 python  可能会 定义 一些 能 在某些 系统上 影响 标准 头文件 的 预 处理器 定义 因此在 包含 任何 标准 头文件 之前 你 必须 先 包含 python
h
it  is  recommended  to  always  define  pyssizetclean  before  including  python
 see  语句 解释 及 变量 编译 for  a  description  of  this  macro
python
h  所定义的 全部 用户可 见 名称 由 包含的 标准 头文件 所定义的 除外 都 带有 前缀 py  或者 py
 以 py  打头 的 名称 是 供 python  实现 内部 使用 的 不应 被 扩展 编写 者 使用
 结构 成员 名称 没有 保留 前缀
 注解 user  code  should  never  define  names  that  begin  with  py  or  py
 头文件 通常会 与 python  一起 安装
 在 unix  上 它们 位于 以 下 目录 prefixincludepythonversion  和 execprefixincludepythonversion  其 中 prefix  和 execprefix  是 由 向 python  的 configure  脚本 传入 的对应 形参 所定义 而 version  则 为 d
d  sys
 在 windows  上 头文件 安装 于 prefixinclude  其 中 prefix  是 向 安装程序 指定 的 安装 目录
 要 包含 头文件 请 将 两个 目录 如果不 同 都 放 到 你所 用 编译器 的 包含 搜索路径 中
 请 不 要 将 父 目录 放入 搜索路径 然后 使用 includepythonx
h  这 将 使得 多 平台 编译 不可用 因为 prefix  下 平台 无 关 的 头文件 需要 包含 来自 execprefix  下 特定 平台 的 头文件
 有用的 宏
 对象、 类型 和 引用计数
 引用计数
 类型
 异常
python  程序员 只需要 处理 特定 需要 处理 的 错误 异常 未 处理 的 异常 会自动 传递给 调用者 然后 传递给 调用者 的 调用者 依 此类推 直到 他们 到达 顶 级 解释器 在 那 里 将它们 报告 给 用户 并 伴 随 堆 栈回溯
 嵌入 python
 调试 构建
 除了 前面 描述 的引用计数 调试 之外 还 执行 以 下 额外 检查 额外 检查 将 添加到 对象 分配器
 额外的 检查 将 添加到 解析器 和 编译器 中
 许多 断言 被添加到 字典 和 集合 实现 中
 另外 集合 对象 需要 testcapi  方法
 输入 参数 的完整 性 检查 被添加到 框架 创建 中
 使用 已知 的 无效 模式 初始化 整型 的 存储 以 捕获 对 未 初始化 数字 的 引用
 添加 底层 跟踪 和 额外的 异常 检查 到 虚拟 机 的 运行时 中
 添加 额外 调试 到 线程 模块
 这里 可能 没有提 到 的 额外的 检查
 有关 更多 详细信息请参 阅 python  源代码 中 的 miscspecialbuilds
txt 
 序列 协议
int  pysequencecheckpyobject   o  如果对象 提供 序列 协议 函数返回1 否则返回0
 请注意 它 将 为具有 getitem  方法 的 python  类 返回1 除非 它们是 dict  的子类 因为在 一般 情况下 无法 确定 它 所 支持 键 类型
 此 函数 总是会 成功 执行
pyssizet  pysequencesizepyobject   opyssizet  pysequencelengthpyobject   o  到 哪 里 积 分 返回 序列 o  中 对象 的数量 失败时返回1
 这相当于 python  表达式 leno
 成功时返回 o 1 和 o 2 的 拼接 失败时返回 null
 这等价于 python  表达式 o 1 o 2
 返回 序列对象 o  重复 count  次 的结果 失败时返回 null
 这等价 于 python  表达式 o  count
 成功时返回 o 1 和 o 2 的 拼接 失败时返回 null
 在 o 1 支持 的 情况下 操作 将 原地 完成
 这等价于 python  表达式 o 1 o 2
 return  the  result  of  repeating  sequence  object  返回 序列对象 o  重复 count  次 的结果 失败时返回 null
 在 o  支持 的情况下 该 操作 会 原地 完成
 这等价于 python  表达式 o  count
 返回 o  中的第 i  号 元素 失败时返回 null
 这等价于 python  表 达式 oi
 返回 序列对象 o  的 i 1 到 i 2 的 切片 失败时返回 null
 这等价 于 python  表达式 oi 1 i 2
int  pysequencesetitempyobject   o  pyssizet   i  pyobject   v  将 对象 v  赋值给 o  的 第 i  号 元素
 失败时 会引发异常 并返回1 成功时返回0
 这相当于 python  语句 oi  v
 此 函数 不 会 改变 对 v  的 引用
 如果 v  为 null  元素 将 被 删除 但是 此 特性 已被弃用 应当 改 用 pysequencedelitem
int  pysequencedelitempyobject   o  pyssizet   i  删除 对象 o  的 第 i  号 元素
 失败时返回1
 这相当于 python  语 句 del  oi
int  pysequencesetslicepyobject   o  pyssizet   i 1 pyssizet   i 2 pyobject   v  将 序列对象 v  赋值给 序列对象 o  的 从 i 1 到 i 2 切片
 这相当于 python  语句 oi 1 i 2 v
int  pysequencedelslicepyobject   o  pyssizet   i 1 pyssizet   i 2 删除 序列对象 o  的 从 i 1 到 i 2 的 切片
 失败时返回1
 这 相 当 于 python  语句 del  oi 1 i 2
pyssizet  pysequencecountpyobject   o  pyobject   value  返回 value  在 o  中出现的 次 数 即 返回 使得 okey  value  的 键 的数量
 失败时返回1
 这相当于 python  表达式 o
countvalue 
int  pysequencecontainspyobject   o  pyobject   value  确定 o  是否 包含 value
 如果 o  中 的 某一 项 等于 value  则返回1 否则返回0
 出错 时返回1
 这相当于 python  表达式 value  in  o
pyssizet  pysequenceindexpyobject   o  pyobject   value  返回 第一个 索引 i  其 中 oi  value
 出错 时返回1
 相当于 python  的 o
indexvalue  表达式
 返回 一个列表 对象 其内容 与 序列或 可迭代对象 o  相同 失败时返回 null
 返回 的 列表 保证 是一个 新 对象
 这等价于 python  表达式 listo
 返回 一个元组 对象 其内容 与 序列或 可迭代对象 o  相同 失败时返回 null
 如果 o  为 元组 则 将 返回一个新的 引用 在其他情况下 将 使用 适当的 内容 构造一个 元组
 这等价于 python  表达式 tupleo
 将 序列或 可迭代对象 o  作为 其他 pysequencefast  函数 族 可用的 对象 返回
 如果该 对象 不 是 序列或 可迭代对象 则会引发 typeerror  并 将 m  作为 消息 文本
 失败时返回 null
 pysequencefast  函数 之 所 以这样 命名 是 因为它们 会 假定 o  是一个 pytupleobject  或 pylistobject  并 直接访问 o  的 数据 字段
 作为 cpython  的 实现细节 如果 o  已经 是一个 序列或 列表 它将被 直接 返回
pyssizet  pysequencefastgetsizepyobject   o  在 o  由 pysequencefast  返回 且 o  不 为 null  的情况下 返回 o  的长度
 也可以通过 在 o  上调用 pysequencesize  来获取 大小 但是 pysequencefastgetsize  速度 更快 因为它 可以 假定 o  为 列表或 元组
 在 o  由 pysequencefast  返回 且 o  不 null  并且 i  d  在 索 引 范围内 的情况下 返回 o  的 第 i  号 元素
pyobject  pysequencefastitemspyobject   o  返回 pyobject  指针 的 底层 数组
 假设 o  由 pysequencefast  返回 且 o  不 为 null
 请注意 如果 列表 调整 大小 重新 分配 可能会 重新 定位 items  数组
 因此 仅在 序 列 无法 更改 的 上下文中 使用 基础 数组 指针
 返回 o  的 第 i  个元素 或 在 失败时返回 null
 此 形式 比 pysequencegetitem  理 馔 但不会 检查 o  上 的 pysequencecheck  是否 为真值 也不 会 对 负 序号 进行 调整
 数字 协议
int  pynumbercheckpyobject   o  如果对象 o  提供 数字 的 协议 返回真1 否则返回 假
 这个函数 不 会 调 用 失败
 在3
8 版更改 如果 o  是一个 索引 整数 则返回1
 返回 o 1、 o 2 相 加 的结果如果失败返回 null
 等价于 python  表达式 o 1 o 2
 返回 o 1 减 去 o 2 的结果如果失败返回 null
 等价于 python  表 达式 o 1 o 2
 返回 o 1、 o 2 相 乘 的结果如果失败返回 null
 等价于 python  表达式 o 1 o 2
 返回 o 1、 o 2 做 矩阵 乘法 的结果如果失败返回 null
 等价于 python  表达式 o 1 o 2
3
5 新版功能
 返回 o 1 除 以 o 2 的 向下 取 整 后 的结果如果失败返回 null
 等 价于 传统的 整数 除 法
 返回 o 1 除 以 o 2 的 一个 合理的 近似值 如果失败返回 null
 结果 是 近似 的因为 二进制浮点 数是一个 近似值 不可能 以2 为基数 来表示 出 所有 实 数
 这个函数 返回 两个 整数 相 除 得到的 浮点数
 返回 o 1 除 以 o 2 得到的 余数 如果失败返回 null
 等价于 python  表达式 o 1 o 2
 参考 内置函数 divmod
 如果失败返回 null
 等价于 python  表达 式 divmodo 1 o 2
 请参阅 内置函数 pow
 如果失败返回 null
 等价于 python  中 的 表达式 powo 1 o 2 o 3 其 中 o 3 是可选的
 如果要 忽略 o 3 则需 传入 pynone  作为 代替 如果 传入 null  会导致 非 法 内存 访问
 返回 o  的 负值 如果失败返回 null 
 等价于 python  表达式 o 
 返回 o  如果失败返回 null 
 等价于 python  表达式 o
 返回 o  的绝对值 如果失败返回 null
 等价于 python  表达式 abso
 返回 o  的 按位 取反 后 的结果如果失败返回 null
 等价于 python  表达式 o
 返回 o 1 左 移 o 2 个 比特 后 的结果如果失败返回 null
 等价于 python  表达式 o 1 o 2
 返回 o 1 右 移 o 2 个 比特 后 的结果如果失败返回 null 
 等价于 python  表达式 o 1 o 2
 返回 o 1 和 o 2 按位 与 的结果如果失败返回 null 
 等价于 python  表达式 o 1 o 2
 返回 o 1 和 o 2 按位 异 或 的结果如果失败返回 null 
 等价于 python  表达式 o 1 o 2
 返回 o 1 和 o 2 按位 或 的结果如果失败返回 null 
 等价于 python  表达式 o 1 o 2
 返回 o 1、 o 2 相 加 的结果如果失败返回 null
 当 o 1 支持 时 这 个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 返回 o 1、 o 2 相 减 的结果如果失败返回 null 
 当 o 1 支持 时 这 个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 返回 o 1、 o 2 相 乘 的结果如果失败返回 null 
 当 o 1 支持 时这个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 返回 o 1、 o 2 做 矩阵 乘法 后 的结果如果失败返回 null 
 当 o 1 支持 时这个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
3
5 新版功能
 返回 o 1 除 以 o 2 后 向下 取 整 的结果如果失败返回 null
 当 o 1 支持 时这个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 返回 o 1 除 以 o 2 的 一个 合理的 近似值 如果失败返回 null
 结果 是 近似 的因为 二进制浮点 数是一个 近似值 不可能 以2 为基数 来表示 出 所有 实 数
 这个函数 返回 两个 整数 相 除 得到的 浮点数
 当 o 1 支持 时这个 运 算直接使用它储存结果
 返回 o 1 除 以 o 2 得到的 余数 如果失败返回 null
 当 o 1 支持 时这个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 请参阅 内置函数 pow
 如果失败返回 null
 当 o 1 支持 时 这 个 运 算直接使用它储存结果
 当 o 3 是 pynone  时 等价于 python  语 句 o 1 o 2 否则 等价于 在 原 来 位置 储存结果 的 powo 1 o 2 o 3
 如果要 忽略 o 3 则需 传入 pynone  传入 null  会导致 非 法 内存 访问
 返回 o 1 左 移 o 2 个 比特 后 的结果如果失败返回 null
 当 o 1 支持 时这个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 返回 o 1 右 移 o 2 个 比特 后 的结果如果失败返回 null
 当 o 1 支持 时这个 运 算直接使用它储存结果
 等价于 python  语句 o 1 o 2
 成功时返回 o 1 和 o 2 按位 与 的结果 失败时返回 null
 在 o 1 支持 的 前 提 下 该 操作 将 原地 执行
 等价 与 python  语句 o 1 o 2
 成功时返回 o 1 和 o 2 按位 异 或 的结果 失败时返回 null
 在 o 1 支持 的 前 提 下 该 操作 将 原地 执行
 等价 与 python  语句 o 1 o 2
 成功时返回 o 1 和 o 2 按位 或 的结果 失败时返回 null
 在 o 1 支持 的 前 提 下 该 操作 将 原地 执行
 等价于 python  语句 o 1 o 2
 成功时返回 o  转换为 整数 对象 后的结果 失败时返回 null
 等价于 python  表达式 into
 成功时返回 o  转换为 浮点 对象 后的结果 失败时返回 null
 等价于 python  表达式 floato
 成功时返回 o  转换为 python  int  类型 后的结果 失败时返回 null  并 引发 typeerror  异常
 返回 整数 n  转换成 以 base  为基数 的 字符串 后的结果
 这 个 base  参 数必须是2810 或者16
 对 于 基 数28 或16 返回 的 字符串 将 分 别 加上 基 数 标识0 b 0 o  or 0 x
 如果 n  不 是 python  中 的 整数 int  类型 就 先 通过 pynumberindex  将 它 转换成 整数 类型
pyssizet  pynumberasssizetpyobject   o  pyobject   exc  如果 o  是 一个整数 类型 的 解释 型 返回 o  转换成 一个 pyssizet  值 项 后的结果
 如果 调用 失败返回1 并 引发异常
 如果 o  可以被 转换为 python  int  类型 但 尝试 转换为 pyssizet  值 则 会 引发 overflowerror  这 时 exc  参数为 将 被 引发的异常 类型 通常是 indexerror  或 overflowerror
 如果 exc  为 null  则 异常会被 清除 并且 值会被 裁 剪 为负 整数 pyssizetmin  或 正整数 pyssizetmax
int  pyindexcheckpyobject   o  如果 o  是一个 索引 整数 存 有 nbindex  位置 并 有 tpasnumber  填 入 其 中 则返回1 否则返回0
 这个函数 不 会 调用 失败
 复数 对象
 从 c  api  看 python  的 复数 对象 由 两个 不同的 部分 实现 一个 是 在 python  程序 使用 的 python  对象 另外 的 是一个 代表 真正 复数 值 的 c  结构体
api  提供了 函数 共同 操作 两者
 表示 复数的 c  结构体
 表示 复数的 python  对象
 函数对象
 对象 协议
 as  outlined  in  实现 描述器 data  descriptors  take  preference  over  instance  attributes  while  nondata  descriptors  dont
 otherwise  an  attributeerror  is  raised
3
3 新版功能
3
3 新版功能
 注解 if  o 1 and  o 2 are  the  same  object  pyobjectrichcomparebool  will  always  return 1 for  pyeq  and 0 for  pyne
 在3
4 版更改 this  function  now  includes  a  debug  assertion  to  help  ensure  that  it  does  not  silently  discard  an  active  exception
 在3
4 版更改 this  function  now  includes  a  debug  assertion  to  help  ensure  that  it  does  not  silently  discard  an  active  exception
 在3
2 版更改 the  return  type  is  now  pyhasht
 this  is  a  signed  integer  the  same  size  as  pyssizet
3
4 新版功能
python  初始化 配置
3
8 新版功能
 结构 pyconfig  pypreconfig  pystatus  pywidestringlist  函数 pyconfigclear  pyconfiginitisolatedconfig  pyconfiginitpythonconfig  pyconfigread  pyconfigsetargv  pyconfigsetbytesargv  pyconfigsetbytesstring  pyconfigsetstring  pyconfigsetwidestringlist  pypreconfiginitisolatedconfig  pypreconfiginitpythonconfig  pystatuserror  pystatusexception  pystatusexit  pystatusiserror  pystatusisexit  pystatusnomemory  pystatusok  pywidestringlistappend  pywidestringlistinsert  pyexitstatusexception  pyinitializefromconfig  pypreinitialize  pypreinitializefromargs  pypreinitializefrombytesargs  pyrunmain  pygetargcargvthe  preconfiguration  pypreconfig  type  is  stored  inpyruntime
 参见 pep 587 python  初始化 配置
pywidestringlist
 方法 pystatus  pywidestringlistappendpywidestringlist   list  const  wchart   item  append  item  to  list
 structure  fields  pyssizet  length  list  长度
 wchart  items  列表 项目
pystatus
pypreconfig
 int  devmode  参见 pyconfig
 int  isolated  参见 pyconfig
 int  useenvironment  参见 pyconfig
preinitialization  with  pypreconfig
pyconfig
initialization  with  pyconfig
isolated  configuration
python  configuration
 路径 配置
pyconfig  contains  multiple  fields  for  the  path  configuration  路径 配置 输入 pyconfig
pth  仅 windows  pybuilddir
txt  仅 unixthe  pyvenvlauncher  environment  variable  is  used  to  setpyconfig
pyrunmain
pygetargcargv
multiphase  initialization  private  provisional  api
path  enable  optional  features  like  faulthandler  and  tracemalloc  import  the  site  module  等等
 生成器对象
 生成器对象 是 python  用 来实现 生成器 迭代器 的 对象
 它们 通常 通过 迭代 产生 值 的 函数 来创建 而不是 显式 调用 pygennew  或 pygennewwithqualname
pygenobject  用 于 生成器对象 的 c  结构体
pytypeobject  pygentype  与 生成器对象 对应的 类型 对​​ 象
int  pygencheckpyobject   ob  如果 ob  是一个 生成器对象 则返回真值 ob  必须不为 null
int  pygencheckexactpyobject   ob  如果 ob  的 类型 为 pygentype  则返回真值 ob  必须不为 null
 基于 frame  对象 创建并返回 一个新的 生成器对象
 此函数会 取 走 一个 对 frame  的 引用
 参数 必须不为 null
 基于 frame  对象 创建并返回 一个新的 生成器对象 其 中 name  和 qualname  设 为 name  和 qualname
 此函数会 取 走 一个 对 frame  的 引用
 frame  参数 必须不为 null
capsule  对象
 字符串转换 与 格式化
type  对象
in  addition  to  the  following  quick  reference  the  例子 sectionprovides  ataglance  insight  into  the  meaning  and  use  ofpytypeobject
 快速 参考
tp  槽
 pytypeobject  槽 type  特殊方法 属性 信息21 o  t  d  i  r  tpname  const  char  name  x  x  tpbasicsize  pyssizet  x  x  x  tpitemsize  pyssizet  x  x  tpdealloc  destructor  x  x  x  tpvectorcallof  pyssizet  x  x  fset  tpgetattr  getattrfunc  getattribute  g  getattr  tpsetattr  setattrfunc  setattr  g  delattr  tpasasync  pyasyncmethods  subslots  tprepr  reprfunc  repr  x  x  x  tpasnumber  pynumbermethods  subslots  tpassequence  pysequencemethod  subslots  s  tpasmapping  pymappingmethods  subslots  tphash  hashfunc  hash  x  g  tpcall  ternaryfunc  call  x  x  tpstr  reprfunc  str  x  x  tpgetattro  getattrofunc  getattribute  x  x  g  getattr  tpsetattro  setattrofunc  setattr  x  x  g  delattr  tpasbuffer  pybufferprocs  tpflags  无符号 长整型 x  x  tpdoc  const  char  doc  x  x  tptraverse  traverseproc  x  g  tpclear  inquiry  x  g  tprichcompare  richcmpfunc  lt  le  x  g  eq  ne  gt  ge  tpweaklistoffse  pyssizet  x  t  tpiter  getiterfunc  iter  x  tpiternext  iternextfunc  next  x  tpmethods  pymethoddef  x  x  tpmembers  pymemberdef  x  tpgetset  pygetsetdef  x  x  tpbase  pytypeobject  base  x  tpdict  pyobject  dict  tpdescrget  descrgetfunc  get  x  tpdescrset  descrsetfunc  set  x  delete  tpdictoffset  pyssizet  x  tpinit  initproc  init  x  x  x  tpalloc  allocfunc  x  tpnew  newfunc  new  x  x  tpfree  freefunc  x  x  tpisgc  inquiry  x  x  tpbases  pyobject  bases  tpmro  pyobject  mro  tpcache  pyobject  tpsubclasses  pyobject  subclasses  tpweaklist  pyobject  tpdel  destructor  tpversiontag  无符号 整型 tpfinalize  destructor  del  x  tpvectorcall  vectorcallfunc 1 a  slot  name  in  parentheses  indicates  it  is  effectively  deprecated
2 列 o  set  on  pybaseobjecttype  t  set  on  pytypetype  d  default  if  slot  is  set  to  null  x  pytypeready  sets  this  value  if  it  is  null  pytypeready  always  sets  this  value  it  should  be  null  pytypeready  may  set  this  value  depending  on  other  slots  also  see  the  inheritance  column  i
subslots
 槽 type  特殊方法 amawait  unaryfunc  await  amaiter  unaryfunc  aiter  amanext  unaryfunc  anext  nbadd  binaryfunc  add  radd  nbinplaceadd  binaryfunc  iadd  nbsubtract  binaryfunc  sub  rsub  nbinplacesubtract  binaryfunc  sub  nbmultiply  binaryfunc  mul  rmul  nbinplacemultiply  binaryfunc  mul  nbremainder  binaryfunc  mod  rmod  nbinplaceremainder  binaryfunc  mod  nbdivmod  binaryfunc  divmod  rdivmod  nbpower  ternaryfunc  pow  rpow  nbinplacepower  ternaryfunc  pow  nbnegative  unaryfunc  neg  nbpositive  unaryfunc  pos  nbabsolute  unaryfunc  abs  nbbool  inquiry  bool  nbinvert  unaryfunc  invert  nblshift  binaryfunc  lshift  rlshift  nbinplacelshift  binaryfunc  lshift  nbrshift  binaryfunc  rshift  rrshift  nbinplacershift  binaryfunc  rshift  nband  binaryfunc  and  rand  nbinplaceand  binaryfunc  and  nbxor  binaryfunc  xor  rxor  nbinplacexor  binaryfunc  xor  nbor  binaryfunc  or  ror  nbinplaceor  binaryfunc  or  nbint  unaryfunc  int  nbreserved  void  nbfloat  unaryfunc  float  nbfloordivide  binaryfunc  floordiv  nbinplacefloordivide  binaryfunc  floordiv  nbtruedivide  binaryfunc  truediv  nbinplacetruedivide  binaryfunc  truediv  nbindex  unaryfunc  index  nbmatrixmultiply  binaryfunc  matmul  rmatmul  nbinplacematrixmultip  binaryfunc  matmul  ly  mplength  lenfunc  len  mpsubscript  binaryfunc  getitem  mpasssubscript  objobjargproc  setitem  delitem  sqlength  lenfunc  len  sqconcat  binaryfunc  add  sqrepeat  ssizeargfunc  mul  sqitem  ssizeargfunc  getitem  sqassitem  ssizeobjargproc  setitem  delitem  sqcontains  objobjproc  contains  sqinplaceconcat  binaryfunc  iadd  sqinplacerepeat  ssizeargfunc  imul  bfgetbuffer  getbufferproc  bfreleasebuffer  releasebufferpr  oc 
slot  typedefs
 typedef  参数 类型 返回 类型 allocfunc  pytypeobject  pyssizet  pyobject  destructor  void  void  freefunc  void  void  traverseproc  void  visitproc  void  整型 newfunc  pyobject  pyobject  pyobject  pyobject  initproc  pyobject  pyobject  整型 pyobject  reprfunc  pyobject  pyobject  getattrfunc  pyobject  const  char  pyobject  setattrfunc  pyobject  const  char  整型 pyobject  getattrofunc  pyobject  pyobject  pyobject  setattrofunc  pyobject  pyobject  整型 pyobject  descrgetfunc  pyobject  pyobject  pyobject  pyobject  descrsetfunc  pyobject  pyobject  整型 pyobject  hashfunc  pyobject  pyhasht  richcmpfunc  pyobject  pyobject  整 pyobject  型 getiterfunc  pyobject  pyobject  iternextfunc  pyobject  pyobject  lenfunc  pyobject  pyssizet  getbufferproc  pyobject  pybuffer  整 整型 型 releasebufferproc  pyobject  pybuffer  void  inquiry  void  整型 unaryfunc  pyobject  pyobject  binaryfunc  pyobject  pyobject  pyobject  ternaryfunc  pyobject  pyobject  pyobject  pyobject  ssizeargfunc  pyobject  pyssizet  pyobject  ssizeobjargproc  pyobject  pyssizet  整型 objobjproc  pyobject  pyobject  整型 objobjargproc  pyobject  pyobject  整型 pyobject  请参阅 slot  type  typedefs  里有 更多 详细信息
pytypeobject  definition
pyobject  slots
pyvarobject  slots
pytypeobject  slots
 警告 it  is  not  recommended  for  heap  types  to  implement  the  vectorcall  protocol
 注解 the  semantics  of  the  tpvectorcalloffset  slot  are  provisional  and  expected  to  be  finalized  in  python 3
 在3
8 版更改 before  version 3
8 this  slot  was  named  tpprint
 in  python 2
 in  python 3
0 to 3
3
5 新版功能 formerly  known  as  tpcompare  and  tpreserved
 more  information  in  section  使 对象类型 支持 循环 垃圾回收
 this  bit  also  implies  that  the  gcrelated  fields  tptraverse  and  tpclear  are  present  in  the  type  object
3
8 新版功能
3
4 新版功能
3
8 版后已移除 this  flag  isnt  necessary  anymore  as  the  interpreter  assumes  the  tpfinalize  slot  is  always  present  in  the  type  structure
3
9 新版功能
 the  signature  is  int  tptraversepyobject  self  visitproc  visit  void  arg  more  information  about  pythons  garbage  collection  scheme  can  be  found  in  section  使 对象类型 支持 循环 垃圾回收
 警告 when  implementing  tptraverse  only  the  members  that  the  instance  owns  by  having  strong  references  to  them  must  be  visited
 在3
9 版更改 heapallocated  types  are  expected  to  visit  pytypeself  in  tptraverse
 more  information  about  pythons  garbage  collection  scheme  can  be  found  in  section  使 对象类型 支持 循环 垃圾回收
 the  following  constants  are  defined  to  be  used  as  the  third  argument  for  tprichcompare  and  for  pyobjectrichcompare  常 数 对 照 pylt  pyle  pyeq  pyne  pygt  pyge  定义 以 下 宏 是为了 简化 编写 丰 富 的 比较 函数 pyreturnrichcomparevala  valb  op  return  pytrue  or  pyfalse  from  the  function  depending  on  the  result  of  a  comparison
3
7 新版功能
 注解 slot  initialization  is  subject  to  the  rules  of  initializing  globals
 警告 it  is  not  safe  to  use  pydictsetitem  on  or  otherwise  modify  tpdict  with  the  dictionary  capi
3
4 新版功能
 参见 safe  object  finalization  pep 442 vectorcallfunc  pytypeobject
3
9 新版功能 the  field  exists  since 3
8 but  its  only  used  since 3
heap  types
 使 对象类型 支持 循环 垃圾回收
the  very  high  level  layer
3
8 新版功能
 注解 on  windows  fp  should  be  opened  as  binary  mode  e
 在3
4 版更改 the  result  must  be  allocated  by  pymemrawmalloc  or  pymemrawrealloc  instead  of  being  allocated  by  pymemmalloc  or  pymemrealloc
3
4 新版功能
3
2 新版功能
 在3
4 版更改 this  function  now  includes  a  debug  assertion  to  help  ensure  that  it  does  not  silently  discard  an  active  exception
 在3
8 版更改 added  cffeatureversion  field
 语句 解释 及 变量 编译
 这些函数 在 创建 你自己的 函数 时 帮助 很大
 更多 说明 以及 实例 可 参考 说明 文档中 的 扩展 和 嵌入 python  解释器 小节
 这些函数 描述 的 前 三个 pyargparsetuplepyargparsetupleandkeywords  以及 pyargparse  它们都 使用 格式化字符串 来 将 函数 期 待 的 参数 告 知 函数
 这些函数 都 使用 相同 语法 规则 的 格式化字符串
 解析 参数
 一个 格式化字符串 包含0 或者 更多的 格式单元
 一个 格式单元 用来 描述 一个 python  对象 它通常 是一个字符 或者 由 括号 括 起来 的 格式单元 序列
 除了 少 数 例外 一个 非 括号 序列 的 格式单元 通常 对 应 这些函数 的 具有 单 一 地址的 参数
 在 接下来 的描述 中 双引号 内 的 表达式 是 格式单元 圆括号 内 的 是 对 应 这 个 格式单元 的 python  对象类型 方括号 内 的 是 传递 的 c  变量 变量 集 类型
 字符串 和 缓存 区
 数字
b  int  unsigned  char  将 一个 非负 的 python  整型转化成一个 无符号 的 微 整型 存储在 一个 c  unsigned  char  类型 中
b  int  unsigned  char  将 一个 python  整型转化成一个 微 整型 并 不 检查 溢出 问题 存储在 一个 c  unsigned  char  类型 中
h  int  short  int  将 一个 python  整型转化成一个 c  short  int  短 整型
h  int  unsigned  short  int  将 一个 python  整型转化成一个 c  unsigned  short  int  无符号 短 整型 并 不 检查 溢出 问题
i  int  int  将 一个 python  整型转化成一个 c  int  整型
i  int  unsigned  int  将 一个 python  整型转化成一个 c  unsigned  int  无符号 整型 并 不 检查 溢出 问题
l  int  long  int  将 一个 python  整型转化成一个 c  long  int  长整型
k  int  unsigned  long  将 一个 python  整型转化成一个 c  unsigned  long  int  无符号 长整型 并 不 检查 溢出 问题
l  int  long  long  将 一个 python  整型转化成一个 c  long  long  长 长整型
k  int  unsigned  long  long  将 一个 python  整型转化成一个 c  unsigned  long  long  无符号 长 长整型 并 不 检查 溢出 问题
n  int  pyssizet  将 一个 python  整型转化成一个 c  pyssizet  python  元 大小 类型
c  bytes  或者 bytearray  长度为1 char  将 一个 python  字节 类型 如 一个 长度为1 的 bytes  或者 bytearray  对象 转化成一个 c  char  字符 类型
 在3
3 版更改 允许 bytearray  类型的对象
c  str  长度为1 int  将 一个 python  字符 如 一个 长度为1 的 str  字符串 对象 转化成一个 c  int  整型 类型
f  float  float  将 一个 python  浮点数 转化成一个 c  float  浮点数
d  float  double  将 一个 python  浮点数 转化成一个 c  double  双精度 浮点数
d  complex  pycomplex  将 一个 python  复数 类 型转化成一个 c  pycomplex  python  复数 类型
 其他对象
o  object  pyobject  将 python  对象 不 进行 任何 转换 存储在 c  对象 指针 中
 因此 c  程序 接收 已 传递 的 实际 对象
 对象 的引用计数 不 会 增加
 存储 的 指针 不 是 null
o  object  typeobject  pyobject  将 一个 python  对象 存 入一个 c  对象 指针
 这 类似于 o  但是 接受 两个 c  参数 第一个 是 python  类型对象 的地址 第二个 是 存储 对象 指针 的 c  变 量 类型 为 pyobject  的地址
 如果 python  对象 不 具有 所 要求 的 类型 则会引发 typeerror
o  object  converter  anything  通过一个 converter  函数 将 一个 python  对象转换为 一个 c  变量
 此 函 数 接受 两个参数 第一个 是 函数 第二个 是 c  变量 类型 任意 的地址 转 换为 void  类型
 converter  函数 将 以 如 下方式 被调用 status  converterobject  address  其 中 object  是 待 转换 的 python  对象 而 address  为 传给 pyargparse  函数 的 void  参数
 返回 的 status  应当 以1 代表 转换 成功 而 以0 代表 转换 失败
 当 转换 失败时 converter  函数 应当 引发异常 并且 会 让 address  的内容 保持 未 修改 状态
 如果 converter  返回 pycleanupsupported  则 如果参数 解析 最终 失 败 它 可能会 再次 调用 该函数 从而 使 转换器 有 机 会 释放 已 分配 的 任何 内存
 在 第二个 调用 中 object  参数 将 为 null  因此 该参数 将 为 null  因此 该参数 将 为 null  因此 该参数 将 为 null  如果 值 为 null  address  的 值 与 原始 呼 叫 中的值 相同
 在3
1 版更改 pycleanupsupported  被添加
p  bool  int  测试 传入的 值 是否 为真 一个 布尔 判断 并且 将结果 转化为 相 对应的 c  truefalse  整型 值
 如果 表达式 为真 置1 假 则 置0
 它 接受 任何 合 法 的 python  值
 参见 逻辑值 检测 获取更多 关于 python  如何 测试 值 为真 的 信息
3
3 新版功能
items  tuple  matchingitems  对象 必须是 python  序列 它 的长度 是 items  中 格式单元 的数量
c  参数 必须 对 应 items  中 每 一个 独立的 格式单元
 序列中 的 格式单元 可能 有 嵌套
 传递 long  整型 整型 的 值 超过 了 平台 的 longmax  限制 是 可能的 然而 没有 进行 适当的 范围 检测—— 当 接收 字段 太 小 而 接收 不 到 值 时 最 重要的 位 被 静默地 截断 实际上 c  语言 会 在 语义 继承 的基础 上 强制 类型 转换—— 期望的 值可能 会发生 变化
 格式化字符串 中 还 有一些 其他的 字符 具有 特殊 的 涵 义
 这些 可能 并 不 嵌套 在 圆括号 中
 它们是 表明 在 python  参数列表 中 剩 下 的 参数都 是可选的
c  变量 对应的 可选参数 需要 初始化 为默认值—— 当 一个 可选参数 没有 指定 时 pyargparsetuple  不 能 访问 相应的 c  变量 变量 集 的内容
 pyargparsetupleandkeywords  only  表明 在 python  参数列表 中 剩 下 的 参数都 是 强制 关键字参数
 当前 所有 强制 关键字参数 都必须 也是 可选参 数 所 以 格式化字符串 中 必须 一 直 在 前面
3
3 新版功能
 格式单元 的 列表 结束 标志 冒号 后 的 字符串 被用来 作为 错误消息 中的函数 名 pyargparsetuple  函数 引发 的 关联 值 异常
 格式单元 的 列表 结束 标志 分 号 后 的 字符串 被用来 作为 错误消息 取 代 默认 的 错误消息
 和 相互 排 斥
 注意 任何 由 调用者 提供的 python  对象 引用 是 借 来 的 引用 不 要 递 减 它们 的引用计数 传递给 这些函数 的附加 参数必须是 由 格式化字符串 确定 的 变量 的地址 这些 都 是 用来 存储 输入 元组 的 值
 有一些 情况 如 上面的 格式单元 列表中 所描述的 这些参数 作为 输入 值 使用 在这种情况下 它们 应该 匹配 指定 的 相应的 格式单元
 为 了 转换 成功 arg  对象 必须 匹配 格式 并且 格式 必须 用 尽
 成功 的话 pyargparse  函数返回 true  反 之 它们 返回 false  并且 引发一个 合适的 异常
 当 pyargparse  函数 因为 某 一个 格式单元 转化 失败 而 失败时 对应的 以及 后续的 格式单元 地址 内 的 变量 都 不会被 使用
api  函数
 解析 一个 函数的参数 表达式 中 的 参数 按 参数 位置 顺序 存 入 局部变量 中
 成 功 返回 true  失败返回 false  并且 引发 相应的 异常
int  pyargvaparsepyobject   args  const  char   format  valist   vargs  和 pyargparsetuple  相同 然而 它接受一个 valist  类型 的 参数 而 不 是可变 数量的 参数 集
 分析 将 位置参数 和 关键字参数 同时 转换为 局部变量 的 函数的参数
 keywords  参数 是 关键字参数 名称 的 null  终止 数组
 空 名称 表示 positionalonly  parameters
 成功时返回 true  发生 故 障 时 它 将 返回 false  并 引发 相应的 异常
 在3
6 版更改 添加了 positionalonly  parameters  的 支持
int  pyargvaparsetupleandkeywordspyobject   args  pyobject   kw  const  char   format  char   keywords  valist   vargs  和 pyargparsetupleandkeywords  相同 然而 它接受一个 valist  类型 的 参数 而不是 可变 数量的 参数 集
int  pyargvalidatekeywordargumentspyobject   确保 字典中 的 关键字参数 都 是 字符串
 这个函数 只 被使用 于 pyargparsetupleandkeywords  不 被使用 的情况下 后者 已经 不再 做 这 样 的 检查
3
2 新版功能
 函数 被用来 析 构 旧 类型 函数 的参数列表—— 这些函数 使用 的 metholdargs  参数 解析 方法 已从 python 3 中移除
 这 不 被 推荐 用 于 新 代码 的 参数 解析 并且 在 标准 解释器中 的 大多数 代码 已 被修改 已 不再 用 于 该 目 的
 它 仍然 方 便 于 分 解 其他 元组 然而 可能 因为 这 个 目 的 被 继续 使用
 一个 更简单 的 参数 提取 方式 它 不 使用 格式字符串 来指定 参数 类型
 使用 这 种方法 来 提取 参数的函数 应当 在 函数 或 方法 表 中 被 声明为 methvarargs
 包含 实际 参数 的 元组 应当 作为 args  传入 它必须 确实 是 一个元组
 元组 的长度 必须 至少 为 min  并且不 超过 maxmin  和 max  可能 相等
 额外的 参数必须 被 传入 函数 每个 参数必须是 一个指向 pyobject  变量 的 指针 它们将 以 来自 args  的 值 填充 它们将 包含 暂 借 的 引用
 对应于 可 选参数 的 变量 不 会 由 args  给出的 值 填充 它们将 由 调用者 来 初始化
 此 函数 执行 成功时返回 真值 如果 args  不 是 元组 或者 包含 错误 数量的 元素 则返回 假值 如果 执行 失败 则 将 设置 一个异常
 这是一个 使用 此 函数 的 示例 取 自 weakref  帮助 模块 用来 弱 化 引用 的 源 代码 static  pyobject  weakrefrefpyobject  self  pyobject  args  pyobject  object  pyobject  callback  null  pyobject  result  null  if  pyargunpacktupleargs  ref 12 object  callback  result  pyweakrefnewrefobject  callback  return  result  这个例子 中 调用 pyargunpacktuple  完全 等价于 调用 pyargparsetuple  pyargparsetupleargs  ooref  object  callback
 创建 变量
 基于 类似于 pyargparse  函数 系列 和 一系列 值 的 格式字符串 创建新 值
 在 出现 错误时 返回值 或 null  如果 返回 null  将 引发异常
 pybuildvalue  并 不 一 直 创建一个 元组
 只有 当 它 的 格式化字符串 包含 两个 或更多 的 格式单元 才会 创建一个 元组
 如果 格式化字符串 是 空 它 返回 none  如果它 包含一个 格式单元 它 返回 由 格式单元 描述 的 的 任 一 对象
 用 圆括号 包 裹 格式化字符串 可以 强制 它 返回 一个 大小 为0 或者1 的 元组
 当 内存 缓存 区 的 数据 以 参数 形式 传递 用 来构建 对象 时 如 s  和 s  格式 单元 会 拷贝 需要 的 数据
 调用者 提供的 缓冲区 从 来 都 不会被 由 pybuildvalue  创建 的 对象 来 引用
 换句话说 如果你 的 代码 调用 malloc  并且 将 分配 的内存 空间 传递给 pybuildvalue  你的代码 就 有 责 任 在 pybuildvalue  返回 时 调用 free 
 在 下面的 描述 中 双引号 的 表达式 使 格式单元 圆括号 内 的 是 格式单元 将 要 返回 的 python  对象类型 方括号 内 的 是 传递 的 c  变量 变量 集 的 类型
 字符 例如 空格 制表符 冒号 和 逗号 在 格式化字符串 中 会被忽略 但是 不包括 格式单元 如 s
 这 可以使 很长 的 格式化字符串 具有 更好的 可读性
 s  str  或 none  const  char  使用 utf 8 编码 将 空 终止 的 c  字符串 转换为 python  str  对象
 如果 c  字符串 指针 为 null  则 使用 none
 s  str  或 none  const  char  int  或 pyssizet  使用 utf 8 编码 将 c  字符串 及其 长度 转换为 python  str  对象
 如果 c  字符串 指针 为 null  则 长度 将被忽略 并返回 none
 y  bytes  const  char  这 将 c  字符串 转换为 python  bytes  对象
 如果 c  字符串 指针 为 null  则返回 none
 y  bytes  const  char  int  或 pyssizet  这 会 将 c  字符串 及其 长度 转换为 一个 python  对象
 如果该 c  字符串 指针 为 null  则返回 none
 z  str  or  none  const  char  和 s  一样
 z  str  或 none  const  char  int  或 pyssizet  和 s  一样
 u  str  const  wchart  将 空 终止 的 wchart  的 unicode  utf 16 或 ucs 4 数据 缓冲区 转 换为 python  unicode  对象
 如果 unicode  缓冲区 指针 为 null  则 返回 none
 u  str  const  wchart  int  或 pyssizet  将 unicode  utf 16 或 ucs 4 数据 缓冲区 及其 长度 转换为 python  unicode  对象
 如果 unicode  缓冲区 指针 为 null  则 长度 将被忽略 并返回 none
 u  str  或 none  const  char  和 s  一样
 u  str  或 none  const  char  int  或 pyssizet  和 s  一样
 i  int  int  将 一个 c  int  整型转化成 python  整型 对象
 b  int  char  将 一个 c  char  字符 型转化成 python  整型 对象
 h  int  short  int  将 一个 c  short  int  短 整型转化成 python  整型 对象
 l  int  long  int  将 一个 c  long  int  长 整型转化成 python  整型 对象
 b  int  unsigned  char  将 一个 c  unsigned  char  无符号 字符 型转化成 python  整型 对象
 h  int  unsigned  short  int  将 一个 c  unsigned  long  无符号 短 整型转化成 python  整型 对象
 i  int  unsigned  int  将 一个 c  unsigned  long  无符号 整型转化成 python  整型 对象
 k  int  unsigned  long  将 一个 c  unsigned  long  无符号 长 整型转化成 python  整型 对象
 l  int  long  long  将 一个 c  long  long  长 长整 形 转化成 python  整 形 对象
 k  int  unsigned  long  long  将 一个 c  unsigned  long  long  无符号 长 长 整型转化成 python  整型 对 象
 n  int  pyssizet  将 一个 c  pyssizet  类型 转化为 python  整型
 c  bytes  长度为1 char  将 一个 c  int  整型 代表 的 字符 转化为 python  bytes  长度为1 的 字 节 对象
 c  str  长度为1 int  将 一个 c  int  整型 代表 的 字符 转化为 python  str  长度为1 的 字符 串对象
 d  float  double  将 一个 c  double  双精度 浮点数 转化为 python  浮点数 类型 数字
 f  float  float  将 一个 c  float  单 精度 浮点数 转化为 python  浮点数 类型 数字
 d  complex  pycomplex  将 一个 c  pycomplex  类型 的 结构 转化为 python  复数 类型
 o  object  pyobject  将 python  对象 传递 不变 其 引用计数 除外 该 计数 由1 递 增
 如果 传入的 对象 是 null  指针 则 假定 这 是由于 生成 参数 的 调用 发 现 错误 并 设置 异常 而 引 起 的
 因此 pybuildvalue  将 返回 null  但不会 引发异常
 如果 尚未 引发异常 则 设置 systemerror
 s  object  pyobject  和 o  相同
 n  object  pyobject  和 o  相同 然而 它并不 增加 对象 的引用计数
 当 通过调用 参数列表 中 的 对象 构造器 创建 对象 时 很 实 用
 o  object  converter  anything  通过 converter  函数 将 anything  转换为 python  对象
 该函数 调 用 时 会 传入 anything  应 与 void  兼容 作为参数 并且 应当 返回 一 个新的 python  对象或者 当 发生错误 时返回 null
 items  tuple  matchingitems  将 一个 c  变量 序列 转换成 python  元组 并 保持 相同 的 元素 数量
 items  list  相关的 元素 将 一个 c  变量 序列 转换成 python  列表并 保持 相同 的 元素 数量
 items  dict  相关的 元素 将 一个 c  变量 序列 转换成 python  字典
 每一 对 连续 的 c  变量 对 作为一个 元素 插入 字典中 分别 作为 关键字 和 值
 如果 格式字符串 中出现 错误 则 设置 systemerror  异常并返回 null
 和 pybuildvalue  相同 然而 它接受一个 valist  类型 的 参数 而不是 可变 数量的 参数 集
 列表对象
pylistobject  这 个 c  类型 pyobject  的子类型 代表一个 python  列表对象
pytypeobject  pylisttype  这是 个 属于 pytypeobject  的 代表 python  列表 类型的实例
 在 python  层 面 和 类型 list  是 同 一个 对象
int  pylistcheckpyobject   p  如果 p  是一个 列表对象 或者是一个 列表 类型 的子类型 实例时 返回真
int  pylistcheckexactpyobject   p  当 p  是一个 列表对象 但是 不 是 列表 类型 的子类型 实例时 返回真
 成功时返回 一个 长度为 len  的 新 列表 失败时返回 null
 注解 当 len  大于 零 时 被 返回 的 列表对象 项目 被 设 成 null
 因此你 不 能 用 类似 c  函数 pysequencesetitem  的 抽象 api  或者 用 c  函数 pylistsetitem  将所有 项目 设置 成 真 实 对象 前 对 python  代码 公开 这 个 对象
pyssizet  pylistsizepyobject   list  返回 list  中 列表对象 的长度 这 等于 在 列表对象 调用 lenlist 
pyssizet  pylistgetsizepyobject   list  宏 版本 的 c  函数 pylistsize  没有 错误 检测
 返回 list  所指向 列表中 index  位置 上 的 对象
 位置 值 必须为 非 负数 不支持 从 列表 末尾 进行 索引
 如果 index  超出 边界0 or  lenlist  则返回 null  并设置 indexerror  异常
 宏 版本 的 c  函数 pylistgetitem  没有 错误 检测
int  pylistsetitempyobject   list  pyssizet   index  pyobject   item  将 列表中 索引 为 index  的 项 设 为 item
 成功时返回0
 如果 index  超出 范围 则返回1 并 设 定 indexerror  异常
 注解 此函数会 偷 走 一个 对 item  的 引用 并 丢弃 一个 对 列表中 受 影响 位置 上 的 已 有 条目 的 引用
void  pylistsetitempyobject   list  pyssizet   i  pyobject   o  不带 错误 检测 的 宏 版本 pylistsetitem
 这通常 只 被用于 新 列表中 之 前 没有 内容的 位置 进行 填充
 注解 该 宏 会 偷 走 一个 对 item  的 引用 但 与 pylistsetitem  不同的 是 它 不 会 丢弃 对 任何 被替换 条目 的 引用 在 list  的 i  位置 上 的 任何 引用 都 将 被 泄 露
int  pylistinsertpyobject   list  pyssizet   index  pyobject   item  将 条目 item  插入 到 列表 list  索引号 index  之前的 位置
 如果 成 功 将 返回0 如果不 成功 则返回1 并设置 一个异常
 相当于 list
int  pylistappendpyobject   list  pyobject   item  将 对象 item  添加到 列表 list  的末尾
 如果 成功 将 返回0 如果不 成功 则返回1 并设置 一个异常
 相当于 list
 返回 一个 对象 列表 包含 list  当 中 位于 low  和 high  之间 的 对 象
 如果不 成功 则返回 null  并设置 异常
 相当于 listlowhigh
 不支持 从 列表 末尾 进行 索引
int  pylistsetslicepyobject   list  pyssizet   low  pyssizet   high  pyobject   itemlist  将 list  当 中 low  与 high  之间的 切片 设 为 itemlist  的内容
 相当于 listlowhigh  itemlist
 itemlist  可以为 null  表示 赋值为 一个 空列表 删除 切片
 成功时返回0 失败时返回1
 这 里 不支持 从 列表 末尾 进行 索引
int  pylistsortpyobject   list  对 list  中 的 条目 进行 原地 排序
 成功时返回0 失败时返回1
 这等价于 list
int  pylistreversepyobject   list  对 list  中 的 条目 进行 原地 反 转
 成功时返回0 失败时返回1
 这等价于 list
 返回一个新的 元组 对象 其中包含 list  的内容 等价于 tuplelist 
 引用计数
none  对象
 请注意 none  的 pytypeobject  不 会直接 在 python  c  api  中 公开
 由 于 none  是 单 例 测试 对象 标识 在 c  中 使用 就 足够 了
 由 于 同样 的原因 没有 pynonecheck  函数
pyobject  pynone  python  none  对象 表示 缺 乏 值
 这个对象 没有 方法
 它需要 像 引用计 数 一样 处理 任何其他 对象
pyreturnnone  正确 处理 来自 c  函数 内 的 pynone  返回 也就是说 增加 none  的 引用 计数 并返回 它

 字节数组 对象
pybytearrayobject  这 个 pyobject  的子类型 表示一个 python  字节数组 对象
pytypeobject  pybytearraytype  python  bytearray  类型 表示为 pytypeobject  的 实例 这 与 python  层 面 的 bytearray  是 相同 的 对象
 类型检查 宏
int  pybytearraycheckpyobject   o  当 对象 o  是一个 字节数组 对象 而且 是一个 字节数组 类型 的子类型 实例时 返回真
int  pybytearraycheckexactpyobject   o  当 对象 o  是一个 字节数组 对象 但 不是一个 字节数组 类型 的子类型 实例时 返回真
 直接 api  函数
 根据 任何 实现了 缓冲区 协议 的 对象 o  返回一个新的 字节数组 对象
 根据 string  及其 长度 len  创建一个新的 bytearray  对象
 当 失败时 返回 null
 连接 字节数组 a  和 b  并返回一个 带有 结果的 新 的 字节数组
pyssizet  pybytearraysizepyobject   bytearray  在 检查 null  指针 后 返回 bytearray  的大小
char  pybytearrayasstringpyobject   bytearray  在 检查 null  指针 后 返回 将 bytearray  返回 为 一个字符 数组
 返回 的 数组 总是会 附加 一个 额外的 空 字节
int  pybytearrayresizepyobject   bytearray  pyssizet   len  将 bytearray  的 内部 缓冲区 的大小 调整 为 len
 宏
 这些 宏 减 低 安全 性 以 换 取 性能 它们不 检查 指针
char  pybytearrayasstringpyobject   bytearray  c  函数 pybytearrayasstring  的 宏 版本
pyssizet  pybytearraygetsizepyobject   bytearray  c  函数 pybytearraysize  的 宏 版本
 内存管理
 概述
 在 python  中 内存管理 涉及 到 一个包含 所有 python  对象 和 数据结构 的 私有 堆 heap
 这 个 私有 堆 的 管理 由 内部 的 python  内存管理器 python  memorymanager  保证
python  内存管理器 有不同 的 组件 来处理 各种 动态 存储 管理 方面 的 问题 如 共享、 分 割、 预 分配 或 缓存
 在 最 底层 一个 原始 内存分配器 通过 与 操作系统的 内存管理器 交互 确保 私有 堆中 有 足够的 空间 来 存储 所有 与 python  相关的 数据
 在 原始 内存分配器 的基础 上 几个 对象 特定的 分配器 在同一 堆 上 运行 并 根据 每 种 对象类型的 特 点 实现 不同的 内存管理 策略
 例如 整数 对象 在 堆 内 的 管理 方式 不同于 字符串、 元组或 字典 因为 整数 需要 不同的 存储 需求 和 速度 与 空间 的 权 衡
 因此 python  内存管理器 将 一些 工作 分配 给 对象 特定 分配器 但 确保 后者 在 私有 堆 的 范围内 运行
python  堆 内存 的 管理 是 由 解释器 来执行 用户 对 它 没有 控制 权 即使 他们 经常 操作 指向 堆 内 内存块的 对象 指针 理解 这一点 十分 重要
python  对象 和其他 内部 缓冲区 的 堆 空间 分配 是 由 python  内存管理器 按 需 通过 本文档 中 列出的 pythonc  api  函数 进行 的
 为 了 避免 内存 破坏 扩展 的 作者 永远不 应该 试 图 用 c  库 函数 导出 的 函数来 对 python  对象进行 操作 这些函数 包括 malloc  callocrealloc  和 free
 这 将导致 c  分配器 和 python  内存管理器 之间的 混 用 引发 严重 后 果 这 是由于 它们 实现了 不同 的算法 并 在不同的 堆 上 操作
 但是 我们可以 安全地 使用 c  库 分配器 为 单独的 目 的 分配 和 释放 内存块 如 下 例 所示 pyobject  res  char  buf  char  mallocbufsiz  for  io  if  buf  null  return  pyerrnomemory 
 res  pybytesfromstringbuf  freebuf  malloced  return  res  在 这个例子 中 io  缓冲区 的内存 请求 是 由 c  库 分配器 处理 的
python  内存管理器 只 参 与 了 分配 作为 结果 返回 的 字节 对象
 然而 在大多数情况下 建议 专门 从 python  堆中 分配 内存 因为 后者 由 python  内存管理器 控制
 例如 当 解释器 扩展 了 用 c  写 的 新 对象类型 时 就必须 这样做
 使用 python  堆 的 另一个 原因 是 希望 通知 python  内存管理器 关于 扩展模块 的内存 需求
 即使 所 请求的 内存 全部 只 用 于 内部 的、 高度 特定的 目 的 将所有 的内存 请求 交 给 python  内存管理器 能 让 解释器 对 其 内存 占 用 的 整 体 情况 有 更 准确 的 了解
 因此在 某些 情况下 python  内存管理器 可能会 触发 或 不 触发 适当的 操作 如 垃圾回收、 内存 压缩 或其他 预 防 性 操作
 请注意 通过使用 前面 例子中 所示 的 c  库 分配器 为 io  缓冲区 分配 的内存 会 完全 不受 python  内存管理器 管理
 参见 环境变量 pythonmalloc  可被用来 配置 python  所使用的 内存分配器
 环境变量 pythonmallocstats  可以用来 在每次 创建 和 关闭 新 的 pymalloc  对象 区域 时 打印 pymalloc  内存分配器 的 统计 数据
 原始 内存 接口
 内存 接口
 对象 分配器
 以下函数 集 仿 照 ansi  c  标准 并 指定了 请求 零 字节 时 的 行为 可用于 从 python  堆 分配 和 释放 内存
 默认 对象 分配器 使用 pymalloc  内存分配器
 警告 在 使用 这些函数 时 必须 持 有 全局 解释器 锁 gil 
void  pyobjectmallocsizet   n  分配 n  个字节 并返回一个 指向 分配 的内存 的 void  类型 指针 如果 请 求 失败 则返回 null
 请求 零 字节 可能 返回 一个独 特 的 非 null  指针 就像 调用 了 pyobjectmalloc 1 一样
 但是 内存 不 会 以 任何 方式 被初始化
void  pyobjectcallocsizet   nelem  sizet   elsize  分配 nelem  个元素 每个元素 的大小 为 elsize  字节 并返回 指向 分配 的内存 的 void  类型 指针 如果 请求 失败 则返回 null
 内存 会 被 初始 化 为零
 请求 零 字节 可能 返回 一个独 特 的 非 null  指针 就像 调用 了 pyobjectcalloc 11 一样
3
5 新版功能
void  pyobjectreallocvoid   p  sizet   n  将 p  指向 的内存块 大小 调整 为 n  字节
 以 新 旧 内存块 大小 中 的最小 值 为 准 其 中 内容 保持 不变 如果 p  是 null  则 相当于 调用 pyobjectmallocn  如果 n  等 于0 则 内存块 大小 会 被 调整 但 不会被 释放 返回 非 null  指针
 除非 p  是 null  否则 它必须 是 之前 调用 pyobjectmalloc 、 pyobjectrealloc  或 pyobjectcalloc  所返回的
 如果 请求 失败 pyobjectrealloc  返回 null  p  仍然 是 指向 先 前 内存 区域 的 有效 指针
void  pyobjectfreevoid   p  释放 p  指向 的内存块
 p  必须是 之前 调用 pyobjectmalloc 、 pyobjectrealloc  或 pyobjectcalloc  所返回的 指针
 否则 或 在 pyobjectfreep  之前 已经 调用 过 的情况下 未定义 行为 会发生
 如果 p  是 null  那么 什么 操作 也不 会 进行
 默认 内存分配器
 默认 内存分配器 配置 名称 pymemrawmalloc  pymemmalloc  pyobjectmalloc  发布 版本 pymalloc  malloc  pymalloc  pymalloc  调试 构建 pymallocdebug  malloc  debug  pymalloc  debug  pymalloc  debug  没有 pymalloc  的 发布 版本 malloc  malloc  malloc  malloc  没有 pymalloc  的 调试 构建 mallocdebug  malloc  debug  malloc  debug  malloc  debug  说明 名称 环境变量 pythonmalloc  的 值 malloc  来自 c  标准库 的 系统 分配 c  函数 malloc  calloc  realloc  and  free  pymalloc  pymalloc  内存分配器 debug  带有 pymemsetupdebughooks  安装 的 调试 钩子
 自定义 内存分配器
pymalloc  分配器
python  有 为具有 短 生 命 周期 的 小 对象 小于 或 等于512 字节 优化 的 pymalloc  分配器
 它 使用 固定 大小 为256 kib  的 称为 arenas  的内存 映射
 对 于 大于512 字节 的 分配 它 回 到 使用 pymemrawmalloc  和 pymemrawrealloc 
pymalloc  是 pymemdomainmem  例如 pymemmalloc  和 pymemdomainobj  例如 pyobjectmalloc  域 的 默认 分配器
arena  分配器 使用以下 函数 windows  上 的 virtualalloc  和 virtualfree  mmap  和 munmap  如果可 用 否则 malloc  和 free 
 自定义 pymalloc  arena  分配器
tracemalloc  c  api
3
7 新版功能
int  pytracemalloctrackunsigned  int   domain  uintptrt   ptr  sizet   size  在 tracemalloc  模块 中 跟踪 一个 已 分配 的内存块
 成功时返回0 出错 时返回1 无法 分配 内存 来 保存 跟踪 信息
 如果 禁用 了 tracemalloc  则返回2
 如果 内存块 已被 跟踪 则 更新 现有 跟踪 信息
int  pytracemallocuntrackunsigned  int   domain  uintptrt   ptr  在 tracemalloc  模块 中 取消 跟踪 一个 已 分配 的内存块
 如果 内存块 未被 跟踪 则 不 执行任何 操作
 如果 tracemalloc  被 禁用 则返回2 否则返回0
 示例
 以下是 来自 概述 小节 的 示例 经过 重写 以 使 io  缓冲区 是 通过使用 第一个 函数 集 从 python  堆中 分配 的 pyobject  res  char  buf  char  pymemmallocbufsiz  for  io  if  buf  null  return  pyerrnomemory 
 res  pybytesfromstringbuf  pymemfreebuf  allocated  with  pymemmalloc  return  res  使用 面向 类型 函数 集 的 相同 代码 pyobject  res  char  buf  pymemnewchar  bufsiz  for  io  if  buf  null  return  pyerrnomemory 
 res  pybytesfromstringbuf  pymemdelbuf  allocated  with  pymemnew  return  res  请注意 在 以 上 两个 示例中 缓冲区 总是 通过 归 属于 相同 集 的 函数来 操 纵 的
 事实 上 对于一个 给定的 内存块 必须使用 相同 的内存 api  族 以便 使得 混合 不同 分配器 的 风 险 减 至 最低
 以下代码 序列 包含 两 处 错误 其中一个 被 标记为 fatal  因为它 混合 了 两种 在不同 堆 上 操作 的不同 分配器
 pymemdelbuf 3 wrong  should  be  pymemfree  freebuf 2 right  allocated  via  malloc  freebuf 1 fatal  should  be  pymemdel  除了 旨在 处理 来自 python  堆 的 原始 内存块的 函数 之外 python  中 的 对象 是通过 pyobjectnew  pyobjectnewvar  和 pyobjectdel  来 分配 和 释放 的
 这些 将 在 有关 如何在 c  中定义 和 实现 新 对象类型的 下 一章 中 讲 解
common  object  structures
base  object  types  and  macros
3
9 新版功能
3
9 新版功能
3
9 新版功能
3
9 新版功能
implementing  functions  and  methods
 the  function  signature  is  pyobject  pycmethodpyobject  self  pytypeobject  definingclass  pyobject  const  args  pyssizet  nargs  pyobject  kwnames 3
9 新版功能
 this  structure  has  four  fields  域 c  类型 意义 mlname  const  char  name  of  the  method  mlmeth  pycfunction  pointer  to  the  c  implementation  mlflags  int  flag  bits  indicating  how  the  call  should  be  constructed  mldoc  const  char  points  to  the  contents  of  the  docstring  the  mlmeth  is  a  c  function  pointer
3
7 新版功能
3
7 新版功能
3
9 新版功能
accessing  attributes  of  extension  types
 its  fields  are  域 c  类型 意义 name  const  char  name  of  the  member  type  int  the  type  of  the  member  in  the  c  struct  offset  pyssizet  the  offset  in  bytes  that  the  member  is  located  on  the  types  object  struct  flags  int  flag  bits  indicating  if  the  field  should  be  readonly  or  writable  doc  const  char  points  to  the  contents  of  the  docstring  type  can  be  one  of  many  t  macros  corresponding  to  various  c  types
 macro  name  c  数据类型 tshort  short  tint  int  tlong  长整型 tfloat  float  tdouble  double  tstring  const  char  tobject  pyobject  tobjectex  pyobject  tchar  char  tbyte  char  tubyte  unsigned  char  tuint  无符号 整型 tushort  unsigned  short  tulong  无符号 长整型 tbool  char  tlonglong  long  long  tulonglong  无符号 long  long  tpyssizet  pyssizet  tobject  and  tobjectex  differ  in  that  tobject  returns  none  if  the  member  is  null  and  tobjectex  raises  an  attributeerror
 域 c  类型 意义 name  const  char  attribute  name  get  getter  c  function  to  get  the  attribute  set  setter  optional  c  function  to  set  or  delete  the  attribute  if  omitted  the  attribute  is  readonly  doc  const  char  optional  docstring  closure  void  optional  function  pointer  providing  additional  data  for  getter  and  setter  the  get  function  takes  one  pyobject  parameter  the  instance  and  a  function  pointer  the  associated  closure  typedef  pyobject  getterpyobject  void  it  should  return  a  new  reference  on  success  or  null  with  a  set  exception  on  failure
 整数 型对象
 上下文变量 对象
datetime  对象
datetime  模块提供了 各种 日期和时间 对象
 在 使用 任何 这些函数 之前 必须 在你的 源码 中包含 头文件 datetime
h  请注意此 文件 并 未 包含在 python
h  中 并且 宏 pydatetimeimport  必须 被 发起调用 通常 是作为 模块 初始化 函数 的一部分
 这 个 宏 会 将 指向 特定 c  结构 的 指针 放入 一个 静态 变量 pydatetimeapi  中 它 会 由 下面的 宏 来 使用
 宏 访问 utc  单 例 pyobject  pydatetimetimezoneutc  返回 表示 utc  的时区 单 例 与 datetime
utc  为 同一 对象
3
7 新版功能
 类型检查 宏 int  pydatecheckpyobject   ob  如果 ob  为 pydatetimedatetype  类型 或 pydatetimedatetype  的 某个 子类型 则返回真值
 ob  不能为 null
int  pydatecheckexactpyobject   ob  如果 ob  为 pydatetimedatetype  类型 则返回真值
 ob  不能为 null
int  pydatetimecheckpyobject   ob  如果 ob  为 pydatetimedatetimetype  类型 或 pydatetimedatetimetype  的某个 子类型 则返回真值
 ob  不能为 null
int  pydatetimecheckexactpyobject   ob  如果 ob  为 pydatetimedatetimetype  类型 则返回真值
 ob  不能为 null
int  pytimecheckpyobject   ob  如果 ob  的 类型 是 pydatetimetimetype  或 是 pydatetimetimetype  的子类型 则返回真值
 ob  必须不为 null
int  pytimecheckexactpyobject   ob  如果 ob  的 类型 是 pydatetimetimetype  则返回真值
 ob  必须不为 null
int  pydeltacheckpyobject   ob  如果 ob  为 pydatetimedeltatype  类型 或 pydatetimedeltatype  的某个 子类型 则返回真值
 ob  不能为 null
int  pydeltacheckexactpyobject   ob  如果 ob  为 pydatetimedeltatype  类型 则返回真值
 ob  不能为 null
int  pytzinfocheckpyobject   ob  如果 ob  为 pydatetimetzinfotype  类型 或 pydatetimetzinfotype  的某个 子类型 则返回真值
 ob  不能为 null
int  pytzinfocheckexactpyobject   ob  如果 ob  的 类型 是 pydatetimetzinfotype  则返回真值
 ob  不能为 null
 用于创建 对象 的 宏 pyobject  pydatefromdateint   year  int   month  int   day  return  value  new  reference
 返回 指定 年、 月、 日 的 datetime
date  对象
 返回 具有 指定 year  month  day  hour  minute  second  和 microsecond  属性 的 datetime
datetime  对象
 返回 具有 指定 year  month  day  hour  minute  second  microsecond  和 fold  属性 的 datetime
datetime  对象
3
6 新版功能
 返回 具有 指定 hour  minute  second  and  microsecond  属性 的 datetime
time  对象
 返回 具有 指定 hour  minute  second  microsecond  和 fold  属性 的 datetime
time  对象
3
6 新版功能
 返回 代表 给定 天、 秒 和 微 秒数 的 datetime
timedelta  对象
 将 执行 正 规 化 操作 以 使 最终 的 微 秒 和 秒数 处 在 datetime
timedelta  对象 的 文档 指明 的 区 间 之内
 返回 一个 datetime
timezone  对象 该 对象具有 以 offset  参数 表示 的 未 命名 固定 时差
3
7 新版功能
 返回 一个 datetime
timezone  对象 该 对象具有 以 offset  参数 表示 的 固定 时差 和 时区 名称 name
3
7 新版功能
 一些 用来 从 date  对象 中提取 字段 的 宏
 参数必须是 pydatetimedate  包括 其子类 例如 pydatetimedatetime  的 实例
 参数 必须不为 null  并且 类型 不 被 会 检查 int  pydatetimegetyearpydatetimedate   o  以 正整数 的 形式返回 年份 值
int  pydatetimegetmonthpydatetimedate   o  返回 月 从0 到12 的 整数
int  pydatetimegetdaypydatetimedate   o  返回 日期 从0 到31 的 整数
 一些 用来 从 datetime  对象 中提取 字段 的 宏
 参数必须是 pydatetimedatetime  包括 其 子 类的实例
 参数 必须不为 null  并且 类型 不会被 检查 int  pydatetimedategethourpydatetimedatetime   o  返回 小 时 从0 到23 的 整数
int  pydatetimedategetminutepydatetimedatetime   o  返回 分 钟 从0 到59 的 整数
int  pydatetimedategetsecondpydatetimedatetime   o  返回 秒 从0 到59 的 整数
int  pydatetimedategetmicrosecondpydatetimedatetime   o  返回 微 秒 从0 到999999 的 整数
 一些 用来 从 time  对象 中提取 字段 的 宏
 参数必须是 pydatetimetime  包括 其 子 类的实例
 参数 必须不为 null  并且 类型 不会被 检查 int  pydatetimetimegethourpydatetimetime   o  返回 小 时 从0 到23 的 整数
int  pydatetimetimegetminutepydatetimetime   o  返回 分 钟 从0 到59 的 整数
int  pydatetimetimegetsecondpydatetimetime   o  返回 秒 从0 到59 的 整数
int  pydatetimetimegetmicrosecondpydatetimetime   o  返回 微 秒 从0 到999999 的 整数
 一些 用来 从 timedelta  对象 中提取 字段 的 宏
 参数必须是 pydatetimedelta  包括 其 子 类的实例
 参数 必须不为 null  并且 类型 不会被 检查 int  pydatetimedeltagetdayspydatetimedelta   o  返回 天 数 从999999999 到999999999 的 整数
3
3 新版功能
int  pydatetimedeltagetsecondspydatetimedelta   o  返回 秒数 从0 到86399 的 整数
3
3 新版功能
int  pydatetimedeltagetmicrosecondspydatetimedelta   o  返回 微 秒数 从0 到999999 的 整数
3
3 新版功能
 一些 便 于 模块 实现 db  api  的 宏 pyobject  pydatetimefromtimestamppyobject   args  return  value  new  reference
 创建并返回 一个 给定 元组 参数 的 新 datetime
datetime  对象 适合 传给 datetime
 创建并返回 一个 给定 元组 参数 的 新 datetime
date  对象 适合 传给 datetime
 工具
 本章中 的 函数 执行 各种 实 用 工具 任务 包括 帮助 c  代码 提升 跨平台 可移植 性 在 c  中 使用 python  模块 以及 解析 函数 参数 并 根据 c  中的值 构建 python  中的值 等等
 操作系统 实 用 程序 系统 功能 过程 控制 导入模块 数据 marshal  操作 支持 语句 解释 及 变量 编译 解析 参数 字符串 和 缓存 区 数字 其他对象 api  函数 创建 变量 字符串转换 与 格式化 反 射 编解码器 注册 与 支持 功能 codec  查找 api  用 于 unicode  编码 错误 处理程序 的 注册表 api
memoryview  对象
 一个 memoryview  对象 c  级别 的 缓冲区接口 暴 露 为 一个可以 像 任何其他 对象 一样 传递 的 python  对象
 从 提供 缓冲区接口 的 对象 创建 memoryview  对象
 如果 obj  支持 可 写 缓 冲区 导出 则 memoryview  对象 将 可以被 读写 否则 它 可能是 只读 的 也可 以 是 导出 器 自 行 决定 的 读写
 使用 mem  作为 底层 缓冲区 创建一个 memoryview  对象
 flags  可以是 pybufread  或者 pybufwrite  之一
3
3 新版功能
 创建 一个包含 给定 缓冲区 结构 view  的 memoryview  对象
 对 于 简单的 字 节 缓冲区 pymemoryviewfrommemory  是 首选 函数
 从 定义 缓冲区接口 的 对象 创建一个 memoryview  对象 contiguous  内存块 在 c  或 fortran  order  中
 如果 内存 是 连续 的 则 memoryview  对象 指向 原始 内存
 否则 复制 并且 memoryview  指向 新 的 bytes  对象
int  pymemoryviewcheckpyobject   obj  如果对象 obj  是 memoryview  对象 则返回 true 
 目前 不允许 创建 memoryview  的子类
pybuffer  pymemoryviewgetbufferpyobject   mview  返回 指向 memoryview  的 导出 缓冲区 私有 副本 的 指针
 mview  必须 是一个 memoryview  实例 这 个 宏 不 检查 它 的 类型 你必须 自己 检查 否则 你 将 面 临 崩 溃 风 险
pybuffer  pymemoryviewgetbasepyobject   mview  返回 memoryview  所 基于 的 导出 对象 的 指针 或者如果 memoryview  已 由 函 数 pymemoryviewfrommemory  或 pymemoryviewfrombuffer  创建 则返回 null
 mview  必须 是一个 memoryview  实例
 数据 marshal  操作 支持
 这些 例 程 允许 c  代码 处理 与 marshal  模块 所 用 相同 数据格式 的 序列化 对象
 其 中 有 些函数 可用来 将 数据 写入 这种 序列化 格式 另一 些函数 则 可用来 读取并 恢复 数据
 用 于 存储 marshal  数据 的 文件 必须 以 二进制模式 打开
 数字 值 在 存储 时 会 将 最低 位 字节 放在 开头
 此模块 支持 两种 数据格式 版本 第0 版 为 历史 版本 第1 版本 会 在 文件 和 marshal  反序列化 中 共享 固 化 的 字符串
 第2 版本 会 对 浮点数 使用 二进制 格式
 pymarshalversion  指明 了 当前 文件 的 格式 当前 取值 为2
void  pymarshalwritelongtofilelong   value  file   file  int   version  将 一个 long  整数 value  以 marshal  格式 写入 file
 这 将 只 写入 value  最低 的32 位 无论 本机 long  类型 的长度 如何
 version  指 明 文件格式 的 版本
void  pymarshalwriteobjecttofilepyobject   value  file   file  int   version  将 一个 python  对象 value  以 marshal  格式 写入 file
 version  指明 文件格式 的 版本
 返回 一个包含 value  的 marshal  表示形式 的 字节串对象
 version  指 明 文件格式 的 版本
 以下函数 允许 读取并 恢复 存储为 marshal  格式 的 值
long  pymarshalreadlongfromfilefile   file  从 打开 用 于 读取 的 file  的对应 数据流 返回 一个 c  long
 使用 只 函数 只能 读取32 位 的 值 无论 本机 long  类型 的 长度为 何
 发生错误 时 将 设置 适当的 异常 eoferror  并返回1
int  pymarshalreadshortfromfilefile   file  从 打开 用 于 读取 的 file  的对应 数据流 返回 一个 c  short
 使用 此 函 数 只能 读取16 位 的 值 无论 本机 short  类型 的 长度为 何
 发生错误 时 将 设置 适当的 异常 eoferror  并返回1
 从 打开 用 于 读取 的 file  的对应 数据流 返回 一个 python  对象
 发生错误 时 将 设置 适当的 异常 eoferror  valueerror  或 typeerror  并返回 null
 从 打开 用 于 读取 的 file  的对应 数据流 返回 一个 python  对象
 不同于 pymarshalreadobjectfromfile  此 函数 假定 将不再 从 该文件 读取 更多 的 对象 允许 其 将 文件 数据 积 极 地 载入 内存 以便 反序列化 过程 可以在 内存 中 的 数据 上 操作 而不是 每次 从 文件 读取 一个字节
 只有 当你 确定 不会再 从 文 件 读取 任何 内容 时 方 可 使用 此 形式
 发生错误 时 将 设置 适当的 异常 eoferror  valueerror  或 typeerror  并返回 null
 从 包含 指向 data  的 len  个字节 的 字节 缓冲区 对应的 数据流 返回 一个 python  对象
 发生错误 时 将 设置 适当的 异常 eoferror  valueerror  或 typeerror  并返回 null
type  对象
pytypeobject  对象 的 c  结构 用 于 描述 builtin  类型
pyobject  pytypetype  这是 属于 type  对象 的 type  object  它 在 python  层 面 和 type  是 相同 的 对象
int  pytypecheckpyobject   o  如果对象 o  是一个 类型对象 包括 继承 于 标准类型 对象的类型 实例 返回 非零
 在 其 它 所有 情况下 返回0
3
2 新版功能
 在3
4 版更改 the  return  type  is  now  unsigned  long  rather  than  long
3
4 新版功能
3
9 新版功能
3
9 新版功能
creating  heapallocated  types
3
9 新版功能
3
3 新版功能
 在3
9 版更改 slots  in  pybufferprocs  in  may  be  set  in  the  unlimited  api
 对象 实现 支持
 本章 描述了 定义 新 对象类型 时 所使用的 函数、 类型 和 宏
 在 堆中 分配 对象 common  object  structures  base  object  types  and  macros  implementing  functions  and  methods  accessing  attributes  of  extension  types  type  对象 快速 参考 tp  槽 subslots  slot  typedefs  pytypeobject  definition  pyobject  slots  pyvarobject  slots  pytypeobject  slots  heap  types  number  object  structures  mapping  object  structures  sequence  object  structures  buffer  object  structures  async  object  structures  slot  type  typedefs  例子 使 对象类型 支持 循环 垃圾回收
 抽象 对象 层
pythonc  api  参考 手册
 本 手册 描述了 希望 编写 扩展模块 并 将 python  解释器 嵌入 其 应用程序中 的 c  和 c  程序员 可用的 api
 同时 可以 参阅 扩展 和 嵌入 python  解释器 其 中 描述了 扩展 编写 的 一般 原 则 但 没有 详细 描述 api  函数
 概述 代码 标准 包含 文件 有用的 宏 对象、 类型 和 引用计数 异常 嵌入 python  调试 构建 稳定 的 应用程序 二进制 接口 the  very  high  level  layer  引用计数 异常处理 printing  and  clearing  抛出 异常 issuing  warnings  querying  the  error  indicator  signal  handling  exception  classes  exception  objects  unicode  exception  objects  递归 控制 标准 异常 标准 警告 类别 工具 操作系统 实 用 程序 系统 功能 过程 控制 导入模块 数据 marshal  操作 支持 语句 解释 及 变量 编译 字符串转换 与 格式化 反 射 编解码器 注册 与 支持 功能 抽象 对象 层 对象 协议 呼 叫 协议 数字 协议 序列 协议 映射 协议 迭代器 协议 缓冲协议 旧 缓冲协议 具体 的 对象 层 基本 对象 数值 对象 序列对象 容器对象 函数对象 其他对象 initialization  finalization  and  threads  在 python  初始化 之前 全局 配置 变量 initializing  and  finalizing  the  interpreter  processwide  parameters  thread  state  and  the  global  interpreter  lock  subinterpreter  support  异步 通知 分析 和 跟踪 高级 调试器 支持 thread  local  storage  support  python  初始化 配置 pywidestringlist  pystatus  pypreconfig  preinitialization  with  pypreconfig  pyconfig  initialization  with  pyconfig  isolated  configuration  python  configuration  路径 配置 pyrunmain  pygetargcargv  multiphase  initialization  private  provisional  api  内存管理 概述 原始 内存 接口 内存 接口 对象 分配器 默认 内存分配器 自定义 内存分配器 pymalloc  分配器 tracemalloc  c  api  示例 对象 实现 支持 在 堆中 分配 对象 common  object  structures  type  对象 number  object  structures  mapping  object  structures  sequence  object  structures  buffer  object  structures  async  object  structures  slot  type  typedefs  例子 使 对象类型 支持 循环 垃圾回收 api  和 abi  版本 管理
 字典 对象
 迭代器对象
python  提供 了两个 通 用 迭代器对象
 第一个 是 序列 迭代器 它 使用 支持 getitem  方法 的 任意 序列
 第二个 使用 可调用对象 和 一个 sentinel  值 为 序列 中的每个 项 调用 可调用对象 并 在 返回 sentinel  值 时 结束 迭代
pytypeobject  pyseqitertype  pyseqiternew  返回 迭代器 对象的类型 对象 和 内置 序列类型 内置函数 iter  的 单 参数 形式
int  pyseqitercheckop  如果 op  的 类型 为 pyseqitertype  则返回 true
 返回 一个 与 常规 序列对象 一起使用 的 迭代器 seq
 当 序列 订 阅 操作 引发 indexerror  时 迭代 结束
pytypeobject  pycallitertype  由 函数 pycalliternew  和 iter  内置函数 的 双 参数 形式返回 的 迭 代器对象 类型对象
int  pycallitercheckop  如果 op  的 类型 为 pycallitertype  则返回 true
 返回一个新的 迭代器
 第一个参数 callable  可以是任何 可以 在没有 参数 的情况下 调用 的 python  可调用对象 每次 调用 都 应该 返回 迭代 中 的下一个 项目
 当 callable  返回 等于 sentinel  的 值 时 迭代 将 终止
 实例方法 对象
 实例方法 是 pycfunction  的 包装器 也是 将 pycfunction  绑定到 类对象的 一种 新 方式
 它 替代 了 原 先 的 调用 pymethodnewfunc  null  class
pytypeobject  pyinstancemethodtype  这 个 pytypeobject  实例 代表 python  实例方法 类型
 它并不 对 python  程序 公开
int  pyinstancemethodcheckpyobject   o  如果 o  是 实例方法 对象 类型 为 pyinstancemethodtype  则返回真值
 形参 必须不为 null
 返回一个新的 实例方法 对象 func  应 为 任意 可调用对象 func  将 在 实 例 方法 被调用时 作为 函数 被调用
 返回 关联到 实例方法 im  的 函数对象
 宏 版本 的 pyinstancemethodfunction  略 去 了 错误 检测
 具体 的 对象 层
 本章中 的 函数 特定于 某些 python  对象类型
 将 错误 类型的对象 传递给 它们 并 不是一个 好 主 意 如果您 从 python  程序 接收到 一个 对象 但不 确定 它 是否 具有 正确的 类型 则 必须 首先 执行 类型检查 例如要 检查 对象是否 为 字典 请使用 pydictcheck
 本章 的 结构 类似于 python  对象类型的 家 族 树
 警告 虽然 本章 所描述的 函数 会 仔 细 检查 传入 对象的类型 但是 其 中 许多 函数 不 会检 查 传入的 对象是否 为 null
 允许 传入 null  可能导致 内存 访问 冲突 和 解 释器 的 立即 终止
 基本 对象
 本节 描述 python  类型对象 和 单 一 实例对象  象 none
 type  对象 creating  heapallocated  types  none  对象
 数值 对象
 整数 型对象 布尔 对象 浮点数 对象 复数 对象 表示 复数的 c  结构体 表示 复数的 python  对象
 序列对象
 序列对象 的 一般 操作 在 前 一章 中 讨论 过 本节 介绍 python  语言 固 有 的特定 类型 的 序列对象
 字节 对象 字节数组 对象 类型检查 宏 直接 api  函数 宏 unicode  对象 和 编码 解码器 unicode  对象 unicode  类型 unicode  字符 属性 creating  and  accessing  unicode  strings  deprecated  pyunicode  apis  locale  encoding  file  system  encoding  wchart  support  builtin  codecs  generic  codecs  utf 8 codecs  utf 32 codecs  utf 16 codecs  utf 7 codecs  unicodeescape  codecs  rawunicodeescape  codecs  latin 1 codecs  ascii  codecs  character  map  codecs  mbcs  codecs  for  windows  methods  slots  methods  and  slot  functions  元组 对象 结构 序列对象 列表对象
 容器对象
 字典 对象 集合 对象
 函数对象
 函数对象 实例方法 对象 方法 对象 cell  对象 代码对象
 其他对象
 文件对象 模块 对象 initializing  c  modules  singlephase  initialization  multiphase  initialization  lowlevel  module  creation  functions  support  functions  module  lookup  迭代器对象 描述符 对象 切片 对象 ellipsis  对象 memoryview  对象 弱引用对象 capsule  对象 生成器对象 协程对象 上下文变量 对象 datetime  对象
api  和 abi  版本 管理
pyversionhex  是 python  的 版本号 的 整数 形式
 例如如果 pyversionhex  被 置 为0 x 030401 a 2 其 包含的 版本 信息 可以通过 以 下方式 将 其 作为一个32 位 数字 来处理 字节 位 数 大 端 字节序 意义118 pymajorversion 3
1 a 2 中 的32916 pyminorversion 3
1 a 2 中 的431724 pymicroversion 3
1 a 2 中 的142528 pyreleaselevel 0 xa  是 alpha  版本0 xb  是 beta  版本0 xc  发 布 的 候 选 版本 并且0 xf  是 最终 版本 在 这个例子 中 这 个 版本 是 alpha  版本
2932 pyreleaseserial 3
1 a 2 中 的2 最终 版本 用0 因此3
1 a 2 的16 进制 版本号 是0 x 030401 a 2
 所有 提 到 的 宏 都 定义 在 includepatchlevel
 反 射
 返回当前 执行 帧 中 内置函数 的字典 如果 当前 没有 帧 正 在 执行 则返回 线程 状态 的 解释器
 返回当前 执行 帧 中 局部变量 的字典 如果没有 当前 执行 的 帧 则返回 null
 返回当前 执行 帧 中 全局变量 的字典 如果没有 当前 执行 的 帧 则返回 null
 返回当前 线程 状态 的 帧 如果没有 当前 执行 的 帧 则返回 null
 另请参阅 pythreadstategetframe
int  pyframegetbackpyframeobject   frame  获取 frame  为 下 一个 外部 帧
 返回 一个 强 引用 如果 frame  没有 外部 帧 则返回 null
 frame  必须不为 null
3
9 新版功能
int  pyframegetcodepyframeobject   frame  获取 frame  的 代码
 返回 一个 强 引用
 frame  必须不为 null
 结果 帧 的 代码 不能为 null
3
9 新版功能
int  pyframegetlinenumberpyframeobject   frame  返回 frame  当前 正 在 执行 的 行 号
 frame  必须不为 null
const  char  pyevalgetfuncnamepyobject   func  如果 func  是 函数、 类 或 实例对象 则返回 它 的 名称 否则返回 func  的 类型 的 名称
const  char  pyevalgetfuncdescpyobject   func  根据 func  的 类型 返回 描述 字符串
 返回值 包括 函数 和 方法 的 constructor  instance  和 object
 与 pyevalgetfuncname  的结果 连接 结果将 是 func  的描述
 字节 对象
 导入模块
 该 函数总是 使用 绝对 路径 导入
 该函数 是 pyimportimportmodule  的 一个 被弃用 的别名
 在3
3 版更改 this  function  used  to  fail  immediately  when  the  import  lock  was  held  by  another  thread
3 though  the  locking  scheme  switched  to  permodule  locks  for  most  purposes  so  this  functions  special  behaviour  isnt  needed  anymore
3
3 新版功能
 在3
3 版更改 negative  values  for  level  are  no  longer  accepted
 该 函数总是 使用 绝对 路径 导入
 注解 this  function  does  not  load  or  import  the  module  if  the  module  wasnt  already  loaded  you  will  get  an  empty  module  object
3
3 新版功能
 参见 pyimportexeccodemodulewithpathnames
3
3 新版功能
3
2 新版功能
 在3
3 版更改 uses  imp
sourcefromcache  in  calculating  the  source  path  if  only  the  bytecode  path  is  provided
 在3
3 版更改 失败时返回 值1
3
2 新版功能
3
7 新版功能
3
3 新版功能
 在3
4 版更改 the  file  attribute  is  no  longer  set  on  the  module
h  is  struct  frozen  const  char  name  const  unsigned  char  code  int  size  const  struct  frozen  pyimportfrozenmodules  该 指针 被初始化 为 指向 struct  frozen  数组 以 null  或者0 作为 结 束 标记
 当 一个 冻结 模块 被导入 首先 要 在这个 表 中搜索
 第三方 库 可以 以 此 来提供 动态 创建 的 冻结 模块 集合
cell  对象
cell  对象 用于实现 由 多个 作用域 引用 的 变量
 对 于 每个 这样的 变量 一个 cell  对象 为 了 存储 该值 而 被创建 引用 该值 的 每个 堆栈 框架 的 局部变量 包含 同样 使用 该 变量 的 对 外部 作用域 的 cell  引用
 访问 该值 时 将 使用 cell  中包含 的 值 而不是 单元 格 对象 本身
 这种 对 cell  对象 的 非 关联 化 的 引用 需要 支持 生成 的 字节码 访问 时 不 会自动 非 关联 化 这些 内容
 cell  对象 在其他 地方 可能不 太 有 用
pycellobject  用 于 cell  对象 的 c  结构体
pytypeobject  pycelltype  与 cell  对象 对应的 类型 对​​ 象
int  pycellcheckob  如果 ob  是一个 cell  对象 则返回真值 ob  必须不为 null
 创建并返回 一个包含 值 ob  的 新 cell  对象
 形参 可以为 null
 返回 cell  对象 cell  的内容
 返回 cell  对象 cell  的内容 但是 不 检测 cell  是否 非 null  并且 为 一个 cell  对象
int  pycellsetpyobject   cell  pyobject   value  将 cell  对象 cell  的内容 设 为 value
 这 将 释放 任何对 cell  对象 当 前 内容的 引用
 value  可以为 null
 cell  必须为 非 null  如果 它 不是一个 cell  对象 则 将 返回1
 如果设置 成功 则 将 返回0
void  pycellsetpyobject   cell  pyobject   value  将 cell  对象 cell  的 值 设 为 value
 不 会 调整 引用计数 并且不 会 进 行 检测 以 保证 安全 cell  必须为 非 null  并且 为 一个 cell  对象
 布尔 对象
 协程对象
3
5 新版功能
 协程对象 是 使用 async  关键字 声明 的 函数返回 的
pycoroobject  用 于 协程对象 的 c  结构体
pytypeobject  pycorotype  与 协程对象 对应的 类型 对​​ 象
int  pycorocheckexactpyobject   ob  如果 ob  的 类型 是 pycorotype  则返回真值 ob  必须不为 null
 基于 frame  对象 创建并返回 一个新的 协程对象 其 中 name  和 qualname  设 为 name  和 qualname
 此函数会 取 得 一个 对 frame  的 引用
 frame  参数 必须不为 null
 切片 对象
 缓冲协议
 在 python  中 可 使用 一些 对象 来 包装 对 底层 内存 数组 或 称 缓冲 的 访问
 此 类对象 包括 内置的 bytes  和 bytearray  以及 一些 如 array
array  这样的 扩展 类型
 第三方 库 也可能 会 为 了 特殊 的 目 的 而 定义 它们 自己的 类型 例如 用 于 图像 处理 和 数值 分析 等
 虽然 这些类型 中的每 一种 都 有自己的 语义 但它们 具有 由 可能 较大 的内存 缓冲区 支持 的 共同 特征
 在某些 情况下 希望 直接访问 该 缓冲区 而无需 中 间 复制
python  以 缓冲协议 的形式 在 c  层级 上 提供 这样的 功能
 此 协议 包括 两个 方面 在 生产 者 这 一 方面 该 类型 的 协议 可以 导出 一个 缓冲区接口 允许 公开 它 的 底层 缓冲区 信息
 该 接口 的描述 信息 在 buffer  object  structures  一节 中 在 消费者 一 侧 有 几种 方法可用于 获得 指向 对象 的 原始 底层 数据 的 指针 例如 一个 方法 的 形参
 一些 简单的 对象例如 bytes  和 bytearray  会 以 面向 字节 的形式 公开 它们的 底层 缓冲区
 也可能 会 用其他 形式 例如 array
array  所 公开 的 元素 可以是 多 字节 值
 缓冲区接口 的 消费者 的 一个例子 是 文件对象 的 write  方法 任何 可以 输出 为 一系列 字节 流 的 对象 可以被 写入文件
 然而 write  方法 只需要 对 于 传入 对象 的只读 权限 其他的 方法 如 readinto  需要 参数 内容的 写入 权限
 缓冲区接口 使得 对象 可以选择 性 地 允许 或 拒 绝 读写 或 只读 缓冲区 的 导出
 对 于 缓冲 接口 的 消费者 而言 有两种 方式来 获取一个 目 的 对象 的 缓冲 使用 正确的 参数 来 调用 pyobjectgetbuffer  函数 调用 pyargparsetuple  或 其 同 级 对象 之一 并 传入 y  w  or  s  格式 代码 中的一个
 在 这两 种情况下 当 不再 需要 缓冲区 时 必须 调用 pybufferrelease  
 如果此 操作 失败 可能 会导致 各种 问题 例如 资源 泄 漏
 缓冲区 结构
 缓冲区 结构 或者 简单地 称为 buffers  对 于 将 二进制数据 从 另一个 对象 公开 给 python  程序员 非常有用
 它们 还可以 用 作 零 拷贝 切片 机制
 使用它们 引用 内存块 的能力 可以 很容易 地 将 任何 数据 公开 给 python  程序员
 内存 可以是 c  扩展 中的一个 大 的常量 数组 也可以是 在 传递 到 操作系统 库 之前 用 于 操作 的 原始 内存块 或者 可以用来 传递 本机 内存 格式 的 结构化 数据
 与 python  解释器 公开 的 大多 部 数据类型 不同 缓冲区 不 是 pyobject  指针 而 是简单 的 c  结构
 这使得 它们可以 非常 简单地 创建 和 复制
 当 需要 为 缓冲区 加上 泛型 包装器 时可以 创建一个 内存 视图 对象
 有关 如何 编写 并 导出 对象 的 简短 说明 请参阅 缓冲区 对象 结构
 要获取 缓冲区 对象 请参阅 pyobjectgetbuffer
pybuffer  void  buf  指向 由 缓冲区 字段 描述 的 逻辑 结构 开始 的 指针
 这 可以是 导出 程序 底层 物理 内存块 中的任何 位置
 例如使用 负 的 strides  值可能 指向 内存 块 的末尾
 对 于 contiguous ‘ 邻 接’ 数组 值 指向 内存块的 开头
 void  obj  对 导出 对象 的 新 引用
 该 引用 归 使用 者 所有 并 由 pybufferrelease  自动 递 减 并 设置为 null
 该 字段 等于 任何 标 准 capi  函数 的返回值
 作为 一种 特殊 情况 对 于 由 pymemoryviewfrombuffer  或 pybufferfillinfo  包装 的 temporary  缓冲区 此 字段 为 null 
 通常 导出 对象 不 得 使用 此 方案
 对 于 连续 数组 这是 基础 内存块的 长度
 对 于 非 连续 数组 如果 逻辑 结构 复制 到 连续 表示形式 则 该 长度 将 具有 该 长度
 仅当 缓冲区 是通过 保证 连续 性 的 请求 获取 时才 访问 char  buf 0 up  to  char  buflen 1 时才 有效
 在大多数情况下 此 类 请求 将 为 pybufsimple  或 pybufwritable
 int  readonly  缓冲区 是否为 只读 的 指示 器
 此 字段 由 pybufwritable  标志 控制
 pyssizet  itemsize  单个 元素 的 项 大小 以字节 为单位
 与 struct
calcsize  调用 非 null  format  的 值 相同
 重要 例外 如果 使用 者 请求的 缓冲区 没有 pybufformat  标志 format  将 设置为 null  但 itemsize  仍 具有 原始 格式 的 值
 如果 shape  存在则 相等的 productshape  itemsize  len  仍然 存 在 使用 者 可以使用 itemsize  来 导 航 缓冲区
 如果 shape  是 null  因为 结果为 pybufsimple  或 pybufwritable  请求 则 使用 者 必须 忽略 itemsize  并 假设 itemsize 1
 const  char  format  在 struct  模块 样式 语法 中 nul  字符串 描述 单个 项 的内容
 如果 这是 null  则 假定 为 b  无符号 字节
 此 字段 由 pybufformat  标志 控制
 shape  形状 数组 中的值 被 限定 在 shapen 0
 shapen 0 这 一 情 形 需要 特别 注意
 更多信息请参阅 complex  arrays 
 shape  数组 对 于 使用 者 来说 是 只读 的
 stride  步 幅 数组 中的值 可以为 任何 整数
 对 于 常规 数组 步 幅 通常 为 正 数 但是 使用 者 必须 能够 处理 stridesn 0 的 情况
 更多信息请 参阅 complex  arrays 
 strides  数组 对 用户 来说 是 只读 的
 python  imaging  library  pil  中 使用了 这 种类型的 数组 表达 方式
 请 参阅 complex  arrays  来 了解 如何从 这样 一个 数组中 访问 元素
 suboffsets  数组 对 于 使用 者 来说 是 只读 的
buffer  request  types
requestindependent  fields
readonly  format
 形状 步 幅 子 偏移量
 请求 形状 步 幅 子 偏移量 pybufindirect  是 是 如果需要 的话 pybufstrides  是 是 null  pybufnd  是 null  null  pybufsimple  null  null  null 
 连续 性 的 请求
 请求 形状 步 幅 子 偏移量 邻 接 pybufccontiguous  是 是 null  c  pybuffcontiguous  是 是 null  f  pybufanycontiguous  是 是 null  c  或 f  pybufnd  是 null  null  c 
 复合 请求
 所 有可能的 请求 都 由 上 一节 中 某些 标志 的 组合 完全 定义
 为 方便 起 见 缓冲区 协议 提供 常用的 组合 作 为单个 标志
 请求 形状 步 幅 子 偏移量 邻 接 只读 格式 pybuffull  是 是 如果需要 的话 u 0 是 pybuffullro  是 是 如果需要 的话 u 1 或0 是 pybufrecords  是 是 null  u 0 是 pybufrecordsro  是 是 null  u 1 或0 是 pybufstrided  是 是 null  u 0 null  pybufstridedro  是 是 null  u 1 或0 null  pybufcontig  是 null  null  c 0 null  pybufcontigro  是 null  null  c 1 或0 null 
 复杂 数组
numpy  风格 形状 和 步 幅
pil  风格 形状 步 幅 和 子 偏移量
 缓冲区 相关 函数
3
9 新版功能
 otherwise  raise  pyexcbuffererror  set  viewobj  to  null  and  return 1 如果此 函数 用 作 getbufferproc  的一部分 则 exporter  必须 设置为 导出 对象 并且 必须在 未 修改 的情况下 传递 flags
 否则 exporter  必须是 null
 文件对象
 这 此 api  是 对 内置 文件对象 的 python 2 c  api  的最小 仿 真 它 过去 依赖于 c  标准库 的 缓冲 io  file  支持
 在 python 3 中 文件 和 流 使用 新 的 io  模块 该模块 在 操作系统的 低层级 无 缓冲 io  之 上 定义了 几个 层
 下面 所描述的 函数 是 针对 这些 新 api  的便捷 c  包装器 主要 用 于 解释器 的 内部 错误报告 建议 第三方 代码 改 为 访问 io  api
 根据 已 打开文件 fd  的文件描述符 创建一个 python  文件对象
 参数 name  encoding  errors  和 newline  可以为 null  表示 使用 默 认值 buffering  可以为1 表示 使用 默认值
 name  会被忽略 仅 保 留 用 于 向下兼容
 失败时返回 null
 有关 参数 的 更 全 面 描述 请参阅 io
open  函数 的 文档
 警告 由 于 python  流 具有 自己的 缓冲 层 因此 将它们 与 os  级 文件描述符 混合 会 产生 各种 问题 例如 数据 的 意外 排序
 在3
2 版更改 忽略 name  属性
int  pyobjectasfiledescriptorpyobject   p  将 与 p  关联的 文件 描述器 返回 为 int 
 如果对象 是 整数 则返回 其 值
 如果没有 则 调用 对象 的 fileno  方法 如果存在 该方法 必须返 回 一个整数 该 整数 作为 文件 描述器 值 返回
 设置 异常 并 在 失败时返回1
 等价于 p
readlinen  这个函数 从 对象 p  中 读取一 行
 p  可以 是 文件对象 或 具有 readline  方法 的 任何 对象
 如果 n  是0 则 无论 该 行 的长度 如何 都会 读取一 行
 如果 n  大于0 则 从 文件 中 读 取 不 超过 n  个字节 可以 返回 行 的一部分
 在 这两 种情况下 如果 立即 到达 文件末尾 则返回 空字符串
 但是如果 n  小于0 则 无论 长度 如何 都会 读取一 行 但是如果 立即 到达 文件末尾 则引发 eoferror
int  pyfilesetopencodehookpyopencodehookfunction   handler  重载 io
opencode  的 正常 行为 将 其 形参 通过 所提供的 处理程序 来 传 递
 处理程序 是一个 类型 为 pyobject  pyobject  path  void  userdata  的 函数 其 中 path  确保 为 pyunicodeobject
 userdata  指针 会 被 传入 钩子 函数
 因 于 钩子 函数 可能 由 不同的 运行时 调 用 该 指针 不应 直接 指向 python  状态
 鉴 于 这 个 钩子 专门 在 导入 期间 使用 的 请 避免 在 新 模块 执行 期间 进行 导入 操 作 除非 已知 它们 为 冻结 状态 或者是 在 sys
modules  中 可 用
 一旦 钩子 被 设 定 它 就不 能 被移除 或 替换 之后 对 pyfilesetopencodehook  的 调用 也 将 失败 如果 解释器 已经被 初始化 函数 将 返回1 并设置 一个异常
 此 函数可以 安全地 在 pyinitialize  之前 调用
 引发一个 审计事件 setopencodehook  不 附带 任何 参数
3
8 新版功能
int  pyfilewriteobjectpyobject   obj  pyobject   p  int   flags  将 对象 obj  写入文件 对象 p 
 flags  唯一 支持 的 标志 是 pyprintraw  如果给定 则 写入 对象 的 str  而不是 repr
 成 功时返回0 失败时返回1
 将 设置 适当的 例外
int  pyfilewritestringconst  char   s  pyobject   p  将 字符串 s  写入文件 对象 p
 成功 返回0 失败返回1 将 设 定 相应的 异常
initialization  finalization  and  threads
 请参阅 python  初始化 配置
 在 python  初始化 之前
 在 初始化 python  之前 可以 安全地 调用 以下函数 配置 函数 pyimportappendinittab  pyimportextendinittab  pyinitfrozenextensions  pymemsetallocator  pymemsetupdebughooks  pyobjectsetarenaallocator  pysetpath  pysetprogramname  pysetpythonhome  pysetstandardstreamencoding  pysysaddwarnoption  pysysaddxoption  pysysresetwarnoptions  信息 函数 pyisinitialized  pymemgetallocator  pyobjectgetarenaallocator  pygetbuildinfo  pygetcompiler  pygetcopyright  pygetplatform  pygetversion  工具 pydecodelocale  内存分配器 pymemrawmalloc  pymemrawrealloc  pymemrawcalloc  pymemrawfree  注解 以下函数 不应该 在 pyinitialize  pyencodelocale  pygetpath  pygetprefix  pygetexecprefix  pygetprogramfullpath  pygetpythonhome  pygetprogramname  和 pyevalinitthreads  前 调用
 全局 配置 变量
initializing  and  finalizing  the  interpreter
 注解 on  windows  changes  the  console  mode  from  otext  to  obinary  which  will  also  affect  nonpython  uses  of  the  console  using  the  c  runtime
3
6 新版功能
processwide  parameters
3
4 新版功能
 在3
8 版更改 the  program  full  path  is  now  used  for  sys
 注解 it  is  recommended  that  applications  embedding  the  python  interpreter  for  purposes  other  than  executing  a  single  script  pass 0 as  updatepath  and  update  sys
pop 0 n 3
3 新版功能
 在3
4 版更改 the  updatepath  value  depends  on  i
thread  state  and  the  global  interpreter  lock
releasing  the  gil  from  extension  code
 注解 calling  system  io  functions  is  the  most  common  use  case  for  releasing  the  gil  but  it  can  also  be  useful  before  calling  long  running  computations  which  dont  need  access  to  python  objects  such  as  compression  or  cryptographic  functions  operating  over  memory  buffers
 非 python  创建 的 线程
cautions  about  fork
 in  addition  it  resets  any  锁 对象 inthe  child
 高阶 api
 在3
9 版更改 the  function  now  does  nothing
 在3
7 版更改 this  function  is  now  called  by  pyinitialize  so  you  dont  have  to  call  it  yourself  anymore
 在3
2 版更改 this  function  cannot  be  called  before  pyinitialize  anymore
 在3
7 版更改 the  gil  is  now  initialized  by  pyinitialize
 注解 calling  this  function  from  a  thread  when  the  runtime  is  finalizing  will  terminate  the  thread  even  if  the  thread  was  not  created  by  python
 注解 calling  this  function  from  a  thread  when  the  runtime  is  finalizing  will  terminate  the  thread  even  if  the  thread  was  not  created  by  python
3
4 新版功能
lowlevel  api
 在3
7 版更改 pyinitialize  now  initializes  the  gil
 在3
9 版更改 this  function  now  calls  the  pythreadstate
3
9 新版功能
3
9 新版功能
3
9 新版功能
3
9 新版功能
3
7 新版功能
3
8 新版功能
 在3
9 版更改 the  function  now  takes  a  tstate  parameter
3
9 新版功能
3
9 新版功能
 在3
7 版更改 the  type  of  the  id  parameter  changed  from  long  to  unsigned  long
 注解 calling  this  function  from  a  thread  when  the  runtime  is  finalizing  will  terminate  the  thread  even  if  the  thread  was  not  created  by  python
 在3
8 版更改 updated  to  be  consistent  with  pyevalrestorethread  pyendallowthreads  and  pygilstateensure  and  terminate  the  current  thread  if  called  while  the  interpreter  is  finalizing
3
2 版后已移除 this  function  does  not  update  the  current  thread  state
 注解 calling  this  function  from  a  thread  when  the  runtime  is  finalizing  will  terminate  the  thread  even  if  the  thread  was  not  created  by  python
 在3
8 版更改 updated  to  be  consistent  with  pyevalrestorethread  pyendallowthreads  and  pygilstateensure  and  terminate  the  current  thread  if  called  while  the  interpreter  is  finalizing
3
2 版后已移除 this  function  does  not  update  the  current  thread  state
subinterpreter  support
 错误 和 警告
 异步 通知
 警告 this  is  a  lowlevel  function  only  useful  for  very  special  cases
 在3
9 版更改 if  this  function  is  called  in  a  subinterpreter  the  function  func  is  now  scheduled  to  be  called  from  the  subinterpreter  rather  than  being  called  from  the  main  interpreter
 each  subinterpreter  now  has  its  own  list  of  scheduled  calls
3
1 新版功能
 分析 和 跟踪
 the  first  parameter  is  the  object  passed  to  the  registration  function  as  obj  frame  is  the  frame  object  to  which  the  event  pertains  what  is  one  of  the  constants  pytracecall  pytraceexception  pytraceline  pytracereturn  pytraceccall  pytracecexception  pytracecreturn  or  pytraceopcode  and  arg  depends  on  the  value  of  what  what  的 值 arg  的含义 pytracecall  总是 pynone
 pytraceexception  sys
excinfo  返回 的 异常 信息
 pytraceline  总是 pynone
 pytracereturn  value  being  returned  to  the  caller  or  null  if  caused  by  an  exception
 pytraceccall  正 在 调用函数 对象
 pytracecexception  正 在 调用函数 对象
 pytracecreturn  正 在 调用函数 对象
 pytraceopcode  总是 pynone
 int  pytracecall  the  value  of  the  what  parameter  to  a  pytracefunc  function  when  a  new  call  to  a  function  or  method  is  being  reported  or  a  new  entry  into  a  generator
 高级 调试器 支持
thread  local  storage  support
 注解 none  of  these  api  functions  handle  memory  management  on  behalf  of  the  void  values
thread  specific  storage  tss  api
3
7 新版功能
 参见 a  new  capi  for  threadlocal  storage  in  cpython  pep 539 pytsst  this  data  structure  represents  the  state  of  a  thread  key  the  definition  of  which  may  depend  on  the  underlying  tls  implementation  and  it  has  an  internal  field  representing  the  keys  initialization  state
 注解 a  freed  key  becomes  a  dangling  pointer  you  should  reset  the  key  to  null
 方法 the  parameter  key  of  these  functions  must  not  be  null
thread  local  storage  tls  api
3
7 版后已移除 this  api  is  superseded  by  thread  specific  storagetss  api
 注解 this  version  of  the  api  does  not  support  platforms  where  the  native  tls  key  is  defined  in  a  way  that  cannot  be  safely  cast  to  int
 由 于 上面 提 到 的 兼容性 问题 不应 在 新 代码中使用 此 版本 的 api
 迭代器 协议
 迭代器 有两个 函数
int  pyitercheckpyobject   o  返回 true  如果对象 o   支持 迭代器 协议 的话
 返回 迭代 o  的下一个 值
 对象 必须是一个 迭代器 这 应 由 调用者 来 判断
 如果没有 余 下 的 值 则返回 null  并且不 设置 异常
 如果在 获取 条 目 时 发生了 错误 则返回 null  并且 传递 异常
 要 为 迭代器 编写 一个 一个 循环 c  代码 应该 看起来 像这样 pyobject  iterator  pyobjectgetiterobj  pyobject  item  if  iterator  null  propagate  error  while  item  pyiternextiterator  do  something  with  item 
 版权
python  与 这 份 文档 版权 所有©20012020 python  软件 基 金 会
 保留 所有 权 利
 版权 所有©2000 beopen
 保留 所有 权 利
 版权 所有©19952000 corporation  for  national  research  initiatives
 保留 所有 权 利
 版权 所有©19911995 stichting  mathematisch  centrum
 保留 所有 权 利
 有关 完整的 许可证 和 许可 信息 参见 历史 和 许可证
python 39 有什么新变化
 发布 版本3
0 日期 十 一 月132020 编 者ł ukasz  langa  本文 介绍了 python 3
9 相比3
8 的 新特性
 python 3
9 发布 于2020 年10 月5 日
 完整的 详情 可 参阅 更新 日志
 参见 pep 596 python 3
9 发布 计划
 摘要 发布 重 点
 你应该 在 你的代码 中 检查 deprecationwarning
 在 python 2
7 仍 受支持的 时候 有许多 旧 功能 在 python 3 中 被 保留 以 维 持 对 python 2
7 的 向下兼容
 随着 对 python 2 支持 的 结束 这些 向下兼容 层 已经被 移除 或 即 将 被移除
 它们 中 的大部分 都 持续 多 年 引发 deprecationwarning  警告
 例如使用 collections
mapping  而不是 collections
mapping  自2012 年 发布 的 python 3
3 开始 即 会引发 deprecationwarning
 请使用 w  default  命令行选项 测试 你 的 应用程序 来 查看 deprecationwarning  和 pendingdeprecationwarning  甚至 可以使用 werror  将它们 视为 错误
 可以使用 警告过滤器 来 忽略 来自 第三方 代码 的 警告
9 是 最后一个 提供 这些 python 2 向下兼容 层 的 版本 以 给 予 python  项目 维护 者 更多 时间 来 组织 移除 python 2 支持 并 添加 python 3
9 支持
collections  模块 中 抽象基类 的别名 例如 collections
abc
mapping  的别名 collections
mapping  会 为 向下兼容 最后 保留 一个 发行版
 它们将 在 python 3
10 中被移除
 更 一般 地说 请 尝试 在 python  开发模式 下 运行 你 的 测试 这可以 帮助 你的代码 兼容 以 后 的 python  版本
 注 有许多 之前 存在的 弃用 也 在 此 python  版本 中被移除
 具体 请参阅 移除 一节
 新 的 特性
 字典 合并 与 更新 运算符
 合并 与 更新 运算符 已 被加入 内置的 dict  类
 它们 为 现有的 dict
update  和 d 1 d 2 字典 合并 方法 提供了 补 充
 示例 x  key 1 value 1 from  x  key 2 value 2 from  x  y  key 2 value 2 from  y  key 3 value 3 from  y  x  y  key 1 value 1 from  x  key 2 value 2 from  y  key 3 value 3 from  y  y  x  key 2 value 2 from  x  key 3 value 3 from  y  key 1 value 1 from  x  请参阅 pep 584 了解详情
 由 brandt  bucher  在 bpo 36144 中贡献

 新增 用 于 移除 前缀 和 后缀 的 字符串方法
 增加了 str
removeprefixprefix  和 str
removesuffixsuffix  用 于 方便地 从字符串 移除 不需要 的 前缀 或 后缀
 也 增加了 bytes  bytearray  以及 collections
userstring  的对应 方法
 请参阅 pep 616 了解详情
 由 dennis  sweeney  在 bpo 39939 中贡献

 标准 多项集 中 的 类型 标注 泛型
 新 的 解析器
9 使用 于 基于 peg  的 新 解析器 替代 ll 1
 新 解析器 的性能 与 旧 解析器 大致 相当 但 peg  在 设计 新 语言特性 时 的形式 化 比 ll 1 更 灵活
 我们将 在 python 3
10 及 之后 版本中 开始 使用 这种 灵活 性
ast  模块 会 使用 新 解析器 并 会生成 与 旧 解析器 一致的 ast
 在 python 3
10 中 旧 解析器 将 被移除 依赖于 它 的 所有 功能 也 将 被移除 主要 是 parser  模块 它 早 已被弃用
 只有 在 python 3
9 中 你可以使用 命令行 开 关 x  oldparser  或 环境变量 pythonoldparser 1 切换 回 ll 1 解析器
 请参阅 pep 617 了解详情
 由 guido  van  rossum  pablo  galindo  和 lysandros  nikolaou  在 bpo 40334 中贡献

 其他语言特性修改
 import  现在会 引发 importerror  而不是 valueerror  后者 曾 经 会 在 相对导入 超出 其 最高层级 包 时发生
 由 ngalim  siregar  在 bpo 37444 中贡献
 python  现在会 获取 命令行 中 指定 的 脚本 文件名 例如 python 3 script
py  的绝对 路径 main  模块 的 file  属性 将是一个 绝 对 路径 而不是 相对路径
 现 在 此 路径 在 当前目录 通过 os
chdir  被 改 变 后 仍 将 保持 有效
 作为 附带 效果 回溯 信息 也 将 在此情况下 为 main  模块 帧 显示 绝对 路径
 由 victor  stinner  在 bpo 20443 中贡献
 在 python  开发模式 以及 调试 编译 版本中 现在会 针对 字符串 编码和解码 操 作 检查 encoding  和 errors  参数
 例如 open  str
encode  和 bytes
 默认 设置 下 为 保证 性能 errors  参数 只会 在 第一次 发生 编码 解码 错误时 被 检查 并且 对 于 空字符串 encoding  参数 有 时 会被忽略
 由 victor  stinner  在 bpo 37388 中贡献

replace  s  n  对 于所有 非零 的 n  都 将 返回 s  而不是 空字符 串
 现 在 此方法会 与
replace  s  保持 一致
 对 于 bytes  和 bytearray  对象 也 有 类似 的 修改
 由 serhiy  storchaka  在 bpo 28029 中贡献
 任何 有效的 表达式 现 在 都 可 被用作 decorator
 在之前版本中 相关 语法 则 更 为 严格
 请参阅 pep 614 了解详情
 由 brandt  bucher  在 bpo 39702 中贡献
 改进 了 typing  模块 的 帮助 信息
 现在将 为所有 特殊 形式 和 特殊 通 用 别名 例如 union  和 list  显示 文档字符串
 使用 help  时 传入 通 用 别 名 例如 listint  将显示 对 应 实体 类型 这里 对应的 是 list  的 帮助 信 息
 由 serhiy  storchaka  在 bpo 40257 中贡献
 aclose  asend  athrow  的 并 行 运行 现在已 被 禁止 且 agrunning  现在会 反 映 异步生成器 的 实际 运行 状态
 由 yury  selivanov  在 bpo 30773 中贡献
 调用 iter  方法 时发生 的 非 预期 错误 不会再 被 in  运算符 以及 operator  的 contains  indexof  和 countof  中 的 typeerror  所 掩 盖
 由 serhiy  storchaka  在 bpo 40824 中贡献

 新增 模块
zoneinfo
zoneinfo  模块 为 标准库 引入了 iana  时区数据 库
 它 添加了 zoneinfo
zoneinfo  这是一个 基于 系统 时区数据 的 实体 datetime
tzinfo  实现
 示例 from  zoneinfo  import  zoneinfo  from  datetime  import  datetime  timedelta  daylight  saving  time  dt  datetime 2020103112 tzinfozoneinfoamericalosangeles  printdt 202010311200000700 dt
tzname  pst  作为 不包含 iana  数据库 的 平台 的 一个 回退 数据 源 还 以 第一 方 软件包的 形式 发布 了 tzdata  模块 通过 pypi  发行 并 由 cpython  核心 团队 维护
 参见 pep 615 在 标准库中 支持 iana  时区数据 库 pep  由 paul  ganssle  撰写并实现
graphlib
 添加了新的 graphlib  模块 其中包含 graphlib
topologicalsorter  类 来提供 图 的 拓 扑 排序 功能
 由 pablo  galindo  tim  peters  和 larryhastings  在 bpo 17005 中贡献

 改进的模块
ast
 将 indent  选项 添加到 dump  这允许 它 产生 多 行 缩进 的 输出
 由 serhiy  storchaka  在 bpo 37995 中贡献
 添加了 ast
unparse  作为 ast  模块中的 一个 函数 它 可被用来 反 解析 ast
ast  对象 并 产生 相应的 代码 字符串 当 它 被解析 时 将 会产生 一个 等价 的 ast
ast  对象
 由 pablo  galindo  和 batuhan  taskaya  在 bpo 38870 中贡献
 为 ast  节点 添加了 文档字符串 其中包含 asdl  签名 可被用来 构造 对应的 节点
 由 batuhan  taskaya  在 bpo 39638 中贡献

asyncio
compileall
 为 重复 的
pyc  文件 添加了 使用 硬 软件 的 可能 性 hardlinkdupes  形参 以及 hardlinkdupes  命令行选项
 由 lum í r  frenzy  balhar  在 bpo 40495 中贡献
 新增了 一些 用于在 结果
pyc  文件 中 操 纵 路径 的 选项 stripdirprependdir  limitsldest  形参 以及 s  p  e  命令行选项
 并 使得 为 优化 等级 多次 指定 选项 成为 可能
 由 lum í r  frenzy  balhar  在 bpo 38112 中贡献

concurrentfutures
 将 新 的 cancelfutures  形参 添加到 concurrent
shutdown  可以 取消 尚未 开始 运行 的 所有 挂起 的 future  而不必 等待 它们 完成 运行 再 关闭 执行器
 由 kyle  stanley  在 bpo 39349 中贡献
 从 threadpoolexecutor  和 processpoolexecutor  中 移除了 守护 线程
 这 改 善 与 与 子 解释器 的 兼容性 及 它们在 关闭 进程时 的 可 预 测 性
 由 kylestanley  在 bpo 39812 中贡献
 现 在 processpoolexecutor  中 的 工作 进程 仅 会 在 没有可 重 用 的 空 闲 工作 进程时 按 需 产生
 这 优化 了 启动 开销 并 减少 了 由 空 闲 工作 进程 导致 的 cpu  时间 损 失
 由 kyle  stanley  在 bpo 39207 中贡献

curses
 增加了 curses
gettabsize  以及 curses
settabsize  函数
 由 anthonysottile  在 bpo 38312 中贡献

datetime
datetime
date  的 isocalendar  以及 datetime
datetime  的 isocalendar  等 方法 现在将 返回 namedtuple  而不是 tuple
 由 donghee  na  在 bpo 24416 中贡献

distutils
upload  命令 现在会 创建 sha 2256 和 blake 2 b 256 哈希 摘要
 它会在 禁用 md 5 摘要 的平台上 跳过 md 5
 由 christian  heimes  在 bpo 40698 中贡献

fcntl
 增加了 fofdgetlk  fofdsetlk  和 fofdsetlkw  等 常量
 由 donghee  na  在 bpo 38602 中贡献

ftplib
 现 在 ftp  和 ftptls  当 它们的 构造器 所 给定的 超时 参数 为零 以防止 创建 非阻塞 套接字 时会引发 valueerror
 由 donghee  na  在 bpo 39259 中贡献

gc
 当 垃圾回收 器 进行 某些 复 活 对象 的 收集 时 在 终结器 被执行 之后 这些 对象可以 在 隔 离 周期 之外 被访问 不 会阻 止 对 所有 仍然 无法 访问 的 对象 的 收集
 由 pablo  galindo  和 tim  peters  在 bpo 38379 中贡献
 增加了 一个新的 函数 gc
isfinalized  用来 检测 一个 对象是否 已被 垃圾回收 器 所 终结
 由 pablo  galindo  在 bpo 39322 中贡献

hashlib
http
 添加 http  状态 码103 earlyhints 418 imateapot  和425 tooearly  到 http
 由 donghee  na  在 bpo 39509 以及 ross  rhodes  在 bpo 39507 中贡献

idle  与 idlelib
 添加了 切换 光 标 闪 烁 停止 的 选项
 由 zackery  spytz  在 bpo 4603 中贡献
esc  键 现在会 关闭 idle  补全 提示 窗口
 由 johnny  najera  在 bpo 38944 中贡献
 添加 关键字 到 模块名称 补全 列表
 由 terry  j
 reedy  在 bpo 37765 中贡献
 上述 修改 已被 反向 移植到3
8 维护 发行版 中
imaplib
 现 在 imap 4 和 imap 4 ssl  的 构造器 具有 可选的 timeout  形参
 并且 现 在 open  方法也 具有 可选的 timeout  形参 提供 同样的 修改
imap 4 ssl  和 imap 4 stream  中 被 重载 的 方法也 应用 了这个 修改
 由 donghee  na  在 bpo 38615 中贡献
 增加了 imaplib
unselect
unselect  会 释放 关联到 选 定 邮 箱 的 服务器 资源 并 将 服务器 返回 到 已 认 证 状态
 此 命令 会 执行 与 imaplib
close  相同 的 动作 区别在于 它 不 会 从 当前 选 定 邮 箱 中 永 久 性 地 移除 消息
 由 donghee  na  在 bpo 40375 中贡献

importlib
 为 提升 与 import  语句 的 一致性 现 在 importlib
resolvename  对 于 无效的 相对导入 尝试 会引发 importerror  而不是 valueerror
 由 ngalim  siregar  在 bpo 37444 中贡献
 发布 不可变 模块 对象 的 导入 加载器 除了 发布 单独 模块 以外 现 在 也可以 发布 不可变 包
 由 dino  viehland  在 bpo 39336 中贡献
 添加了 带有 对 包 数据 中 子目录 支持 的 importlib
files  函数 与 importlibresources 1
5 版 的 反向 端口 相匹配
 由 jason  r
 coombs  在 bpo 39791 中贡献
 来自 importlibmetadata 1
6
1 版 的 已 更新 importlib
metadata
inspect
arguments  已从 ordereddict  改 为 常规 字典
 由 inada  naoki  在 bpo 36350 和 bpo 39775 中贡献

ipaddress
ipaddress  现在支持 ipv 6 作用域 地址 即 带有 scopeid  前缀 的 ipv 6 地址
ipv 6 作用域 地址 可 使用 ipaddress
ipv 6 address  来 解析
 作用域 的 区 id  如果存在 可通过 scopeid  属性 来获取
 由 oleksandr  pavliuk  在 bpo 34788 中贡献

math
 对 math
gcd  函数 进行 了 扩展 以 处理 多个 参数
 在之前版本中 它只 支持 两个参数
 由 serhiy  storchaka  在 bpo 39648 中贡献
 增加了 math
lcm  返回 指定 参数 的最小 公 倍 数
 由 mark  dickinsonananthakrishnan  和 serhiy  storchaka  在 bpo 39479 和 bpo 39648 中贡献
 增加了 math
nextafter  返回 从 x  往 y  方向 的下一个 浮点数 值
 由 victor  stinner  在 bpo 39288 中贡献
 增加了 math
ulp  返回 一个浮点数 的最小 有效 比特位
 由 victorstinner  在 bpo 39310 中贡献

multiprocessing
multiprocessing
simplequeue  类 新增了 close  方法 用来 显式地 关闭 队列
 由 victor  stinner  在 bpo 30966 中贡献

nntplib
 现 在 nntp  和 nntpssl  当 它们的 构造器 所 给定的 超时 参数 为零 以防止 创建 非阻塞 套接字 时会引发 valueerror
 由 donghee  na  在 bpo 39259 中贡献

os
 增加了 cldkilled  和 cldstopped  作为 sicode
 由 donghee  na  在 bpo 38493 中贡献
 对 外 公开 了 linux  专属的 os
pidfdopen  bpo 38692 和 os
ppidfdbpo 38713 用 于 文件描述符的 进程 管理
 现 在 os
unsetenv  函数 在 windows  上 也 已 可 用
 由 victor  stinner  在 bpo 39413 中贡献
 现 在 os
putenv  和 os
unsetenv  函数 将总是 可 用
 由 victorstinner  在 bpo 39395 中贡献
 增加了 os
waitstatustoexitcode  函数 将 等待 状态 转换为 退出 码
 由 victor  stinner  在 bpo 40094 中贡献

pathlib
pdb
 在 windows  上 pdb  现在支持
 由 tim  hopper  和 danlidralporter  在 bpo 20523 中贡献

poplib
 现 在 pop 3 和 pop 3 ssl  当 它们的 构造器 所 给定的 超时 参数 为零 以防止 创建 非阻塞 套接字 时会引发 valueerror
 由 donghee  na  在 bpo 39259 中贡献

pprint
 现 在 pprint  能 美化 打印 types
 由 carl  bordumhansen  在 bpo 37376 中贡献

pydoc
 文档字符串 的 显示 现 在 不仅 针对 类、 函数、 方法 等 也 针对 任何 具有 自己的 doc  属性 的 对象
 由 serhiy  storchaka  在 bpo 40257 中贡献

random
 增加了新的 random
randbytes  方法 生成 随机 字节串
 由 victor  stinner  在 bpo 40286 中贡献

signal
 对 外 公开 了 linux  专属的 signal
pidfdsendsignal  用 于 向 使用 文件描述符 而非 pid  的 进程 发送 信号
 bpo 38712
smtplib
 现 在 smtp  和 smtpssl  当 它们的 构造器 所 给定的 超时 参数 为零 以防止 创建 非阻塞 套接字 时会引发 valueerror
 由 donghee  na  在 bpo 39259 中贡献
 现 在 lmtp  构造器 具有 可选的 timeout  形参
 由 donghee  na  在 bpo 39329 中贡献

socket
socket  模块 现在会 在 linux 4
1 或更高 版本上 导出 canrawjoinfilters  常量
 由 stefan  tatschner  和 zackery  spytz  在 bpo 25780 中贡献
 现 在 socket  模块 会 在 支持 的平台上 支持 canj 1939 协议
 由 karl  ding  在 bpo 40291 上 贡献
 现 在 socket  模块 具有 socket
sendfds  和 socket
fds  方法
 由 joannah  nanjekye  shinya  okano  和 victor  stinner  在 bpo 28724 中贡献

time
sys
 增加了新的 sys
platlibdir  属性 平台 专属 库 目录 的 名称
 它 被用于 构建 标准库 的 路径 以及 已安装 扩展模块 的 路径
 它 在大多数 平台上 等于 lib
 在 fedora  和 suse  上 它 等于64 位 平台上 的 lib 64
 由 janmat ě jek  mat ě j  cepl  charalampos  stratakis  和 victor  stinner  在 bpo 1294959 中贡献
 之前 的版本中 sys
stderr  在 非 交互模式 时 是 带 块 缓冲 的
 现 在 stderr  默认 总是 为 行 缓冲 的
 由 jendrik  seipp  在 bpo 13601 中贡献

tracemalloc
 增加了 tracemalloc
resetpeak  用于将 跟踪 的内存块 峰 值 大小 设 为当前 大小 以 测量 特定 代码段 的 峰 值
 由 huon  wilson  在 bpo 40630 中贡献

typing
pep 593 引入了 一种 typing
annotated  类型 以 使用 上下文 专属的 元数据 来 装饰 现有 类型 并 将 新 的 includeextras  形参 添加到 typing
gettypehints  以 在运行时 访问 元数据
 由 till  varoquaux  和 konstantin  kashin  贡献

unicodedata
unicode  数据库 已 更新 到13
0 版
venv
 由 venv  所提供的 激活 脚本 现 在 总是会 使用 venvprompt  设置 的 值 来 一致 地 指明 它们的 自定义 提示符
 在之前版本中 某些 脚本 会 无 条件 地 使用 venvprompt  而 另 一些 脚本 只 在 其 恰好 被设置 时 这是 默认情况 才会 使用 还有 的 脚本 会 改 用 venvname
 由 brett  cannon  在 bpo 37663 中贡献

xml
 当 把 xml
elementtree  序列化 为 xml  文件 时 属性 内部 的 空白字符 现在将 被 保留
 不同的 行 结束 符 不会再 被 正 规 化 为 n
 这 是对于 如何 解读 xml  规范2
11 节 的 相关 讨论 的 最终 结果
 由 mefistotelis  在 bpo 39011 中贡献

 性能优化
 优化 了 在 推导式 中 为 临时 变量 赋值 的 惯 用方式
 现 在 推导式 中 的 for  y  in  expr  会 与 简单 赋值语句 y  expr  一样 快速
 例如 sums  s  for  s  in 0 for  x  in  data  for  s  in  s  x  不同于 运算符 这 个 惯 用方式 不 会 使 变量 泄 露 到 外部 作用域中
 由 serhiy  storchaka  在 bpo 32856 中贡献
 优化 了 多线程 应用中 的 信号处理
 如果一个 线程 不 是 获得 信号 的 主 线程 字 节码 求值 循环 不会在 每条 字节码 指令 上 被打 断 以 检查 无法被 处理 的 挂起 信号
 只有 主 解释器 的 主 线程 能够 处理 信号
 在之前版本中 字节码 求值 循环 会 在 每条 指令 上 被打 断 直到 主 线程 处理 了 信号
 由 victor  stinner  在 bpo 40010 上 贡献
 在 freebsd  上 使用 closefrom  优化 了 subprocess  模块
 由 ed  maste  conrad  meyer  kyle  evans  kubilay  kocak  和 victor  stinner  在 bpo 38061 中贡献
 pylongfromdouble  对 于 匹配 long  的 值 执行 速度 现 在 加 快 了1
87 倍
 由 sergey  fedoseev  d  bpo 37986 中贡献
 多个 python  内置类型 range  tuple  set  frozenset  list  dict  现 在 通过使用 pep 590 向 量 调用 协议 得到 加 速
 由 dong  hee  na  mark  shannon  jeroen  demeyer  和 petr  viktorin  在 bpo 37207 中贡献
 当 另一 集合 远 大于 基础 集合 的情况下 优化 了 differenceupdate  的性能
 由 evgeny  kapun  提议 由 michele  orr ù 在 bpo 8425 中贡献 代码
 python  的 小 对象 分配器 obmalloc
c  现 在 允许 至多 一个空 位 可用于 立即 重 用 而不必 将 其 返回给 os
 这 可 以防止 简单 循环中 的 多 余 消耗 在 每 次 迭代 中 可以创建 和 销 毁 全 新 的 空 位
 由 tim  peters  在 bpo 37257 中贡 献
 浮点数 运算 中 的 floor  division  现在会 有 更好的 性能
 并且 此 运算 的 zerodivisionerror  的 消息 也 已 更新
 由 donghee  na  在 bpo 39434 中贡献
 使用 utf 8 和 ascii  编解码器 解码 短 ascii  字符串 现在会 加 快 大 约15
 由 inada  naoki  在 bpo 37348 中贡献
 以下是 对 从 python 3
4 到 python 3
9 的 提升 提升 情况 的 总结 python  version 3
3 以 上 结果是 由 以 下 变量 访问 基准 测试 脚本 所生成的 toolsscriptsvaraccessbenchmark
 该 基准 测试 脚本 以 纳 秒 为单位 显示 时间
 基准 测试 数据 是 在 一 块 intel ® core ™ i 74960 hq  处理器 运行 从 python
org  获取 的 macos 64 位 编译 版本 所 得到的
 弃用
 移除
 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
python  api  的变化
c  api  的变化
 堆 分配 类型的实例 例如使用 pytypefromspec  和 类似 api  创建 的 实例 自 python 3
8 起 会 带有一个 对 其 类型 对象的引用
 正 如 python 3
8 的 c  api  中 的改变 部分 所述 对 于 大部分 情况 来说 这 应当 不 会 有任何 副作 用 但 对 于 具有 自定义 tptraverse  函数 的 类型 来说 则 要 确保 所有 堆 分 配 类型 的 自定义 tptraverse  函数 可 访问 对象的类型
 示例 int  footraversefoostruct  self  visitproc  visit  void  arg  rest  of  the  traverse  function  if  pyversionhex 0 x 03090000 this  was  not  needed  before  python 3
9 python  issue 35810 and 40217 pyvisitpytypeself  endif  如果你 的 遍历 函数 委托给 了 基类 或其他 类 的 tptraverse  则 要 确保 pytypeself  只 被访问 一次
 请注意 应当 只有 堆 类型 可 访问 tptraverse  中 的 类型
 举例来说 如果你 的 tptraverse  函数 包括 以 下内容 basetptraverseself  visit  arg  则 要 添加 if  pyversionhex 0 x 03090000 this  was  not  needed  before  python 3
9 python  issue 35810 and 40217 if  basetpflags  pytpflagsheaptype  a  heap  types  tptraverse  already  visited  pytypeself  else  pyvisitpytypeself  else  参阅 bpo 35810 和 bpo 40217 了解 更多信息
 pyevalcallobject  pyevalcallfunction  pyevalcallmethod  和 pyevalcallobjectwithkeywords  函数 已被弃用
 请改用 pyobjectcall  及其 变化 形式
 详情参见 bpo 29548

cpython  字节码 的改变
 添加了 loadassertionerror  操作码 用于处理 assert  语句
 在 之前 的版本中 如果 assertionerror  异常 被 屏蔽 则 assert  语句 将 不 能 正常 运 作
 由 zackery  spytz  在 bpo 34880 中贡献
 compareop  操作码 已被 拆分 为 四个 单独 指令 compareop  用 于 富 比较 isop  用 于 is  和 is  not  检测 containsop  用 于 in  和 not  in  检测 jumpifnotexcmatch  用 于 检查 tryexcept  语句中 的 异常
 由 mark  shannon  在 bpo 39156 中贡献

 构建 的改变
 将 withplatlibdir  选项 添加到 configure  脚本 平台 专属 库 目录 的 名称 保存在 新 的 sys
platlibdir  属性 中
 请参阅 sys
platlibdir  属性 了解详情
 由 jan  mat ě jek  mat ě j  cepl  charalampos  stratakis  和 victor  stinner  在 bpo 1294959 中贡献
 countallocs  特殊 构建 宏 已被移除
 由 victor  stinner  在 bpo 39489 中贡献
 在 非 windows  平台 上现在 需要 用 setenv  和 unsetenv  函数来 构 建 python
 由 victor  stinner  在 bpo 39395 中贡献
 在 非 windows  平台上 创建 bdistwininst  安装 器 现在已 不受 官 方 支持
 详情参见 bpo 10945
 当 在 macos  上 用 源代码 编译 python  时 tkinter  现在会 链接到 非 系统 的 tcl  和 tk  框架 如果它们 被 安装到 libraryframeworks  的话 就 如 在 较 旧 的 macos  发行版 上 的 情况 一样
 如果 通过使用 enable  universalsdk  或 isysroot  明确 地 配置 了 macos  sdk  则 只会 搜索 sdk  本身
 默认行为 仍然 可以通过 withtcltkincludes  和 with  tcltklibs  来 覆盖
 由 ned  deily  在 bpo 34956 中贡献
 python  现在可以 针对 windows 10 arm 64 进行 编译
 由 steve  dower  在 bpo 33125 中贡献
 现 在 当使用 pgo  时 一些 单独的 测试 会 被 跳过
 这些 测试 显 著 增加了 pgo  任务 的 时间 并且 可能无 助 于 提升 最终 可执行文件 的 优化 程度
 这样 能 使 任务 加 速 大 约15 倍
 运行 完整的 单元 测试 是 很 慢 的
 这 个 改变 可能导致 优化 程 序 稍 差 的 构建 因为 将 被执行 的 代码 分 支 不 够 多
 如果你 愿 意 等待 更 缓 慢 的 构建 则 可以使用
 profiletaskm  test  pgo  extended  来 恢复 旧版本 的 行为
 我们 不保证 哪个 pgo  任务 集 能 产生 更快 的 构建
 关 心 此 问题 的 用户 应当 自 行 运行 相关 基准 测试 因为 结果 可能 取决 于 具体 环境、 工作 负 载 以及 编译 工具 链
 请参阅 bpo 36044 和 bpo 37707 了解详情

c  api  的改变
 新 的 特性
 pep 573 添加了 pytypefrommoduleandspec  用 于 通过 类 来 关联 一 个 模块 pytypegetmodule  和 pytypegetmodulestate  用于获取 模 块 及其 状态 以及 pycmethod  和 methmethod  用 于 允许 一个 方法 访问 其 定义 所在的 类
 由 marcel  plch  和 petr  viktorin  在 bpo 38787 中贡献
 增加了 pyframegetcode  函数 获取 帧 代码
 增加了 pyframegetback  函数 获取 帧 的下一个 外部 帧
 由 victor  stinner  在 bpo 40421 中贡献
 将 pyframegetlinenumber  添加到 受限 的 c  api
 由 victor  stinner  在 bpo 40421 中贡献
 增加了 pythreadstategetinterpreter  和 pyinterpreterstateget  函数 用于获取 解释器
 增加了 pythreadstategetframe  函数 用于获取 python  线程 状态 的当前 帧
 增 加 了 pythreadstategetid  函数 获取 python  线程 状态 的唯一 标识符
 由 victor  stinner  在 bpo 39947 中贡献
 将 新 的 公有 pyobjectcallnoargs  函数 添加到 c  api  该函数 可 不带 任 何 参数调用 一个 python  可调用对象
 它 是 不带参数 调用 python  可调用对 象 最 有 效率 的方式
 由 victor  stinner  在 bpo 37194 中贡献
 受限 c  api  中 的改变 如果定义了 pylimitedapi  宏 提供 pyenterrecursivecall  和 pyleaverecursivecall  作为 常 规 函数用于 受限 api
 在之前版本中 是 使用 宏 定义 但 这些 宏 不 能 与 无法 访问 pythreadstate
recursiondepth  字段 的 受限 c  api  一 同 编译 该 结构体 在 受限 c  api  中 是 不 透明 的
 pyobjectinit  和 pyobjectinitvar  已 成为 常规 不 透明 函数 以 隐藏 实现细节
 由 victor  stinner  在 bpo 38644 和 bpo 39542 中贡献
 增加了 pymoduleaddtype  函数 以 协 助 将 类型 加入 到 模块 中
 由 donghee  na  在 bpo 40024 中贡献
 将 pyobjectgcistracked  和 pyobjectgcisfinalized  函数 添加 到 公有 api  以允许 分别 查询 python  对象 当前 是 正 在 被 追踪 还是 已经被 垃圾 回收器 所 终结
 由 pablo  galindo  salgado  在 bpo 40241 中贡献
 增加了 pyobjectfunctionstr  以获取 函数 类对象的 用户 友 好 的 表示形 式
 由 jeroen  demeyer  在 bpo 37645 中 修正
 增加了 pyobjectcallonearg  用 于 调用 具有 一个 位置参数 的 对象 由 jeroen  demeyer  在 bpo 37483 中 修正

 移植到 python
evalframe  pep 523 现 在 需要 有新的 强制 性 形 参 tstate  pythreadstate
 由 victor  stinner  在 bpo 38500 中 贡献
 扩展模块 pymoduledef  的 mtraverse  mclear  和 mfree  等 函 数 在 模块 状态 被 请求 但 尚未 被 分配 时 将 不会再 被调用
 这种情况 出现在 模块 被创建 之后 且 模块 被执行 pymodexec  函数 之前的 时 刻
 更 准确 地说 这些函数 在 msize  大于0 并且 模块 状态 即 pymodulegetstate  的 返回值为 null  时 将不会 被调用
 没有 模块 状态 的扩展模块 msize 0 不 会 受到 影响
 现 在 如果 pyaddpendingcall  是 在 子 解释器 内部 被调用 该函数 会 被 排 入 子 解释器 的 调用 日程 而不是 由 主 解释器 调用
 每个 子 解释器 现 在 都 拥有 它们 自己的 调用 日程 列表
 由 victor  stinner  在 bpo 39984 中贡献
 当 e  选项 被使用 如果 pyconfig
useenvironment  设 为0 时 将 不 再 使用 windows  注册表 来 初始化 sys
path
 这 会影响 在 windows  上 嵌入 python  的 操作
 由 zackery  spytz  在 bpo 8901 中贡献
 全局变量 pystructsequenceunnamedfield  现 在 为 常量 并且 指向一个 字符 串 常量
 由 serhiy  storchaka  在 bpo 38650 中贡献
 现 在 pygchead  结构 是 不 透明 的
 它只 在内部 c  api  pycoregc
h  中定义
 由 victor  stinner  在 bpo 40241 中贡献
 pyunicodecopy  pyunicodefill  pyunicodewstrlength  pyunicodefromunicode  pyunicodeasunicode  pyunicodeasunicode  以及 pyunicodeasunicodeandsize  在 c  中 被 标记为 已弃用
 它们 自 python 3
3 起 就 已被 pep 393 弃用
 由 inada  naoki  在 bpo 36346 中贡献
 pyfatalerror  函数 会 被 一个 自动 记录 当前 函数 名称 的 宏 所 替代 除非 已 定义了 pylimitedapi  宏
 由 victor  stinner  在 bpo 39882 中贡献
 vectorcall  协议 现 在 要求 调用者 只 传入 字符串 作为 键 名
 请参阅 bpo 37540 了解详情
 多个 宏 和 函数 的 实现细节 现在已 被 隐藏 pyobjectisgc  宏 已 被转换为 函数
 pyobjectnew  宏 已 成为 pyobjectnew  宏 的别名 而 pyobjectnewvar  宏 已 成为 pyobjectnewvar  宏 的别名
 它们 将不再 直接访问 pytypeobject
tpbasicsize  成员
 pytypehasfeature  现 在 总是会 调用 pytypegetflags
 在 之前 版本中 当 受限 的 c  api  未被 使用 时它会 直接访问 pytypeobject
tpflags  成员
 pyobjectgetweakrefslistptr  宏 已 被转换为 函数 该 宏 会 直接访问 pytypeobject
tpweaklistoffset  成员
 pyobjectcheckbuffer  宏 已 被转换为 函数 该 宏 会 直接访问 pytypeobject
tpasbuffer  成员
 现 在 pyindexcheck  总是 被 声明为 不 透明 函数 以 隐藏 实现细节 pyindexcheck  宏 已被移除
 该 宏 会 直接访问 pytypeobject
tpasnumber  成员
 详情 请参阅 bpo 40170

 移除
 pyfpe
h  的 pyfpestartprotect  和 pyfpeendprotect  宏 已从 受限 的 c  api  中 被 排除
 由 victor  stinner  在 bpo 38835 中贡献
 pytypeobject  的 tpprint  空 位 已被移除
 它 在 python 2
7 及 之前的版 本 中 被用来 将 对象 打印到 文件
 自 python 3
0 起 它 已 被忽略 并且 不再 使 用
 由 jeroen  demeyer  在 bpo 36974 中贡献
 受限 c  api  中 的改变 如果定义了 pylimitedapi  宏 以下函数 已从 受限 c  api  中 排除 pythreadstatedeletecurrent  由 joannah  nanjekye  在 bpo 37878 中贡献
 pycheckrecursionlimit  pynewreference  pyforgetreference  pytracemallocnewreference  pygetreftotal  在 受限 c  api  中 从未 使用 的 垃圾 箱 机制
 pytrashunwindlevel  pytrashcanbegincondition  pytrashcanbegin  pytrashcanend  pytrashcansafebegin  pytrashcansafeend  已 将 下列函数 和 定义 移至 内部 c  api  pydebugprinttotalrefs  pyprintreferences  pyprintreferenceaddresses  pytracemallocconfig  pyaddtoallobjects  pytracerefs  构建 专属 由 victor  stinner  在 bpo 38644 和 bpo 39542 中贡献
 移除了 pyruntime
getframe  钩子 并 移除了 pythreadstategetframe  宏 该 宏 是 pyruntime
getframe  的一个别名
 它们 仅 由 内部 c  api  对 外 公开
 同样 地 移除了 pythreadframegetter  类型
 由 victor  stinner  在 bpo 39946 中贡献
 从 c  api  移除了 下列函数
 请 显式地 调用 pygccollect  来 清空 所有 自 由 列表
 由 inada  naoki  和 victor  stinner  在 bpo 37340 bpo 38896 和 bpo 40428 中贡献
 pyasyncgenclearfreelists  pycontextclearfreelist  pydictclearfreelist  pyfloatclearfreelist  pyframeclearfreelist  pylistclearfreelist  pymethodclearfreelist  和 pycfunctionclearfreelist  绑定 方法 对象 的 自由 列表 已被移除
 pysetclearfreelist  集合 自由 列表 已 在 python 3
4 中被移除
 pytupleclearfreelist  pyunicodeclearfreelist  unicode  自由 列表 已 在 python 3
3 中 被 移除
 移除了 pyunicodeclearstaticstrings  函数
 由 victor  stinner  在 bpo 39465 中贡献
 移除了 pyunicodematch
 它 已被 pep 393 所 弃用并 自 python 3
3 起 不再 可 用
 可以 改 用 pyunicodetailmatch  函数
 由 inada  naoki  在 bpo 36346 中贡献
 清除 了 已 定义 但 未 实现 的 接口 的 头文件
 被移除 了 公共 api  符号 有 pybytesinsertthousandsgroupinglocale  pybytesinsertthousandsgrouping  pyinitializefromargs  pyinitializefromwideargs  pyfloatrepr  pyfloatdigits  pyfloatdigitsinit  pyframeextendstack  pyaiterwrappertype  pynullimportertype  pycmpwrappertype  pysortwrappertype  pynoargsfunction
 由 pablo  galindo  salgado  在 bpo 39372 中贡献

python 20 有什么新变化
 作者 a
 kuchling  和 moshe  zadka
 概述
what  about  python 16
 新 开发 流程
unicode
 列表推导式
augmented  assignment
 字符串 的 方法
garbage  collection  of  cycles
 其他 核心 变化
minor  language  changes
changes  to  builtin  functions
 移植 python
 扩展 嵌入 更改
distutils  使 模块 易于 安装
xml  模块
sax 2 support
dom  support
relationship  to  pyxml
 模块 更改
 新增 模块
idle  改进
 删除 和 弃用的 模块
 致谢
 作者 感谢 以下人 士 对 本文 的各种 草 稿 提 出 建议 david  bolen  mark  hammondgregg  hauser  jeremy  hylton  fredrik  lundh  detlef  lannert  aahzmaruch  skip  montanaro  vladimir  marangozov  tobias  polzin  guido  vanrossum  neil  schemenauer  and  russ  schmidt
python 23 有什么新变化
 作者 a
pep 218 a  standard  set  datatype
pep 255 simple  generators
 参见 pep 255 简单 生成器 written  by  neil  schemenauer  tim  peters  magnus  lie  hetland
pep 263 source  code  encodings
 参见 pep 263 defining  python  source  code  encodings  由 marcandr é lemburg  和 martin  von  l ö wis  撰写 由 suzuki  hisao  和 martin  von  l ö wis  实现
pep 273 从 zip  压缩 包 导入模块
 参见 pep 273  从 zip  压缩 包 导入模块 written  by  james  c
pep 277 unicode  file  name  support  for  windows  nt
 参见 pep 277 unicode  file  name  support  for  windows  nt  由 neil  hodgson  撰写 由 neil  hodgson  martin  von  l ö wis  和 mark  hammond  实现
pep 278 通 用 换行 支持
 参见 pep 278 通 用 换行 支持 由 jack  jansen  撰写并实现
pep 279 enumerate
 li  result  可以使用 enumerate  重写 为 for  i  item  in  enumeratel 
 li  result  参见 pep 279 内置函数 enumerate  由 raymond  d
 hettinger  撰写并实现
pep 282 logging  包
 参见 pep 282 logging  系统 由 vinay  sajip  和 trent  mick  撰写 由 vinay  sajip  实现
pep 285 布尔 类型
 参见 pep 285 添加 布尔 类型 由 gvr  撰写并实现
pep 293 codec  error  handling  callbacks
 参见 pep 293 codec  error  handling  callbacks  由 walter  d ö rwald  撰写并实现
pep 301 distutils  的 软件包 索引 和 元数据
 参见 pep 301 distutils  的 软件包 索引 和 元数据 由 richard  jones  撰写并实现
pep 302 new  import  hooks
pep 305 逗号分隔 文件
 参见 pep 305 csv  文件 api  由 kevin  altis  dave  cole  andrew  mcnamara  skip  montanaro  cliff  wells  撰写并实现
pep 307 pickle  enhancements
 参见 pep 307 extensions  to  the  pickle  protocol  pep  由 guido  van  rossum  和 tim  peters  撰写 和 实现
 扩展 切片
 其他语言特性修改
 two  new  constants  true  and  false  were  added  along  with  the  builtin  bool  type  as  described  in  section  pep 285 布尔 类型 of  this  document
 builtin  types  now  support  the  extended  slicing  syntax  as  described  in  section  扩展 切片 of  this  document
 also  the  dict  constructor  now  accepts  keyword  arguments  to  simplify  creating  small  dictionaries  dictred 1 blue 2 green 3 black 4 blue 2 black 4 green 3 red 1 由 just  van  rossum  贡献
 the  assert  statement  no  longer  checks  the  debug  flag  so  you  can  no  longer  disable  assertions  by  assigning  to  debug
string  changes
zfill 60 goofy  由 walter  d ö rwald  贡献
 a  new  type  object  basestring  has  been  added
 性能优化
 新增 改进 和 弃用的 模块
gnugetoptf  filename  output  v  fv  f  filename  v  output  由 peter å strand  贡献
 the  grp  pwd  and  resource  modules  now  return  enhanced  tuples  import  grp  g  grp
heappopheap 3 heap 5711 由 kevin  oconnor  贡献
 the  idle  integrated  development  environment  has  been  updated  using  the  code  from  the  idlefork  project  httpidlefork
 s  seqdict  dirs  see  that  other  dictionary  methods  are  implemented  cmp  contains  delitem  doc  getitem  init  iter  len  module  repr  setitem  clear  get  haskey  items  iteritems  iterkeys  itervalues  keylist  keys  pop  popitem  setdefault  update  valuelist  values  由 raymond  hettinger  贡献
 the  dom  implementation  in  xml
datetime  类型
optparse  模块
py  options  options  h  help  show  this  help  message  and  exit  iinput  inputinput  set  input  filename  llength  lengthlength  set  maximum  length  of  output  有关 更多 详细信息请参 见 模块的文档
pymalloc  a  specialized  object  allocator
 参见 httpshg
 构建和 c  api  的改变
portspecific  changes
other  changes  and  fixes
 移植到 python
 致谢
 作者 感谢 以下人 员 为 本文 的各种 草 案 提供 建议 更 正 和 帮助 jeff  bauersimon  brunning  brett  cannon  michael  chermside  andrew  dalke  scottdavid  daniels  fred  l
 david  fraser  kelly  gerberraymond  hettinger  michael  hudson  chris  lambert  detlef  lannertmartin  von  l ö wis  andrew  macintyre  lalo  martins  chad  netzer  gustavoniemeyer  neal  norwitz  hans  nowak  chris  reedy  francesco  ricciardivinay  sajip  neil  schemenauer  roman  suzi  jason  tishler  just  vanrossum
python 35 有什么新变化
 编 者 elvis  pranskevichus  elvismagic
 参见 pep 478 python 3
5 发布 计划
 摘要 发布 重 点
 新 的语法 特性 pep 492 使用 async  和 await  语法 实现 协程
 pep 465 新 的 矩阵 乘法 运算符 a  b
 新 的 库 模块 typing  pep 484 类型提示
 zipapp  pep 441 改进 python  zip  应用程序 支持
 新 的内置 特性 bytes  args  bytearray  args  pep 461 adding  formatting  to  bytes  and  bytearray
cpython  实现 的改进 when  the  lctype  locale  is  the  posix  locale  c  locale  sys
 标准库中 的 重 大 改进 collections
 安全 改进 sslv 3 is  now  disabled  throughout  the  standard  library
windows  改进 a  new  installer  for  windows  has  replaced  the  old  msi
 see  在 windows  上 使用 python  for  more  information
 新 的 特性
pep 492 使用 async  和 await  语法 实现 协程
close  将 输出 coro 2 waiting  for  lock  coro 2 holding  the  lock  coro 1 waiting  for  lock  coro 2 releasing  the  lock  coro 1 holding  the  lock  coro 1 releasing  the  locknote  that  both  async  for  and  async  with  can  only  be  used  inside  acoroutine  function  declared  with  async  def
 注解 在3
2 版更改 starting  with  cpython 3
2 aiter  can  directly  return  asynchronous  iterators
 returning  an  awaitable  object  will  result  in  a  pendingdeprecationwarning
see  more  details  in  the  异步 迭代器 documentation  section
 参见 pep 492 使用 async  和 await  语法 实现 协程 pep  由 yury  selivanov  撰写并实现
pep 465 用 于 矩阵 乘法 的 专用 中 缀 运算符
 矩阵 乘法 在 数学 科学 工 程 学 的 许多 领 域 中 是一种 常见的 操作 使用 运算符 可以 编写 更简 洁 的 代码 s  h  beta  r
t  h  beta  r  代替 s  dotdoth  beta  r
10 支持 新 的 运算符 import  numpy  x  numpy
 参见 pep 465 用 于 矩阵 乘法 的 专用 中 缀 运算符 pep  由 nathaniel  j
 smith  撰写由 benjamin  peterson  实现
pep 448 additional  unpacking  generalizations
 fna 1 c 3 b 2 d 41234 similarly  tuple  list  set  and  dictionary  displays  allow  multipleunpackings  see  表达式列表 and  字典 显示 range 4401234 range 4401234 range 4456701234567 x 1 y 2 x 1 y 2 参见 pep 448 additional  unpacking  generalizations  pep  由 joshua  landau  撰写 由 neil  girdharthomas  wouters  和 joshua  landau  实现
pep 461 percent  formatting  support  for  bytes  and  bytearray
 例如 bhello  b  bworld  bhello  world  bxi  yf 12
 参见 pep 461 adding  formatting  to  bytes  and  bytearray  pep  由 ethan  furman  撰写 由 neil  schemenauer  和 ethan  furman  实 现
pep 484 类型提示
 参见 typing  模块 文档 pep 484 类型提示 pep  由 guido  van  rossumjukka  lehtosalo  和ł ukasz  langa  撰写 由 guido  van  rossum  实现
 pep 483 类型提示 理 论 pep  由 yury  selivanov  撰写
pep 471 osscandir  function  a  better  and  faster  directory  iterator
name  参见 pep 471 os
scandir  function  a  better  and  faster  directory  iterator  pep  由 ben  hoyt  在 victor  stinner  的 帮助 下 撰写并实现
pep 475 retry  system  calls  failing  with  eintr
 compare  printhello  world  和 while  true  try  printhello  world  break  except  interruptederror  continuepep 475 implements  automatic  retry  of  system  calls  on  eintr
below  is  a  list  of  functions  which  are  now  retried  when  interrupted  bya  signal  open  和 io
open  faulthandler  模块 的功能 os  函数 fchdir  fchmod  fchown  fdatasync  fstat  fstatvfs  fsync  ftruncate  mkfifo  mknod  open  posixfadvise  posixfallocate  pread  pwrite  read  readv  sendfile  wait 3 wait 4 wait  waitid  waitpid  write  writev  特 例 os
close  和 os
dup 2 现在会 忽略 eintr  错误 不 重 试 系 统调用 请参阅 pep  了解 基本 原 理 select  函数 devpoll
poll  kqueue
control  poll
poll  select  socket  类 的 方法 accept  connect  除了 非阻塞 套接字 recv  recvfrom  recvmsg  send  sendall  sendmsg  sendto  signal
sigtimedwait  和 signal
 参见 pep 475 retry  system  calls  failing  with  eintr  pep  and  implementation  written  by  charlesfran ç ois  natali  and  victor  stinner  with  the  help  of  antoine  pitrou  the  french  connection
pep 479 change  stopiteration  handling  inside  generators
pep 485 a  function  for  testing  approximate  equality
00001 false  参见 pep 485—— 用 于 测试 近似 相等的 函数 pep  由 christopher  barker  撰写由 chris  barker  和 tal  einat  实现
pep 486 make  the  python  launcher  aware  of  virtual  environments
 参见 pep 486 make  the  python  launcher  aware  of  virtual  environments  pep  由 paul  moore  撰写并实现
pep 488 elimination  of  pyo  files
 参见 pep 488 elimination  of  pyo  files  pep  由 brett  cannon  撰写并实现
pep 489 multiphase  extension  module  initialization
 参见 pep 489 multiphase  extension  module  initialization  pep  由 petr  viktorin  stefan  behnel  和 nick  coghlan  撰写由 petr  viktorin  实现
 其他语言特性修改
 对 python  语言核心 进行 的 小 改 动 added  the  namereplace  error  handlers
 新增 模块
typing
zipapp
 参见 pep 441 improving  python  zip  application  support
 改进的模块
argparse
asyncio
3
1 中 的 更新 the  ensurefuture  function  and  all  functions  that  use  it  such  as  loop
3
2 中 的 更新 new  loop
bz
cgi
cmath
code
collections
doc  ordinate  由 berker  peksag  在 bpo 24064 中贡献
the  userstring  class  now  implements  the  getnewargsrmod  casefold  formatmap  isprintable  andmaketrans  methods  to  match  the  corresponding  methods  of  str
collectionsabc
compileall
concurrentfutures
configparser
 示例 import  configparser  conv  convlist  lambda  v  e
getlistlist  a  b  c  d  e  f  g  由ł ukasz  langa  在 bpo 18159 中贡献

contextlib
getvalue  warningrootwarningn  由 berker  peksag  在 bpo 22389 中贡献

csv
curses
dbm
difflib
distutils
doctest
email
enum
dog 11 由 ethan  furman  在 bpo 21706 中贡献

faulthandler
functools
glob
gzip
heapq
mergereverseda  reversedb  keylen  reversetrue 555556666777889 由 raymond  hettinger  在 bpo 13742 中贡献

http
httpclient
remotedisconnected  pass  由 martin  panter  在 bpo 3566 中贡献

idlelib  与 idle
imaplib
imghdr
importlib
inspect
arguments  ordereddicta  spam  b  ham  args  由 yury  selivanov  在 bpo 24190 中贡献
a  new  class  method  signature
io
ipaddress
08 由 peter  moody  和 antoine  pitrou  在 bpo 16531 中贡献
a  new  reversepointer  attribute  for  the  ipv 4 network  andipv 6 network  classes  returns  the  name  of  the  reverse  dns  ptr  record  import  ipaddress  addr  ipaddress
arpa  由 leon  weber  在 bpo 20480 中贡献

json
linecache
locale
56 由 c é dric  krier  在 bpo 13918 中贡献

logging
errorexception  excinfoex  errorrootexception  由 yury  selivanov  在 bpo 20537 中贡献
the  handlers
lzma
math
multiprocessing
operator
os
commonpathusrlib  usrlocallib  usr  由 rafik  draoui  和 serhiy  storchaka  在 bpo 10395 中贡献

pathlib
samefilep 2 true  由 vajrasky  kok  和 antoine  pitrou  在 bpo 19775 中贡献
the  path
writetextham 3 由 christopher  welborn  在 bpo 20218 中贡献

pickle
poplib
re
srematch  object  span 03 matchbbc  由 serhiy  storchaka  在 bpo 9179 中贡献
the  number  of  capturing  groups  in  regular  expressions  is  no  longerlimited  to 100
error  multiple  repeat  at  position 16 line 3 column 7 由 serhiy  storchaka  在 bpo 22578 中贡献

readline
selectors
shutil
signal
smtpd
smtplib
sndhdr
socket
ssl
memory  bio  support  由 geert  jansen  在 bpo 21965 中贡献
the  new  sslobject  class  has  been  added  to  provide  ssl  protocolsupport  for  cases  when  the  network  io  capabilities  of  sslsocket  arenot  necessary  or  are  suboptimal
applicationlayer  protocol  negotiation  support  由 benjamin  peterson  在 bpo 20188 中贡献
where  openssl  support  is  present  the  ssl  module  now  implements  theapplicationlayer  protocol  negotiation  tls  extension  as  described  inrfc 7301
sqlite
subprocess
 例如 subprocess
sys
sysconfig
tarfile
threading
time
timeit
tkinter
traceback
types
unicodedata
unittest
unittestmock
urllib
wsgiref
xmlrpc
xmlsax
zipfile
 其他模块 级 更改
 性能优化
 构建和 c  api  的改变
 增加了 calloc  函数 pymemrawcalloc  pymemcalloc  pyobjectcalloc
victor  stinner  贡献 于 bpo 21233
 新 的 encodingdecoding  帮助 函数 pydecodelocale  替代 pychar 2 wchar  pyencodelocale  替代 pywchar 2 char
 由 victor  stinner  在 bpo 18395 中贡献
a  new  pycodecnamereplaceerrors  function  to  replace  the  unicodeencode  error  with  n
 弃用
 新 关键字
 已弃用的 python  行为
 不支持 的操作系统
 已弃用的 python  模块、 函数 和 方法
 移除
api  与 特性 的 移除
 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
python  行为 的改变
 由 于 一个 疏 忽 之前的 python  版本 会 错误 地 接受 以 下 语法 f 1 for  x  in 1 args  f 1 for  x  in 1 kwargs  python 3
 改变 了 的 python  api
c  api  中 的改变
 refer  to  协 程 对象 for  new  types  structures  and  functions
python 354 的 显 著 变化
new  make  regenall  build  target
 由 victor  stinner  在 bpo 23404 中贡献
3
4 新版功能
removal  of  make  touch  build  target
 由 victor  stinner  在 bpo 23404 中贡献
 在3
4 版更改
python 37 有什么新变化
 编 者 elvis  pranskevichus  elvismagic
io  本文 解释 了 python 3
7 相比3
6 的 新增 特性
7 于2018 年6 月27 日 发布
 完整的 详情 可 参阅 更新 日志
 摘要 发布 重 点
 新 的语法 特性 pep 563 类型 标注 延迟 求值
 向后 不兼容 的语法 更改 async  和 await  现在是 保留 的 关键字
 新 的 库 模块 contextvars  pep 567 上下文变量 dataclasses  pep 557 数据类 importlib
resources  新 的内置 特性 pep 553 新 的 breakpoint  函数
 对 python  数据 模 型 的改进 pep 562 自定义 可 访问 的 模块属性
 pep 560 typing  模块 和 泛型类型 的 核心 支持
 dict  对象 会 保持 插入 时 的顺序 这 个 特性 正式 宣 布 成为 python  语言 官 方 规 范 的一部分
 标准库中 的 重 大 改进 asyncio  模块 添加了新的 功能 重 大 改进 请参阅 可用性 与 性能 提升
 time  模块现在 提供 纳 秒 级 精度 函数 的 支持
cpython  实现 的改进 避免 使用 ascii  作为 默认 的 文本 编码 pep 538 传统 c  区域 强制转换 pep 540 强制 utf 8 运行时 模式 pep 552 确定性 的
pyc  文件 新 的 python  开发模式 pep 565 改进的 deprecationwarning  处理 c  api  的改进 pep 539 用 于 线程 本地 存储 的 新 c  api  文档 的改进 pep 545 python  文档 翻译 新 的 文档 翻译 japanesefrench  和 korean
 此 版本 在 诸 多 方面 有 显 著 的性能 改进
 性能优化 章节 详细 列出了 它们
 和 之前的 python  版本 存 在 兼容性 的 更改 列表 请参阅 移植到 python 3
7 章节
 新 的 特性
pep 563 延迟 的 标注 求值
 随着 pep 3107 加入 标注 功能 并 在 pep 526 进一步 细 化 python  中 类型提示 的 出现 揭 示 了两个 明显 的 可用性 问题 标注 只能 使用 在当前 作用域中 已经 存在的 名称 也就是说 它们不 支持 任何 形 式 的 前 向 引用 而且—— 标注 源码 对 python  程序 的 启动 时间 有 不 利 的 影响
 这两个 问题 都 可以通过 延迟 标注 求值 来 解决
 在 定义 标注 的时候 编译器 并不会 编译 执行 相应 表达式 的 代码 而 是 保存 与 相应 表达式 的 ast  等价 的 字符串形式
 如果有 需要 标注 可以 在运行时 使用 typing
gettypehints  进行 解析
 在 不需要 这种 解析 的 通常情况下 标注的 存储 成 本 更 低 因为 解析器 只需 处理 较 短 的 字符串 且 启动 时间 更 短
 在 可用性 方面 标注 现在支持 向 前 引用 以 使 以 下 句 法 有效 class  c  classmethod  def  fromstringcls  source  str  c 
 由 于 此 修改 会破坏 兼容性 在 python 3
7 中 此 种 新 的 行为 需要 在 每个 模块层级 上 使用 future  导入 来 启用 from  future  import  annotations  它 将 在 python 3
10 中 成为 默认行为
 参见 pep 563 延迟 的 标注 求值 pep  由ł ukasz  langa  撰写并实现
pep 538 传统 c  区域 强制转换
python 3 系列 有 一个 持续 的 挑 战 就是 为 处理7 比特位 ascii  文本 的 假定 编码 确定 合理的 默认 策略 目前 的 设 定 是 在 非 windows  平台上 使用默认 的 c  或 posix  区域设置
pep 538 更新 了 默认 的 解释器 命令行接口 以 自动将 上述 区域 强制转换 为 可用的 基于 utf 8 的区域 具体 描述 可 参见 有关 新增 环境变量 pythoncoerceclocale  的 文档
 以 这种方式 自动 设置 lcctype  意味着 核心 解释器 和 能 感知 区域 的 c  扩展 例如 readline  都 将 会 假定 utf 8 已 被用作 默认 的 文本 编码 而不再 是 ascii
pep 11 中 的 平台 支持 定义 也 已被 更新 以 限制 完整 文本 处理 支持 适当 配置 的 基于 非 ascii  的 语言 区域
 作为 此 更改 的一部分 当使用 任何 已 定义 的 强制转换 目标 区域 时 目前 为 c
utf 8 c
utf 8 和 utf 8 stdin  和 stdout  默认 的 处理器 现在将 为 surrogateescape  而不是 strict
 而 无论 是什么 区域 stderr  默认 的 处理器 仍 为 backslashreplace
 默认情况下 区域 强制转换 会 静默 进行 但 为 了 辅助 调试 潜在 的区域 相关 集成 问题 可以通过 设置 pythoncoerceclocalewarn  来 请求 显式地 启用 警告 信息 直接 在 stderr  上 发出
 此 设置 还 会 使得 python  运行时 在 核心 解释器 初始化 时如果 传统 c  区域 仍然 处于 激活 状态 时 发出 警告
 虽然 pep 538 的区域 强制转换 的 好处 在于它 还 会 同时 影响 扩展模块 例如 gnu  readline  以及 子进程 包括 运行 非 python  应用 和 旧版本 python  的 子进程 但它 也 存 在 需要 所 运行 系统 必须 存 在 适合 的 目标 区域 的 缺 点
 为 了 更好地 处理 没有可用 适合 的 目标 区域 的 情况 例如 在 rhelcentos 7 上 就 会出现 此情况 python 3
7 还 实现了 pep 540 强制 utf 8 运行时 模式
 参见 pep 538 强制转换 传统 c  区域 到 基于 utf 8 的区域 pep  由 nick  coghlan  撰写并实现
pep 540 强制 utf 8 运行时 模式
 新 的 x  utf 8 命令行选项 和 pythonutf 8 环境变量 可被用来 启用 cpython  的 utf 8 模式
 当 处于 utf 8 模式 时 cpython  会 忽略 区域设置 并 默认使用 utf 8 编码
 用 于 sys
stdin  和 sys
stdout  流 的 错误 处理器 将 设置为 surrogateescape
 强制 utf 8 模式 可被用来 在 嵌入 的 python  解释器中 改变 文本 处理 行为 而不会 改变 嵌入 方 应用 的 区域设置
pep 540 的 utf 8 模式 的 好处 是 不必 关 心 运行 所 在 系统中 有 哪些 可 用 区域 即可 工作 但它 也 存 在 对 扩展模块 例如 gnu  readline 、 运行 非 python  应用 的 子进程 以及 运行 旧版本 python  的 子进程 不 起作用 的 缺 点
 为 了 减 小 与 这些 组件 通信 时 破坏 文本 数据 的 风 险 python 3
7 还 实现了 pep 540 强制 utf 8 运行时 模式
utf 8 模式 在 语言 区域 为 c  或 posix  并且 pep 538 区域 强制转换 特性 无法 将 其 修改 为 某种 基于 utf 8 的替代 项 时会被 默认 启用 无论 修改 失败 是由于 设置了 pythoncoerceclocale 0 lcall  还 是由于 缺少 适合 的 目标 区域
 参见 pep 540 增加了新的 utf 8 模式 pep  由 victor  stinner  撰写并实现
pep 553 内置的 breakpoint
7 包含了 新 的内置 breakpoint  函数 作为 一种 简单 方便地 进入 python  调试器 的方式
 内置 breakpoint  会 调用 sys
 在默认情况下 后者 会 导入 pdb  然后再 调用 pdb
settrace  但是 通过将 sys
breakpointhook  绑定到 你 选 定 的 函数 breakpoint  可以 进入 任何 调试器
 此外 环境变量 pythonbreakpoint  可 被设置为 你 选 定 的 调试器 的可调用对象
 设置 pythonbreakpoint 0 会 完全 禁用 内置 breakpoint
 参见 pep 553 内置的 breakpoint  pep  由 barry  warsaw  撰写并实现
pep 539 用 于 线程 局部 存储 的 新 c  api
 虽然 python  已 提供 了用于 线程 局部 存储 支持 的 c  api  但 原 有 的 线程 局部 存储 tls  api  使用 int  来表示 所有平台 上 的 tls  密钥
 对 于 官 方 支持 的 平台 而言 这通常 不 是 问题 但 这 既 不 符合 posix  标准 也不 具 备 任何 实际 意义 上 的 可移植 性
pep 539 通过 向 cpython  提供了一个 新 的 线程 特定 存储 tss  api  来 改变 这一点 它 取 代 了 原 有 的 cpython  内部 tls  api  的 使用 并且 原 有 api  已弃用
 tss  api  使用 一种 新 类型 pytsst  而非 int  来表示 tss  密钥 这 是一种 不 透明 类型 其 定义 可能 依赖于 下层的 tls  实现
 因此这 将 允许在 以 无法 安全地 转换为 int  的方式 定义 原生 tls  密钥 的平台上 构建 cpython
 请注意 在 原生 tls  密钥 定义 方式 无法被 安全地 转换为 int  的平台上 原 有 tls  api  中 的全部 函数 将 无法 执行 并 会 立即 返回 失败 信息
 这样 能 清楚 地 表明 原 有 api  在 无法 可靠 使用 的平台上 不受支持 并且 不会再 尝试 添加 此 类 支持
 参见 pep 539 在 cpython  中 用 于 线程 局部 存储 的 新 capi  pep  由 erik  m
 bray  撰写由 masayuki  yamamoto  实现
pep 562 定制 对 模块属性 的 访问
7 允许在 模块 上 定义 getattr  并且 当 以 其他方 式 找不到 某个 模块属性 时 将 会 调用 它
 在 模块 上 定义 dir  现 在 也是 允许 的
 一个 典型 的 可能 有用的 例子 是 已弃用 模块属性 和 惰 性 加载
 参见 pep 562 模块 的 getattr  和 dir  pep  由 ivan  levkivskyi  撰写并实现
pep 564 具有 纳 秒 级 精度的 新 时间 函数
 现 代 系统 的 时钟 精度 可以 超过 由 time
time  函数 及其 变化 形式 所返回的 浮点数 的 有限 精度
 为 了 避免 精度 损 失 pep 564 在 time  模块 中 增加了 原 有 计时器 函数 的 六 个 新 纳 秒 版 变化 形式 time
timens  这些 新 函数 会 以 整数值 的 形式返回 纳 秒数
 测量 表明 在 linux  和 windows  上 time
timens  的精度 大 约 比 time
time  要 高3 倍
 参见 pep 564 增加 具有 纳 秒 级 精度的 新 时间 函数 pep  由 victor  stinner  撰写并实现
pep 565 在 main  中显示 deprecationwarning
pep 560 对 typing  模块 和 泛型类型 的 核心 支持
pep 484 最初 的 设计 方式 使 其 不 会 向 核心 cpython  解释器 引入 任何 更改
 现 在 类型提示 和 typing  模块 已被 社 区 广泛 使用 因此这 个 限制 已 被取消
 这 个 pep  引入了 两个 特殊方法 classgetitem  和 mroentries  这些方法 现 在 被 typing  中 的 大多数 类 和 特殊 构造 所 使用
 结果 就是 与 类型 相关的 各 类 操作 的速度 提升 了7 倍 泛型类型 可以 在没有 元 类 冲突 的情况下 被使用 而 typing  模块 中 几个 长 期 存在的 错误 也 已被 修正
 参见 pep 560 对 typing  模块 和 泛型类型 的 核心 支持 pep  由 ivan  levkivskyi  撰写并实现
pep 552 基于哈希 值 的 pyc  文件
pep 545 python  文档 翻译
pep 545 描述了 创建 和 维护 python  文档 翻译 的 整个 过程
 新增了 三个 新 的 翻译 版本 日 语 httpsdocs
orgja  法 语 httpsdocs
orgfr  韩 语 httpsdocs
orgko  参见 pep 545 python  文档 翻译 pep  由 julien  palard  inada  naoki  和 victor  stinner  撰写并实现
python  开发模式 x  dev
 新 的 x  dev  命令行选项 或 新 的 pythondevmode  环境变量 可被用来 启用 python  开发模式
 在 开发模式 下 python  将 执行 额外的 如果 默认 启用 会导致 开销 过 大 的 运行时 检查
 请参阅 python  开发模式 文档 查看 完整 说明
 其他语言特性修改
 await  表达式 和 包含 async  for  子句 的 推导式 不允许 在 格式化字符串 字 面值 的 表达式 中 使用
 在 python 3
7 中 此 限制 已 被取消
 现在可以 将 超过255 个参数 传递给 一个 函数 而 现 在 一个 函数 也可以 拥有 超 过255 个 形参
 由 serhiy  storchaka  在 bpo 12844 和 bpo 18896 中贡 献
 现 在 bytes
fromhex  和 bytearray
fromhex  会 忽略 所有 ascii  空 白符 而非 仅 是 空格符
 由 robert  xiao  在 bpo 28927 中贡献
 str  bytes  和 bytearray  获得 了 对 新 isascii  方法 的 支持 该 方法 可被用来 测试 是 个 字符串或 字节串 是否 仅 包含 ascii  字符
 由 inada  naoki  在 bpo 32677 中贡献
 现 在 当 from 
 失败时 importerror  会显示 模块名称 和 模 块 file  路径
 由 matthias  bussonnier  在 bpo 29546 中贡献
 现在已 支持 涉及 将 子模块 绑定到 一个 名称 的绝对 导入 的 循环 导入
 由 serhiy  storchaka  在 bpo 30024 中贡献
 现 在 object
formatx  等价于 strx  而非 formatstrself 
 由 serhiy  storchaka  d  bpo 28974 中贡献
 为 更好地 支持 栈 跟踪 的动态 创建 现 在 types
tracebacktype  可以从 python  代码中 被 实例化 并且 回溯 对象 的 tbnext  属性 现在是 可 写 的
 由 nathaniel  j
 smith  在 bpo 30579 中贡献
 当使用 m  开 关 时 现 在 sys
path 0 会 主 动 扩展 为 完整的 起始 目录 路 径 而不是 保持 为空 目录 这 将 允许在 发生 导入时 从 当前 工作 目录 导入 由 nick  coghlan  在 bpo 33053 中贡献
 新 的 x  importtime  选项 或 pythonprofileimporttime  环境变量 可 被 用来 显示 每次 模块 导入 的 时间
 由 victor  stinner  在 bpo 31415 中贡献

 新增 模块
contextvars
 新 的 contextvars  模块 和 一 组 新 的 c  api  引入了 对 上下文变量 的 支持
 上下文变量 在 概念 上 类似于 线程 局部变量
 与 tls  不同 上下文变量 能 正确地 支持 异步 代码
asyncio  和 decimal  已 得到 更新 以 使用 和 支持 开 箱 即 用 的 上下文变量
 特别是 激活 的 decimal  上下文 现在将 存储在 上下文变量 中 它允许 十进制 运算 在 异步 代码中使用 正确的 上下文
 参见 pep 567 上下文变量 pep  由 yury  selivanov  撰写并实现
dataclasses
 新 的 dataclass  装饰器 提供了一种 声明 数据类 的方式
 数据类 使用 变量 标注 来 描述 其 属性
 它 的 构造器 和其他 魔 术 方法 例如 repreq  以及 hash  会自动 地 生成
 示例 dataclass  class  point  x  float  y  float  z  float 0
0 参见 pep 557 数据类 pep  由 eric  v
 smith  撰写并实现
importlibresources
 新 的 importlib
resources  模块 提供了一些 新 的 api  和 一个新的 abc  用 于 访问、 打开 和 读取 包 内 的 资源
 资源 基本上 类似于 包 内 的 文件 但它们 不一定 是 物理 文件系统 中 实际 的 文件
 模块 加载器 可以提供 getresourcereader  函数 它 会返回一个 importlib
resourcereader  实例 来 支持 这 个 新 api
 内置的 文件 路径 加载器 和 zip  文件 加载器 都支持 此 特性
 由 barry  warsaw  和 brett  cannon  在 bpo 32248 中贡献
 参见 importlibresources  用 于 先前 python  版本 的 pypi  下层 接口
 改进的模块
argparse
 新 的 argumentparser
parseintermixedargs  方法 允许 混合 选项 与 位置参数
 由 paul
j 3 在 bpo 14191 中 提供

asyncio
asyncio  模块 获得 了许多 新 的 特性、 可用性 和 性能 提升
 重要的 改变 包括 新 的 暂 定 asyncio
run  函数 可被用于 通过 自动创建 和 销 毁 事件循环 来 基于 同步 代码 运行 协程
 由 yury  selivanov  在 bpo 32314 中贡献
 asyncio  增加 支持 contextvars
calllater  loop
callat  并且 future
adddonecallback  具有 新 的 可选 仅 关键字参数 context 
 现 在 tasks  会自动 跟踪 其 上下文
 详情参见 pep 567
 由 yury  selivanov  在 bpo 32436 中贡献
 增加了新的 asyncio
createtask  函数 作为 asyncio
createtask  的 快 捷方式
 由 andrew  svetlov  在 bpo 32311 中贡献
 新 的 loop
starttls  方法可用于 升级 现有的 tls  连接
 由 yury  selivanov  在 bpo 23749 中贡献
 新 的 loop
sockrecvinto  方法 允许 直接 从 套接字 读取数据 放入 所提供 的 缓冲区 从而 可以 减少 数据 复制
 由 antoine  pitrou  在 bpo 31819 中 贡献
 新 的 asyncio
currenttask  函数 可 返回当前 运行 的 task  实例 以及 新 的 asyncio
alltasks  函数 可 返回给定 循环 中所有 现 存 task  实例 的 集合
 task
currenttask  和 task
alltasks  方法 已弃用
 由 andrew  svetlov  在 bpo 32250 中贡献
 新 的 暂 定 bufferedprotocol  类 允许 通过 手动 控制 接收 缓冲区 来实现 流 式 协议
 由 yury  selivanov  在 bpo 32251 中贡献
 新 的 asyncio
getrunningloop  函数 可 返回当前 运行 的 循环 如果没有 循环 在 运行 则引发 runtimeerror
 这 与 asyncio
geteventloop  不 同 后者 在没有 循环 在运行时 将 创建 一个新的 事件循环
 由 yury  selivanov  在 bpo 32269 中 提供
 新 的 streamwriter
waitclosed  协程 方法 允许 执行 等待直到 流 写入 器 被 关闭
 新 的 streamwriter
isclosing  方法可用于 确定 写入 器 是否 被 关 闭
 由 andrew  svetlov  在 bpo 32391 中贡献
 新 的 loop
socksendfile  协程 方法 允许在 可能 的情况下 使用 os
sendfile  发送 文件
 由 andrew  svetlov  在 bpo 32410 中贡献
 新 的 future
getloop  和 task
getloop  方法 会返回 创建 task  或 future  对象 的事件循环 的 实例
 server
getloop  允许 为 asyncio
server  对象 执行 同样 操作
 由 yury  selivanov  在 bpo 32415 中 以及 由 srinivas  reddy  thatiparthy  在 bpo 32418 中贡献
 现在可以 控制 asyncio
server  的 实例 如何 开 启 服务
 之前 服务 在 创建 后 将 立即 开 启 服务
 新 的 startserving  关键字参数 已 添加到 loop
createserver  和 loop
createunixserver  并且 server
startserving  和 server
serveforever  可被用来 分 离 服 务 的 实例化 和 服务 的 开 启
 新 的 server
isserving  方法 会 在 服务 开 启 时返回 true
 现 在 server  对象 已 是 异步 上下文管理器 srv  await  loop
 由 yury  selivanov  在 bpo 32662 中贡献
 由 loop
calllater  所返回的 回调 对象 已 获得 新 的 when  方法 该 方法 会返回一个 排 入 计划 日程 的绝对 时间戳
 由 andrew  svetlov  在 bpo 32741 中贡献
 loop
createdatagramendpoint  方法 已 获得 对 unix  套接字 的 支持
 由 quentin  dawans  在 bpo 31245 中贡献
 asyncio
createacceptedsocket  方法 及其 对应的 unix  套接字 变体 现在接 受 sslhandshaketimeout  关键字参数
 由 neil  aspinall  在 bpo 29970 中贡献
 新 的 handle
cancelled  方法 会 在 回调 被取消 时返回 true
 由 marat  sharafutdinov  在 bpo 31943 中贡献
 asyncio  源 已 被转换为 使用 asyncawait  语法
 由 andrew  svetlov  在 bpo 32193 中贡献
 新 的 readtransport
isreading  方法可用于 确定 传输的 读取 状态
 此 外 对 readtransport
resumereading  和 readtransport
pausereading  的 调用 现在是 幂 等 的
 由 yury  selivanov  在 bpo 32356 中贡献
 接受 套接字 路径 的 循环 方法 现在支持 传入 路径 类对象
 由 yury  selivanov  在 bpo 32066 中贡献
 在 asyncio  中 linux  上 的 tcp  套接字 现 在 创建时 默认 带有 tcpnodelay  旗标 设置
 由 yury  selivanov  和 victor  stinner  在 bpo 27456 中贡献
 在 被取消 任务 中 发生 的 异常 不会再 被 记录
 由 yury  selivanov  在 bpo 30508 中贡献
 新 的 windowsselectoreventlooppolicy  和 windowsproactoreventlooppolicy  类
 由 yury  selivanov  在 bpo 33792 中贡献
 部分 asyncio  api  改 为 已弃用
binascii
b 2 auu  函数 现在接受 可选的 backtick  关键字参数
 当 其 为真值 时 零 会 以 而非 空格 来表示
 由 xiang  zhang  在 bpo 30103 中贡献

calendar
htmlcalendar  类 具有 新 的 类属性 可以 简化 所生成 html  日 历 中 css  类 的 自定义
 由 oz  tiram  在 bpo 30095 中贡献

collections
namedtuple  现在支持 默认值
 由 raymond  hettinger  在 bpo 32320 中贡献

compileall
compiledir  增加了新的 invalidationmode  形参 可用于 启用 基于哈希 值 的
pyc  有效 性 检测
 失效 模式 也可以 在命令行中 使用 新 的 invalidationmode  参数 来指定
 由 benjamin  peterson  在 bpo 31650 中贡献

concurrentfutures
processpoolexecutor  和 threadpoolexecutor  现在支持 新 的 初始化器 以及 initargs  构造器 参数
 由 antoine  pitrou  在 bpo 21423 中贡献
processpoolexecutor  现 在 能 通过 新 的 mpcontext  参数 来 接受 多 进程 上下文
 由 thomas  moreau  在 bpo 31540 中贡献

contextlib
 新 的 nullcontext  是一个 比 exitstack  更简单 和 快速 的 无 操作 上下文管理器
 由 jessebakker  在 bpo 10049 中贡献
 增加了新的 asynccontextmanager  abstractasynccontextmanager  和 asyncexitstack  以 补 充 它们 所对应的 同步 项
 由 jelle  zijlstra  在 bpo 29679 和 bpo 30241 中 以及 由 alexander  mohr  和 ilya  kulakov  在 bpo 29302 中贡献

cprofile
cprofile  命令行 现在接受 m  modulename  作为脚本 路径 的替代
 由 sanyam  khurana  在 bpo 21862 中贡献

crypt
crypt  模块 现在支持 blowfish  哈希 方法
 由 serhiy  storchaka  在 bpo 31664 中贡献
mksalt  函数 现 在 允许 指定 哈希 操作 的 轮 数
 由 serhiy  storchaka  在 bpo 31702 中贡献

datetime
 新 的 datetime
fromisoformat  方法 会 基于 由 datetime
isoformat  所 输出 的 某一 特定 格式字符串 构建 datetime  对象
 由 paul  ganssle  在 bpo 15873 中贡献
tzinfo  类 现在支持 小于 一 分 钟 的 偏移量
 由 alexander  belopolsky  在 bpo 5288 中贡献

dbm
dumb  现在支持 读取 只读 文件 并且 在 其 未 改变 时 不再 写入 索引 文件
decimal
decimal  模块现在 使用 上下文变量 来 储存 十进制 值 上下文
 由 yuryselivanov  在 bpo 32630 中贡献

dis
dis  函数 现 在 能够 反汇编 嵌套的 代码对象 推导式、 生成器表达式 和 嵌套 函数 的 代码 以及 用 于 构建 嵌套 类 的 代码
 反汇编 递归 的最大 深度 由 新 的 depth  形参 来 控制
 由 serhiy  storchaka  在 bpo 11822 中贡献

distutils
rst  现 在 包含在 distutils  的 标准 readme  列表 之 中 因而 也 包含在 源码 发布 之 中
 由 ryan  gonzalez  在 bpo 11913 中贡献

enum
functools
singledispatch  现在支持 使用 类型 标注 来 注册 实现
 由ł ukasz  langa  在 bpo 32227 中贡献

gc
 新 的 gc
freeze  函数 允许 冻结 由 垃圾回收 器 所 跟踪 的 所有 对象 并 将它们 从 未来的 集合中 排除
 这可以 在 posix  fork  调用 之前 使用 以 令 gc  友 好地 进行 写入 时 复制 或 加 速 收集
 新 的 gc
unfreeze  函数 会 反 转 此操作
 此外 gc
getfreezecount  可被用于 获取 冻结 对象 的数量
 由 lizekun  在 bpo 31558 中贡献

hmac
hmac  现 在具有 经 优化 的 一次性 digest  函数 其 速度 比 hmac  要 快 三 倍
 由 christian  heimes  在 bpo 32433 中贡献

httpclient
httpconnection  和 httpsconnection  现在支持 新 的 blocksize  参数 以 提升 上 传 吞 吐 量
 由 nir  soffer  在 bpo 31945 中贡献

httpserver
simplehttprequesthandler  现在支持 http  ifmodifiedsince  标头
 如果 目标 文件 在 该 标 点 指定 的 时间 之后 未 被修改 则 服务器 会返回304 响应 状态
 由 pierre  quentel  在 bpo 29654 中贡献
simplehttprequesthandler  接受 新 的 directory  参数 并 增加了新的 directory  命令行参数
 通过 此 形参 服务器 可以 对 服务 指定 目录 默认情况下 它 使用当前 工作 目录
 由 st é phane  wirtel  和 julien  palard  在 bpo 28707 中贡献
 新 的 threadinghttpserver  类 使用 线程 来处理 使用 threadingmixin  的 请求
 它会在 http
server  附带 m  运行时 被使用
 由 julien  palard  在 bpo 31639 中贡献

idlelib  与 idle
 多个 对 自动 补全 的 修正
 由 louie  lu  在 bpo 15786 中贡献
module  browser  在 file  菜单 中 之前 称为 class  browser  现在会 在 最高层级 函数和类 之外 显示 嵌套的 函数和类
 由 guilherme  polo  cheryl  sabella  和 terry  jan  reedy  在 bpo 1612262 中贡献
settings  对话框 options  中 的 configure  idle  已经被 部分 重写 以 改进 外 观 和 功能
 由 cheryl  sabella  和 terry  jan  reedy  在多个 问题 项 中贡献
 字 体 样本 现 在 包括 一 组 非 拉 丁 字符 以便 用户 能 更好地 查看 所 选 特定 字 体 的效果
 由 terry  jan  reedy  在 bpo 13802 中贡献
 样本 可以被 修改 以 包括 其他 字符
 由 serhiy  storchaka  在 bpo 31860 中贡献
 之前 以 扩展 形式 实现 的 idle  特性 已 作为 正常 特性 重新 实现
 它们的 设置 已从 extensions  选项卡 移至 其他 对话框 选项卡
 由 charles  wohlganger  和 terry  jan  reedy  在 bpo 27099 中 实现
 编辑器 代码 上下文 选项 已 经过 修改
 box  会显示 所有 上下文行 直到 最大 行 数
 点击 一个 上下文行 会 使 编辑器 跳 转 到 该 行
 自定义 主题 的 上下文 颜色 已 添加到 settings  对话框的 highlights  选项卡
 由 cheryl  sabella  和 terry  janreedy  在 bpo 33642 bpo 33768 和 bpo 33679 中贡献
 在 windows  上 会 有新的 api  调用 将 tk  对 dpi  的 调整 告 知 windows
 在 windows 8
1 或10 上 如果 python  二进制 码 的 dpi  兼容 属性 未 改变 并且 监视器 分 辨 率 大于96 dpi  这 应该 会 令 文本 和 线 条 更 清晰
 否则 的话 它应该 不 造成 影响
 由 terry  jan  reedy  在 bpo 33656 中贡献
 在3
1 中新增 超过 n  行 默认值为50 的 输出 将 被 折叠 为 一个 按钮
 n  可以在 settings  对话框的 general  页 的 pyshell  部分 中进行 修改
 数量 较 少 但是 超 长 的 行 可以通过在 输出 上 右 击 来 折叠
 被 折叠 的 输出 可通过 双 击 按钮 来 展开 或 是通过 右 击 按钮 来 放入 剪 贴 板 或 是 单独的 窗口
 由 tal  einat  在 bpo 1529353 中贡献
 上述 修改 已被 反向 移植到3
6 维护 发行版 中
 在3
4 中新增 在 run  菜单 中 增加了 run  customized  以 使用自定义 设置 来 运行 模块
 输入 的 任何 命令行参数 都会被 加入 sys
 它们在 下 次 自定义 运行时 会 再次 显示 在 窗 体 中
 用户 也可以 禁用 通常 的 shell  主模块 重 启
 由 cherylsabella  terry  jan  reedy  等 人 在 bpo 5680 和 bpo 37627 中贡献
 在3
5 中新增 在 idle  编辑器 窗口中 增加了 可选的 行 序号
 窗口 打开 时 默认 不带 行 序号 除非 在 配置 对话框的 general  选项卡 中进行 设置
 已 打开 窗口中 的 行 序号 可以在 options  菜单 中显示 和 隐藏
 由 tal  einat  和 saimadhav  heblikar  在 bpo 17535 中贡献

importlib
io
 新 的 textiowrapper
reconfigure  方法可用于 根据 新 的 设置 重新 配置 文本 流
 由 antoine  pitrou  在 bpo 30526 以及 inada  naoki  在 bpo 15216 中贡献

ipaddress
methods  of  ipaddress
ipv 6 network  和 ipaddress
ipv 4 network  中 新 的 subnetof  以及 supernetof  方法可用于 网络 包含 测试
 由 michel  albert  和 cheryl  sabella  在 bpo 20825 中贡献

itertools
islice  现在接受 类 整数 对象 作为 start  stop  和 slice  参数
 由 will  roberts  在 bpo 30537 中贡献

locale
locale
formatstring  中 新 的 monetary  参数 可用于 转换 所使用的 千 位分隔符 和 分组 字符串
 由 garvit  在 bpo 10379 中贡献
 现 在 locale
getpreferredencoding  函数 在 android  上 或 是 在 强制 utf 8 模式 下 总是返回 utf 8
logging
logger  实例 现在可以 被 pickle
 由 vinay  sajip  在 bpo 30520 中贡献
 新 的 streamhandler
setstream  方法可用于 在 句柄 创建 之后 替换 日志 流
 由 vinay  sajip  在 bpo 30522 中 创建
 现在可以 在 传递给 logging
fileconfig  的 配置 信息 中 对 句柄 构造器 指定 关键字参数
 由 preston  landers  在 bpo 31080 中贡献
math
 新 的 math
remainder  函数 实现了 ieee 754 风格的 余数 运算
 由 markdickinson  在 bpo 29962 中贡献

mimetypes
msilib
 新 的 database
close  方法可用于 关闭 msi  lastin  firstout  数据库
 由 berker  peksag  在 bpo 20486 中贡献

multiprocessing
 新 的 process
close  方法 会 显式地 关闭 进程 对象 并 释放 与 其 关联的 所有 资源
 如果 底层 进程 仍 在 运行 则将引发 valueerror
 由 antoine  pitrou  在 bpo 30596 中贡献
 新 的 process
kill  方法可用于 在 unix  上 使用 sigkill  信号 来 终止 进程
 由 vitor  pereira  在 bpo 30794 中贡献
 由 process  所创建的 非 守护 线程 现在会 在 进程 退出时 被 合并
 由 antoinepitrou  在 bpo 18966 中贡献

os
fwalk  现在接受 bytes  类型 的 path  参数
 由 serhiystorchaka  在 bpo 28682 中贡献
os
scandir  已 获得 对 文件 描述器 的 支持
 由 serhiy  storchaka  在 bpo 25996 中贡献
 新 的 registeratfork  函数 允许 注册 python  回调 以便 在 进程 分 叉 中 执行
 由 antoine  pitrou  在 bpo 16500 中贡献
 增加了 os
preadv  结合 了 os
readv  与 os
pread  的功能 以及 os
pwritev  函数 结合 了 os
writev  和 os
pwrite  的功能
 由 pablo  galindo  在 bpo 31368 中贡献
os
makedirs  的 mode  参数 不再 影响 新 创建 的 中 间 层级 目录 的 文件 权限
 由 serhiy  storchaka  在 bpo 19930 中贡献
os
dup 2 现在会 返回 新 的 文件 描述器
 之前 返回 的 总是 none
 由 benjamin  peterson  在 bpo 32441 中贡献
 在 solaris  及其 派生 系统上 os
stat  所返回的 结构 现在会 包含 stfstype  属性
 由 jes ú s  cea  avi ó n  在 bpo 32659 中贡献

pathlib
 在 posix  类 系统上 新 的 path
ismount  方法 现在可 用于确定 一个 路径 是否为 挂 载 点
 由 cooper  ry  lees  在 bpo 30897 中贡献

pdb
settrace  现 在 接受一个可选的 限 关键字参数 header
 如果给出 它会在 调试 开始 之前被 打印到 控制台
 由 barry  warsaw  在 bpo 31389 中贡献
pdb  命令行 现在接受 m  modulename  作为 对 脚本 文件 的替代
 由 mario  corchero  在 bpo 32206 中贡献

pycompile
compile  及其 扩展 形式 compileall  现在会 通过 无 条件 地 为 基于哈希 值 的 有效 性 验证 创建
pyc  文件 来 支持 sourcedateepoch  环境变量
 这 样可以 确保 当
pyc  文件 被 主 动 创建时 可 重 现 的 生成
 由 bernhard  m
 wiedemann  在 bpo 29708 中贡献

pydoc
pydoc  服务器 现在可以 绑定到 由 新 的 n  命令行参数 所指定的 任意 主机名
 由 feanil  patel  在 bpo 31128 中贡献

queue
 新 的 simplequeue  类 是一个 无 界 的 fifo  lastin  firstout  队列
 由 antoine  pitrou  在 bpo 14976 中贡献

re
 旗标 re
locale  和 re
unicode  可以在 组 的 范围内 设置
 由 serhiy  storchaka  在 bpo 31690 中贡献
re
split  现在支持 基于 匹配 一个 空字符串 的 模式 例如 rb  或 进行 拆分
 由 serhiy  storchaka  在 bpo 25054 中贡献
 使用 re
locale  旗标 编译 的正则表达式 不再 依赖于 编译时 的 区域设置
 区域设置 仅在 已编译 正则表达式 被使用 时才 被 应用
 由 serhiy  storchaka  在 bpo 30215 中贡献
 现 在 如果一个 正则表达式 包含 语义 将 在未来 发生改变 的 字符 集 构造 则会引发 futurewarning  例如 嵌套 集 与 集合 操作 等
 由 serhiy  storchaka  在 bpo 30349 中贡献
 已编译 正则表达式 和 匹配对象 现在可以 使用 copy
copy  和 copy
deepcopy  进行 拷贝
 由 serhiy  storchaka  在 bpo 10076 中贡献

signal
signal
setwakeupfd  函数 新增的 warnonfullbuffer  参数可以 指定 当 唤醒 缓冲区 溢出 时 python  是否 要 在 stderr  上 打印 警告 信息
 由 nathaniel  j
 smith  在 bpo 30050 中贡献

socket
 新增的 socket
getblocking  方法 会 在 套接字 处于 阻塞模式 时返回 true  否则返回 false
 由 yury  selivanov  在 bpo 32373 中贡献
 新 的 socket
close  函数 可 关闭 所 传入的 套接字 文件描述符
 应该 用此函数 来 代替 os
close  以 获得 更好的 跨平台 兼容性
 由 christian  heimes  在 bpo 32454 中贡献
socket  模块 现在会 公开 socket
tcpcongestion  linux 2
13 socket
37 以及 socket
12 常量
 由 omar  sandoval  在 bpo 26273 以及 nathaniel  j
 smith  在 bpo 29728 中贡献
 已 加入 对 socket
afvsock  套接字 的 支持 以允许 在 虚拟 机 及其 宿 主机 之间 进行 通 讯
 由 cathy  avery  在 bpo 27584 中贡献
 套接字 现 在 默认 会 根据 文件描述符 自动 检测 所属 族、 类型 和 协议
 由 christian  heimes  在 bpo 28134 中贡献

socketserver
serverclose  现在会 等待 所有 非 守护 线程 完成
serverclose  现在会 等待 所有 子进程 完成
 为 socketserver
forkingmixin  和 socketserver
threadingmixin  类 增加了新的 socketserver
forkingmixin
blockonclose  类属性
 该 类属性 值 设 为 false  以 保持3
7 之前的 行为
sqlite
 现 在 当 下层的 sqlite  库 版本 为3
6
11 及 以 上 时 sqlite 3
connection  会 开 放 backup  方法
 由 lele  gaifax  在 bpo 27645 中贡献
sqlite 3
connect  的 database  参数 现在接受 任何 pathlike  object  而不是 只 接受 字符串
 由 anders  lorentsen  在 bpo 31843 中贡献

ssl
string
template  现 在 允许你 有 选择 地 分别 修改 带 大 括号 的 占位 符 和 不带 大 括号 的 占位 符 所对应的 正则表达式 模式
 由 barry  warsaw  在 bpo 1198569 中贡献

subprocess
subprocess
run  函数接受 新 的 captureoutput  关键字参数
 当 其 为真值 时 将 会 捕获 stdout  和 stderr
 这相当于 将 subprocess
pipe  作为 stdout  和 stderr  参数 传入
 由 bo  bayles  在 bpo 32102 中贡献
subprocess
run  函数 和 subprocess
popen  构造器 现在接受 text  关键字参数 作为 universalnewlines  的别名
 由 andrew  clegg  在 bpo 31756 中贡献
 在 windows  中 当 重定向 标准 句柄 时 closefds  的 默认值 由 false  改 为 true
 现在可以 在 重定向 标准 句柄 时 将 closefds  设 为真值
 参阅 subprocess
 这意味着 现 在 closefds  在所有 受支持的 平台上 默认值 均为 true
 由 segev  finer  在 bpo 19764 中贡献
 在 subprocess
run  期间 或 在 popen  上下文管理器 中 subprocess  模块现在 能 更 优 雅 地 处理 keyboardinterrupt
 它 现在会 等待 一 小 段 时间 以便 子进程 退出 然后再 继续 处理 keyboardinterrupt  异常
 由 gregory  p
 smith  在 bpo 25942 中贡献

sys
 新增 sys
breakpointhook  钩子 函数 供 内置的 breakpoint  进行 调用
 由 barry  warsaw  在 bpo 31353 中贡献
 在 android  中新增 的 sys
getandroidapilevel  会返回 构建 时 的 androidapi  版本
 由 victor  stinner  在 bpo 28740 中贡献
 新 的 sys
getcoroutineorigintrackingdepth  函数 会 返回当前 协程 的 由 新 的 sys
setcoroutineorigintrackingdepth  所 设 定 的 原始 跟踪 深度
 asyncio  已 转换为 使 用这个 新 api  代替 已弃用的 sys
 由 nathaniel  j
 smith  在 bpo 32591 中贡献

time
pep 564 向 time  模块 增加 六 个具有 纳 秒 级 精度的 新 函数 time
timens  增加了新的 时钟 标识符 time
clockboottime  linux  与 time
clockmonotonic  相似 不同 点 在于它 还 包括 任何 系统 挂起 的 时间
clockprof  freebsd  netbsd  和 openbsd  高 精度的 分 进程 cpu  计时器
clockuptime  freebsd  openbsd  该 时间 的绝对值 是 系统 运行 且 未 挂起 的 时间 提供 准确 的 正常 运行 时间 度 量
 新 的 time
threadtime  和 time
threadtimens  函数 可用于 获取 每 线程 的 cpu  时间 度 量
 由 antoine  pitrou  在 bpo 32025 中贡献
 新 的 time
pthreadgetcpuclockid  函数 会返回 特定 线程中 cpu  时钟 的 时钟 id
tkinter
 新 的 tkinter
spinbox  类 现 已 可 用
 由 alan  moore  在 bpo 32585 中贡献

tracemalloc
traceback  的 行为 更 接近 正 规 的 回溯 会 对 所有 帧 按 从 最 旧 到 最新 来 排序
format  现在接受 负 的 limit  并 会 将结果 截 短 至 排 在 第 abslimit  位 的 旧 帧
 如果要 获得 旧 的 行为 请 在 traceback
format  中 使用 新 的 mostrecentfirst  参数
 由 jessebakker  在 bpo 32121 中贡献

types
 新 的 wrapperdescriptortype  methodwrappertypemethoddescriptortype  和 classmethoddescriptortype  类 现 已 可 用
 由 manuel  krebber  和 guido  van  rossum  在 bpo 29377 以及 serhiystorchaka  在 bpo 32265 中贡献
 新 的 types
resolvebases  函数 会 以 pep 560 所 规 定 的方式 动态 解析 mro  条目
 由 ivan  levkivskyi  在 bpo 32717 中贡献

unicodedata
 内部 的 unicodedata  数据库 已 升级 为 使用 unicode 11
 由 benjaminpeterson  贡献

unittest
 新 的 k  命令行选项 允许 通过 名称 子 字符串或 类似于 unix  shell  的 模式 来 筛选 测试 项
 例如 python  m  unittest  k  foo  将 运行 footests
testsomething  bartests
testfoo  但不会 运行 bartests
 由 jonas  haag  在 bpo 32071 中贡献

unittestmock
 现 在 sentinel  属性 会 在 它们 被 复制 或 封存 时 保存 其 标识
 由 serhiy  storchaka  在 bpo 20804 中贡献
 新 的 seal  函数 允许 mock  对 实例 进行 密 封 这 将 禁止 进一步 创建 属性 模拟
 密 封 会 以 递归 方式 应用 于 自身 模拟 的 所有 属性
 由 mario  corchero  在 bpo 30541 中贡献

urllibparse
quote  已经 从 rfc 2396 更新为 rfc 3986 将 添加到 默认情况下 从未 引用 的 字符 集
 由 christian  theune  和 ratnadeepdebnath  在 bpo 16285 中贡献

uu
uu
encode  函数 现在接受 可选的 backtick  关键字参数
 当 其 为真 时 零 会 以 而非 空格 来表示
 由 xiang  zhang  在 bpo 30103 中贡献

uuid
 新 的 uuid
issafe  属性 会 从 平台 中 继 有关 是否 使用 多 进程 安全 模式 来生成 所需 uuid  的 信息
 由 barry  warsaw  在 bpo 22807 中贡献
uuid
getnode  现 在 更 倾 向 于 统 一 管理 的 mac  地址 而不是 本地 管理 的 mac  地址
 这 样可以 更好地 保证 从 uuid
uuid 1 返回 的 uuid  的 全局 唯一 性
 如果 只有 本地 管理 的 mac  地址 可用则 返回 首 个 找到 的 此 类 地址
 由 barrywarsaw  在 bpo 32107 中贡献

warnings
xmletree
find  方法 中 的 elementpath  描述 词 现在可以 将 当前 节点 文本 与
 text  进行比较 而 不仅 是 子 节点 中 的 文本
 描述 词 还 允许 添加 空格 以 提高 可读性
 由 stefan  behnel  在 bpo 31648 中贡献

xmlrpcserver
registerfunction  现在可以 被用作 装饰器
 由 xiang  zhang  在 bpo 7769 中贡献

zipapp
 函数 createarchive  现在接受 可选的 filter  参数 以 允许用户 选择 哪些 文件 应 被加入 归档 包
 由 irmen  de  jong  在 bpo 31072 中贡献
 函数 createarchive  现在接受 可选的 compressed  参数 以 生成 压缩 归档 包
 另外 也 加入 了 命令行选项 compress  以 支持 压缩
 由 zhimingwang  在 bpo 31638 中贡献

zipfile
zipfile  现在接受 新 的 compresslevel  形参 以 控制 压缩 级别
 由 bobayles  在 bpo 21417 中贡献
zipfile  所创建的 归档 包 中 的 子目录 现在会 按 字母 表 顺序 保存
 由 bernhard  m
 wiedemann  在 bpo 30693 中贡献

c  api  的改变
 已 实现 了用于 线程 本地 存储 的 新 api
 相关 概述 请参阅 pep 539 用 于 线程 局部 存储 的 新 c  api  完整 参考 文档 请查看 thread  specific  storage  tss  api
 由 masayuki  yamamoto  在 bpo 25658 中贡献
 新 的 上下文变量 功能 开 放 了许多 新 的 c  api
 新 的 pyimportgetmodule  函数 会返回 之前 所 导入 的 具有 给定 名称的模块
 由 eric  snow  在 bpo 28411 中贡献
 新 的 pyreturnrichcompare  宏 可以 简化 丰 富 比较 函数 的 编写
 由 petrvictorin  在 bpo 23699 中贡献
 新 的 pyunreachable  宏 可用于 标记 不 可 到达 的 代码 路径
 由 barrywarsaw  在 bpo 31338 中贡献
tracemalloc  现 在 通过 新 的 pytracemalloctrack  和 pytracemallocuntrack  函数 公开 了 一个 c  api
 由 victor  stinner  在 bpo 30054 中贡献
 新 的 importfindloadstart  和 importfindloaddone  静态 标记 可用于 跟踪 模块 导入
 由 christian  heimes  在 bpo 31574 中贡献
 结构体 pymemberdef  pygetsetdef  pystructsequencefieldpystructsequencedesc  和 wrapperbase  的 字段 name  和 doc  现 在 的 类型 为 const  char  而不是 char 
 由 serhiy  storchaka  在 bpo 28761 中贡献
pyunicodeasutf 8 andsize  和 pyunicodeasutf 8 的结果 类型 现在是 const  char  而非 char 
 由 serhiy  storchaka  在 bpo 28769 中贡献
pymappingkeys  pymappingvalues  和 pymappingitems  的结果 现 在 肯 定 是 列表 而非 可能是 列表 也可能 是 元组
 由 oren  milman  在 bpo 28280 中贡献
 添加了 函数 pysliceunpack  和 pysliceadjustindices
 由 serhiy  storchaka  在 bpo 27867 中贡献
pyosafterfork  已弃用 建议 改 用 新 的 functions  pyosbeforeforkpyosafterforkparent  和 pyosafterforkchild
 由 antoinepitrou  在 bpo 16500 中贡献
 曾 经 作为 公共 api  一部分 的 pyexcrecursionerrorinst  单 例 已被移除 因为它 的成员 永远 不会被 清理 可能在 解释器 的 最终 化 过程中 导致 段 错误
 由 xavier  de  gaye  在 bpo 22898 和 bpo 30697 中贡献
 添加 c  api  对 使用 timezone  的 构造器 pytimezonefromoffset  和 pytimezonefromoffsetandname  的 时区的 支持 以及 通常 pydatetimetimezoneutc  使用 utc  单 例
 由 paul  ganssle  在 bpo 10381 中贡献
pythreadstartnewthread  和 pythreadgetthreadident  的结果 类型 以及 pythreadstatesetasyncexc  的 id  参数 类型 由 long  改 为 unsigned  long
 由 serhiy  storchaka  在 bpo 6532 中贡献
 现 在 pyunicodeaswidecharstring  如果 第二个 参数为 null  并且 wchart  字符串 包含 空字符 则会引发 valueerror
 由 serhiystorchaka  在 bpo 30708 中贡献
 对 启动 顺序 以及 动态 内存分配器 管理 的 更改 意味着 早 已 记录 在 案 的 对 在 调用 大多数 c  api  函数 之前 调用 pyinitialize  的 要求 的 依赖 现 在 变得 更 加 强 烈 未 遵循 此 要求 可能导致 嵌入式 应用程序中 的 段 错误
 请参阅 此 文档 的 移植到 python 3
7 一节 以及 c  api  文档 的 在 python  初始化 之前 一节 了解 更多细节
 新 的 pyinterpreterstategetid  会 返回给定 解释器 的唯一 id
 由 eric  snow  在 bpo 29102 中贡献
 现 在 当 启用 utf 8 模式 时 pydecodelocale  pyencodelocale  会 使用 utf 8 编码
 由 victor  stinner  在 bpo 29240 中贡献
pyunicodedecodelocaleandsize  和 pyunicodeencodelocale  现在会 为 surrogateescape  错误 句柄 使用当前 区域 编码
 由 victor  stinner  在 bpo 29240 中贡献
pyunicodefindchar  的 start  和 end  形参 的 行为 现 在 调整 为 与 字符串 切片 类似
 由 xiang  zhang  在 bpo 28822 中贡献

 构建 的改变
 性能优化
 其他 cpython  实现 的改变
 跟踪 钩子 现在可以 选择 不 接收 line  而 是 选择 从 解释器 接收 opcode  事件 具体 做法是 在 被 跟踪 的 帧 上 相应地 设置 新 的 ftracelines  和 ftraceopcodes  属性
 由 nick  coghlan  在 bpo 31344 中贡献
 修复 了一些 命名空间包 模块属性 的 一致性 问题
 命名空间 模块 对象 的 file  被设置为 none  原 先 未 设置 对象 的 spec
origin  也 被设置为 none  之前 为 字符串 namespace
 参见 bpo 32305
 而 且 命名空间 模块 对象 的 spec
loader  被设置 的 值 与 loader  相同 原 先前 者 被设置为 none
 参见 bpo 32303
 locals  字典 现 在 以 变量 定义 的 词法 顺序 显示
 原 先 未定义 顺序
 由 raymond  hettinger  在 bpo 32690 中贡献
 distutils  upload  命令 不会再 试 图 将 行 结束 字符 cr  改 为 crlf
 这 修 复 了 sdists  的 一个 以 与 cr  等价 的 字节 结束 的 数据 损坏 问题
 由 bo  bayles  在 bpo 32304 中贡献

 已弃用的 python  行为
 在 推导式 和 生成器表达式 中 的 yield  语句 包括 yield  和 yield  from  子句 现 在 已弃用 最 左 端 的 for  子句中 的可迭代对象 表达式 除外
 这 确保 了 推导式 总是 立即 返回 适当 类型 的容器 而不是 有可能 返回 generatoriterator  对象 这样 生成器表达式 不 会 试 图 将它们 的 隐式 输出 与 任何 来自 显式 yield  表达式 的 输出 交 错 起来
 在 python 3
7 中 这样的 表达式 会 在 编译时 引发 deprecationwarning  在 python 3
8 中 则将引发 syntaxerror
 由 serhiy  storchaka  在 bpo 10544 中贡献
 从 object
complex  返回 一个 complex  的子类 的 行为 已 弃用并将在 未来的 python  版本中 引发错误
 这使得 complex  的 行为与 object
int  和 object
float  保持 一致
 由 serhiystorchaka  在 bpo 28894 中贡献

 已弃用的 python  模块、 函数 和 方法
aifc
openfp  已 弃用并将在 python 3
9 中被移除
 请改用 aifc
open
 由 brian  curtin  在 bpo 31985 中贡献

asyncio
 对 asyncio
lock  和其他 asyncio  同步 原语 的 await  实例 的 直接 支持 已弃用
 想要 获取 并 释放 同步 资源 必须使用 异步 上下文管理器
 由 andrewsvetlov  在 bpo 32253 中贡献
asyncio
currenttask  和 asyncio
alltasks  方法 已弃用
 由 andrew  svetlov  在 bpo 32250 中贡献

collections
 在 python 3
8 中 collections
abc  内 的抽象基类 将 不会再 通过 常规 的 collections  模块 公开
 这 有 助 于 更 清晰 地 区别 具体 类 与 抽象基类
 由 serhiy  storchaka  在 bpo 25988 中贡献

dbm
dumb  现在支持 读取 只读 文件 且 当 其 未被 更改 时 不会再 写入 索引 文件
 现 在 如果 索引 文件 丢失 并 在 r  与 w  模式下 被重新 创建 则 会发出 已弃用 警告 在未来 的 python  发布版 中 将 改 为 错误
 由 serhiy  storchaka  在 bpo 28847 中贡献

enum
gettext
 使用 非 整数值 在 gettext  中选择 复数 形式 现 在 已弃用
 它 从未 正确地 发 挥 作 用
 由 serhiy  storchaka  在 bpo 28692 中贡献

importlib
 下列方法 metapathfinder
findmodule  被 metapathfinder
findspec  替代 和 pathentryfinder
findloader  被 pathentryfinder
findspec  替代 都 在 python 3
4 中 已弃用 现在会 引发 deprecationwarning
 由 matthias  bussonnier  在 bpo 29576 中贡献 importlib
resourceloader  abc  已弃用 推荐 改 用 importlib
locale
format  已弃用 请改用 locale
formatstring
 由 garvit  在 bpo 10379 中贡献

macpath
macpath  现 在 已弃用 将 在 python 3
8 中被移除
 由 chi  hsuan  yen  在 bpo 9850 中贡献

threading
dummythreading  和 dummythread  已弃用
 构建 禁用 线程 的 python  已 不再 可能
 请改用 threading
 由 antoine  pitrou  在 bpo 31370 中贡献

socket
socket
htons  和 socket
ntohs  中 的 静默 参数 截断 已弃用
 在未来 的 python  版本 中如果 传入的 参数 长度 大于16 比特位 将 会引发异常
 由 oren  milman  在 bpo 28332 中贡献

ssl
wrapsocket  已弃用
 请改用 ssl
wrapsocket
 由 christian  heimes  在 bpo 28124 中贡献

sunau
openfp  已 弃用并将在 python 3
9 中被移除
 请改用 sunau
open
 由 brian  curtin  在 bpo 31985 中贡献

sys
 已弃用 sys
setcoroutinewrapper  和 sys
 未 写入 文档 的 sys
callstats  函数 已 弃用并将在 未来的 python  版本 中被移除
 由 victor  stinner  在 bpo 28799 中贡献

wave
openfp  已 弃用并将在 python 3
9 中被移除
 请改用 wave
open
 由 brian  curtin  在 bpo 31985 中贡献

 已弃用的 c  api  函数 和 类型
 如果 pylimitedapi  未 设 定 或 设 定 为 范围 在0 x 03050400 和0 x 03060000 不 含 之间 或 为0 x 03060100 或更高 的 值 函数 pyslicegetindicesex  已弃用 并 被 一个 宏 所 替代
 由 serhiystorchaka  在 bpo 27867 中贡献
pyosafterfork  已弃用
 请改用 pyosbeforeforkpyosafterforkparent  或 pyosafterforkchild
 由 antoinepitrou  在 bpo 16500 中贡献

 平台 支持 的 移除
api  与 特性 的 移除
 下列 特性 与 api  已从 python 3
7 中移除 os
statfloattimes  函数 已被移除
 它 在 python 2
3 中 被 引入 用 于 向下兼容 python 2
2 并 自 python 3
1 起 就 已弃用
 在 re
sub  的 替换 模块 中 由 与 一个 ascii  字母 构成的 未 知 转义 在 python 3
5 中 已弃用 现在将 会 引发错误
 在 tarfile
add  中 移除了 对 exclude  参数 的 支持
 它 在 python 2
7 和3
2 中 已弃用
 请改用 filter  参数
 ntpath  模块中的 splitunc  函数 在 python 3
1 中 已弃用 现在已 被 移除
 请改用 splitdrive  函数
namedtuple  不再 支持 verbose  形参 或 source  属性 该 属性 会显示 为 具 名元组 类 所生成的 源代码
 这是 加 速 类 创建 的 设计 优化 的一部分
 由 jelle  zijlstra  在 bpo 28638 中贡献 进一步 的改进 由 inada  naoki  serhiy  storchaka  和 raymond  hettinger  贡献
 函数 bool  float  list  和 tuple  不再 接受 关键字参数
 int  的 第一个参数 现 在 只能 作为 位置参数 传入
 移除了 之前 在 python 2
4 中 已弃用的 plistlib  模块 的 类 plist  dict  和 internaldict
 作为 函数 readplist  和 readplistfrombytes  返回结果 的 dict  值 现 在 为 普通 dict
 你 不 能 再 使用 属性 访问 来获取 这些 字典 的 项
 asyncio
socketpair  函数 已被移除
 请改用 socket
socketpair  函数 它 自 python 3
5 起 就 在 所有平台 上可用
 asyncio
socketpair  在 python 3
5 及 更新 版本上 只是 socket
socketpair  的别名
 asyncio  不再 将 selectors  和 overlapped  模块 导出 为 asyncio
selectors  和 asyncio
 请 将 from  asyncio  import  selectors  替换为 import  selectors
 现在已 禁止 直接 实例化 ssl
sslsocket  和 ssl
sslobject  对象
 相应 构造器 从未 写入 文档、 也 从未 作为 公有 构造器 进行 测试 或 设计
 用户 应当使 用 ssl
wrapsocket  或 ssl
 由 christian  heimes  在 bpo 32951 中贡献
 未被 使用 的 distutils  installmisc  命令 已被移除
 由 eric  n
 vander  weele  在 bpo 29218 中贡献

 移除 的 模块
fpectl  模块 已被移除
 它 从未 被 默认 启用 从未 在 x 8664 上 正确 发 挥 效果 并且它 对 python  abi  的改变 会导致 c  扩展 的 意外 损坏
 由 nathanielj
 smith  在 bpo 29137 中贡献

windows  专属的 改变
python  启动器 py
exe  可以 接受32 位 或64 位 标记 而 不必 同时 指定一个 小 版本
 因此 py 332 和 py 364 与 py 3
732 均为 有效 并且 现 在 还 接受 m 64 和 m
n 64 来 强制 使用64 位 python  命令 即使 是 本 应 使用32 位 的时候
 如果指定 版本 不可用 则 py
exe  将 报 错 退出
 由 steve  barnes  在 bpo 30291 中贡献
 启动器 可以 运行 py 0 来 列出 已安装 的 所有 python  默认 版本 会 以 星 号 标 出
 运行 py 0 p  将 同时 列出 相应的 路径
 如果 运行 py  时 指定了 无法 匹配 的 版本 它 将显示 简短 形式 的 可 用 版本 列表
 由 steve  barnes  在 bpo 30362 中贡献

 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
python  行为 的 更改
 更改 的 python  api
c  api  中 的改变
 函数 pyslicegetindicesex  被认为 对 于 大小 可变的 序列 来说 并 不安全
 如果 切片 索引 不 是 int  的 实例 而 是 实现了 index  方法的对象 则 序列 可以在 其 长度 被传给 pyslicegetindicesex  之后 调整 大小
 这 可能导致 返回 超出 序列长度 的 索引号
 为 了 避免 可能的 问题 请使用 新增的 函数 pysliceunpack  和 pysliceadjustindices
 由 serhiystorchaka  在 bpo 27867 中贡献

cpython  字节码 的改变
 新增了 两个操作 码 loadmethod  和 callmethod
 由 yury  selivanov  和 inada  naoki  在 bpo 26110 中贡献
storeannotation  操作码 已被移除
 由 mark  shannon  在 bpo 32550 中贡献

windows  专属的 改变
 用 于 重载 sys
path  的 文件 现 在 命名为 pythonexecutable
pth  而不是 sys
 请参阅 查找 模块 了解 更多信息
 由 steve  dower  在 bpo 28137 中贡献

 其他 cpython  实现 的改变
 为 了 准备 在未来 对 公开 的 cpython  运行时 初始化 api  进行 潜在 更改 请参阅 pep 432 获取 最初 但 略 为 过 时 的 文 稿 cpython  内部 的 启动 和 配置 管理 逻辑 已 经过 大 幅 重 构
 虽然 这些 更新 旨在 对 嵌入式 应用程序 和 常规 的 cpythoncli  用户 都 完全 透明 但它们 在这里 被 提 及 是因为 重 构 会 改变 解释器 启动 期间 许多 操作 的 内部 顺序 因此 可能 提示 出 原 先 隐藏 的 缺 陷 这可能 存在于 嵌入式 应用程序中 或 是 在 cpython  自身 内部
 最初 由 nick  coghlan  和 eric  snow  作为 bpo 22257 的一部分 贡献 并 由 nick  eric  和 victor  stinner  在 一系列 其他 问题 报告 中 进一步 更新
 已知 会 受到 影响 的一些 细节 pysysaddwarnoptionunicode  目前 对 嵌入式 应用程序 不可用 因为在 调 用 pyinitialize  之前 需要 创建 unicode  对象
 请改用 pysysaddwarnoption
 嵌入式 应用程序 通过 pysysaddwarnoption  所 添加 的 警告过滤器 现 在 应 该 以 更高的 一致性 优先 于 由 解释器 所 设置 的 默认 过滤器 由 于 默认 警告过滤器 的 配置 方式 发生了 变化 将 pybyteswarningflag  设置为 大于 一 的 值 不再 足以 在 发出 byteswarning  消息 的 同时 将其转换为 异常
 而 是 改 为 必须 设置 旗标 以便 首先 发出 警告 以及 添加 显式 的 errorbyteswarning  警告过滤器 来 将其转换为 异常
 由 于 编译器 处理 文档字符串 的方式 发生了 变化 一个 仅 由 文档字符串 构成的 函数体 中 隐式 的 return  none  现 在 被 标记为 在 与 文档字符串 相同 的 行 而不是 在 函数 的 标题 行
 当前 异常 状态 已从 帧 对象 移 到 协程对象
 这 会 简化 解释器 并 修正 由 于 在 进入 或 退出 生成器 时 具有 交换 异常 状态 而 导致 的一些 模 糊 错误
 由 mark  shannon  在 bpo 25612 中贡献

python 371 中的重要 变化
 从3
1 开始 pyinitialize  现 在 始终 会 读取并 遵循 与 pymain  相同 的 环境 设置 在 更早 的 python  版本中 它 会 遵循 一个错误 定义 的 环境变量 子集 而 在 python 3
0 中 则 会 由 于 bpo 34247 而 完全不 读取 它们
 如果不 想要 此行为 请 在 调用 pyinitialize  之前 将 pyignoreenvironmentflag  设 为1
 在3
1 中 上下文变量 的 c  api  已 获得 更新 以 使用 pyobject  指针
 另请参阅 bpo 34762
 在3
1 中 当提供 不带 末尾 新 行 的 输入 时 tokenize  模块 现在会 隐式地 添加 newline  形 符
 此行为 现在已 与 c  词法分析 器 的 内部 行为 相匹配
 由 ammar  askar  在 bpo 33899 中贡献

python 372 中的重要 变化
 在3
2 中 windows  下 的 venv  不再 复制 原 来 的 二进制文件 而 是 改 为 创建 名为 python
exe  和 pythonw
exe  的 重定向 脚本
 这 解决 了 一个长 期 存在的 问题 即 所有 虚拟环境 在每次 python  升级 后 都必须 进行 升级 或 是 重新 创建
 然而 要注意 此 发布版 仍然 要求 重新 创建虚拟环境 以 获得 新 的 脚本
python 376 中的重要 变化
 出 于 重要的 安全 性 考 量 asyncio
createdatagramendpoint  的 reuseaddress  形参 不再 被 支持
 这是由 udp  中 的 套接字 选项 soreuseaddr  的 行为 导致 的
 更多细节 请参阅 loop
createdatagramendpoint  的 文档
 由 kyle  stanley  antoinepitrou  和 yury  selivanov  在 bpo 37228 中贡献

python 33 有什么新变化
 本文 介绍了 python 3
3 相比3
2 的 新增 特性
3 于2012 年9 月29 日 发布
 有关 完整 详细信息请参 见 changelog
 参见 pep 398 python 3
3 发布 计划
 摘要 发布 重 点
pep 405 虚拟环境
 参见 pep 405 python  虚拟环境 pep  由 carl  meyer  撰写 由 carl  meyer  和 vinay  sajip  实现
pep 420 隐式 命名空间包
py  marker  files  and  can  automatically  span  multiple  pathsegments  inspired  by  various  third  party  approaches  to  namespacepackages  as  described  in  pep 420 参见 pep 420 隐式 命名空间包 pep  由 eric  v
 smith  撰写由 eric  v
 smith  和 barry  warsaw  实现
pep 3118 新 的内存 视图 实现 和 缓冲协议 文档
 相关 特性
api  changes
 由 stefan  krah  在 bpo 10181 中贡献
 参见 pep 3118 修改 缓冲区 协议
pep 393 灵活的 字符串表示
functionality
performance  and  resource  usage
 参见 pep 393 灵活的 字符串表示 pep  由 martin  von  l ö wis  撰写 由 torsten  becker  和 martin  von  l ö wis  实现
pep 397 适用于 windows  的 python  启动器
 参见 pep 397 适用于 windows  的 python  启动器 pep  由 mark  hammond  和 martin  v
 l ö wis  撰写 由 vinay  sajip  实现
 launcher  documentation  适用于 windows  的 python  启动器 installer  path  modification  查找 python  可执行文件
pep 3151 重写 os  和 io  异常 的 层次结构
txt  参见 pep 3151 重写 os  和 io  异常 的 层次结构 pep  由 antoine  pitrou  撰写并实现
pep 380 委托给 子 生成器 的语法
pep 409 清除 异常 上下文
 keyerrorx  参见 pep 409 清除 异常 上下文 pep  由 ethan  furman  撰写 由 ethan  furman  和 nick  coghlan  实现
pep 414 显式 的 unicode  文本
 参见 pep 414 显式 的 unicode  文本 pep  由 armin  ronacher  撰写
pep 3155 类和函数 的 限定名称
meth  at 0 x 7 f 46 b 9 fe 31 e 0 参见 pep 3155 类和函数 的 限定名称 pep  由 antoine  pitrou  撰写并实现
pep 412 keysharing  dictionary
 参见 pep 412 keysharing  dictionary  pep  由 mark  shannon  撰写并实现
pep 362 函数 签名 对象
 参见 pep 362 函数 签名 对象 pep  由 brett  cannonyury  selivanovlarry  hastingsjiwon  seo  撰 写 由 yury  selivanov  实现
pep 421 添加 sysimplementation
simplenamespace
 参见 pep 421 添加 sys
implementation  pep  由 eric  snow  撰写并实现
using  importlib  as  the  implementation  of  import
new  apis
visible  changes
 其他语言特性修改
 对 python  语言核心 进行 的 小 改 动 added  support  for  unicode  name  aliases  and  named  sequences
 由 ezio  melotti  在 bpo 12753 中贡献
 unicode  database  updated  to  ucd  version 6
 由 petri  lehtinen  在 bpo 12170 中贡献
 the  rjust  ljust  and  center  methods  of  bytes  and  bytearray  now  accept  a  bytearray  for  the  fill  argument
 由 antoine  pitrou  在 bpo 13748 中贡献
 dict
 由 filip  gruszczy ń ski  在 bpo 13521 中贡献
 the  error  messages  produced  when  a  function  call  does  not  match  the  function  signature  have  been  significantly  improved
 由 benjamin  peterson  贡献

a  finergrained  import  lock
 由 antoine  pitrou  在 bpo 9260 中贡献

builtin  functions  and  types
 新增 模块
faulthandler
ipaddress
 由 google  和 peter  moody  在 bpo 3144 中贡献

lzma
 由 nadeem  vawda  和 per ø yvind  karlsen  在 bpo 6715 中贡献

 改进的模块
abc
 由 pablo  galindo  在 bpo 11610 中贡献
abc
array
 由 oren  tirosh  和 hirokazu  yamamoto  在 bpo 1172711 中贡献

base
binascii
bz
 由 nadeem  vawda  在 bpo 5863 中贡献
 bz 2
 由 nir  aides  在 bpo 1625 中贡献
 bz 2
codecs
collections
contextlib
crypt
curses
window  class  has  a  new  getwch  method  to  get  a  wide  character  the  curses  module  has  a  new  ungetwch  function  to  push  a  wide  character  so  the  next  getwch  will  return  it  由 i ñ igo  serna  在 bpo 6755 中贡献

datetime
decimal
py  decimal  加 速 pi 42
02 秒0
345 秒120 倍 telco 172
19 秒5
68 秒30 倍 psycopg 3
57 秒0
29 秒12 倍 相关 特性 the  floatoperation  signal  optionally  enables  stricter  semantics  for  mixing  floats  and  decimals
api  changes  c  模块 上下文 限制 如 下 表 具体 取决于 计算机 体 系 结构32 位64 位 maxprec 425000000999999999999999999 maxemax 425000000999999999999999999 minemin 425000000999999999999999999 in  the  context  templates  defaultcontext  basiccontext  and  extendedcontext  the  magnitude  of  emax  and  emin  has  changed  to 999999
email
ftplib
functools
gc
hmac
http
html
imaplib
 由 sijin  joseph  在 bpo 8808 中贡献

inspect
 由 meador  inge  和 nick  coghlan  在 bpo 13062 中贡献
a  new  getgeneratorlocals  function  has  been  added
 由 meador  inge  在 bpo 15153 中贡献

io
 由 david  townshend  在 bpo 12760 中贡献
the  constructor  of  the  textiowrapper  class  has  a  new  writethroughoptional  argument
itertools
logging
math
mmap
multiprocessing
nntplib
committers  由 giampaolo  rodol à 在 bpo 9795 中贡献

os
pdb
 由 georg  brandl  在 bpo 14210 中贡献
pickle
 由 richard  oudkerk  在 bpo 14166 中贡献

pydoc
re
 由 serhiy  storchaka  在 bpo 3665 中贡献

sched
select
shlex
shutil
 新的函数 diskusage  provides  total  used  and  free  disk  space  statistics
signal
smtpd
smtplib
socket
socketserver
sqlite
ssl
 由 victor  stinner  在 bpo 12049 中贡献
 the  ssl  module  now  exposes  a  finergrained  exception  hierarchy  in  order  to  make  it  easier  to  inspect  the  various  kinds  of  errors
stat
 由 giampaolo  rodol à 在 bpo 14807 中贡献

struct
subprocess
sys
tarfile
tempfile
textwrap
threading
time
types
unittest
urllib
webbrowser
xmletreeelementtree
zlib
 性能优化
 构建和 c  api  的改变
changes  to  pythons  build  process  and  to  the  c  api  include  新 的 pep 3118 相关 功能 pymemoryviewfrommemory  pep 393 添加了新的 unicode  类型 宏 和 函数 高阶 api  pyunicodecopycharacters  pyunicodefindchar  pyunicodegetlength  pyunicodegetlength  pyunicodenew  pyunicodesubstring  pyunicodereadchar  pyunicodewritechar  低 阶 api  pyucs 1 pyucs 2 pyucs 4 类型 pyasciiobject  和 pycompactunicodeobject  结构 pyunicodeready  pyunicodefromkindanddata  pyunicodeasucs 4 pyunicodeasucs 4 copy  pyunicodedata  pyunicode 1 bytedata  pyunicode 2 bytedata  pyunicode 4 bytedata  pyunicodekind  使用 pyunicodekind  枚举 pyunicodewcharkind  pyunicode 1 bytekind  pyunicode 2 bytekind  pyunicode 4 bytekind  pyunicoderead  pyunicodereadchar  pyunicodewrite  pyunicodemaxcharvalue  pyargparsetuple  现在接受 c  格式 的 bytearray  bpo 12380
 弃用
 不支持 的操作系统
 由 于 缺少 维护 人员 不再 支持 os 2 和 vms  系统
 由 于 维护 负 担 将 comspec  设置为 command
com  的 windows  平台 含 windows 2000 不再 受支持
osf  支持 在3
2 中 被弃用 现 在 已经被 完全 删除
 已弃用的 python  模块、 函数 和 方法
 check  especially  the  使用 subprocess  模块 替换 旧 函数 section  bpo 11377
 已弃用的 c  api  函数 和 类型
pyunicode  已经 在 pep 393 弃用并将 于 python 4 中移除
 所有 使用 此 类型 的 函数 都 已弃用 unicode  functions  and  methods  using  pyunicode  and  pyunicodetypes  pyunicodefromunicode  使用 pyunicodefromwidechar  或 pyunicodefromkindanddata  pyunicodeasunicode  pyunicodeasunicode  pyunicodeasunicodeandsize  使用 pyunicodeaswidecharstring  pyunicodeasdata  使用 pyunicodedata  以及 pyunicoderead  和 pyunicodewrite  pyunicodegetsize  pyunicodegetsize  使用 pyunicodegetlength  或 pyunicodegetlength  pyunicodegetdatasize  使用 pyunicodegetlengthstr  pyunicodekindstr  仅 适用于 现 成 的 字符串 pyunicodeasunicodecopy  使用 pyunicodeasucs 4 copy  或 pyunicodeaswidecharstring  pyunicodegetmaxfunctions  and  macros  manipulating  pyunicode  strings  pyunicodestrlen  使用 pyunicodegetlength  或 pyunicodegetlength  pyunicodestrcat  使用 pyunicodecopycharacters  或 pyunicodefromformat  pyunicodestrcpy  pyunicodestrncpy  pyunicodecopy  使用 pyunicodecopycharacters  或 pyunicodesubstring  pyunicodestrcmp  使用 pyunicodecompare  pyunicodestrncmp  使用 pyunicodetailmatch  pyunicodestrchr  pyunicodestrrchr  使用 pyunicodefindchar  pyunicodefill  使用 pyunicodefill  pyunicodematch  编码器 pyunicodeencode  使用 pyunicodeasencodedobject  pyunicodeencodeutf 7 pyunicodeencodeutf 8 使用 pyunicodeasutf 8 或 pyunicodeasutf 8 string  pyunicodeencodeutf 32 pyunicodeencodeutf 16 pyunicodeencodeunicodeescape  use  pyunicodeasunicodeescapestring  pyunicodeencoderawunicodeescape  use  pyunicodeasrawunicodeescapestring  pyunicodeencodelatin 1 使用 pyunicodeaslatin 1 string  pyunicodeencodeascii  使用 pyunicodeasasciistring  pyunicodeencodecharmap  pyunicodetranslatecharmap  pyunicodeencodembcs  使用 pyunicodeasmbcsstring  或 pyunicodeencodecodepage  和 cpacp  codepage  pyunicodeencodedecimal  pyunicodetransformdecimaltoascii
 弃用的 功能
 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
porting  python  code
porting  c  code
building  c  extensions
command  line  switch  changes
 bpo 10998 由é ric  araujo  贡献
 when  python  is  started  with  s  import  site  will  no  longer  add  sitespecific  paths  to  the  module  search  paths
python 31 有什么新变化
 作者 raymond  hettingerthis  article  explains  the  new  features  in  python 3
pep 372 有 序 字典
pep 378 千 位分隔符 的 格式 说明符
 参见 pep 378 千 位分隔符 的 格式 说明符 pep  由 raymond  hettinger  撰写并 由 eric  smith  和 mark  dickinson  实现
 其他语言特性修改
 新增 改进 和 弃用的 模块
 性能优化
 由 amaury  forgeot  darc  和 antoine  pitrou  贡献
 added  a  heuristic  so  that  tuples  and  dicts  containing  only  untrackable  objects  are  not  tracked  by  the  garbage  collector
 由 antoine  pitrou  在 bpo 4688 中贡献
 enabling  a  configure  option  named  withcomputedgotos  on  compilers  that  support  it  notably  gcc  sunpro  icc  the  bytecode  evaluation  loop  is  compiled  with  a  new  dispatch  mechanism  which  gives  speedups  of  up  to 20 depending  on  the  system  the  compiler  and  the  benchmark
 由 antoine  pitrou  以 及其他 一些 参 与 者 在 bpo 4753 中贡献
 the  decoding  of  utf 8 utf 16 and  latin 1 is  now  two  to  four  times  faster
 由 antoine  pitrou  和 amaury  forgeot  darc  在 bpo 4868 中贡献
 the  json  module  now  has  a  c  extension  to  substantially  improve  its  performance
 由 bob  ippolito  在 bpo 4136 中贡献
 并 由 antoine  pitrou  和 benjamin  peterson  转换为 py 3
1 unpickling  now  interns  the  attribute  names  of  pickled  objects
 由 jake  mcguire  和 antoine  pitrou  在 bpo 5084 中贡献

idle
 由 roger  d
 serwy  在 bpo 5150 中贡献

 构建和 c  api  的改变
 移植到 python
python 26 有什么新变化
 作者 a
python
 参见 the 3 xxx  series  of  peps  which  contains  proposals  for  python 3
 开发 过程 的变化
new  issue  tracker  roundup
 新 的 文档 格式 使用 sphinx  的 restructuredtext
 参见 documenting  python  描述 如何 编写 python  文档
 sphinx  sphinx  工具 链 的 文档 和 代码
 docutils  restructuredtext  的基础 解析器 和 工具集
pep 343 with  语句
 注解 in  this  case  f  is  the  same  object  created  by  open  because  file
writing  context  managers
contextlib  模块
writeline  参见 pep 343 with  语句 pep  written  by  guido  van  rossum  and  nick  coghlan  implemented  by  mike  bland  guido  van  rossum  and  neal  norwitz
 contextlib  模块的文档
pep 366 从 主模块 显式 相对导入
pep 370 分 用户 的 sitepackages  目录
 参见 pep 370 分 用户 的 sitepackages  目录 pep  由 christian  heimes  撰写并实现
pep 371 多 任务 处理 包
 参见 multiprocessing  模块的文档
 pep 371 添加 多 任务 处理 包 pep  由 jesse  noller  和 richard  oudkerk  撰写由 richard  oudkerk  和 jesse  noller  实现
pep 3101 高级 字符串格式
pep 3105 print  改 为 函数
 参见 pep 3105 print  改 为 函数 pep  由 georg  brandl  撰写
pep 3110 异常处理 的 变 更
 参见 pep 3110 在 python 3000 中 捕获 异常 pep  由 collin  winter  撰写并实现
pep 3112 字节 字面值
 参见 pep 3112 python 3000 中 的 字节 字面值 pep  由 jason  orendorff  撰写 补丁2
6 由 christian  heimes  撰写
pep 3116 新 io  库
 参见 pep 3116 新 io  pep  written  by  daniel  stutzbach  mike  verdone  and  guido  van  rossum
pep 3118 修改 缓冲区 协议
 参见 pep 3118 修改 缓冲区 协议 pep  由 travis  oliphant  和 carl  banks  撰写由 travis  oliphant  实 现
pep 3119 抽象基类
 参见 pep 3119 引入 抽象基类 pep  written  by  guido  van  rossum  and  talin
pep 3127 整型 文 字 支持 和 语法
oct 420 o 52 bin 1730 b 10101101 the  int  and  long  builtins  will  now  accept  the 0 o  and 0 bprefixes  when  base 8 or  base 2 are  requested  or  when  the  baseargument  is  zero  signalling  that  the  base  used  should  be  determinedfrom  the  string  int 0 o 52042 int 1101213 int 0 b 1101213 int 0 b 1101013 参见 pep 3127 整型 文 字 支持 和 语法 pep  written  by  patrick  maupin  backported  to 2
pep 3129 类 装饰器
 its  nowlegal  to  write  foo  bar  class  a  pass  这相当于 class  a  pass  a  foobara  参见 pep 3129 类 装饰器 pep  由 collin  winter  撰写
pep 3141 a  type  hierarchy  for  numbers
fractions  模块
 其他语言特性修改
 对 python  语言核心 进行 的 小 改 动 directories  and  zip  archives  containing  a  main
userdict  uda 1 udb  string  fud  a  b  由 alexander  belopolsky  在 bpo 1686487 中贡献
 its  also  become  legal  to  provide  keyword  arguments  after  a  args  argument  to  a  function  call
count 02 由 raymond  hettinger  贡献 the  builtin  types  now  have  improved  support  for  extended  slicing  syntax  accepting  various  combinations  of  start  stop  step
difference 246789 set 1035 由 raymond  hettinger  贡献
 many  floatingpoint  features  were  added
 性能优化
interpreter  changes
 新增 和 改进的模块
 由 raymond  hettinger  贡献
 another  change  to  the  collections  module  is  that  the  deque  type  now  supports  an  optional  maxlen  parameter  if  supplied  the  deques  size  will  be  restricted  to  no  more  than  maxlen  items
append 4 dq  deque 234 maxlen 3 由 raymond  hettinger  贡献
 the  cookie  modules  morsel  objects  now  support  an  httponly  attribute
 由 christian  heimes  和 mark  dickinson  贡献
 mmap  objects  now  have  a  rfind  method  that  searches  for  a  substring  beginning  at  the  end  of  the  string  and  searching  backwards
methodcallerreplace  old  new  replacerold  wine  in  old  bottles  new  wine  in  new  bottles  由 gregory  petrosyan  提供 建议 之后 由 georg  brandl  贡献
 the  attrgetter  function  now  accepts  dotted  names  and  performs  the  corresponding  attribute  lookups  instname  operator
name  instname  str  instnamehelp  helper  由 barry  warsaw  提供 建议 之后 由 georg  brandl  贡献
 the  os  module  now  wraps  several  new  system  calls
 由 paul  moore  在 bpo 2439 中贡献
 the  pyexpat  modules  parser  objects  now  allow  setting  their  buffersize  attribute  to  change  the  size  of  the  buffer  used  to  hold  character  data
svn  由 tarek  ziad é 在 bpo 2663 中贡献
 integrating  signal  handling  with  gui  handling  event  loops  like  those  used  by  tkinter  or  gtk  has  long  been  a  problem  most  software  ends  up  polling  waking  up  every  fraction  of  a  second  to  check  if  any  gui  events  have  occurred
 由 adam  olsen  在 bpo 1583 中贡献
 the  siginterrupt  function  is  now  available  from  python  code  and  allows  changing  whether  signals  can  interrupt  system  calls  or  not
warnings 1 multiple  warnings  raised  由 brett  cannon  贡献
 the  textwrap  module  can  now  preserve  existing  whitespace  at  the  beginnings  and  ends  of  the  newlycreated  lines  by  specifying  dropwhitespacefalse  as  an  argument  s  this  sentence  has  a  bunch  of 
 由 dwayne  bailey  在 bpo 1581073 中贡献
 the  threading  module  api  is  being  changed  to  use  properties  such  as  daemon  instead  of  setdaemon  and  isdaemon  methods  and  some  methods  have  been  renamed  to  use  underscores  instead  of  camel  case  for  example  the  activecount  method  is  renamed  to  activecount
extractall  由 alan  mcintyre  在 bpo 467924 中贡献
 the  open  read  and  extract  methods  can  now  take  either  a  filename  or  a  zipinfo  object
ast  模块
futurebuiltins  模块
the  json  module  javascript  object  notation
plistlib  模块属性 列表 解析器
ctypes  enhancements
improved  ssl  support
 参见 ssl  模块的文档
deprecations  and  removals
 gopherlib  模块 已被移除
 rgbimg  模块 已被移除
 构建和 c  api  的改变
 特定于 windows  的 更改
 特定于 mac  os  x  的 更改 mac  os  x
 现 在 在 编译 python  的 框架 版本 时 可以为 configure  脚本 添加 withframeworkname  选项 来指定 要使用的 框架 名称
 macfs  模块 已被 删除
 这 反 过 来 要求 删除 macostools
touched  函数 因为它 依赖于 macfs  模块
 bpo 1490190 许多 其他 mac  os  模块 已 弃用并将在 python 3
0 中 被 删除 builtinsuites  aepack  aetools  aetypes  applesingle  appletrawmain  appletrunner  argvemulator  audiomac  autogil  carbon  cfmfile  codewarrior  colorpicker  easydialogs  explorer  finder  framework  findertools  ic  icglue  icopen  macerrors  macos  macfs  macostools  macresource  miniaeframe  nav  netscape  osaterminology  pimp  pixmapwrapper  stdsuites  systemevents  terminal  和 terminalcommand
 特定于 irix  的 更改
 许多 旧 的 irix  专用 模块 已被 弃用并将在 python 3
0 中删除 al  和 alcd  cddb  cdplayer  cl  和 cl  device  errno  filefl  和 fl  flp  fm  get  glws  gl  和 gl  in  ioctljpeg  panelparser  readcd  sv  和 sv  torgb  videoreader  和 wait
 移植到 python
 致谢
 作者 感谢 以下人 员 对 本文 各种 草 稿 给 予 的 建议 更 正 和协 助 georg  brandlsteve  brown  nick  coghlan  ralph  corderoy  jim  jewett  kent  johnsonchris  lambacher  martin  michlmayr  antoine  pitrou  brian  warner
python 38 有什么新变化
 编 者 raymond  hettinger  本文 解释 了 python 3
8 相比3
7 的 新增 特性
 完整的 详情 可 参阅 更新 日志
 摘要 发布 重 点
 新 的 特性
 赋值 表达式
 新增的 语法 可 在 表达式 内部 为 变量 赋值
 它 被 昵 称为 海 象 运算符 因为它 很 像 是 海 象 的 眼 睛 和 长 牙
 在这个 示例中 赋值 表达式 可 以避免 调用 len  两次 if  n  lena 10 printflist  is  too  long  n  elements  expected 10 类似 的 益 处 还 可 出现在 正则表达式 匹配 中 需要使用 两次 匹配对象 的 情况 中 一次 检测 用 于 匹配 是否 发生 另一 次 用 于 提取 子 分组 discount 0
0 此 运算符 也 适用于 配合 while  循环 计算 一个 值 来 检测 循环 是否 终止 而 同 一个 值 又 在 循环 体 中 再次 被使用 的 情况 loop  over  fixed  length  blocks  while  block  f
read 256 processblock  另一个 值得 介绍 的 用 例 出现于 列表推导式 中 在 筛选 条件 中 计算 一个 值 而 同 一个 值 又 在 表达式 中 需要 被使用 cleanname
title  for  name  in  names  if  cleanname  normalizenfc  name  in  allowednames  请 尽 量 将 海 象 运算符 的 使用 限制 在 清晰 的 场合 中 以 降 低 复杂 性 并 提升 可读性
 请参阅 pep 572 了解详情
 由 morehouse  在 bpo 35224 中贡献

 仅限位置 形参
 新增了 一个 函数 形参 语法 用来 指明 某些 函数 形参 必须使用 仅限位置 而非 关键字参数 的形式
 这种 标记 语法 与 通过 help  所 显示 的 使用 larryhastings  的 argument  clinic  工具 标记 的 c  函数 相同
 在 下面的例子 中 形参 a  和 b  为 仅限位置 形参 c  或 d  可以是 位置 形参 或 关键字形参 而 e  或 f  要求 为 关键字形参 def  fa  b  c  d  e  f  printa  b  c  d  e  f  以 下 均为 合法的 调用 f 102030 d 40 e 50 f 60 但是 以 下 均为 不 合法的 调用 f 10 b 20 c 30 d 40 e 50 f 60 b  cannot  be  a  keyword  argument  f 1020304050 f 60 e  must  be  a  keyword  argument  这种 标记 形式 的 一个 用 例 是 它允许 纯 python  函数 完整 模拟 现有的 用 c  代码 编写 的 函数 的 行为
 例如 内置的 divmod  函数 不 接受 关键字参数 def  divmoda  b  emulate  the  built  in  divmod  function  return  a  b  a  b  另一个 用 例 是 在 不需要 形参 名称 时 排除 关键字参数
 例如 内置的 len  函数 的 签名 为 lenobj 
 这可以 排除 如 下 这种 笨 拙 的 调用 形式 lenobjhello  the  obj  keyword  argument  impairs  readability  另一个 益 处 是 将 形参 标记为 仅限位置 形参 将 允许 在未来 修改 形参 名 而不会 破坏 客户 的 代码
 例如 在 statistics  模块 中 形参 名 dist  在未来 可能 被修改
 这使得 以下函数 描述 成为 可能 def  quantilesdist  n 4 methodexclusive 
 由 于 在 左侧 的 形参 不会被 公开 为 可 用 关键字 其他 形参 名 仍 可 在 kwargs  中 使用 def  fa  b  kwargs 
 f 1020 a 1 b 2 c 3 a  and  b  are  used  in  two  ways 1020 a 1 b 2 c 3 这 极 大 地 简化 了 需要 接受 任意 关键字参数 的 函数 和 方法 的 实现
 例如以下 是 一段 摘 自 collections  模块 的 代码 class  counterdict  def  initself  iterablenone  kwds  note  iterable  is  a  possible  keyword  argument  请参阅 pep 570 了解详情
 由 pablo  galindo  在 bpo 36540 中贡献

 用 于 已编译 字节码 文件 的 并 行 文件系统 缓存
 新增的 pythonpycacheprefix  设置 也可 使用 x  pycacheprefix  可 将 隐式 的 字节码 缓存 配置 为 使用 单独的 并 行 文件系统 树 而不是 默认 的 每个 源代码 目录 下 的 pycache  子目录
 缓存 的 位置 会 在 sys
pycacheprefix  中 报告 none  表示 默认 位置 即 pycache  子目录
 由 carl  meyer  在 bpo 33499 中贡献

 调试 构建 使用 与 发布 构建 相同 的 abi
python  现 在 不 论是 以 发布 模式 还是 调试模式 进行 构建 都 将 使用 相同 的 abi
 在 unix  上 当 python  以 调试模式 构建 时 现在将 可以 加载 以 发布 模式 构建 的 c  扩展 和 使用 稳定 版 abi  构建 的 c  扩展
 发布 构建和 调试 构建 现 在 都 是 abi  兼容的 定义 pydebug  宏 不会再 启用 pytracerefs  宏 它 引入了 唯一的 abi  不 兼容性
 pytracerefs  宏 添加了 sys
getobjects  函数 和 pythondumprefs  环境变量 它 可以使用 新 的
configure  withtracerefs  构建 选项 来 设置
 由 victorstinner  在 bpo 36465 中贡献
 在 unix  上 c  扩展 不会再 被 链接到 libpython  但 android  和 cygwin  例外
 现 在 静态 链接 的 python  将 可以 加载 使用 共享库 python  构建 的 c  扩展
 由 victor  stinner  在 bpo 21536 中贡献
 在 unix  上 当 python  以 调试模式 构建 时 导入 操作 现 在 也会 查找 在 发布 模式下 编译 的 c  扩展 以及 使用 稳定 版 abi  编译 的 c  扩展
 由 victor  stinner  在 bpo 36722 中贡献
 要 将 python  嵌入到 一个 应用中 必须 将 新增的 embed  选项 传给 python 3 config  libs  embed  以 获得 lpython 3
8 将 应用 链接到 libpython
 要 同时 支持3
8 和 旧版本 请 先 尝试 python 3 config  libsembed  并 在 此 命令 失败时 回退 到 python 3 config  libs  即 不带 embed
 增加 一个 pkgconfig  python 3
8 embed  模块 用来 将 python  嵌入到 一个 应用中 pkgconfig  python 3
8 embed  libs  包含 lpython 3
 要 同时 支持3
8 和 旧版本 请 先 尝试 pkgconfig  pythonx
yembed  libs  并 在 此 命令 失败时 回退 到 pkgconfig  pythonx
y  libs  即 不带 embed  请 将 x
y  替换为 python  版本号
 另一 方面 pkgconfig  python 3
8 libs  不再 包含 lpython 3
 c  扩展 不 可 被 链接到 libpython  但 android  和 cygwin  例外 这 两者 的 情况 由 脚本 处理 此 改变 是 故 意 被设为 向下 不兼容 的
 由 victor  stinner  在 bpo 36721 中贡献

f  字符串 支持 用 于 自动 记录 表达式 和 调试 文档
 增加 说明符 用 于 fstring
 形式 为 fexpr  的 f  字符串 将 扩展 表示为 表达式 文本 加一个 等于 号 再 加 表达式 的 求值 结果
 例如 user  ericidle  membersince  date 1975731 fuser  membersinceuserericidle  membersincedatetime
date 1975731 通常 的 f  字符串格式 说明符 允许 更 细 致 地 控制 所 要 显示 的 表达式 结果 delta  date
days 16075 说明符 将 输出 整个 表达式 以便 详细 演示 计算 过程 printftheta  cosradianstheta
866 由 eric  v
 smith  和 larry  hastings  在 bpo 36817 中贡献

pep 578 python  运行时 审 核 钩子
pep 587 python  初始化 配置
pep 587 增加了 一个新的 c  api  用来 配置 python  初始化 提供对 整个 配置 过程 的 更 细 致 控制 以及 更好的 错误报告
 新 的 结构 pyconfig  pypreconfig  pystatus  pywidestringlist  新的函数 pyconfigclear  pyconfiginitisolatedconfig  pyconfiginitpythonconfig  pyconfigread  pyconfigsetargv  pyconfigsetbytesargv  pyconfigsetbytesstring  pyconfigsetstring  pypreconfiginitisolatedconfig  pypreconfiginitpythonconfig  pystatuserror  pystatusexception  pystatusexit  pystatusiserror  pystatusisexit  pystatusnomemory  pystatusok  pywidestringlistappend  pywidestringlistinsert  pybytesmain  pyexitstatusexception  pyinitializefromconfig  pypreinitialize  pypreinitializefromargs  pypreinitializefrombytesargs  pyrunmain  此 pep  还 为 这些 内部 结构 添加了 pyruntimestate
preconfigpypreconfig  类型 和 pyinterpreterstate
config  pyconfig  类型 字段
config  成为 新 的 引用 配置 替代 全局 配置 变量 和其他 私有 变量
 请参阅 python  初始化 配置 获取 详细 文档
 请参阅 pep 587 了解详情
 由 victor  stinner  在 bpo 36763 中贡献

pep 590 vectorcall  用 于 cpython  的 快速 调用 协议
 具有 外部 数据 缓冲区 的 pickle  协议
 当使用 pickle  在 python  进程 间 传输 大量 数据 以 充 分发 挥 多 核 或 多 机 处理 的 优 势 时 非常 重要 一点 是通过 减少 内存 拷贝 来 优化 传输 效率 并 可能 应用 一些 定制 技巧 例如 针对 特定 数据 的 压缩
pickle  协议5 引入了 对 于 外部 缓冲区 的 支持 这样 pep 3118 兼容的 数据 可以 与 主 pickle  流 分开 进行 传输 这是由 通信 层 来确定 的
 请参阅 pep 574 了解详情
 由 antoine  pitrou  在 bpo 36785 中贡献

 其他语言特性修改
 在之前版本中 continue  语句 不允许 在 finally  子句中 使用 这 是因为 具体实现 存在一个 问题
 在 python 3
8 中 此 限制 已 被取消
 由 serhiy  storchaka  在 bpo 32489 中贡献
 bool  int  和 fractions
fraction  类型 现 在 都有一个 asintegerratio  方法 与 float  和 decimal
decimal  中 的 已 有 方法 类似
 这 个 微 小 的 api  扩展 使得 numerator  denominator  x
asintegerratio  这样 的写法 在 多种 数字类型 上 通 用 成为 可能
 由 lisa  roach  在 bpo 33073 和 raymond  hettinger  在 bpo 37819 中贡献
 int  float  和 complex  的 构造器 现在会 使用 index  特殊方 法 如果该 方法可用 而 对应的 方法 method  int  float  或 complex  方法 不可用 的话
 由 serhiy  storchaka  在 bpo 20092 中贡献
 添加 nname  转义 符 在 正则表达式 中 的 支持 notice  copyright ©2019 copyrightyearpattern  re
group 12019 由 jonathan  eunice  和 serhiy  storchaka  在 bpo 30688 中贡献
 现 在 dict  和 dictview  可以使用 reversed  按 插入顺序 反向 迭代
 由 r é mi  lapeyre  在 bpo 33462 中贡献
 在 函数调用 中 允许 使用 的 关键字 名称 语法 受到 进一步 的 限制
 特别地 fkeywordarg  不再 被 允许
 关键字参数 赋值 形式 的 左侧 绝 不允许 一般 标识符 以外 的其他 内容
 由 benjamin  peterson  在 bpo 34641 中贡献
 在 yield  和 return  语句中 的 一般 可迭代对象 解包 不再 要求 加 圆括号
 这使得 yield  和 return  的语法 与 正常的 赋值 语法 更 为 一致 def  parsefamily  lastname  members  family
upper  members  parsesimpsons  homer  marge  bart  lisa  maggie  simpsons  homer  marge  bart  lisa  maggie  由 david  cuthbert  和 jordan  chapman  在 bpo 32117 中贡献
 当 类似10203040 这样 在 代码中 少 了 一个 逗号 时 编译器 将 显 示 syntaxwarning  并附带 更 有 帮助 的 提示
 这 相比 原 来 用 typeerror  来 提示 第一个 元组 是不可 调用 的 更容易 被 理解
 由 serhiy  storchaka  在 bpo 15248 中贡献
 datetime
date  或 datetime
datetime  和 datetime
timedelta  对象 之间的 算术运算 现在将 返回 相应 子 类的实例 而不是 基 类的实例
 这 也 会影响 到 在 具体实现 中 直接 或 间接 地 使用了 datetime
timedelta  算术运算 的 返回 类型 例如 astimezone
 由 paul  ganssle  在 bpo 32417 中贡 献
 当 python  解释器 通过 ctrlc  sigint  被 中断 并且 所产生 的 keyboardinterrupt  异常 未 被捕获 python  进程 现在会 通过一个 sigint  信号 或 是 使得 发起调用 的 进程 能 检测到 它 是 由 ctrlc  操作 杀 死 的 正确 退出 代 码 来 退出
 posix  和 windows  上 的 终端 会 相应地 使用 此 代码 在交互式 会话 中 终止 脚本
 由 google  的 gregory  p
 smith  在 bpo 1054041 中贡献
 某些 高级 编程 风格 要求 为 现有的 函数 更新 types
codetype  对象
 由 于 代 码 对象 是不可变的 需要 基于 现有 代码对象 模 型 创建一个新的 代码对象
 使 用19 个 形参 将 会 相当 繁 琐
 现 在 新 的 replace  方法 使得 通过 少 量 修 改 的 形参 创建 克 隆 对象 成为 可能
 下面是一个 修改 statistics
mean  函数来 防止 data  形参 被用作 关键 字 参数 的 例子 from  statistics  import  mean  meandata 10209040 mean
 typeerror  mean  got  some  positionalonly  arguments  passed  as  keyword  arguments  data  由 victor  stinner  在 bpo 37032 中贡献
 对 于 整数 现 在 pow  函数 的 三 参数 形式 在 底 数 与 模 数 不 可 约 的情况下 允 许 指 数 为负值
 随后 它会在 指 数 为1 时 计算 底 数 的 模 乘 逆 元 并 对 其他 负 指 数 计算 反 模 的 适当 幂 次
 例如要 计算38 模137 的 模 乘 逆 元 则 可 写 为 pow 381137119119381371 模 乘 逆 元 在 求 解 线 性 丢 番 图 方 程 会被用 到
 例如 想 要求 出4258𝑥147𝑦369 的 整数 解 首先 应 重写 为4258𝑥≡369 mod 147 然后 求 解 x 369 pow 42581147147 y 4258 x 3691474258 x 147 y 369 由 mark  dickinson  在 bpo 36027 中贡献
 字典 推导式 已 与 字典 字面值 实现 同步 会先 计算 键 再 计算 值 dict  comprehension  cast  inputrole  inputactor  for  i  in  range 2 role  king  arthur  actor  chapman  role  black  knight  actor  cleese  dict  literal  cast  inputrole  inputactor  role  sir  robin  actor  eric  idle  对 执行 顺序 的 保证 对 赋值 表达式 来说 很有用 因为在 键 表达式 中 赋值 的 变量 将 可 在 值 表达式 中 被使用 names  martin  von  l ö wis ł ukasz  langa  walter  d ö rwald  n  normalizenfc  name
casefold  n  for  name  in  names  martin  von  l ö wis  martin  von  l ö wis ł ukasz  langa ł ukasz  langa  walter  d ö rwald  walter  d ö rwald  由 j ö rn  heissler  在 bpo 35224 中贡献
 object
reduce  方法 现在可 返回 长度为 二 至 六 个元素 的 元组
 之前 的 上限 为 五 个
 新增的 第 六 个可选 元素 是 签名 为 obj  state  的可调用 对象
 这样就 允许 直接 控制 特定 对象 的 状态 更新
 如果 元素 值 不 为 none  该 可调用对象 将 优先 于 对象 的 setstate  方法
 由 pierre  glaser  和 olivier  grisel  在 bpo 35900 中贡献

 新增 模块
 改进的模块
ast
ast  节点 现 在具有 endlineno  和 endcoloffset  属性 它们 给出 节点 结束 的 精确 位置
 这 只 适用于 具有 lineno  和 coloffset  属性 的 节点
 新增 函数 ast
getsourcesegment  返回 指定 ast  节点 的 源代码
 由 ivan  levkivskyi  在 bpo 33416 中贡献
ast
parse  函数 具有 一些 新 的 旗标 typecommentstrue  导致 其 返回 与 特定 ast  节点 相关联 的 pep 484 和 pep 526 类型 注释 文本 modefunctype  可被用于 解析 pep 484 签名 类型 注释 为 函数 定 义 ast  节点 而 返回 featureversion 3 n  允许 指定一个 更早 的 python 3 版本
 例如 featureversion 34 将 把 async  和 await  视为 非 保留 字
 由 guido  van  rossum  在 bpo 35766 中贡献

asyncio
run  已经 从 暂 定状态 晋 级 为 稳定 api
 此 函数 可被用于 执行 一个 coroutine  并 返回结果 同时 自动 管理 事件循环
 例如 import  asyncio  async  def  main  await  asyncio
runmain  这 大致 等价于 import  asyncio  async  def  main  await  asyncio
close  实际 的 实现 要 更复杂 许多
 因此 asyncio
run  应该 作为 运行 asyncio  程序 的 首选 方式
 由 yury  selivanov  在 bpo 32314 中贡献
 运行 python  m  asyncio  将 启动 一个 原生 异步 repl
 这允许 快速 体 验 具有 最高层级 await  的 代码
 这 时 不再 需要 直接调用 asyncio
run  因为 此操作 会 在每次 发起调用 时 产生一个 新 事件循环 python  m  asyncio  asyncio  repl 3
sleep 10 resulthello  hello  由 yury  selivanov  在 bpo 37028 中贡献
 异常 asyncio
cancellederror  现 在 继承自 baseexception  而不是 exception  并且 不再 继承自 concurrent
 由 yury  selivanov  在 bpo 32528 中贡献
 在 windows  上现在 默认 的事件循环 为 proactoreventloop
 由 victorstinner  在 bpo 34687 中贡献
proactoreventloop  现 在 也支持 udp
 由 adam  meily  和 andrew  svetlov  在 bpo 29883 中贡献
proactoreventloop  现在可 通过 keyboardinterrupt  ctrlc  来 中断
 由 vladimir  matveev  在 bpo 23057 中贡献
 添加了 asyncio
getcoro  用 来获取 asyncio
task  中 的 已 包装 协程
 由 alex  gr ö nholm  在 bpo 36999 中贡献
asyncio  任务 现在可以 被 命名 或者是 通过将 name  关键字参数 传给 asyncio
createtask  或 createtask  事件循环方法 或者是 通过 在 任务 对象 上调用 setname  方法
 任务 名称 在 asyncio
task  的 repr  输出 中 可 见 并且 还可以 使用 getname  方法 来获取
 由 alex  gr ö nholm  在 bpo 34270 中贡献
 将 对 happy  eyeballs  的 支持 添加到 asyncio
 要 指定 此行为 已 增加了 两个 新 的 形参 happyeyeballsdelay  和 interleave
 happy  eyeballs  算法 可 提升 支持 ipv 4 和 ipv 6 的应用 的 响应 速度 具体 做法是 尝试 同时 使用 两者 进行 连接
 由 twisteroid  ambassador  在 bpo 33530 中贡献

builtins
collections
collections
namedtuple  的 asdict  方法 现在将 返回 dict  而不是 collections
 此 项 更改 是由于 普通 字典 自 python 3
7 起 已 保证 具有 确定 的 元素 顺序
 如果 还需要 ordereddict  的 额外 特性 建议 的 解决方案是 将结果 转换为 需要 的 类型 ordereddictnt
 由 raymond  hettinger  在 bpo 35864 中贡献

cprofile
cprofile
profile  类 现在可 被用作 上下文管理器
 在运行时 对 一个 代码块 实现 性能 分析 import  cprofile  with  cprofile
 由 scott  sanderson  在 bpo 29235 中贡献

csv
csv
dictreader  现在将 返回 dict  而不是 collections
 此 工具 现在会 更 快速 且 消耗 更 少 内存 同时 仍然 保留 字段 顺序
 由 michaelselik  在 bpo 34003 中贡献

curses
 添加了 一个 新 变量 用 于 保存 下层 ncurses  库 的 结构 版 信息 ncursesversion
 由 serhiy  storchaka  在 bpo 31680 中贡献

ctypes
 在 windows  上 cdll  及其 子类 现在接受 winmode  形参 来指定 用 于 底层 loadlibraryex  调用 的 旗标
 默认 旗标 被设为 仅 加载 来自 可 信 任 位置 的 dll  依赖 项 包括 dll  的 存放 路径 如果 加载 初始 dll  时 使用了 完整 或 部分 路径 以及 通过 adddlldirectory  添加 的 路径
 由 steve  dower  在 bpo 36085 中贡献

datetime
 添加了新的 替代 构造器 datetime
fromisocalendar  和 datetime
fromisocalendar  它们 分别 基于 iso  年份、 周 序号 和 周 内 日 序号 来 构造 date  和 datetime  对象 这 两者 分别 是 其 所对应 类 中 isocalendar  方法 的 逆 操作
 由 paul  ganssle  在 bpo 36004 中贡献

functools
lrucache  现在可 直接 作为 装饰器 而不是 作为 返回 装饰器 的 函数
 因此这 两种 写 法现在 都 被 支持 lrucache  def  fx 
 由 raymond  hettinger  在 bpo 36772 中贡献
 添加了新的 functools
cachedproperty  装饰器 用于在 实例 生 命 周期 内 缓存 的 已 计算 特征属性
data  由 carl  meyer  在 bpo 21145 中贡献 添加了新的 functools
singledispatchmethod  装饰器 可 使用 singledispatch  将 方法 转换为 泛型 函数 from  functools  import  singledispatchmethod  from  contextlib  import  suppress  class  taskmanager  def  initself  tasks  self
tasks  if  x  not  in  targets  由 ethan  smith  在 bpo 32380 中贡献
gc
getobjects  现 在 能 接受一个可选的 generation  形参 来 指定一个 用于获取 对象 的 生成器
 由 pablo  galindo  在 bpo 36016 中贡献

gettext
 添加了 pgettext  及其 变化 形式
 由 franz  glasner é ric  araujo  和 cheryl  sabella  在 bpo 2504 中贡献

gzip
 添加 mtime  形参 到 gzip
compress  用 于 可 重 现 的 输出
 由 guo  citeo  在 bpo 34898 中贡献
 对 于特定 类型 的 无效 或 已 损坏 gzip  文件 现在将 引发 badgzipfile  而不是 oserror
 由 filip  gruszczy ń ski  michele  orr ù 和 zackery  spytz  在 bpo 6584 中贡献

idle  与 idlelib
 超过 n  行 默认值为50 的 输出 将 被 折叠 为 一个 按钮
 n  可以在 settings  对话框的 general  页 的 pyshell  部分 中进行 修改
 数量 较 少 但是 超 长 的 行 可以通过在 输出 上 右 击 来 折叠
 被 折叠 的 输出 可通过 双 击 按钮 来 展开 或 是通过 右 击 按钮 来 放入 剪 贴 板 或 是 单独的 窗口
 由 tal  einat  在 bpo 1529353 中贡献
 在 run  菜单 中 增加了 run  customized  以 使用自定义 设置 来 运行 模块
 输入 的 任何 命令行参数 都会被 加入 sys
 它们在 下 次 自定义 运行时 会 再次 显示 在 窗 体 中
 用户 也可以 禁用 通常 的 shell  主模块 重 启
 由 cherylsabella  terry  jan  reedy  等 人 在 bpo 5680 和 bpo 37627 中贡献
 在 idle  编辑器 窗口中 增加了 可选的 行 号
 窗口 打开 时 默认 不 显示 行 号 除非 在 配置 对话框的 general  选项卡 中 特别 设置
 已 打开 窗口中 的 行 号 可以在 options  菜单 中显示 和 隐藏
 由 tal  einat  和 saimadhav  heblikar  在 bpo 17535 中贡献
 现在会 使用 os  本机 编码格式 在 python  字符串 和 tcl  对象 间 进行 转换
 这允许 在 idle  中 处理 emoji  和其他 非 bmp  字符
 这些字符 将 可 被 显示 或 是 从 剪 贴 板 复制 和 粘 贴
 字符串 从 tcl  到 python  的 来 回 转换 现 在 不会再 发生 失败
 过去 八 年 有许多 人 都 为 此 付 出 过 努 力 问题 最终 由 serhiy  storchaka  在 bpo 13153 中 解决
 在3
1 中新增 添加 切换 光 标 闪 烁 停止 的 选项
 由 zackery  spytz  在 bpo 4603 中贡献
esc  键 现在会 关闭 idle  补全 提示 窗口
 由 johnny  najera  在 bpo 38944 中贡献
 上述 修改 已被 反向 移植到3
7 维护 发行版 中
 添加 关键字 到 模块名称 补全 列表
 由 terry  j
 reedy  在 bpo 37765 中贡献

inspect
inspect
getdoc  函数 现在可以 找到 slots  的 文档字符串 如果该 属性 是 一个元素 值 为 文档字符串 的 dict  的话
 这 提供了 类似于 目前 已有的 property  classmethod  和 staticmethod  等 函数 的 文档 选项 class  audioclip  slots  bitrate  expressed  in  kilohertz  to  one  decimal  place  duration  in  seconds  rounded  up  to  an  integer  def  initself  bitrate  duration  self
duration  ceilduration  由 raymond  hettinger  在 bpo 36326 中贡献

io
 在 开发模式 x  env  和 调试 构建 中 io
iobase  终结器 现在会 在 close  方法 失败时 将 异常 写入 日志
 发生 的 异常 在 发布 构建 中 默认 会 被 静默 忽略
 由 victor  stinner  在 bpo 18748 中贡献

itertools
itertools
accumulate  函数 增加了 可选的 initial  关键字参数 用来 指定一个 初始 值 from  itertools  import  accumulate  listaccumulate 1053015 initial 100010001010101510451060 由 lisa  roach  在 bpo 34659 中贡献

jsontool
 添加 选项 jsonlines  用于将 每个 输入 行 解析为 单独的 json  对象
 由 weipeng  hong  在 bpo 31553 中贡献

logging
 为 logging
basicconfig  添加了 force  关键字参数 当 设 为真值 时 关联到 根 日志记录器 的 任何 现有 处理程序 都 将 在 执行 由 其他 参数 所指定的 配置 之前 被移除 并 关闭
 这 解决 了 一个长 期 存在的 问题
 当 一个 日志 处理器 或 basicconfig  被调用时 对 basicconfig  的 后续调用 会 被 静默地 忽略
 这 导致 使用 交互 提示符 或 jupyter  笔 记 本 更新、 试 验 或 讲 解 各种 日志 配置 选项 变得 相当 困 难
 由 raymond  hettinger  提议 由 donghee  na  实现 并 由 vinay  sajip  在 bpo 33897 中 完成 审 核

math
 添加了新的 函数 math
dist  用 于 计算 两 点 之间的 欧 几 里 得 距离
 由 raymond  hettinger  在 bpo 33089 中贡献
 扩展 了 math
hypot  函数 以便 处理 更多的 维 度
 之前 它 仅 支持2 d  的 情况
 由 raymond  hettinger  在 bpo 33089 中贡献
 添加了新的 函数 math
prod  作为 的 sum  同 类 该函数 返回 start  值 默认值1 乘 以 一个数字 可迭代对象 的 积 prior 0
126 由 pablo  galindo  在 bpo 35606 中贡献
 添加了 两个 新 的 组合 函数 math
perm  和 math
comb 103 combinations  of 10 things  taken 3 at  a  time 120 由 yash  aggarwal  keller  fuchs  serhiy  storchaka  和 raymondhettinger  在 bpo 37128 bpo 37178 和 bpo 35431 中贡献
 添加了 一个 新 函数 math
isqrt  用 于 计算 精确 整数 平方 根 而无需 转换为 浮点数
 该 新 函数 支持 任意 大 整数
 它 的 执行 速度 比 floorsqrtn  快 但是 比 math
sqrt  慢 r 650320427 s  r 2 isqrts 1 correct 650320426 floorsqrts 1 incorrect 650320427 由 mark  dickinson  在 bpo 36887 中贡献
 函数 math
factorial  不再 接受 非 整数 类 参数
 由 pablo  galindo  在 bpo 33083 中贡献

mmap
mmap
mmap  类 现 在具有 一个 madvise  方法 用 于 访问 madvise  系统调用
 由 zackery  spytz  在 bpo 32941 中贡献

multiprocessing
 添加了新的 multiprocessing
sharedmemory  模块
 由 davin  potts  在 bpo 35813 中贡献
 在 macos  上现在 默认使用 的 启动 方式是 spawn  启动 方式
 由 victorstinner  在 bpo 33725 中贡献

os
 在 windows  上 添加了新 函数 adddlldirectory  用于在 导入 扩展模块 或 使用 ctypes  加载 dll  时 为 本机 依赖 提供 额外 搜索路径
 由 steve  dower  在 bpo 36085 中贡献
 添加了新的 os
memfdcreate  函数用于 包装 memfdcreate  系统调用
 由 zackery  spytz  和 christian  heimes  在 bpo 26836 中贡献
 在 windows  上 大部分 用于处理 重 解析 点 包括 符号链接 和 目录 连接 的 手动 逻辑 已被 委托给 操作系统
 特别地 os
stat  现在将 会 遍历 操作系统 所支持的 任何 内容 而 os
lstat  将 只 打开 被 标识 为 名称 代理 的 重 解析 点 而 其 要 由 os
stat  打开 其他的 重 解析 点
 在所有 情况下 statresult
stmode  将 只 为 符号链接 而非 其他 种类 的 重 解析 点 设置 siflnk
 要 标识 其他 种类 的 重 解析 点 请 检查 新 的 statresult
streparsetag  属性
 在 windows  上 os
readlink  现 在 能够 读取 目录 连接
 请注意 islink  会 对 目录 连接 返回 false  因此 首先 检查 islink  的 代码 将 连续 把 连接 视为 目录 而 会 处理 os
readlink  所 引发错误 的 代码 现在会 把 连接 视为 链接
 由 steve  dower  在 bpo 37834 中贡献

ospath
 返回 布尔值 结果的 os
path  函数 例如 exists  lexistsisdir  isfile  islink  以及 ismount  现 在 对 于 包含在 os  层级 无法 表示 的 字符 或 字节 的 路径 将 会返回 false  而不是 引发 valueerror  或其子 类 unicodeencodeerror  和 unicodedecodeerror
 由 serhiystorchaka  在 bpo 33721 中贡献
expanduser  在 windows  上现在 改 用 userprofile  环境变量 而不再 使用 home  后者 通常不 会 为 一般 用户 账 户 设置
 由 anthony  sottile  在 bpo 36264 中贡献
isdir  在 windows  上 将不再 为 不存在 的 目录 的 链接 返回 true
realpath  在 windows  上 现在会 识别 重 解析 点 包括 符号链接 和 目录 连接
 由 steve  dower  在 bpo 37834 中贡献

pathlib
pickle
pickle  扩展 子类化 针对 c  优化 的 pickler  现在可 通过 定义 特殊 的 reduceroverride  方法来 重载 函数和类 的 封存 逻辑
 由 pierre  glaser  和 olivier  grisel  在 bpo 35900 中贡献

plistlib
 添加了新的 plistlib
uid  并 启动 了 对 读取 和写入 经过 nskeyedarchiver  编码 的 二进制 plists  的 支持
 由 jon  janzen  在 bpo 26707 中贡献

pprint
pprint  模块 为 一些 函数 添加了 sortdicts  形参
 默认情况下 这些函数 会 继续 在 渲 染 或 打印 之前 对 字典 进行排序
 但是如果 sortdicts  设 为假值 则 字典 将 保持 键 插入 时 的顺序
 这 在 调试 期间 与 json  输入 进行比较 时 会 很有用
 除 此 之外 还 增加了 一个 方便的 新 函数 pprint
pp  它 类似于 pprint
pprint  但它 的 sortdicts  默认为 false  from  pprint  import  pprint  pp  d  dictsourceinput
txt  由 r é mi  lapeyre  在 bpo 30670 中贡献

pycompile
compile  现在支持 静默 模式
 由 joannah  nanjekye  在 bpo 22640 中贡献

shlex
 新增了 shlex
join  函数 作为 shlex
split  的 逆 操作
 由 bobayles  在 bpo 32102 中贡献

shutil
copytree  现在接受 新 的 dirsexistok  关键字参数
 由 josh  bronson  在 bpo 20849 中贡献
shutil
makearchive  现 在 对 新 的归档 默认使用 modern  paxposix
12001 格式 以 提升 可移植 性 和 标准 一致性 此 特性 继承自 对 tarfile  模块 的相应 更改
 由 c
 gerlach  在 bpo 30661 中贡献
shutil
rmtree  在 windows  上 现在会 移除 目录 连接 而不会 递归地 先 移除 其 中 的内容
 由 steve  dower  在 bpo 37834 中贡献

socket
 添加了 便捷 的 createserver  和 hasdualstackipv 6 函数 以 自动 化 在 创建 服务器 套接字 时 通常情况下 所 必须 的 任务 包括 在同一 套接字 中 同时 接受 ipv 4 和 ipv 6 连接
 由 giampaolo  rodol à 在 bpo 17561 中贡献
socket
ifnametoindex  和 socket
ifindextoname  函数 已经 在 windows  上 实现
 由 zackeryspytz  在 bpo 37007 中贡献

ssl
 增加了 posthandshakeauth  和 verifyclientposthandshake  分别 启用 和 初始化 tls 1
3 握 手 后 验证
 由 christian  heimes  在 bpo 34670 中贡献

statistics
sys
 添加了新的 sys
unraisablehook  函数 可 被 重载 以便 控制 如何处理 不 可 引发的异常
 它会在 发生了 一个异常 但 python  没有 办 法 处理 时被调用
 例如 当 一个 析 构 器 在 垃圾回收 时 gc
collect  所 引发的异常
 由 victor  stinner  在 bpo 36829 中贡献

tarfile
tarfile  模块现在 对 新 的归档 默认使用 modern  pax  posix
12001 格式 而不再 是 之前的 gnu  专属 格式
 这 通过 标准 化 和 可扩展 格式 的 统 一 编码 utf 8 提升 了 跨平台 可移植 性 还提供了 其他 一些 益 处
 由 c
 gerlach  在 bpo 36268 中贡献

threading
 添加了新的 threading
excepthook  函数 用来 处理 未 捕获 的 threading
run  异常
 它可被 重载 以便 控制 如何处理 未 捕获 的 threading
run  异常
 由 victor  stinner  在 bpo 1230540 中贡献
 添加了新的 threading
getnativeid  函数 以及 threading
thread  类 的 nativeid  属性
 它们会 返回 内 核 所 分配 给 当前 线程 的 原生 整数 线程 id
 此 特性 仅在 特定 平台 上可用 参见 getnativeid  了解详情
 由 jaketesler  在 bpo 36084 中贡献

tokenize
 当提供 不带 末尾 新 行 的 输入 时 tokenize  模块 现在会 隐式地 添加 newline  形 符
 此行为 现在已 与 c  词法分析 器 的 内部 行为 相匹配
 由 ammar  askar  在 bpo 33899 中贡献

tkinter
 在 tkinter
spinbox  中 添加了 方法 selectionfromselectionpresent  selectionrange  和 selectionto
 由 juliette  monsel  在 bpo 34829 中贡献
 在 tkinter
canvas  类 中 添加了 方法 moveto
 由 juliette  monsel  在 bpo 23831 中贡献
tkinter
photoimage  类 现 在具有 transparencyget  和 transparencyset  方法
 由 zackery  spytz  在 bpo 25451 中贡献

time
 为 macos 10
12 添加了新的 时钟 clockuptimeraw
 由 joannahnanjekye  在 bpo 35702 中贡献

typing
typing  模块 加入 了一些 新特性 一个带有 键 专属 类型 的字典 类型
 参见 pep 589 和 typing
 typeddict  只 使用 字符串 作为 键
 默认情况下 每个键 都 要求 提供
 指定 totalfalse  以允许 键 作为 可 选项 class  locationtypeddict  totalfalse  latlong  tuple  gridsquare  str  xycoordinate  tuple  literal  类型
 参见 pep 586 和 typing
 literal  类型 指 明 一个 形参 或 返回值 被 限定 为 一个或多个 特定的 字面值 def  getstatusport  int  literalconnected  disconnected 
 final  变量、 函数、 方法 和 类
 参见 pep 591 typing
final  和 typing
 final  限定 符 会 指示 静态类型 检查 器 限制 进行 子类化、 重载 或 重新 赋值 pi  finalfloat 3
1415926536 协议 定义
 参见 pep 544 typing
protocol  和 typing
 简单的 abc  例如 typing
supportsint  现在是 protocol  的子类
 新 的 协议 类 typing
 新的函数 typing
getorigin  和 typing
unicodedata
unittest
 添加了 asyncmock  以 支持 异步 版本 的 mock
 同时 也 添加了 相应的 断言 函数用于 测试
 由 lisa  roach  在 bpo 26467 中贡献
unittest  添加了 addmodulecleanup  和 addclasscleanup  以 支持 对 setupmodule  和 setupclass  进行 清理
 由 lisa  roach  在 bpo 24412 中贡献
 一些 模拟 断言 函数 现 在 也会 在失败时 打印 一个 实际 调用 列表
 由 petterstrandmark  在 bpo 35047 中贡献
unittest  模块 已 支持 通过 unittest
isolatedasynciotestcase  来 使用 协程 作为 测试用例
 由 andrew  svetlov  在 bpo 32972 中贡献
 示例 import  unittest  class  testrequestunittest
venv
 现 在 venv  在 所有平台 上 都会 包含 activate
ps 1 脚本 用于在 powershellcore 6
1 下 激活 虚拟环境
 由 brett  cannon  在 bpo 32718 中贡献

weakref
 由 weakref
proxy  返回 的 代理对象 现 在 除 其他 算术运算 符 外 也支持 矩阵 乘法 运算符 和
 由 mark  dickinson  在 bpo 36669 中贡献

xml
 作为 对 dtd  和 外部 实体 检索 的 缓 解 在默认情况下 xml
minidom  和 xml
sax  模块 不再 处理 外部 实体
 由 christian  heimes  在 bpo 17239 中贡献
xml
etree
elementtree  模块中的
find  方法 支持 通 配 符 搜索 例如 tag  此 搜索 会 忽略 命名空间 以及 返回给定 命名空间中 所有 标签 的 namespace
 由 stefan  behnel  在 bpo 28238 中贡献
xml
elementtree  模块提供了 实现 c 14 n 2
0 的 新 函数– xml
etree
elementtree
canonicalize
 由 stefan  behnel  在 bpo 13611 中贡献
xml
xmlparser  的 目标 对象 可通过 新 的回调 方法 startns  和 endns  来 接受 命名空间 声明 事件
 此外 xml
treebuilder  目标 可 被 配置 为 处理 有关 注释 和 处理 指令 事件 以 将它们 包含在 所生成的 树 当 中
 由 stefan  behnel  在 bpo 36676 和 bpo 36673 中贡献

xmlrpc
serverproxy  现在支持 可选的 headers  关键字参数 作为 随 同 每次 请求 发送 的 http  标头 序列
 此 特征 的作用 之一 是 使得 从 默认 的基础 认 证 升级 到 更 快速 的 会话 认 证 成为 可能
 由 c é dric  krier  在 bpo 35153 中贡献

 性能优化
 构建和 c  api  的改变
 默认 的 sys
abiflags  成为 一个 空字符串 pymalloc  的 m  旗标 不再 有 意 义 无论 是否 启用 pymalloc  构建 都 是 兼容 abi  的因此 已被移除
 由 victor  stinner  在 bpo 36707 中贡献
 改变 的 例子 只会 安装 python 3
8 程序 不再 有 python 3
8 m  程序
 只会 安装 python 3
8 config  脚本 不再 有 python 3
8 mconfig  脚本
 m  旗标 已经 从 动态 库 文件名 后缀 中移除 包括 标准库中 的扩展模块 以及 第 三方 包 所产生 和 安装 的 模块 例如 从 pypi  下载 的 模块
 以 linux  为 例 python 3
7 的 后缀
so  在 python 3
8 中 改 为
cpython 38 x 8664 linuxgnu
so
 重新 组织 了所有 头文件 以 更好地 区分 不同 种类 的 api  include
h  应 为 可移植 的 公有 稳定 版 c  api
h  应 为 cpython  专属的 不 稳定 版 c  api  公有 api  部分 私有 api  附加 py  or  py  前缀
h  应 为 cpython  特别 专属的 私有 内部 c  api
 此 api  不 具 备 向下兼容 保证 并且不 应 在 cpython  以外 被使用
 它们的 公开 仅 适用于 特别 限定 的需求 例如 调试器 和 性能 分析 等 必须 直接访问 cpython  内 部 数据 而 不 通过调用 函数 的应用
 此 api  现在是 通过 make  install  安 装 的
 由 victor  stinner  在 bpo 35134 和 bpo 35081 中贡献 相关 工作 由 eric  snow  在 python 3
7 中 发起
 某些 宏 已 被转换为 静态 内 联 函数 形参 类型 和 返回 类型 定义 良 好 它们 不再 会 有 与 宏 相关的 问题 变量 具有 局部 作用域
 例如 pyincref  pydecref  pyxincref  pyxdecref  pyobjectinit  pyobjectinitvar  私有 函数 pyobjectgctrack  pyobjectgcuntrack  pydealloc  由 victor  stinner  在 bpo 35059 中贡献
 pybytearrayinit  和 pybytearrayfini  函数 已被移除
 它们 自 python 2
4 和 python 3
0 起 就 没有任何 用 处 被 排除 在 受限 api  稳 定 版 abi  之外 并且 未 被写入 文档
 由 victor  stinner  在 bpo 35713 中贡献
 pyexceptionclassname  的结果 类型 现在是 const  char  而非 char 
 由 serhiy  storchaka  在 bpo 33818 中贡献
 modulessetup
dist  与 modulessetup  两者 的 共 存 已被移除
 之前 在 更新 cpython  源码 树 时 开发者 必须 手动 拷贝 modulessetup
dist  在 源 码 树 内 到 modulessetup  在 构建 树 内 以 反 映 上 游 的 任何 改变
 旧 特 性 对 打包 者 来说 有 一点 益 处 但 代 价 是 对 追踪 cpython  开发 进程 的 开发者 造 成 经常 性 的 麻 烦 因为 忘 记 拷贝 该文件 可能导致 构建 失败
 现 在 构建 系统 总是会 从 源码 树 内 的 modulessetup  读取数据
 建议 希望 定 制 该文件 的 开发者 在 cpython  的 一个 git  分 叉 或 补丁 文件 中 维护 他们 的 更改 就 如 他们 对 源码 树 做 任何其他 改变 时 一样
 由 antoine  pitrou  在 bpo 32430 中贡献
 将 python  数字 转换为 c  整型 的 函数 例如 pylongaslong  以及 带有 i  之 类 整型 转换 格式单元 的 参数 解析 函数 例如 pyargparsetuple  现 在 如果可能 将 会 使用 index  特殊方法 而不是 int
 对 于 带 有 int  方法 但 没有 index  方法的对象 例如 decimal  和 fraction  将 会发出 弃用 警告
 对 于 实现了 index  的 对象 pynumbercheck  现在将 返回1
 pynumberlong  pynumberfloat  和 pyfloatasdouble  现 在 如果可能 也 将 会 使用 index  方法
 由 serhiy  storchaka  在 bpo 36048 和 bpo 20092 中贡献
 堆 分配 类型对象 现在将 增加 它们在 pyobjectinit  及其 对应的 宏 pyobjectinit  中 的引用计数 而不是 在 pytypegenericalloc  中
 修改 实例 分配 或 中 止 分配 的 类型 可能需要 进行 调整
 由 elizondo  在 bpo 35810 中贡献
 新增 函数 pycodenewwithposonlyargs  允许 创建 代码对象 例如 pycodenew  但 带有一个 额外的 posonlyargcount  形参 以 指明 仅限位 置参数 的数量
 由 pablo  galindo  在 bpo 37221 中贡献
 pysetpath  现在会 将 sys
executable  设 为 程序 完整 路径 pygetprogramfullpath  而不是 程序 名称 pygetprogramname
 由 victor  stinner  在 bpo 38234 中贡献

 弃用
api  与 特性 的 移除
 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
python  行为 的改变
 更改 的 python  api
 在 windows  上 os
getcwdb  函数 现在会 使用 utf 8 编码格式 而不是 ansi  代码 页 请 参看 pep 529 了解 具体 原因
 该函数 在 windows  上 不 再 被弃用
 由 victor  stinner  在 bpo 37412 中贡献
 现 在 subprocess
popen  在某些 情况下会 使用 os
posixspawn  以 获得 更好的 性能
 在 适用于 linux  的 windows  子 系统 和 qemu  用户 模拟 器 上 使用 os
posixspawn  的 popen  构造器 不会再 因为 找不到 程序 这样 的 错误 引发异常
 而 是 让 子进程 失败 并返回一个 非零 的 returncode
 由 joannah  nanjekye  和 victor  stinner  在 bpo 35537 中贡献
 the  preexecfn  argument  of  subprocess
 imap
logout  方法 不会再 静默地 忽略 任意 异常
 由 victor  stinner  在 bpo 36348 中贡献
 函数 platform
popen  已被移除 它 自 python 3
3 起 就 已被弃用 请改 用 os
popen
 由 victor  stinner  在 bpo 35345 中贡献
 当 传入 多 模 数据 时 statistics
mode  函数 不会再 引发异常
 它 将 改 为 返 回 在 输入 数据 中 遇到 的第一个 模式
 由 raymond  hettinger  在 bpo 35892 中贡献
 tkinter
treeview  类 的 selection  方法 不再 接受 参数
 带参数 调用 该方法 来 改变 选择 在 python 3
6 中 已弃用
 请使用 专门 方法 例如 selectionset  来 改变 选择
 由 serhiy  storchaka  在 bpo 31508 中 贡献
 xml
minidom  的 writexml  toxml  和 toprettyxml  方法 以及 xml
etree  的 write  方法 现在会 保留 用户 指定 的 属性 顺序
 由 diego  rojas  和 raymond  hettinger  在 bpo 34160 中贡献
 附带 r  旗标 打开 的 dbm
dumb  数据库 现在将 是 只读 的
 如果 数据库 不 存 在 附带 r  和 w  旗标 的 dbm
open  不会再 创建 数据库
 由 serhiy  storchaka  在 bpo 32749 中贡献
 在 xmlparser  的子类 中定义的 doctype  方法 将 不会再 被调用 并 将 导 致 发出 runtimewarning  而不是 deprecationwarning
 请 在 目标 上 定义 doctype  方法 来处理 xml  doctype  声明
 由 serhiy  storchaka  在 bpo 29209 中贡献
 现 在 当 自定义 元 类 未 在 传给 type
new  的 命名空间中 提供 classcell  入 口 时 将引发 runtimeerror
 在 python 3
63
7 中 是 则 是 引发 deprecationwarning
 由 serhiy  storchaka  在 bpo 23722 中贡献
 cprofile
profile  类 现在可 被用作 上下文管理器
 由 scott  sanderson  在 bpo 29235 中贡献
 shutil
copytree  和 shutil
move  会 使用 平台 专属的 fastcopy  系统调用 参见 依赖于 具体 平台 的 高效 拷贝 操作 一节
copyfile  在 windows  上 的 默认 缓冲区大小 从16 kib  改 为1 mib
 pygchead  结构 已被 完全 改变
 所有 接 触 到 该 结构 的 代码 都 应当被 重写
 参见 bpo 33597
 pyinterpreterstate  结构 已被移 入 internal  头文件 特别是 includeinternalpycorepystate
h
 不 透明 的 pyinterpreterstate  作为 仅 有 api  以及 稳定 版 abi  的一部分 仍然可 用
 文档 指明 该 结构 的 任 何 字段 都 不 是 公有 的因此 我们 希望 没 人 在 使用它们
 但是 如果你 确实 依 赖 其 中 某 一个 或更多 个 私有 字段 并且没有 其他 替代 选项 则 请 开 一个 bpo  问 题
 我们将 尽 力 帮助 你 进行 调整 可能 包括 向 公有 api  添加 访问 器 函数
 参见 bpo 35886
 现 在 所有平台 下 的 mmap
flush  方法 都会 在 成功时返回 none  并 在 错误 时 引发异常
 之前 它 的 行为 取决于 具体 平台 windows  下 会 在 成功时返回 非 零值 在 失败时返回 零
 unix  下 会 在 成功时返回 零 在失败时 引发错误
 由 berker  peksag  在 bpo 2122 中贡献
 xml
minidom  和 xml
sax  模块 默认 将不再 处理 外部 实体
 由 christian  heimes  在 bpo 17239 中贡献
 从 只读 的 dbm  数据库 dbm
dumb  dbm
gnu  或 dbm
ndbm  删除 键 将 会引发 error  dbm
error  dbm
error  或 dbm
error  而不是 keyerror
 由 xiang  zhang  在 bpo 33106 中贡献
 简化 了 字面值 的 ast
 所有 常量 将 被 表示为 ast
constant  的 实例
 实例 化 旧 类 num  str  bytes  nameconstant  和 ellipsis  都 将 返回 constant  的 实例
 由 serhiy  storchaka  在 bpo 32892 中贡献
 expanduser  在 windows  上现在 改 用 userprofile  环境变量 而不再 使 用 home  后者 通常不 会 为 一般 用户 账 户 设置
 由 anthony  sottile  在 bpo 36264 中贡献
 异常 asyncio
cancellederror  现 在 继承自 baseexception  而不是 exception  并且 不再 继承自 concurrent
 由 yury  selivanov  在 bpo 32528 中贡献
 当使用 asyncio
task  的 实例时 函数 asyncio
waitfor  现在会 正确 地 等待 撤 销
 在 此 之前 当 达到 timeout  时 它会被 撤 销 并 立即 返回
 由 elvis  pranskevichus  在 bpo 32751 中贡献
 当 将 socket  作为 name  形参 传入 时 函数 asyncio
getextrainfo  现在会 返回 一个 可 安全 使用 的 套接字 对象
 由 yury  selivanov  在 bpo 37027 中贡献
 asyncio
bufferedprotocol  已经 晋 级 为 稳定 api
 在 windows  上 对 扩展模块 的 dll  依赖 以及 通过 ctypes  加载 的 dll  的 解 析 现在将 更 为 安全
 只有 系统路径、 包含 相 信 dll  或 pyd  文件 的 路径 以及 通过 adddlldirectory  添加 的 目录 才会 被作为 加载 时 依赖 的 搜索 位置
 特别地 path  和 当前 工作 目录 将不再 被使用 对 它们的 修改 将不再 对 正 常 的 dll  解析 产生 影响
 如果你 的应用 依赖于 这些 机制 你 应当 先 检查 adddlldirectory  如果它 存 在 就 用 它 在 加载 你 的 库 时 添加 你 的 dll  目 录
 请注意 windows 7 用户 还需要 确保 windows  更新 包 kb 2533623 已安装 这一点 也会 由 安装 器 进行 验证
 由 steve  dower  在 bpo 36085 中贡 献
 关联到 pgen  的 头文件 和 函数 在 其 被 纯 python  实现 取 代 后 已被移除
 由 pablo  galindo  在 bpo 36623 中贡献
 types
codetype  在 构造器 的 第二个 位置 新增了 一个 形参 posonlyargcount  以 支持 在 pep 570 中定义的 仅限位置 参数
 第一 个参数 argcount  现 在 表示 位置参数 的 总 数量 包括 仅限位置 参数
 types
codetype  中新增 的 replace  方法可用于 让 代码 支持 future  特 性
c  api  中 的改变
cpython  字节码 的改变
 解释器 循环 已 通过将 块 堆栈 展开 逻辑 移 入 编译器 获得 了 简化
 编译器 现在会 发出 显式 指令 来 调整 值 堆栈 并 为 break  continue  和 return  调用 清 除 代码
 移除了 操作码 breakloop  continueloop  setuploop  和 setupexcept
 添加了新的 操作码 rotfour  beginfinally  callfinally  和 popfinally
 修改 了 endfinally  和 withcleanupstart  的 行为
 由 mark  shannon  antoine  pitrou  和 serhiy  storchaka  在 bpo 17611 中贡献
 添加了新的 操作码 endasyncfor  用于处理 当 等待 async  for  循环 的 下 一 项 时 引发的异常
 由 serhiy  storchaka  在 bpo 33041 中贡献
 mapadd  现在会 预期 值 为 栈 的第一个 元素 而 键 为 第二个 元素
 作 出 此 改变 以 使得 字典 推导式 能 如 pep 572 所 提议 的 那样 键 总是会 在 值 之前被 求 值
 由 j ö rn  heissler  在 bpo 35224 中贡献

 演示 和 工具
 添加了 一个 检测 脚本 用 于 对 访问 变量 的不同 方式 进行 计时 toolsscriptsvaraccessbenchmark
 由 raymond  hettinger  在 bpo 35884 中贡献
 以下是 自 python 3
3 以 来 性能 提升 情况 的 总结 python  version 3
3 基准 测试 是 在 intel ® core ™ i 74960 hq  处理器 上 运行 从 python
org  获取 的 macos 64 位 版 得到的 数据
 基准 测试 脚本 显示 时间 以 纳 秒 为单位
python 381 中的重要 变化
 出 于 重要的 安全 性 考 量 asyncio
createdatagramendpoint  的 reuseaddress  形参 不再 被 支持
 这是由 udp  中 的 套接字 选项 soreuseaddr  的 行为 导致 的
 更多细节 请参阅 loop
createdatagramendpoint  的 文档
 由 kyle  stanley  antoinepitrou  和 yury  selivanov  在 bpo 37228 中贡献

python 34 有什么新变化
 作者 r
 参见 pep 429 python 3
4 发布 计划
 摘要 发布 重 点
 新 的语法 特性 no  new  syntax  features  were  added  in  python 3
 其他的 新特性 pip  能够 随 时 可 用 pep 453
 新 的 库 模块 asyncio  new  provisional  api  for  asynchronous  io  pep 3156
 the  ipaddress  module  api  has  been  declared  stable  安全 改进 secure  and  interchangeable  hash  algorithm  pep 456
cpython  实现 的改进 safe  object  finalization  pep 442
 新 的 特性
pep 453 explicit  bootstrapping  of  pip  in  python  installations
 注解 to  avoid  conflicts  between  parallel  python 2 and  python 3 installations  only  the  versioned  pip 3 and  pip 3
 文档 更改 as  part  of  this  change  the  安装 python  模块 and  分发 python  模块 sections  of  the  documentation  have  been  completely  redesigned  as  shortgetting  started  and  faq  documents
 most  packaging  documentation  hasnow  been  moved  out  to  the  python  packaging  authority  maintained  pythonpackaging  user  guide  and  the  documentation  of  the  individual  projects
however  as  this  migration  is  currently  still  incomplete  the  legacyversions  of  those  guides  remaining  available  as  安装 python  模块 旧版 and  分发 python  模块 遗 留 版本
 参见 pep 453 python  安装 中 pip  的 显式 引 导 pep  由 donald  stufft  和 nick  coghlan  撰写由 donald  stufftnick  coghlanmartin  von  l ö wis  和 ned  deily  实现
pep 446 newly  created  file  descriptors  are  noninheritable
setinheritable  参见 pep 446 make  newly  created  file  descriptors  noninheritable  pep  由 victor  stinner  撰写并实现
improvements  to  codec  handling
 this  means  that  encodingbinary  data  to  and  from  its  hexadecimal  representation  for  examplecan  now  be  written  as  from  codecs  import  encode  decode  encodebhello  hex  b 68656 c 6 c 6 f  decodeb 68656 c 6 c 6 f  hex  bhellothe  binary  and  text  transforms  provided  in  the  standard  library  aredetailed  in  二进制 转换 and  文 字 转换
pep 451 a  modulespec  type  for  the  import  system
 see  the  弃用 section  for  a  list  of  methodsthat  should  be  replaced  and  their  replacements
 其他语言特性修改
 对 python  语言核心 进行 的 小 改 动 unicode  database  updated  to  ucd  version 6
 新增 模块
asyncio
 参见 pep 3156 asynchronous  io  support  rebooted  the  asyncio  module  pep  由 guido  van  rossum  领 导 编写 和 实现
ensurepip
enum
 参见 pep 435 adding  an  enum  type  to  the  python  standard  library  pep  由 barry  warsaweli  bendersky  和 ethan  furman  撰写 由 ethan  furman  实现
pathlib
 参见 pep 428 the  pathlib  module  objectoriented  filesystem  paths  pep  由 antoine  pitrou  撰写并实现
selectors
statistics
 参见 pep 450 adding  a  statistics  module  to  the  standard  library  pep  由 steven  daprano  撰写并实现
tracemalloc
 it  provides  the  followinginformation  trace  where  an  object  was  allocated  statistics  on  allocated  memory  blocks  per  filename  and  per  line  number  total  size  number  and  average  size  of  allocated  memory  blocks  compute  the  differences  between  two  snapshots  to  detect  memory  leaks  参见 pep 454 add  a  new  tracemalloc  module  to  trace  python  memory  allocations  pep  由 victor  stinner  撰写并实现
 改进的模块
abc
aifc
argparse
audioop
base
collections
colorsys
contextlib
dbm
dis
doctest
email
 for  details  see  the  contentmanagerdocumentation  and  the  email  示例
 these  api  additions  complete  thebulk  of  the  work  that  was  planned  as  part  of  the  email 6 project
 thecurrently  provisional  api  is  scheduled  to  become  final  in  python 3
5 possibly  with  a  few  minor  additions  in  the  area  of  error  handling
contributed  by  r
filecmp
functools
 参见 pep 443 singledispatch  generic  functions  pep  由ł ukasz  langa  撰写并实现
gc
glob
hashlib
hmac
html
http
idlelib  与 idle
importlib
inspect
ipaddress
logging
marshal
mmap
multiprocessing
operator
os
pdb
pickle
 参见 pep 3154 pickle  protocol 4 pep  由 antoine  pitrou  撰写并 由 alexandre  vassalotti  实现
plistlib
poplib
pprint
pty
pydoc
re
resource
select
shelve
shutil
smtpd
smtplib
socket
sqlite
ssl
stat
struct
subprocess
sunau
sys
tarfile
the  tarfile  module  now  supports  a  simple  命令行界面 when  called  as  ascript  directly  or  via  m
 this  can  be  used  to  create  and  extracttarfile  archives
 contributed  by  berker  peksag  in  bpo 13477
textwrap
threading
traceback
types
urllib
unittest
venv
wave
weakref
xmletree
 an  example  can  be  seen  at  pull  api  进行 非阻塞 解析
zipfile
cpython  implementation  changes
pep 445 customization  of  cpython  memory  allocators
 参见 pep 445 add  new  apis  to  customize  python  memory  allocators  pep  由 victor  stinner  撰写并实现
pep 442 safe  object  finalization
 参见 pep 442 safe  object  finalization  pep  由 antoine  pitrou  撰写并实现
pep 456 secure  and  interchangeable  hash  algorithm
pep 436 argument  clinic
 注解 the  argument  clinic  pep  is  not  fully  up  to  date  with  the  state  of  the  implementation
 参见 pep 436 the  argument  clinic  dsl  pep  由 larry  hastings  撰写并实现
other  build  and  c  api  changes
 其他 改进
significant  optimizations
 弃用
deprecations  in  the  python  api
deprecated  features
 移除
 不再 支持 的操作系统
 从 源代码 和 构建 工具 中删除 了 对 以 下 操作系统的 支持 os 2 bpo 16135
 windows 2000 变 更 集 e 52 df 05 b 496 a
 windows  系统中 comspec  指向 command
com  的 版本 bpo 14470
api  与 特性 的 移除
code  cleanups
 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
  python  命令行 为 的变化
 the  python  command  and  most  stdlib  scripts  as  well  as  argparse  now  output  version  information  to  stdout  instead  of  stderr  for  issue  list  see  其他 改进 above
python  api  的变化
c  api  的变化
 的变化
pep 476 enabling  certificate  verification  by  default  for  stdlib  http  clients
python 24 有什么新变化
 作者 a
 kuchling  本文 介绍了2005 年3 月30 日 发布 的 python 2
1 的 新 功能
pep 218 内置 集合 对象
 参见 pep 218 添加 内置 set  对象类型 最初 由 greg  wilson  提 出 由 raymond  hettinger  最终 实现
pep 237 统 一 长 整数 和 整数
pep 289 生成器表达式
 代替 for  link  in  getalllinks  if  link
 参见 pep 289 生成器表达式 proposed  by  raymond  hettinger  and  implemented  by  jiwon  seo  with  early  efforts  steered  by  hyeshik  chang
pep 292 simpler  string  substitutions
safesubstitutepage 33 title  参见 pep 292 simpler  string  substitutions  由 barry  warsaw  撰写并实现
pep 318 decorators  for  functions  and  methods
 参见 pep 318 decorators  for  functions  methods  and  classes  written  by  kevin  d
orgmoinpythondecoratorlibrary  该 wiki  页面 包含 几个 装饰器 示例
pep 322 反向 迭代
 参见 pep 322 反向 迭代 由 raymond  hettinger  撰写并实现
pep 324 新 的 子进程 模块
 参见 pep 324 子进程 新 的 进程 模块 由 peter å strand  在 fredrik  lundh  等 人 的 协 助 下 撰写并实现
pep 327 十进制 数据类型
 为什么 需要 十进制？
 因此 创建了 decimal  类型
decimal  类型
context  类型
 参见 pep 327 十进 数据类型 由 facundo  batista  撰写由 facundo  batista  eric  price  raymond  hettinger  aahz  和 tim  peters  实现
pep 328 多 行 导入
pep 331 localeindependent  floatstring  conversions
 参见 pep 331 localeindependent  floatstring  conversions  由 christian  r
 reis  撰写由 gustavo  carneiro  实现
 其他语言特性修改
 black 4 blue 2 green 3 red 1 yellow 5 由 raymond  hettinger  贡献
 integer  operations  will  no  longer  trigger  an  overflowwarning
 transpose 123456142536 transpose  由 raymond  hettinger  贡献
 encountering  a  failure  while  importing  a  module  no  longer  leaves  a  partiallyinitialized  module  object  in  sys
 性能优化
 新增 改进 和 弃用的 模块
cookielib
 该模块 由 john  j
 lee  贡献
doctest
 构建和 c  api  的改变
portspecific  changes
 移植到 python
 致谢
 作者 感谢 以下人 员 对 本文 各种 草 稿 给 予 的 建议 更 正 和协 助 koray  can  hyeshik  chang  michael  dyck  raymond  hettinger  brian  hurt  hamishlawson  fredrik  lundh  sean  reifschneider  sadruddin  rejeb
python 30 有什么新变化
 作者 guido  van  rossumthis  article  explains  the  new  features  in  python 3
 常见的 绊 脚 石
print  is  a  function
 printthere  are 232 possibilities  sepwhich  produces  there  are 4294967296 possibilities  注意 the  print  function  doesnt  support  the  softspace  feature  of  the  old  print  statement
views  and  iterators  instead  of  lists
ordering  comparisons
 整数
text  vs  data  instead  of  unicode  vs 8 bit
 see  also  the  unicode  指南 which  was  updated  for  python 3
overview  of  syntax  changes
 新 语法
 修改 的语法
 移除 的语法
changes  already  present  in  python
 the  corresponding  sections  in  python 2
6 有什么新变化 should  beconsulted  for  longer  descriptions
 pep 343 with  语句
 the  with  statement  is  now  a  standard  feature  and  no  longer  needs  to  be  imported  from  the  future
 also  check  out  writing  context  managers  and  contextlib  模块
 pep 366 从 主模块 显式 相对导入
 this  enhances  the  usefulness  of  the  m  option  when  the  referenced  module  lives  in  a  package
 pep 370 分 用户 的 sitepackages  目录
 pep 371 多 任务 处理 包
 pep 3101 高级 字符串格式
6 description  mentions  the  format  method  for  both 8 bit  and  unicode  strings
0 only  the  str  type  text  strings  with  unicode  support  supports  this  method  the  bytes  type  does  not
 the  plan  is  to  eventually  make  this  the  only  api  for  string  formatting  and  to  start  deprecating  the  operator  in  python 3
 pep 3105 print  改 为 函数
 this  is  now  a  standard  feature  and  no  longer  needs  to  be  imported  from  future
 pep 3110 异常处理 的 变 更
 the  except  exc  as  var  syntax  is  now  standard  and  except  exc  var  is  no  longer  supported
 of  course  the  as  var  part  is  still  optional
 pep 3112 字节 字面值
 string  literal  notation  and  its  variants  like  b
 now  produces  a  literal  of  type  bytes
 pep 3116 新 io  库
 the  io  module  is  now  the  standard  way  of  doing  file  io
 the  builtin  open  function  is  now  an  alias  for  io
 pep 3118 修改 缓冲区 协议
 the  old  builtin  buffer  is  now  really  gone  the  new  builtin  memoryview  provides  mostly  similar  functionality
 pep 3119 抽象基类
 the  abc  module  and  the  abcs  defined  in  the  collections  module  plays  a  somewhat  more  prominent  role  in  the  language  now  and  builtin  collection  types  like  dict  and  list  conform  to  the  collections
 pep 3127 整型 文 字 支持 和 语法
 as  mentioned  above  the  new  octal  literal  notation  is  the  only  one  supported  and  binary  literals  have  been  added
 pep 3129 类 装饰器
library  changes
 heres  the  list  旧 名称 新 名称 winreg  winreg  configparser  configparser  copyreg  copyreg  queue  queue  socketserver  socketserver  markupbase  markupbase  repr  reprlib  test
pep 3101 a  new  approach  to  string  formatting
changes  to  exceptions
miscellaneous  other  changes
operators  and  special  methods
builtins
 构建和 c  api  的改变
 性能
 移植到 python
 see 2 to 3 自动将 python 2 代码 转 为 python 3 代码 for  more  on  this  tool
0 please  see  将 扩展模块 移植到 python 3
python 27 有什么新变化
 作者 a
ca  本文 介绍了 python 2
7 的 新 功能
 python 2
7 于2010 年7 月3 日 发布
python 2 x  的 未来
changes  to  the  handling  of  deprecation  warnings
python 31 features
 就像 python 2
6 集成 了 python 3
0 的 特性 一样2
7 版 也 集成 了 python 3
1 中 的一些 新特性
2
x  系列 继续 提供 迁 移 到3
x  系列 的工具
3
1 功能 的部分 列表 这些 功能 已 反向 移植到2
7 the  syntax  for  set  literals 123 is  a  mutable  set
 the  new  format  specifier  described  in  pep 378 千 位分隔符 的 格 式说明符
pep 372 adding  an  ordered  dictionary  to  collections
 参见 pep 372 将 有 序 词 典 添加到 集合中 pep  由 armin  ronacher  和 raymond  hettinger  撰写由 raymond  hettinger  实现
pep 378 千 位分隔符 的 格式 说明符
 参见 pep 378 千 位分隔符 的 格式 说明符 pep  由 raymond  hettinger  撰写由 eric  smith  实现
pep 389 the  argparse  module  for  parsing  command  lines
 参见 argparse  documentation  argparse  模块的文档 页面
 升级 optparse  代码 part  of  the  python  documentation  describing  how  to  convert  code  that  uses  optparse
 pep 389 argparse  新 的 命令行 解析 模块 pep  由 steven  bethard  撰写并实现
pep 391 dictionarybased  configuration  for  logging
 for  moreinformation  see  配置 函数
 参见 pep 391 基于 字典 的 日志 配置 pep  由 vinay  sajip  撰写并实现
pep 3106 dictionary  views
 参见 pep 3106 改 造 dict
values  和
pep 3137 the  memoryview  object
 bytearraybbcde  参见 pep 3137 不变 字节 和 可变 缓冲区 pep  written  by  guido  van  rossum
 其他语言特性修改
 对 python  语言核心 进行 的 小 改 动 the  syntax  for  set  literals  has  been  backported  from  python 3
 相当于 with  a  as  a  with  b  as  b 
interpreter  changes
 性能优化
 新增 和 改进的模块
 新 模块 importlib
 这 是一些 例子 from  importlib  import  importmodule  anydbm  importmoduleanydbm  standard  absolute  import  anydbm  module  anydbm  from  ppythonlibanydbm
 新 模块 sysconfig
ttk  themed  widgets  for  tk
 更新 的 模块 unittest
 参见 httpwww
 更新 的 模块 elementtree
 构建和 c  api  的改变
 胶 囊
 refer  to  给 扩展模块 提供 c  apifor  more  information  on  using  these  objects
 特定于 windows  的 更改
 特定于 mac  os  x  的 更改
 在2
13 版更改 as  of 2
 特定于 freebsd  的 更改
other  changes  and  fixes
 移植到 python
 对 于 c  扩展模块 c  extensions  that  use  integer  format  codes  with  the  pyargparse  family  of  functions  will  now  raise  a  typeerror  exception  instead  of  triggering  a  deprecationwarning  bpo 5080
 对 于 嵌入 python  的 应用程序 the  pysyssetargvex  function  was  added  letting  applications  close  a  security  hole  when  the  existing  pysyssetargv  function  was  used
new  features  added  to  python 27 maintenance  releases
two  new  environment  variables  for  debug  mode
2
15 新版功能
pep 434 idle  enhancement  exception  for  all  branches
pep 466 network  security  enhancements  for  python
pep 466 python 2
7 中添加 的 相关 功能 hmac
pep 466 python 2
8 中添加 的 相关 功能 hashlib
 contributed  by  zachary  ware  in  bpo 21671 for  cve 20140224 pep 466 python 2
9 中添加 的 相关 功能 most  of  python 3
pep 477 backport  ensurepip  pep 453 to  python
 文档 更改 as  part  of  this  change  the  安装 python  模块 and  分发 python  模块 sections  of  the  documentation  have  been  completely  redesigned  as  shortgetting  started  and  faq  documents
 most  packaging  documentation  hasnow  been  moved  out  to  the  python  packaging  authority  maintained  pythonpackaging  user  guide  and  the  documentation  of  the  individual  projects
however  as  this  migration  is  currently  still  incomplete  the  legacyversions  of  those  guides  remaining  available  as  安装 python  模块 旧版 and  分发 python  模块 遗 留 版本
 参见 pep 453 python  安装 中 pip  的 显式 引 导 pep  由 donald  stufft  和 nick  coghlan  撰写由 donald  stufftnick  coghlanmartin  von  l ö wis  和 ned  deily  实现
pep 476 enabling  certificate  verification  by  default  for  stdlib  http  clients
pep 493 适用于 python 27 的 https  验证 迁 移 工具
new  make  regenall  build  target
 由 victor  stinner  在 bpo 23404 中贡献
2
14 新版功能
removal  of  make  touch  build  target
 由 victor  stinner  在 bpo 23404 中贡献
 在2
14 版更改
 致谢
 作者 要 感谢 以下人 员 为 本文 的各种 草 案 提供 建议 更 正 和 帮助 nick  coghlanphilip  jenvey  ryan  lovett  r
 david  murray  hugh  seckerwalker
python 22 有什么新变化
 作者 a
 概述
peps 252 and 253 type  and  class  changes
old  and  new  classes
descriptors
multiple  inheritance  the  diamond  rule
attribute  access
related  links
pep 234 iterators
 参见 pep 234 iterators  由 kaping  yee  和 gvr  撰写由 python  labs  小 组 主要 由 gvr  和 tim  peters  实现
pep 255 simple  generators
 参见 pep 255 简单 生成器 written  by  neil  schemenauer  tim  peters  magnus  lie  hetland
pep 237 统 一 长 整数 和 整数
pep 238 changing  the  division  operator
unicode  changes
 参见 pep 261 support  for  wide  unicode  characters  written  by  paul  prescod
pep 227 nested  scopes
 参见 pep 227 statically  nested  scopes  由 jeremy  hylton  撰写并实现
 新增 和 改进的模块
interpreter  changes  and  fixes
other  changes  and  fixes
 致谢
 作者 感谢 以下人 员 为 本文 的各种 草 案 提供 建议 更 正 和 帮助 fred  bremmerkeith  briggs  andrew  dalke  fred  l
 carel  fellinger  davidgoodger  mark  hammond  stephen  hansen  michael  hudson  jack  jansenmarcandr é lemburg  martin  von  l ö wis  fredrik  lundh  michael  mclaynick  mathewson  paul  moore  gustavo  niemeyer  don  odonnell  joonaspaalasma  tim  peters  jens  quade  tom  reinhardt  neil  schemenauerguido  van  rossum  greg  ward  edward  welbourne
python  有什么新变化？
python 32 有什么新变化
 作者 raymond  hettingerthis  article  explains  the  new  features  in  python 3
 参见 pep 392 python 3
2 发布 计划
pep 384 定义 稳定 的 abi
 参见 pep 384 定义 稳定 的 abi  pep  由 martin  von  l ö wis  撰写
pep 389 argparse  命令行 解析 模块
pep 391 基于 字典 的 日志 配置
criticalabnormal  termination 20110217111436694 root  critical  abnormal  termination  参见 pep 391 基于 字典 的 日志 配置 pep  由 vinay  sajip  撰写
pep 3148 concurrentfutures  模块
pep 3147 pyc  仓 库 目录
 参见 pep 3147 pyc  仓 库 目录 pep  由 barry  warsaw  撰写
pep 3149 abi  version  tagged  so  files
so  参见 pep 3149 abi  version  tagged 
so  files  pep  由 barry  warsaw  撰写
pep 3333 python  web  服务器 网 关 接口 v
 参见 pep 3333 python  web  服务器 网 关 接口 v 1
1 pep  由 phillip  eby  撰写
 其他语言特性修改
 新增 改进 和 弃用的 模块
email
elementtree
doctype  handles  a  doctype  declaration  两个方法 被弃用 xml
getchildren  被 listelem  替代
getiterator  被 element
iter  替代
 由 florent  xicluna  和 fredrik  lundh  在 bpo 6472 中贡献

functools
 由 raymond  hettinger  贡献
 to  aid  in  porting  programs  from  python 2 the  functools
 由 raymond  hettinger  贡献

itertools
collections
subtractdogs 2 cats 8 regular  subtraction  tally  counterdogs 3 cats 5 由 raymond  hettinger  贡献
 the  collections
movetoendx  listd  a  b  d  e  x  由 raymond  hettinger  贡献
 the  collections
reverse  d  dequem  i  b  a  l  a  s  m  i  s  由 raymond  hettinger  贡献

threading
datetime  和 time
math
abc
io
getvalue  bg 3805 showroom  main  chassis  bx 7899 warehouse  reserve  cog  bl 6988 receiving  primary  sprocket  由 antoine  pitrou  在 bpo 5506 中贡献

reprlib
x  由 raymond  hettinger  在 bpo 9826 和 bpo 9840 中贡献

logging
csv
contextlib
 由 michael  foord  在 bpo 9110 中贡献

decimal  and  fractions
 由 mark  dickinson  和 raymond  hettinger  贡献

ftp
txt  as  f  for  line  in  f  processline  由 tarek  ziad é 和 giampaolo  rodol à 在 bpo 4972 贡献 由 georg  brandl  在 issue 8046 和 bpo 1286 贡献
the  ftptls  class  now  accepts  a  context  parameter  which  is  assl
 由 giampaolo  rodol à 在 bpo 8806 中贡献

popen
 由 antoine  pitrou  和 brian  curtin  在 bpo 7461 和 bpo 10554 中贡献

select
gzip  和 zipfile
decode 42 decompress  and  convert  to  textthree  shall  be  the  number  thou  shalt  count  由 anand  b
 pillai  在 bpo 3488 中贡献 由 antoine  pitrou  nir  aides  和 brian  curtin  在 bpo 9962 bpo 1675951 bpo 7471 和 bpo 2846 中贡献
also  the  zipfile
tarfile
hashlib
algorithmsavailable  md 2 sha 256 sha 512 dsawithsha  mdc 2 sha 224 md 4 sha 256 sha 512 ripemd 160 sha 1 mdc 2 sha  sha 384 md 2 ecdsawithsha 1 md 4 md 5 sha 1 dsasha  sha 224 dsaencryption  dsa  ripemd 160 sha  md 5 sha 384 由 carl  chenet  在 bpo 7418 中 建议

ast
call  object  at 0 x 101739 a 10 由 benjamin  peterson  和 georg  brandl  实现

os
 由 victor  stinner  贡献

shutil
 由 tarek  ziad é 贡献
in  addition  the  shutil  module  now  supports  archiving  operations  forzipfiles  uncompressed  tarfiles  gzipped  tarfiles  and  bzippedtarfiles
 由 tarek  ziad é 贡献

sqlite
 由 r
 david  murray  和 shashwat  anand  在 bpo 8845 中贡献

html
socket
ssl
 由 antoine  pitrou  在 bpo 8850 bpo 1589 bpo 8322 bpo 5639 bpo 4870 bpo 8484 和 bpo 8321 中贡献

nntp
 由 antoine  pitrou  在 bpo 9360 中贡献 由 andrew  vant  在 bpo 1926 中贡献

certificates
imaplib
 由 lorenzo  m
 catucci  和 antoine  pitrou  在 bpo 4471 中贡献

httpclient
unittest
random
 由 raymond  hettinger  在 bpo 9025 中贡献

poplib
 由 giampaolo  rodol à 在 bpo 8807 中贡献

asyncore
 由 giampaolo  rodol à 在 bpo 6706 中贡献

tempfile
temporarydirectory  as  tmpdirname  printcreated  temporary  dir  tmpdirname  由 neil  schemenauer  和 nick  coghlan  在 bpo 5178 中贡献

inspect
pydoc
2 b  由 ron  adam  在 bpo 2001 中贡献

dis
 由 nick  coghlan  在 bpo 9147 中贡献

dbm
 由 ray  allen  在 bpo 9523 中 建议

ctypes
site
2 sitepackages  由 tarek  ziad é 在 bpo 6693 中贡献

sysconfig
 还有一个 方便的 命令行界面 cpython 32 python  m  sysconfig  platform  win 32 python  version 3
2 srcdir  cpython 32 userbase  cdocuments  and  settingsraymondapplication  datapython  由 tarekziad é 移 出 distutils

pdb
 由 georg  brandl  antonio  cuni  和 ilya  sandler  贡献

configparser
urllibparse
 encodinglatin 1 typetelenovelanamebfdf 3 ndeeste 1 elisa 3 fas  detailed  in  解析 ascii  编码 字节 all  the  urllib
parse  functions  nowaccept  asciiencoded  byte  strings  as  input  so  long  as  they  are  notmixed  with  regular  strings
 if  asciiencoded  byte  strings  are  givenas  parameters  the  return  types  will  also  be  an  asciiencoded  bytestrings  urllib
mailbox
turtledemo
 多线程
 由 antoine  pitrou  贡献
 regular  and  recursive  locks  now  accept  an  optional  timeout  argument  to  their  acquire  method
 性能优化
 由 alexandre  vassalotti  antoine  pitrou  和 unladen  swallow  团队 在 bpo 9410 和 bpo 3873 中贡献
 the  timsort  algorithm  used  in  list
 由 antoine  pitrou  在 bpo 7451 中贡献 由 raymond  hettinger  和 antoine  pitrou  在 bpo 10314 中贡献
 recursive  locks  created  with  the  threading
 由 antoine  pitrou  在 bpo 3001 中贡献
 the  fastsearch  algorithm  in  stringlib  is  now  used  by  the  split  rsplit  splitlines  and  replace  methods  on  bytes  bytearray  and  str  objects
unicode
 编解码器
 文档
idle
 由 raymond  hettinger  在 bpo 5150 中贡献
 idle  on  mac  os  x  now  works  with  both  carbon  aquatk  and  cocoa  aquatk
 由 kevin  walzer  ned  deily  和 ronald  oussoren  在 bpo 6075 中贡献

 代码 库
 构建和 c  api  的改变
 由 antoine  pitrou  在 bpo 9203 中贡献
 the  option  withwctypefunctions  was  removed
 由 amaury  forgeot  darc  在 bpo 9210 中贡献
 hash  values  are  now  values  of  a  new  type  pyhasht  which  is  defined  to  be  the  same  size  as  a  pointer
 移植到 python
python 36 有什么新变化
 编 者 elvis  pranskevichus  elvismagic
io  本文 解释 了 与3
5 相比 python 3
6 中 的 新 功能
 python 3
6 于2016 年12 月23 日 发布
 请参阅 changelog  以获取 完整的 更改 列表
 参见 pep 494 python 3
6 发布 计划
 摘要 发布 重 点
 新 的 特性
pep 498 格式化 的 字符串文字
pep 526 变量 注释 的语法
pep 515 数字 文 字 中 的 下划线。
pep 525 异步生成器
 参见 pep 525 异步生成器 pep  由 yury  selivanov  撰写并实现
pep 530 异步 推导
pep 530 adds  support  for  using  async  for  in  list  set  dictcomprehensions  and  generator  expressions  result  i  async  for  i  in  aiter  if  i 2 additionally  await  expressions  are  supported  in  all  kinds  ofcomprehensions  result  await  fun  for  fun  in  funcs  if  await  condition  参见 pep 530 异步 推导 pep  由 yury  selivanov  撰写并实现
pep 487 自定义类 创建
new  as  described  in  创建 类对象
 参见 pep 487 自定义类 创建 pep  由 martin  teichmann  撰写并实现
pep 487 descriptor  protocol  enhancements
name  name  class  model  intfield  intfield  参见 pep 487 自定义类 创建 pep  由 martin  teichmann  撰写并实现
pep 519 添加 文件 系统路径 协议
 参见 pep 519 添加 文件 系统路径 协议 pep  由 brett  cannon  和 koos  zevenhoven  撰写
pep 495 消除 本地 时间 的 歧义
 参见 pep 495 消除 本地 时间 的 歧义 pep  由 alexander  belopolsky  和 tim  peters  撰写由 alexander  belopolsky  实现
pep 529 将 windows  文件系统 编码 更改 为 utf
 有关 详细信息 和 可能需要 的 代码 修改 的 讨论 请参见 pep 529
pep 528 将 windows  控制台 编码 更改 为 utf
 参见 pep 528 将 windows  控制台 编码 更改 为 utf 8 pep  由 steve  dower  撰写并实现
pep 520 保留 类属性 定义 顺序
 参见 pep 520 保留 类属性 定义 顺序 pep  由 eric  snow  撰写并实现
pep 468 保留 关键字参数 顺序
 参见 pep 468 保留 关键字参数 顺序 pep  由 eric  snow  撰写并实现
 新 的 dict  实现
pep 523 向 cpython  添加 框架 评 估 api
 参见 pep 523 向 cpython  添加 框架 评 估 api  pep  由 brett  cannon  和 dino  viehland  撰写
pythonmalloc  环境变量
 effectsof  debug  hooks  新 分配 的内存 中 填充 字节0 xcb  释放 的内存 中 填充 了 字节0 xdb  detect  violations  of  the  python  memory  allocator  api
 在 缓冲区 开始 之前 检测 写 操作 缓冲区 下 溢 在 缓冲区 结束 后 检测 写 操作 缓冲区 溢出 check  that  the  gil  is  held  when  allocator  functions  of  pymemdomainobj  ex  pyobjectmalloc  and  pymemdomainmem  ex  pymemmalloc  domains  are  called
 检查 是否 保留 了 gil  也是 python 3
6 的 新特性
 由 victor  stinner  在 bpo 26516 和 bpo 26564 中贡献

dtrace  和 systemtap  探 测 支持
python  can  now  be  built  withdtrace  which  enables  static  markersfor  the  following  events  in  the  interpreter  函数调用 返回 垃圾 收集 开始 完成 执行 的 代码 行
 更多信息请参 见 使用 dtrace  和 systemtap  检测 cpython 
 当前的 实现 已 在 linux  和 macos  上 进行 了 测试
 将 来 可能会 添加 其他 标记
 其他语言特性修改
 对 python  语言核心 进行 的 小 改 动 a  global  or  nonlocal  statement  must  now  textually  appear  before  the  first  use  of  the  affected  name  in  the  same  scope
 新增 模块
secrets
 警告 note  that  the  pseudorandom  generators  in  the  random  module  should  not  be  used  for  security  purposes
 参见 pep 506 secrets  模块 被加入 python  标准库 pep  由 steven  daprano  撰写并实现
 改进的模块
array
 由 serhiy  storchaka  在 bpo 26492 中贡献
ast
 由 victor  stinner  在 bpo 26146 中贡献
asyncio
binascii
cmath
collections
concurrentfutures
contextlib
datetime
decimal
asintegerratio 15750 由 stefan  krah  和 mark  dickinson  在 bpo 25928 中贡献

distutils
email
encodings
enum
faulthandler
fileinput
hashlib
httpclient
idlelib  与 idle
 在3
2 中新增 多个 对 自动 补全 的 修正
 由 louie  lu  在 bpo 15786 中贡献
 在3
3 中新增 module  browser  在 file  菜单 中 之前 称为 class  browser  现在会 在 最高层级 函数和类 之外 显示 嵌套的 函数和类
 由 guilherme  polo  cheryl  sabella  和 terry  jan  reedy  在 bpo 1612262 中贡献
 之前 以 扩展 形式 实现 的 idle  特性 已 作为 正常 特性 重新 实现
 它们的 设置 已从 extensions  选项卡 移至 其他 对话框 选项卡
 由 charles  wohlganger  和 terry  jan  reedy  在 bpo 27099 中 实现
settings  对话框 options  中 的 configure  idle  已经被 部分 重写 以 改进 外 观 和 功能
 由 cheryl  sabella  和 terry  jan  reedy  在多个 问题 项 中贡献
 在3
4 中新增 字 体 样本 现 在 包括 一 组 非 拉 丁 字符 以便 用户 能 更好地 查看 所 选 特定 字 体 的效果
 由 terry  jan  reedy  在 bpo 13802 中贡献
 样本 可以被 修改 以 包括 其他 字符
 由 serhiy  storchaka  在 bpo 31860 中贡献
 在3
6 中新增 编辑器 代码 上下文 选项 已 经过 修改
 box  会显示 所有 上下文行 直到 最大 行 数
 点击 一个 上下文行 会 使 编辑器 跳 转 到 该 行
 自定义 主题 的 上下文 颜色 已 添加到 settings  对话框的 highlights  选项卡
 由 cheryl  sabella  和 terry  janreedy  在 bpo 33642 bpo 33768 和 bpo 33679 中贡献
 在 windows  上 会 有新的 api  调用 将 tk  对 dpi  的 调整 告 知 windows
 在 windows 8
1 或10 上 如果 python  二进制 码 的 dpi  兼容 属性 未 改变 并且 监视器 分 辨 率 大于96 dpi  这 应该 会 令 文本 和 线 条 更 清晰
 否则 的话 它应该 不 造成 影响
 由 terry  jan  reedy  在 bpo 33656 中贡献
 在3
7 中新增 超过 n  行 默认值为50 的 输出 将 被 折叠 为 一个 按钮
 n  可以在 settings  对话框的 general  页 的 pyshell  部分 中进行 修改
 数量 较 少 但是 超 长 的 行 可以通过在 输出 上 右 击 来 折叠
 被 折叠 的 输出 可通过 双 击 按钮 来 展开 或 是通过 右 击 按钮 来 放入 剪 贴 板 或 是 单独的 窗口
 由 tal  einat  在 bpo 1529353 中贡献

importlib
inspect
json
logging
math
multiprocessing
os
pathlib
pdb
pickle
pickletools
pydoc
random
re
readline
rlcompleter
shlex
site
sqlite
socket
socketserver
ssl
statistics
struct
subprocess
sys
telnetlib
time
timeit
tkinter
traceback
 f  traceback  most  recent  call  last  file  stdin  line 1 in  module  file  stdin  line 1 in  f  file  stdin  line 1 in  f  file  stdin  line 1 in  f  previous  line  repeated 995 more  times  recursionerror  maximum  recursion  depth  exceeded  由 emanuel  barry  在 bpo 26823 中贡献

tracemalloc
 由 victor  stinner  在 bpo 26588 中贡献

typing
unicodedata
unittestmock
urllibrequest
urllibrobotparser
venv
warnings
winreg
winsound
xmlrpcclient
zipfile
zlib
 性能优化
 构建和 c  api  的改变
 其他 改进
 弃用
 新 关键字
 已弃用的 python  行为
 已弃用的 python  模块、 函数 和 方法
 已弃用的 c  api  函数 和 类型
 弃用的 构建 选项
 移除
api  与 特性 的 移除
 移植到 python
 本节 列出了 先前 描述 的 更改 以及 可能需要 更改 代码 的 其他错误 修正
  python  命令行 为 的变化
python  api  的 更改
 type  的子类 如果未 重载 type
new  将不再 能 使用 一个参数 的形式 来 获取 对象的类型
c  api  中 的改变
cpython  字节码 的改变
python 362 中的重要 变化
new  make  regenall  build  target
 由 victor  stinner  在 bpo 23404 中贡献
3
2 新版功能
removal  of  make  touch  build  target
 由 victor  stinner  在 bpo 23404 中贡献
 在3
2 版更改
python 364 中的重要 变化
python 365 中的重要 变化
python 367 中的重要 变化
python 3610 中的重要 变化
 出 于 重要的 安全 性 考 量 asyncio
createdatagramendpoint  的 reuseaddress  形参 不再 被 支持
 这是由 udp  中 的 套接字 选项 soreuseaddr  的 行为 导致 的
 更多细节 请参阅 loop
createdatagramendpoint  的 文档
 由 kyle  stanley  antoinepitrou  和 yury  selivanov  在 bpo 37228 中贡献

whats  new  in  python
0 a 0 date  五 月202020 this  article  explains  the  new  features  in  python 3
 注解 prerelease  users  should  be  aware  that  this  document  is  currently  in  draft  form
summary  release  highlights
new  features
other  language  changes
new  modules
improved  modules
optimizations
build  and  c  api  changes
deprecated
removed
porting  to  python
 更新 日志
python  下 一 版
 发布日期 xxxxxxxx
 安全
 bpo 42051 模块 plistlib  不再 接受 xml  属性 列表 文件中的 实体 声明 避 免 引发 xml  脆 弱 性
 此 更改 不应该 影响 用户 使用 因为 实体 声明 在 常规 属 性 列表 文件 中 不 被使用
 核心与内置
 bpo 42218 修正 了 peg  解析器 中 导致 调试模式 崩 溃 的 错误
 现 在 在 左 递归 规 则 中 检查 错误 以避免 此 类 错误 没有 得到 及 时 处理 并 在其他 地方 出现 长 距离 崩 溃 的 情况
 bpo 42214 修正 了 peg  解析器 在 检查 barryasflufl  规则 中 的 标记 时可能 的 崩 溃
 由 pablo  galindo  修正
 bpo 41910 记录 object
eq  的 默认 实现
 bpo 42057 修复 窥 孔 优化 程序 对 条件 跳 转 jumpifnotexcmatch  对 的 错误 优化
 bpo 41984 垃圾回收 器 现在会 跟踪 所有 用户定义 类
 由 brandt  bucher  修 复
 库
 文档
 测试
 构建
windows
macos
idle
c  api
python 390 final
 库
 测试
 构建
python 390 release  candidate
 核心与内置
 库
 文档
 bpo 40979 重 构 typing
rst  将 超过70 个 类、 函数 和 装饰器 组织 至 新 的 子 小节
 测试
 构建
windows
c  api
python 390 发布 候 选 版
 发布日期20200811
 核心与内置
 bpo 38156 正确地 处理 pyosstdioreadline  中 eof  之后的 中断
 库
 bpo 41497 在 dis  模块 中 修复 潜在 的 unicodedecodeerror
 bpo 41490 更新 ensurepip  以 安装 pip 20
1 和 setuptools 49
 bpo 41467 在 windows  上 修复 asyncio  recvinto  当 套接字 管道 被 关闭 时 的返回值 brokenpipeerror  返回0 而不是 空 字节串 b 
 bpo 41425 让 tkinter  文档 示例 可 运行
 bpo 41384 当 传给 tkinter
optionmenu  的 选项 未 知 时引发 tclerror  而 不 是 typeerror
 bpo 38731 修复 了 pycompile  模块 命令行界面 下 的 nameerror
 bpo 41317 在 asyncio
sockaccept  中 使用 adddonecallback  以 在 撤 销 时 及 早 退 订 读取 器
 bpo 41364 减少 uuid  的 导入 开销
 bpo 41341 在 gettypehints  中 对 typing
forwardref  递归 求值
 bpo 41182 选择 器 使用 基于 defaultselector  的 实现 bpo 40726 处理 在 ast
incrementlineno  上 endlineno  为 none  的 情况
 文档
 bpo 41045 添加了 关于 fstrings  调试 功能 的 文档
 bpo 41314 将 from  future  import  annotations  的 默认值 由4
0 变 更 到3
10 参考 pep 563 的 变 更
windows
 bpo 41492 修复 了 uac  提示 的描述
 bpo 28791 更新 windows  版本 以 支持 sqlite 3
21
0
idle
 bpo 41468 改进 idie  运行 错误信息 也 许用户 永远 都 看 不 到
python 390 beta
 安全
 核心与内置
 库
 文档
macos
idle
c  api
python 390 beta
 安全
 核心与内置
 库
 测试
 构建
windows
macos
idle
c  api
python 390 beta
 库
 构建
python 390 beta
 核心与内置
 库
 测试
 构建
windows
macos
idle
c  api
python 390 beta
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
macos
 工具示例
c  api
python 390 alpha
 安全
 核心与内置
 库
 文档
 bpo 39879 updated  数据 模 型 docs  to  include  dict  insertion  order  preservation
 测试
 构建
windows
macos
idle
 工具示例
c  api
python 390 alpha
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
macos
idle
 工具示例
c  api
 没有 模块 状态 的扩展模块 msize 0 不 会 受到 影响
python 390 alpha
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
idle
c  api
python 390 alpha
 核心与内置
 库
 文档
 构建
idle
c  api
python 390 alpha
 发布日期20191218
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
macos
idle
c  api
python 390 alpha
 安全
 bpo 38418 修复 os
system  的 审计事件 被 命名为 os
system 
 bpo 38243 在 将 文档 页 渲 染 为 html  时 会 对 xmlrpc
docxmlrpcserver  的 服务器 标题 进行 转义
 由 donghee  na  在 bpo 38243 中贡献
 bpo 38174 将 厂 商 化 的 expat  库 版本 更新 至2
8 这 解决 了 cve 201915903
 bpo 37764 修复 了 email
getunstructured  在 邮件 头 不包含 末尾 空格 以及 在 其 包含 无效的 已 编码 字 等 特定 情况下 进入 无限 循环 的 问题
 由 ashwin  ramaswami  贡献 补丁
 bpo 37363 adds  audit  events  for  the  range  of  supported  run  commands  see  命令行 与 环境
 bpo 34631 在 windows  安装程序 中 将 openssl  更新为1
1 c  bpo 34155 fix  parsing  of  invalid  email  addresses  with  more  than  one  e
 核心与内置
 库
 文档
 测试
 bpo 38117 使用 openssl 1
1 d  进行 测试 bpo 38018 increase  code  coverage  for  multiprocessing
 构建
windows
 bpo 38492 删除 pythonw
exe  依赖 的 microsoft  c  执行 库
 bpo 38117 将 绑定 的 openssl  更新 到1
 bpo 10945 正式 取消 对 在 非 windows  系统上 创建 bdistwininst  安装程序 的 支持
 bpo 35360 更新 windows  构建 以 使用 sqlite 3
macos
 bpo 38117 在 macos  安装程序 中 将 openssl  更新为1
1 d
 bpo 35360 更新 macos  安装程序以使用 sqlite 3
 bpo 34631 在 macos  安装程序 中 将 openssl  更新为1
1 c
idle
 工具示例
c  api
python 380 beta
 发布日期20190604
 安全
 核心与内置
 库
 文档
 测试
 bpo 37081 使用 openssl 1
1 c  进行 测试 bpo 36829 add  test
 构建
 增加 一个 pkgconfig  python 3
8 embed  模块 用来 将 python  嵌入到 一个 应用中 pkgconfig  python 3
8 embed  libs  包含 lpython 3
 要 同时 支持3
8 和 旧版本 请 先 尝试 pkgconfig  pythonx
yembed  libs  并 在 此 命令 失败时 回退 到 pkgconfig  pythonx
y  libs  即 不带 embed  请 将 x
y  替换为 python  版本号
windows
macos
idle
 工具示例
c  api
python 380 alpha
 发布日期20190506
 安全
 bpo 36742 于 函数 urlsplit  中 修复 了 对 于 预 规格 化字符 的 不 当 处理 过程
 核心与内置
 库
semaphoretracker  so  it  is  reused  by  child  processes  bpo 31292 为 包含 include  指令 的 文件 修复 setup
py  check  restructuredtext
 文档
 bpo 36425 新增的 文档 翻译 简 体 中 文
 测试
 构建
windows
macos
idle
 工具示例
c  api
python 380 alpha
 发布日期20190325
 安全
 核心与内置
 bpo 36236 在 python  初始化 时如果 当前目录 被移除 则 它 将不再 会 被添 加到 sys
path  中
 bpo 36262 修复 了 在 floatstr  complexstr  pickle
load  marshal
load  等 所用的 函数 pydgstrtod  中进行 从字符串 到 浮点 数 的 转换 时 偶 有 发生 的 一个 内存 泄 漏 问题
 库
 文档
 测试
 构建
windows
idle
 bpo 36176 修复 idle  自动 补全 和 calltip  悬 浮 窗 的 颜色
 避免 与 linux  暗 色 主题 冲突 略 微 加 深 了 calltip  的 背景 颜色
 bpo 23216 将 文档字符串 添加到 idle   的 搜索 模块
 工具示例
c  api
python 380 alpha
 发布日期20190225
 核心与内置
 库
 文档
 测试
windows
idle
 bpo 24310 idle  文档 设置 对话框 字 体 选项卡 示例
python 380 alpha
 发布日期20190203
 安全
 核心与内置
 库
 文档
 bpo 33604 更新 hmac  md 5 默认 报告 deprecationwarning  并将在3
8 移除
 bpo 33503 修复 错误 的 pypi  链接 bpo 33421 为 typing
asynccontextmanager  添加 缺 失 的 文档
 测试
 bpo 26704 添加了 对 一个实例 方法 进行 双 重 修 补 的 测试 演示
 补丁 作者 为 anthony  sottile
 bpo 33655 忽略 运行 在 bsd  平台 的 zfs  上 时 testposixfallocate  的 失败
 构建
windows
 bpo 35402 更新 windows  构建 以 使用 tcl  和 tk 8
9 bpo 35401 将 windows  内部 版本 更新 到 openssl 1
 bpo 33316 pythreadreleaselock  always  fails  bpo 33184 在 windows  安装程序 中 将 openssl  更新为1
macos
 bpo 35401 在 macos  安装程序 中 将 openssl  更新为1
 bpo 34405 在 macos  安装程序 中 将 openssl  更新为1
0 i 
 bpo 33184 在 macos  安装程序 中 将 openssl  更新为1
idle
 bpo 35769 将 idle  的 新 文件名 从 untitled  更改 为 untitled  bpo 35660 fix  imports  in  idlelib
 bpo 35641 当 函数 没有 文档字符串 时 正确地 格式化 calltip
 工具示例
c  api
 bpo 35259 基于 pylimitedapi  有 条件 地 声明 pyfinalizeex 3
6 中新增
 补丁 作者 arthur  neufeld
python 370 正式版
 发布日期20180627
 库
c  api
python 370 rc
 发布日期20180612
 核心与内置
 库
 文档
 构建
windows
idle
python 370 beta
 发布日期20180530
 核心与内置
 库
 文档
 bpo 33604 更新 hmac  md 5 默认 报告 deprecationwarning  并将在3
8 移除
 bpo 33503 修复 错误 的 pypi  链接 bpo 33421 为 typing
asynccontextmanager  添加 缺 失 的 文档
 测试
 bpo 33655 忽略 运行 在 bsd  平台 的 zfs  上 时 testposixfallocate  的 失败
 bpo 32604 删除 xxsubinterpreters  模块 用 于 测试 和 相关的 帮助 程序
 该模块 最初 最初 是 在3
7 b 1 中添加 的
 构建
macos
idle
python 370 beta
 发布日期20180502
 核心与内置
 bpo 33363 在 异步 函数 外 使用 async  with  和 async  for  时抛出 syntaxerror  异常
 bpo 33128 修复 导致 pathfinder  在 sys
metapath  上 出现 两次 的 错误
 由 pablo  galindo  salgado  提供 补丁
 bpo 33231 修复 normalizestring  中 潜在 的内存 泄 漏
 库
 文档
 测试
 构建
windows
 bpo 33184 在 windows  安装程序 中 将 openssl  更新为1
macos
 bpo 33184 在 macos  安装程序 中 将 openssl  更新为1
idle
 工具示例
python 370 beta
 发布日期20180329
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
macos
idle
 工具示例
c  api
python 370 beta
 发布日期20180227
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
macos
idle
 工具示例
python 370 beta
 发布日期20180130
 核心与内置
 库
 文档
 测试
 构建
 bpo 32593 放 弃 对 freebsd 9 及 更早 版本 的 支持
windows
macos
c  api
python 370 alpha
 发布日期20180108
 核心与内置
 库
 文档
 测试
windows
 工具示例
c  api
python 370 alpha
 发布日期20171205
 核心与内置
 库
 文档
 测试
 构建
 bpo 28791 更新 windows  构建 以 使用 sqlite 3
 bpo 28791 更新 os  x  安装程序以使用 sqlite 3
windows
macos
 bpo 31392 更新 macos  安装程序以使用 openssl 1
idle
 工具示例
c  api
python 370 alpha
 发布日期20171016
 核心与内置
 bpo 31709 取消 对 异步 aiter  的 支持
 库
 文档
 构建
 bpo 31624 删除 对 bsdos  的 支持
idle
c  api
python 370 alpha
 发布日期20170919
 安全
 核心与内置
 库
 文档
 测试
 构建
 bpo 29572 更新 windows  构建和 os  x  安装程序以使用 openssl 1
 bpo 28208 更新 windows  构建和 os  x  安装程序以使用 sqlite 3
 bpo 28248 更新 windows  构建和 os  x  安装程序以使用 openssl 1
windows
 bpo 31392 更新 windows  构建 以 使用 openssl 1
idle
 工具示例
c  api
python 366 正式版
 发布日期20180627 在3
6 版本 中没有 新 的 更改
python 366 rc
 发布日期20180611
 核心与内置
 bpo 33231 修复 normalizestring  中 潜在 的内存 泄 漏
 库
 bpo 33127 ssl  模块现在 使用 libressl 2
1 编译
 文档
 bpo 33503 修复 错误 的 pypi  链接 bpo 33421 为 typing
asynccontextmanager  添加 缺 失 的 文档
 测试
 bpo 33655 忽略 运行 在 bsd  平台 的 zfs  上 时 testposixfallocate  的 失败
 构建
windows
 bpo 33184 更新 windows  构建 以 使用 openssl 1
macos
 bpo 33184 更新 macos  安装程序以使用 openssl 1
idle
 工具示例
c  api
python 365 正式版
 发布日期20180328
 测试
 构建
python 365 rc
 发布日期20180313
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
macos
idle
 工具示例
c  api
python 364 正式版
 发布日期20171218 从3
4 rc 1 到3
4 正式版 中没有 新 的 代码 更改
python 364 rc
 发布日期20171205
 核心与内置
 库
 文档
 测试
 构建
 bpo 28791 更新 windows  构建 以 使用 sqlite 3
 bpo 28791 更新 os  x  安装程序以使用 sqlite 3
windows
macos
 bpo 31392 更新 macos  安装程序以使用 openssl 1
idle
 工具示例
c  api
python 363 正式版
 发布日期20171003
 库
 构建
python 363 rc
 发布日期20170918
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
idle
 工具示例
python 362 正式版
 发布日期20170717 自 rc 2 起 没有 更改
python 362 rc
 发布日期20170707
 安全
python 362 rc
 发布日期20170617
 核心与内置
 库
 安全
 库
idle
c  api
 构建
 文档
 工具示例
 测试
windows
python 361 正式版
 发布日期20170321
 核心与内置
 构建
python 361 rc
 发布日期20170304
 核心与内置
 库
idle
windows
c  api
 文档
 测试
 构建
 bpo 29572 更新 windows  构建和 os  x  安装程序以使用 openssl 1
python 360 正式版
 发布日期20161223 自 rc 2 起 没有 更改
python 360 rc
 发布日期20161216
 核心与内置
 工具示例
windows
 构建
python 360 rc
 发布日期20161206
 核心与内置
 库
c  api
 文档
 工具示例
python 360 beta
 发布日期20161121
 核心与内置
 库
 文档
 测试
 构建
python 360 beta
 发布日期20161031
 核心与内置
 库
windows
 构建
 bpo 28208 更新 windows  构建和 os  x  安装程序以使用 sqlite 3
 bpo 28248 更新 windows  构建和 os  x  安装程序以使用 openssl 1
 测试
python 360 beta
 发布日期20161010
 核心与内置
 库
windows
c  api
 构建
 测试
python 360 beta
 发布日期20160912
 核心与内置
 库
idle
c  api
 测试
 构建
 更新 os  x  安装包 使用 sqlite 3
1 和 xz 5
2 版本
 工具示例
windows
 bpo 27883 在 windows  上 将 sqlite  更新 到3
0
python 360 alpha
 发布日期20160815
 核心与内置
 库
idle
 测试
windows
 构建
python 360 alpha
 发布日期20160711
 核心与内置
 库
 安全
 库
 安全
 库
idle
c  api
 构建
 bpo 26930 更新 windows  构建 以 使用 openssl  openssl 1
 在 gnuhurd  系统中 不 使用 大 文件 支持
 工具示例
 文档
 测试
python 360 alpha
 发布日期20160613
 核心与内置
 库
 安全
 库
 安全
 库
idle
 文档
 测试
windows
 构建
 bpo 26930 更新 os  x 10
5 仅32 位 安装程序以 构建 并 链接 openssl 1
windows
c  api
 工具示例
python 360 alpha
 发布日期20160516
 核心与内置
 库
 安全
 库
 安全
 库
 安全
 库
idle
 文档
 测试
 构建
 bpo 26465 更新 windows  构建 openssl 1
 bpo 26465 更新 os  x 10
5 仅32 位 安装程序以 构建 并 链接 openssl 1
 bpo 26268 更新 windows  构建 openssl 1
windows
 工具示例
c  api
python 355 正式版
 发布日期 e 20180204 在3
5 版本 中没有 新 的 更改
python 355 rc
 发布日期20180123
 安全
 核心与内置
 库
python 354 正式版
 发布日期20170807
 库
python 354 rc
 发布日期20170723
 安全
 核心与内置
 库
 文档
 测试
 构建
windows
c  api
python 353 正式版
 发布日期20170117 there  were  no  code  changes  between 3
python 353 rc
 发布日期20170102
 核心与内置
 库
 安全
 库
 安全
 库
idle
c  api
 文档
 测试
 工具示例
windows
 构建
 bpo 28248 更新 windows  构建和 os  x  安装程序以使用 openssl 1
python 352 正式版
 发布日期20160626
 核心与内置
 bpo 26930 更新 windows  构建 以 使用 openssl  openssl 1
 测试
idle
python 352 rc
 发布日期20160612
 核心与内置
 安全
 库
 安全
 库
 安全
 库
 安全
 库
 安全
 库
idle
 文档
 测试
 构建
 bpo 26465 更新 windows  构建 openssl 1
 bpo 26930 更新 os  x 10
5 仅32 位 安装程序以 构建 并 链接 openssl 1
 bpo 26268 更新 windows  构建 openssl 1
windows
 工具示例
windows
python 351 正式版
 发布日期20151206
 核心与内置
windows
python 351 rc
 发布日期20151122
 核心与内置
 库
idle
 文档
 测试
 构建
windows
 工具示例
python 350 正式版
 发布日期20150913
 构建
python 350 rc
 发布日期20150909
 库
 构建
python 350 rc
 发布日期20150907
 核心与内置
 库
python 350 rc
 发布日期20150825
 核心与内置
 库
python 350 rc
 发布日期20150809
 核心与内置
 库
idle
 文档
 测试
python 350 beta
 发布日期20150726
 核心与内置
 库
 构建
 bpo 24603 更新 windows  构建和 os  x 10
5 安装程序以使用 openssl 1
python 350 beta
 发布日期20150705
 核心与内置
 库
 测试
 文档
 构建
 bpo 24432 更新 windows  构建和 os  x 10
5 安装程序以使用 openssl 1
python 350 beta
 发布日期20150531
 核心与内置
 库
python 350 beta
 发布日期20150524
 核心与内置
 库
idle
 测试
 文档
 工具示例
python 350 alpha
 发布日期20150419
 核心与内置
 库
 构建
 测试
 工具示例
c  api
python 350 alpha
 发布日期20150328
 核心与内置
 库
 构建
 测试
 工具示例
python 350 alpha
 发布日期20150309
 核心与内置
 库
 构建
 bpo 23686 更新 os  x 10
5 安装程序以使用 openssl 1
c  api
windows
python 350 alpha
 发布日期20150208
 核心与内置
 升级 unicode  数据库 到7
0 版本
 库
 bpo 23248 从 最新的 openssl  git  master  更新 ssl  错误 代码
 在 html
entities  包 中 增加 all  变量
 bpo 22085 在 tkinter  中删除 了 对 tk 8
3 的 支持
idle
 构建
 bpo 22592 放 弃 对 borland  c  编译器 构建 python  的 支持
distutils  模块 仍 然 支持 它 来构建 扩展
 bpo 22591 放 弃 对 msdos  的 支持 尤其 是 djgpp  编译器 gcc  的 msdos  端 口
c  api
 文档
 测试
 bpo 21275 修复 kfreebsd  上 的 套接字 测试
 bpo 20635 添加了 针对 tk  几 何 管理器 的 测试
 增加 freeze  包 的 测试用例
 bpo 20743 修复 testtcl  中 的 引用 泄 漏
 bpo 21097 将 testnamespacepkgs  移至 testimportlib
 工具示例
 bpo 21906 让 toolsscriptsmd 5 sum
py  可以 工作 在 python 3
 由 zachary  ware  提供 补丁
 为2 to 3 添加 yield  from  的 支持
windows
 bpo 23260 更新 windows  安装 器 the  bundled  version  of  tcltk  has  been  updated  to 8
 bpo 22644 openssl  的 捆 绑 版本 已 更新 到1
 有关 旧版本 的 信息请参阅 history  文件
python 25 有什么新变化
 作者 a
 conditional  expressions  were  finally  added  to  the  languageusing  a  novel  syntax  see  section  pep 308 条件 表达式
 the  newwith  statement  will  make  writing  cleanup  code  easier  section  pep 343 with  语句
 values  can  now  be  passed  into  generators  sectionpep 342 生成器 的 新特性
 imports  are  now  visible  as  either  absoluteor  relative  section  pep 328 绝对 导入 和 相对导入
 some  corner  casesof  exception  handling  are  handled  better  section  pep 341 统 一 tryexceptfinally
pep 308 条件 表达式
pep 309 部分 功能 应用
 这里有 一个 很小 但 很 现 实 的 例子 import  functools  def  log  message  subsystem  write  the  contents  of  message  to  the  specified  subsystem
wrapsf  def  wrapperargs  kwds  print  calling  decorated  function  return  fargs  kwds  return  wrapper  参见 pep 309 partial  function  application  pep  由 peter  harris  提 出 并 撰写由 hyeshik  chang  和 nick  coghlan  实现 并 由 raymond  hettinger  适配
pep 314 python  软件包的 元数据 v
 参见 pep 314 python  软件包的 元数据 v 1
1 pep  由 a
 kuchling  richard  jones  和 fred  drake  提 出 并 撰写由 richard  jones  和 fred  drake  实现
pep 328 绝对 导入 和 相对导入
 参见 pep 328 导入 多 行 和 绝对 相对导入 pep  由 aahz  撰写由 thomas  wouters  实现
pep 338 将 模块 作为脚本 执行
 参见 pep 338 将 模块 作为脚本 执行 pep  由 nick  coghlan  撰写并实现
pep 341 统 一 tryexceptfinally
 参见 pep 341 统 一 tryexcept  和 tryfinally  pep  由 georg  brandl  撰写由 thomas  lee  实现
pep 342 生成器 的 新特性
 这些 改变 的 累积 效 应 是 让 生成器 从 单 向 的 信息 生产 者 变 成 了 既 是 生产 者 又 是 消费者
 参见 pep 342 通过 增强 型 生成器 实现 协程 pep  由 guido  van  rossum  和 phillip  j
 eby  撰写由 phillip  j
 eby  实现
 包括 一些 更高级 的 使用 生成器 作为 协程 的 示例
 这些 功能 的 早期 版本 在 pep 288 由 raymond  hettinger  撰写 和 pep 325 由 samuele  pedroni  撰写 中 提 出
orgwikicoroutine  协程 的 wikipedia  条目
pep 343 with  语句
5 you  need  to  add  the  followingdirective  to  your  module  from  future  import  withstatement  该 语句 在 python 2
6 中 始终 启用
 注解 in  this  case  f  is  the  same  object  created  by  open  because  file
writing  context  managers
contextlib  模块
writeline  参见 pep 343 with  语句 pep  written  by  guido  van  rossum  and  nick  coghlan  implemented  by  mike  bland  guido  van  rossum  and  neal  norwitz
 contextlib  模块的文档
pep 352 异常 作为 新 型 的 类
 参见 pep 352 异常 所需的 超 类 pep  由 brett  cannon  和 guido  van  rossum  撰写由 brett  cannon  实 现
pep 353 使用 ssizet  作为 索引 类型
 参见 pep 353 使用 ssizet  作为 索引 类型 pep  由 martin  von  l ö wis  撰写并实现
pep 357 index  方法
 参见 pep 357 允许 将 任何 对象 用 于 切片 pep  由 travis  oliphant  撰写并实现
 其他语言特性修改
 几个 例子 httpwww
 for  example  to  find  the  longest  string  in  a  list  you  can  do  l  medium  longest  short  prints  longest  print  maxl  keylen  prints  short  because  lexicographically  short  has  the  largest  value  print  maxl  由 steven  bethard  和 raymond  hettinger  贡献
 two  new  builtin  functions  any  and  all  evaluate  whether  an  iterator  contains  any  true  or  false  values
 由 marcandr é lemburg  实现
 one  error  that  python  programmers  sometimes  make  is  forgetting  to  include  an  init
 as  an  example  this  is  now  legal  class  c  pass  由 brett  cannon  实现

 交互 解释器 变 更
 性能优化
 新增 改进 和 删除 的 模块
ctypes  包
 参见 httpstarship
netcrewthellerctypes  ctypes  的 主 页 含 教程 参考 和 常见问题 解 答
 ctypes  模块的文档
elementtree  包
hashlib  包
 参见 hashlib  模块的文档
sqlite 3 包
wsgiref  包
serveforever  参见 httpwww
org  wsgi  相关 资源 的 核心 网 站
 pep 333 python  web  服务器 网 关 接口 v 1
0 pep  由 phillip  j
 eby  撰写
 构建和 c  api  的改变
 see  the  earlier  section  pep 353 使用 ssizet  作为 索引 类型 for  a  discussion  of  this  change
portspecific  changes
 移植到 python
 because  of  the  pep 342 changes  described  in  section  pep 342 生成器 的 新特性 its  now  possible  for  giframe  to  be  none
 see  the  earlier  section  pep 353 使用 ssizet  作为 索引 类型 for  a  discussion  of  this  change
 致谢
 作者 感谢 以下人 员 对 本文 各种 草 稿 给 予 的 建议 更 正 和协 助 georg  brandlnick  coghlan  phillip  j
 eby  lars  gust ä bel  raymond  hettinger  ralfw
 grossekunstleve  kent  johnson  iain  lowe  martin  von  l ö wisfredrik  lundh  andrew  mcnamara  skip  montanaro  gustavo  niemeyer  paulprescod  james  pryor  mike  rovner  scott  weikart  barry  warsaw  thomaswouters
python 21 有什么新变化
 作者 a
 概述
python 2
1 的 最终 版本 于2001 年4 月17 日 发布
pep 227 nested  scopes
 参见 pep 227 statically  nested  scopes  由 jeremy  hylton  撰写并实现
pep 236 future  directives
 参见 pep 236 back  to  the  future  由 tim  peters  撰写 主要 由 jeremy  hylton  实现
pep 207 rich  comparisons
 the  new  magic  methodnames  are  运算 方法 名称 lt  le  gt  ge  eq  ne  the  magic  methods  are  named  after  the  corresponding  fortran  operators
 参见 pep 207 rich  comparisons  written  by  guido  van  rossum  heavily  based  on  earlier  work  by  david  ascher  and  implemented  by  guido  van  rossum
pep 230 warning  framework
 参见 pep 5 guidelines  for  language  evolution  written  by  paul  prescod  to  specify  procedures  to  be  followed  when  removing  old  features  from  python
 pep 230 warning  framework  由 guido  van  rossum  撰写并实现
pep 229 new  build  system
 参见 pep 229 using  distutils  to  build  python  由 a
 kuchling  撰写并实现
pep 205 weak  references
referenceerror  参见 pep 205 弱引用 由 fred  l
 drake  jr  撰写并实现
pep 232 function  attributes
 参见 pep 232 function  attributes  由 barry  warsaw  撰写并实现
pep 235 importing  modules  on  caseinsensitive  platforms
pep 217 interactive  display  hook
pprint  l 123 recursion  on  list  with  id 135143996 参见 pep 217 display  hook  for  interactive  use  由 moshe  zadka  撰写并实现
pep 208 new  coercion  model
 参见 pep 208 reworking  the  coercion  model  written  and  implemented  by  neil  schemenauer  heavily  based  upon  earlier  work  by  marcandr é lemburg
pep 241 metadata  in  python  packages
 参见 pep 241 metadata  for  python  software  packages  由 a
 kuchling  撰写并实现
 新增 和 改进的模块
other  changes  and  fixes
 致谢
 作者 感谢 以下人 员 对 本文 的各种 草 案 提 出 建议 graeme  cross  davidgoodger  jay  graves  michael  hudson  marcandr é lemburg  fredriklundh  neil  schemenauer  thomas  wouters
python  文档 内容
 描述器 使用 指南
 作者 raymond  hettinger  联 系 方式 python  at  rcn  dot  com  目录 描述器 使用 指南 primer  simple  example  a  descriptor  that  returns  a  constant  dynamic  lookups  managed  attributes  customized  names  closing  thoughts  complete  practical  example  validator  class  custom  validators  practical  use  technical  tutorial  摘要 definition  and  introduction  descriptor  protocol  overview  of  descriptor  invocation  invocation  from  an  instance  invocation  from  a  class  invocation  from  super  summary  of  invocation  logic  automatic  name  notification  orm  example  pure  python  equivalents  属性 functions  and  methods  static  methods  class  methods  member  objects  and  slotsdescriptors  let  objects  customize  attribute  lookup  storage  anddeletion
primer
simple  example  a  descriptor  that  returns  a  constant
dynamic  lookups
managed  attributes
customized  names
closing  thoughts
complete  practical  example
validator  class
custom  validators
practical  use
technical  tutorial
 摘要
 学习 描述器 不仅 能 提供 接 触 到 更多 工具集 的 方法 还 能 更 深 地 理解 python  工作 的 原 理 并 更 加 体 会 到 其 设计 的 优 雅 性
definition  and  introduction
descriptor  protocol
deleteself  obj  none  以 上 就是 全部
 定义 这些方法 中的任何 一个 的 对象 被视为 描述器 并 在 被作为 属性 时 覆盖 其 默认行为
 如果一个 对象 定义了 set  或 delete  则 它 会被视为 数据描述器
 仅 定义了 get  的 描述器 称为 非 数据描述器 它们 通常 被用于 方法 但 也可以 有其他 用 途
 数据 和 非 数据描述器 的 不同之处在于 如何 计算 实例 字典中 条目 的替代 值
 如果 实例 的字典 具有与 数据描述器 同名的 条目 则 数据描述器 优先
 如果 实例 的字典 具有与 非 数据描述器 同名的 条目 则 该 字典 条目 优先
 为 了 使 数据描述器 成为 只读 的 应该 同时 定义 get  和 set  并 在 set  中 引发 attributeerror 
 用 引发异常 的 占位 符 定义 set  方法 使 其 成为 数据描述器
overview  of  descriptor  invocation
invocation  from  an  instance
invocation  from  a  class
invocation  from  super
summary  of  invocation  logic
 要 记住 的重要 点 是 descriptors  are  invoked  by  the  getattribute  method
automatic  name  notification
orm  example
pure  python  equivalents
 属性
 itssignature  is  propertyfgetnone  fsetnone  fdelnone  docnone  property  该 文档 显示了 定义 托 管 属性 x  的 典型 用 法 class  c  def  getxself  return  self
 要 了解 property  如何 根据 描述器 协议 实现 这里 是一个 纯 python  的 等价 实现 如 下 class  property  emulate  pypropertytype  in  objectsdescrobject
doc  这 个 内置的 property  每 当 用户 访问 属性 时 生效 随后 的变化 需要 一个 方法 的 参 与
 例如 一个 电子 表 格 类 可以通过 cellb 10
value  授 予 对 单元 格 值 的 访问 权限
 对 程序 的 后续 改进 要求 每次 访问 都 要 重新 计算 单元 格 但是 程序员 不希望 影响 直接访问 该 属性 的 现有 客户端 代码
 解决方案是 将 对 value  属性 的 访问 包装 在 属性 数据描述器 中 class  cell 
functions  and  methods
python  的 面向对象 功能 是 在 基于 函数 的 环境 构建 的
 通过使用 非 数据描述器 这两 方面 完成 了 无 缝 融 合
static  methods
 非 数据描述器 为 把 函数 绑定 为 方法 的 通常 模式 提供了一种 简单的 机制
 下 表 总结 了 绑定 及其 两个 最 有用的 变体 转换 形式 called  from  an  object  called  from  a  class  函数 fobj  args  fargs  静态 方法 fargs  fargs  类 方法 ftypeobj  args  fcls  args  静态 方法 返回 底层 函数 不 做 任何 更改
 调用 c
f  或 c
f  等效 于 通过 object
getattributec  f  或 object
getattributec  f  查找
 这样 该函数 就可以 从 对象 或 类 中进行 相同 的 访问
 适合 于 作为 静态 方法 的 是 那些 不 引用 self  变量 的 方法
 例如 一个 统计 用 的 包 可能包含 一个 实 验 数据 的容器 类
 该 容器 类提供了 用 于 计算 数据 的 平均值 均 值 中 位 数 和其他 描述 性 统计 信息 的 常规 方法
 但是 可能 有 在 概念 上 相关 但不 依赖于 数据 的 函数
 例如 erfx  是 在 统计 中 的便捷 转换 但 并 不 直接 依赖于 特定的 数据 集
 可以从 对象 或 类 中 调用 它 s
5
9332 或 sample
f 33 使用 非 数据描述器 纯 python  版本 的 staticmethod  如下所示 class  staticmethod  emulate  pystaticmethodtype  in  objectsfuncobject
class  methods
 与 静态 方法 不同类 方法 在 调用函数 之前 将 类 引用 放在 参数列表 的 最 前
 无论 调用 方 是 对象 还是 类 此 格式 相同 class  f  classmethod  def  fcls  x  return  cls
c  d  cls  for  key  in  iterable  dkey  value  return  d  现在可以 这样 构造一个 新 的唯一 键 字典 dict
fromkeysabracadabra  a  none  r  none  b  none  c  none  d  none  使用 非 数据 描述符 协议 纯 python  版本 的 classmethod  如 下 class  classmethod  emulate  pyclassmethodtype  in  objectsfuncobject
member  objects  and  slots
argument  clinic  howto
 作者 larry  hastings  摘要 argument  clinic  is  a  preprocessor  for  cpython  c  files
the  goals  of  argument  clinic
basic  concepts  and  usage
converting  your  first  function
 for  more  on  format  units  please  see  语句 解释 及 变量 编译
advanced  topics
symbolic  default  values
 currently  the  following  are  explicitly  supported  numeric  constants  integer  and  float  字符串 常量 true  false  and  none  simple  symbolic  constants  like  sys
renaming  the  c  functions  and  variables  generated  by  argument  clinic
converting  functions  using  pyargunpacktuple
optional  groups
 注解 optional  groups  are  only  intended  for  use  when  converting  functions  that  make  multiple  calls  to  pyargparsetuple  functions  that  use  any  other  approach  for  parsing  arguments  should  almost  never  be  converted  to  argument  clinic  using  optional  groups
 注释 for  every  optional  group  one  additional  parameter  will  be  passed  into  the  impl  function  representing  the  group
using  real  argument  clinic  converters  instead  of  legacy  converters
 下 表 显示了 传统 转换器 映射到 实 参 转换器 的 情况
 左边 是 传统 转换器 右 边 是 要 替换 它 的 文本
pybuffer
advanced  converters
parameter  default  values
the  null  default  value
expressions  specified  as  default  values
using  a  return  converter
cloning  existing  functions
calling  python  code
using  a  self  converter
writing  a  custom  converter
writing  a  custom  return  converter
metho  and  methnoargs
tpnew  and  tpinit  functions
changing  and  redirecting  clinics  output
the  ifdef  trick
using  argument  clinic  in  python  files
 日志 操作 手册
 作者 vinay  sajip  vinaysajip  at  reddove  dot  com  本 页 包含了 许多 日志记录 相关的 概念 这些 概念 在 过去 一 直 被认为 很有用
 在多个 模块 中 使用 日志
 多次 调用 logging
getloggersomelogger  时 会返回 对 同 一个 logger  对象的引用
 这 不仅 是 在同一 个 模块 中 在 其他模块 调用 也是 如 此 只要 是 在同一 个 python  解释器 进程中
 是 应该 引用 同 一个 对象 此外 应用程序 也可以在 一个 模块中定义 和 配置 父 logger  而 在 单独的 模块 中 创建 但不 配置 子 logger  对 子 logger  的 所有 调用 都 将 传给 父 logger
 这里 是 主模块 import  logging  import  auxiliarymodule  create  logger  with  spamapplication  logger  logging
somefunction  这里 是 辅助 模块 import  logging  create  logger  modulelogger  logging
inforeceived  a  call  to  somefunction  输出 结果会 像这样20050323234711663 spamapplication  info  creating  an  instance  of  auxiliarymodule
 在 多线程 中 使用 日志
 使用 多个 日志 处理器 和 多种 格式化
 在多个 地方 记录 日志
 日志 服务器 配置 示例
 以下是 在 一个 模块 中 使用 日志 服务器 配置 的 示例 import  logging  import  logging
join  然后 如 下 的 脚本 它 接收 文件名 做 为 命令行参数 并 将 该文件 以 二进制 编码 的方式 传给 服务器 做 为 新 的 日志 服务器 配置 usrbinenv  python  import  socket  sys  struct  with  opensys
 处理 日志 处理器 的 阻塞
 有 时候 需要 让 日志 处理程序 在 不 阻塞 当前 正 在 记录 线程 的情况下 完成 工作
 这 在 web  应用程序中 很 常见 当然 也会 在其他 场景 中出现
 一个 常见的 缓 慢 行为 是 smtphandler  由 于 开发者 无法 控制 的 多种 原因 例如 性能 不 佳 的 邮件 或 网络 基础 架构 发送 电子邮件 可能需要 很 长时间
 其 实 几乎所有 基于 网络 的 处理程序 都 可能 造成 阻塞 即 便 是 sockethandler  也可能 在 底层 进行 dns  查询 这 太 慢 了这个 查询 会 深 入 至 套接字 代码 位于 python  层 之 下 这是 不受 开发者 控制 的
 一种 解决方案是 分 成 两 部分 去 处理
 第 一部分 针对 那些 对 性能 有 要求 的 关键 线程 的日志记录 附加 一个 queuehandler
 日志记录器 只需 简单 写入 队列 该 队列 可以 设置一个 足够 大 的 容 量 甚至 不 设置 容 量 上限
 通常 写入 队列 是一个 快速 的 操作 即使 可能需要 在 代码中 去 捕获 例如 queue
full  等 异常
 如果你 是 一 名 处理 关键 线程 的 开发者 请 务 必 记录 这些 信息 包括 建议 只 为 日志 处理器 附加 queuehandlers  以便 于其他 开发者 使用 你的代码
 解决方案 的另一 部分 是 queuelistener  它 被设计用 来 作为 queuehandler  的对应
 queuelistener  非常 简单 向其 传入一个 队列 和 一些 处理 句柄 它 会 启动 一个 内部 线程 来 监听 从 queuehandlers  或 任何其他 可用的 logrecords  源 发送 过 来 的 logrecords  队列
 logrecords  会 从 队列 中被移除 并 被传递给 句柄 进行 处理
 使用 一个单独的 类 queuelistener   优点 是 可以使用 同 一个实例 去 服务 于 多个 queuehandlers
 这样 会 更 节 省 资源 否则 每个 处理程序 都 占 用 一个线程 没有任何 益 处
 以下是 使用了 这样 两个 类 的 示例 省略 了 导入 语句 que  queue
stop  在 运行 后 会产生 mainthread  look  out  在3
5 版更改 在 python 3
5 之前 queuelistener  总是 把 从 队列中 接收 的 每个 消息 都 传给 它 初始化 的 日志 处理程序
 这是 因为它 会 假设 过滤 级别 总是 在 队列 的另一 侧 去 设置 的
 从 python 3
5 开始 可以通过在 监听 器 构造函数 中添加 一个参数 respecthandlerleveltrue  改变 这种情况
 当 这样 设置 时 监听 器 会 比较 每条 消息 的 等级 和 日志 处理器 中 设置 的 等级 只 把 需要 传递 的 消息 传给 对应的 日志 处理器
 通过 网络 发送 和 接收 日志
 如果你想 在 网络 上 发送 日志 并 在 接收 端 处理 它们
 一个简单的 方式是 通过 附加 一个 sockethandler  的 实例 在 发送 端 的 根 日志 处理器 中 import  logging  logging
 在 接收 端 你可以使用 socketserver  模块 设置一个 接收 器
 这里 是一个 基础 示例 import  pickle  import  logging  import  logging
serveuntilstopped  if  name  main  main  首先 运行 服务 端 然后 是 客户端
 在 客户端 没有 什么 内容 会打印 在 控制台 中 在 服务 端 你应该 会 看到 如 下内容 about  to  start  tcp  server
 请注意 在某些 情况下 序列化 会 存在一 些 安全
 如果这 影响 到 你 那么 你可以通过 覆盖 makepickle  方法 使用 自己的 实现 来 解决 并 调整 上述 脚本 也 使用 覆盖 后 的 序列化 方法
 在 日志记录 中添加 上下文 信息
 使用 日志 适配 器 传递 上下文 信息
 使用 过滤器 传递 上下文 信息
 从 多个 进程 记录 至 单个 文件
using  concurrentfuturesprocesspoolexecutor
 轮 换 日志 文件
 使用 其他 日志 格式化 方式
 当 日志 模块 被添加 至 python  标准库 时 只 有一种 格式化 消息 内容的 方法 即 formatting
 在 那 之后 python  又 增加了 两种 格式化 方法 string
template  在 python 2
4 中新增 和 str
format  在 python 2
6 中新增
 日志 从3
2 开始 为 这两种 格式化 方式 提供了更 多 支持
formatter  类可以 添加一个 额外的 可选 关键字参数 style
 它 的 默认值 是 其他的 值 和 也支持 对 应 了 其他 两种 格式化 样式
 其 保持 了 向后兼容 如 您 所 愿 但 通过 显示 指定 样式 参数 你可以 指定 格式化字符串 的 方式是 使用 str
format  或 string
 这里 是一个 控制台 会话 的 示例 展示了 这些 方式 import  logging  root  logging
bar  critical  this  is  a  critical  message  请注意 最终 输出 到 日志 的 消息 格式 完全 独立 于 单 条 日志消息 的 构造 方式
 它 仍然 可以使用 formatting  如下所示 logger
customizing  logrecord
subclassing  queuehandler  a  zeromq  example
subclassing  queuelistener  a  zeromq  example
makelogrecordmsg  参见 模块 logging  日志记录 模块 的 api  参考
 模块 logging
config  日志记录 模块 的 配置 api 
 模块 logging
handlers  日志记录 模块 附带 的有用 处理程序
an  example  dictionarybased  configuration
using  a  rotator  and  namer  to  customize  log  rotation  processing
a  more  elaborate  multiprocessing  example
inserting  a  bom  into  messages  sent  to  a  sysloghandler
implementing  structured  logging
customizing  handlers  with  dictconfig
using  particular  formatting  styles  throughout  your  application
using  logrecord  factories
using  custom  message  objects
 you  may  recallfrom  使用 任意 对象作为 消息 that  when  logging  you  can  use  an  arbitraryobject  as  a  message  format  string  and  that  the  logging  package  willcall  str  on  that  object  to  get  the  actual  format  string
 considerthe  following  two  classes  class  bracemessage  def  initself  fmt  args  kwargs  self
configuring  filters  with  dictconfig
 as  described  in  访问 外部 对象
 for  example  you  could  have  used  the  text  extmain
myfilter  instead  of  myfilter  in  the  above  example
 see  用户定义 对象 for  more  information  on  how  logging  supports  using  userdefined  objects  in  its  configuration  and  see  the  other  cookbook  recipe  customizing  handlers  with  dictconfig  above
customized  exception  formatting
speaking  logging  messages
 缓冲 日志消息 并 有 条件 地 输出 它们
 在某些 情况下 你可能 希望 在 临时 区域 中 记录 日志消息 并且 只 在 发生 某种 特定 的情况下 才 输出 它们
 例如 你可能 希望 起始 在 函数 中 记录 调试 事件 如果 函数 执行 完成 且没有 错误 你 不希望 输出 收集 的 调试 信息 以避免 造成 日志 混 乱 但 如果 出现 错误 那么 你希望 所有 调试 以及 错误消息 被 输出
 下面是一个 示例 展示 如何在 你 的日志记录 函数 上 使用 装饰器 以 实现 这 一 功能
 该 示例 使用 logging
memoryhandler  它允许 缓冲 已 记录 的 事件 直到 某些 条件 发生 缓冲 的 事件 才会 被 刷新 flushed  传递给 另一个 处理程序 target  handler  进行 处理
 默认情况下 memoryhandler  在 其 缓冲区 被 填 满 时 被 刷新 或者 看到 一个 级别 大于 或 等于 指定 阈 值 的 事件
 如果 想要 自定义 刷新 行为 你可以通过 更 专 业 的 memoryhandler  子类 来 使 用这个 秘 诀
 这 个 示例 脚本 有 一个简单的 函数 foo  它 只是 在所有 的 日志 级别 中 循环 运行 写 到 sys
stderr  说明 它 要 记录 在 哪个 级别 上 然后 在这个 级别 上 实际 记录 一个 消息
 你可以 给 foo  传递 一个参数 如果为 true  它 将 在 error  和 critical  级别 记录 否则 它只 在 debug 、 info  和 warning  级别 记录
 脚本 只是 使用了 一个 装饰器 来 装饰 foo  这 个 装饰器 将 记录 执行 所需的 条件
 装饰器 使用 一个 记录器 作为参数 并 在 调用 被 装饰 的 函数 期间 附加 一个 内存 处理程序
 装饰器 可以使用 目标 处理程序、 记录 级别 和 缓冲区 的 容 量 缓冲 记录 的数量 来 附加 参数
 这些参数 分别 默认为 写入 sys
stderr  的 streamhandler  logging
error  和100
 以下是 脚本 import  logging  from  logging
debug  writelinecalling  undecorated  foo  with  false  assert  not  foofalse  writelinecalling  undecorated  foo  with  true  assert  footrue  writelinecalling  decorated  foo  with  false  assert  not  decoratedfoofalse  writelinecalling  decorated  foo  with  true  assert  decoratedfootrue  运行 此 脚本 时 应 看到 以 下 输出 calling  undecorated  foo  with  false  about  to  log  at  debug 
 actually  logged  at  critical  如 你所 见 实际 日志记录 输出 仅在 消息 等级 为 error  或更高 的 事件 时发生 但 在这种情况下 任何 之前 较 低 消息 等级 的 事件 还 会 被 记录
 你 当然 可以使用 传统的 装饰 方法 logiferrorslogger  def  foofailfalse 
 通过 配置 使用 utc  gmt  格式化 时间
 有 时候 你希望 使用 utc  来 格式化 时间 这 可以使用 一个 类 来完成 例如 utcformatter  如下所示 import  logging  import  time  class  utcformatterlogging
gmtime  然后 你可以 在你的 代码中使用 utcformatter  而不是 formatter
 如果你想 通过 配置 来实现 这 一 功能 你可以使用 dictconfig  api  来完成 该方法 在以下 完整 示例中 展示 import  logging  import  logging
asctime  脚本 会 运行 输出 类似 下面的 内容20151017125329501 the  local  time  is  sat  oct 17135329201520151017135329501 the  local  time  is  sat  oct 171353292015 展示了 如何将 时间 格式化 为 本地 时间 和 utc  两种 形式 其中每 种形式 对 应 一个 日志 处理器
 使用 上下文管理器 进行 选择 性 记录
 有 时候 我们 需要 暂 时 更改 日志 配置 并 在 执行 某些 操作 后 将 其 还 原
 为 此 上下文管理器 是 实现 保存 和 恢复 日志 上下文 的 最 明显 的方式
 这是一个 关于 上下文管理器 的简单 例子 它 允许你 在 上下文管理器的 作用域 内 更改 日志 等级 以及 增加 日志 句柄 import  logging  import  sys  class  loggingcontext  def  initself  logger  levelnone  handlernone  closetrue  self
close  implicit  return  of  none  dont  swallow  exceptions  如果指定 上下文管理器的 日志记录 等级 属性 则 在 上下文管理器的 with  语句 所 涵盖 的代码中 日志记录器 的 记录 等级 将 临时 设置为 上下文管理器 所 配置 的日志记录 等级
 如果指定 上下文管理 的 句柄 属性 则 该 句柄 在 进入 上下文管理器的 上下文 时 添加到 记录器 中 并 在 退出时 被 删除
 如果你 再 也 不需要 该 句柄 时 你可以 让 上下文管理器 在 退出 上下文管理器的 上下文 时 关闭 它
 为 了 说明 它 是如何 工作 的 我们可以 在上面 添加 以下代码 块 if  name  main  logger  logging
 我们 最初 设置 日志记录器 的 消息 等级 为 info  因此 消息1 出现 消息2 没有 出现
 在 接下来 的 with  代码块 中我们 暂 时 将 消息 等级 变 更 为 debug  从而 消息3 出现
 在 这 一 代码块 退出 后 日志记录器 的 消息 等级 恢复 为 info  从而 消息4 没有 出现
 在 下 一个 with  代码块 中我们 再 一次 将 设置 消息 等级 设置为 debug  同时 添加一个 将 消息 写入 sys
stdout  的 日志 处理器
 因此 消息5 在 控制台 出现 两次 分别 通过 stderr  和 stdout
 在 with  语句 完成后 状态 与 之前 一样 因此 消息6 出现 类似 消息1 而 消息7 没有 出现 类似 消息2
 如果我们 运行 生成 的 脚本 结果如 下 python  logctx
 我们将 stderr  标准错误 传输 到 devnull  我 再次 运行 生成 的 脚 步 唯一 被写入 stdout  标准输出 的 消息 即 我们 所 能 看 见 的 消息 如 下 python  logctx
 再 一次 将 stdout  标准输出 重定向 到 devnull  我 获得 如 下 结果 python  logctx
 在这种情况下 与 预期 一致 打印到 stdout  标准输出 的 消息＃5 不 会出现
 当然 这里 描述 的 方法可以 概 括 例如 临时 附加 日志记录 过滤器
 请注意 上面的 代码 适用于 python 2 以及 python 3
a  cli  application  starter  template
a  qt  gui  for  logging
unicode  指南
 发布 版本1
12 本 指南 讨论 了 python  对 于 表达 文本 数据 的 unicode  规范 的 支持 并且 解释 了 人 们 试 图 使用 unicode  时 经常 遇到 的 问题
unicode  概述
 定义
 编码
 上 一段 可以 归 结 为 一个 unicode  字符串 是 一系列 码 位 从0 到0 x 10 ffff  或者 说 十进制 的1114111 的 数字 组成的 序列
 这 一 序列 在内存中 需要 被 表示为 一 组 码 元 然后 码 元 会 对 应 到 包含 八 个 二进制 位 的 字节
 将 unicode  字符串 翻译 成 字节 序列 的 规则 被称为 字符 编码 或者 编码
 你可能 会 想 到 的第一 种 编码 是 使用 一个32 位 的 整数 来 代表一个 代码 位 然后 使用 cpu  对32 位 整数 的 表达 方式
 在 这 一 表达 方式 中 字符串 python  可能 看起来 像 是这样 p  y  t  h  o  n 0 x 500000007900000074000000680000006 f 0000006 e 00000001234567891011121314151617181920212223 这 个 表达 方式 非常 直接 但 同时 也 存 在 一些 问题
 不 够 方便 不同的 处理器 对 字节 的 排序 不同
 非常 浪 费 空间
 多 数 编码 都 小于127 或者255 所 以 很多 空间 都 是0 x 00
 上面的 字符串 takes 24 bytes  compared  to  the 6 bytes  needed  for  an  ascii  representation
 increased  ram  usage  doesnt  matter  too  much  desktop  computers  have  gigabytes  of  ram  and  strings  arent  usually  that  large  but  expanding  our  usage  of  disk  and  network  bandwidth  by  a  factor  of 4 is  intolerable
 引用 文 献
pythons  unicode  support
the  string  type
python  comes  with  roughly 100 different  encodings  see  the  pythonlibrary  reference  at  标准 编码 for  a  list
 some  encodings  havemultiple  names  for  example  latin 1 iso 88591 and 8859 are  all  synonyms  for  the  same  encoding
converting  to  bytes
unicode  literals  in  python  source  code
unicode  properties
comparing  strings
unicode  regular  expressions
 引用 文 献
the  str  type  is  described  in  the  python  library  reference  at  文本 序列类型 str
reading  and  writing  unicode  data
unicode  filenames
tips  for  writing  unicodeaware  programs
 引用 文 献
 致谢
 日志 howto
 作者 vinay  sajip  vinaysajip  at  reddove  dot  com
 日志 基础 教程
 什么 时候 使用 日志
 一个简单的例子
 记录 日志 到 文件
 从 多个 模块 记录 日志
 如果你 的 程序 包含 多个 模块 这里有 一个 如何 组织 日志记录 的 示例 myapp
infodoing  something  如果你 运行 myapp
py  你应该 在 myapp
log  中 看到 inforootstarted  inforootdoing  something  inforootfinished  这是 你 期 待 看到 的
 你可以使用 mylib
py  中 的 模式 将 此 概 括 为 多个 模块
 请注意 对 于 这种 简单的 使用 模式 除了 查看 事件 描述 之外 你 不 能 通过 查看 日志 文件 来 了解 应用程序中 消息 的 来源
 如果要 跟踪 消息 的 位置 则需要 参考 教程 级别 以外的 文档 请参阅 进 阶 日志 教程
 记录 变量 数据
 要 记录 变量 数据 请使用 格式字符串 作为 事件 描述 消息 并 将 变量 数据 作为参数 附加
 例如 import  logging  logging
warnings  before  you  s  look  leap  将显示 warningrootlook  before  you  leap  如 你所 见 将 可变 数据 合并 到 事件 描述 消息 中 使用 旧 的 s  形式 的 字符串格式化
 这 是为了 向后兼容 logging  包 的 出现 时间 早 于 较 新 的 格式化 选项 例如 str
format  和 string
 这些 较 新 格式化 选项 是 受支持的 但 探 索 它们 超出 了 本 教程 的范围 有关 详细信息请参 阅 using  particularformatting  styles  throughout  your  application
 更改 显示 消息 的 格式
 要 更改 用 于 显示 消息 的 格式 你需要 指定 要使用的 格式 import  logging  logging
warningand  this  too  这 将 输出 debugthis  message  should  appear  on  the  console  infoso  should  this  warningand  this  too  请注意 前面 示例 中出现的 root  已 消 失
 对 于 可以 出现在 格式字符串 中 的全部 内容 你可以 参考 以 下 文档 logrecord  属性 但 为 了 简单 使用 你 只需要 levelname  严重 性 message  事件 描述 包括 可变 数据 也 许 在 事件 发生时 显示
 这 将 在 下 一节 中 介绍
 在 消息 中显示 日期 时间
 要 显示 事件 的 日期和时间 你可以在 格式字符串 中 放置 asctimes  import  logging  logging
 应该 打印 这样的 东西20101212114142612 is  when  this  event  was  logged
 日期 时间 显示 的 默认 格式 如 上 所示 类似于 iso 8601 或 rfc 3339
 如果你需要 更多 地 控制 日期 时间 的 格式 请 为 basicconfig  提供 datefmt  参数 如 下 例 所示 import  logging  logging
 这 会显示 如 下内容12122010114636 am  is  when  this  event  was  logged
datefmt  参数 的 格式 与 time
strftime  支持 的 格式 相同
 后续 步骤
 基本 教程 到 此 结束
 它应该 足以 让你 启动 并 运行 日志记录
 日志 包 提供了更 多 功能 但 为 了 充 分 利用 它 你需要 花 更多的 时间 来 阅读 以 下 部分
 如果你 准备 好 了 可以 拿 一些 你 最 喜欢 的 饮 料 然后 继续
 如果你 的日志记录 需求 很 简单 那么 使用 上面的 示例 将日志记录 合并 到 你自己的 脚本 中 如果你 遇到 问题 或者 不 理解 某些 内容 请 在 comp
python  usenet  组 上 发布 一个 问题 在 httpsgroups
python  你应该 在 短 时间 内 得到 帮助
 还 不 够？ 你可以 继续 阅读 接下来 的 几个 部分 这些 部分 提供了 比 上面 基本 部分 更高级 或 深 入 的 教程
 之后 你可以 看 一 下 日志 操作 手册
 进 阶 日志 教程
 日志 库 采用 模块 化 方法 并 提供 几 类 组件 记录器、 处理程序、 过滤器 和 格式化程序
 记录器 暴 露 了 应用程序 代码 直接使用 的 接口
 处理程序 将日志记录 由 记录器 创建 发送到 适当的 目标
 过滤器 提供了更 精 细 的附加 功能 用于确定 要 输出 的日志记录
 格式化程序 指定 最终 输出 中 日志记录 的 样式
 日志 事件 信息 在 logrecord  实例 中 的 记录器、 处理程序、 过滤器 和 格式化程序 之间 传递
 通过调用 logger  类 以 下 称为 loggers  记录器的 实例 来执行 日志记录
 每个 实例 都有一个 名称 它们在 概念 上 以 点 句 点 作为 分隔符 排列 在 命名空间 的 层次结构 中
 例如 名为 scan  的 记录器 是 记录器 scan
textscan
html  和 scan
pdf  的 父 级
 记录器 名称 可以是 你想要 的 任何 名称 并 指示 记录消息 源 自 的 应用程序 区域
 在 命名 记录器 时 使用 的 一个 好 习 惯 是 在 每个 使用 日志记录 的 模块 中 使用 模块级 记录器 命名 如 下 logger  logging
getloggername  这意味着 记录器 名称 跟踪 包 或 模块 的 层次结构 并且 直 观 地 从 记录器 名称 显示 记录 事件 的 位置
 记录器 层次结构 的 根 称为 根 记录器
 这是 函数 debug 、 info 、 warning 、 error  和 critical  使用 的 记录器 它们 只 调用 根 记录器的 同名 方法
 功能 和 方法 具有相同的 签名
 根 记录器的 名称 在 记录 的 输出 中 打印 为 root 
 当然 可以将 消息 记录 到 不同 的地方
 软件包 中 的 支持 包含 用于将 日志消息 写入文件、 http  getpost  位置、 通过 smtp  发送 电子邮件、 通 用 套接字、 队列 或 特定于 操作系统的 日志记录 机制 如 syslog  或 windows  nt  事件 日志
 目标 由 handler  类提供
 如果你 有任何 内置 处理程序 类 未 满足 的 特殊 要求 则 可以创建 自己的 日志 目标 类
 默认情况下 没有 为 任何 日志记录 消息 设置 目标
 你可以使用 basicconfig  指定 目标 例如 控制台 或 文件 如 教程 示例中 所示
 如果你 调用函数 debug 、 info 、 warning 、 error  和 critical  他们 将 检查 是否有 设置 目 的 地 如果没有 设置 它们将 在 委托给 根 记录器 进行 实际 的 消息 输出 之前 设置 目标 为 控制台 sys
stderr  和 默认 格式 的 显示 消息
 由 basicconfig  设置 的 消息 默认 格式 为 severitylogger  namemessage  你可以通过 使用 format  参数 将 格式字符串 传递给 basicconfig  来 更改 此 设置
 有关 如何 构造 格式字符串 的 所有 选项 请参阅 格式 器对象
 记录 流程
 记录器 和 处理程序 中 的 日志 事件 信息 流程 如 下 图 所示
 图片
 记录器
 处理程序
handler  对象 负责 将 适当的 日志消息 基于 日志消息 的 严重 性 分 派 给 处理程序 的 指定 目标
 logger  对象 可以使用 addhandler  方法 向 自己 添加 零 个或多个 处理程序 对象
 作为 示例 场景 应用程序 可能 希望 将所有 日志消息 发送到 日志 文件 将 错误 或更高 的 所有 日志消息 发送到 标准输出 以及 将所有 关键 消息发送 至 一个 邮件 地址
 此 方案 需要 三个 单独的 处理程序 其中每 个处理程序 负责 将 特定 严重 性 的 消息发送 到 特定 位置
 标准库 包含 很多 处理程序 类型 参见 有用的 处理程序 教程 主要 使用 streamhandler  和 filehandler 
 处理程序 中 很 少有 方法 可 供 应用程序 开发人员 使用
 与 使用内置 处理程序 对象 即 不 创建 自定义 处理程序 的 应用程序 开发人员 相关 的唯一 处理程序 方法 是 以 下 配置 方法 setlevel  方法 就像 在 记录器 对象 中 一样 指定 将 被 分 派 到 适当 目标 的 最低 严重 性
 为什么 有两个 setlevel  方法？ 记录器 中 设置 的 级别 确定 将 传递给 其 处理程序 的 消息 的 严重 性
 每个 处理程序 中 设置 的 级别 确定 处理程序 将 发送 哪些 消息
 setformatter  选择 一个 该 处理程序 使用 的 formatter  对象
 addfilter  和 removefilter  分别 在 处理程序 上 配置 和 取消 配置 过滤 器对象
 应用程序 代码 不应 直接 实例化 并 使用 handler  的 实例
 相反 handler  类 是一个 基类 它 定义了 所有 处理程序 应该 具有 的 接口 并 建立 了 子类 可以使用 或 覆盖 的一些 默认行为
 格式化程序
 格式化程序 对象 配置 日志消息 的 最终 顺序、 结构 和 内容
 与 logging
handler  类 不同 应用程序 代码 可以 实例化 格式化程序 类 但 如果 应用程序 需要 特殊 行为 则 可能会 对 格式化程序 进行 子类化
 构造函数 有 三个 可选参数—— 消息 格式字符串、 日期 格式字符串 和 样式 指示 符
initfmtnone  datefmtnone  style  如果没有 消息 格式字符串 则 默认使用 原始 消息
 如果没有 日期 格式字符串 则 默认 日期 格式 为 ymd  hms  最后 加上 毫 秒数
 style  是％ 或 之一
 如果未指定 其中一个 则 将 使用％
 如果 style  是％ 则 消息 格式字符串 使用 dictionary  keys  样式 字符串 替换 可能的 键值 在 logrecord  属性 中
 如果 样式 为 则 假定 消息 格式字符串 与 str
format  使用 关键字参数 兼容 而 如果 样式 为 则 消息 格式字符串 应 符合 string
substitute 
 在3
2 版更改 添加 style  形参
 以 下 消息 格式字符串 将 以 人 类 可读的 格式 记录 时间、 消息 的 严重 性 以及 消息 的内容 按 此 顺序 asctimes  levelnames  messages  格式化程序 使用 用户可 配置 的 函数 将 记录 的 创建 时间 转换为 元组
 默认情况下 使用 time
localtime  要 为 特定 格式化程序 实例 更改 此 项 请 将 实例 的 converter  属性 设置为 具有相同 签名 的 函数 time
localtime  或 time
gmtime 
 要 为所有 格式化程序 更改 它 例如如果 你希望 所有 记录 时间 都 以 gmt  显示 请 在 格式化程序 类 中 设置 converter  属性 对 于 gmt  显示 设置为 time
gmtime 
 配置 日志记录
 开发者 可以通过 三 种方式 配置 日志记录1
 使用 调用 上 面列出的 配置 方法 的 python  代码 显式 创建 记录器、 处理程序 和 格式化程序
 创建 日志 配置文件 并 使用 fileconfig  函数 读取 它
 创建 配置 信息 字典 并将其 传递给 dictconfig  函数
 有关 最后 两个 选项 的 参考 文档 请参阅 配置 函数
 以下示例 使用 python  代码 配置 一个 非常 简单的 记录器 一个 控制台 处理程序 和 一个简单的 格式化程序 import  logging  create  logger  logger  logging
criticalcritical  message  从 命令行 运行 此模块 将 生成 以 下 输出 python  simpleloggingmodule
py 20050319151026618 simpleexample  debug  debug  message 20050319151026620 simpleexample  info  info  message 20050319151026695 simpleexample  warning  warn  message 20050319151026697 simpleexample  error  error  message 20050319151026773 simpleexample  critical  critical  message  以 下 python  模块 创建 的 记录器、 处理程序 和 格式化程序 几乎 与 上 面列出的 示例中 的 相同 唯一的 区别 是 对象 的 名称 import  logging  import  logging
criticalcritical  message  这是 logging
conf  文件 loggers  keysrootsimpleexample  handlers  keysconsolehandler  formatters  keyssimpleformatter  loggerroot  leveldebug  handlersconsolehandler  loggersimpleexample  leveldebug  handlersconsolehandler  qualnamesimpleexample  propagate 0 handlerconsolehandler  classstreamhandler  leveldebug  formattersimpleformatter  argssys
stdout  formattersimpleformatter  formatasctimes  names  levelnames  messages  datefmt  输出 几乎 与 不 基于 配置文件 的 示例 相同 python  simpleloggingconfig
py 20050319153855977 simpleexample  debug  debug  message 20050319153855979 simpleexample  info  info  message 20050319153856054 simpleexample  warning  warn  message 20050319153856055 simpleexample  error  error  message 20050319153856130 simpleexample  critical  critical  message  你可以 看到 配置文件 方法 比 python  代码 方法 有一些 优 势 主要 是 配置 和 代码 的 分 离 以及 非 开发者 轻松 修改 日志记录 属性 的能力
 警告 fileconfig  函数 接受一个 默认 参数 disableexistingloggers  出 于 向后兼容 的原因 默认为 true 
 这 可能是 你想要 的 也可能 不 是 你想要 的因为 除非 在 配置 中 明确 命名 它们 或 一个 上 级 节点 中 否则 它 将导致 在 fileconfig  调用 之前 存在的 任何 非 root  记录器 被 禁用
 有关 更多信息 请参阅 参考 文档 如果需要 请 为 此 参数指定 false 
 传递给 dictconfig  的字典 也可以 用 键 disableexistingloggers  指定一个 布尔值 如果没有 在 字典中 明确 指定 也 默认 被解释 为 true 
 这 会导致 上 面 描述 的 记录器 禁用 行为 这 可能不 是 你想要 的—— 在这种情况下 明确 地 为 键 提供 false  值
 请注意 配置文件 中 引用 的 类 名称 需要 相对于 日志记录 模块 或者 可以使用 常规 导入机制 解析 的绝对值
 因此你 可以使用 watchedfilehandler  相对于 日志记录 模块 或 mypackage
myhandler  对 于 在 mypackage  包 中定义的 类 和 模块 mymodule  其 中 mypackage  在 python  导入 路径 上可用
 在 python 3
2 中 引入了 一种 新 的 配置 日志记录 的 方法 使用 字典 来 保存 配置 信息
 这 提供了 上述 基于 配置文件 方法 的功能 的 超 集 并且 是 新 应用程序 和 部 署 的 推荐 配置 方法
 因为 python  字典 用 于 保存 配置 信息 并且 由 于 你可以使用 不同 的方式 填充 该 字典 因此你 有 更多的 配置 选项
 例如 你可以使用 json  格式 的 配置文件 或者如果 你 有权 访问 yaml  处理 功能 则 可以使用 yaml  格式 的 文件 来 填充 配置字典
 当然 你可以在 python  代码中 构造 字典 通过 套接字 以 pickle  形式 接收 它 或者 使用 对 你 的 应用程序 合理的 任何 方法
 以下是 与 上述 相同 配置 的 示例 采用 yaml  格式 用 于 新 的 基于 字典 的 方法 version 1 formatters  simple  format  asctimes  names  levelnames  messages  handlers  console  class  logging
stdout  loggers  simpleexample  level  debug  handlers  console  propagate  no  root  level  debug  handlers  console  有关 使用 字典 进行 日志记录 的 更多信息请参阅 配置 函数
 如果没有 提供 配置 会发生 什么
 如果未 提供 日志记录 配置 则 可能 出现 需要 输出 日志记录 事件 但 无法 找到 输出 事件 的 处理程序 的 情况
 在 这 些情况下 日志 包 的 行为 取决于 python  版本
 对 于3
2 之前的 python  版本 行为 如 下 如果 logging
raiseexceptions  为 false  生产 模式 则 会 以 静默 方 式 丢弃 该 事件
 如果 logging
raiseexceptions  为 true  开发模式 则 会打印 一条 消息 无法 找到 记录器 x
z  的 处理程序
 在 python 3
2 及 更高 版本中 行为 如 下 事件 使用 最后 的 处理程序 输出 存储在 logging
lastresort  中
 这 个 内部 处理程序 与 任何 记录器 都 没有 关联 它 的作用 类似于 streamhandler  它 将 事件 描述 消息 写入 sys
stderr  的当前 值 因此 服 从 任何 可能的 重 定 向 影响
 没有 对 消息 进行 格式化—— 只 打印 裸 事件 描述 消息
 处理程序 的 级 别 设置为 警告 因此 将 输出 此 级别 和 更高 级别 的 所有 事件
 要 获得3
2 之前的 行为 logging
lastresort  可以 设置为 none 
 配置 库 的日志记录
 日志 级别
 日志记录 级别 的 数值 在 下 表 中 给出
 如果你想要 定义 自己的 级别 并且 需要 它们 具有 相对于 预定义 级别 的特定 值 那么 这些 内容 可能是 你 感兴趣的
 如果你 定义 具有相同 数值 的 级别 它 将 覆盖 预定义 的 值 预定义 的 名称 丢失
 级别 数值 critical 50 error 40 warning 30 info 20 debug 10 notset 0 级别 也可以 与 记录器 相关联 由 开发人员 设置或 通过 加载 已 保存 的日志记录 配置
 在 记录器 上调用 日志记录 方法 时 记录器 会将其 自己的 级别 与 与 方法调用 关联的 级别 进行比较
 如果 记录器的 级别 高 于 方法调用 的 级别 则 实际上 不 会生成 任何 记录消息
 这是 控制 日志记录 输出 详细 程度 的基本 机制
 记录消息 被 编码 为 logrecord  类的实例
 当 记录器 决定 实际 记录 事件 时 从 记录消息 创建 logrecord  实例
 记录消息 通过使用 handlers  进行 调度 机制 它们是 handler  类 的 子 类的实例
 处理程序 负责 确保 记录 的 消息 以 logrecord  的形式 最终 位 于特定 位置 或 一 组 位置 这 对 该 消息 的 目标 受 众 例如 最终 用户、 支持 服务 台 员 工、 系统 管理 员、 开发人员
 传递 处理程序 用 于特定 目标 的 logrecord  实例
 每个 记录器 可以 有 零 个、 一个或多个 与 之 关联的 处理程序 通过 logger  的 addhandler  方法
 除了 与 记录器 直接 关联的 任何 处理程序 之外 还 调用 与 记录器的 所有 祖 先 相关联 的 所有 处理程序 来 分 派 消息 除非 记录器的 propagate  标志 设置为 false  值 这 将 停止 传递 到 上 级 处理程序
 就像 记录器 一样 处理程序 可以 具有与 它们 相关联 的 级别
 处理程序 的 级别 作为 过滤器 其 方式 与 记录器 级别 相同
 如果 处理程序 决定 调度 一个事件 则 使用 emit  方法 将 消息发送 到 其 目标
 大多数 用户定义的 handler  子类 都 需要 重载 emit 
 自定义 级别
 定义 你自己的 级别 是 可能的 但 不一定 是 必要的 因为 现有 级别 是 根据 实 践 经 验 选择 的
 但是 如果你 确 信 需要 自定义 级别 那么 在 执行 此操作 时 应 特别 小 心 如果你 正 在 开发 库 则 定义 自定义 级别 可能是 一个 非常 糟 糕 的 主 意
 这 是因为 如果 多个 库 作者 都 定义了 他们 自己的 自定义 级别 那么 使用 开发人员 很 难 控制 和 解释 这些 多个 库 的日志记录 输出 因为 给定的 数值 可能 意味着 不同的 东西 对 于 不同的 库
 有用的 处理程序
 记录 日志 中 引发的异常
 日志 包 设计 为 忽略 记录 日志 生产 时发生 的 异常
 这样 处理 日志记录 事件 时发生 的 错误 例如 日志记录 错误 配置、 网络 或其他 类似 错误 不 会导致 使用 日志记录 的 应用程序 过 早 终止
systemexit  和 keyboardinterrupt  异常 永远不 会被忽略
 在 handler  子类 的 emit  方法 中 发生 的其他 异常 被传递给 它 的 handleerror  方法
handler  中 默认 实现 的 handleerror  检查 是否 设置了 模块级 变量 raiseexceptions 
 如果有 设置 则 会 将 跟踪 打印到 sys
stderr 
 如果未 设置 则 忽略 异常
 注解 raiseexceptions  默认值 是 true
 这 是因为 在 开发 期间 你 通常 希望 收 到 任何 发生异常 的 通知
 建议 你 将 raiseexceptions  设置为 false  以 供 生产 环境 使用
 使用 任意 对象作为 消息
 优化
argparse  教程
 作者 tshepang  lekhonkhobe  这篇 教程 旨在 作为 argparse  的 入门 介绍 此模块 是 python  标准库中 推荐的 命令行 解析 模块
 注解 还有 另外 两个 模块可以 完成 同样的 任务 称为 getopt  对应于 c  语言中 的 getopt  函数 和 被弃用 的 optparse
 还要注意 argparse  是基于 optparse  的因此 用 法 与 其 非常 相似
 概念
 让我们 利用 ls  命令 来 展示 我们将 要 在 这篇 入门 教程 中 探 索 的功能 ls  cpython  devguide  prog
 我们可以 从 这 四个 命令 中 学 到 几个 概念 ls  是一个 即使 在 运行 的时候 没有提 供 任何 选项 也 非常有用 的 命令
 在 默认情况下 他 会 输出 当前 文件 夹 包含的 文件 和 文件 夹
 如果我们 想要 使用 比 它 默认 提供 的更多 功能 我们 需要 告诉 该 命令 更多信息
 在 这个例子 里 我们 想要 查看 一个 不同的 目录 pypy
 我们 所 做 的 是 指定 所 谓 的 位置参数
 之 所 以这样 命名 是因为 程序 应该 如何处理 该参数 值 完全 取 决于 它 在命令行 出现的 位置
 更 能 体 现 这 个 概念 的 命令 如 cp  它 最 基本 的 用 法 是 cp  src  dest
 第一个 位置参数 指 的 是 你想要 复制 的 第二个 位 置参数 指 的 是 你想要 复制 到 的 位置
 现 在 假设 我们 想要 改变 这 个 程序 的 行为
 在 我们 的 例子中 我们 不 仅仅 只是 输 出 每个 文件 的文件名 还 输出 了 更多信息
 在 这个例子 中 l  被称为 可选 参数
 这是 一段 帮助 文档 的 文 字
 它 是 非常有用 的因为 当你 遇到 一个 你 从未 使用 过 的 程序 时 你可以通过 阅读 它 的 帮助 文档 来 弄 清楚 它 是如何 运行 的
 基础
 位置参数 介绍
 可选参数 介绍
 到 目前 为止 我们 一 直 在 研 究 位置参数
 让我们 看 看 如何 添加 可选的 import  argparse  parser  argparse
verbosity  printverbosity  turned  on  和 输出 python 3 prog
py  error  argument  verbosity  expected  one  argument  程序 运行 情况 如 下 这 一 程序 被设计为 当 指定 verbosity  选项 时 显示 某些 东西 否则 不 显示
 不 添加 这 一 选项 时 程序 没有 提示 任何 错误 而 退出 表明 这 一 选项 确实 是可选的
 注意如果 一个 可选参数 没有 被使用 时 相关 变量 被赋值 为 none  在 此 例 中 是 args
verbosity  这 也就是 为什么 它 在 if  语句中 被当作 逻辑 假
 帮助 信息 有 点 不同
 使用 verbosity  选项 时 必须 指定一个 值 但 可以是任何 值
 上述 例子 接受 任何 整数值 作为 verbosity  的 参数 但 对 于 我们 的简单 程序 而言 只 有两个 值 有 实际 意义 true  或者 false
 让我们 据 此 修改 代码 import  argparse  parser  argparse
verbose  printverbosity  turned  on  和 输出 python 3 prog
py  h  verbose  optional  arguments  h  help  show  this  help  message  and  exit  verbose  increase  output  verbosity  程序 运行 情况 如 下 现 在 这 一 选项 更多 地 是一个 标志 而非 需要 接受一个 值 的 什么 东西
 我们 甚 至 改变 了 选项 的名字 来 符合 这 一 思 路
 注意 我们 现 在 指定了 一个新的 关键 词 action  并 赋值为 storetrue
 这意味着 当 这 一 选项 存 在 时 为 args
verbose  赋值为 true
 没有 指定 时 则 隐 含 地 赋值为 false
 当你 为 其 指定一个 值 时它会 报 错 符合 作为 标志 的 真正 的 精 神
 留 意 不同的 帮助 文 字
 短 选项
 如果你 熟悉 命令行 的 用 法 你 会 发 现 我 还没 讲 到 这 一 选项 的 短 版本
 这 也 很 简单 import  argparse  parser  argparse
verbose  printverbosity  turned  on  效果 就 像这样 python 3 prog
py  h  v  optional  arguments  h  help  show  this  help  message  and  exit  v  verbose  increase  output  verbosity  可以 注意 到 这 一 新 的能力 也 反 映 在 帮助 文本 里
 结合 位置参数 和 可选参数
 进行 一些 小 小 的改进
 如果我们 想 扩展 我们 的 简短 程序 来执行 其他 幂 次 的 运算 而 不仅 是 乘 方 import  argparse  parser  argparse
y  answer  else  printanswer  输出 python 3 prog
py 42 v 4216 请注意 到 目前 为止 我们 一 直 在 使用 详细 级别 来 更改 所 显示 的 文本
 以下示例 则 使用 详细 级别 来 显示 更多的 文本 import  argparse  parser  argparse
y  end  printanswer  输出 python 3 prog
 矛 盾 的 选项
 后 记
 除了 这里 显示 的内容 argparse  模块 还提供了 更多 功能
 它 的 文档 相当 详细 和 完整 包含 大量 示例
 完成 这 个 教程 之后 你应该 能 毫 不 困 难 地 阅读 该 文档
 函数式编程 指 引
 概述
 形式 证明
 一个 理 论 上 的 优点 是 构造 数学 证明 来 说明 函数 式 程序 是 正确的 相对 更容易 些
 很 长时间 研 究 者 们 对 寻找 证明 程序 正确的 数学 方法都 很 感兴趣
 这 和 通过 大量 输入 来 测试 并 得 出 程序 的 输出 基本 正确 或者 阅读 一个 程序 的 源代码 然后 得 出 代码 看起来 没 问题 不同 相反 这里 的 目标 是一个 严格 的 证明 证明 程序 对 所 有可能的 输入 都 能 给出 正确的 结果
 证明 程序 正确 性 所 用 到 的 技术 是 写 出 不变量 也就是 对 于 输入 数据 和 程序中的 变量 永远 为真 的 特性
 然后 对 每 行 代码 你 说明 这 行 代码 执行 前 的 不变量 x  和 y  以及 执行 后 稍 有不同 的 不变量 x  和 y  为真
 如 此 一 直到 程序 结束 这 时候 在 程序 的 输出 上 不变量 应该 会 与 期望的 状态 一致
 函数式编程 之 所 以 要 消除 赋值 是因为 赋值 在这个 技术 中 难以 处理 赋值 可能 会破坏 赋值 前 为真 的 不变量 却 并 不 产生 任何 可以 传递 下 去 的 新 的 不变量
 不幸的是 证明 程序 的 正确 性 很大 程度 上 是 经 验 性 质 的 而且 和 python  软件 无 关
 即使 是 微 不 足 道 的 程序 都 需要 几 页 长 的 证明 一个 中 等 复杂的 程序 的 正确 性 证明 会 非常 庞 大 而且 极 少 甚至 没有 你 日 常 所使用的 程序 python  解释器 xml  解析器 浏览器 的 正确 性 能够 被 证明
 即使 你 写 出 或者 生成一个 证明 验证 证明 也会 是一个 问题 里面 可能 出了 差 错 而 你 错误 地 相 信 你 证明 了 程序 的 正确 性
 模块 化
 易于 调试 和 测试
 测试 和 调试 函数 式 程序 相对 来说 更容易
 调试 很 简单 是因为 函数 通常 都 很小 而且 清晰 明确
 当 程序 无法 工作 的时候 每个 函数 都 是 一个可以 检查 数据 是否 正确的 接 入 点
 你可以通过 查看 中 间 输入和输出 迅 速 找到 出错 的 函数
 测试 更容易 是因为 每个 函数 都 是 单元 测试 的 潜在 目标
 在 执行 测试 前 函数 并 不 依赖于 需要 重 现 的 系统 状态 相反 你 只需要 给出 正确的 输入 然后 检查 输出 是否 和 期望的 结果 一致
 组合 性
 当你 编写 函数 式 风格的 程序 时 你 会 写 出 很多 带 有不同 输入和输出 的 函数
 其 中 一些 不 可 避免 地 会 局 限于 特定的 应用 但 其他的 却 可以 广泛 的 用 在程序中
 举例来说 一个 接受 文件 夹 目录 返回 所有 文件 夹 中 的 xml  文件 的 函数 或 是一个 接受 文件名 然后 返回 文件 内容的 函数 都可以 应用 在 很多 不同的 场合
 久 而 久 之 你 会 形 成一个 个 人 工具 库
 通常 你可以 重新 组织 已有的 函数来 组成 新 的 程序 然后 为当前 的 工作 写 一些 特殊 的 函数
 迭代器
 支持 迭代器 的 数据类型
 我们 已经 知道 列表 和 元组 支持 迭代器
 实际上 python  中的任何 序列类型 比如 字符串 都 自动 支持 创建 迭代器
 对 字典 调用 iter  会返回一个 遍历 字典的键 的 迭代器 m  jan 1 feb 2 mar 3 apr 4 may 5 jun 6
 printkey  mkey  jan 1 feb 2 mar 3 apr 4 may 5 jun 6 jul 7 aug 8 sep 9 oct 10 nov 11 dec 12 注意 从 python 3
7 开始 字典 的 遍历 顺序 一 定 和 输入 顺序 一样
 先前 的 版本 并没有 明确 这一点 所 以 不同的 实现 可能不 一致
 对 字典 使用 iter  总是会 遍历 键 但 字典 也 有 返回 其他 迭代器 的 方法
 如果你 只 遍历 值 或者 键值对 你可以 明确 地调用 values  或 items  方法 得到 合适的 迭代器
dict  构造函数 可以 接受一个 迭代器 然后 返回 一个 有限 的 key  value  元组 的 数据流 l  italy  rome  france  paris  us  washington  dc  dictiterlitaly  rome  france  paris  us  washington  dc  文件 也可以通过 调用 readline  来 遍历 直到 穷 尽 文件 中所有 的 行
 这意味着 你可以 像这样 读取 文件 中 的每一 行 for  line  in  file  do  something  for  each  line 
 集合 可以从 可 遍历 的 对象 获取 内容 也可以 让你 遍历 集合 的 元素 s 23571113 for  i  in  s  printi
 生成器表达式 和 列表推导式
 迭代器 的 输出 有两个 很 常见的 使用 方式1 对 每 一个元素 执行 操作2 选择 一个 符合 条件 的 元素 子集
 比如 给定 一个 字符串列表 你可能 想 去 掉 每个 字符串 尾 部 的 空白字符 或 是 选 出 所有 包含 给定 子 串 的 字符串
 列表推导式 和 生成器表达 时 简 写 listcomps  和 genexps  让 这些 操作 更 加 简 明 这 个 形式 借 鉴 自 函数 式 程序 语言 haskellhttpswww
org
 你可以用 以下代码 去 掉 一个字符串 流 中的所有 空白字符 linelist  line 1 n  line 2 n 
strip  for  line  in  linelist  你可以 加上 条件 语句 if  来 选 取 特定的 元素 strippedlist  line
strip  for  line  in  linelist  if  line  通过 列表推导式 你 会 获得 一个 python  列表 strippedlist  就 是一个包含 所有 结果 行 的 列表 并不是 迭代器
 生成器表达式 会返回一个 迭代器 它 在 必要的 时候 计算 结果 避免 一次性 生成 所有的 值
 这意味着 如果 迭代器 返回 一个 无限 数据流 或者 大量 的 数据 列表推导式 就 不太 好 用 了
 这种情况下 生成器表达式 会 更 受 青 睐
 生成器表达式 两 边 使用 圆括号 而 列表推导式 则 使用 方括号
 生成器表达式 的形式 为 expression  for  expr  in  sequence 1 if  condition 1 for  expr 2 in  sequence 2 if  condition 2 for  expr 3 in  sequence 3
 if  condition 3 for  exprn  in  sequencen  if  conditionn  再次 说明 列表推导式 只有 两 边 的 括号 不 一样 方括号 而不是 圆括号
 这些 生成 用 于 输出 的 元素 会 成为 expression  的 后 继 值
 其 中 if  语句 是可选的 如果给定 的话 expression  只会 在 符合 条件 时 计算 并 加入 到 结果 中
 生成器表达式 总是 写 在 圆括号 里面 不 过 也可以 算 上调用 函数 时 用 的 括号
 如果你想 即 时 创建一个 传递给 函数 的 迭代器 可以 这 么 写 objtotal  sumobj
count  for  obj  in  listallobjects  其 中 for
in  语句 包含了 将 要 遍历 的 序列
 这些 序列 并 不 必须 同样 长 因为它们 会 从左 往 右 开始 遍历 而 不 是 同时 执行
 对 每个 sequence 1 中的元素 sequence 2 会 从 头 开始 遍历
sequence 3 会 对 每个 sequence 1 和 sequence 2 的 元素 对 开始 遍历
 换句话说 列表推导式 器 是 和 下面的 python  代码 等价 for  expr 1 in  sequence 1 if  not  condition 1 continue  skip  this  element  for  expr 2 in  sequence 2 if  not  condition 2 continue  skip  this  element 
 这 说明 如果有 多个 for
in  语句 而 没有 if  语句 输出 结果 的长度 就是 所有 序列长度 的 乘 积
 如果你 的两个 列表 长度为3 那么 输出 的 列表 长度 就是9 seq 1 abc  seq 2123 x  y  for  x  in  seq 1 for  y  in  seq 2 a 1 a 2 a 3 b 1 b 2 b 3 c 1 c 2 c 3 为 了 不 让 python  语法 变得 含 糊 如果 expression  会生成 元组 那 这 个 元组 必须 要 用 括号 括 起来
 下面 第一个 列表推导式 语法错误 第二个 则 是 正确的 syntax  error  x  y  for  x  in  seq 1 for  y  in  seq 2 correct  x  y  for  x  in  seq 1 for  y  in  seq 2
 生成器
 向 生成器 传递 值
 内置函数
itertools  模块
itertools  模块包含 很多 常用的 迭代器 以及 用来 组合 迭代器 的 函数
 本节 会 用 些 小 的 例子 来 介绍 这个模块 的内容
 这个模块 里 的 函数 大致 可以 分 为 几 类 从 已有的 迭代器 创建新的 迭代器 的 函数
 接受 迭代器 元素 作为参数 的 函数
 选 取 部分 迭代器 输出 的 函数
 给 迭代器 输出 分组 的 函数
 创建新的 迭代器
countstart  step  返回 一个 等 分 的 无限 数据流
 初始 值 默认为0 间隔 默认为1 你 也 选择 可以指定 初始 值 和 间隔 itertools
cycleiter  保存 一份 所提供的 可迭代对象 的副本 并返回一个 能 产生 整个 可迭代对象 序列 的 新 迭代器
 新 迭代器 会 无限 重复 这些 元素
 itertools
repeatelem  n  返回 n  次 所提供的 元素 当 n  不存在 时返回 无 数 次 所提供的 元素
 接受 任意 数量的 可迭代对象 作为 输入 首先 返回 第一个 迭代器 的所有元素 然后 是 第二个 的所有元素 如 此 一 直 进行 下 去 直到 消耗 掉 所有 输入 的可迭代对象
isliceiter  start  stop  step  返回 一个 所 输入 的 迭代器 切片 的 数据流
 如果 只 单独 给定 stop  参数 的话 它 会返回 从 起始 算 起 stop  个 数量的 元素
 如果你 提供了 起始 下 标 start  你 会 得到 stopstart  个元素 如果你 给定 了 step  参数 数据流 会 跳过 相应的 元素
 和 python  里 的 字符串 和 列表 切片 不同 你 不 能 在 start  stop  或者 step  这些参数 中 使用 负数
 itertools
teeiter  n  可以 复制 一个迭代器 它 返回 n  个 能够 返回 源 迭代器 内容的 独立 迭代器
 如果你不 提供 参数 n  默认值为2
 复制 迭代器 需要 保存 源 迭代器 的一部分 内容 因此在 源 迭代器 比较 大 的时候 会显 著 地 占 用 内存 同时 在所有 新 迭代器 中 有 一个迭代器 会 比 其他 迭代器 占 用 更多的 内存
 对 元素 使用 函数
operator  模块包含 一 组 对应于 python  操作符 的 函数
 比如 operator
adda  b  把 两个 数 加 起来 operator
nea  b  和 a  b  相同 以及 operator
attrgetterid  返回 获取
id  属性 的可调用对象
starmapfunc  iter  假定 可迭代对象 能够 返回 一个元组 的 流 并且 利用 这些 元组 作为参数 来 调用 func  itertools
 选择 元素
 另外 一系列 函数 根据 谓 词 选 取 一个迭代器 中 元素 的 子集
filterfalsepredicate  iter  和 filter  相反 返回 所有 让 predicate  返回 false  的 元素 itertools
takewhilepredicate  iter  返回 一 直 让 predicate  返回 true  的 元素
 一旦 predicate  返回 false  迭代器 就 会发出 终止 结果的 信号
 def  lessthan 10 x  return  x 10 itertools
dropwhilepredicate  iter  在 predicate  返回 true  的时候 丢弃 元素 并且 返回 可迭代对象 的 剩余 结果
 itertools
compressdata  selectors  接受 两个 迭代器 然后 返回 data  中 使 相应地 selector  中的元素 为真 的 元素 它会在 任 一个迭代器 耗 尽 的时候 停止 itertools
 组合 函数
itertools
combinationsiterable  r  返回 一个迭代器 它 能 给出 输入 迭代器 中 所 包含的 元素 的 所 有可能的 r  元 元组 的 组合
 itertools
combinations 123453123124125134135145234235245345 每个 元组 中的元素 保持 着 可迭代对象 返回 他们 的顺序
 例如 在 上面的例子 中 数字1 总是会 在234 或5 前面
 一个类似 的 函数 itertools
permutationsiterable  rnone  取消 了 保持 顺序 的 限制 返回 所 有可能的 长度为 r  的 排列 itertools
54321 如果你不 提供 r  参数 的 值 它 会 使用 可迭代对象 的长度 也就是说 会 排列 所有的 元素
 注意 这些函数 会 输出 所 有可能的 位置 组合 并 不 要求 可迭代对象 的内容 不 重复 itertools
permutationsaba 3 a  b  a  a  a  b  b  a  a  b  a  a  a  a  b  a  b  a  同 一个元组 a  a  b  出现 了 两次 但是 两个 a  字符 来自 不同的 位置
itertools
combinationswithreplacementiterable  r  函数 放 松 了 一个 不同的 限制 元组 中的元素 可以 重复
 从 概念 讲 为每个 元组 第一个 位置 选 取 一个元素 然后 在 选择 第二个 元素 前 替换 掉 它
 itertools
 为 元素 分组
 我 要 讨论 的最后一个 函数 itertools
groupbyiterkeyfuncnone  是 最 复杂的 函数
 keyfuncelem  是 一个可以 对 迭代器 返回 的 每个元素 计算 键值 的 函数
 如果你不 提供 这 个 键值 函数 它 就会 简化 成 每个元素 自身
groupby  从 所 依 据 的可迭代对象 中 连续 地 收集 具有相同 值 的 元素 然后 返回 一个 长度为2 的 元组 的 数据流 每个 元组 包含 键值 以及 对 应 这 个 键值 的 元素 所 组成的 迭代器
 where  iterator 1 decatur  al  huntsville  al  selma  al  iterator 2 anchorage  ak  nome  ak  iterator 3 flagstaff  az  phoenix  az  tucson  azgroupby  假定 了 所 依 据 的可迭代对象 的内容 已经 根据 键值 排序
 注意 返回 的 迭代器 也会 使用 所 依 据 的可迭代对象 所 以 在 请求 迭代器2 和 相应的 键 之前 你必须 先 消耗 迭代器1 的结果
functools  模块
python 2
5 中 的 functools  模块包含 了一些 高阶 函数
 高阶 函数 接受 一个或多个 函数 作为 输入 返回 新的函数
 这个模块 中 最 有用的 工具 是 functools
partial  函数
 对 于 用 函数 式 风格 编写 的 程序 有 时 你 会 希望 通过 给定 部分 参数 将 已有的 函数 构 变 形 称 新的函数
 考虑 一个 python  函数 fa  b  c  你希望 创建一个 和 f 1 b  c  等价 的 新 函数 gb  c  也就是说 你 给定 了 f  的 一个参数 的 值
 这 就是 所 谓 的部分 函数 应用
partial  接受 参数 function  arg 1 arg 2
 kwarg 1 value 1 kwarg 2 value 2
 它 会返回一个 可调用 的 对象 所 以 你 能够 直接调用 这 个 结果 以 使用 给定 参数 的 function
 这里有 一个 很小 但 很 现 实 的 例子 import  functools  def  logmessage  subsystem  write  the  contents  of  message  to  the  specified  subsystem
reducefunc  iter  initialvalue  持续 地 在 可迭代对象 的所有元素 上 执行 操作 因此它 不 能够 用 在 无限 的可迭代对象 上
func  必须是一个 接受 两个 元素 并返回一个 值 的 函数
functools
reduce  接受 迭代器 返回 的 前 两个 元素 a  和 b  并 计算 funca  b 
 然后 它 会 请求 第三个 元素 c  计算 funcfunca  b  c  然后 把 这 个 结果 再 和 第 四个 元素 组合 并返回 如 此 继续 下 去 直到 消耗 整个 可迭代对象
 如果 输入 的可迭代对象 完全不 返回 任何 值 typeerror  异常 就 会抛出
 如 果提供了 初 值 initial  value  它 会 被用作 起始 值 也就是 先 计算 funcinitialvalue  a 
 import  operator  functools  functools
mul 11 如果你 在 functools
reduce  中 使用 operator
add  你 就 会把 可迭代对象 中 的所有元素 加 起来
 这种情况 非常 常见 所 以 python  有 一个特殊 的 内置函数 sum  import  functools  operator  functools
add 1234010 sum 123410 sum 0 不 过 对 于 很多 使用 functools
reduce  的 情 形 使用 明显 的 for  循环 会 更 清晰 import  functools  instead  of  product  functools
mul 1231 you  can  write  product 1 for  i  in 123 product  i  一个 相关的 函数 是 itertools
accumulateiterable  funcoperator
 它 执行 同样的 计算 不 过 相对于 只 返回 最终 结果 accumulate  会返回一个 迭代器 来 输出 所有 中 间 结果 itertools
operator  模块
 前面 已经 提 到 了 operator  模块
 它包含 一系列 对应于 python  操作符 的 函数
 在 函数 式 风格 的代码中 这些函数 通常 很有用 可以 帮 你 省 下 不 少 时间 避免 写 一些 琐 碎 的 仅仅 执行 一个简单 操作 的 函数
 这个模块 里 的一些 函数 数学 运算 addsubmulfloordivabs 
 逻辑运算 nottruth
 位运算 andorinvert
 比较 eqneltlegt  和 ge
 确 认 对象 isisnot
 全部 函数 列表 可以 参考 operator  模块的文档
 小 函数 和 lambda  表达式
 编写 函数 式 风格 程序 时 你 会 经常 需要 很小 的 函数 作为 谓 词 函数 或者 以 某 种方式来 组合 元素
 如果 合适的 python  内置的 或者 其他模块 中的函数 你 就 一点 也 不需要 定义 新的函数 strippedlines  line
exists  filelist  如果 不存在 你需要 的 函数 你 就必须 自己 编写
 一个 编写 小 函数 的 方式是 使用 lambda  表达式
lambda  接受一 组 参数 以及 组合 这些参数 的 表达式 它 会创建一个 返回 表达式 值 的 匿名 函数 adder  lambda  x  y  xy  printassign  lambda  name  value  name  strvalue  另一种 替代 方案 就是 通常 的 使用 def  语句 来 定义 函数 def  adderx  y  return  x  y  def  printassignname  value  return  name  strvalue  哪 一种 更 受 青 睐 呢？ 这是一个 风格 问题 我 通常 的做法是 避免 使用 lambda
 我 这 么 偏 好 的 一个 原因 是 lambda  能够 定义 的 函数 非常 受限
 函数 的结果 必须 能够 作为 单独的 表达式 来 计算 这意味着 你 不 能 使用 多 路 if
else  比较 或者 try
 except  语句
 如果你 尝试 在 lambda  语句中 做 太 多 事情 你 最终 会把 表达式 过 于 复杂 以 至 于 难以 阅读
 你 能 快速 的 说 出 下面的 代码 做 了 什么 事情 吗？ import  functools  total  functools
reducelambda  a  b 0 a 1 b 1 items 1 你可以 弄 明 白 不 过 要 花 上 时间 来 理 清 表达式 来 搞 清楚 发生了 什么
 使用 一个 简短 的 嵌套的 def  语句 可以让 情况 变得 更好 import  functools  def  combinea  b  return 0 a 1 b 1 total  functools
reducecombine  items 1 如果我 仅仅 使用 一个 for  循环 会 更好 total 0 for  a  b  in  items  total  b  或者 使用内置 的 sum  和 一个 生成器表达式 total  sumb  for  a  b  in  items  许多 使用 functools
reduce  的 情 形 可以更 清晰 地 写成 for  循环 的形式
fredrik  lundh  曾 经 建议 以 下 一 组 规则 来 重 构 lambda  的 使用1
 写 一个 lambda  函数
 写 一 句 注释 来 说明 这 个 lambda  究 竟 干 了 什么
 研 究 一 会 这 个 注释 然后 想 出 一个 抓 住 注释 本 质 的名字
 用这个 名 字 把 这 个 lambda  改 写成 def  语句
 把 注释 去 掉
 我 非常 喜欢 这些 规则 不 过 你 完全 有权 利 争 辩 这种 消除 lambda  的 风格 是 不 是 更好
 修 订 记录 和 致谢
 作者 要 感谢 以下人 员 对 本文 各种 草 稿 给 予 的 建议 更 正 和协 助 ianbickingnick  coghlan  nick  efford  raymond  hettinger  jim  jewett  mikekrellleandro  lameiro  jussi  salmela  collin  winter  blake  winton
0
1 版2006 年6 月30 日 发布
0
11 版2006 年7 月1 日 发布
 修正 拼 写 错误
0
2 版2006 年7 月10 日 发布
 将 genexp  与 listcomp  两 节 合 二 为 一
 修正 拼 写 错误
0
21 版 加入 了 tutor  邮件列表 中 建议 的更多 参考 文件
0
30 版 添加了 有关 functional  模块 的 小节 由 collin  winter  撰写 添加了 有关 operator  模块 的 简短 小节 其他 少 量 修改
 引用 文 献
 通 用 文 献
structure  and  interpretation  of  computer  programs  harold  abelsongerald  jay  sussman  和 julie  sussman  著
 全 文 可 见 httpsmitpress
edusicp 
 在 这 部 计算机 科学 的 经 典 教 科 书 中 第二 和 第三 章 讨论 了 使用 序列 和 流 来 组织 程序 内部 的 数据 传递
 书 中 的 示例 采用 scheme  语言 但 其 中 这些 章节 中描述的 很多 设计 方法 同样 适用于 函数 式 风格的 python  代码
html  一个 使用 java  示例 的 函数式编程 的 总 体 介绍 有 很长 的 历史 说明
orgwikifunctionalprogramming  一般 性 的 函数式编程 的 wikipedia  条目
orgwikicoroutine  协程 条目
orgwikicurrying  函数 柯 里 化 条目
python  相关
cxtpipdavid  mertz  书 中的第 一章 text  processing  inpythonutilizing  higherorder  functions  in  text  processing  标题 部分 讨论 了 文本 处理 的 函数式编程
mertz  还 在 ibm  的 developerworks  站 点 上 针对 函数式编程 撰写 了 一系列 共3 篇 文 章 参见 part 1 part 2 和 part 3
python  文档
itertools  模块 文档
functools  模块 文档
operator  模块 文档
pep 289 generator  expressionspep 342 coroutines  via  enhanced  generators  描述了 python 2
5 中 新 的 生成器 特性
 使用 dtrace  和 systemtap  检测 cpython
 作者 david  malcolm  作者ł ukasz  langadtrace  和 systemtap  是 监 控 工具 它们都 提供了一种 检查 计算机 系统上 的 进程 的 方法
 它们都 使用 特定 领 域 的 语言 允许用户 编写 脚本 其 中 进程 监视 的过滤器 从 感兴趣的 进程中 收集 数据 生成 有关 数据 的 报告 从 python 3
6 开始 cpython  可以使用 嵌入式 标记 构建 也 称为 探 测 器 可以通过 dtrace  或 systemtap  脚本 观 察 从而 更容易 监视 系统上 的 cpython  进程 正 在 做 什么
cpython  implementation  detail  dtrace  标记 是 cpython  解释器 的 实现细节
 不保证 cpython  版本 之间的 探 针 兼容性
 更改 cpython  版本 时 dtrace  脚本 可能会 停止 工作 或 无法 正常 工作 而不会 发出 警告
 启用 静态 标记
macos  内置 了 对 dtrace  的 支持
 在 linux  上 为 了 使用 systemtap  的 嵌入式 标记 构建 cpython  必须 安装 systemtap  开发 工具
 在 linux  机器 上 这可以通过 yum  install  systemtapsdtdevel  或者 sudo  aptget  install  systemtapsdtdev  然后 必须 将 cpython  配置 为 withdtrace  checking  for  withdtrace
 yes  在 macos  上 您 可以通过在 后 台 运行 python  进程 列出 可用的 dtrace  探 测 器 并 列出 python  程序 提供的 所有 探 测 器 python 3
6 maybedtraceline  line  在 linux  上 您 可以通过 查看 是否 包含
stapsdt  部分 来 验证 构建 的 二进制文件 中 是否 存 在 systemtap  静态 标记
stapsdt  note 000000000000000000308 d 78 如果您 已 将 python  构建 为 共享库 使用 enableshared  则需要 在 共享库 中查找
 例如 readelf  s  libpython 3
stapsdt  note 000000000000000000365 b 68 足够 现 代 的 readelf  命令 可以 打印 元数据 readelf  n 
32 displaying  notes  found  at  file  offset 0 x 00000274 with  length 0 x 00000024 owner  data  size  description  gnu 0 x 00000014 ntgnubuildid  unique  build  id  bitstring  build  id  df 924 a 2 b 08 a 7 e 89 f 6 e 11251 d 4602022977 af 2670 displaying  notes  found  at  file  offset 0 x 002 d 6 c 30 with  length 0 x 00000144 owner  data  size  description  stapsdt 0 x 00000031 ntstapsdt  systemtap  probe  descriptors  provider  python  name  gcstart  location 0 x 00000000004371 c 3 base 0 x 0000000000630 ce 2 semaphore 0 x 00000000008 d 6 bf 6 arguments 4 ebx  stapsdt 0 x 00000030 ntstapsdt  systemtap  probe  descriptors  provider  python  name  gcdone  location 0 x 00000000004374 e 1 base 0 x 0000000000630 ce 2 semaphore 0 x 00000000008 d 6 bf 8 arguments 8 rax  stapsdt 0 x 00000045 ntstapsdt  systemtap  probe  descriptors  provider  python  name  functionentry  location 0 x 000000000053 db 6 c  base 0 x 0000000000630 ce 2 semaphore 0 x 00000000008 d 6 be 8 arguments 8 rbp 8 r 124 eax  stapsdt 0 x 00000046 ntstapsdt  systemtap  probe  descriptors  provider  python  name  functionreturn  location 0 x 000000000053 dba 8 base 0 x 0000000000630 ce 2 semaphore 0 x 00000000008 d 6 bea  arguments 8 rbp 8 r 124 eax  上述 元数据 包含 systemtap  的 信息 描述 如何 修 补 策略 性 放置 的 机器 代码 指令 以 启用 systemtap  脚本 使用 的 跟踪 钩子
 静态 dtrace  探 针
 静态 systemtap  标记
 使用 systemtap  集成 的 底层 方法 是 直接使用 静态 标记
 这 需要 你 显式地 说明 包含 它们的 二进制文件
 例如 这 个 systemtap  脚本 可以用来 显示 python  脚本 的 调用 返回 层次结构 probe  processpython
markfunctionreturn  filename  userstringarg 1 funcname  userstringarg 2 lineno  arg 3 printfs  s  in  sdn  threadindent 1 funcname  filename  lineno  它可以 这样 调用 stap  showcallhierarchy
py  输出 结果会 像这样11408 python 8274 contains  in  libabcoll
py 366 其中的 列 是 脚本 开始 后 经过 的 微 秒数 可执行文件 的名字 进程 的 pid  其 余部分 则表示 脚本 执行时 的 调用 返回 层次结构
 对 于 enableshared  构建 的 cpython  来说 这些 标记 是 包含在 libpython  共享库 中 的 探 针 的 点 状 路径 需要 反 映 这一点
 比如 上面 例子中 的 这 一 行 probe  processpython
markfunctionentry  应 改 为 probe  processpython
markfunctionentry  假设 是 cpython 3
6 的 调试 构建
 可用的 静态 标记
systemtap  tapsets
 示例
python  常 用 指 引
python  常 用 指 引 的形式 来源 于 linux  文档 项目的 常 用 指 引 章节 是 一系列 独立、 指定 主题 并 尝试 完全 覆盖 该 主题 的 文 章 集合
 致 力 于 提供 比 python  库参考 帮助 更 详 尽 的 文档
 目前 提供了 如 下 指 引 将 python 2 代码 迁 移 到 python 3 将 扩展模块 移植到 python 3 用 python  进行 curses  编程 描述器 使用 指南 函数式编程 指 引 日志 howto  日志 操作 手册 正则表达式 howto  套接字 编程 指南 排序 指南 unicode  指南 howto  使用 urllib  包 获取 网络 资源 argparse  教程 ipaddress  模块 介绍 argument  clinic  howto  使用 dtrace  和 systemtap  检测 cpython
 正则表达式 howto
 作者 a
ca  摘要 本文档 是 在 python  中 使用 re  模块 使用 正则表达式 的 入门 教程
 它 提供了 比 标准库 参考 中 相应 部分 更 平 和 的 介绍
 概述
 正则表达式 称为 re  或 正则 或 正则表达式 模式 本 质 上 是 嵌入 在 python  中 的一种 微 小 的、 高度 专 业 化 的 编程语言 可通过 re  模块 获得
 使用 这种 小 语言 你可以 为 要 匹配 的 可能 字符串 集 指定 规则 此 集 可能包含 英 语句 子 电子邮件 地址 tex  命令 或 你 喜欢 的 任何 内容
 然后 您可以 询 问 诸 如 此 字符串 是否 与 模式 匹配？ 或 此 字符串中的 模式 是否 匹配？ 等 问题
 你 还可以 使用 正则 修改 字符串或 以 各 种方式 将 其 拆分
 正则表达式 模式 被 编译 成 一系列 字节码 然后 由 用 c  编写 的 匹配 引擎 执行
 对 于 高级 用 途 可能需要 特别 注意 引擎 如何 执行 给定的 正则 并 将 正则 写入 以 某 种方式 生成 运行 速度 更快 的 字节码
 本文档 未 涉及 优化 因为它 要求 你 充 分 了解 匹配 引擎 的 内部 结构
 正则表达式 语言 相对 较 小 且 受 限制 因此 并非 所 有可能的 字符串 处理 任务 都 可以使用 正则表达式 完成
 还 有一些 任务 可以 用 正则表达式 完成 但 表达式 变得 非常 复杂
 在 这 些情况下 你 最好 编写 python  代码 来进行 处理 虽然 python  代码 比 精 心 设计 的正则表达式 慢 但它 也可能 更容易 理解
 简单 模式
 我们 首先 要 了解 最简单的 正则表达式
 由 于 正则表达式 用 于 对 字符串 进行 操作 因此 我们将 从 最常见的 任务 开始 匹配字符
 有关 正则表达式 确定性 和 非 确定性 有限 自动 机 的 计算机 科学 的 详细 解释 你可以 参考 几乎所有 有关 编写 编译器 的 教 科 书
 匹配字符
 大多数 字母 和 字符 只会 匹配 自己
 例如 正则表达式 test  将 完全 匹配 字符串 test 
 你可以 启用 一个 不 区分 大小写 的 模式 让 这 个 正则匹配 test  或 test  稍后 会 详细 介绍
 这 条 规则 有 例外 一些 字符 是 特殊 的 metacharacters  并且不 匹配 自己
 相反 它们 表示 应该 匹配 一些 与 众 不同的 东西 或者 通过 重复 它们 或 改变 它们 的含义 来 影响 正则 的其他 部分
 本文档 的大部分 内容 都 致 力 于 讨论 各种 元字符 及其 功能
 这是 元字符 的完整 列表 它们的 意 思 将 在 本 howto  的 其 余部分 讨论
 我们将 看到 的第一个 元字符 是 和
 它们 用 于 指定 字符 类 它 是 你希望 匹配 的 一 组 字符
 可以 单独 列出 字符 也可以通过 给出 两个 字符 并 用 标记 将它们 分开 来表示 一系列 字符
 例如 abc  将 匹配任何 字符 a 、 b  或 c  这 与 ac  相同 它 使用 一个 范围 来表示 同一 组 字符
 如果你 只 想 匹配 小写字母 你 的 正则 是 az 
 字符类中 的 元字符 不 生效
 例如 akm  将匹配 a  k 、 m  或 中 的 任意 字符 通常是 一个 元字符 但 在 一个 字符类中 它 被 剥 夺 了 特殊 性
 你可以通过 以 下方式 匹配 complementing  设置 的 字符类中 未 列出的 字符
 这 通过 包含一个 作为 该类的 第一个 字符 来表示
 例如5 将匹配 除5 之外 的 任何字符
 如果 插入 符 出现在 字符 类 的其他 位置 则 它 没有 特殊 含义
 例如5 将匹配5 或
 也 许 最 重要的 元字符 是 反斜杠
 与 python  字符串文字 一样 反斜杠 后面 可以 跟 各种 字符 以 指示 各种 特殊 序列
 它 也 用 于 转义 所有 元字符 因此 您 仍然 可以在 模式 中 匹配 它们 例如 如果你需要 匹配 或 你可以在 它们 前面 加一个 反斜杠 来 移除 它们的 特殊 含义 或
 一些 以 开头的 特殊 序列 表示 通常 有用的 预定义 字符 集 例如 数字 集、 字母 集 或 任何 非 空格 的 集合
 让我们 举 一个例子 w  匹配任何 字母数字 字符
 如果 正则表达式 模式 以字节 类 表示 这相当于 类 azaz 09
 如果 正则表达式 是一个字符串 w  将匹配 由 unicodedata  模块提供 的 unicode  数据库中 标记为 字母 的 所有 字符
 通过 在 编译 正则表达式 时 提供 re
ascii  标志 可以在 字符串 模式 中 使用 更 为 受 限制 的 w  定义
 以 下 特殊 序列 列表 不完整
 有关 unicode  字符串 模式 的 序列 和 扩展 类定义 的完整 列表 请参阅 标准库 参考 中 的最后一 部分 正则表达式 语法
 通常 unicode  版本 匹配 unicode  数据库中 相应 类别 中的任何 字符
d  匹配任何 十进制 数字 这等价于 类09
d  匹配任何 非 数字 字符 这等价于 类09
s  匹配任何 空白字符 这等价于 类 tnrfv
s  匹配任何 非 空白字符 这相当于 类 tnrfv
w  匹配任何 字母 与 数字 字符 这相当于 类 azaz 09
w  匹配任何 非 字母 与 数字 字符 这相当于 类 azaz 09
 这些 序列 可以包含 在 字符类中
 例如 s
 是一个 匹配任何 空格 字符 的 字符 类 或者 或
 本节 的最后一个 元字符 是

 它 匹配 除 换行符 之外 的 任何 内容 并且 有 一个可选 模式 re
dotall  甚至 可以 匹配 换行符

 常用于 你想 匹配任何 字符 的地方
 重复
 能够 匹配 不同的 字符 集合 是 正则表达式 可以 做 的第一 件 事 这 对 于 字符串 可 用 方法 来说 是 不可能 的
 但是如果 这是 正则表达式 的唯一 额外 功能 那么 它们 就不 会 有 太 大 的 优 势
 另一个 功能 是 你可以 指定 正则 的 某些 部分 必须 重复 一 定 次 数
 重复 中我们 要 了解 的第一个 元字符 是
 与 字面 字符 不匹配 相反 它 指定 前 一个字符 可以 匹配 零 次 或 多次 而不是 恰好 一次
 例如 cat  将匹配 ct 0 个 a  字符 cat 1 个 a  caaat 3 个 a  字符 等等
 类似 这样的 重复 是 贪 婪 的 当 重复 正则 时 匹配 引擎 将 尝试 尽可能 多 地 重复 它
 如果 模式 的 后续 部分 不匹配 则 匹配 引擎 将 回退 并 以 较 少 的 重复 次 数 再次 尝试
 一个 逐 步 的 例子 将 使 这 更 加 明显
 让我们 考虑 表达式 abcdb
 这 个 正则匹配 字母 a  类 bcd  中 的 零 或多个 字母 最后 以 b  结尾
 现 在 想 象 一 下 这 个 正则 与 字符串 abcbd  匹配
 步骤 匹配 解释1 a  正则 中 的 a  匹配
2 abcbd  引擎 尽可能 多 地 匹配 bcd  直 到 字符串 结束
3 失败 引擎 尝试 匹配 b  但是 当前位置 位 于 字符串 结束 所 以 匹配 失败
4 abcb  回退 一次 bcd  少 匹配 一个字符
5 失败 再次 尝试 匹配 b  但是 当前位置 是 最后一个 字符 d 
6 abc  再次 回退 所 以 bcd  只 匹配 bc 
6 abcb  再 试 一次 b 
 这 次 当前位置 的 字 符 是 b  所 以 它 成功 了
 正则 现在已 经 结束 了 它 已经 匹配 了 abcb
 这 演示了 匹配 引擎 最初 如何 进行 如果没有 找到 匹配 它 将 逐 步 回退 并 一次 又 一次 地 重 试 正则 的 其 余部分
 它 将 回退 直到 它 为 bcd  尝试 零 匹配 如果 随后 失败 引擎 将 断 定 该 字符串 与 正则 完全不 匹配
 另一个 重复 的 元字符 是 它 匹配 一次 或 多次
 要 特别 注意 和 之间的 区别 匹配 零 次 或更多 次 因此 重复 的 任何 东西 都 可能 根 本 不存在 而 至少 需要 一次
 使用 类似 的 例子 cat  将匹配 cat 1 个 acaaat 3 个 a  但不会 匹配 ct
 还 有两个 重复 限定 符
 问 号字符 匹配 一次 或 零 次 你可以 把它 想 象 成 是可选的
 例如 homebrew  匹配 homebrew  或 homebrew
 最 复杂的 重复 限定 符 是 mn  其 中 m  和 n  是 十进制 整数
 这 个 限定 符 意味着 必须 至少 重复 m  次 最多 重复 n  次
 例如 a 13 b  将匹配 ab  ab  和 ab 
 它 不匹配 没有 斜 线 的 ab  或者 有 四个 的 ab
 你可以 省略 m  或 n  在这种情况下 将 假定 缺 失 值 的 合理 值
 省略 m  被解释 为0 下 限 而 省略 n  则 为 无穷大 的 上限
 还 原 论 者 的 读 者 可能会 注意 到 其他 三个 限定 符 都可以 用这种 表示法 表达
0 与 相同1 相当于01 和 相同
 最好 使用 或 只要 因为它们 更 短 更容易 阅读
 使用 正则表达式
 现 在 我们 已经 看 了一些 简单的 正则表达式 我们 如何在 python  中 实际 使用它们？ re  模块提供了 正则表达式 引擎 的 接口 允许你 将 正则 编译 为 对象 然后 用它们 进行 匹配
 编译 正则表达式
 正则表达式 被 编译 成 模式 对象 模式 对象具有 各种 操作 的 方法 例如 搜索 模式 匹配 或 执行 字符串 替换
 import  re  p  re
compile  也 接受一个可选的 flags  参数 用 于 启用 各种 特殊 功能 和 语法 变体
 我们 稍后 将 介绍 可用的 设置 但 现 在 只需 一个例子 p  re
ignorecase  正则 作为 字符串 传递给 re
compile 
 正则 被 处理 为 字符串 因为 正则表达式 不 是 核心 python  语言 的一部分 并且没有 创建 用 于 表达 它们的 特殊 语法
 有 些 应用程序 根 本 不需要 正则 因此 不需要 通过 包含 它们 来 扩展 语言 规范
 相反 re  模块 只是 python  附带 的 c  扩展模块 就 类似于 socket  或 zlib  模块
 将 正则 放在 字符串 中 可以使 python  语言 更简单 但 有 一个 缺 点 是 下 一节 的 主题
 反斜杠 灾 难
 应用 匹配
 一旦 你 有 一个 表示 编译 正则表达式 的 对象 你 用 它 做 什么？ 模式 对象 有 几种 方法和属性
 这里 只 介绍 最 重要的 内容 请参阅 re  文档 获取 完整 列表
 方法 属性 目 的 match  确定 正则 是否 从字符串 的开头 匹配
 search  扫描 字符串 查找 此 正则匹配 的 任何 位置
 findall  找到 正则匹配 的 所有子 字符串 并 将它们 作为 列表 返 回
 finditer  找到 正则匹配 的 所有子 字符串 并 将它们 返回 为 一个 iterator
 如果没有 找到 匹配 match  和 search  返回 none 
 如果它们 成功 一个 匹配对象 实例 将 被 返回包含 匹配 相关的 信息 起始 和 终结 位置、 匹配 的 子 串 以及其 它
 你可以通过 交互式 实 验 re  模块 来 了解 这一点
 如果你 有 tkinter  你可能 还 想 查看 toolsdemoredemo
py  这是 python  发行 附带 的 演示 程序
 它 允许你 输入 正则 和 字符串 并 显示 re  是 匹配 还是 失败
 redemo
py  在 尝试 调试 复杂的 正则 时 非常有用
 本 howto  使用标准 python  解释器 作为 示例
 首先 运行 python  解释器 导入 re  模块 然后 编译 一个 正则 import  re  p  re
compileaz  现 在 你可以 尝试 匹配 正则 az  的各种 字符串
 空字符串 根 本 不匹配 因为 表示 一次 或 多次 重复
 match  在这种情况下 应 返回 none  这 将导致 解释器 不 打印 输出
 你可以 显式 打印 match  的结果 使 其 清晰
 p
match  none  现 在 让我们 尝试 一 下 它应该 匹配 的 字符串 例如 tempo
 在 这个例子 中 match  将返回一个 匹配对象 因此你 应该 将结果 储存 到 一个 变量 中 以 供 稍后 使用
match  object  span 05 matchtempo  现 在 你可以 检查 匹配对象 以获取 有关 匹配 字符串 的 信息
 匹配对象 实例 也 有 几个 方法和属性 最 重要的 是 方法 属性 目 的 group  返回 正则匹配 的 字符串 start  返回 匹配 的 开始 位置 end  返回 匹配 的 结束 位置 span  返回包含 匹配 start  end  位置 的 元组 尝试 这些方法 很 快 就会 清楚 它们 的含义 m
span 05 group  返回 正则匹配 的 子 字符串
 start  和 end  返回 匹配 的 起始 和 结束 索引
 span  在 单个 元组中 返回 开始 和 结束 索引
 由 于 match  方法 只 检查 正则 是否 在 字符串 的开头 匹配 所 以 start  将 始终 为零
 但是 模式 的 search  方法 会 扫描 字符串 因此 在这种情况下 匹配 可能不 会 从 零 开始
 printp
span 411 在 实际 程序中 最常见的 样式 是 在 变量 中 存储 匹配对象 然后 检查 它 是否为 none
 这通常 看起来 像 p  re
group  else  printno  match  两种 模式 方法 返回 模式 的 所有 匹配 项
 findall  返回 匹配 字符串 的 列表 p  re
findall 12 drummers  drumming 11 pipers  piping 10 lords  aleaping 121110 在 这个例子 中 需要 r  前缀 使 字面 为 原始 字符串字面 因为 普通的 加 工 字符串字面 中 的 转义 序列 不 能 被 python  识别 为 正则表达式 导致 deprecationwarning  并 最终 产生 syntaxerror
 请参阅 反斜杠 灾 难
findall  必须 先 创建 整个 列表 才能 返回结果
 finditer  方法 将 一个 匹配对象 的 序列 返回 为 一个 iterator  iterator  p
 模块 级别 函数
 你 不必 创建 模式 对象 并 调用 其 方法 re  模块 还提供了 顶 级函数 matchsearchfindallsub  等等
 这些函数 采用 与 相应 模式 方法 相同 的 参数 并 将 正则 字符串 作为 第一个参数 添加 并 仍然 返回 none  或 匹配对象 实例
 printre
match  object  span 05 matchfrom  本 质 上 这些函数 只是 为 你 创建一个 模式 对象 并 在 其 上调用 适当的 方法
 它们 还 将 编译 对象 存储在 缓存 中 因此 使用 相同 的 未来 调用 将 不需要 一次 又 一次 地 解析 该 模式
 你 是否 应该使用 这些模块 级函数 还是 应该 自己 获取 模式 并 调用 其 方法？ 如果你 正 在 循环中 访问 正则表达式 预 编译 它 将 节 省 一些 函数调用
 在 循环 之外 由 于 有 内部 缓存 没有 太 大 区别
 编译 标志
 编译 标志 允许你 修改 正则表达式 的 工作 方式
 标志 在 re  模块 中 有两个 名称 长 名称 如 ignorecase  和 一个 简短 的 单 字母 形式 例如 i
 如果你 熟悉 perl  的 模式 修 饰 符 则 单 字母 形式 使用 和 其 相同 的 字母 例如 re
verbose  的 缩 写 形式 为 re
x
 多个 标志 可以 通过 按位 或 运算 来指定 它们 例如 re
m  设置 i  和 m  标志
 这是一个 可 用 标志 表 以及 每个 标志 的 更 详细 说明
 标志 意义 ascii  a  使 几个 转义 如 w 、 b 、 s  和 d  匹配 仅 与 具有 相应 特征属性 的 ascii  字符 匹配
 dotall  s  使
 匹配任何 字符 包括 换行符
 ignorecase  i  进行 大小写 不 敏感 匹配
 locale  l  进行 区域设置 感知 匹配
 multiline  m  多 行 匹配 影响 和
 verbose  x  为 扩展 启用 详细 的 正则 可以更 清晰 更容易 理解
 iignorecase  执行 不 区分 大小写 的 匹配字符 类 和 字面 字符串 将 通过 忽略 大小写 来 匹配字 母
 例如 az  也 匹配 小写字母
 除非 使用 ascii  标志 来 禁用 非 ascii  匹配 否则 完全 unicode  匹配 也 有效
 当 unicode  模式 az  或 az  与 ignorecase  标志 结合 使用 时 它们将 匹配52 个 ascii  字母 和4 个额外的 非 ascii  字母 i ̇ u 0130 拉 丁 大写字母 i  带 上面的 点ı u 0131 拉 丁 文 小写字母 无 点 is  u 017 f  拉 丁 文 小写字母 长 s  和 k  u 212 a  开 尔 文 符号
 spam  将匹配 spamspam  spam  或ſ pam  后者 仅在 unicode  模式下 匹配
 此 小写 不 考虑 当前 区域设置 如果你 还 设置了 locale  标志 则 将 考虑
llocale  使 w 、 w 、 b 、 b  和 大小写 敏感 匹配 依赖于 当前 区域 而不是 unicode  数据库
 区域设置 是 c  库 的 一个 功能 旨在 帮助 编写 考虑 到 语言 差异的 程序
 例如 如果你 正 在 处理 编码 的 法 语 文本 那么 你希望 能够 编写 w  来 匹配 单词 但 w  只 匹配字符 类 azaz  字节 模式 它 不 会 匹配 对应于é 或ç 的 字节
 如果你 的 系统 配置 正确 并且 选择 了 法 语 区域设置 某些 c  函数 将 告诉 程序 对应于é 的 字节 也 应该 被视为 字母
 在 编译 正则表达式 时 设置 locale  标志 将导致 生成 的 编译 对象 将 这些 c  函数用于 w  这 比较 慢 但 也可以使 w  匹配 你所 期望的 法 语 单词
 在 python 3 中 不 鼓 励 使用 此 标 志 因为 语言 环境 机制 非常 不 可靠 它 一次 只 处理 一个 文 化 它只 适用于8 位 语言 环境
 默认情况下 python 3 中 已经 为 unicodestr  模式 启用 了 unicode  匹配 并且它 能够 处理 不同 的区域 语言
mmultiline  和 还没有 解释 它们将 在以下 部分 介绍 更多 元字符
 通常 只 匹配 字符串 的开头 而 只 匹配 字符串 的 结尾 紧 接 在 字符 串 末尾 的 换行符 如果有 的话 之前
 当 指定 了这个 标志 时 匹配字符 串 的开头 和 字符串 中 每 一行的 开头 紧 跟 在 每个 换行符 之后
 类似地 元字符 匹配 字符串 的 结尾 和 每 行 的 结尾 紧 接 在 每个 换行符 之前
sdotall  使
 特殊 字符 匹配任何 字符 包括 换行符 没有 这 个 标志
 将匹 配 任何字符 除了 换行符
aascii  使 w 、 w 、 b 、 b 、 s  和 s  执行 仅 ascii  匹配 而不是 完整 匹配 unicode  匹配
 这 仅 对 unicode  模式 有意义 并且 对 于 字节 模式 将 被 忽略
xverbose  此 标志 允许你 编写 更易 读 的正则表达式 方法 是 为 您 提供 更 灵活的 格式化方 式
 指定 此 标志 后 将 忽略 正则 字符串中的 空格 除非 空格 位于 字符类中 或 前面 带有 未 转义 的 反斜杠 这 使 你可以 更 清楚 地 组织 和 缩进 正则
 此 标志 还 允许你 将 注释 放在 正则 中 引擎 将 忽略 该 注释 注释 标记为 既 不是在 字符类中 也 不是在 未 转义 的 反斜杠 之前
 例如 这里 的 正则 使用 re
verbose  看 看 阅读 有 多 容易？ charref  re
verbose  如果没有 详细 设置 正则 将 如下所示 charref  re
compile 00709 x 09 afaf  在 上面的例子 中 python  的 字符串文字 的 自动 连接 已 被用于 将 正则 分 解 为 更 小 的部分 但它 仍然 比 以 下 使用 re
verbose  版本 更 难 理解
 更多 模式 能力
 到 目前 为止 我们 只 介绍了 正则表达式 的一部分 功能
 在 本节 中 我们将 介绍 一些 新 的 元字符 以及 如何使用 组 来 检索 匹配 的 文本 部分
 更多 元字符
 我们 还没有 涉及 到 一些 元字符
 其 中 大部分 内容 将 在 本节 中 介绍
 要 讨论 的其余 一些 元字符 是 零 宽度 断言
 它们不 会 使 解析 引擎 在 字符串 中 前进 一个字符 相反 它们 根 本 不 占 用 任何字符 只是 成功 或 失败
 例如 b  是一个 断言 指明 当前位置 位于 字 边界 这 个 位置 根 本 不会被 b  改变
 这意味着 永远不 应 重复 零 宽度 断言 因为 如果它们 在给定 位置 匹配 一次 它们 显然 可以 无限 次 匹配
 或者 or  运算符
 如果 a  和 b  是 正则表达式 ab  将 匹配任何 与 a  或 b  匹配 的 字符串
 具有 非常 低 的优先级 以便 在 交 替 使用 多 字符 字符串 时 使 其 合理 地 工作
 crowservo  将匹配 crow  或 servo  而不是 cro 、 w  或 s  和 ervo
 要 匹配 字面 请使用 或 将 其 括 在 字符类中 如
 在 行 的开头 匹配
 除非 设置了 multiline  标志 否则 只会 在 字符串 的 开 头 匹配
 在 multiline  模式下 这 也 在 字符串 中的每个 换行符 后 立即 匹 配
 例如如果 你希望 仅在 行 的开头 匹配 单词 from  则 要使用的 正则 from 
 printre
searchfrom  reciting  from  memory  none  要 匹配 字面 使用
 匹配 行 的末尾 定义为 字符串 的 结尾 或者 后 跟 换行符 的 任何 位置
 printre
match  object  span 67 match  以 匹配 字面 使用 或者 将 其 包 裹 在 一个 字符类中 例如
a  仅 匹配 字符串 的开头
 当 不 在 multiline  模式 时 a  和 实际上 是 相同 的
 在 multiline  模式 中 它们是 不同的 a  仍然 只 在 字符串 的开头 匹配 但 可以 匹配 在 换行符 之后的 字符串 内 的 任何 位置
z  只 匹配 字符串 尾
b  字 边界
 这是一个 零 宽度 断言 仅在 单词 的开头 或 结尾 处 匹配
 单词 被 定 义 为 一个 字母数字 字符 序列 因此 单词 的 结尾 由 空格 或 非 字母数字 字符 表示
 以下示例 仅当 它是一个 完整 的单词 时 匹配 class  当 它包含 在 另一个 单词 中 时 将不会 匹配
searchone  subclass  is  none  使用 这 个特殊 序列 时 你应该 记住 两个 细 微 之处
 首先 这是 python  的 字 符串文字 和 正则表达式 序列 之间 最 严重 的 冲突
 在 python  的 字符串文字 中 b  是 退 格 字符 ascii  值 为8
 如果你 没有 使用 原始字符串 那么 python  会 将 b  转换为 退 格 你 的 正则 不 会 按照 你 的 预期 匹配
 以下示 例 与 我们 之前的 正则 看起来 相同 但 省略 了 正则 字符串 前面 的 r
 p  re
match  object  span 07 matchx 08 classx 08 其 次 在 一个 字符类中 这 个 断言 没有 用 处 b  表示 退 格 字符 以便 与 python  的 字符串文字 兼容
b  另一个 零 宽度 断言 这 与 b  相反 仅在 当前位置 不 在 字 边界 时才 匹配
 分组
 通常 你需要 获取 更多信息 而 不 仅仅 是 正则 是否 匹配
 正则表达式 通常用 于 通过将 正则 分 成 几个 子 组 来 解析 字符串 这些 子 组 匹配 不同的 感兴趣 组件
 例如 rfc 822 标题 行 分 为 标题 名称 和 值 用 分隔 如下所示 from  authorexample
com  这可以通过 编写 与 整个 标题 行 匹配 的正则表达式 来处理 并且 具有与 标题 名称 匹配 的 一个 组 以及 与 标题 的 值 匹配 的 另一个 组
 组 由 元字符 标记
 和 与 数学 表达式 的含义 大致 相同 它们将 包含在 其中的 表达式 组合 在一起 你可以使用 重复 限定 符 重复 组 的内容 例如 或 mn
 例如 ab  将匹配 ab  的 零 次 或 多次 重复
 p  re
span 010 用 表示 的 组 也 捕获 它们 匹配 的 文本 的 起始 和 结束 索引 这可以通过 将 参数 传递给 group 、 start 、 end  以及 span
 组 从0 开始 编号
 组0 始终 存 在 它 表示 整个 正则 所 以 匹配对象 方法都 将 组0 作为 默认 参数
 稍后 我们将 看到 如何 表达 不 捕获 它们 匹配 的 文本 范围 的 组
 p  re
group 0 ab  子 组 从左 到 右 编号 从1 向 上 编号
 组 可以 嵌套 要 确定 编号 只需 计算 从左 到 右 的 左 括号 字符
 p  re
group 2 bgroup  可以 一次 传递 多个 组 号 在这种情况下 它 将 返回 一个包含 这些 组 的相应 值 的 元组
 m
group 212 b  abc  bgroups  方法返回一个 元组 其中包含 所有子 组 的 字符串 从1 到 最后一个 子 组
 m
groups  abc  b  模式 中 的 后 向 引用 允许你 指定 还 必须在 字符串中的 当前位置 找到 先前 捕获 组 的内容
 例如如果 可以在 当前位置 找到 组1 的 确 切 内容 则1 将 成功 否则将 失败
 请 记住 python  的 字符串文字 也 使用 反斜杠 后 跟 数字 以允许 在 字符串 中包含 任意 字符 因此 正则 中 引入 反向 引用 时 务 必 使用 原始字符串
 例如以下 正则 检测 字符串中的 双 字
 p  re
group  the  the  像这样 的 后 向 引用 通常不 仅仅 用 于 搜索 字符串—— 很 少有 文本 格式 以 这种方式 重复 数据—— 但是你 很 快 就会 发 现 它们在 执行 字符串 替换 时 非常 有 用
 非 捕获 和 命名 组
 精 心 设计 的 正则 可以使用 许多 组 既 可以 捕获 感兴趣的 子 串 也可以 对 正则 本身 进行 分组 和 构建
 在 复杂的 正则 中 很 难 跟踪 组 号
 有两个 功能 可以 帮助 解决 这个问题
 它们都 使用 常 用 语法 进行 正则表达式 扩展 因此 我们 首先 看 一 下
perl 5 以 其 对 标准 正则表达式 的 强大 补 充 而 闻 名
 对 于这些 新 功能 perl  开发人员 无法 选择 新 的 单 键 击 元字符 或 以 开头的 新 特殊 序列 否则 perl  的正则表达式 与 标准 正则 容易 混 淆
 例如如果 他们 选择 作为 一个新的 元字符 旧 的 表达式 将 假设 是一个 普通 字符 并且不 会 编写 或
perl  开发人员 选择 的 解决方案是 使用
 作为 扩展 语法
 括号 后面 的 是一个 语法错误 因为 没有 什么 可 重复 的 所 以 这 并没有 引入 任何 兼容性 问题
 紧 跟 在 之后的 字符 表示 正 在 使用 什么 扩展名 所 以 foo  是一个 东西 一个 正 向 的 先 行 断言 和 foo  是 其 它 东西 包含 子 表达式 foo  的 非 捕获 组
python  支持 一些 perl  的 扩展 并 增加了新的 扩展 语法 用 于 perl  的 扩展 语法
 如果在 问 号 之后 的第一个 字符 为 p  即 表明 其 为 python  专属的 扩展
 现 在 我们 已经 了解 了 一般 的 扩展 语法 我们可以 回 到 简化 复杂 正则 中 组 处理 的功能
 有 时 你 会 想要 使用 组 来表示 正则表达式 的一部分 但是 对 检索 组 的内容 不 感兴趣
 你可以通过 使用 非 捕获 组 来 显式 表达 这 个 事实
 你可以用 任何其他 正则表达式 替换

 m  re
groups  除了 你 无法 检索 组 匹配 内容的 事实 外 非 捕获 组 的 行为与 捕获 组 完全 相同 你可以在 里面 放 任何 东西 用 重复 元字符 重复 它 比如 然后 把它 嵌入 其他 组 捕获 或 不 捕获
 在 修改 现有 模式 时 特别 有 用因为 你可以 添加新 组 而 不 更改 所有其他 组 的 编号 方式
 值得 一 提 的 是 捕获 和 非 捕获 组 之间的 搜索 没有 性能 差异 两种 形式 没 有一种 更快
 更 重要的 功能 是 命名 组 不 是通过 数字 引用 它们 而 是 可以通过 名称 引用 组
 命名 组 的语法 是 python  特定的 扩展 之一 pname
 name  显然 是 该 组 的 名称
 命名 组 的 行为与 捕获 组 完全 相同 并且 还 将 名称 与 组 关联
 处理 捕获 组 的 匹配对象 方法都 接受 按 编号 引用 组 的 整数或 包含所 需 组 名 的 字符串
 命名 组 仍然 是 给定的 数字 因此 你可以通过 两 种方式 检索 有关 组 的 信息 p  re
group 1 lots  此外 你可以通过 groupdict  将 命名 分组 提取 为 一个字典 m  re
groupdict  first  jane  last  doe  命名 组 很有用 因为它们 允许你 使用 容易 记住 的 名称 而不必 记住 数字
 这是 来自 imaplib  模块 的 示例 正则 internaldate  re
compilerinternaldate  rpday 12309 pmonazazaz  rpyear 09090909 r  phour 0909 pmin 0909 psec 0909 r  pzonenpzoneh 0909 pzonem 0909 r  检索 m
groupzonem  显然 要 容易 得 多 而不必 记住 检索 第9 组
 表达式 中 的 后 向 引用 语法 例如
1 指 的 是 组 的 编号
 当然 有一种 变体 使用 组 名 而不是 数字
 这是 另一个 python  扩展 pname  表示 在当前 点 再次 匹配 名为 name  的 组 的内容
 用 于 查找 双 字 的正则表达式 bws 1 b  也可以 写 为 bpwordwspwordb  p  re
 前 向 断言
 修改 字符串
 到 目前 为止 我们 只是 针对 静态 字符串 执行 搜索
 正则表达式 通常 也 用 于 以 各 种方式 修改 字符串 使用以下 模式 方法 方法 属性 目 的 split  将 字符串 拆分 为 一个列表 在 正则匹配 的 任何 地方 将 其 拆分 sub  找到 正则匹配 的 所有子 字符串 并 用 不同的 字符串 替 换 它们 subn  与 sub  相同 但 返回 新 字符串 和 替换 次 数
 分 割 字符串
 模式 的 split  方法 在 正则匹配 的 任何 地方 拆分 字符串 返回 一个 片段 列表
 它 类似于 split  字符串方法 但 在 分隔符 的 分隔符 中 提供了更 多 的通用 性 字符串 的 split  仅 支持 按 空格 或 固定 字符串 进行 拆分
 正 如 你所 期望的 那样 还有一个 模块级 re
split  函数
splitstring  maxsplit 0 通过 正则表达式 的 匹配 拆分 字符串
 如果在 正则 中 使用 捕获 括号 则 它 们 的内容 也 将作为 结果 列表 的一部分 返回
 如果 maxsplit  非零 则 最多 执行 maxsplit  次 拆分
 你可以通过 传递 maxsplit  的 值 来 限制 分 割 的数量
 当 maxsplit  非零 时 将 最多 进行 maxsplit  次 拆分 并且 字符串 的 其 余部分 将作为 列表 的最后一个 元素 返回
 在 以下示例 中 分隔符 是 任何 非 字母数字 字符 序列
 p  re
 有 时 你 不仅 对 分隔符 之间的 文本 感兴趣 而且 还需要 知道 分隔符 是什么
 如果在 正则 中 使用 捕获 括号 则 它们的 值 也 将作为 列表 的一部分 返回
 比较 以 下 调用 p  re
 模块级 函数 re
split  添加 要 正则 作为 第一个参数 但 在其他 方面 是 相同 的
 re
 搜索 和 替换
 常见问题
 正则表达式 对 于 某些 应用程序 来说 是一个 强大 的工具 但 在某些 方面 它们的 行为 并 不 直 观 有 时 它们的 行为 方式 与 你 的 预期 不同
 本节 将 指 出 一些 最常见的 陷阱
 使用 字符串方法
 有 时 使用 re  模块 是一个 错误
 如果你 匹配 固定 字符串或 单个字符 类 并且 你 没有 使用 任何 re  功能 例如 ignorecase  标志 那么 正则表达式 的全部 功能 可能不 是 必需 的
 字符串 有 几种 方法 可以使用 固定 字符串 执行 操作 它们 通常 要 快 得 多 因为 实现 是一个 针对 此 目 的 而 优化 的 单个 小 c  循环 而不是 大 型、 更 通用的 正则表达式 引擎
 一个例子 可能是 用 另一个 固定 字符串 替换 一个 固定 字符串 例如 你可以用 deed  替换 word 
 re
sub  看起来 像 是用于 此 的 函数 但 请 考虑 replace  方法
 注意 replace  也会 替换 单词 里面 的 word  把 swordfish  变 成 sdeedfish  但 简单的 正则 word  也会 这样做
 为 了 避免 对 单词 的部分 进行 替换 模式 必须是 bwordb  以便 要求 word  在任何 一 方 都有一个 单词 边界
 这使得 工作 超出 了 replace  的能力
 另一个 常见 任务 是 从字符串 中删除 单个字符 的 每个 匹配 项 或 将 其 替换为 另一个 字符
 你可以用 re
subn  s  之 类 的 东西 来 做 这 件 事 但是 translate  能够 完成 这两 项 任务 并且 比 任何 正则表达式 都 快
 简 而言 之 在 转 向 re  模块 之前 请 考虑 是否 可以使用 更快 更简单 的 字符串方法 解决 问题
match  和 search
matchsuper  insuperable  none  另一 方面 search  将 向 前 扫描 字符串 报告 它 找到 的第一个 匹配 项
 printre
span 27 有 时 你 会 被 诱 惑 继续 使用 re
match  只需 在你的 正则 前面 添加

 抵 制 这种 诱 惑 并 使用 re
search  代替
 正则表达式 编译器 对 正则 进行 一些 分析 以 加 快 寻找 匹配 的 过程
 其中一个 分析 可以 确定 匹配 的第一个 特征 必须 是什么 例如 以 crow  开头的 模式 必须 与 c  匹配
 分析 让 引擎 快速 扫描 字符串 寻找 起始 字符 只 在 找到 c  时 尝试 完全 匹配
 添加
 会 使 这 个 优化 失效 需要 扫描 到 字符串 的末尾 然后 回溯 以 找到 正则 的 其 余部分 的 匹配
 使用 re
search  代替
 贪 婪 与 非 贪 婪
 当 重复 一个 正则表达式 时 就像 在 a  中 一样 最终 的 动作 就是 消耗 尽可能 多 的 模式
 当你 尝试 匹配 一 对 对 称 分隔符 例如 html  标记 周 围 的 尖 括号 时这个 事实 经常 会 让你 感到 困 惑
 因为
 的 贪 婪 性 质 用 于 匹配 单个 html  标记 的简单 模式 不 起作用
group  htmlheadtitletitletitle  正则匹配 中 的 html  和
 消耗 字符串 的 其 余部分
 正则 中 还有 更多的 剩余 东西 并且 在 字符串 的末尾 不 能 匹配 所 以 正则表达式 引擎 必须 逐 个 字符 地 回溯 直到 它 找到 匹配
 最终 匹配 从 html  中 的 扩展 到 title  中 的 而 这 并不是 你想要 的结果
 在这种情况下 解决方案是 使用 非 贪 婪 的 限定 符、、 或 mn  匹配 为 尽可能 少 的 文 字
 在 上面的例子 中 在 第一次 匹配 后 立即 尝试 当 它 失败时 引擎 一次 前进 一个字符 每 一步 都 重 试
 这 产生 了 正确的 结果 printre
group  html  请注意 使用 正则表达式 解析 html  或 xml  很 痛 苦
 快 而 脏 的 模式 将 处理 常见 情况 但 html  和 xml  有特殊 情况 会破坏 明显 的正则表达式 当你 编写 正则表达式 处理 所 有可能的 情况 时 模式 将 非常 复杂
 使用 html  或 xml  解析器 模块 来执行 此 类 任务

 使用 reverbose
 到 目前 为止 你可能 已经 注意 到 正则表达式 是一种 非常 紧凑 的 表示法 但它们 并不是 非常 易 读
 具有 中 等 复杂 度 的 正则 可能会 成为 反斜杠、 括号 和 元字符 的 冗 长 集合 使 其 难以 阅读 和 理解
 对 于 这样的 正则 在 编译 正则表达式 时 指定 re
verbose  标志 可能会 有 所 帮助 因为它 允许你 更 清楚 地 格式化 正则表达式
re
verbose  标志 有 几种 效果
 正则表达式 中 的 不 是 在 字符类中 的空格 将被忽略
 这意味着 表达式 如 dog  cat  等同于 不太 可读的 dogcat  但 a  b  仍 将 匹配字符 a 、 b  或 空格
 此外 你 还可以 在 正则 中 放置 注释 注释 从 字符 扩展 到 下 一个 换行符
 当 与 三 引号 字符串 一起使用 时 这 使 正则 的 格式 更 加 整 齐 pat  re
verbose  这 更 具有 可读性 pat  re
 反 馈
 正则表达式 是一个 复杂的 主题
 这 份 文档 是否有 助 于 你 理解 它们？ 是否 存 在 不 清楚 的部分 或者 你 遇到 的 问题 未 在 此处 涉及？ 如果是 请 向 作者 发送 改进 建议
 关于 正则表达式 的 最 完整的 书 几乎 肯 定 是 由 oreilly  出 版 的 jeffrey  friedl  的 mastering  regular  expressions 
 不幸的是 它 专 注 于 perl  和 java  的正则表达式 并且 根 本 不包含 任何 python  材 料 因此它 不能用 作 python  编程 的 参考
 第一 版 涵盖 了 python  现 在 删除 的 regex  模块 这 对 你 没有 多 大 帮助
 考虑 从 你 的 图 书 馆 中查找 它
 排序 指南
 作者 andrew  dalke  和 raymond  hettinger  发布 版本0
1 python  列表 有 一个 内置的 list
sort  方法 可以直接 修改 列表
 还有一个 sorted  内置函数 它 会 从 一个 可迭代对象 构建 一个新的 排序 列表
 在 本文档 中 我们将 探 索 使用 python  对 数据 进行排序 的各种 技术
 基本 排序
 关键 函数
list
sort  和 sorted  都有一个 key  形参 用来 指定 在 进行比较 前 要 在 每个 列表 元素 上调用 的 函数 或其他 可调用对象
 例如 下面是一个 不 区分 大小写 的 字符串 比较 sortedthis  is  a  test  string  from  andrew
lowera  andrew  from  is  string  test  thiskey  形参 的 值 应该是 个 函数 或其他 可调用对象 它接受一个 参数 并返回 一个用于 排序 的 键
 这种 机制 速度 很 快 因为 对 于 每个 输入 记录 只会 调用一次 键 函数
 一种 常见的 模式 是 使用 对象 的一些 索引 作为 键 对 复杂 对象 进行排序
 例如 studenttuples 
 sortedstudenttuples  keylambda  student  student 2 sort  by  agedave  b 10 jane  b 12 john  a 15 同样的 技术 也 适用于 具有 命名 属性 的 对象
 例如 class  student
operator  模块 函数
 上面 显示 的 键 函数 模式 非常 常见 因此 python  提供了 便 利 功能 使 访问 器 功能 更容易 更 快捷
 operator  模块 有 itemgetter 、 attrgetter  和 methodcaller  函数
 使用 这些函数 上述 示例 变得 更简单 更 快捷 from  operator  import  itemgetter  attrgetter  sortedstudenttuples  keyitemgetter 2 dave  b 10 jane  b 12 john  a 15 sortedstudentobjects  keyattrgetteragedave  b 10 jane  b 12 john  a 15 operator  模块 功能 允许 多 级 排序
 例如 按 grade  排序 然后 按 age  排序 sortedstudenttuples  keyitemgetter 12 john  a 15 dave  b 10 jane  b 12 sortedstudentobjects  keyattrgettergrade  agejohn  a 15 dave  b 10 jane  b 12
 升 序 和 降 序
list
sort  和 sorted  接受 布尔值 的 reverse  参数
 这 用 于 标记 降 序 排序
 例如要 以 反向 age  顺序 获取 学生 数据 sortedstudenttuples  keyitemgetter 2 reversetruejohn  a 15 jane  b 12 dave  b 10 sortedstudentobjects  keyattrgetterage  reversetruejohn  a 15 jane  b 12 dave  b 10
 排序 稳定 性 和 排序 复杂 度
 排序 保证 是 稳定 的
 这意味着 当 多个 记录 具有相同的 键值 时 将 保留 其 原始 顺序
 data  red 1 blue 1 red 2 blue 2 sorteddata  keyitemgetter 0 blue 1 blue 2 red 1 red 2 注意 blue  的两个 记录 如何 保留 它们的 原始 顺序 以便 blue 1 保证 在 blue 2 之前
 这 个 美 妙 的 属性 允许你 在 一系列 排序 步骤 中 构建 复杂的 排序
 例如要 按 grade  降 序 然后 age  升 序 对 学生 数据 进行排序 请 先 age  排序 然后再 使用 grade  排序 s  sortedstudentobjects  keyattrgetterage  sort  on  secondary  key  sorteds  keyattrgettergrade  reversetrue  now  sort  on  primary  key  descendingdave  b 10 jane  b 12 john  a 15 这 可以被 抽象 为 一个 包装 函数 该函数 能 接受一个 列表 以及 字段 和 顺序 的 元组 以 对 它们 进行 多重 排序
 return  xs  multisortliststudentobjects  grade  true  age  falsedave  b 10 jane  b 12 john  a 15 python  中使用的 timsort  算法 可以 有效 地 进行 多种 排序 因为它 可以 利用 数据 集 中 已存在 的 任何 排序
 使用 装饰 排序 去 装饰 的 旧 方法
 这 个 三个 步骤 被称为 decoratesortundecorate  首先 初始 列表 使用 控制 排序 顺序 的 新 值 进行 修 饰
 然后 装饰 列表 已 排序
 最后 删除 装饰 创建一个 仅 包含 新 排序 中 初始 值 的 列表
 例如要 使用 dsu  方法 按 grade  对 学生 数据 进行排序 decorated  student
sort  student  for  grade  i  student  in  decorated  undecoratejohn  a 15 jane  b 12 dave  b 10 这 方法 语 有效 是因为 元组 按 字典 顺序 进行比较 先 比较 第一 项 如果它们 相同 则 比较 第二个 项目 依 此类推
 不一定 在所有 情况下 都 要 在 装饰 列表 中包含 索引 i  但 包含 它 有两个 好处 排序 是 稳定 的—— 如果两 个 项 具有相同的 键 它们的 顺序 将 保留 在 排序 列表中
 原始 项目 不必 具有 可 比 性 因为 装饰 元组 的 排序 最多 由 前 两 项 决定
 因此 例如 原始 列表 可能包含 无法 直接 排序 的 复数
 这个方法 的 另一个 名 字 是 randal  l
 schwartz  在 perl  程序员 中 推 广 的 schwartzian  transform
 既 然 python  排序 提供了 键 函数 那么 通常 不需要 这种 技术
 使用 cmp  参数 的 旧 方法
 本 howto  中 给出的 许多 结构 都 假定 为 python 2
4 或更高 版本
 在 此 之前 没有 内置 sorted  list
sort  也 没有 关键字参数
 相反 所有 py 2
x  版本 都支持 cmp  参数 来处理 用户 指定 的 比较 函数
 在 py 3
0 中 cmp  参数 被 完全 删除 作为 简化 和 统 一 语言 努 力 的一部分 消除 了 丰 富 的 比较 与 cmp  魔 术 方法 之间的 冲突
 在 py 2
x  中 sort  允许 一个可选 函数可以 调用 它 来 进行比较
 该函数 应该 采用 两个参数 进行比较 然后 返回 负值 为 小于 如果它们 相等 则返回 零 或者 返回 大于 大于 的 正 值
 例如 我们可以 这样做 def  numericcomparex  y
 return  x  y  sorted 52413 cmpnumericcompare 12345 或者 你 可 反 转 比较 的顺序 def  reversenumericx  y
 return  y  x  sorted 52413 cmpreversenumeric 54321 将 代码 从 python 2
x  移植到3
x  时如果 用户 提供 比较 功能 并且 需要 将其转换为 键 函数 则 会出现 这种情况
 以 下 包装器 使 这 很容易 def  cmptokeymycmp  convert  a  cmp  function  into  a  key  function  class  k  def  initself  obj  args  self
obj 0 return  k  要 转换为 键 函数 只需 包装 旧 的 比较 函数 sorted 52413 keycmptokeyreversenumeric 54321 在 python 3
2 中 functools
cmptokey  函数 被添加到 标准库中 的 functools  模块 中
 其 它
 对 于 区域 相关的 排序 请使用 locale
strxfrm  作为 键 函数 或者 locale
strcoll  作为 比较 函数
 reverse  参数 仍然 保持 排序 稳定 性 因此 具有 相等 键 的 记录 保留 原始 顺序
 有趣 的 是通过 使用内置 的 reversed  函数 两次 可以 在没有 参数 的 情况下 模拟 该 效果 data  red 1 blue 1 red 2 blue 2 standardway  sorteddata  keyitemgetter 0 reversetrue  doublereversed  listreversedsortedreverseddata  keyitemgetter 0 assert  standardway  doublereversed  standardway  red 1 red 2 blue 1 blue 2 在 两个 对象 之间 进行比较 时 保证 排序 例 程 使用 lt 
 因此 通过 定义 lt  方法可以 很容易 地 为 类 添加 标准 排序 顺序 student
age  sortedstudentobjects  dave  b 10 jane  b 12 john  a 15 键 函数 不需要 直接 依赖于 被 排序 的 对象
 键 函数 还可以 访问 外部 资源
 例如 如果 学 生成 绩 存储在 字典中 则 可以使用 它们 对 单独的 学生 姓 名 列表 进行排序 students  dave  john  jane  newgrades  john  f  janea  dave  c  sortedstudents  keynewgrades
 用 python  进行 curses  编程
 作者 a
 raymond  发布 版本2
04 摘要 本文档 介绍了 如何使用 curses  扩展模块 控制 文本模式 的 显示
curses  是什么？
python  的 curses  模块
 此 python  模块 相当 简单地 封装 了 curses  提供的 c  函数 如果你 已经 熟悉 在 c  语言中 使用 curses  编程 把 这些 知 识 转 移 的 python  是非常 容易 的
 最大 的差异 在 于 python  中 的 接口 通过 把 不同的 c  函数 合并 来 让 事情 变得 更简单 比如 addstr 、 mvaddstr  和 mvwaddstr  三个 c  函数 被 并 入 addstr  这 一个 方法
 下文中 会 描述 更多的 细节
 本 howto  是 关于 使用 curses  和 python  编写 文本模式 程序 的 概述
 它并不 被设计为 一个 curses  api  的完整 指南 如 需 完整 指南 请参见 ncurses  的 python  库 指南 章节 和 ncurses  的 c  手册 页
 相对 地 本 howto  将 会 给 你 一些 基本 思 路
 开始 和 结束 curses  应用程序
 窗口 和 面板
 显示 文 字
 属性 和 颜色
 用户 输入
c  curses  库 提供了 非常 简单的 输入 机制
 python  的 curses  模块 添加了 一个 基本的 文本 输入 控件
 其他的 库 例如 urwid  拥有 更 丰 富 的 控件 集
 有两个 方法可以 从 窗口 获取 输入 getch  会 刷新 屏幕 然后 等待 用户 按键 如果 之前 调用 过 echo  还 会显 示 所 按 的 键
 你 还可以 选择 指定一个 坐标 以便 在 暂 停 之前 让 光 标 移动 到 那 里
 getkey  将 做 同样的 事 但是 会把 整数 转换为字符串
 每个 字符 将 返回 为 长 度 为1 个字符的 字符串 特殊 键 例如 函数 键 将 返回包含 键 名 的 较 长 字符串 例 如 keyup  或 g
 使用 nodelay  窗口 方法可以 做 到 不 等待 用户
 在 nodelaytrue  之后 窗口 的 getch  和 getkey  将 成为 非阻塞 的
 为 表明 输入 未 就 绪 getch  会返回 curses
err  值 为1 而 getkey  会引发异常
 此外还 有 halfdelay  函数 它 可被用来 实际 地 在 每个 getch  上 设置一个 计时器 如果在 指定 的 延迟 内 没有 输入 可 用 以 十分 之一 秒 为单位 curses  将 引发异常
getch  方法返回一个 整数 如果 数值 在0 到255 之间 它 代表 所 按下 键 的 ascii  码
 大于255 的 值 为 特殊 键 例如 page  up  home  或 方向 键 等
 你可以 将 返回 的 值 与 curses
keyppage  curses
keyhome  或 curses
keyleft  等 常量 做 比较
 你 的 程序 主 循环 看起来 可能 是这样 while  true  c  stdscr
keyhome  x  y 0 curses
ascii  模块 提供了一些 ascii  类 成员 函数 它们 接受 整数或 长度为1 个字符的 字符串参数 这些函数 在 为 这样的 循环 编写 更 具 可读性 的 测试 时 可能会 很有用
 它还 提供了一些 转换 函数 它们 接受 整数或 长度为1 个字符的 字符串参数 并返回 同样的 类型
 例如 curses
ctrl  返回 与 其 参数 相 对应的 控制 字符
 还有一个 可以 提取 整个 字符串 的 方法 getstr
 它并不 经常 被使用 因为它 的功能 相当 受限 可用的 编辑 键 只有 backspace  和 enter  键 它们会 结束 字符串
 也 可以选择 限制为 固定 数量的 字符
getstr 0015 curses
textpad  模块提供了一个 文本 框 它 支持 类似 emacs  的 键 绑定 集
textbox  类 的各种 方法 支持 带 输入 验证 的 编辑 及 包含 或 不包含 末尾 空格 地 收集 编辑 结果
 下面是一个 例子 import  curses  from  curses
gather  请查看 curses
textpad  的 库 文档 了解 更多细节
 更多的 信息
 将 python 2 代码 迁 移 到 python
 作者 brett  cannon  摘要 python 3 是 python  的 未来 但 python 2 仍 处于 活 跃 使用 阶 段 最好 让 您 的项目 在 两个 主要 版本 的 python  上 都 可 用
 本 指南 旨在 帮助 您 了解 如何 最好 地 同时 支持 python 2 和3
 如果您 希望 迁 移 扩展模块 而不是 纯 python  代码 请参阅 将 扩展模块 移植到 python 3
 如果你想 了解 核心 python  开发者 对 于 python 3 的 出现 有 何 看 法 你可以 阅读 nick  coghlan  的 python 3 q  a  或 brett  cannon  的 为什么 要 有 python 3
 有关 迁 移 的 帮助 您 可以通过 电子邮件 向 pythonporting  邮件列表 发送 问题
 简 要 说明
 了解 python 2 和3 之间的 区别4
 注解 note  using  python  m  pip  install  guarantees  that  the  pip  you  invoke  is  the  one  installed  for  the  python  currently  in  use  whether  it  be  a  systemwide  pip  or  one  installed  within  a  virtual  environment
 详情
 删除 对 python 26 及 更早 版本 的 支持
make  sure  you  specify  the  proper  version  support  in  your  setuppy  file
 良 好 的 测试 覆盖 率
 了解 python 2 和3 之间的 区别
 更新 代码
 除 法 in  python 3522
 文本 与 二进制数据 in  python 2 you  could  use  the  str  type  for  both  text  and  binarydata
 文本 数据 二进制数据 decode  encode  format  isdecimal  isnumeric  making  the  distinction  easier  to  handle  can  be  accomplished  byencoding  and  decoding  between  binary  data  and  text  at  the  edge  of  yourcode
prevent  compatibility  regressions
check  which  dependencies  block  your  transition
update  your  setuppy  file  to  denote  python 3 compatibility
use  continuous  integration  to  stay  compatible
 考虑 使用 可选的 静态类型 检查
 套接字 编程 指南
 作者 gordon  mcmillan  摘要 套接字 几乎 无 处 不 在 但是 它 却 是 被 误 解 最 严重 的 技术 之一
 这是一 篇 简单的 套接字 概述
 并不是 一 篇 真正 的 教程—— 你需要 做 更多 的事情 才能 让 它 工作 起来
 其 中 也 并没有 涵盖 细节 细节 会 有 很多 但是 我 希望 它 能 提供 足够的 背景 知 识 让你 像 模 像 样 的 开始 使用 套接字
 套接字
 历史
 创建 套接字
 进程 间 通信
 使用 一个 套接字
 二进制数据
 通过 套接字 传 送 二进制数据 是 可 行 的
 主要 问题 在 于 并非 所有 机器 都 用 同样的 二进制数据 格式
 比如 motorola  芯 片 用 两个 十六进制 字节0001 来表示 一个16 位 整数值1
 而 intel  和 dec  则 会 做 字节 反 转—— 即 用0100 来表示1
 套接字 库 要求 转换16 位 和32 位 整数—— ntohl  htonl  ntohs  htons  其中的「 n 」 表示 network 「 h 」 表示 host 「 s 」 表示 short 「 l 」 表示 long
 在 网络 序列 就是 主机 序列 时 它们 什么 都 不 做 但是如果 机器 是 字节 反 转 的 则 会 适当 地 交换 字节序
 在 现 今 的32 位 机器 中 二进制数据 的 ascii  表示 往往 比 二进制 表示 要 小
 这 是因为 在 非常 多 的时候 所有 long  的 值 均为0 或者1
 字符串形式 的0 为 两个 字节 而 二进制 形式 则 为 四个
 当然 这 不 适用于 固定 长度 的 信息
 自 行 决定 请 自 行 决定
 断 开 连接
 严格 地 讲 你应该 在 close  它 之前 将 套接字 shutdown 
 shutdown  是 发送 给 套接字 另一 端 的一种 建议
 调用时 参数 不同 意义 也不 一样 它 可能 意味着「 我 不会再 发送 了 但 我 仍然 会 监听」 或者「 我 没有 监听 了 真 棒」
 然而 大多数 套接字 库 或者 程序员 都 习 惯 了 忽略 使用 这种 礼 节 因为 通常情况下 close  与 shutdown  close  是 一样的
 所 以 在大多数情况下 不需要 显式 的 shutdown 
 高效 使用 shutdown  的一种 方法 是 在 类似 http  的 交换 中
 客户端 发送 请求 然后 执行 shutdown 1
 这 告诉 服务器 此 客户端 已 完成 发送 但 仍 可以 接收
 服务器 可以通过 接收0 字节 来 检测 eof 
 它可以 假设 它 有 完整的 请求
 服务器 发送 回复
 如果 send  成功 完成 那么 客户端 仍 在 接收
python  进一步 自动 关闭 并 说 当 一个 套接字 被 垃圾 收集 时 如果需要 它 会自动 执行 close 
 但 依 靠 这 个 机制 是一个 非常 坏 的 习 惯
 如果你 的 套接字 在没有 close  的情况下 就 消 失 了 那么 另一 端 的 套接字 可能会 无限 期 地 挂起 以 为 你 只是 慢 了 一步
 完成后 请 close  你 的 套接字
 套接字 何 时 销 毁
 使用 阻塞 套接字 最 糟 糕 的事情 可能 就是 当 另一 边 下 线 时 没有 close  会发生 什么
 你 的 套接字 可能会 挂起
 tcp  是一种 可靠 的 协议 它会在 放 弃 连接 之前 等待 很 长时间
 如果你 正 在 使用 线程 那么 整个 线程 基本上 已经 死 了
 你 无 能 为 力
 只要 你 没有 做 一些 愚 蠢 的事情 比如 在 进行 阻塞 读取 时 持 有 一个 锁 那么 线程 并没有 真正 消耗 掉 资源
 不 要 尝试 杀 死 线程—— 线程 比 进程 更 有效的 部分 原因 是 它们 避免 了 与 自动 回收 资源 相关 的开销
 换句话说 如果你 设 法 杀 死 线程 你 的 整个 进程 很 可能 被 搞 坏
 非阻塞 的 套接字
ipaddress  模块 介绍
 作者 peter  moody  作者 nick  coghlan  概述 本文档 旨在 简 要 介绍 ipaddress  模块
 它 主要 针对 那些 不 熟悉 ip  网络 术 语 的 用户 但 也可能 对 想要 速 览 ipaddress  如何 代表 ip  网络 寻 址 概念 的 网络 工 程 师 有 用
 创建 addressnetworkinterface  对象
 因为 ipaddress  是 一个用于 检查 和 操作 ip  地址的 模块 你 要 做 的第一 件 事 就是 创建 一些 对象
 您可以 使用 ipaddress  从字符串 和 整数 创建 对象
 关于 ip  版本 的 说明
 对 于 不太 熟悉 ip  寻 址 的 读 者 重要的 是 要 知道 internet  协议 当前 正 在 从 协议 的 版本4 转 移 到 版本6
 转换 很大 程度 上 是因为 协议 的 版本4 没有提 供 足够的 地址 来 满足 整个 世界 的需求 特别是 考虑 到 越 来 越 多 的 设备 直接 连接到 互联网
 解释 协议 的两个 版本 之间的 差异的 细节 超出 了 本 介绍 的范围 但 读 者 需要 至少 知道 存 在 这两个 版本 并且 有 时 需要 强制 使用 一个 版本 或其他 版本
ip  主机 地址
 定义 网络
 主机 地址 通常 组合 在一起 形 成 ip  网络 因此 ipaddress  提供了一种 创建、 检查 和 操作 网络 定义 的 方法
 ip  网络 对象 由 字符串 构成 这些 字符串 定义 作为 该 网络 一部分 的 主机 地址 范围
 该 信息 的 最简单 形式 是 网络 地址 网络 前缀 对 其 中 前缀 定义了 比较 的 前导 比特 数 以 确定 地址 是否 是 网络 的一部分 并且 网络 地址 定义了 那些 位 的 预期 值
 对 于 地址 提供了一个 自动 确定 正确 ip  版本 的 工厂函数 ipaddress
ipnetwork 2001 db 8096 ipv 6 network 2001 db 896 网络 对象 不 能 设置 任何 主机 位
 这样做 的 实际 效果 是192
124 没有 描述 网络
 这种 定义 被称为 接口 对象 因为 网络 上 ip  表示法 通常用 于 描述 给定 网络 上 的 计算机 的 网络 接口 并 在 下 一节 中 进一步 描述
 默认情况下 尝试 创建一个 设置了 主机 位 的 网络 对象 将导致 valueerror  被引发
 要 请求 将 附加 位 强制 为零 可以将 标志 strictfalse  传递给 构造函数 ipaddress
024 虽然 字符串形式 提供了更 大 的 灵活 性 但 网络 也可以 用 整数 定义 就像 主机 地址 一样
 在这种情况下 网络 被认为 只包含 由 整数 标识 的 单个 地址 因此 网络 前缀 包括 整个 网络 地址 ipaddress
ipnetwork 42540766411282592856903984951653826560 ipv 6 network 2001 db 8128 与 地址 一样 可以通过 直接调用 类 构造函数 而不是 使用 工厂函数 来 强制 创建 特定 类型 的 网络
 主机 接口
 审 查 addressnetworkinterface  对象
network  作为 address  列表
 将 网络 视为 列表 有 时 很有用
 这意味着 它可以 像这样 索引 它们 net 41 ipv 4 address 192
255 net 61 ipv 6 address 2001 db 81 net 61 ipv 6 address 2001 db 8 ffffffff  它还 意味着 网络 对象 可以使用 像这样 的 列表 成员 测试 语法 if  address  in  network  do  something  根据 网络 前缀 有效 地 完成 包含 性 测试 addr 4 ipaddress
 比较
ipaddress  有意义 地 提供了一些 简单、 希望 直 观 的 比较 对象 的 方法 ipaddress
2 true  如果你 尝试 比较 不同 版本 或 不同类型 的 对象 则会引发 typeerror  异常
 将 ip  地址 与其他 模块 一起使用
 其他 使用 ip  地址的 模块 例如 socket  通常不 会直接 接受 来自 该模块 的 对象
 相反 它们 必须 被 强制转换 为 另一个 模块 可接受 的 整数或 字符串 addr 4 ipaddress
 实例 创建 失败时 获取更多 详细信息
 使用 与 版本 无 关 的 工厂函数 创建 addressnetworkinterface  对象 时 任何 错误 都 将 报告 为 valueerror  带有 一般 错误消息 只是 说 传入的 值 未被 识别 为 该 类型的对象
 缺少 特定 错误 是因为 有必要 知道 该值 是 假设 是 ipv 4 还是 ipv 6 以便 提供 有关 其 被 拒 绝 原因 的更多 详细信息
 为 了 支持 访问 这些 额外 细节 的 用 例 各个 类 构造函数 实际上 引发了 valueerror  子类 ipaddress
addressvalueerror  和 ipaddress
netmaskvalueerror  以 准确 指示 定义 的 哪 一部分 无法 正确 解析
 直接使用 类 构造函数 时 错误消息 更 加 详细
 例如 ipaddress
netmaskvalueerror 64 is  not  a  valid  netmask  但是 两个 模块 特定的 异常都 有 valueerror  作为 它们的 父 类 所 以 如果你不 关 心 特定 类型 的 错误 你 仍然可 以 编写 如 下 代码 try  network  ipaddress
howto  使用 urllib  包 获取 网络 资源
 作者 michael  foord  注解 这 份 howto  文档 的 早期 版本 有 一份 法 语 的 译 文 可 在 urllib 2 le  manuel  manquant  处 查阅
 概述
 提取 url
 数据
 有 时候 你想要 给 一个 url  发送 数据 通常 这 个 url  指向一个 cgi  通 用 网 关 接口 脚本 或者 其他 web  应用
 对 于 http  这通常 使用 一个 post  请求 来完成
 比如 在 浏览器 上 提交 一个 html  表 单
 但 并不是 所有的 post  都 来自 表 单 你 能 使用 一个 post  来 传输 任何 数据 到 你自己的 应用 上
 在 使用 常见的 html  表 单 的情况下 数据 需要 以 标准 的方式 编码 然后再 作为 data  参数 传给 request  对象
 编码 需要使用 一个 来自 urllib
parse  库 的 函数
 具体 操作 如 下 import  urllib
headers
 处理 异常
 异常类 从 urllib
error  模块 中 导出
urlerror
httperror
 包装 起来
 数字1 from  urllib
reason  else  everything  is  fine  注解 the  except  httperror  must  come  first  otherwise  except  urlerror  will  also  catch  an  httperror
info  and  geturl
 由 urlopen  或者 httperror  实例 所返回的 响应 包含 两个 有用的 方法 info  和 geturl  该 响应 由 模块 urllib
response  定义
geturl  返回 所 获取 页面 的 真 实 url
 该方法 很有用 因为 urlopen  或者 所使用的 opener  对象 可能 回 包括 一次 重定向
 所 获取 页面 的 url  未 必 就是 所 请求的 url 
info  该 方法返回一个 类似 字典 的 对象 描述了 所 获取 的 页面 特别是 由 服务器 送 出 的 头 部 信息 headers 
 目前 它是一个 http
httpmessage  实例
openers  and  handlers
 基本 认 证
 代理
installopeneropener  注解 currently  urllib
 注解 httpproxy  will  be  ignored  if  a  variable  requestmethod  is  set  see  the  documentation  on  getproxies
sockets  and  layers
 脚注
 这篇 文档 由 john  lee  审 订
1 例如 google
 将 扩展模块 移植到 python
 对 于 将 扩展模块 移植到 python 3 我们 推荐 下列 资源 supporting  python 3 an  indepth  guide  中 的 migrating  c  extensions  这 一章 这 本 书 介绍了 如何从 python 2 迁 移 到 python 3 包括 指导 读 者 如 何 移植 扩展模块
 py 3 c  项目 中 的 porting  guide  提供了 有关 支持 代码 的 指导 性 建议
 cython  和 cffi  库 提供了对 于 python  的 c  api  的 抽象
 扩展 大 都 需要 进 行 重写 以 使用 两者 中的一个 然后 就 可以通过 库 来处理 各种 python  版本 和 实 现 之间的 差异
 历史 和 许可证
 该 软件 的 历史
python  由 荷 兰 数学 和 计算机 科学 研 究 学 会 cwi  见 httpswww
nl  的 guido  van  rossum  于1990 年 代 初 设计 作为一 门 叫 做 abc  的 语言 的替代 品
 尽管 python  包含了 许多 来自 其他 人 的 贡献 guido  仍 是 其 主要 作者
1995 年 guido  在 弗 吉 尼 亚 州 的 国 家 创 新 研 究 公 司 cnri  见 httpswww
us  继续 他 在 python  上 的 工作 并 在 那 里 发布 了 该 软件 的多个 版本
2000 年 五 月 guido  和 python  核心 开发 团队 转 到 beopen
com  并 组 建 了 beopen  pythonlabs  团队
 同 年 十 月 pythonlabs  团队 转 到 digitalcreations  现 为 zope  corporation  见 httpswww
2001 年 python  软件 基 金 会 psf  见 httpswww
orgpsf  成 立 这是一个 专 为 拥有 python  相关 知 识 产 权 而 创建 的 非 营 利 组织
 zope  corporation  现在是 psf  的 赞 助 成员
 所有的 python  版本 都 是 开源 的 有关 开源 的 定义 参阅 httpsopensource
org 
 历史 上 绝 大多数 python  版本 是 gpl  兼容的 下 表 总结 了 各个 版本 情况
 发布 版本 源 自 年份 所有 者 gpl  兼容？0
0 至1
2 na 19911995 cwi  是1
3 至1
21
219951999 cnri  是1
22000 cnri  否2
com  否1
62001 cnri  否2
12001 psf  否2
12001 psf  是2
12001 psf  是2
12002 psf  是2
22002 psf  是2
2 及 更高2
12001 至 今 psf  是 注解 gpl  兼容 并 不 意味着 python  在 gpl  下 发布
 与 gpl  不同 所有 python  许 可证 都 允许 您 分发 修改 后 的 版本 而无需 开源 所 做 的 更改
gpl  兼容的 许可证 使得 python  可以 与 其 它 在 gpl  下 发布 的 软件 结合 使用 但 其 它 的 许可证 则 不 行
 感谢 众 多 在 guido  指导 下 工作 的 外部 志 愿 者 使得 这些 发布 成为 可能
 获取 或 以 其他方 式 使用 python  的 条 款 和 条件
python  软件 和 文档 的 使用 许可 均 基于 psf  许可 协议
 从 python 3
6 开始 文档中 的 示例、 操作 指导 和其他 代码 采用 的 是 psf  许可 协议 和 零 条 款 bsd  许可 的 双 重 使用 许可
 某些 包含在 python  中 的 软件 是基于 不同的 许可
 这些 许可 会 与 相应 许可 之 下 的 代码 一 同 列出
 有关 这些 许可 的 不完整 列表 请参阅 被 收 录 软件 的 许可证 与 鸣 谢
 用 于 python 390 的 psf  许可 协议
 用 于 python 20 的 beopencom  许可 协议
beopen  python  开源 许可 协议 第1 版1
 用 于 python 161 的 cnri  许可 协议
 用 于 python 090 至12 的 cwi  许可 协议
zeroclause  bsd  license  for  code  in  the  python 390 documentation
 被 收 录 软件 的 许可证 与 鸣 谢
 本节 是 python  发行版 中 收 录 的 第三方 软件 的 许可 和 致谢 清 单 该 清 单 是 不完整 且不 断 增 长 的
mersenne  twister
random  模块包含 基于 httpwww
html  下载 的 代码
 以下是 原始 代码 的完整 注释 声明 a  cprogram  for  mt 19937 with  initialization  improved 2002126
 套接字
socket  模块 使用 getaddrinfo  和 getnameinfo  函数 这些函数 源代码 在 wide  项目 httpwww
jp  的 单独 源文件 中
 异步 套接字 服务
asynchat  和 asyncore  模块 包含以下 声明 copyright 1996 by  sam  rushing  all  rights  reserved  permission  to  use  copy  modify  and  distribute  this  software  and  its  documentation  for  any  purpose  and  without  fee  is  hereby  granted  provided  that  the  above  copyright  notice  appear  in  all  copies  and  that  both  that  copyright  notice  and  this  permission  notice  appear  in  supporting  documentation  and  that  the  name  of  sam  rushing  not  be  used  in  advertising  or  publicity  pertaining  to  distribution  of  the  software  without  specific  written  prior  permission
cookie  管理
http
cookies  模块 包含以下 声明 copyright 2000 by  timothy  omalley  timoalum
 执行 追踪
trace  模块 包含以下 声明 portions  copyright 2001 autonomous  zones  industries  inc
uuencode  与 uudecode  函数
uu  模块 包含以下 声明 copyright 1994 by  lance  ellinghouse  cathedral  city  california  republic  united  states  of  america
xml  远程 过程 调用
xmlrpc
client  模块 包含以下 声明 the  xmlrpc  client  interface  is  copyright  c 19992002 by  secret  labs  ab  copyright  c 19992002 by  fredrik  lundh  by  obtaining  using  andor  copying  this  software  andor  its  associated  documentation  you  agree  that  you  have  read  understood  and  will  comply  with  the  following  terms  and  conditions  permission  to  use  copy  modify  and  distribute  this  software  and  its  associated  documentation  for  any  purpose  and  without  fee  is  hereby  granted  provided  that  the  above  copyright  notice  appears  in  all  copies  and  that  both  that  copyright  notice  and  this  permission  notice  appear  in  supporting  documentation  and  that  the  name  of  secret  labs  ab  or  the  author  not  be  used  in  advertising  or  publicity  pertaining  to  distribution  of  the  software  without  specific  written  prior  permission
testepoll
testepoll  模块 包含以下 声明 copyright  c 20012006 twisted  matrix  laboratories
select  kqueue
select  模块 关于 kqueue  的 接口 包含以下 声明 copyright  c 2000 doug  white 2006 james  knight 2007 christian  heimes  all  rights  reserved
siphash
pythonpyhash
c  文件 包含 marek  majkowski  对 dan  bernstein  的 siphash 24 算法的 实现
 它 包含以下 声明 mit  license  copyright  c 2013 marek  majkowski  marekpopcount
strtod  和 dtoa
pythondtoa
c  文件 提供了 c  语言 的 dtoa  和 strtod  函数用于 将 c  语言 的 双精度 型 和 字符串 进行 转换 由 david  m
 gay  的 同名 文件 派生 而 来 该文件 当前 可 从 httpwww
orgfp  下载
2009 年3 月16 日 检索 到 的 原始 文件 包含以下 版权 和 许可 声明 the  author  of  this  software  is  david  m
openssl
 如果 操作系统 可用则 hashlib  posix  ssl  crypt  模块 使用 openssl  库 来 提高 性能
 此外 适用于 python  的 windows  和 mac  os  x  安装程序 可能 包括 openssl  库 的 拷贝 所 以 在 此处 也 列出了 openssl  许可证 的 拷贝 license  issues  the  openssl  toolkit  stays  under  a  dual  license  i
expat
 除非 使用 withsystemexpat  配置 了 构建 否则 pyexpat  扩展 都 是 用 包含 expat  源 的 拷贝 构建 的 copyright  c 199819992000 thai  open  source  software  center  ltd  and  clark  cooper  permission  is  hereby  granted  free  of  charge  to  any  person  obtaining  a  copy  of  this  software  and  associated  documentation  files  the  software  to  deal  in  the  software  without  restriction  including  without  limitation  the  rights  to  use  copy  modify  merge  publish  distribute  sublicense  andor  sell  copies  of  the  software  and  to  permit  persons  to  whom  the  software  is  furnished  to  do  so  subject  to  the  following  conditions  the  above  copyright  notice  and  this  permission  notice  shall  be  included  in  all  copies  or  substantial  portions  of  the  software
libffi
 除非 使用 withsystemlibffi  配置 了 构建 否则 ctypes  扩展 都 是包含 libffi  源 的 拷贝 构建 的 copyright  c 19962008 red  hat  inc  and  others
zlib
 如果 系统上 找到 的 zlib  版本 太 旧 而 无法 用 于 构建 则 使用 包含 zlib  源代码 的 拷贝 来构建 zlib  扩展 copyright  c 19952011 jeanloup  gailly  and  mark  adler  this  software  is  provided  asis  without  any  express  or  implied  warranty
cfuhash
tracemalloc  使用 的哈希 表 的 实现 基于 cfuhash  项目 copyright  c 2005 don  owens  all  rights  reserved
libmpdec
w 3 c  c 14 n  测试 套件
test  包 libtestxmltestdatac 14 n 20 中 的 c 14 n 2
0 测试 套件 来源 于 w 3 c  网 站 httpswww
orgtrxmlc 14 n 2 testcases  并 根据 bsd  许可证 三 条 款 版 发行 copyright  c 2013 w 3 cr  mit  ercim  keio  beihang  all  rights  reserved
creating  a  source  distribution
specifying  the  files  to  distribute
 在3
1 版更改 an  existing  generated  manifest  will  be  regeneratedwithout  sdist  comparing  its  modification  time  to  the  one  ofmanifest
 在3
3 版更改 manifest  files  start  with  a  comment  indicating  theyare  generated
 files  without  this  comment  are  not  overwritten  orremoved
 在3
2 版更改 sdist  will  read  a  manifest  file  if  nomanifest
 在3
7 版更改 readme
rst  is  now  included  in  the  list  of  distutilsstandard  readmes
 there  are  several  other  commands  available  in  themanifest  template  minilanguage  see  section  创建 源码 发行 包 sdist  命令
 include  all  python  source  files  in  the  distutils  and  distutilscommand  subdirectories  because  packages  corresponding  to  those  two  directories  were  mentioned  in  the  packages  option  in  the  setup  scriptsee  section  编写 安装 脚本2
manifestrelated  options
 编写 安装 脚本
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
 as  we  saw  in  section  一个简单的例子 above  the  setup  script  consists  mainly  of  a  call  to  setup  andmost  information  supplied  to  the  distutils  by  the  module  developer  issupplied  as  keyword  arguments  to  setup
command  there  are  only  two  differences  between  this  and  the  trivial  onefiledistribution  presented  in  section  一个简单的例子 more  metadata  andthe  specification  of  pure  python  modules  by  package  rather  than  bymodule
listing  whole  packages
listing  individual  modules
 thissimplest  case  was  shown  in  section  一个简单的例子 here  is  a  slightlymore  involved  example  pymodules  mod 1 pkg
describing  extension  modules
 扩展名 和 软件包
extension  source  files
preprocessor  options
 例如 extension
library  options
 其他 选项
relationships  between  distributions  and  packages
lets  look  at  a  bunch  of  examples  requires  expression  解释1
some  examples  provides  expression  解释 mypkg  provide  mypkg  using  the  distribution  version  mypkg 1
installing  scripts
 scriptsscriptsxmlprocparse  scriptsxmlprocval  在3
1 版更改 all  the  scripts  will  also  be  added  to  the  manifestfile  if  no  template  is  provided
 see  specifying  the  files  todistribute
installing  package  data
dat  在3
1 版更改 all  the  files  that  match  packagedata  will  be  addedto  the  manifest  file  if  no  template  is  provided
 see  specifying  thefiles  to  distribute
installing  additional  files
 在3
1 版更改 all  the  files  that  match  datafiles  will  be  added  tothe  manifest  file  if  no  template  is  provided
 see  specifying  thefiles  to  distribute
additional  metadata
 this  information  includes  元数据 描述 值 注释 name  包 名称 短 字符串1 version  此 发布 的 版本 短 字符串12 author  软件包 作者 的 姓 名 短 字符串3 authoremail  软件包的 作者 的 电子邮件 地址 电子邮件 地址3 maintainer  软件包 维护 者 的名字 短 字符串3 maintaineremail  软件包 维护 者 的 电子邮件 地址 电子邮件 地址3 url  软件包的 网 址 网 址1 description  软件包的 简短 摘要 说明 短 字符串 longdescription  软件包的 详细 说明 长 字符串4 downloadurl  可以 下载 软件包的 网 址 网 址 classifiers  分 类 列表 字符串列表67 platforms  平台 清 单 字符串列表68 keywords  关键字 列表 字符串列表68 license  软件包 许可证 短 字符串5 注释1
 classifiers  development  status 4 beta  environment  console  environment  web  environment  intended  audience  end  usersdesktop  intended  audience  developers  intended  audience  system  administrators  license  osi  approved  python  software  foundation  license  operating  system  macos  macos  x  operating  system  microsoft  windows  operating  system  posix  programming  language  python  topic  communications  email  topic  officebusiness  topic  software  development  bug  tracking  在3
7 版更改 setup  now  warns  when  classifiers  keywords  orplatforms  fields  are  not  specified  as  a  list  or  a  string
debugging  the  setup  script
 命令 参考
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
 安装 模块 install  命令 族
install  命令 会 确保 build  命令 已经 运行 然后 运行 子 命令 installlibinstalldata  和 installscripts
installdata
 此 命令 会 安装 随 发行 包 一 同 提供的 所有 数据 文件
installscripts
 此 命令 会 安装 发行 包 中的所有 python  脚本
 创建 源码 发行 包 sdist  命令
 上 传 包 到 包 索引
 供 参考 的 最新 pypi  文档 可以在 阅读 python  包用户指南 找到
creating  built  distributions
 创建 rpm  软件包
spec  文件 配置 或 选项 distutils  安装 脚本 选项 名称 name  摘要 在 序 言中 description  版本 version  供 应 商 author  和 authoremail  或 maintainer  和 maintaineremail  版权 license  url  url  d  描述 部分 longdescription  additionally  there  are  many  options  in 
spec  文件 配置 或 选项 bdistrpm  选项 默认值 发布 版本 release 1 组织 group  developmentlibraries  供 应 商 vendor  同 上 打包 packager  none  提供 provides  none  需求 requires  none  冲突 conflicts  none  淘 汰 obsoletes  none  distribution  distributionname  none  构建 要求 buildrequires  none  icon  icon  none  obviously  supplying  even  a  few  of  these  options  on  the  commandlinewould  be  tedious  and  errorprone  so  its  usually  best  to  put  them  inthe  setup  configuration  file  setup
cfgsee  section  编写 设置 脚本 的 配置文件
 if  you  distribute  or  package  many  python  moduledistributions  you  might  want  to  put  options  that  apply  to  all  of  themin  your  personal  distutils  configuration  file 
if  you  want  to  temporarily  disable  this  file  you  can  pass  the  nousercfg  option  to  setup
creating  windows  installers
crosscompiling  on  windows
the  postinstallation  script
vista  user  access  control  uac
distutils  示例
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
 本 章节 提供 几个 基础 示例 来 帮助 用户 入门 distutils
 关于 使用 distutils  的 额外 信息 可以 参考 distutils  cookbook
 参见 distutils  cookbook  一 套 展示 如何 更好地 控制 和 使用 distutils  的 方法
 纯 python  分发 通过 module
 纯 python  分发 通过 包
 单个 扩展模块
 扩展模块 用 extmodules  选项 指定
packagedir  对 在 哪 寻找 扩展 源文件 无效 它只 对 纯 python  模块 的 源文件 有效
 最简单的 一个 用 单个 c  源文件 写 的 单 扩展模块 是 root  setup
c  如果 foo  扩展 属于 根 包 则 配置 脚本 可以是 from  distutils
c  如果 扩展 在 包 中 比如 foopkg  那么 使用 完全 相同 的 源文件 树 排 布 通过 改变 扩展 的名字 这 个 扩展 很容易 放入 foopkg  包 中 from  distutils
 检查 一个 包
check  命令 允许你 校 验 你 的 包 的 元数据 是否 满足 生成 分发 的 最低 要求
 直接使用 你 的 setup
py  脚本 来 运行 它
 如果 缺 了一些 东西 check  会显示 警告
 我们 来 用 单个 脚本 举例 from  distutils
core  import  setup  setupnamefoobar  运行 check  命令 会显示 一些 警告 python  setup
py  check  running  check  warning  check  missing  required  metadata  version  url  warning  check  missing  metadata  either  author  and  authoremail  or  maintainer  and  maintaineremail  should  be  supplied  如果你 在 longdescription  域 中 使用 restructuredtext  语法 并且 安装了 docutils  你可以用 check  命令 和 restructuredtext  选项 检查 语法 是否 正确
 比如 如果 setup
py  脚本 改 成 from  distutils
com  longdescriptiondesc  长 描述 中 有 问题 的地方 通过使用 docutils  解析器 check  能 进行 删除 python  setup
 读取 元数据
distutils
setup  函数 提供一个 通过 项目的 setup
py  脚本 来 查询 项目的 元数据 的 域 的 命令行接口 python  setup
py  name  distribute  这 个 调用 通过 运行 distutils
setup  函数 读取 name  元数据
 然而 当 源文件 或者 二进制 分发 用 distutils  创建时 元数据 域 写入 一个名为 pkginfo  的 静态 文件
 当 一个 基于 distutils  的项目 安装 在 python  中 时 pkginfo  文件 随着 分发 的 模块 和 包 一起 复制 到 nameversionpyx
egginfo  中 其 中 name  是 项目 的名字 version  是 元数据 中定义的 版本 pyx
x  则 是 python  的 大 版本 和 小 版本 如2
7 或者3
 你可以 读 回 静态 文件 使用 distutils
distributionmetadata  类 和 它 的 readpkgfile  方法 from  distutils
description  easily  download  build  install  upgrade  and  uninstall  python  packages  注意 类 也可以 用 元数据 文件 载入 值 来 实例化 pkginfopath  distribute 0
 编写 设置 脚本 的 配置文件
 分发 python  模块 遗 留 版本
api  参考 引用
 参见 new  and  changed  setup
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
distutilscore  分发 包 功能 的 核心
core  是为了 使用 distutils  工具 唯一 要 安装 的 模块
 它提供 函数 setup  该函数 被 setup  脚本 调用
 间接 提供了 类 distutils
distribution  和 distutils
command
 参数 名称 值 类型 name  包 的名字 字符串 version  包 的 版本号 参见 字符串 distutils
version  description  单 行 的 包 的描述 字符串 longdescription  更 长 的 包 描述 字符串 author  包 的 作者 字符串 authoremail  包 的 作者 的 电子邮件 字符串 maintainer  the  name  of  the  current  字符串 maintainer  if  different  from  the  author
 note  that  if  the  maintainer  is  provided  distutils  will  use  it  as  the  author  in  pkginfo  maintaineremail  当前 维护 者 的 电子邮件 地址 如果不 字符串 同 与 作者 url  包 的 url  主 页 字符串 downloadurl  包 的 下载 地址 字符串 packages  a  list  of  python  packages  that  字符串列表 distutils  will  manipulate  pymodules  distutils  会 操作 的 python  模块 列 字符串列表 表 scripts  要 构建和 安装 的 独立 脚本 文件 的 列表 字符串列表 extmodules  要 构建 的 python  扩展 的 列表 类 distutils
extension  的 实例 的 列表 classifiers  包 的 类别 列表 a  list  of  strings  valid  classifiers  are  listed  on  pypi
 distclass  要使用的 类 distribution  类 distutils
distribution  的子类 scriptname  setup
py  脚本 名称—— 默认为 字符串 sys
argv 0 scriptargs  提供给 安装 脚本 的 参数 字符串列表 options  安装 脚本 的 默认 选项 字典 license  包 的 许可证 字符串 keywords  descriptive  metadata  see  pep  字符串列表 或 逗号分隔 的 字符串314 platforms  字符串列表 或 逗号分隔 的 字符串 cmdclass  a  mapping  of  command  names  to  字典 command  subclasses  datafiles  要 安装 的 数据 文件 列表 列表 packagedir  a  mapping  of  package  to  字典 directory  names  distutils
 stopafter  tells  setup  when  to  stop  processing  possible  values  值 描述 init  stop  after  the  distribution  instance  has  been  created  and  populated  with  the  keyword  arguments  to  setup  config  stop  after  config  files  have  been  parsed  and  their  data  stored  in  the  distribution  instance  commandline  stop  after  the  commandline  sys
 it  accepts  the  following  keyword  arguments  in  its  constructor  参数 名称 值 类型 name  the  full  name  of  the  extension  字符串 including  any  packages  ie
 not  a  filename  or  pathname  but  python  dotted  name  sources  list  of  source  filenames  字符串列表 relative  to  the  distribution  root  where  the  setup  script  lives  in  unix  form  slash  separated  for  portability
 includedirs  list  of  directories  to  search  字符串列表 for  cc  header  files  in  unix  form  for  portability  definemacros  list  of  macros  to  define  each  元组 列表 macro  is  defined  using  a 2 tuple  name  value  where  value  is  either  the  string  to  define  it  to  or  none  to  define  it  without  a  particular  value  equivalent  of  define  foo  in  source  or  dfoo  on  unix  c  compiler  command  line  undefmacros  要 明确 取消 定义 的 宏 列表 字符串列表 librarydirs  list  of  directories  to  search  字符串列表 for  cc  libraries  at  link  time  libraries  要 链接 的 库 名 列表 不 是 文件名 或 路 字符串列表 径 runtimelibrarydirs  list  of  directories  to  search  字符串列表 for  cc  libraries  at  run  time  for  shared  extensions  this  is  when  the  extension  is  loaded  extraobjects  list  of  extra  files  to  link  with  字符串列表 eg
 extracompileargs  any  extra  platform  and  字符串列表 compilerspecific  information  to  use  when  compiling  the  source  files  in  sources
 extralinkargs  any  extra  platform  and  字符串列表 compilerspecific  information  to  use  when  linking  object  files  together  to  create  the  extension  or  to  create  a  new  static  python  interpreter
 exportsymbols  list  of  symbols  to  be  exported  字符串列表 from  a  shared  extension
 depends  扩展名 依赖 的 文件 列表 字符串列表 language  extension  language  i
 c  字符串 c  objc
 optional  指定 扩展 中 的 构建 失败 不应 中 止 构建 布尔 过程 而 只是 跳过 扩展
 在3
8 版更改 on  unix  c  extensions  are  no  longer  linked  to  libpython  except  on  android  and  cygwin
 在3
7 版更改 distribution  now  warns  if  classifiers  keywords  and  platforms  fields  are  not  specified  as  a  list  or  a  string
distutilsccompiler  ccompiler  基类
 the  exact  set  of  executables  that  may  be  specified  here  depends  on  the  compiler  class  via  the  executables  class  attribute  but  most  will  have  属性 描述 compiler  cc  编译器 linkerso  用于创建 共享 对象 和 库 的 链接器 linkerexe  用于创建 二进制 可执行文件 的 链接器 archiver  静态 库 创建 者 on  platforms  with  a  commandline  unix  doswindows  each  of  these  is  a  string  that  will  be  split  into  executable  name  and  optional  list  of  arguments
distutilsunixccompiler  unix  c  compiler
distutilsmsvccompiler  microsoft  compiler
distutilsbcppcompiler  borland  compiler
distutilscygwincompiler  cygwin  compiler
distutilsarchiveutil  archiving  utilities
distutilsdeputil  dependency  checking
distutilsdirutil  directory  tree  operations
 在3
1 版更改 nfs  files  are  ignored
distutilsfileutil  single  file  operations
 警告 handles  crossdevice  moves  on  unix  using  copyfile
distutilsutil  miscellaneous  other  utility  functions
 返回值 的 示例 linuxi 586 linuxalpha  solaris 2
8 and  earlier  在3
9 版更改 the  aix  platform  string  format  now  also  includes  the  technology  level  build  date  and  abi  bitsize
 在3
3 版更改 create 
pyc  files  with  an  import  magic  tag  in  their  name  in  a  pycache  subdirectory  instead  of  files  without  tag  in  the  current  directory
 在3
5 版更改 create 
pyc  files  according  to  pep 488
distutilsdist  the  distribution  class
distutilsextension  the  extension  class
distutilsdebug  distutils  debug  mode
 本 模块提供 debug  标识
distutilserrors  distutils  exceptions
distutilsfancygetopt  wrapper  around  the  standard  getopt  module
distutilsfilelist  the  filelist  class
distutilslog  simple  pep 282 style  logging
distutilsspawn  spawn  a  subprocess
distutilssysconfig  system  configuration  information
distutilstextfile  the  textfile  class
 the  options  are  all  boolean  and  affect  the  values  returned  by  readline  选项 名称 描述 默认值 stripcomments  strip  from  to  endofline  true  as  well  as  any  whitespace  leading  up  to  the  unless  it  is  escaped  by  a  backslash  lstripws  strip  leading  whitespace  from  false  each  line  before  returning  it  rstripws  strip  trailing  whitespace  true  including  line  terminator  from  each  line  before  returning  it
distutilsversion  version  number  classes
distutilscmd  abstract  base  class  for  distutils  commands
creating  a  new  distutils  command
distutilscommand  individual  distutils  commands
distutilscommandbdist  build  a  binary  installer
distutilscommandbdistpackager  abstract  base  class  for  packagers
distutilscommandbdistdumb  build  a  dumb  installer
distutilscommandbdistmsi  build  a  microsoft  installer  binary  package
bdistmsi 3
9 版后已移除 use  bdistwheel  wheel  packages  instead
builds  awindows  installer 
in  most  cases  the  bdistmsiinstaller  is  a  better  choice  than  the  bdistwininst  installerbecause  it  provides  better  support  for  win 64 platforms  allowsadministrators  to  perform  noninteractive  installations  and  allowsinstallation  through  group  policies
distutilscommandbdistrpm  build  a  binary  distribution  as  a  redhat  rpm  and  srpm
distutilscommandbdistwininst  build  a  windows  installer
3
8 版后已移除 use  bdistwheel  wheel  packages  instead
distutilscommandsdist  build  a  source  distribution
distutilscommandbuild  build  all  files  of  a  package
distutilscommandbuildclib  build  any  c  libraries  in  a  package
distutilscommandbuildext  build  any  extensions  in  a  package
distutilscommandbuildpy  build  the  pypyc  files  of  a  package
distutilscommandbuildscripts  build  the  scripts  of  a  package
distutilscommandclean  clean  a  package  build  area
distutilscommandconfig  perform  package  configuration
distutilscommandinstall  install  a  package
distutilscommandinstalldata  install  data  files  from  a  package
distutilscommandinstallheaders  install  cc  header  files  from  a  package
distutilscommandinstalllib  install  library  files  from  a  package
distutilscommandinstallscripts  install  script  files  from  a  package
distutilscommandregister  register  a  module  with  the  python  package  index
distutilscommandcheck  check  the  metadata  of  a  package
 扩展 distutils
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
distutils  可以通过 各 种方式 扩展
 大多数 扩展 都 采用 新 命令 或 现有 命令 的 替换 形式
 例如 可以 编写 新 命令 以 支持 新 的 特定于 平台 的 包 格式 但是 可以 修改 现有 命令 的 替换 以 修改 命令 在 包 上 的 操作 细节
distutils  的 大多数 扩展 都 在 想要 修改 现有 命令 的 setup
py  脚本 中 编写 其 中 许多 只是 简单地 在
py  文件 以外 添加 了一些 应当被 拷贝 到 包 中的文件 后缀 以便 使用
 大多 部 distutils  命令 的 实现 都 是 distutils
command  类 的子类
 新增 命令 可 直接 继承自 command  而 替换 命令 往往 间接 派生 自 command  直接 子类化 它们所 替换 的 命令
 所有 命令 都 要求 自 command  派生
 集成 新 的 命令
 有 多种 方法 可 将 新 的 命令 实现 集成 到 distutils  中
 最 困 难 的一种 是 鼓 动 在 distutils  自身 内部 包含 新特性 并 等待 以及 要求 某个 python  版本 提供 该 支持
 出 于 多种 原因 这 确实 是 相当 难 的
 对 于 大多数 需求 来说 最 为 常见 并且 可能 最 为 合理的 一种 则 是通过 你自己的 setup
py  脚本 来 包含 新 的 实现 然后 让 distutils
setup  函数 使用它们 from  distutils
 如果 新 的 实现 必须 通过 特定的 包 来 使用 则 此 方式 最 为 适 宜 因为 每个 对 这 个 包 感兴趣的 人 都 将 会 需要 有新的 命令 实现
 从 python 2
4 开始 还有 第三个 选项 可 用 其 目标 是 允许 添加 支持 现有 setup
py  脚本 的 新 命令 而 不需要 修改 python  安装包
 这 预 计 可 允许 第三方 扩展 提供对 附加 打包 系统 的 支持 而 相应 命令 又 可用于 任何 distutils  命令 可 被使用 的地方
 新 的 配置 选项 commandpackages  命令行选项 为 commandpackages  可用来 指定 附加 包 以 在 其 中查找 实现 新增 命令 的 模块
 像 所有 distutils  选项 一样 这可以通过 命令行 或 配置文件 来指定
 此 选项 只能 在 配置文件 的 global  小节 之 中 或 在命令行 的 任何 命令 之前 设置
 如果是 设置 在 配置文件 中 则 它可被 命令行 设置 重载 如果 在命令行中 将其设 为 空字符串 则 将 会 使用 默认值
 此 选项 绝 不 应当 在 随 特定 包 提供的 配置文件 中 设置
 这 个 新 选项 可被用来 添加 任意 数量的 包 到 查找 命令 实现 的 包 列表 多个 包 名 应当 以 逗号分隔
 当 未 指明 时 查找 将 只 在 distutils
command  包 中进行
 但是 当 setup
py  附带 commandpackages  distcmdsbuildcmds  选项 运行时 distutils
command  distcmds  和 buildcmds  包 将按 此 顺序 被 查找
 新 的 命令 应当 在 与 命名 同名的 模块 中 由 同名的 类 来实现
 给定 上述 示例 命令行选项 则 命令 bdistopenpkg  可 由 类 distcmds
bdistopenpkg  或 buildcmds
bdistopenpkg  来实现
 添加新 的 发布 类型
 创建 发布 在 dist  目录 中的文件 的 命令 需要 将 command  filename  二 元组 添加到 self
distfiles  以便 upload  可以将 其 上 传 到 pypi
 二 元组中 的 filename  不包含 路径 信息 而 只有 文件名 本身
 在 dryrun  模式下 二 元组 仍然 应当被 添加 以 表示 必须 创建 的内容
python  包 索引 pypi
python  包 索引 pypi  存储 描述 与 distutils  和其他 发布 工具 一起 打包的 发行版 的 元数据 以及 分发 存档 本身
 供 参考 的 最新 pypi  文档 可以在 阅读 python  包用户指南 找到
an  introduction  to  distutils
 注解 这篇 文档 只有在 httpssetuptools
html  上 的 setuptools  文档 独立 涵盖 此处 包含的 所有 相关信息 之前 才会 单独 保留
this  document  covers  using  the  distutils  to  distribute  your  pythonmodules  concentrating  on  the  role  of  developerdistributor  if  yourelooking  for  information  on  installing  python  modules  you  should  referto  the  安装 python  模块 旧版 chapter
 概念 和 术 语
 as  adeveloper  your  responsibilities  apart  from  writing  solid  welldocumented  and  welltested  code  of  course  are  编写 一个 设置 脚本 setup
py  by  convention  可选 编写 设置 脚本 的 配置文件 create  a  source  distribution  optional  create  one  or  more  built  binary  distributions  每个 这些 任务 均 已 在 此 文档 覆盖
 一个简单的例子
general  python  terminology
 nevertheless  just  to  be  surethat  everyone  is  operating  from  a  common  starting  point  we  offer  thefollowing  glossary  of  common  python  terms  模块 the  basic  unit  of  code  reusability  in  python  a  block  of  code  imported  by  some  other  code
 扩展模块 a  module  written  in  the  lowlevel  language  of  the  python  implementation  cc  for  python  java  for  jython
 包 a  module  that  contains  other  modules  typically  contained  in  a  directory  in  the  filesystem  and  distinguished  from  other  directories  by  the  presence  of  a  file  init
distutilsspecific  terminology
python  在 windows  上 的 常见问题
 我 怎样 在 windows  下 运行 一个 python  程序？
 我 怎 么 让 python  脚本 可执行？
 在 windows  上 标准 python  安装程序 已 将
py  扩展名 与 文件类型 python
file  相关联 并 为 该 文件类型 提供 运行 解释器 的 打开 命令 dprogram  filespythonpython
exe 1
 这 足以 使 脚本 在 命令 提示符 下 作为 foo
py  命令 被执行
 如果 希望 通过 简单地 键 入 foo  而无需 输入 文件 扩展名 来执行 脚本 则需要 将
py  添加到 pathext  环境变量 中
 为什么 有 时候 python  程序 会 启动 缓 慢？
 通常 python  在 windows  上 启动 得 很 快 但 偶 尔 会 有 错误报告 说 python  突 然 需要 很 长时间 才能 启动
 更 令人 费 解 的 是 在其他 配置 相同 的 windows  系统上 python  却 可以 工作 得 很好
 该 问题 可能 是由于 计算机 上 的 杀 毒 软件 配置 错误 造成 的
 当 将 病 毒 扫描 配置 为 监视 文件系统 中所有 读取 行为 时 一些 杀 毒 扫描 程序 会导致 两个 数量 级 的 启动 开销
 请 检查 你 系统 安装 的 杀 毒 扫描 程序 的 配置 确保 两 台 机 它们是 同样的 配置
 已知 的 mcafee  杀 毒 软件 在 将 它 设置为 扫描 所有 文件系统 访问 时 会产生 这个问题
 我 怎样 使用 python  脚本 制 作 可执行文件？
 请参阅 cxfreeze  来 了解 distutils  扩展 它 允许你 基于 python  代码 创建 控制台 和 gui  可执行文件
 py 2 exe  是 最 流行的 用 来构建 基于 python 2
x  的 可执行文件 的 扩展 它 暂 时 还 不支持 python 3 但 新 的 版本 已 在 开发 中
pyd  文件 和 dll  文件 相同 吗？
 我 怎样 将 python  嵌入 一个 windows  程序？
 在 windows  应用程序中 嵌入 python  解释器 可以 总结 如 下1
 请 不 要 直接 在你的
exe  文件 中 内置 python 
 在 windows  上 python  必须是一个 dll  这样 才 可以 处理 导入 的 本身 就是 dll  的 模块
 这是 第一个 未 记录 的 关键 事实
 相反 链接到 pythonnn
dll  它 通 常 安装 在 cwindowssystem  中
 nn  是 python  版本 如 数字33 代 表 python 3
3
 你可以通过 两 种不同 的方式 链接到 python 
 加载 时 链接 意味着 链接到 pythonnn
lib  而 运行时 链接 意味着 链接 pythonnn
dll 
 一般 说明 python  nn
lib  是 所 谓 的 import  lib  对应于 pythonnn
dll 
 它只 定义了 链接器 的符号
 运行时 链接 极 大 地 简化 了 链接 选项 一 切 都 在运行时 发生
 你的代码 必须使 用 windows  的 loadlibraryex  程序 加载 pythonnn
dll 
 代码 还 必须使用 使用 windows  的 getprocaddress  例 程 获得 的 指针 访问 pythonnn
dll  中 程序 和 数据 即 python  的 c  api 
 宏 可以使 这些 指针 对 任何 调用 python  c  api  中 的 例 程 的 c  代码 都 是 透明 的
 borland  提示 首先 使用 coff 2 omf
exe  将 pythonnn
lib  转换为 omf  格式
 如果你使用 swig  很容易 创建一个 python  扩展模块 它 将 使 应用程序 的 数据 和 方法 可 供 python  使用
swig  将 为 你 处理 所有 蹩 脚 的 细节
 结果是 你 将 链接到
exe  文件 中 的 c  代码 你 不必 创建 dll  文件 这 也 简化 了 链接
 swig  将 创建一个 init  函数 一个 c  函数 其 名称 取决于 扩展模块 的 名 称
 例如如果 模块 的 名称 是 leo  则 init  函数 将 被称为 initleo 
 如果您 使用 swig  阴 影 类 则 init  函数 将 被称为 initleoc 
 这 初始化 了 一个 由 阴 影 类 使用 的 隐藏 辅助 类
 你可以 将 步骤2 中 的 c  代码 链接到
exe  文件 的原因 是 调用 初始化 函数 等 同 于 将 模块 导入 python  这是 第二个 关键 的 未 记 载 事实
4
 简 而言 之 你可以用 以下代码 使用 扩展模块 初始化 python  解释器
 python  c  api  存 在 两个 问题 如果你使用 除 msvc  之外 的 编译器 用 于 构建 python
dll  这 将 会 变得 明显
 问题1 采用 file  参数 的 所 谓 极 高级 函数 在 多 编译器 环境中 不 起作用 因为 每个 编译器 的 file  结构体 概念 都 不同
 从 实现 的 角度 来 看 这些 是非常 低 级 的功能
 问题2 在 为 void  函数 生成 包装器 时 swig  会生成 以下代码 pyincrefpynone  resultobj  pynone  return  resultobj  pynone  是一个 宏 它 扩展 为 对 pythonnn
dll  中 名为 pynonestruct  的 复杂 数据结构 的 引用
 同样 此 代码 将 在 多 编译器 环境中 失败
 将 此 类 代码 替换为 return  pybuildvalue  有可能 使用 swig  的 typemap  命令 自动 进行 更改 但 我 无法 使 其 工作 我 是一个 完全 的 swig  新 手
 使用 python  shell  脚本 从 windows  应用程序 内部 建立 python  解释器 窗口 并 不是一个 好 主 意 生成 的 窗口 将 独立 于 应用程序 的 窗口 系统
 相反 你 或 wxpythonwindow  类 应该 创建一个 本机 解释器 窗口
 将 该 窗口 连接到 python  解释器 很容易
 你可以 将 python  的 io  重定向 到 支持 读写 的 任意 对象 因此你 只需要 一个包含 read  和 write  方法 的 python  对象 在 扩展 模块中定义
 如何 让 编辑器 不 要 在 我 的 python  源代码 中 插入 tab ？
 本 faq  不 建议 使用 制表符 python  样式 指南 pep 8 为 发行 的 python  代码 推荐4 个空格 这 也是 emacs  pythonmode  默认值
 在任何 编辑器 下 混合 制表符 和 空格 都 是一个 坏 主 意
 msvc  在 这 方面 没有 什么 不同 并且 很容易 配置 为 使用 空格 点击 tools ‣ options ‣ tabs  对 于 文件类型 default  设置 tab  size  和 indent  size  为4 并 选择 插入 空格 单 选 按钮
 如果 混合 制表符 和 空格 导致 前导 空格 出现 问题 python  会引发 indentationerror  或 taberror 
 你 还可以 运行 tabnanny  模块 以 批 处理 模式 检查 目录 树
 如何在 不 阻塞 的情况下 检查 按键？
 使用 msvcrt  模块
 这是一个 标准 的 windows  专属 扩展模块
 它 定义了一个 函数 kbhit  用 于 检查 是否有 键 盘 中 的某个 键 被 按下 以及 getch  用于获取 一个字符 而 不 将 其 回显
 编程 常见问题
 一般 问题
python  有 没有提 供 断 点 与 单 步 调试 等 功能 的 源码 层次 的 调试器？
 有 的
 以 下 介绍 了一些 python  的 调试器 内置函数 breakpoint  允许你 使用 其 中的任何 一种
pdb  模块 是一个简单 但是 够 用 的 控制台 模式 python  调试器
 它 是 标准 python  库 的一部分 并且 已 收 录 于 库参考 手册
 你也可以 通过使用 pdb  代码 作为 样 例 来 编写 你自己的 调试器
 作为 标准 python  发行版 附带 组件 的 idle  交互式 环境 通常 位于 toolsscriptsidle  中 包含一个 图形 化 的 调试器
pythonwin  是一个包含 有 基于 pdb  的 gui  调试器 的 python  ide
 pythonwin  调试器 会 为 断 点 加上 颜色 并 具有 许多 很 棒 的 特性 例如 也可以 非 pythonwin  程序
 pythonwin  是 python  for  windows  extensions  项目 的一部分 也是 activepython  发行版 的一部分 参见 httpswww
comactivepython
eric  是一个 基于 pyqt  和 scintilla  编辑 组件 构建 的 ide
pydb  是 标准 python  调试器 pdb  的 一个 版本 经过 修改 后 可 与 ddd  数据 显示 调试器 一起使用 ddd  是一种 流行的 图形 化 调试器 前 端
 pydb  可以在 httpbashdb
netpydb  找到 ddd  可以在 httpswww
orgsoftwareddd  找到
 有许多 商 业 python  ide  包括 图形 调试器
 他们 包括 wing  ide  httpswingware
 是否有 能 帮助 寻找 漏洞 或 执行 静态 分析 的工具？
 有 的
pylint  和 pyflakes  可 进行 基本 检查 来 帮助 你 尽 早 捕 捉 漏洞
 静态类型 检查 器 例如 mypy 、 pyre  和 pytype  可以 检查 python  源代码 中 的 类型提示
 我 如何 能够 通过一个 python  脚本 创建一个 独立 运行 的 二进制文件？
 如果你想要 的 只是 一个 独立的 程序 用户可 以 下载 和 运行 而不必 先 安装 python  发行版 你 就 不需要 将 python  编译 成 c  代码
 有许多 工具 可以 确定 程序 所需的 模块 集 并 将 这些模块 与 python  二进制文件 绑定 在一起 以 生成 单个 可执行文件
 一种 是 使用 冻结 工具 它包含 在 python  源代码 树 toolsfreeze  中
 它 将 python  字节 代码 转换为 c  数组 一个 c  编译器 你可以 将所有 模块 嵌入到 一个 新 程序中 然后 将 其 与 标准 python  模块 链接
 它 的 工作 原 理 是 递归 扫描 源代码 以获取 import  语句 两种 形式 并 在 标准 python  路径 和 源 目录 用 于 内置模块 中查找 模块
 然后 它 将 用 python  编写 的 模块 的 字节码 转换为 c  代码 可以使用 编 组 模块 转换为 代码对象 的 数组 初始化器 并 创建一个 定制 的 配置文件 该文件 仅 包含 程序中 实际 使用 的 内置模块
 然后 它 编译 生成 的 c  代码 并将其 与 python  解释器 的 其 余部分 链接 以 形 成一个 独立的 二进制文件 其 行为与 你 的 脚本 完全 相同
 显然 freeze  需要 一个 c  编译器
 有 几个 其他 实 用 工具 不需要
 一个 是 thomasheller  的 py 2 exe  仅限 windows  httpwww
org  另一个 工具 是 anthony  tuininga  的 cxfreeze
 是否有 python  程序 规范 代码 标准 或 风格 指南？
 有 的
 请参阅 标准库 模块 所 要求 的 代码 风格 描述 文档 pep 8
 核心 语言
 当 变量 有 值 时 为什么 会出现 unboundlocalerror ？
 通过 在 函数体 中 的 某 处 添加 赋值语句 导致 以 前 正常 工作 的 代码 被修改 而 得到 unboundlocalerror  会 令人 感到 意外
 以下代码 x 10 def  bar
 printx  bar 10 正常 工作 但是 以下代码 x 10 def  foo
 x 1 会 得到 一个 unboundlocalerror  footraceback  most  recent  call  last 
unboundlocalerror  local  variable  x  referenced  before  assignment  这 是因为 当你 对 作用域中 的 变量 进行 赋值 时 该 变量 将 成为 该 作用域 的 局部变量 并 在 外部 作用域中 隐藏 任何 类似 命名 的 变量
 由 于 foo  中 的最后一个 语句 为 x  分配 了 一个 新 值 编译器 会将其 识别 为 局部变量
 因此 当 先前 的 printx  尝试 打印 未 初始化 的 局部变量 时 会导致 错误
 在 上面的 示例中 你可以通过 将 其 声明为 全局 来访问 外部 作用域 变量 x 10 def  foobar
 x 1 foobar 10 这 个 显式 声明 是 必需 的 以便 提 醒 你 与 类 和 实例变量 的 表 面 类似 情况 不同 你 实际上是 在 外部 作用域中 修改 变量 的 值 printx 11 你可以使用 nonlocal  关键字 在 嵌套 作用域中 执行 类似 的 操作 def  foo
python  中 的 局部变量 和 全局变量 有 哪些 规则？
 在 python  中 仅在 函数 内 引用 的 变量 是 隐式 全局变量
 如果在 函数体 内 的 任何 位置 为 变量 赋值 则 除非 明确 声明为 全局 否则将 其 视为 局部 值
 虽然 起 初 有 点 令人 惊 讶 但 片 刻 考虑 就可以 解释
 一 方面 要求 global  表示 已 分配 的 变量 可 以防止 意外 的 副作 用
 另一 方面 如果所 有 全局 引用 都 需要 global  那么你 一 直 都 在 使用 global 
 你必须 将 对 内置函数 或 导入模块 的 组件 的 每个 引用 声明为 全局
 这种 杂 乱 会破坏 global  声明 用 于 识别 副作 用 的有用 性
 为什么 在具有 不同 值 的 循环 中定义的 lambdas  都 返回 相同 的结果？
 如何 跨 模块 共享 全局变量？
 在 单个 程序中 跨 模块 共享 信息 的规范 方法 是 创建一个 特殊 模块 通常 称为 config  或 cfg
 只需 在 应用程序 的 所有 模块 中 导入 配置 模块 然后 该模块 可用作 全局 名称
 因为 每个模块 只有一个 实例 所 以 对 模块 对象 所 做 的 任何 更改 都会 在任何 地方 反 映 出来
 例如 config
x  请注意 出 于 同样 的原因 使用 模块 也是 实现 singleton  设计 模式 的基础
 导入模块 的最佳 实 践 是什么？
 为什么 对象 之间 会 共享 默认值？
 这 种类型的 缺 陷 通常会 惹 恼 新 手 程序员
 考虑 这个函数 def  foomydict  danger  shared  reference  to  one  dict  for  all  calls 
 mydictkey  value  return  mydict  第一次 调用 此 函数 时 mydict  包含一 项
 第二 次 mydict  包含 两 项 因为 当 foo  开始 执行时 mydict  中 已经 有 一 项 了
 函数调用 经常 被 期望 为默认值 创建新的 对象
 但 实际 情况 并非 如 此
 默认值 会 在 函数定义 时 一次性 地 创建
 如果对象 发生改变 就 如 本 示例中 的字典 那样 则 对 函数 的 后续调用 将会引 用这个 被改变 的 对象
 按照 定义 不 可变对象 例如 数字、 字符串、 元组 和 none  因为 不可变 所 以 是 安全 的
 对 可变对象 例如 字典、 列表 和 类实例 的改变 则 可能 造成 迷 惑
 由 于 这 一 特性 在 编程 中 应 遵循 的 一 项 好 习 惯 是 不 使用 可变对象 作为 默认值
 而 应 使用 none  作为 默认值 和 函数 中的值 检查 值 为 none  的 形参 并 创建 相应的 列表、 字典 或其他 可变对象
 例如 不 要 这样 写 def  foomydict 
 而 要 这样 写 def  foomydictnone  if  mydict  is  none  mydict  create  a  new  dict  for  local  namespace  这 一 特性 有 时 会 很有用 处
 当你 有 一个 需要 进行 大量 耗 时 计算 的 函数 时 一个 常见 技巧 是 将 每次 调用 函数的参数 和 结果值 缓存 起来 并 在 同样的 值 被 再次 请求 时返回 缓存 的 值
 这 称为 记 忆 具体实现 方式 可以 是这样的 callers  can  only  provide  two  parameters  and  optionally  pass  cache  by  keyword  def  expensivearg 1 arg 2 cache  if  arg 1 arg 2 in  cache  return  cachearg 1 arg 2 calculate  the  value  result 
 cachearg 1 arg 2 result  store  result  in  the  cache  return  result  你也可以 使用 包含一个 字典 的 全局变量 而 不 使用 参数 默认值 这 完全 取决于 个 人 偏 好
 如何将 可选参数 或 关键字参数 从 一个 函数 传递 到 另一个 函数？
 使用 函数 参数列表 中 的 和 说明符 收集 参数 这 会 将 位置参数 作为 元组 将 关键字参数 作为 字典
 然后 您可以 使用 和 调用 另一个 函数 时 传递 这些参数 def  fx  args  kwargs 
 形参 和 实 参 之间 有什么 区别？
 形参 是 指 出现在 函数定义 中 的 名称 而 实 参 则 是 在 调用函数 时 实际 传入的 值
 形参 定义了一个 函数 能 接受 何 种类型的 实 参
 例如 对 于 以下函数 定义 def  funcfoo  barnone  kwargs  passfoo  bar  和 kwargs  是 func  的 形参
 但是 在 调用 func  时 例如 func 42 bar 314 extrasomevar  实际 的 值42314 和 somevar  则 是 实 参
 为什么 更改 列表 y  也会 更改 列表 x ？
 如何 编写 带 输出 参数的函数 通过 引用 调用？
 请 记住 在 python  中 参数 是通过 赋值 来 传递 的
 由 于 赋值 只是 创建了 对象的引用 因此在 调用者 和 被调用 者 的 参数 名称 之间 没有 别名 所 以 本身 是没有 按 引用 调用 的
 你可以通过 多 种方式 实现 所需的 效果
 通过 返回 一个 结果 元组 def  func 1 a  b 
 x  y  oldvalue 99 func 1 x  y  newvalue 100 这 几乎 总是 最 清晰 明 了 的解决方案
 通过使用 全局变量
 这种方式 不 是线程安全的 而且 也 不受 推荐
 通过 传递 一个 可变 即可 原地 修改 的 对象 def  func 2 a 
 通过 传递 一个 会 被改变 的字典 def  func 3 args 
 或者 在 一个 类实例 中 捆 绑 值 class  namespace 
 args  namespaceaoldvalue  b 99 func 4 args  varsargs  a  newvalue  b 100 几乎 没有任何 适当 理 由 将 问题 如 此 复杂 化
 你 的最佳 选择 是 返回 一个包含 多个 结果的 元组
 如何在 python  中 创建 高阶 函数？
 你 有两种 选择 使用 嵌套 作用域 或者 使用 可调用对象
 例如 假设 你想要 定义 linearab  使 其 返回 一个 函数 fx  来 设计 axb  的 值
 可以 使用以下 嵌套 作用域 def  lineara  b  def  resultx  return  a  x  b  return  result  或 使用 一个可调用对象 class  linear  def  initself  a  b  self
b  在 两 种情况下 taxes  linear 0
32 都会 给出 一个可调用对象 使得 taxes 10 e 60
 可调用对象 方式 的 缺 点 是 速度 略 慢 且 生成 的 代码 略 长
 但是 请注意 一 组 可调用对象 能够 通过 继承 来 共享 签名 class  exponentiallinear  init  inherited  def  callself  x  return  self
b  对象可以 封装 多个 方法 的 状态 class  counter  value 0 def  setself  x  self
set  这里 inc  dec  和 reset  将 表 现 为 共享 同一 计数 变量 的多个 函数
 如何在 python  中 复制 对象？
 一般 来说 通常情况下 请 尝试 copy
copy  或 copy
deepcopy
 不 是所有 对象 都可以 复制 但 多 数都是 可以 的
 某些 对象可以 方便地 复制
 例如 字典 具有 copy  方法 newdict  olddict
copy  序列 可以通过 切片 来 复制 newl  l
 如何 找到 对象 的 方法 或 属性？
 对于一个 用户自定义 类的实例 xdirx  将返回一个 按 字母 顺序 排序 的 包含 实例属性 和 方法 及其 类 所定义的 属性 名称 的 列表
 我 的 代码 如何 才能 发 现 对象 的 名称？
 逗号 运算符 的优先级 是什么？
 逗号 在 python  中 不 是 运算符
 考虑 这个例子 a  in  b  a  false  a  由 于 逗号 不 是 运算符 而 是 表达式 之间的 分隔符 以 上 代码 的含义 就 相当于 a  in  b  a  而不是 a  in  b  a  对 于 各种 赋值 运算符 等 来说 同样 如 此
 它们 并不是 真正 的 运算符 而 是 赋值语句 中 的语法 分隔符
 是否有 与 c  的 三 目 运算符 等价 的 东西？
 有 的
 相应 语法 如 下 ontrue  if  expression  else  onfalse  x  y 5025 small  x  if  x  y  else  y  在 python 2
5 引入 此 语法 之前 常见 的做法是 使用 逻辑 运算符 expression  and  ontrue  or  onfalse  然而 这种 做法 并 不 保 险 因为 当 ontrue  具有 布尔 假值 时 将 会 给出 错误 的结果
 所 以 使用
 形式 总是会 更好
 是否 可以用 python  编写 混 淆 的 单 行 程序
 可以
 通常是 在 lambda  中 嵌套 lambda  来实现 的
 请参阅 以 下 三个 来自 ulf  bartelt  的 示例 代码 from  functools  import  reduce  primes 1000 printlistfilternonemaplambda  yyreducelambda  xyxy 0 maplambda  xyyyxrange 2 intpowy 0
2308024 lines  on  screen  v  v  columns  on  screen  maximum  of  iterations  range  on  y  axis  range  on  x  axis  请 不 要 在 家 里 尝试 骚 年
 函数 参数列表 中 的 斜杠 是什么 意 思？
 函数 参数列表 中 的 斜杠 表示 在 它 之前的 形参 是 仅限位置 形参
 仅限位置 形参 没有 外部 可用的 名称
 在 调用 接受 仅限位置 形参 的 函数 时 参数 只会 基于 它们的 位置 被 映射到 形参
 例如 divmod  是一个 接受 仅限位置 形参 的 函数
 它 的 文档 是这样的 helpdivmod  help  on  builtin  function  divmod  in  module  builtins  divmodx  y  return  the  tuple  xy  xy
 在 形参 列表 末尾 的 斜杠 意味着 两个 形参 都 是 仅限位置 形参
 因此 附带 关键字参数 调用 divmod  将 会导致 报 错 divmodx 3 y 4 traceback  most  recent  call  last  file  stdin  line 1 in  module  typeerror  divmod  takes  no  keyword  arguments
 数字 和 字符串
 如何 指定 十六进制 和 八进制 整数？
 要 指定一个 八 进制数码 则 在 八进制 值 之前 加一个 零 和 一个 小写 或 大写字母 o  作为 前缀
 例如要 将 变量 a  设 为 八进制 的10 十进制 的8 就 输入 a 0 o 10 a 8 十六进制数 也 同样 简单
 只要 在 十六进制数 之前 加一个 零 和 一个 小写 或 大写字母 x
 十六进制数 码中的 字母 可以为 大写 或 小写
 例如 在 python  解释器中 输入 a 0 xa 5 a 165 b 0 xb 2 b 178
 为什么2210 返回3？
 如何将 字符串 转换为 数字？
 如何将 数字 转换为字符串？
 如何 修改 字符串？
 无法 修改 因为 字符串 是不可变 对象
 在大多数情况下 你应该 使用 你想要 的各种 部分 来 构造一个 新 字符串
 但是 如果你想要 一个可以 原地 修改 unicode  数据 的对象可 尝试 使用 io
stringio  对象 或 array  模块 import  io  s  hello  world  sio  io
 如何使用 字符串 调用函数 方法？
 有 多种 技巧 可 供 选择
 最好 的做法是 使用 一个 将 字符串 映射到 函数 的字典
 这 一 技巧 的 主要 优 势 在 于 字符串 不必 与 函数 名称 一致
 这 也 是用于 模拟 其他语言 中 case  结构 的 主 要 技巧 def  a  pass  def  b  pass  dispatch  go  a  stop  b  note  lack  of  parens  for  funcs  dispatchgetinput  note  trailing  parens  to  call  function  使用 内置函数 getattr  import  foo  getattrfoo  bar  请注意 getattr  可用于 任何 对象 包括 类、 类实例、 模块 等等
 在 标准库中 多次 使用 了这个 技巧 例如 class  foo  def  dofooself 
 f  getattrfooinstance  do  opname  f  使用 locals  来 解析 出 函数 名 def  myfunc  printhello  fname  myfunc  f  localsfname  f
 是否有 与 perl  的 chomp  等效 的 方法 用于从 字符串 中删除 尾随 换行符？
 可以使用 s
rstriprn  从字符串 s  的末尾 删除 所有的 换行符 而 不 删除 其他 尾随 空格
 如果 字符串 s  表示 多 行 且 末尾 有 几个 空行 则 将 删除 所有 空行 的 换行符 lines  line 1 rn 
rstripnr  line 1 由 于 通常 只 在 一次 读取一 行 文本 时才 需要 这样做 所 以 使用 s
rstrip  这种方式 工作 得 很好
 是否有 scanf  或 sscanf  的对应 物？
 没 有这样 的对应 物
 对 于 简单的 输入 解析 最 方便 的做法 通常是 使用 字符串 对象 的 split  方法 将 一 行 内容 拆 解 为 以 空格 分隔 的单词 然后 使用 int  或 float  将 表示 十进制数 的 字符串 转换为 数值
 split  支持 可选的 sep  形参 适用于 内容 行 使用 空格符 以外的 分隔符 的 情况
 以 于 更复杂的 输入 解析 正则表达式 会 比 c  的 sscanf  更 强大 也 更 适合 此 类 任务
unicodedecodeerror  或 unicodeencodeerror  错误 是什么 意 思？
 见 unicode  指南
 性能
 我 的 程序 太 慢 了。 该 如何 加 快速 度？
 总 的 来说 这是 个 棘 手 的 问题
 首先 下面 列出了 深 入 了解 前 需要 记住 的事情 不同的 python  实现 具有 不同 的性能 特 点
 本 faq  着 重 解 答 的 是 cpython 
 行为 可能 因 操作系统 而 异 尤其 是 在 谈 论 i  o  或 多线程 时
 在 尝试 优化 任何 代码 前 应 始终 找到 程序中的 热 点 请参阅 profile  模块
 编写 基准 脚本 将 允许 您 在 搜索 改进 时 快速 迭代 请参阅 timeit  模块
 强 烈 建议 在 可能 引入 隐藏 在 复杂 优化 中 的 回 归 之前 要 有 良 好 的 代码 覆盖 率 通过 单元 测试 或 任何其他 技术
 话 虽 如 此 加 速 python  代码 有 很多 技巧
 以下是 一些 可以 达到 可接受 的性能 水 平 的 一般 原 则 使 您 的算法 更快 或 更改 为 更快 的算法 可以 产生 比 尝试 在 代码中使用 微 优化 技巧 更大 的 好处
 使用 正确的 数据结构
 参考 文档 内置类型 和 collections  模块
 当 标准库 提供 用 于 执行 某些 操作 的 原语 时可能 尽管 不 能 保证 比 您 可能 提 出 的 任何 替代 方案 更快
 对 于 用 c  编写 的 原语 例如 内置函数 和 一些 扩展 类型 这是 真 的
 例如 请 确保 使用 list
sort  内置 方法 或 相关的 sorted  函数 进行排序 有关 适 度 高级 用 法 的 示例 请参阅 排序 指南
 抽象 倾 向 于创 造 间接 性 并 迫 使 翻译 更多 地 工作
 如果 间接 级别 超过 完成 的有用 工作 量 则 程序 将 变 慢
 你应该 避免 过 度 抽象 特别是 在 微 小 的功能 或 方法 的 形式 下 这通常 也会 对 可读性 产生 不 利 影响
 如果你 已经 达到 纯 python  允许 的 限制 那么 有一些 工具 可以让 你 走 得更 远
 例如 cython  可以将 稍 微 修改 的 python  代码 版本 编译 为 c  扩展 并且 可以在 许多 不同 的平台上 使用
 cython  可以 利用 编译 和 可选的 类型 注释 来 使 代码 明显 快 于 解释 运行时 的速度
 如果您 对 c  编程 技 能 有 信 心 也可以 自己 编写 c  扩展模块
 参见 专门 介绍 性能 提示 的 wiki  页面
 将 多个 字符串 连接 在一起 的 最 有效 方法 是什么？
str  和 bytes  对象 是不可变的 因此 将 多个 字符串 连接 在一起 效率 很 低 因为 每个 连接 都会 创建一个新 对象
 在 一般 情况下 总 运行 时间 是 总 字符串 长度 的 二 次 方
 要 连接 多个 str  对象 通常 推荐的 用 法 是 将它们 放入 一个列表 中 并 在 结尾 处 调用 str
join  chunks  for  s  in  mystrings  chunks
joinchunks  另一个 合理 有效的 惯 用 方法 是 io
stringio  要 连接 多个 str  对象 建议 使用 本地 连接 运算符 扩展 bytearray  对象 result  bytearray  for  b  in  mybytesobjects  result  b
 序列 元组 列表
 如何在 元组 和 列表 之间 进行 转换？
 类型 构造器 tupleseq  可 将 任意 序列 实际上是 任意 可迭代对象 转换为 具有相同 排列 顺序 的 相同 条目 的 元组
 例如 tuple 123 产生123 而 tupleabc  产生 a  b  c
 如果参数为 一个元组 它 不 会 创建 副本 而 是 返回 同一 对象 因此如果 你 不 确定 某个 对象是否 为 元组 时 也可 简单地 调用 tuple
 类型 构造器 listseq  可 将 任意 序列或 可迭代对象 转换为 具有相同 排列 顺序 的 相同 条目 的 列表
 例如 list 123 产生123 而 listabc  产生 a  b  c
 如果参数为 一个列表 它 会 像 seq  那样 创建一个 副本
 什么是 负数 序号？
python  序列 使用 正 数 或 负数 作为 序号 或 称 索引号
 对 于 正 数 序号 第一个 序号 为0 而1 为 第二个 序号 依 此类推
 对 于 负数 序号 倒 数 第一个 序号 为1 而 倒 数 第二个 序号 为2 依 此类推
 可以 认为 seqn  就 相当于 seqlenseqn
 使用 负数 序号 有 时 会 很 方便
 例如 s 1 就是 原 字符串 去 掉 最后一个 字符 这 可以用来 移除 某个 字符串 末尾 的 换行符
 如何 以 相反 的顺序 迭代 序列？
 使用 reversed  内置函数 for  x  in  reversedsequence 
 这 不 会 修改 您 的 原始 序列 而 是 构建 一个 反向 顺序 的 新 副本 以 进行迭代
 如何从 列表中 删除 重复 项？
 如何从 列表中 删除 多个 项？
 对 于 删除 重复 项 一种 可能 的做法是 设置 删除 条件 显式地 进行 反向 迭代
 但是 更容易 也 更 快速 的做法是 进行 隐式 或 显式 的 正 向 迭代 并 使用 切片 替代
 以 下 列出了 三 种方式
 mylist  filterkeepfunction  mylist  mylist  x  for  x  in  mylist  if  keepcondition  mylist  x  for  x  in  mylist  if  keepcondition  列表推导式 可能是 最 快 的
 如何在 python  中 创建 数组？
 使用 列表 this 1 is  an  array  列表 在 时间 复杂 度 方面 相当于 c  或 pascal  数组 主要 区别在于 python  列表 可以包含 许多 不同类型 的 对象
array  模块 还提供了 创建 具有 紧凑 表示 的 固定 类型 的 数组 的 方法 但它 的 索引 速度 比 列表 慢
 还要注意 数字 扩展 和其他 扩展 还 定义了 具有 各种 特性 的 类似 数组 的 结构
 要获取 lisp  样式 的 列表 可以使用 元组 模拟 cons  单元 lisplist  like  this  example  none  如果需要 可变 性 可以使用 列表 而不是 元组
 这里 模拟 lisp  car  的 是 lisplist 0 模拟 cdr  的 是 lisplist 1
 只有在 你 确定 真 的 需要 的时候 才 这样做 因为它 通常 比 使用 python  列表 慢 得 多
 如何 创建 多 维 列表？
 你可能 试 图 制 作 一个 像这样 的 多 维 数组 a  none 23 如果你 打印 它 看起来 是 正确的 a  none  none  none  none  none  none  但是 当你 给 某一 项 赋值 时 会 同时 在多个 位置 显示 变化 a 005 a 5 none 5 none 5 none  其中的 原因 在 于 使用 对 列表 执行 重复 操作 并不是 创建 副本 它 只是 创建 现有 对象的引用
3 创建了 对 长度为 二 的 同一 列表 的3 个 引用
 对 某一 行 的改变 会 作用于 所有 行 通常 这 一 定 不 是 你所 希望 的
 建议 的做法是 先 创建一个 所需 长度 的 列表 然后 其 中的元素 再 以 一个 新 创建 的 列表 来 填充 a  none 3 for  i  in  range 3 ai  none 2 这样就 生成 了 一个包含3 个长度为 二 的不同 列表 的 列表
 你也可以 使用 列表推导式 w  h 23 a  none  w  for  i  in  rangeh  或者 你 还可以 使用 提供 矩阵 类型 的 扩展 包 其 中 最 著 名 的 是 numpy
 如何将 方法 应用 于 一系列 对象？
 可以使用 列表推导式 result  obj
 为什么 atuplei  item  会 在 执行 加 法 时 引发异常？
 这是由 两个 事实 共同 导致 的结果 一 是 增强赋值 运算符 属于 赋值 运算符 二 是 在 python  中 存 在 可变 和 不可变 两 种不同 的 对象
 此处 的 讨论 在任何 对 元组中 指向 可变对象 的 元素 使用 增强赋值 运算符 的 情况 都 是 普 遍 成 立 的 但 在 此 我们 只 以 list  和 来 举例
 如果你 写成 这样 atuple 12 atuple 01 traceback  most  recent  call  last 
 typeerror  tuple  object  does  not  support  item  assignment  发生异常 的原因 是 显 而 易 见 的1 会 与 对象 atuple 0 相 加 而 该对象 为1 得到 结果 对象2 但 当 我们 试 图 将 运算 结果2 赋值给 元组 的0 号 元素 时就 将 报 错 因为 我们 不 能 改变 元组 的 元素 所指向的 对象
 在 表 层 之处 以 上 增强赋值 语句 所 做 的 大致 是这样 result  atuple 01 atuple 0 result  traceback  most  recent  call  last 
 typeerror  tuple  object  does  not  support  item  assignment  由 于 元组 是不可变的 因此 操作 的 赋值 部分 会 引发错误
 当你 这样 写 的时候 atuple  foo  bar  atuple 0 item  traceback  most  recent  call  last 
 typeerror  tuple  object  does  not  support  item  assignment  发生异常 会 令人 略 感 吃 惊 还有一个 更 为 令人 吃 惊 的 事实 虽然 有 报 错 但是 添加 操作 却 生效 了 atuple 0 foo  item  要 明 白 为 何 会 这样 你需要 知道 a  如果一个 对象 实现了 iadd  魔 术 方法 它会在 执行 增强赋值 时被调用 并且 其 返回值 将 用 于 该 赋值语句 b  对 于 列表 来说 iadd  等价于 在 列表 上调用 extend  并返回 该 列表
 因此 对 于 列表 我们可以 说 就是 list
extend  的 快 捷方式 alist  alist 1 alist 1 这相当于 result  alist
iadd 1 alist  resultalist  所 引用 的 对象 已 被修改 而 引用 被修改 对象 的 指针 又 重新 被 赋值给 alist
 赋值 的 最终 结果 没有 变化 因为它 是 引用 alist  之前 所 引用 的 同一 对象 的 指针 但 仍然 发生了 赋值 操作
 因此在 我们 的 元组 示例中 发生 的事情 等同于 result  atuple 0
 typeerror  tuple  object  does  not  support  item  assignmentiadd  成功 执行 因此 列表 得到 了 扩 充 但是 虽然 result  指向 了 atuple 0 已经 指向 的 同一 对象 最后 的 赋值 仍然 导致 了 报 错 因为 元组 是不可变的
 我 想 做 一个 复杂的 排序 你 能 用 python  做 一个 schwartzian  变 换 吗？
 该 技术 归 功 于 perl  社 区 的 randal  schwartz  它 通过将 每个元素 映射到 其 排序 值 sort  value  的 度 量 对 列表 中的元素 进行排序
 在 python  中 使用 list
sort  方法 的 key  参数 isorted  l  isorted
 如何 按 其他 列表 中的值 对 一个列表 进行排序？
 将它们 合并 到 元组 的 迭代器 中 对 结果 列表 进行排序 然后 选择 所需的 元素
 对象
 什么是 类？
 什么是 方法？
 什么是 self ？
self  只是 方法 的 第一个参数 的 常规 名称
 例如 对 于 某个 类 的某个 实例 x  其 方法 methself  a  b  c  实际上 应该 被称为 x
metha  b  c  对 于 被调用 的 方法 会 被称为 methx  a  b  c 
 另请参阅 为什么 必须在 方法 定义 和 调用 中 显式 使用 self ？
 如何 检查 对象是否 为给定 类 或其子 类 的 一个实例？
 什么是 委托？
 委托 是一种 面向对象 的 技巧 也 称为 设计 模式
 假设 您 有 一个 对象 x  并且 想要 改变 其中一个 方法 的 行为
 您可以 创建一个新 类 它提供 您 感兴趣的 方法 的 新 实现 并 将 所有其他 方法 委托给 x  的相应 方法
python  程序员 可以 轻松 实现 委托
 例如以下 类 实现了 一个 类 该类的 行为 类似于 文件 但 将所有 写入的 数据 转换为 大写 class  upperout  def  initself  outfile  self
outfile  name  在这里 upperout  类 重新 定义了 write  方法 在 调用 下层的 self
write  方法 之前 将 参数 字符串 转换为 大写 形式
 所有其他 方法都 被 委托给 下层的 self
outfile  对象
 委托 是通过 getattr  方法 来完成 的 请参阅 语言 参考 了解有关 控制 属性 访问 的更多信息
 请注意 对 于 更 一般 的 情况 来说 委托 可能包含 更多细节 问题
 当 某些 属性 既 需要 读取 又 需要 设置 时 类 还 必须 定义 setattr  方法 并且 这样做 必须 小 心 谨 慎
 setattr  的基本 实现 大致 相当于 以下代码 class  x 
 大多数 setattr  实现 必须 修改 self
dict  来 为 自身 保存 局部 状态 而 又 不 至 于 造成 无限 递归
 如何从 覆盖 基类 的 派生类 调用 基类 中定义的 方法
 使用内置 的 super  函数 class  derivedbase  def  methself  superderived  self
meth  对 于 python 3
0 之前的 版本 您 可能 正 在 使用 经 典 类 对 于 诸 如 classderivedbase 
 之 类 的 类定义 可以将 在 base  或 base  中的一个 的 基类 中定义的 方法 meth  调用 为 base
 这里 base
meth  是一个 未 绑定 的 方法 因此 您 需要 提供 self  参数
 如何 组织 代码 以便 更改 基类？
 如何 创建 静态类 数据 和 静态类 方法？
python  支持 静态 数据 和 静态 方法 在 c  或 java  的 意义 上
 对 于 静态 数据 只需 定义一个 类属性
 要 为 属性 分配 新 值 就必须 在 赋值 中 显式 使用 类 名 class  c  count 0 number  of  times  c
count  对 于 任意 c  来说 只要 isinstancec  c  为真 则 c
count  同样 也 指向 c
count  除非 被 c  自身 或者 从 c
class  回 到 c  的 基类 搜索路径 上 的某个 类 所 重载
 注意 在 c  的某个 方法 内部 像 self
count 42 这样的 赋值 将 在 self  自身 的 字典中 新 建 一个名为 count  的 不 相关 实例
 想要 重新 绑定 类 静态 数据 名称 就必须 总是 指明 类 名 无论是 在 方法 内部 还是 外部 c
count 314 静态 方法 是 可 行 的 class  c  staticmethod  def  staticarg 1 arg 2 arg 3 no  self  parameter 
 然而 获得 静态 方法 效果 的 更 直接 的 方法 是通过 一个简单的 模块级 函数 def  getcount  return  c
count  如果您 的 代码 是 结构化 的 以便 为 每个模块 定义一个 类 或 紧 密 相关的 类 层次结构 那么 这 就 提供了 所需的 封装
 如何在 python  中 重载 构造函数 或 方法？
 我 尝试 使用 spam  但是 得到 一个 关于 someclassnamespam  的 错误信息。
 以 双 下划线 打头 的 变量 会 被 更 名 以提供 一种 定义 类 私有 变量 的简单 而 有效 的方式
 任何 形式 为 spam  的 标识符 至少 前缀 两个 下划线 至多 后缀 一个 下划线 文本 会 被替换为 classnamespam  其 中 classname  为 去除 了 全部 前缀 下划线 的当前 类 名称
 这 并 不 能 保证 私 密 性 外部 用户 仍然可 以 访问 classnamespam  属性 私有 变量 值 也 在 对象 的 dict  中 可 见
 许多 python  程序员 从 来 都 不 使用 这种 私有 变量 名称
 类定义了 del  方法 但是 删除 对象 时 没有 调用 它。
 如何 获取 给定 类 的 所有 实例 的 列表？
python  不 跟踪 类 或 内置类型 的 所有 实例
 您可以 对 类 的 构造函数 进行 编程 以 通过 保留 每个 实例 的 弱引用 列表 来 跟踪 所有 实例
 为什么 id  的结果 看起来 不 是 唯一的？
id  返回 一个整数 该 整数 在 对象 的 生 命 周期 内 保证 是 唯一的
 因为在 cpython  中 这是 对象 的 内存地址 所 以 经常 发生 在 从 内存 中删除 对象 之后 下 一个 新 创建 的 对象 被 分配 在内存中 的 相同 位置
 这个例子 说明 了 这一点 id 100013901272 id 200013901272 这两个 id  属于 之前 创建 的不同 整数 对象 并 在 执行 id  调用 后 立即 删除
 要 确保 要 检查 其 id  的 对象 仍 处于 活动 状态 请 创建 对 该对象 的 另一个 引用 a 1000 b 2000 ida 13901272 idb 13891296
 模块
 如何 创建 pyc  文件？
 如何 找到 当前 模块名称？
 模块 可以通过 查看 预定义 的 全局变量 name  找到 自己的 模块名称
 如果它 的 值 为 main  程序 将 作为脚本 运行
 通常 通过 导入 使用 的 许多 模块 也 提供 命令行界面 或 自 检 并且 只 在 检查 name  之后 才 执行 之后的 代码 def  main  printrunning  test
 如何 让 模块 相互 导入？
 假设 您 有以下 模块 foo
py  from  foo  import  foovar  barvar 2 问题 是 解释器 将 执行 以 下 步骤 首先 导入 foo  创建 用 于 foo  的 空 全局变量 foo  被 编译 并 开始 执行 foo  导入 bar  创建 了用于 bar  的 空 全局变量 bar  被 编译 并 开始 执行 bar  导入 foo  这是一个 空 操作 noop  因为 已经 有 一个名为 foo  的 模块 bar
foovar  最后一 步 失败 了 因为 python  还没有 解释 foo  而 foo  的 全局 符号 字典 仍然 是 空 的
 当你 使用 import  foo  然后 尝试 在 全局 代码中 访问 foo
foovar  时 会发生 同样 的事情
 这个问题 有 至少 三种 可能的 解决 方法
guido  van  rossum  建议 避免 使用 from  module  import 
 并 将所有 代码 放在 函数 中
 全局变量 和 类变量 的 初始化 只能 使用 常量 或 内置函数
 这意味着 导入模块 中的所有 内容 都 被 引用 为 module
name 
jim  roskind  建议 在 每个模块 中 按 以 下 顺序 执行 步骤 导出 全局变量 函数 和 不需要 导入 基类 的 类 导入 声明 活动 代码 包括 从 导入 值 初始化 的 全局变量
van  rossum  不 喜欢 这种 方法 因为 导入 出现在 一个 陌 生 的地方 但 这种 方法 确实 有效
matthias  urlichs  建议 重 构 代码 以便 首先 不需要 递归 导入
 这些 解决方案 并 不 相互 排 斥
importxyz  返回 module  x  如何 获取 z
 考虑 使用 importlib  中的函数 importmodule  z  importlib
 当 我 编辑 了 导入 过 的 模块 并 重新 导入 它 时 这些 变化 没有 显示 出来。 为什么 会 这样？
 出 于 效率 和 一致性 的原因 python  仅在 第一次 导入模块 时 读取 模块 文件
 如果不 这 么 做 在 一个 由 许多 模块 组成的 程序中 每个模块 都会 导入 相同 的基本 模块 那么 基本 模块 将 被解析 和 重新 解析 多次
 要 强制 重新 读取 已 更改 的 模块 请 执行 以 下 操作 import  importlib  import  modname  importlib
reloadmodname  警告 这种 技术 不 是100％ 万 无 一 失
 特别 是包含 如 下 语句 的 模块 from  modname  import  someobjects  将 继续 使用 旧版本 的 导入 对象
 如果 模块包含 类定义 则 不 会 更新 现有的 类实例 以 使用 新 的 类定义
 这 可能导致 以 下 矛 盾 行为 import  importlib  import  cls  c  cls
c  isinstance  is  false  false  如果 打印出 类对象的 标识 问题 的 本 质 就会 明确 hexidc
 代码 库 和 插 件 faq
 通用的 代码 库 问题
 如何 找到 可以用来 做 xxx  的 模块 或 应用？
mathpysocketpyregexpy  等 的 源文件 在 哪？
 如果 找不到 模块 的 源文件 可能 它是一个 内建 的 模块 或 是 使用 cc  或其他 编译 型 语言 实现 的动态 加载 模块
 这种情况下 可能 是没有 源码 文件 的 类似 mathmodule
c  这样的 文件 会 存放 在 c  代码 目录中 但不 在 python  目录中
python  中 至少有 三 类 模块1
 使用 python  编写 的 模块
py 2
 使用 c  编写 的动态 加载 模块
dll
pyd
so
sl  等3
 使用 c  编写 并 链接到 解释器 的 模块 要获取 此 列表 输入 import  sys  printsys
 在 unix  中 怎样 让 python  脚本 可执行？
python  中 有 cursestermcap  包 吗？
 对 于 类 unix  系统 标准 python  源码 发行版 会 在 modules  子目录 中 附带 curses  模块 但 默认 并不会 编译
 注意 在 windows  平台 下 不可用—— windows  中没有 curses  模块
curses  模块 支持 基本的 curses  特性 同时 也支持 ncurses  和 sysv  curses  中 的 很多 额外 功能 比如 颜色、 不同的 字符 集 支持、 填充 和 鼠标 支持
 这意味着 这个模块 不兼容 只有 bsd  curses  模块 的操作系统 但是 目前 仍 在 维护 的 系统 应该 都 不 会 存 在这种情况
 对 于 windows  平台 使用 consolelib  模块
python  中 存 在 类似 c  的 onexit  函数 的 东西 吗？
atexit  模块提供了一个 与 c  的 onexit  函数 类似 的 注册 函数
 为什么 我 的 信号处理 函数 不 能 工作？
 最常见的 问题 是 信号处理 函数 没有 正确 定义 参数列表
 它会被 这样 调用 handlersignum  frame  因此它 应当 声明为 带 有两个 形参 def  handlersignum  frame 
 通 用 任务
 怎样 测试 python  程序 或 组件？
python  带 有两个 测试 框架
doctest  模块 从 模块 的 docstring  中 寻找 示例 并 执行 对 比 输出 是否 与 docstring  中 给出的 是否 一致
unittest  模块 是一个 模 仿 java  和 smalltalk  测试 框架 的 更 棒 的 测试 框架
 为 了 使 测试 更容易 你应该 在程序中 使用 良 好 的 模块 化 设计
 程序中的 绝 大多数 功能 都 应该 用 函数 或 类 方法 封装—— 有 时 这样做 会 有 额外 惊 喜 程序 会 运行 得 更快 因为 局部变量 比 全局变量 访问 要 快
 除 此 之外 程序 应该 避免 依赖 可变的 局部变量 这 会 使得 测试 困 难 许多
 程序 的 全局 主 逻辑 应该 尽 量 简单 if  name  main  mainlogic  并 放置 在 程序 主模块 的 最 后面
 一旦 你 的 程序 已经 组织 为 一个 函数和类 行为 的 有 完整 集合 你 就 应该 编写 测试 函数来 检测 这些 行为
 可以 将自动 执行 一系列 测试 的 测试 集 关联到 每个模块
 这 听 起来 似 乎 需要 大量 的 工作 但 是由于 python  是 如 此 简 洁 灵活 因此它 会 极 其 容易
 你可以通过 与 生产 代码 同步 编写 测试 函数 使 编程 更 为 愉 快 和 有趣 因为 这 将 更容易 并 更早 发 现 代码 问题 甚至 设计 缺 陷
 程序 主模块 之外 的其他 辅助 模块 中可以 增加 自 测试 的 入 口
 if  name  main  selftest  通过使用 python  实现 的 假 接口 即使 是需要 与 复杂的 外部 接口 交互 的 程序 也可以在 外部 接口 不可用 时 进行 测试
 怎样 用 docstring  创建 文档？
pydoc  模块 可以用 python  源码 中 的 docstring  创建 html  文件
 也可以使用 epydoc  来 只 通过 docstring  创建 api  文档
sphinx  也可以 引入 docstring  的内容
 怎样 一次 只 获取一个 按键？
 在 类 unix  系统中 有 多种 方案
 最 直接 的 方法 是 使用 curses  但是 curses  模块 太 大 了 难以 学习
 线程 相关
 程序中 怎样 使用 线程？
 一 定 要使用 threading  模块 不 要使用 thread  模块
threading  模块 对 thread  模块提供 的 底层 线程 原语 做 了 更易 用 的 抽象
aahz  的 非常 实 用 的 threading  教程 中 有一些 幻 灯 片 可以 参阅 httpwww
comoscon 2001
 我 的 线程 都 没有 运行 为什么？
 如何将 任务 分配 给 多个 工作 线程？
 最简单的 方式是 使用 concurrent
futures  模块 特别是 其中的 threadpoolexecutor  类
 或者 如果你想 更好地 控制 分发 算法 你也可以 自己 写 逻辑 实现
 使用 queue  模块 来创建 任务 列表 队列
queue  类 维护 一个 了 一个 存 有 对象 的 列表 提供了
putobj  方法 添加 元素 并且 可以用
get  方法 获取 元素
 这个类 会 使用 必要的 加 锁 操作 以 此 确保 每个 任务 只会 执行 一次
 这是 一个简单的例子 import  threading  queue  time  the  worker  thread  gets  jobs  off  the  queue
sleep 5 运行时 会产生 如 下 输出 running  worker  running  worker  running  worker  running  worker  running  worker  main  thread  sleeping  worker  threadworker 1 started 130283832797456 running  with  argument 0 worker  threadworker 2 started 130283824404752 running  with  argument 1 worker  threadworker 3 started 130283816012048 running  with  argument 2 worker  threadworker 4 started 130283807619344 running  with  argument 3 worker  threadworker 5 started 130283799226640 running  with  argument 4 worker  threadworker 1 started 130283832797456 running  with  argument 5
 查看 模块的文档 以获取 更多信息 queue  类提供了 多种 接口
 怎样 修改 全局变量 是线程安全的？
python  vm  内部 会 使用 global  interpreter  lock  gil  来 确保 同一 时间 只有一个 线程 运行
 通常 python  只会 在 字节码 指令 之间 切换 线程 切换 的 频 率 可以通过 设置 sys
setswitchinterval  指定
 从 python  程序 的 角度 来 看 每 一条 字节码 指令 以及 每 一条 指令 对应的 c  代码 实现 都 是 原子 的
 理 论 上 说 具体 的结果 要 看 具体 的 pvm  字节码 实现 对 指令 的 解释
 而 实际上 对 内建 类型 intlistdict  等 的 共享 变量 的 类 原子 操作 都 是 原子 的
 举例来说 下面的 操作 是 原子 的 l 、 l 1、 l 2 是 列表 d 、 d 1、 d 2 是 字典 x 、 y  是 对象 ij  是 int  变量 l
keys  这些 不 是 原子 的 i  i 1 l
appendl 1 li  lj  dx  dx 1 覆盖 其他对象 的 操作 会 在 其他对象 的引用计数 变 成0 时 触发 其 del  方法 这可能 会产生 一些 影响
 对 字典 和 列表 进行 大量 操作 时 尤其 如 此
 如果有 疑 问 的话 使用 互 斥 锁
 不 能 删除 全局 解释器 锁 吗？
global  interpreter  lock  gil  通常 被视为 python  在 高 端 多 核 服务器 上 开发 时 的 阻 力 因为 几乎所有 python  代码 只有在 获取 到 gil  时 才能 运行 所 以 多线程 的 python  程序 只能 有效 地 使用 一个 cpu
 在 python 1
5 时 代 greg  stein  开发 了 一个完整 的 补丁 包 freethreadings  补丁 移除了 gil  并 用 粒 度 更 合适的 锁 来 代替
adam  olsen  最近 也 在 他 的 pythonsafethread  项目 里 做 了 类似 的 实 验
 不幸的是 由 于 为 了 移除 gil  而 使用了 大量 细 粒 度 的 锁 这两个 实 验 在 单 线程 测试 中 的性能 都有 明显 的 下 降 至少 慢30
 但 这 并 意味着 你 不 能 在 多 核 机器 上 很好 地 使用 python  你 只需 将 任务 划 分 为 多 进程 而不是 多线程
 新 的 concurrent
futures  模块中的 processpoolexecutor  类提供了 一个简单的 方法 如果你想 对 任务 分发 做 更多 控制 可以使用 multiprocessing  模块提供 的 底层 api
 恰 当 地 使用 c  拓 展 也 很有用 使用 c  拓 展 处理 耗 时 较 久 的 任务 时 拓 展 可以在 线程 执行 c  代码 时 释放 gil  让 其他线程 执行
zlib  和 hashlib  等 标准库 模块 已经 这样做 了
 也 有 建议 说 gil  应该是 解释器 状态 锁 而不是 完全 的 全局 锁 解释器 不应该 共享 对象
 不幸的是 这 也 不可能 发生
 由 于 目前 许多 对象 的 实现 都有 全局 的 状态 因此 这是一个 艰 巨 的 工作
 举例来说 小 整型数 和 短 字符串 会 缓存 起来 这些 缓存 将 不 得 不 移动 到 解释器 状态 中
 其他对象 类型 都 有自己的 自由 变量 列表 这些 自由 变量 列表 也 必须 移动 到 解释器 状态 中
 等等
 我 甚至 怀 疑 这些 工作 是否 可能在 优先 的 时间 内 完成 因为 同样的 问题 在 第三方 拓 展 中 也会 存 在
 第三方 拓 展 编写 的速度 可 比 你 将它们 转换为 把 全局 状态 存 入 解释器 状态 中 的速度 快 得 多
 最后 假设 多个 解释器 不 共享 任何 状态 那么 这样做 比 每个 进程 一个 解释器 好 在 哪 里 呢？
 输入 输出
 怎样 删除 文件？ 以 及其他 文件 相关的 问题……
 怎样 复制 文件？
shutil  模块 有 一个 copyfile  函数
 注意 在 macos 9 中 不 会 复制 resource  fork  和 finder  info
 怎样 读取或写入 二进制数据？
 似 乎 ospopen  创建 的 管道 不 能 使用 osread  这是 为什么？
read  是一个 底层 函数 它 接收 的 是 文件描述符—— 用 小 整型 数表示的 打开的文件
os
popen  创建 的 是一个 高级 文件对象 和 内建 的 open  方法 返回 的 类型 一样
 因此如果 要 从 os
popen  创建 的 管道 p  中读取 n  个字节 的话 你应该 使用 p
 怎样 访问 rs 232 串 口？
 为什么 关闭 sysstdoutstdinstderr  并不会 真正 关 掉 它？
 网络 internet  编程
python  中 的 www  工具 是什么？
 参阅 代码 库参考 手册 中 互联网 协议 和 支持 和 互联网 数据 处理 这两 章 的内容
python  有 大量 模块 来 帮助 你 构建 服务 端 和 客户端 web  系统
paul  boddie  维护 了 一份 可 用 框架 的 概 览 见 httpswiki
orgmoinwebprogramming 
cameron  laird  维护 了 一份 关于 python  web  技术 的 实 用 网 页 的 集合 见 httpphaseit
pythonwebpython 
 怎样 模拟 发送 cgi  表 单 methodpost ？
 生成 html  需要使用 什么 模块？
 你可以在 web  编程 wiki  页面 找到 许多 有用的 链接
 怎样 使用 python  脚本 发送 邮件？
 使用 smtplib  标准库 模块
 下面是一个 很 简单的 交互式 发送 邮件 的 代码
 这个方法 适用于 任何 支持 smtp  协议 的 主机
quit  在 unix  系统中 还可以 使用 sendmail
sendmail  程序 的 位置 在不同 系统中 不 一样 有 时 是 在 usrlibsendmail  有 时 是 在 usrsbinsendmail
sendmail  手册 页面 会 对 你 有 所 帮助
 以下是 示例 代码 import  os  sendmail  usrsbinsendmail  sendmail  location  p  os
socket  的 connect  方法 怎样 避免 阻塞？
 通常会 用 select  模块 处理 socket  异步 io
 要 防止 tcp  连接 发生 阻塞 你可以 将 socket  设 为 非阻塞 模式
 这样 当你 执行 socket
connect  时 你 将 或 是 立即 完成 连接 不 大 可能 或 是 收到 一个包含
errno  错误码 的 异常
einprogress  表示 连接 正 在 进行 但 还没有 完成
 不同 的操作系统 将 返回 不同的 值 因此你 需要 确 认 你 的 系统 会返回 什么 值
 你可以使用 socket
connectex  方法 来避免 生成 异常
 它 将 只 返回 errno  值
 要 进行 轮询 你可以 稍后 再次 调用 socket
connectex 0 或 errno
eisconn  表示 连接 已 完成 或者 你也可以 将 此 socket  传给 select
select  来 检查 它 是否可 写
 注解 asyncio  模块提供了 通用的 单 线程 并 发 异步 库 它 可被用来 编写 非阻塞 的 网 络 代码
 第三方 的 twisted  库 是一个 热 门 且 功能 丰 富 的替代 选择
 数据库
python  中 有 数据库 包 的 接口 吗？
 当然
 标准 python  还 包含了 基于 磁盘 的哈希 接口 例如 dbm  和 gdbm 
 除 此 之 外还有 sqlite 3 模块 该 模块提供了一个 轻 量 级 的 基于 磁盘 的 关系 型 数据库
 大多数 关系 型 数据库 都 已经 支持
 查看 数据库 编程 wiki  页面 获取 更多信息
 在 python  中 如何 实现 持久化 对象？
pickle  库 模块 以 一种 非常 通用的 方式 解决 了 这个问题 虽然 你 依 然 不能用 它 保存 打开的文件、 套接字 或 窗口 之 类 的 东西 此外 shelve  库 模块 可 使用 pickle  和 gdbm  来创建 包含 任意 python  对象 的 持久化 映射
 数学 和 数字
python  中 怎样 生成 随机数？
 设计 和 历史 常见问题
 为什么 python  使用 缩进 来 分组 语句？
guido  van  rossum  认为 使用 缩进 进行 分组 非常 优 雅 并且 大 大 提高 了 普通 python  程序 的 清晰 度
 大多数 人 在 一段 时间 后 就 学 会 并 喜欢 上 这 个 功能
 由 于 没有 开始 结束 括号 因此 解析器 感知 的 分组 与 人 类 读 者 之间 不 会 存 在 分 歧
 偶 尔 c  程序员 会 遇到 像这样 的 代码 片段 if  x  y  x  y  z  如果 条件 为真 则 只 执行 x  语句 但 缩进 会 使 你 认为 情况 并非 如 此
 即使 是 经 验 丰 富 的 c  程序员 有 时 也会 长 久 地 盯 着 它 发 呆 不 明 白 为什么 在 x  y  时 y  也会 减少
 因为 没有 开始 结束 花括号 所 以 python  更 不 容易 发生 编码 风格 冲突
 在 c  中 有许多 不同的 放置 花括号 的方式
 在 习 惯 了 阅读 和 编写 某种 特定 风格的 代码 之后 当 阅读 或 被 要求 编写 另一种 风格的 代码 时 通常 都会 令人 感 觉 有 点 不 舒 服
 许多 编码 风格 将 开始 结束 括号 单独 放在 一 行 上
 这使得 程序 相当 长 浪 费 了 宝 贵 的 屏幕 空间 使得 更 难以 对 程序 进行 全 面 的 了解
 理 想 情况下 函数 应该 适合 一个 屏幕 例如2030 行
20 行 python  可以 完成 比20 行 c  更多的 工作
 这 不 仅仅 是由于 缺少 开始 结束 括号 缺少 声明 和 高级 数据类型 也是 其中的 原因 但 缩进 基于 语法 肯 定 有 帮助
 为什么 简单的 算术运算 得到 奇 怪 的结果？
 请 看 下 一个 问题
 为什么 浮点 计算 不 准确？
 用户 经常 对 这样的 结果 感到 惊 讶1
19999999999999996 并且 认为 这是 python  中的一个 bug
 其 实 不 是这样
 这 与 python  关系 不 大 而 与 底层 平台 如何处理 浮点数 字 关系 更大
cpython  中 的 float  类型 使用 c  语言 的 double  类型 进行 存储
 float  对象 的值是 以 固定 的精度 通常 为53 位 存储 的 二进制 浮点数 由 于 python  使用 c  操作 而 后者 依赖于 处理器 中 的 硬 件 实现 来执行 浮点 运算
 这意味着 就 浮点 运算 而言 python  的 行为 类似于 许多 流行的 语言 包括 c  和 java
 许多 可以 轻松 地 用 十进制 表示 的 数字 不能用 二进制浮点 表示
 例如 在 输入 以 下 语句 后 x 1
2 为 x  存储 的值是 与 十进制 的 值1
2 非常 接近 的 近似值 但不 完全 等于 它
 在 典型 的 机器 上 实际 存储 的值是1
0011001100110011001100110011001100110011001100110011 binary  它 对应于 十进制数 值1
1999999999999999555910790149937383830547332763671875 decimal  典型 的53 位 精度 为 python  浮点数 提供了1516 位 小 数 的精度
 要 获得 更 完整的 解释 请参阅 python  教程 中 的 浮点 算术 一章
 为什么 python  字符串 是不可变的？
 有 几个 优点
 一个 是 性能 知道 字符串 是不可变的 意味着 我们可以 在 创建时 为 它 分配 空间 并且 存储 需求 是 固定 不变 的
 这 也是 元组 和 列表 之间 区别 的原因 之一
 另一个 优点 是 python  中 的 字符串 被视为 与 数字 一样 基本
 任何 动作 都 不 会 将 值8 更改 为 其他值 在 python  中 任何 动作 都 不 会 将 字符串8 更改 为 其他值
 为什么 必须在 方法 定义 和 调用 中 显式 使用 self ？
 这 个 想 法 借 鉴 了 modula 3 语言
 出 于 多种 原因 它 被 证明 是 非常有用 的
 首先 更 明显 的 显示 出 使用 的 是 方法 或 实例属性 而不是 局部变量
 阅读 self
x  或 self
meth  可以 清楚 地 表明 即使 您 不 知道 类 的 定义 也会 使用 实例变量 或 方法
 在 c  中 可以通过 缺少 局部变量 声明 来 判断 假设 全局变量 很 少 见 或 容易 识别—— 但是 在 python  中没有 局部变量 声明 所 以 必须 查找 类定义 才能 确定
 一些 c  和 java  编码 标准 要求 实例属性 具有 m  前缀 因此这 种 显式 性 在这些 语言中 仍然 有 用
 其 次 这意味着 如果要 显式 引用 或 从 特定 类 调用 该方法 不需要 特殊 语法
 在 c  中 如果你想 使用 在 派生类 中 重写 基类 中 的 方法 你必须 使用 运算符 在 python  中 你可以 编写 baseclass
methodnameself  argumentlist
 这 对 于 init  方法 非常有用 特别是 在 派生类 方法 想要 扩展 同名的 基类 方法 而 必须 以 某 种方式 调用 基类 方法 时
 最后 它 解决 了 变量 赋值 的语法 问题 为 了 python  中 的 局部变量 根据 定义 在 函数体 中 赋值 的 那些 变量 并且没有 明确 声明为 全局 赋值 就必须 以 某 种方式 告诉 解释器 一个 赋值 是为了 分配 一个 实例变量 而不是 一个 局部变量 它 最好 是通过 语法 实现 的 出 于 效率 原因
 c  通过 声明 来 做 到 这一点 但是 python  没有 声明 仅仅 为 了这个 目 的 而 引入 它们会 很 可 惜
 使用 显式 的 self
var  很好 地 解决 了 这个问题
 类似地 对 于 使用 实例变量 必须 编写 self
var  意味着 对 方法 内部 的 非 限定名称 的 引用 不必 搜索 实例 的 目录
 换句话说 局部变量 和 实例变量 存在于 两个 不同的 命名空间中 您 需要 告诉 python  使用 哪个 命名空间
 为什么 不 能 在 表达式 中 赋值？
 自 python 3
8 开始 你 能 做 到 的 赋值 表达式 使用 海 象 运算符 在 表达式 中 为 变量 赋值 while  chunk  fp
read 200 printchunk  请参阅 pep 572 了解详情
 为什么 python  对 某些 功能 例如 listindex  使用 方法 来实现 而 其他 功能 例如 lenlist  使用 函数 实现？
 正 如 guido  所 说 a  对 于 某些 操作 前缀 表示法 比 后缀 更容易 阅读 前缀 和 中 缀 运 算 在 数学 中 有 着 悠 久 的 传统 就像 在 视 觉 上 帮助 数学 家 思 考 问题 的 记 法
 比 较 一 下 我们将 xab  这样的 公 式 改 写 为 xaxb  的 容易 程度 以及 使用 原始 oo  符号 做 相同 事情 的 笨 拙 程度
 b  当 读 到 写 有 lenx  的 代码 时就 知道 它 要求 的 是 某 件 东西 的长度
 这 告 诉 我们 两 件 事 结果是 一个整数 参数 是 某种 容器
 相反 当 阅读 x
len  时 必须 已经 知道 x  是 某种 实现 接口 的容器 或者是 从 具有 标准 len  的 类 继承 的容器
 当 没有 实现 映射 的 类 有 get  或 key  方法 或者 不 是 文件 的 类 有 write  方法 时 我们 偶 尔 会 感到 困 惑
 为什么 join  是一个字符串 方法 而不是 列表或 元组 方法？
 从 python 1
6 开始 字符串 变得 更 像 其他 标准类型 当 添加 方法 时 这些方法 提供 的功能 与 始终 使用 string  模块 的 函数 时 提供 的功能 相同
 这些 新 方法 中 的 大多数 已被 广泛 接受 但 似 乎 让 一些 程序员 感到 不 舒 服 的一种 方法 是
join 124816 结果如 下124816 反 对 这种 用 法 有两个 常见的 论 点
 第 一条 是这样的 使用 字符串 文本 string  constant  的 方法 看起来 真 的 很 难 看 答 案 是 也 许 吧 但是 字符串 文本 只是 一个 固定 值
 如果在 绑定到 字符串 的 名称 上 允许 使用 这些方法 则 没有 逻辑 上 的 理 由 使 其 在 文 字 上 不可用
 第二个 异 议 通常 是这样的 我 实际上是 在 告诉 序列 使用 字符串 常量 将 其 成员 连接 在一起
 遗 憾 的 是 并非 如 此
 出 于 某种 原因 把 split  作为一个 字符串方法 似 乎 要 容易 得 多 因为 在这种情况下 很容易 看到124816
split  是 对 字符串 文本 的 指令 用 于 返回 由 给定 分隔符 分隔 的 子 字符串或 在默认情况下 返回 任意 空格
join  是 字符串方法 因为在 使用 该方法 时 您 告诉 分隔符 字符串 去 迭代 一个字符串 序列 并 在 相 邻 元素 之间 插入 自身
 此方法 的 参数 可以是任何 遵循 序列 规则 的 对象 包括 您 自己 定义 的 任何 新 的 类
 对 于 字节 和 字节数组 对象 也 有 类似 的 方法
 异常 有 多 快？
 如果没有 引发异常 则 tryexcept  块 的 效率 极 高
 实际上 捕获 异常 是 昂 贵 的
 在2
0 之前的 python  版本中 通常 使 用这个 习 惯 用 法 try  value  mydictkey  except  keyerror  mydictkey  getvaluekey  value  mydictkey  只有 当你 期望 dict  在任何 时候 都有 key  时 这 才 有意义
 如果不 是这样的 话 你 就是 应该 这样 编码 if  key  in  mydict  value  mydictkey  else  value  mydictkey  getvaluekey  对 于 这种 特定的 情况 您 还可以 使用 value  dict
setdefaultkeygetvaluekey  但 前 提 是 调用 getvalue  足够 便 宜 因为在 所有 情况下 都会 对 其 进行 评 估
 为什么 python  中没有 switch  或 case  语句？
 难 道 不 能 在 解释器中 模拟 线程 而非 得 依赖 特定于 操作系统的 线程 实现 吗？
 答 案1 不幸的是 解释器 为每个 python  堆栈 帧 推 送 至少 一个 c  堆栈 帧
 此外 扩展 可以 随 时 回调 python
 因此 一个完整 的 线程 实现 需要 对 c  的 线程 支持
 答 案2 幸 运 的 是 stackless  python  有 一个 完全 重新 设计 的 解释器 循环 可 以避免 c  堆栈
 为什么 lambda  表达式 不 能包含 语句？
python  的 lambda  表达式 不 能包含 语句 因为 python  的语法 框架 不 能 处理 嵌套 在 表达式 内部 的 语句
 然而 在 python  中 这 并 不是一个 严重 的 问题
 与 其他语言 中添加 功能 的 lambda  表 单 不同 python  的 lambdas  只 是一种 速 记 符号 如果您 懒 得 定义 函数 的话
 函数 已经 是 python  中 的第一 类 对象可以 在 本地 范围内 声明
 因此 使用 lambda  而不是 本地 定义 的 函数 的唯一 优点 是 你 不需要 为 函数 创建一个 名称 这 只是 一个 分配 了 函数对象 与 lambda  表达式 生成 的 对象类型 完全 相同 的 局部变量
 可以将 python  编译 为 机器 代码 c  或 其他语言 吗？
cython  将 带有 可选 注释 的 python  修改 版本 编译 到 c  扩展 中
 nuitka  是一个 将 python  编译 成 c  代码 的 新 兴 编译器 旨在 支持 完整的 python  语言
 要 编译 成 java  可以 考虑 voc 
python  如何 管理 内存？
python  内存管理 的 细节 取决于 实现
 python  的 标准 实现 cpython  使用 引用计数 来 检测 不 可 访问 的 对象 并 使用 另一种 机制 来 收集 引用 循环 定 期 执行 循环 检测 算法 来 查找 不 可 访问 的 循环 并 删除 所 涉及 的 对象
 gc  模块提供了 执行 垃圾回收、 获取 调试 统计 信息 和 优化 收集 器 参数的函数
 但是 其他 实现 如 jython  或 pypy  可以 依赖 不同的 机制 如 完全 的 垃圾回收 器 
 如果你 的 python  代码 依赖于 引用计数 实现 的 行为 则 这种 差异 可能 会导致 一些 微 妙 的 移植 问题
 在 一些 python  实现 中 以下代码 在 cpython  中 工作 的 很好 可能会 耗 尽 文件描述符 for  file  in  verylonglistoffiles  f  openfile  c  f
read 1 实际上 使用 cpython  的引用计数 和 析 构 函数 方案 每个 新 赋值 的 f  都会 关闭 前 一个 文件
 然而 对 于 传统的 gc  这些 文件对象 只能 以 不同的 时间 间隔 可能 很长 的 时间 间隔 被 收集 和 关闭
 如果要 编写 可用于 任何 python  实现 的 代码 则 应 显式 关闭 该文件 或 使用 with  语句 无论 内存管理 方案 如何 这 都 有效 for  file  in  verylonglistoffiles  with  openfile  as  f  c  f
 为什么 cpython  不 使用 更 传统的 垃圾回收 方案？
 首先 这 不 是 c  标准 特性 因此 不 能 移植
 是 的 我们 知道 boehm  gc  库
 它 包含了 大多数 常见 平台 但不是 所有平台 的 汇编 代码 尽管 它 基本上 是 透明 的 但也 不 是 完全 透明 的 要 让 python  使用 它 需要使用 补丁
 当 python  嵌入到 其他 应用程序中 时 传统的 gc  也 成为 一个 问题
 在 独立的 python  中 可以用 gc  库 提供的 版本 替换 标准 的 malloc  和 free  嵌入 python  的 应用程序 可能 希望 用 它 自己 替代 malloc  和 free  而 可能 不需要 python  的
 现 在 cpython  可以 正确地 实现 malloc  和 free
cpython  退出时 为什么 不 释放 所有 内存？
 为什么 有 单独的 元组 和 列表 数据类型？
 虽然 列表 和 元组 在 许多 方面 是 相似的 但它们 的 使用 方式 通常是 完全 不同的
 可以 认为 元组 类似于 pascal  记录 或 c  结构 它们是 相关 数据 的 小 集合 可以是 不同类型 的 数据 可以作为 一个 组 进行 操作
 例如 笛 卡 尔 坐标 适当 地 表示为 两个 或 三个 数字 的 元组
 另一 方面 列表 更 像 其他语言 中 的 数组
 它们 倾 向 于 持 有不同 数量的 对象 所有 对象 都 具有相同的 类型 并且 逐 个操作
 例如 os
 返回 表示 当前目录 中的文件 的 字符串列表
 如果 向 目录中 添加了一 两个 文件 对 此 输出 进行 操作 的 函数 通常不 会 中断
 元组 是不可变的 这意味着 一旦 创建了 元组 就 不能用 新 值 替换 它 的 任何 元素
 列表 是可变 的 这意味着 您 始终 可以 更改 列表 的 元素
 只有 不变 元素 可 以用作 字典 的 key  因此 只能 将 元组 和 非 列表 用 作 key
 列表 是如何 在 cpython  中 实现 的？
cpython  的 列表 实际上 是可变 长度 的 数组 而不是 lisp  风格的 链 表
 该 实现 使用 对 其他对象 的 引用 的 连续 数组 并 在 列表 头 结构 中 保留 指向 该 数组 和 数组 长度 的 指针
 这使得 索引 列表 ai  的 操作 成 本 与 列表 的大小 或 索引 的 值 无 关
 当 添加 或 插入 项 时 将 调整 引用 数组 的大小
 并 采用 了一些 巧 妙 的 方法来 提高 重复 添加 项 的性能 当 数组 必须 增 长 时 会 分配 一些 额外的 空间 以便 在 接下来 的 几 次 中 不需要 实际 调整 大小
 字典 是如何 在 cpython  中 实现 的？
cpython  的字典 实现 为 可 调整 大小 的哈希 表
 与 b  树 相比 这 在大多数情况下 为 查找 目前 最常见的 操作 提供了更 好 的性能 并且 实现 更简单
 字典 的 工作 方式是 使用 hash  内置函数 计算 字典中 存储 的 每个键 的 hash  代码
hash  代码 根据 键 和 每个 进程 的 种子 而 变化 很大 例如 python  的 hash  值 为539294296 而 python  一个 按位 不同的 字符串 的 hash  值 为1142331976
 然后 hash  代码 用 于 计算 内部 数组中 将 存储 该值 的 位置
 假设 您 存储 的 键 都 具有 不同的 hash  值 这意味着 字典 需要 恒 定 的 时间 o 1 用 bigo  表示法 来 检索 一个 键
 为什么 字典 key  必须 是不可变的？
 为什么 listsort  没有 返回 排序 列表？
 在 性能 很重要 的情况下 仅仅 为 了 排序 而 复制 一份 列表 将 是一种 浪 费
 因此 list
sort  对 列表 进行 了 适当的 排序
 为 了 提 醒 您 这 一 事实 它 不 会返回 已 排序 的 列表
 这样 当 您 需要 排序 的副本 但也 需要 保留 未 排序 的 版本 时就 不 会 意外 地 覆盖 列表
 如果要 返回 新 列表 请 使用内置 sorted  函数
 此 函数 从 提供 的可迭代 列表中 创建新 列表 对 其 进行排序 并返回
 例如 下面 是如何 迭代 遍历 字典 并 按 keys  排序 for  key  in  sortedmydict 
 如何在 python  中 指定 和 实 施 接口 规范？
 为什么 没有 goto ？
 可以使用 异常 捕获 来提供 goto  结构 甚至 可以 跨 函数调用 工作 的
 许多 人 认为 异常 捕获 可以 方便地 模拟 cfortran  和 其他语言 的 go  或 goto  结构 的 所有 合理 用 法
 例如 class  labelexception  pass  declare  a  label  try 
 但是 不 允许你 跳 到 循环 的 中 间 这通常 被认为 是 滥 用 goto
 谨 慎 使用
 为什么 原始字符串 rstrings  不 能 以 反斜杠 结尾？
 为什么 python  没有 属性 赋值 的 with  语句？
python  具有 with  语句 它 能 将 一个 代码块的 执行 包装 起来 在 进入 和 退出 代码块 时 调用 特定的 代码
 有 些 语言 具有 这样的 结构 with  obj  a 1 equivalent  to  obj
total 1 在 python  中 这样的 结构 是 不 明确 的
 其他语言 如 objectpascal 、 delphi  和 c  使用 静态类型 因此可以 毫 不 含 糊 地 知道 分配 给 什么 成员
 这是 静态类型 的 要 点 编译器 总是 在 编译时 知道 每个 变量 的 作用域
python  使用 动态 类型
 事 先 不可能 知道 在运行时 引用 哪个 属性
 可以 动态 地 在 对象 中添加 或 删除 成员 属性
 这使得 无法 通过 简单的 阅读 就 知道 引用 的 是什么 属性 局部 属性、 全局 属性 还是 成员 属性？ 例如 采用 以 下 不完整 的 代码段 def  fooa  with  a  printx  该 代码段 假设 a  必须 有 一个名为 x  的成员 属性
 然而 python  中 并没有 告诉 解释器 这一点
 假设 a  是 整数 会发生 什么？ 如果有 一个名为 x  的 全局变量 它 是否 会 在 with  块 中 使用？ 如 您 所 见 python  的动态 特性 使得 这样的 选择 更 加 困 难
 然而 python  可以通过 赋值 轻松 实现 with  和 类似 语言特性 减少 代码 量 的 主要 好处
 代替 functionargs
c 63 写成 这样 ref  functionargs
c 63 这 也 具有 提高 执行 速度 的 副作 用因为 python  在运行时 解析 名称 绑定 而 第二个 版本 只需要 执行 一次 解析
 为什么 ifwhiledefclass  语句 需要 冒号？
 冒号 主要 用 于 增强 可读性 abc  语言 实 验 的结果 之一
 考虑 一 下 这 个 if  a  b  printa  与 if  a  b  printa  注意 第二 种方法 稍 微 容易 一些
 请 进一步 注意 在这个 faq  解 答 的 示例中 冒号 是如何 设置 的 这是 英 语 中 的 标准 用 法
 另一个 次 要 原因 是 冒号 使 带有 语法 突 出 显示 的 编辑器 更容易 工作 他们 可以 寻找 冒号 来 决定 何 时 需要 增加 缩进 而不必 对 程序 文本 进行 更 精 细 的 解析
 为什么 python  在 列表 和 元组 的末尾 允许 使用 逗号？
python  允许 您 在 列表 元组 和 字典 的末尾 添加一个 尾随 逗号123 a  b  c  d  a 15 b 67 last  trailing  comma  is  optional  but  good  style  有 几个 理 由 允许 这样做
 如果 列表 元组或 字典 的 字面值 分布 在 多 行 中 则 更容易 添加 更多 元素 因为 不必 记住 在 上 一 行 中添加 逗号
 这些 行 也可以 重新 排序 而不会 产生 语法错误
 不 小 心 省略 逗号 会导致 难以 诊 断 的 错误
 例如 x  fee  fie  foo  fum  这 个列表 看起来 有 四个 元素 但 实际上 包含 三个 fee  fiefoo  和 fum
 总是 加上 逗号 可 以避免 这 个 错误 的 来源
 允许 尾随 逗号 也可以使 编程 代码 更容易 生成
python  常见问题
 python  常见问题 编程 常见问题 设计 和 历史 常见问题 代码 库 和 插 件 faq  扩展 嵌入 常见问题 python  在 windows  上 的 常见问题 图形 用户界面 gui  常见问题 为什么 我 的 电 脑 上 安装了 python ？
 扩展 嵌入 常见问题
 可以使用 c  语言 创建 自己的 函数 吗？
 是 的 您可以 在 c  中 创建 包含 函数、 变量、 异常 甚至 新 类型 的 内置模块
 在 文档 扩展 和 嵌入 python  解释器 中 有 说明
 大多数 中 级 或 高级 的 python  书 籍 也 涵盖 这 个 主题
 可以使用 c  语言 创建 自己的 函数 吗？
 是 的 可以使用 c  中 兼容 c  的功能
 在 python  include  文件 周 围 放置 externc
 并 在 python  解释器 调用 的 每个 函数 之前 放置 externc
 具有 构造函数 的 全局 或 静态 c  对象 可能 不是一个 好 主 意
c  很 难 写 有 没 有其他 选择？
 编写 自己的 c  扩展 有 很多 选择 具体 取决于 您 要 做 的事情
cython  及其 相关的 pyrex  是 接受 稍 微 修改 过 的 python  形式 并 生成 相应 c  代码 的 编译器
 cython  和 pyrex  可以 编写 扩展 而无需 学习 python  的 c  api
 如果需要 连接到 某些 当前 不存在 python  扩展 的 c  或 c  库 可以 尝试 使用 swig  等 工具 包装 库 的 数据类型 和 函数
 sip  cxx  boost  或 weave  也是 包装 c  库 的替代 方案
 如何在 c  中 执行 任意 python  语句？
 执行 此操作 的 最高层级 函数 为 pyrunsimplestring  它 接受 单个 字符串参数 用于在 模块 main  的 上下文中 执行 并 在 成功时返回0 而 在 发生异常 包括 syntaxerror  时返回1
 如果你想要 更多 可 控 性 可以使用 pyrunstring  请 在 pythonpythonrun
c  中 查看 pyrunsimplestring  的 源码
 如何在 c  中 对 任意 python  表达式 求值？
 可以 调用 前 一 问题 中 介绍 的 函数 pyrunstring  并附带 起始 标记 符 pyevalinput  它 会 解析 表达式 对 其 求值 并返回 结果值
 如何从 python  对象 中提取 c  的 值？
 如何使用 pybuildvalue  创建 任意 长度 的 元组？
 不 可以
 应该使用 pytuplepack 
 如何从 c  调用 对象 的 方法？
 如何 捕获 pyerrprint  或 打印到 stdout  stderr  的 任何 内容的 输出？
 在 python  代码中 定义一个 支持 write  方法的对象
 将 此 对象 赋值给 sys
stdout  和 sys
 调用 printerror  或者 只是 允许 标准 回溯 机制 生效
 在 此 之后 输出 将 转 往 你 的 write  方法 所指向的 任何 地方
 做 到 这一点 的 最简单 方式是 使用 io
stringio  类 import  io  sys  sys
getvalue  foo  hello  world  实现 同样 效果 的 自定义 对象 看起来 是这样的 import  io  sys  class  stdoutcatcherio
 如何从 c  访问 用 python  编写 的 模块？
 如何在 python  中 对 接 c  对象？
 根据 你 的需求 可以选择 许多 方式
 手动 的 实现 方式 请 查阅 扩展 与 嵌入 文档 来 入门
 需要 知道 的 是对于 python  运行时 系统 来说 c  和 c  并 不 没有 太 大 的区别—— 因此 围 绕 一个 c  结构 指针类型 构建 新 python  对象 的 策略 同样 适用于 c  对象
 有关 c  库 请参阅 c  很 难 写 有 没 有其他 选择？
 我 使用 setup  文件 添加了 一个 模块 为什么 make  失败 了？
 安装程序 必须 以 换行符 结束 如果没有 换行符 则 构建 过程 将 失败
 修复 这 个 需要 一些 丑 陋 的 shell  脚本 编程 而且 这 个 bug  很小 看起来 不 值得 花 这 么 大 力 气
 如何 调试 扩展？
 将 gdb  与 动态 加载 的 扩展名 一起使用 时 在 加载 扩展名 之前 不 能 在 扩展名 中 设置 断 点
 在 您 的
gdbinit  文件 中 或 交互式 添加 命令 br  pyimportloaddynamicmodule  然后 运行 gdb  gdb  localbinpython  gdb  run  myscript
 我 想 在 linux  系统上 编译 一个 python  模块 但是 缺少 一些 文件。 为什么
 大多数 打包的 python  版本 不包含 usrlibpython 2
xconfig  目录 该 目录 中包含 编译 python  扩展 所需的 各种 文件
 对 于 red  hat  安装 pythondevel  rpm  以获取 必要的 文件
 对 于 debian  运行 aptget  install  pythondev 
 如何 区分 输入 不完整 和 输入 无效？
 如何 找到 未定义 的 g  符号 builtinnew  或 purevirtual ？
 能 否 创建一个 对象 类 其 中 部分 方法 在 c  中 实现 而 其他方法 在 python  中 实现 例如 通过 继承？
python  常见问题
 一般 信息
 什么是 python ？
python  是一种 解释 型、 交互式、 面向对象 的 编程语言
 它 包含了 模块、 异常、 动态 类型、 高层级 动态 数据类型 以及 类 等 特性
 在 面向对象 编程 以外 它还 支持 多种 编程 范 式 例如 过程 式 和 函数式编程 等
 python  结合 了 超 强 的功能 和 极 清晰 的语法
 它 带有 许多 系统调用 和 库 以及 多种 窗口 系统 的 接口 并且 能 用 c  或 c  来进行 扩展
 它还 可用作 需要 可 编程 接口 的 应用程序 的 扩展 语言
 最后 python  非常 易于 移植 它可以 在 包括 linux  和 macos  在 内 的 许多 unix  变种 以及 windows  上 运行
 要 了解更多 详情 请 先 查看 python  教程
 python  新 手 指南 提供了 学习 python  的其他 入门 教程 及 资源 的 链接
 什么是 python  软件 基 金 会？
python  软件 基 金 会 python  software  foundation  简 称 psf  是一个 独立的 非 盈 利 组织 它 拥有 python 2
1 及 以 上 各 版本 的 版权
 psf  的 使 命 是 推 进 与 python  编程语言 相关的 开源 技术 并 推 广 python  的 使用
 psf  的 主 页 是 httpswww
 向 psf  提供 捐 助 在 美 国 是 免 税 的
 如果你 在 使用 python  并且 感 觉 它 对 你 很 有 帮助 可以通过 psf  捐 助 页 进行 捐 助
 使用 python  是否 存 在 版权 限制？
 你可以 任意 使用 源码 只要 你 保留 版权 信息 并 在 你 基于 python  的 产 品 文档中 显示 该 版权 信息
 如果你 遵 守 此 版权 规则 就可以 将 python  用 于 商 业 领 域 以 源码 或 二进制 码 的形式 不 论 是否 经过 修改 销 售 python  的副本 或 是 以 某种 形式 包含了 python  的 产 品
 当然 我们 仍然 希望 获 知 所有对 python  的 商 业 使用
 请参阅 psf  许可 页 以 查看 进一步 的 说明 以及 许可 的完整 文本 内容的 链接
python  的 徽 标 是 注册 商 标 在某些 情况下 需要 获得 允许 方 可 使用
 请参阅 商 标 使用 政 策 了解详情
 创 造 python  的 最初 理 由 是什么？
 以下是 有关 最初 缘 起 的 一份 非常 简短 的 摘要 由 guido  van  rossum  本 人 撰写 我 在 cwi  的 abc  部 门 时 在 实现 解释 型 语言 方面 积 累 了 丰 富 经 验 通过 与 这 个 部 门 成员的 协 同 工作 我 学 到 了 大量 有关 语言 设计 的 知 识
 这是 许多 python  特性 的 最初 来源 包括 使用 缩进 来 组织 语句 以及 包含 非常 高层级的 数 据结构 虽然 在 python  中 具体 的 实现细节 完全 不同
 我 对 abc  语言 有 过 许多 抱 怨 但 同时 也 很 喜欢 它 的 许多 特性
 没有可 能 通 过 扩展 abc  语言 或 它 的 实现 来 弥 补 我 的 不 满—— 实际上 缺 乏 可扩展 性 就 是 它 最大 的 问题 之一
 我 也 有一些 使用 modula 2 的 经 验 并 曾 与 modula 3 的 设计 者 进行 交 流 还 阅读 了 modula 3 的 报告
 modula 3 是 python  中 异常 机制 所 用 语法 和 语义 以 及其他 一些 语言特性 的 最初 来源
 我 还 曾 在 cwi  的 amoeba  分布 式 操作系统 部 门 工作
 当 时 我们 需要 有一种 比 编写 c  程序 或 bash  脚本 更好的 方式来 进行 系统 管理 因为 amoeba  有 它 自己的 系统调用 接口 并且 无法 方便地 通过 bash  来访问
 我 在 amoeba  中 处理 错误 的 经 验 令 我 深 刻 地 意 识 到 异常处理 在 编程语言 特性 当 中的重要 地 位
 我 发 现 某种 具有 abc  式 的语法 而 又 能 访问 amoeba  系统调用 的 脚本 语言 将 可 满足 需求
 我 意 识 到 编写 一种 amoeba  专属的 语言 是 愚 蠢 的 所 以 我 决定 编写 一种 具有 全 面 可扩展 性 的 语言
 在1989 年 的 圣 诞 假 期 中 我 手 头 的 时间 非常 充 裕 因此 我 决定 开始 尝试 一 下
 在 接下来 的 一 年 里 虽然 我 仍然 主要 用 我 的 业 余 时间 来 做 这 件 事 但 python  在 amoeba  项目 中 的 使用 获得 了 很大 的 成功 来自 同 事 的 反 馈 让我 得 以 增加了 许多 早期 的改进
 到1991 年2 月 经过 一 年 多 的 开发 我 决定 将 其 发布 到 usenet
 之后的 事情 就 都可以 在 mischistory  文件 里面 看 了
python  适合 做 什么？
python  是一种 高层级的 多 用 途 编程语言 可用于 解决 许多 不同 门 类 的 问题
 该 语言 附带 一个 庞 大 的 标准库 涵盖 了 字符串 处理 正则表达式 unicode  比较 文件 间 的差异 等 因 特 网 协议 httpftpsmtpxmlrpcpopimapcgi  编程 等 软件 工 程 单元 测试 日志记录 性能 分析 python  代码 解析 等 以及 操作系统 接口 系统调用 文件系统 tcpip  套接字 等
 请查看 python  标准库 的 目录 以 了解 所 有可用 的内容
 此外 还可以 获取 到 各种 各 样 的 第三方 扩展
 请访问 python  包 索引 来 查找 你 感兴趣的 软件包
python  版本 的 编号 形式 是 怎样 的？
 我 应 如何 获取 一份 python  源代码 的副本？
 最新的 python  发布版 源代码 总 能 从 python
org  获取 下载 页 链接 为 httpswww
 最新的 开发 版 源代码 可以在 httpsgithub
compythoncpython  获取
 发布版 源代码 是一个 以 gzip  压缩 的 tar  文件 其中包含 完整的 c  源代码、 sphinx  格式 的 文档、 python  库 模块、 示例 程序 以及 一些 有用的 自由 分发 软件
 该 源代码 将 可 在大多数 unix  类 平台上 直接 编译 并 运行
 请参阅 python  开发者 指南 的 初 步 上 手 部分 了解有关 获取 源代码 并 进行 编译 的更多信息
 我 应 如何 获取 python  的 文档？
 当前的 python  稳定 版本 的 标准 文档 可 在 httpsdocs
org 3 查看
 也可 在 httpsdocs
html  获取 pdf 、 纯 文本 以及可 下载 的 html  版本
 文档 以 restructuredtext  格式 撰写并 使用 sphinx  文档 工具 生成
 文档 的 restructuredtext  源文件 是 python  源代码 发布版 的一部分
 我 之前 从未 接 触 过 编程。 哪 里有 python  的 教程？
 有许多 可 选择 的 教程 和 书 籍
 标准 文档中 也 包含有 python  教程
 请参阅 新 手 指南 以获取 针对 python  编程 初 学 者 的 信息 包括 教程 的 清 单
 是否有 专门 针对 python  的 新闻组 或 邮件列表？
 有 一个 新闻组 comp
python  和 一个 邮件列表 pythonlist
 新闻组 和 邮件列表 是 彼 此 互 通 的—— 如果你 可以 阅读 新闻 就 不必 再 订 阅 邮件列表
comp
python  的 流 量 很大 每 天 会 收到 数 以 百 计 的 发 帖 usenet  使用 者 通常 更 擅 长 处理 这样 大 的 流 量
 有关 新 软件 发布 和 活动 的 公 告 可以在 comp
announce  中找到 这是 个 严格 管理 的 低 流 量 列表 每 天 会 收到 五 个 左 右 的 发 帖
 可以在 python  公 告 邮件列表 页面 进行 订 阅
 有关 其他 邮件列表 和 新闻组 的更多信息 可以在 httpswww
orgcommunitylists  找到
 我 应 如何 获取 python  的 公开 测试 版本？
 可以从 httpswww
orgdownloads  下载 alpha  和 beta  发布版
 所有 发布版 都会 在 comp
python  和 comp
announce  新闻组 以及 python  主 页 httpswww
org  上 进行 公 告 并 会 推 送到 rss  新闻 源
 你 还可以 通过 git  访问 python  的 开发 版
 请参阅 python  开发者 指南 了解详情
 我 应 如何 为 python  提交 错误报告 和 补丁？
 要 报告 错误 或 提交 补丁 请使用 安装 于 httpsbugs
org  上 的 roundup
 你必须 拥有 一个 roundup  账 号 才能 报告 错误 这样 我们 就可以 在 有 后续 问题 时 与 你 联 系
 这 也 使得 roundup  能 在 我们 处理 所 报告 的 错误时 向 你 发送 更新 消息
 如果你 之前 使用 过 sourceforge  向 python  报告 错误 你可以通过 roundup  的 密码 重置 操作 来获取 你 的 roundup  密码
 有关 python  开发 流程 的 更多信息请参阅 python  开发者 指南
 是否有 任何 公开 发 表 的 python  相关 文 章 可以 供 我 参考 引用？
 可能 作为 参考 文 献 的 最好 方式 还是 引用 你 喜欢 的 python  相关 书 籍
 第一 篇 有关 python  的 文 章 写 于1991 年 现 在 其内容 已经 相当 过 时 了
 guido  van  rossum  与 jelke  de  boer  使用 python  编程语言 交互式 地 测 试 远程 服务器 cwi  季 刊 第4 卷 第4 期1991 年12 月 阿 姆 斯 特 丹 第283303 页
 是否有 任何 python  相关的 书 籍？
 是 的 相关的 书 籍 很多 还有 更多 即 将 发行
 请访问 python
org  的 wiki  页面 httpswiki
orgmoinpythonbooks  获取 一份 清 单
 你也可以 到 各 大 在 线 书 店 搜索 python  并 过滤 掉 对 monty  python  的 引用 或者 也可以 搜索 python  加 language
wwwpythonorg  具体 位于 世界 上 的 哪个 地 点？
python  项目 的基础 架构 分布 于 世界 各 地 并 由 python  基础 架构 团队 负责 管理
 详情 请访问 这里
 为 何 命名为 python ？
 在 着 手 编写 python  实现 的时候 guido  van  rossum  同时 还 阅读 了 刚 出 版 的 monty  python  的 飞 行 马 戏 团 剧 本 这是一 部 自1970 年 代 开始 播 出 的 bbc  系列 喜 剧
 van  rossum  觉 得 他 需要 选择 一个 简短、 独 特 而 又 略 显 神 秘 的名字 于 是 他 决定 将 这 个 新 语言 命名为 python
 我 必须 喜欢 monty  python  的 飞 行 马 戏 团 吗？
 不必 但 这 对 学习 会 有 帮助

 现 实 世界 中 的 python
python  有 多 稳定？
 有 多少 人 在 使用 python ？
 使用 者 应该 数 以 百 万 计 但 很 难 获得 一个 精确的 数字
python  可以 免 费 下载 因此 并 不存在 销 量 数据 此外 它 也可以 从 许多 不同 网 站 获取 并且 包含于 许多 linux  发行版 之 中 因此 下载 量 统计 同样 无法 完全 说明 问题
comp
python  新闻组 非常 活 跃 但不是 所有 python  用户 都会 在 新闻组 发 帖 许多 人 甚至 不 会 阅读 新闻组
 有 哪些 重要的 项目 是 用 python  开发 的？
 请访问 httpswww
orgaboutsuccess  查看 使用了 python  的项目 列表
 阅 览 历 次 python  会 议 的 日程 纪 要 可以 看到 许多 不同 公 司 和 组织 所 做 的 贡献
 高 水 准 的 python  项目 包括 mailman  邮件列表 管理器 和 zope  应用 服务器
 多个 linux  发行版 其 中 最 著 名 的 有 red  hat  均 已 使用 python  来 编写 部分 或 全部 的 安装程序 和 系统 管理 软件
 在内部 使用 python  的 大 公 司 包括 了 google  yahoo  以及 lucasfilm  等
 在未来 可以 期 待 python  将 有什么新 进 展？
 请访问 httpswww
orgdevpeps  查看 python  增强 提议 pep
pep  是 为 python  加入 某种 新特性 的 提议 进行 描述 的 设计 文档 其 中 会 提供 简 明 的 技术 规格说明 与 基本 原 理
 可以 查找 标题 为 python  x
y  releaseschedule  的 pep  其 中 x
y  是 某个 尚未 公开 发布 的 版本
 新版本的 开发 会 在 pythondev  邮件列表 中进行 讨论
 提议 对 python  加入 不兼容 的 更改 是否 合理？
 通常 来说 是 不 合理的
 世界 上 已存在 的 python  代码 数 以 亿 计 因此 任何对 该 语言 的 更改 即 便 仅 会 使得 现有 程序中 极 少 的一部分 失效 也是 难以 令人 接受 的
 就 算 你可以 提供一个 转换 程序 也 仍然 存 在 需要 更新 全部 文档 的 问题 另外 还有 大量 已 出 版 的 python  书 籍 我们 不希望 让 它们在 一 瞬 间 全部 变 成 废 纸
 如果 必须 更改 某个 特性 则 应该 提供 渐 进 式 的 升级 路径
 pep 5 描述了 引入 向后 不兼容 的 更改 所需 遵循 的 流程 以 尽可能 减少 对 用户 的 干 扰
python  是一种 对 编程 初 学 者 友 好 的 语言 吗？
 当然
 从 过程 式、 静态类型 的 编程语言 例如 pascal  c  或者 c  以及 java  的 某一 子集 开始 引 导 学生 入门 仍然 是 常见 的做法
 但 以 python  作为 第 一种 编程语言 进行 学习 对 学生 可能 更 有 利
python  具有 非常 简单 和 一致的 语法 和 庞 大 的 标准库 而且 最 重要的 是 在 编程 入门 教 学 中 使用 python  可以让 学生 专 注 于 更 重要的 编程 技 能 例如 问题 分 解 与 数据类型 设计
 使用 python  可以 快速 向 学生 介绍 基本 概念 例如 循环 与 过程 等
 他们 甚至 有可能 在 第一次 课 里 就 开始 接 触 用户自定义 对象
 对 于 之前 从未 接 触 过 编程 的 学生 来说 使用 静态类型 语言 会 感 觉 不 够 自然
 这 会 给 学生 带 来 必须 掌 握 的 额外 复杂 性 并 减 慢 教 学 的 进 度
 学生 需要 尝试 像 计算机 一样 思 考 分 解 问题 设计 一致的 接口 并 封装 数据
 虽然 从 长 远 来 看 学习 和 使用 一种 静态类型 语言 是 很重要 的 但 这 并不是 最 适 宜 在 学生 的 第一次 编程 课 上 就 进行 探 讨 的 主题
 还 有许多 其他方 面 的 特 点 使得 python  成为 很好 的 入门 语言
 像 java  一样 python  拥有 一个 庞 大 的 标准库 因此可以 在 课 程 非常 早期 的 阶 段 就 给 学生 布 置 一些 实 用 的 编程 项目
 编程 作 业 不必 仅限 于 标准 四 则 运算 和 账 目 检查 程序
 通过使用 标准库 学生 可以在 学习 编程 基础 知 识 的 同时 开发 真正 的应用 从而 获得 更大 的 满足 感
 使用 标准库 还 能 使 学生 了解 代码 重 用 的概念
 而 像 pygame  这样的 第三方 模块 同样 有 助 于 扩 大 学生 的 接 触 领 域
python  的 解释器 使 学生 能够 在 编程 时 测试 语言特性
 他们 可以在 一个 窗口中 输入 程序 源代码 的 同时 开 启 一个 解释器 运行 窗口
 如果 他们 不 记 得 列表 有 哪些 方法 他们 这 以 这样做 l  dirl  add  class  contains  delattr  delitem  dir  doc  eq  format  ge  getattribute  getitem  gt  hash  iadd  imul  init  iter  le  len  lt  mul  ne  new  reduce  reduceex  repr  reversed  rmul  setattr  setitem  sizeof  str  subclasshook  append  clear  copy  count  extend  index  insert  pop  remove  reverse  sort  d  for  d  in  dirl  if  not  in  d  append  clear  copy  count  extend  index  insert  pop  remove  reverse  sort  helpl
append 1 l 1 通过使用 解释器 学生 编写 程序 时 参考 文档 总是 能 伴 随 在 他们 身 边
python  还 拥有 很好 的 ide
 idle  是一个 跨平台 的 python  ide  它 基于 tkinter  库 使用 python  语言 编写
 pythonwin  是一个 windows  专属的 ide
 emacs  用户 将 高 兴 地 了解 到 emacs  具有 非常 好 的 python  模式
 所有这些 编程 环境 都 提供 语法 高 亮 自动 缩进 以及 在 编写 代码 时 使用 交互式 解释器 等 功能
 请访问 python  wiki  查看 python  编程 环境 的完整 列表
 如果你想要 讨论 python  在 教 育 中 的 使用 你可能 会 有 兴趣 加入 edusig  邮件列表
 为什么 我 的 电 脑 上 安装了 python ？
 什么是 python ？
 为什么 我 的 电 脑 上 安装了 python ？
 如果你不 记 得 你 曾 主 动 安装 过 python  但它 却 出现在 了 你 的 电 脑 上 这里 有一些 可能 的原因
 可能是 这 台 电 脑 的其他 用户 因 想 学习 编程 而 安装了 它 你 得 琢 磨 一 下 谁 用 过 这 台 电 脑 并 安装了 python
 电 脑 上 安装 的 第三方 应用程序 可能 由 python  写成 并附带 了 一份 python
 这 样 的 应用程序 有 很多 例如 gui  程序、 网络 服务器、 管理 脚本 等
 一些 windows  可能 预 装了 python
 在 撰写 本文 时 我们 了解 到 hewlett  packard  和 compaq  的 计算机 包含 python
 显然 hpcompaq  的一些 管理 工具 是 用 python  编写 的
 许多 unix  兼容 的操作系统 例如 mac  os  x  和 一些 linux  发行版 默认 安 装了 python  它 被 包含在 基本 安装 套件 中
 我 能 删除 python  吗？
 图形 用户界面 gui  常见问题
 图形 界面 常见问题
python  是否有 平台 无 关 的 图形 界面 工具 包？
tkinter
wxwidgets
qt
qt  工具 包 可 使用 pyqt  或 pyside  及 kde  pykde 4 有 多个 绑定 适配 可 供 选择
 pyqt  当前 相 较 pyside  更 成 熟 但 如果你想 编写 专 有 软件 就必须 要 从 riverbank  computing  购 买 pyqt  许可证
 pyside  则可以 自由 使用 于 各 类 软件
5 以 上 版本 使用 lgpl  进行 许可 此外 商 业 许可证 可 从 qt  公 司 那 里 获得
gtk
kivy
kivy  是一种 跨平台 图形 用户界面 库 同时 支持 桌 面 操作系统 windowsmacos  和 linux  以及 移动 设备 androidios
 该 库 使用 python  和 cython  编写 可以使用 一系列 窗口 后 端
kivy  是 自由 的 开源 软件 使用 mit  许可证 分发
fltk
the  fltk  toolkit  的 python  绑定 是简单 却 功能 强大 且 成 熟 的 跨平台 窗口 系统 可以在 the  pyfltk  project  里 获得 相关信息
opengl
 对 于 opengl  绑定 请参阅 pyopengl
 有 哪些 python  的 gui  工具 是 某个 平台 专用 的？
 通过 安装 pyobjc  objectivec  bridgepython  程序 可以使用 mac  os  x  的 cocoa  库
mark  hammond  的 pythonwin  包括 一个 微 软 基础 类 mfc  的 接口 和 一个 绝 大多数 由 使用 mfc  类 的 python  写成 的 python  编程 环境
 有关 tkinter  的 问题
 我 怎样 冻结 tkinter  程序？
 在 等待 io  操作 时 能够 处理 tk  事件 吗？
 在 windows  以外 的其他 平台上 可以 你 甚至 不需要 使用 线程 但是 你必须 稍 微 修改 一 下 你 的 io  代码
 tk  有 与 xt  的 xtaddinput  对应的 调用 它 允许你 注册一个 回调函数 当 一个 文件描述符 可以 进行 io  操作 的时候 tk  主 循环 将 会 调用 这 个 回调函数
 参见 file  handlers
 在 tkinter  中 键 绑定 不 工作 为什么？
 经常 听 到 的 抱 怨 是 已经 通过 bind  方法 绑定 了 事件 的 处理程序 但是 当 按下 相关的 按键 后 这 个处理程序 却 没有 执行
 最常见的 原因 是 那 个 绑定 的 控件 没有 键 盘 焦 点
 请 在 tk  文档 中查找 focus  指令
 通常 一个 控件 要 获得 键 盘 焦 点 需要 点击 那 个 控件 而不是 标签 请查看 takefocus  选项
 解决 bug
python  是 一 门 以 稳定 著 称 的 编程语言
 为 了 保持 它 的 稳定 性 开发者 们想 了解 您 在 python  中 发 现 的 任何 缺 陷
 有 时候 自己 修复 漏洞 并 将 补丁 提交 给 python  能 更快 地 解决 问题 因为它 简化 了 流程 并且 减少 了 参 与 的 人 力
 请参阅 如何 提交 补丁
 文档 错误
 使用 python  的 问题 追踪 系统
 对 于 python  本身 的 错误报告 应当 通过 python  错误 追踪 系统 httpsbugs
org  进行 提交
 该 错误 追踪 系统 提供了一个 可以 输入 并 提交 相关信息 给 开发者 的 网 页 表 单
 第 一步 是 确 认 是否有 重复 的 报告
 这样做 除了 可以 节 省 开发者 的 时间 也 能 让 您 从 中 了解 到 我们 做 出了 怎样 的 努 力 我们 有可能 已经 在 下 个 版本中 修复 了 这个问题 也 有 可能需要 更 详细 的 信息 在这种情况下 非常 欢 迎 您 提供
 要 查找 重复 的 报告 请使用 顶 部 的 搜索 栏 进行 搜索
 如果您 没有 搜索 到 您 想 报告 的 问题 请 返回 并 登 录 python  错误 追踪 系统
 如果您 没有 账 号 请 点击 注册 register  链接 或者 在 侧 边 栏 中选择 任何 一个 openid  登 录 方式
 您 不 能 匿名 提交 一份 错误报告
 如果 已经 登 录 那 您 就可以 提交 错误报告 了
 请 点击 侧 边 栏 中 的 新 建 createnew  链接 打开 报告 表 单
 表 单 中 有 几个 空 栏 译 者 注 请 用 英 语 填 写
 请 在 标题 title  栏 填 入 对 问题 非常 简短 的描述 一个 好 的描述 应当 少 于 十 个 单词
 在 类型 type  栏 选择 您 的 问题 的 类型 同样 地 选择 bug  相 对应的 组件 component  和 版本 versions
 在 说明 comment  栏 请 详细 描述 问题 包括 您 预期的 情况 和 实际 的 情况
 请 确保 包含 任何 涉及 的 拓 展模块 以及 您 当 时 所使用的 硬 件 和 软件 平台 如果可能 请 附 上 版本 信息
 每 一份 错误报告 将 被 分 派 给 一 名 开发者 并 由 这 名 开发者 决定 如何 修正 这个问题
 每 当 有 相关的 进 展 时 您 都会 收到 通知
 参见 如何 有效 地 报告 错误 该 文 章 详细 介绍了 如何 创建 一份 有用的 错误报告
 它 描述了 什么 样 的 信息 是 有用的 以及 为什么 是 有用的
 错误报告 编写 指南 关于 写 一份 好 的 错误报告
 部分 仅 针对 mozilla  项目 不 过 其 描述了 通 用 的 恰 当 做法
 开始 为 python  贡献 您 的 知 识
 除了 仅仅 报告 您 所 发 现 的 错误 之外 同样 欢 迎 您 提交 修复 它们的 补丁
 您可以 在 python  开发者 指 引 中找到 更多 为 python  打 补丁 的 信息
 如果您 有任何 问题 核心 导 师 邮件列表 是一个 友 好 的 去 处 在 那 里 你可以 寻 求 修复 python  相关 问题 的 答 案
 定义 扩展 类型 已 分 类 主题
 终结 和 内存 释放
destructor  tpdealloc  当 您 的 类型 实例 的引用计数 减少 为零 并且 python  解释器 想要 回收 它 时 将 调用 此 函数
 如果你 的 类型 有 内存 可 供 释放 或 执行 其他 清理 你可以 把它 放 在这里
 对象 本身 也 需要 在这里 释放
 以下是 此 函数 的 示例 static  void  newdatatypedeallocnewdatatypeobject  obj  freeobjobjunderlyingdatatypeptr  pytypeobjtpfreeobj  一个 重要的 释放 器 函数 实现 要求 是 把 所有 未 决 异常 放 着 不 动
 这 很重要 是因为 释放 器 会 被 解释器 频 繁 的 调用 当 栈 异常 退出时 而非 正常 返回 不 会 有任何 办 法 保护 释放 器 看到 一个异常 尚未 被设置
 此 事 释放 器 的 任何 行为 都 会导致 额外 增加 的 python  代码 来 检查 异常 是否 被设置
 这 可能导致 解释器 的 误 导 性 错误
 正确的 保护 方法 是 在任何 不安全 的 操作 前 保存 未 决 异常 然后 在 其 完成后 恢复
 者 可以通过 pyerrfetch  和 pyerrrestore  函数 来实现 static  void  mydeallocpyobject  obj  myobject  self  myobject  obj  pyobject  cbresult  if  selfmycallback  null  pyobject  errtype  errvalue  errtraceback  this  saves  the  current  exception  state  pyerrfetcherrtype  errvalue  errtraceback  cbresult  pyobjectcallnoargsselfmycallback  if  cbresult  null  pyerrwriteunraisableselfmycallback  else  pydecrefcbresult  this  restores  the  saved  exception  state  pyerrrestoreerrtype  errvalue  errtraceback  pydecrefselfmycallback  pytypeobjtpfreepyobjectself  注解 there  are  limitations  to  what  you  can  safely  do  in  a  deallocator  function
 从 python 3
4 开始 推荐 不 要 在 tpdealloc  放 复杂的 终结 代码 而 是 使用 新 的 tpfinalize  类型 方法
 参见 pep 442 解释 了新的 终结 方案
 对象 展示
 在 python  中 有两种 方式 可以 生成 对象 的 文本 表示 repr  函数 和 str  函数
 print  函数 会 直接调用 str
 这些 处理程序 都 是可选的
 reprfunc  tprepr  reprfunc  tpstrtprepr  处理程序 应该 返回 一个字符串 对象 其中包含 调用 它 的 实例 的 表示形式
 下面是一 个简单的例子 static  pyobject  newdatatypereprnewdatatypeobject  obj  return  pyunicodefromformatreprifiednewdatatypesized  objobjunderlyingdatatypeptrsize  如果没有 指定 tprepr  处理程序 解释器 将 提供一个 使用 tpname  的 表示形式 以及 对象 的 惟 一 标识 值
 下面是一 个简单的例子 static  pyobject  newdatatypestrnewdatatypeobject  obj  return  pyunicodefromformatstringifiednewdatatypesized  objobjunderlyingdatatypeptrsize 
 属性 管理
 泛型 属性 管理
typespecific  attribute  management
 例如 static  pyobject  newdatatypegetattrnewdatatypeobject  obj  char  name  if  strcmpname  data 0 return  pylongfromlongobjdata  pyerrformatpyexcattributeerror 
object  comparison
abstract  protocol  support
python  supports  a  variety  of  abstract  protocols  the  specificinterfaces  provided  to  use  these  interfaces  are  documented  in  抽象 对象 层
weak  reference  support
 参见 documentation  for  the  weakref  module
 更多 建议
 asample  of  its  use  might  be  something  like  the  following  if  pyobjecttypechecksomeobject  mytype  pyerrsetstringpyexctypeerror  arg 1 not  a  mything  return  null  参见 下载 cpython  源代码 版本
orgdownloadssource  github  上 开发 cpython  源代码 的 cpython  项目
 在 windows  上 构建 c  和 c  扩展
 这 一章 简 要 介绍了 如何使用 microsoft  visual  c  创建 python  的 windows  扩展模块 然后再 提供 有关 其 工作 机 理 的 详细 背景 信息
 这些 说明 材 料 同时 适用于 windows  程序员 学习 构建 python  扩展 以及 unix  程序员 学习 如何 生成 在 unix  和 windows  上 均 能 成功 构建 的 软件
 鼓 励 模块 作者 使用 distutils  方式来 构建 扩展模块 而 不 使用 本节 所描述的 方式
 你 仍 将 需要使用 c  编译器 来构建 python  通常 为 microsoft  visual  c
 注解 这 一章 提 及 了 多个 包括 已 编码 python  版本号 的文件名
 这些 文件名 以 显示 为 xy  的 版本号 来 代表 在 实 践 中 x  将 为 你 所使用的 python  发布版 的 主 版本号 而 y  将 为 次 版本号
 例如 如果你 所使用的 是 python 2
1 xy  将 为22
 菜 谱 式说明
 在 windows  和 unix  上 构建 扩展模块 都 有两种 方式 使用 distutils  包 来 控制 构建 过程 或者 全 手动 操作
 distutils  方式 适用于 大多数 扩展 使用 distutils  构建和 打包 扩展 模块的文档 见 分发 python  模块 遗 留 版本
 如果你 发 现 你 确实 需要 手动 操作 那么 研 究 一 下 winsound  标准库 模块 的项目 文件 可能会 很 有 帮助
unix  和 windows  之间的 差异
unix  和 windows  对 于 代码 的 运行时 加载 使用了 完全 不同的 范 式
 在 你 尝试 构建 可 动态 加载 的 模块 之前 要 先 了解 你所 用 系统 是如何 工作 的
 在 unix  中 一个 共享 对象
so  文件 中包含 将 由 程序来 使用 的 代码 也 包含在 程序中 可 被 找到 的 函数 名称 和 数据
 当 文件 被 合并 到 程序中 时 对 在 文件 代码中 这些函数 和 数据 的全部 引用 都会被 改 为 指向 程序中 函数 和 数据 在内存中 所 放置 的 实际 位置
 这 基本上 是一个 链接 操作
 在 windows  中 一个 动态链接库
dll  文件 中没有 悬 挂 的 引用
 而 是通过 一个 查找 表 执行 对 函数 或 数据 的 访问
 因此在 运行时 dll  代码 不必 在运行时 进行 修改 相反 地 代码 已经 使用了 dll  的 查找 表 并且 在运行时 查找 表 会 被修改 以 指向 特定的 函数 和 数据
 在 unix  中 只 存在一 种 库 文件
a  它包含 来自 多个 对象 文件
o  的 代码
 在 创建 共享 对象 文件
so  的 链接 阶 段 链接器 可能会 发 现 它 不 知道 某个 标识符 是 在 哪 里 定义 的
 链接器 将 在 各个 库 的 对象 文件 中查找 它 如果 找到 了 它 链接器 将 会 包括 来自 该对象 文件 的 所有 代码
 在 windows  中 存 在 两种 库 类型 静态 库 和 导入 库 扩展名 都 是
 静态 库 类似于 unix  的
a  文件 它包含 在必要时 可 被 包括 的 代码
 导入 库 基本上 仅 用 于 让 链接器 能 确保 特定 标识符 是 合法的 并且 将 在 dll  被 加载 时 出现于 程序中
 这样 链接器 可 使用 来自 导入 库 的 信息 构建 查找 表 以便 使用 未 包括在 dll  中 的 标识符
 当 一个 应用程序 或 dll  被 链接 时 可能会 生成一个 导入 库 它 将 需要 被用于 应用程序 或 dll  中 未来 所有 依赖于 这些 符号 的 dll
 假设 你 正 在 编译 两个 动态 加载 模块 b  和 c  它们 应当 共享 另一个 代码块 a
 在 unix  上 你 不应 将 a
a  传给 链接器 作为 b
so  和 c
so  那 会导致 它 被 包括 两次 这样 b  和 c  将 分别 拥有 它们 自己 的副本
 在 windows  上 编译 a
dll  将 同时 编译 a
 你 应当 将 a
lib  传给 链接器 用 于 b  和 c
 a
lib  并 不包含 代码 它 只包含 将 在运行时 被用于 访问 a  的 代码 的 信息
 在 windows  上 使用 导入 库 有 点 像 是 使用 import  spam  它 让 你可以 访问 spam  中 的 名称 但 并不会 创建一个 单独 副本
 在 unix  上 链接到 一个 库 更 像 是 from  spam  import  它 会创建一个 单独 副本
dll  的 实际 使用
windows  版 python  是 用 microsoft  visual  c  编译 的 使用 其他 编译器 可能 行 也可能 不 行 但 borland  看 来 是可以 的
 这 一节 的 剩余 部分 只 适用于 msvc
 当 在 windows  中 创建 dll  时 你必须 将 pythonxy
lib  传给 链接器
 要 编译 两个 dllspam  和 ni  会 使用 spam  中找到 的 c  函数 你 应当 使用以下 命令 cl  ld  ipythoninclude  spam
lib  第 一条 命令 创建了 三个 文件 spam
dll  和 spam
spam
dll  不包含 任何 python  函数 例如 pyargparsetuple  但它 通过 pythonxy
lib  可以 知道如何 找到 所需的 python  代码
 第二 条 命令 创建了 ni
dll  以及
obj  和
lib  它 知道如何 从 spam  以及 python  可执行文件 中找到 所需的 函数
 不 是 每个 标识符 都会被 导出 到 查找 表
 如果你想要 任何其他 模块 包括 python  都 能 看到 你 的 标识符 你必须 写 上 declspecdllexport  就 如 在 voiddeclspecdllexport  initspamvoid  或 pyobject  declspecdllexportnigetspamdatavoid  中 一样
developer  studio  将 加入 大量 你 并 不 真正 需要 的 导入 库 使 你 的 可执行文件 大小 增加100 k
 要 摆 脱 它们 请使用 项目 设置 对话框的 链接 选项卡 指定 忽略 默认 库
 将 正确的 msvcrtxx
lib  添加到 库 列表中
 在 其 它 应用程序 嵌入 python
 参见 pythonc  api  参考 手册 the  details  of  pythons  c  interface  are  given  in  this  manual
very  high  level  embedding
beyond  very  high  level  embedding  an  overview
 转换 python  的 数据 值 到 c 2
 转换 c  的 数据 值 到 python 2
 纯 嵌入
 if  you  compile  and  link  this  programlets  call  the  finished  executable  call  and  use  it  to  execute  apython  script  such  as  def  multiplyab  printwill  compute  a  times  b  c 0 for  i  in  range 0 a  c  c  b  return  c  然后 结果 应该是 call  multiply  multiply 32 will  compute 3 times 2 result  of  call 6 although  the  program  is  quite  large  for  its  functionality  most  of  thecode  is  for  data  conversion  between  python  and  c  and  for  errorreporting
extending  embedded  python
 在 c  中 嵌入 python
 在 类 unix  系统中 编译 和 链接
4 m  xlinker  exportdynamic  注解 to  avoid  confusion  between  several  python  installations  and  especially  between  the  system  python  and  your  own  compiled  python  it  is  recommended  that  you  use  the  absolute  path  to  pythonx
 自定义 扩展 类型 教程
python  允许 编写 c  扩展模块 定义 可以从 python  代码中 操 纵 的 新 类型 这 很 像 内置的 str  和 list  类型
 所有 扩展 类型 的 代码 都 遵循 一个 模式 但是 在 您 开始 之前 您 需要 了解 一些 细节
 这 份 文件 是 对 这 个 主题 介绍
 基础
adding  data  and  methods  to  the  basic  example
 注解 the  explicit  cast  to  destructor  above  is  needed  because  we  defined  customdealloc  to  take  a  customobject  argument  but  the  tpdealloc  function  pointer  expects  to  receive  a  pyobject  argument
 注解 tpnew  shouldnt  call  tpinit  explicitly  as  the  interpreter  will  do  it  itself
 注解 we  didnt  fill  the  tpalloc  slot  ourselves
 注解 if  you  are  creating  a  cooperative  tpnew  one  that  calls  a  base  types  tpnew  or  new  you  must  not  try  to  determine  what  method  to  call  using  method  resolution  order  at  runtime
 see  the  泛型 属性 管理 section  below  fordetails
providing  finer  control  over  data  attributes
supporting  cyclic  garbage  collection
 with  pyvisit  we  can  minimize  the  amount  ofboilerplate  in  customtraverse  static  int  customtraversecustomobject  self  visitproc  visit  void  arg  pyvisitselffirst  pyvisitselflast  return 0 注解 the  tptraverse  implementation  must  name  its  arguments  exactly  visit  and  arg  in  order  to  use  pyvisit
 注解 you  could  emulate  pyclear  by  writing  pyobject  tmp  tmp  selffirst  selffirst  null  pyxdecreftmp  nevertheless  it  is  much  easier  and  less  errorprone  to  always  use  pyclear  when  deleting  an  attribute
subclassing  other  types
 脚注1 this  is  true  when  we  know  that  the  object  is  a  basic  type  like  a  string  or  a  float
 扩展 和 嵌入 python  解释器
 本文档 描述了 如何使用 c  或 c  编写 模块 以 使用 新 模块 来 扩展 python  解释器 的功能
 这些模块 不仅 可以定义 新的函数 还可以 定义 新 的 对象类型 及其 方法
 该 文档 还 描述了 如何将 python  解释器 嵌入到 另一个 应用程序中 以用作 扩展 语言
 最后 它 展示了 如何 编译 和 链接 扩展模块 以便 它们可以 动态 地 在运行时 加载 到 解释器中 如果 底层 操作系统 支持 此 特性 的话
 本文档 假设 你 具 备 有关 python  的基本 知 识
 有关 该 语言 的 非 正式 介绍 请参阅 python  教程
 python  语言 参考 给出了 更 正式 的 语言 定义
 python  标准库 包含 现有的 对象类型、 函数 和 模块 内置 和 用 python  编写 的 文档 使 语言 具有 广泛 的应用 范围
 关于 整个 pythonc  api  的 详细 介绍 请参阅 独立的 pythonc  api  参考 手册
 推荐的 第三方 工具
 本 指南 仅 介绍了 作为 此 cpython  版本 的一部分 提供的 创建 扩展 的基本 工具
 第三方 工具 如 cython 、 cffi 、 swig  和 numba  提供了 更简单 和 更复杂的 方法来 为 python  创建 c  和 c  扩展
 参见 python  packaging  user  guide  binary  extensions  python  packaging  user  guide  不仅 涵盖 了 几个 简化 二进制 扩展 创建 的 可 用 工具 还 讨论 了 为什么 首先 创建 扩展模块 的各种 原因
 不 使用 第三方 工具 创建 扩展
 本 指南 的 这 一部分 包括 在没有 第三方 工具 帮助 的情况下 创建 c  和 c  扩展
 它 主要 用 于这些 工具 的 创建 者 而不是 建议 你 创建 自己的 c  扩展 的 方法
 使用 c  或 c  扩展 python 1
 一个简单的例子1
 关于 错误 和 异常1
 回 到 例子1
 模块 方法 表 和 初始化 函数1
 编译 和 链接1
 在 c  中 调用 python  函数1
 提取 扩展 函数的参数1
 给 扩展 函数 的 关键字参数1
 构造 任意 值1
 引用计数1
 在 c  中 编写 扩展1
 给 扩展模块 提供 c  api 2
 自定义 扩展 类型 教程2
 基础2
 定义 扩展 类型 已 分 类 主题3
 终结 和 内存 释放3
 对象 展示3
 属性 管理3
 更多 建议4
 构建 cc  扩展4
 使用 distutils  构建 c  和 c  扩展4
 发布 你 的扩展模块5
 在 windows  上 构建 c  和 c  扩展5
 菜 谱 式说明5
 unix  和 windows  之间的 差异5
 dll  的 实际 使用
 在 更大 的 应用程序中 嵌入 cpython  运行时
 有 时 不 是 要创建 在 python  解释器中 作为 主 应用程序 运行 的 扩展 而 是 希望 将 cpython  运行时 嵌入到 更大 的 应用程序中
 本节 介绍了 成功 完成 此操作 所 涉及 的一些 细节
 在 其 它 应用程序 嵌入 python 1
 纯 嵌入1
 在 c  中 嵌入 python 1
 在 类 unix  系统中 编译 和 链接
 构建 cc  扩展
 使用 distutils  构建 c  和 c  扩展
 扩展模块 可以用 distutils  来构建 这是 python  自 带 的
distutils  也支持 创建 二进制 包用户 无需 编译器 而 distutils  就能 安装 扩展
 一个 distutils  包 包含了 一个 驱 动 脚本 setup
py 
 这是 个 纯 python  文件 大多数 时候 也 很 简单 看起来 如 下 from  distutils
0 description  this  is  a  demo  package  extmodules  module 1 通过 文件 setup
py  和 文件 demo
c  运行 如 下 python  setup
py  build  这 会 编译 demo
c  然后 产生一个 扩展模块 叫 做 demo  在 目录 build  里
 依赖于 系统 模块 文件 会 放在 某个 子目录 形 如 buildlib
system  名 字 可能是 demo
so  或 demo
pyd 
 在 文件 setup
py  里 所有 动作 的 入 口 通过 setup  函数
 该 函数可以 接受 可变数 量 个 关键字参数 上面的例子 只 使用了 一个 子集
 特别 需要 注意 的 例子 指定了 构建 包 的 元 信息 以及 指定了 包 内容
 通常 一个 包 会 包括 多个 模块 就像 python  的 源码 模块、 文档、 子 包 等
 请 参数 distutils  的 文档 在 分发 python  模块 遗 留 版本 来 了解更多 distutils  的 特性 本 章节 只 解释 构建 扩展模块 的部分
 通常 预 计算 参数 给 setup  想要 更好的 结构化 驱 动 脚本
 有 如 如 上 例子 函数 setup  的 extmodules  参数是一 列 扩展模块 每个 是一个 extension  类的实例
 例子中 的 实例 定义了 扩展 命名为 demo  从 单 一 源码 文件 构建 demo
c 
 更多 时候 构建 一个 扩展 会 复杂的 多 需要 额外的 预 处理器 定义 和 库
 如 下 例子 展示了 这些
 extmodules  module 1 例子中 函数 setup  在 调用时 额外 传递 了 元 信息 是 推荐 发布 包 构建 时 的内容
 对 于 这 个 扩展 其 指定了 预 处理器 定义 include  目录 库 目录 库
 依赖于 编译器 distutils  还 会 用其他 方式 传递 信息 给 编译器
 例如 在 unix  上 结果是 如 下 编译 命令 gcc  dndebug  g  o 3 wall  wstrictprototypes  fpic  dmajorversion 1 dminorversion 0 iusrlocalinclude  iusrlocalincludepython 2
so  这些 行 代码 仅 用 于 展示 目 的 distutils  用户 应该 相 信 distutils  能 正确 调用
 发布 你 的扩展模块
 使用 c  或 c  扩展 python
 一个简单的例子
 让我们 创建一个 扩展模块 spam  monty  python  粉 丝 最 喜欢 的 食 物
 并且 想要 创建 对 应 c  库 函数 system 1 的 python  接口
 这个函数 接受一个 以 null  结尾 的 字符串参数 并返回一个 整数
 我们 希望 可以在 python  中 以 如 下方式 调用 此 函数 import  spam  status  spam
systemls  l  首先 创建一个 spammodule
c  文件
 传统 上 如果一个 模块 叫 spam  则 对 应 实现 它 的 c  文件 叫 spammodule
c  如果 这个模块 名 字 非常 长 比如 spammify  则 这个模块 的 文件 可以直接 叫 spammify
 文件 中 开始 的 两 行 是 define  pyssizetclean  include  python
h  这 会 导入 python  api  如果你 喜欢 你可以 在这里 添加 描述 模块 目标 和 版权 信息 的 注释
 注解 由 于 python  可能会 定义 一些 影响 某些 系统上 标准 头文件 的 预 处理器 定义 因此 在 包含 任何 标准 头文件 之前 您 必须 include  这 个 文件 python
h
 推 荐 总是 在 python
h  前 定义 pyssizetclean 
 查看 提取 扩展 函数 的 参数 来 了解 这 个 宏 的更多 内容
 所有 在 python
h  中定义的 用户可 见 的符号 都 具有 py  或 py  前缀 已 在 标准 头文件 中定义的 那些 除外
 考虑 到 便 利 性 也 由 于 其 在 python  解释器中 被 广泛 使用 python
h  还 包含了 一些 标准 头文件 stdio
hstring
herrno
h  和 stdlib
 如果 后面 的 头文件 在你的 系统上 不存在 它还 会直接 声明 函数 mallocfree  和 realloc
 下面 要 做 的 事 是 将 c  函数 添加到 我们 的扩展模块 当 python  表达式 spam
systemstring  被求值 时 函数 将 被调用 我们 很 快 就会 看到 它 最终 是如何 被调用 的 static  pyobject  spamsystempyobject  self  pyobject  args  const  char  command  int  sts  if  pyargparsetupleargs  s  command  return  null  sts  systemcommand  return  pylongfromlongsts  有 个 直接 翻译 参数列表 的 方法 例如 单独的 lsl  到 要 传递给 c  函数的参数
c  函数总是 有 两个参数 通常 名 字 是 self  和 args 
 对 模块级 函数 self  参数 指向 模块 对象 对 于 对象 实例 则 指向 方法
args  参数 是 指向一个 python  的 tuple  对象 的 指针 其中包含 参数
 每个 tuple  项 对 应 一个 调用 参数
 这些参数 也 全 都 是 python  对象 要 在 我们 的 c  函数 中 使用它们 就 需要 先 将其转换为 c  值
 python  api  中的函数 pyargparsetuple  会 检查 参数 类型 并 将其转换为 c  值
 它 使用 模板 字符串 确定 需要 的 参数 类型 以及 存储 被 转换 的 值 的 c  变量 类型
 细节 将 稍后 说明
pyargparsetuple  在所有 参数都 有 正确 类型 且 组成部分 按 顺序 放在 传递 进 来 的地址 里 时 返回真 非零
 其 在 传入 无效 参数 时 返回假 零
 在 后续 例子 里 还 会抛出 特定 异常 使得 调用 的 函数可以 理解 返回 null  也就是 例子 里 所 见
 关于 错误 和 异常
 回 到 例子
 回 到 前 面的例子 你应该 明 白 下面的 代码 if  pyargparsetupleargs  s  command  return  null  如果在 参数列表 中 检测到 错误 它 将 返回 null  该值 是 返回 对象 指针 的 函数 所使用的 错误 提示 这 取决于 pyargparsetuple  设置 的 异常
 在其他情况下 参数 的 字符串 值会被 拷贝 到 局部变量 command
 这是一个 指针 赋值 并且 你 不应该 修改 它 所指向的 字符串 因此在 标准 c  中 变量 command  应当被 正确地 声明为 const  char  command
 下 一个 语句 使用 unix  系统 函数 system  传递给 他 的 参数 是 刚 才 从 pyargparsetuple  取出 的 sts  systemcommand  我们 的 spam
system  函数 必须返回 sts  的 值 作为 python  对象
 这 通过使用 函数 pylongfromlong  来实现
 return  pylongfromlongsts  在这种情况下 会返回一个 整数 对象 这个对象 会 在 python  堆 里面 管理
 如果你 的 c  函数 没有 有用的 返回值 返回 void  的 函数 则 必须返回 none
 你可以用 pyretunnone  宏 来完成 pyincrefpynone  return  pynonepynone  是 特殊 python  对象 none  所对应的 c  名称
 它是一个 真正 的 python  对象 而不是 null  指针 如 我们 所 见 后者 在大多数 上下文中 都 意味着 错误
 模块 方法 表 和 初始化 函数
 编译 和 链接
 在 你 能 使用 你 的 新 写 的 扩展 之前 你 还需要 做 两 件 事情 使用 python  系统 来 编译 和 链接
 如果你使用 动态 加载 这 取决于 你 使用 的操作系统 的动态 加载 机制 更多信息请参 考 编译 扩展模块 的 章节 构建 cc  扩展 章节 以及 在 windows  上 编译 需要 的 额外 信息 在 windows  上 构建 c  和 c  扩展 章节
 如果你不 使用 动态 加载 或者 想要 让 模块 永 久 性 的 作为 python  解释器 的一部分 就必须 修改 配置 设置 并 重新 构建 解释器
 幸 运 的 是 在 unix  上 很 简单 只需要 把 你 的 文件 spammodule
c  为 例 放在 解压缩 源码 发行 包 的 modules  目录 下 添加一 行 到 modulessetup
local  来 描述 你 的 文件 spam  spammodule
o  然后 在 顶 层 目录 运行 make  来 重新 构建 解释器
 你也可以 在 modules  子目录 使用 make  但是 你必须 先 重 建 makefile  文件 然后 运行 make  makefile  命令
 你 每次 修改 setup  文件 都 需要 这样 操作
 如果你 的 模块 需要 额外的 链接 这些 内容 可以 列出 在 配置文件 里 举 个实例 spam  spammodule
 在 c  中 调用 python  函数
 提取 扩展 函数的参数
 函数 pyargparsetuple  的 声明 如 下 int  pyargparsetuplepyobject  arg  const  char  format 
 参数 arg  必须是一个 元组 对象 包含 从 python  传递给 c  函数 的参数列表
format  参数必须是 一个 格式字符串 语法 请 参考 python  capi  手册 中 的 语句 解释 及 变量 编译
 剩余 参数 是 各个 变量 的地址 类型 要 与 格式字符串 对 应
 注意 pyargparsetuple  会 检测 他 需要 的 python  参数 类型 却 无法 检测 传递给 他 的 c  变量 地址 如果 这里 出错 了 可能会 在内存中 随机 写入 东西 小 心
 注意 任何 由 调用者 提供的 python  对象 引用 是 借 来 的 引用 不 要 递 减 它们 的引用计数 一些 调用 的 例子 define  pyssizetclean  make  s  use  pyssizet  rather  than  int
 给 扩展 函数 的 关键字参数
 函数 pyargparsetupleandkeywords  声明 如 下 int  pyargparsetupleandkeywordspyobject  arg  pyobject  kwdict  const  char  format  char  kwlist 
arg  与 format  形参 与 pyargparsetuple  函数 所定义的 一致
kwdict  形参 是作为 第三个 参数 从 python  运行时 接收 的 关键字 字典
kwlist  形参 是 以 null  结尾 的 字符串列表 它 被用来 标识 形参 名称 从左至右 与 来自 format  的 类型 信息 相匹配
 如果 执行 成功 pyargparsetupleandkeywords  会 返回真值 否则返回 假值 并 引发一个 适当的 异常
 注解 嵌套的 元组 在 使用 关键字参数 时 无法 生效 不 在 kwlist  中 的 关键字参数 会 导致 typeerror  异常
 如 下 是 使用 关键字参数 的 例子 模块 作者 是 geoff  philbrickphibrickhks
 构造 任意 值
 引用计数
python  中 的引用计数
 拥有 规则
 危 险 的 薄 冰
null  指针
 通常 接受 对象 引用 作为参数 的 函数 不希望 你 传给 它们 null  指针 并且 当你 这样做 时 将 会 转 储 核心 或 在 以 后 导致 核心 转 储
 返回 对象 引用 的 函数 通常 只 在 要 指明 发生了 异常 时才 返回 null
 不 检测 null  参数 的原因 在 于 这些函数 经常 要 将它们 所 接收 的 对象 传给 其他 函数 如果 每个 函数 都 检测 null  将 会导致 大量 的 冗 余 检测 而 使 代码 运行 得更 缓 慢
 更好 的做法是 仅在 源 头 上 检测 null  即 在 接收到 一个 可能为 null  的 指针 例如 来自 malloc  或 是一个 可能 引发异常 的 函数 的时候
pyincref  和 pydecref  等 宏 不 会 检测 null  指针 但是 它们的 变种 pyxincref  和 pyxdecref  则 会 检测
 用 于 检测 特定 对象类型的 宏 pytypecheck  不 会 检测 null  指针 同样 地 有 大量 代码 会 连续 调用 这些 宏 来 测试 一个 对象是否 为 几 种不同 预期 类型 之一 这 将 会生成 冗 余 的 测试
 不存在 带有 null  检测 的 变体
c  函数调用 机制 会 保证 传给 c  函数 的参数列表 本 示例中 为 args  绝 不 会 为 null  实际上 它 会 保证 其 总是 为 一个元组4
 任何 时候 将 null  指针 泄 露 给 python  用户 都会 是 个 严重 的 错误
 在 c  中 编写 扩展
 给 扩展模块 提供 c  api
 数据结构
 本章 将 详细 介绍 一些 您 已经 了解 的内容 并 添加 了一些 新 内容
 列表 的更多 特性
 列表 数据类型 还有 很多 的 方法
 这里 是 列表对象 方法 的 清 单 list
appendx  在 列表 的末尾 添加一个 元素
 相当于 alena  x 
extenditerable  使用 可迭代对象 中 的所有元素 来 扩展 列表
 相当于 alena  iterable 
inserti  x  在 给定的 位置 插入 一个元素
 第一个参数 是 要 插入 的 元素 的 索引 所 以 a
insert 0 x  插入 列表 头 部 a
insertlena  x  等同于 a
appendx 
removex  移除 列表中 第一个 值 为 x  的 元素
 如果没有 这样的 元素 则 抛出 valueerror  异常
popi  删除 列表中 给定 位置 的 元素 并返回 它
 如果没有给 定 位置 a
pop  将 会 删除 并返回 列表中 的最后一个 元素
 方法 签名 中 i  两 边 的 方括号 表示 这 个参数 是可选的 而不是 要 你 输入 方括号
 你 会 在 python  参考 库 中 经常 看到 这种 表示 方法
list
clear  删除 列表中 所有的 元素
 相当于 del  a 
indexx  start  end  返回 列表中 第一个 值 为 x  的 元素 的 从 零 开始 的 索引
 如果没有 这样的 元素 将 会抛出 valueerror  异常
 可选参数 start  和 end  是 切片 符号 用于将 搜索 限制为 列表 的特定 子 序列
 返回 的 索引 是 相对于 整个 序列 的 开始 计算 的 而不是 start  参数
countx  返回 元素 x  在 列表 中出现的 次 数
sortkeynone  reversefalse  对 列表 中的元素 进行排序 参数 可用于 自定义 排序 解释 请参见 sorted 
reverse  反 转 列表 中的元素
copy  返回 列表 的 一个 浅 拷贝
 相当于 a 
 列表 方法 示例 fruits  orange  apple  pear  banana  kiwi  apple  banana  fruits
pop  pear  你可能 已经 注意 到 像 insert  remove  或者 sort  方法 只 修改 列表 没有 打印出 返回值—— 它们 返回 默认值 none 
1 这是 python  中所有 可变 数据结构 的 设计 原 则
 你可能 会 注意 到 的另一 件 事 是 并非 所有 数据 或 可以 排序 或 比较
 例如 nonehello 10 就不 可 排序 因为 整数 不 能 与 字符串 比较 而 none  不 能 与其他 类型 比较
 并且 还 存在一 些 没有 定义 顺序 关系 的 类型
 例如34 j 57 j  就 不是一个 合法的 比较
 列表 作为 栈 使用
 列表 方法 使得 列表 作为 堆栈 非常 容易 最后一个 插入 最 先 取出 后 进先出
 要 添加一个 元素 到 堆栈 的 顶 端 使用 append 
 要 从 堆栈 顶 部 取出 一个元素 使用 pop  不 用 指定 索引
 例如 stack 345 stack
 列表 作为 队列 使用
 列表 也可以 用 作 队列 其 中 先 添加 的 元素 被 最 先 取出 先 进先出 然而 列表 用 作 这 个 目 的 相当 低 效
 因为在 列表 的末尾 添加 和 弹出 元素 非常 快 但是 在 列表 的开头 插入 或 弹出 元素 却 很 慢 因为 所有 的其他 元素 都必须 移动 一 位
 若 要实现 一个 队列 collections
deque  被设计用 于 快速 地 从 两 端 操作
 例如 from  collections  import  deque  queue  dequeeric  john  michael  queue
 列表推导式
 嵌套的 列表推导式
 列表推导式 中 的 初始 表达式 可以是任何 表达式 包括 另一个 列表推导式
 考虑 下面 这 个3 x 4 的 矩阵 它 由3 个长度为4 的 列表 组成 matrix 
 下面的 列表推导式 将 交换 其 行 和 列 rowi  for  row  in  matrix  for  i  in  range 4159261037114812 如 上 节 所示 嵌套的 列表推导式 是基于 跟 随 其 后 的 for  进行 求值 的 所 以 这个例子 等价于 transposed  for  i  in  range 4
 transposed 159261037114812 反 过 来说 也 等价于 transposed  for  i  in  range 4
 transposed 159261037114812 实际 应用中 你应该 会 更 喜欢 使用 内置函数 去 组成 复杂的 流程 语句
 zip  函数 将 会 很好 地 处理 这种情况 listzipmatrix 159261037114812 关于 本 行 中 星 号 的 详细 说明 参见 解包 参数列表
del  语句
 有一种 方式 可以从 列表 按照 给定的 索引 而不是 值 来 移除 一个元素 那 就是 del  语句
 它 不同于 会返回一个 值 的 pop  方法
 del  语句 也 可以用来 从 列表 中移除 切片 或者 清空 整个 列表 我们 之前 用 过 的 方式是 将 一个 空列表 赋值给 指定 的 切片
 例如 a 1166
5 del  a  a  del  也可以 被用来 删除 整个 变量 del  a  此 后再 引用 a  时 会 报 错 直到 另一个 值 被赋 给 它
 我们 会 在 后面 了解 到 del  的其他 用 法
 元组 和 序列
 集合
python  也 包含有 集合 类型
 集合 是 由 不 重复 元素 组成的 无 序 的 集
 它 的基本 用 法 包括 成员检测 和 消除 重复 元素
 集合 对象 也支持 像 联合 交 集 差 集 对 称 差 分 等 数学 运算
 花括号 或 set  函数 可以用来 创建 集合
 注意 要 创建一个 空 集合 你 只能 用 set  而 不能用 因为 后者 是 创建一个 空 字典 这种 数据结构 我们 会 在 下 一节 进行 讨论
 以下是 一些 简单的 示例 basket  apple  orange  apple  pear  orange  banana  printbasket  show  that  duplicates  have  been  removed  orange  banana  pear  apple  orange  in  basket  fast  membership  testing  true  crabgrass  in  basket  false  demonstrate  set  operations  on  unique  letters  from  two  words 
 a  setabracadabra  b  setalacazam  a  unique  letters  in  a  a  r  b  c  d  a  b  letters  in  a  but  not  in  b  r  d  b  a  b  letters  in  a  or  b  or  both  a  c  r  d  b  m  z  l  a  b  letters  in  both  a  and  b  a  c  a  b  letters  in  a  or  b  but  not  both  r  d  b  m  z  l  类似于 列表推导式 集合 也支持 推导式 形式 a  x  for  x  in  abracadabra  if  x  not  in  abc  a  r  d
 字典
 循环 的 技巧
 深 入 条件 控制
 序列 和 其 它 类型 的 比较
 序列对象 通常 可以 与 相同 序列类型 的 其他对象 比较
 这种 比较 使用 字典 式 顺序 首先 比较 开头的 两个 对 应 元素 如果两 者 不 相等 则 比较 结果 就 由 此 确定 如果两 者 相等 则 比较 之后 的两个 元素 以 此类推 直到 有 一个 序列 被 耗 尽
 如果要 比较 的两个 元素 本身 又 是 相同类型 的 序列 则 会 递归地 执行 字典 式 顺序 比较
 如果两 个 序列 中所有 的对应 元素 都 相等 则 两个 序列 也 将 被视为 相等
 如果一个 序列 是 另一个 的 初始 子 序列 则 较 短 的 序列 就 被视为 较 小 较 少
 对 于 字符串 来说 字典 式 顺序 是 使用 unicode  码 位 序号 对 单个字符 排序
 下面是一 些 相同类型 序列 之间 比较 的 例子123124123124 abc  c  pascal  python 1234124121211231
012 aa  ab 12 abc  a 4 注意 对 不同类型 对象 来说 只要 待 比较 对象提供 了 合适的 比较 方法 就 可以使用 和 来 比较
 例如 混合 数值 类型 是通过 他们 的 数值 进行比较 的 所 以0 等于0
0 等等
 否则 解释器 将 抛出一个 typeerror  异常 而不是 随 便 给出 一个 结果
 脚注1 别 的 语言 可能 会返回一个 可变对象 他们 允许 方法 连续 执行 例如 dinsertaremovebsort
 课 前 甜 点
 如果你 经常 在 电 脑 上 工作 总 会 有 些 任务 会 想 让 它 自动 化
 比如 对 一 大 堆 文本 文件进行 查找 替换 对 很多 照 片 文件 按照 比较 复杂的 规则 重 命名 并 放入 不同的 文件 夹
 也可能 你想 写 一个小 型 的 数据库 应用 一个 特定的 界面 应用 或者 一个简单的 游 戏
 如果你 是 专 业 的 软件 开发人员 你 可能需要 编写 一些 ccjava  库 但 总 觉 得 通常 的 开发 的 流程 编写、 编译、 测试、 再次 编译 等 太 慢 了
 可能 给 这样的 库 写 一 组 测试 就是 很 麻 烦 的 工作 了
 或 许你 写 了 个 软件 可以 支持 插 件 扩展 语言 但 你 不 想 为 了 自己 这 一个 应用 专门 设计 和 实现 一种 新 语言 了
 那么 python  正 好 能 满足 你 的 需要
 对 于这些 任务 你也可以 写 unix  脚本 或者 windows  批 处理 完成 但是 shell  脚本 最 擅 长 移动 文件 和 替换 文本 并 不 适合 gui  界面 或者 游 戏 开发
 你可以 写 一个 ccjava  程序 但是 可能 第一 版本 的 草 稿 都 要 很长 的 开发 时间
python  的 使用 则 更 加 简单 可以在 windowsmac  os  x  以及 unix  操作系统 上 使用 而且 可以 帮 你 更快 地 完成 工作
python  很容易 使用 但它 是一种 真正 的 编程语言 提供了 很多 数据结构 也支持 大 型 程序 远 超 shell  脚本 或 批 处理 文件 的功能
python  还提供 比 c  语言 更多的 错误 检查 而且 作为 一种 超 高级 语言 它 有 高级 的内置 数据类型 比如 灵活的 数组 和 字典
 正 因为 这些 更 加 通用的 数据类型 python  能够 应 付 更多的 问题 超过 awk  甚至 perl  而且 很多 东西 在 python  中 至少 和 那些 语言 同样 简单
python  允许你 划 分 程序 模块 在其他 的 python  程序中 重 用
 它 内置 了 很多 的 标准 模块 你可以在 此 基础 上 开发 程序—— 也 可以作为 例子 开始 学习 python  编程
 例如 文件 输入 输出 系统调用 套接字 甚至 图形 界面 接口 工作 包 比如 tk 
python  是一种 解释 型 语言 在 程序 开发 阶 段 可以为 你 节 省 大量 时间 因为 不需要 编译 和 链接
 解释器 可以 交互式 使用 这样就 可以 方便地 尝试 语言特性 写 一些 一次性 的 程序 或者 在 自 底 向 上 的 程序 开发 中 测试 功能
 它 也是 一个 顺 手 的 桌 面 计算 器
python  程序 的 书 写 是 紧凑 而 易 读 的
python  代码 通常 比 同样 功能 的 ccjava  代码 要 短 很多 原因 列 举 如 下 高级 数据类型 允许在 一个 表达式 中 表示 复杂的 操作 代码块的 划 分 是 按照 缩进 而不是 成 对 的 花括号 不需要 预 先 定义 变量 或 参数
python  是 可扩展 的 如果你 知道 怎 么 写 c  语言 程序 就能 很容易 地 给 解释器 添加新 的 内置函数 或 模块 不 论是 让 关键 的 程序 以 最高 速度 运行 还是 把 python  程序 链接到 只 提供 预 编译 程序 的 库 比如 硬 件 相关的 图形 库
 一旦 你 真正 链接 上 了 就能 在 python  解释器中 扩展 或者 控制 c  语言 编写 的应用 了
 顺 便 提 一 下 这种 语言 的名字 python  意 为 蟒 蛇 来自 于 bbc  节 目 montypython  的 飞 行 马 戏 团 而 与 爬 行 动 物 没有 关系
 在 文档中 用 monty  python  来 开 玩 笑 不 只是 可以 的 还是 推荐的 现 在 你 已经 对 python  跃 跃 欲 试 了 想要 深 入 了解 一些 细节 了
 因为 学习 语言 的最佳 方式是 使用 它 本 教程 邀 请 你 一 边 阅读 一 边 在 python  解释器中 玩 耍
 在 下 一 章节 会 讲 解 使用 解释器 的 方法
 看起来 相当 枯 燥 但 是对于 尝试 后续的 例子 来说 是非常 关键 的
 教程 的其他 部分 将 通过 示例 介绍 python  语言 和 系统中 的不同 功能 开始 是 比较 简单的 表达式、 语句 和 数据类型 然后 是 函数 和 模块 最终 接 触 一些 高级 概念 比如 异常、 用户定义的 类
 其他 流 程控制 工具
 除了 刚 刚 介绍 过 的 while  语句 python  中 也会 使用 其他语言 中 常见的 流 程控制 语句 只是 稍 有 变化
if  语句
 可能 最 为 人 所 熟 知 的 编程 语句 就是 if  语句 了
 例如 x  intinputplease  enter  an  integer  please  enter  an  integer 42 if  x 0
 more  可以 有 零 个或多个 elif  部分 以及 一个可选的 else  部分
 关键字 elif  是 else  if  的 缩 写 适合 用 于 避免 过 多 的缩进
 一个 if 
elif 
 序列 可以 看 作 是 其他语言 中 的 switch  或 case  语句 的替代
for  语句
python  中 的 for  语句 与 你 在 c  或 pascal  中 所 用 到 的 有 所 不同
 python  中 的 for  语句 并 不 总是 对 算术 递 增 的 数值 进行迭代 如 同 pascal  或 是 给 予 用户定义 迭代 步骤 和 暂 停 条件 的能力 如 同 c  而 是 对 任意 序列 进行迭代 例如 列表或 字符串 条目 的 迭代 顺序 与 它们在 序列 中出现的 顺序 一致
 例如 此处 英 文 为 双 关 语 measure  some  strings 
 cat 3 window 6 defenestrate 12 在 遍历 同 一个 集合 时 修改 该 集合 的 代码 可能 很 难 获得 正确的 结果
 通常 更 直接 的做法是 循环 遍历 该 集合 的副本 或 创建新 集合 strategy  iterate  over  a  copy  for  user  status  in  users
range  函数
 如果你 确实 需要 遍历 一个数字 序列 内置函数 range  会 派 上 用 场
 它 生成 算术 级 数 for  i  in  range 5
01234 给定的 终止 数值 并 不 在 要 生成 的 序列 里 range 10 会生成10 个 值 并且 是 以 合法的 索引 生成一个 长度为10 的 序列
range  也可以 以 另一个 数字 开头 或者 以 指定 的 幅 度 增加 甚至 是 负数 有 时 这 也 被 叫 做 步 进 range 51056789 range 01030369 range 1010030104070 要 以 序列 的 索引 来 迭代 您可以 将 range  和 len  组合 如 下 a  mary  had  a  little  lamb  for  i  in  rangelena 
0 mary 1 had 2 a 3 little 4 lamb  然而 在大多数 这 类 情况下 使用 enumerate  函数 比较 方便 请参见 循环 的 技巧
 如果你 只 打印 range  会出现 奇 怪 的结果 printrange 10 range 010 range  所返回的 对象 在 许多 方面 表 现 得 像 一个列表 但 实际上 却 并不是
 此 对象 会 在 你 迭代 它 时 基于 所 希望 的 序列 返回 连续 的 项 但它 没有 真正 生成 列表 这样就 能 节 省 空间
 我们 称 这样 对象 为 iterable  也就是说 适合 作为 这样的 目标 对象 函数 和 结构 期望 从 中 获取 连续 的 项 直到 所提供的 项 全部 耗 尽
 我们 已经 看到 for  语句 就 是这样 一种 结构 而 接受 可迭代对象 的 函数 的 一个例子 是 sum  sumrange 401236 稍后 我们将 看到 更多 返回 可迭代对象 以及 将 可迭代对象 作为参数 的 函数
 最后 也 许你 会 很好 奇 如何从 一个 指定 范围内 获取 一个列表
 以下是 解决方案 listrange 40123 在 数据结构 章节 中 我们将 讨论 list  的 更多细节
break  和 continue  语句 以及 循环中 的 else  子句
break  语句 和 c  中 的 类似 用 于 跳 出 最近 的 for  或 while  循环
 循环 语句 可能 带有 else  子句 它会在 循环 耗 尽 了 可迭代对象 使用 for  或 循环 条件 变 为假值 使用 while  时 被执行 但不会 在 循环 被 break  语句 终止 时 被执行
 以 下 搜索 素 数 的 循环 就 是这样的 一个例子 for  n  in  range 210
2 is  a  prime  number 3 is  a  prime  number 4 equals 225 is  a  prime  number 6 equals 237 is  a  prime  number 8 equals 249 equals 33 是 的 这是 正确的 代码
 仔 细 看 else  子句 属于 for  循环 不 属于 if  语句
 当 和 循环 一起使用 时 else  子句 与 try  语句中 的 else  子句 的 共同 点 多 于 if  语句中 的 同 类 子句 try  语句中 的 else  子句 会 在 未 发生异常 时 执行 而 循环中 的 else  子句 则会在 未 发生 break  时 执行
 有关 try  语句 和 异常 的 更多信息请参阅 处理 异常
continue  语句 也是 借 鉴 自 c  语言 表示 继续 循环中 的下一 次 迭代 for  num  in  range 210
pass  语句
pass  语句 什么 也不 做
 当 语法上 需要 一个 语句 但 程序 需要 什么 动作 也不 做 时 可以使用 它
 例如 while  true 
 这通常 用于创建 最小的 类 class  myemptyclass 
pass  的 另一个 可以使用 的 场合 是 在 你 编写 新 的 代码 时 作为一个 函数 或 条件 子句体 的 占位 符 允许你 保持 在 更 抽象 的层次 上 进行 思 考
 pass  会 被 静默地 忽略 def  initlogargs 
 定义 函数
 函数定义 的更多 形式
 给 函数定义 有 可变数 目 的 参数 也是 可 行 的
 这里有 三种 形式 可以 组合 使用
 参数 默认值
 关键字参数
 特殊 参数
 任意 的参数列表
 最后 最 不 常用的 选项 是 可以使用 任意 数量的 参数调用 函数
 这些参数 会 被 包含在 一个元组 里 参见 元组 和 序列
 在 可变 数量的 参数 之前 可能 会出现 零 个或多个 普通 参数
 def  writemultipleitemsfile  separator  args  file
joinargs  一般 来说 这些 可变 参数 将 在 形式 参数列表 的末尾 因为它们 收集 传递给 函数 的 所有 剩余 输入 参数
 出现在 args  参数 之后的 任何 形式 参数都 是‘ 仅 关键字参数’ 也就是说 它们 只能 作为 关键字参数 而 不 能 是 位置参数
 def  concatargs  sep 
 解包 参数列表
 当 参数 已经 在 列表或 元组中 但 要 为 需要 单独 位置参数 的 函数调用 解包 时 会发生 相反 的 情况
 例如 内置的 range  函数 需要 单独的 start  和 stop  参数
 如果它们 不 能 单独 使用 可以使用 操作符 来 编写 函数调用 以便 从 列表或 元组中 解包 参数 listrange 36 normal  call  with  separate  arguments 345 args 36 listrangeargs  call  with  arguments  unpacked  from  a  list 345 同样 的方式 字典 可 使用 操作符 来提供 关键字参数 def  parrotvoltage  statea  stiff  actionvoom 
lambda  表达式
 可以用 lambda  关键字 来 创建一个 小 的 匿名 函数
 这个函数 返回 两个参数 的 和 lambda  a  b  ab 
lambda  函数可以 在 需要 函数对象 的 任何 地方 使用
 它们在 语法上 限于 单个 表达式
 从 语义 上 来说 它们 只是 正常 函数定义 的语法 糖
 与 嵌套 函数定义 一样 lambda  函数可以 引用 所 包含 域 的 变量 def  makeincrementorn 
 f  makeincrementor 42 f 042 f 143 上面的例子 使用 一个 lambda  表达式 来 返回 一个 函数
 另一个 用 法 是 传递 一个小 函数 作为参数 pairs 1 one 2 two 3 three 4 four  pairs
 文档字符串
 以下是 有关 文档字符串 的内容 和 格式 的一些 约定
 第一行 应该是 对象 目 的 的 简 要 概述
 为 简 洁 起 见 它 不应 显式 声明 对象 的 名称 或 类型 因为 这些 可通过 其他方 式 获得 除非 名称 恰好 是 描述 函数 操作 的 动 词
 这 一 行 应 以 大写字母 开头 以 句 点 结尾
 如果 文档字符串 中 有 更多 行 则 第二 行 应 为 空白 从而 在 视 觉 上 将 摘要 与 其余 描述 分开
 后面 几 行 应该是 一个或多个 段落 描述 对象 的 调用 约定 它 的 副作 用 等
python  解析器 不 会 从 python  中删除 多 行 字符串文字 的缩进 因此 处理 文档 的工具 必须在 需要 时 删除 缩进
 这是 使用以下 约定 完成 的
 文档字符串 第一行 之后 的第一个 非空 行 确定 整个 文档字符串 的缩进 量
 我们 不 能 使用 第一行 因为它 通常 与 字符串 的开头 引号 相 邻 因此它 的缩进 在 字符串文字 中 不 明显
 然后 从字符串 的 所有 行 的开头 剥 离 与 该 缩进 等效 的空格
 缩进 更 少 的 行 不应该 出现 但是如果 它们 出现 则 应该 剥 离 它们的 所有 前导 空格
 应 在 转化 制表符 为 空格 后 测试 空格 的 等效 性 通常 转化为8 个空格
 下面是一个 多 行 文档字符串 的 例子 def  myfunction 
 函数 标注
 函数 标注 是 关于 用户自定义 函数 中使用的 类型 的 完全 可选 元数据 信息 有关 详情 请参阅 pep 3107 和 pep 484
 函数 标注 以 字典 的形式 存放 在 函数 的 annotations  属性 中 并且不 会影响 函数 的 任何其他 部分
 形参 标注的 定义 方式是 在 形参 名称 后 加上 冒号 后面 跟 一个 表达式 该 表达式 会被求值 为 标注的 值
 返回值 标注的 定义 方式是 加上 一个 组合 符号 后面 跟 一个 表达式 该 标注 位于 形参 列表 和 表示 def  语句 结束 的 冒号 之间
 下面的 示例 有 一个 位置参数 一个 关键字参数 以及 返回值 带有 相应 标注 def  fham  str  eggs  str  eggs  str 
 小 插 曲 编码 风格
 现 在 你 将 要 写 更 长 更复杂的 python  代码 是 时候 讨论 一 下 代码 风格 了
 大多数 语言 都 能 以 不同的 风格 被 编写 或 更 准确 地说 被 格式化 有 些 比 其他的 更 具有 可读性
 能 让 其他 人 轻松 阅读 你的代码 总是 一个 好 主 意 采用 一种 好 的 编码 风格 对 此 有 很大 帮助
 对 于 pythonpep 8 已经 成为 大多数 项目 所 遵循 的 风格 指南 它 促 进 了一种 非常 易 读 且 令人 赏 心 悦 目 的 编码 风格
 每个 python  开发人员 都 应该 在 某个 时候 阅读 它 以下是 为 你 提取 的 最 重要的 几个 要 点 使用4 个空格 缩进 不 要使用 制表符
4 个空格 是一个 在 小 缩进 允许 更大 的 嵌套 深度 和 大 缩进 更容易 阅读 的 一种 很好 的 折 中 方案
 制表符 会 引入 混 乱 最好 不 要使用 它
 换行 使 一 行 不 超过79 个 字符
 这 有 助 于 使用 小 型 显示 器 的 用户 并且 可以在 较大 的 显示 器 上 并 排 放置 多个 代 码 文件
 使用 空行 分隔 函数和类 以及 函数 内 的 较大 的代码块
 如果可能 把 注释 放 到 单独的 一 行
 使用 文档字符串
 在 运算符 前 后 和 逗号 后 使用 空格 但不 能 直接 在 括号 内 使用 a  f 12 g 34
 以 一致的 规则 为 你 的 类和函数 命名 按照 惯 例 应 使用 uppercamelcase  来 命 名 类 而 以 lowercasewithunderscores  来 命名 函数 和 方法
 始终 应 使 用 self  来 命名 第一个 方法 参数 有关 类 和 方法 的 更多信息请参阅 初 探 类
 如果你 的 代码 旨在 用 于 国际 环境 请 不 要使用 花 哨 的 编码
python  默认 的 utf 8 或者 纯 ascii  在任何 情况下 都 能 有 最好 的 表 现
 同样 哪 怕 只有 很小 的 可能 遇到 说 不同 语言 的 人 阅读 或 维护 代码 也不 要 在 标识符 中 使用 非 ascii  字符
 脚注1 实际上 通过 对象 引用 调用 会 是一个 更好的 表 述 因为 如果 传递 的 是 可 变 对象 则 调用者 将 看到 被调用 者 对 其 做 出 的 任何 更改 插入 到 列表 中的元 素
 使用 python  解释器
 调用 解释器
 传入 参数
 如果可能 的话 解释器 会 读取 命令行参数 转化为 字符串列表 存 入 sys  模块中的 argv  变量 中
 执行 命令 import  sys  你可以 导入 这个模块 并 访问 这 个列表
 这 个列表 最 少 也会 有 一个元素 如果没有给 定 输入 参数 sys
argv 0 就是 个 空字符串
 如果给定 的 脚本 名 是 表示 标准输入 sys
argv 0 就是
 使用 c  command  时 sys
argv 0 就会 是 c
 如果 使用 选项 m  modulesys
argv 0 就 是包含 目录 的 模块 全 名
 在 ccommand  或 m  module  之后的 选项 不会被 解释器 处理 而 会直接 留 在 sys
argv  中 给 命令 或 模块 来处理
 交互模式
 在 终端 tty  输入 并 执行 指令 时 我们 说 解释器 是 运行 在 交互模式 interactive  mode
 在 这种 模式 中 它 会显示 主 提示符 primary  prompt  提示 输入 下 一条 指令 通常用 三个 大于 号 表示 连续 输入 行 的时候 它 会显示 次 要 提示符 默认 是 三个 点

 进入 解释器 时它会 先 显示 欢 迎 信息、 版本 信息、 版权 声明 然后 就 会出现 提示符 python 3
 多 行 指令 需要 在 连续 的 多 行 中 输入
 比如 以 if  为 例 theworldisflat  true  if  theworldisflat 
 be  careful  not  to  fall  off  有关 交互模式 的更多 内容 请 参考 交互模式
 解释器 的 运行 环境
 源文件 的 字符 编码
 默认情况下 python  源码 文件 以 utf 8 编码 方式 处理
 在 这种 编码 方式 中 世界 上 大多数 语言 的 字符 都可以 同时 用 于 字符串字面值、 变量 或 函数 名称 以及 注释 中—— 尽管 标准库中 只 用 常规 的 ascii  字符 作为 变量 或 函数 名 而且 任何 可移植 的 代码 都 应该 遵 守 此 约定
 要 正确 显示 这些字符 你 的 编辑器 必须 能 识别 utf 8 编码 而且 必须使用 能 支持 打开的文件 中所有 字符的字 体
 如果不 使用默认 编码 要 声明 文件 所使用的 编码 文件 的 第一 行 要 写成 特殊 的 注释
 语法 如下所示 coding  encoding  其 中 encoding  可以是 python  支持 的 任意 一种 codecs
 比如 要 声明 使用 windows 1252 编码 你 的 源码 文件 要 写成 coding  cp 1252 关于 第一行 规则 的一种 例外 情况 是 源码 以 unix  shebang  行 开头
 这种情况下 编码 声明 就 要 写 在 文件 的 第二 行
 例如 usrbinenv  python 3 coding  cp 1252 脚注1 在 unix  系统中 python 3
x  解释器 默认 安装 后 的 执行 文件 并 不 叫 作 python  这样 才 不 会 与 同时 安装 的 python 2
x  冲突
 浮点 算术 争 议 和 限制
 表示 性 错误
 本 小节 将 详细 解释0
1 的 例子 并 说明 你可以 怎样 亲 自 对 此 类 情况 进行 精确 分析
 假定 前 提 是 已 基本 熟悉 二进制浮点 表示法
 表示 性 错误 是 指 某些 其 实 是 大多数 十进制 小 数 无法 以 二进制 以2 为基数 的计数 制 精确 表示 这 一 事实 造成 的 错误
 这 就是 为什么 python  或者 perl 、 c 、 c 、 java 、 fortran  以及 许多 其他语言 经常 不 会显示 你所 期 待 的 精确 十进制数 值 的 主要 原因
 为什么 会 这样？110 是 无法 用 二进制 小 数 精确 表示 的
 目前2000 年11 月 几乎所有 使用 ieee 754 浮点 运算 标准 的 机器 以及 几乎所有 系统 平台 都会 将 python  浮点数 映射 为 ieee 754 双精度 类型
754 双精度 类型 包含53 位 精度 因此在 输入 时 计算 会 尽 量 将0
1 转换为 以 j 2 n  形式 所 能 表示 的 最接近 分 数 其 中 j  为 恰好 包含53 个 二进制 位 的 整数
 重新 将110 j 2 n  写 为 j 2 n 10 并且 由 于 j  恰好 有53 位 即252 但253 n  的最佳 值 为5625225610253 true  也就是说56 是 唯一的 n  值 能 令 j  恰好 有53 位
 这样 j  的最佳 可能 值 就是 经过 舍入 的 商 q  r  divmod 25610 r 6 由 于 余数 超过10 的 一 半 最佳 近似值 可通过 四 舍 五 入 获得 q 17205759403792794 这样 在754 双精度 下110 的最佳 近似值 为7205759403792794256 分 子 和 分 母 都 除 以 二 则 结果 小 数 为3602879701896397255 请注意 由 于 我们 做 了 向 上 舍入 这 个 结果 实际上 略 大于110 如果我们 没有 向 上 舍入 则 商 将 会 略 小于110
 但 无论 如何 它 都 不 会 是 精确的110 因此 计算 永远不 会 看到110 它 实际 看到 的 就是 上面 所 给出的 小 数 它 所 能 达到 的最佳754 双精度 近似值0
0 如果我们 将 该 小 数 乘 以1055 我们可以 看到 该值 输出 为55 位 的 十进制数360287970189639710552551000000000000000055511151231257827021181583404541015625 这意味着 存储在 计算机 中 的 确 切 数值 等于 十进制数 值0
 许多 语言 包括 较 旧版本 的 python  都 不 会显示 这 个 完整的 十进制数 值 而 是 将结果 舍入 为17 位 有效 数字 format 0
10000000000000001 fractions  和 decimal  模块 可 令 进行 此 类 计算 更 加 容易 from  decimal  import  decimal  from  fractions  import  fraction  fraction
 错误 和 异常
 到 目前 为止 我们 还 没有提 到 错误消息 但是 如果你 已经 尝试 过 那些 例子 你可能 已经 看 过 了一些 错误消息
 目前 至少 有两种 可 区分 的 错误 语法错误 和 异常
 语法错误
 语法错误 又 称 解析 错误 可能是 你 在 学习 python  时 最 容易 遇到 的 错误 while  true  printhello  world  file  stdin  line 1 while  true  printhello  world  syntaxerror  invalid  syntax  解析器 会 输出 出现 语法错误 的 那 一 行 并 显示 一个 箭 头 指向 这 行 里面 检测到 的第一个 错误
 错误 是 由 箭 头 指示 的 位置 上面 的 token  引 起 的 或者 至少 是 在这里 被 检测 出 的 在 示例中 在 print  这个函数 中 检测到 了 错误 因为在 它 前面 少 了 个 冒号
 文件名 和 行 号 也会 被 输出 以便 输入 来自 脚本 文件 时 你 能 知道 去 哪 检查
 异常
 即使 语句 或 表达式 在 语法上 是 正确的 但 在 尝试 执行时 它 仍 可能会 引发错误
 在 执行时 检测到 的 错误 被称为 异常 异常 不一定 会导致 严重 后 果你 将 很 快 学 会 如何在 python  程序中 处理 它们
 但是 大多数 异常 并 不会被 程序 处理 此 时 会显示 如下所示 的 错误信息1010 traceback  most  recent  call  last  file  stdin  line 1 in  module  zerodivisionerror  division  by  zero 4 spam 3 traceback  most  recent  call  last  file  stdin  line 1 in  module  nameerror  name  spam  is  not  defined 22 traceback  most  recent  call  last  file  stdin  line 1 in  module  typeerror  cant  convert  int  object  to  str  implicitly  错误信息 的最后一 行 告诉 我们 程序 遇到 了 什么 类型 的 错误
 异常 有不同 的 类型 而 其 类型 名称 将 会 作为 错误信息 的一部分 中 打印出 来 上述 示例中 的 异常 类型 依 次 是 zerodivisionerror  nameerror  和 typeerror
 作为 异常 类型 打印 的 字符串 是 发生 的 内置异常 的 名称
 对 于所有 内置异常 都 是 如 此 但 对 于 用户定义的 异常则 不一定 如 此 虽然 这是一个 有用的 规范
 标准 的 异常 类型 是 内置的 标识符 而不是 保留 关键字
 这 一行的 剩 下 的部分 根据 异常 类型 及其 原因 提供 详细信息
 错误消息 的开头 部分 以 堆 栈回溯 的形式 显示 发生异常 的 上下文
 通常 它 会 包含 列出 源代码 行 的 堆 栈回溯 但是 它 将不会 显示 从 标准输入 读取 的 行
 内置异常 列出了 内置异常 和 它们 的含义
 处理 异常
 抛出 异常
raise  语句 允许 程序员 强制 发生 指定 的 异常
 例如 raise  nameerrorhithere  traceback  most  recent  call  last  file  stdin  line 1 in  module  nameerror  hithereraise  唯一的 参数 就是 要 抛出 的 异常
 这 个 参数必须是 一个异常 实例 或者是一个 异常类 派生 自 exception  的 类
 如果 传递 的 是 一个异常 类 它 将 通过调用 没有 参数 的 构造函数 来 隐式 实例化 raise  valueerror  shorthand  for  raise  valueerror  如果你需要 确定 是否 引发了 异常 但不 打 算 处理 它 则 可以使用 更简单 的 raise  语句 形式 重新引发 异常 try 
 异常 链
 raise  runtimeerror  from  exc  这 在 你 要 转换 异常 时 很有用
 例如 def  func 
traceback  most  recent  call  last  file  stdin  line 4 in  moduleruntimeerrorfor  more  information  about  chaining  mechanics  see  内置异常
 用户自定义 异常
 程序 可以通过 创建新的 异常类 来 命名 它们 自己的 异常 有关 python  类 的 更多信息请参阅 类
 异常 通常 应该 直接 或 间接 地 从 exception  类 派生
 可以定义 异常类 它可以 执行 任何其他 类可以 执行 的 任何 操作 但 通常 保持 简单 只 提供 一些 属性 这些 属性 允许 处理程序 为 异常 提取 有关 错误 的 信息
 在 创建 可能 引发 多个 不同 错误 的 模块 时 通常 的做法是 为 该 模块定义 的 异常 创建 基类 并 为 不同 错误 条件 创建 特定 异常类 的子类 class  errorexception  base  class  for  exceptions  in  this  module
message  message  大多数 异常都 定义为 名称 以 error  结尾 类似于 标准 异常 的 命名
 许多 标准 模块定义了 它们 自己的 异常 以 报告 它们 定义 的 函数 中 可能 出现的 错误
 有关 类 的更多信息请参 见 类 章节
 定义 清理 操作
try  语句 有 另一个 可选 子句 用 于 定义 必须 在所有 情况下 执行 的 清理 操作
 例如 try 
 goodbye  world  traceback  most  recent  call  last  file  stdin  line 2 in  module  keyboardinterrupt  如果存在 finally  子句 则 finally  子句 将作为 try  语句 结束 前 的最后一 项 任务 被执行
 finally  子句 不 论 try  语句 是否 产生 了 异常都 会被执行
 以 下 几 点 讨论 了 当 异常 发生时 一些 更复杂的 情况 如果在 执行 try  子句 期间发生 了 异常 该异常 可 由 一个 except  子句 进 行 处理
 如果 异常 没有 被 某个 except  子句 所 处理 则 该异常 会 在 finally  子句 执行 之后 被 重新引发
 异常 也可能 在 except  或 else  子句 执行 期间发生
 同样 地 该异常 会 在 finally  子句 执行 之后 被 重新引发
 如果在 执行 try  语句 时 遇到 一个 break  continue  或 return  语句 则 finally  子句 将 在 执行 break  continue  或 return  语句 之前 被执行
 如果 finally  子句中 包含一个 return  语句 则返回 值 将 来自 finally  子句 的某个 return  语句 的返回值 而非 来自 try  子句 的 return  语句 的返回值
 例如 def  boolreturn 
 boolreturn  false  一个 更 为 复杂的 例子 def  dividex  y 
0 executing  finally  clause  divide 20 division  by  zero  executing  finally  clause  divide 21 executing  finally  clause  traceback  most  recent  call  last  file  stdin  line 1 in  module  file  stdin  line 3 in  divide  typeerror  unsupported  operand  types  for  str  and  str  正 如 你所 看到 的 finally  子句 在任何 情况下 都 会被执行
 两个 字符串 相 除 所引发的 typeerror  不 会 由 except  子句 处理 因此 会 在 finally  子句 执行 后 被 重新引发
 在 实际 应用程序中 finally  子句 对 于 释放 外部 资源 例如 文件 或者 网络 连接 非常有用 无论 是否 成功 使用 资源
 预定义 的 清理 操作
 某些 对象 定义了 在 不再 需要 该对象 时 要执行 的 标准 清理 操作 无论 使用 该对象 的 操作 是 成功 还是 失败 清理 操作 都 会被执行
 请查看 下面的 示例 它 尝试 打开一个 文件 并 把 其内容 打印到 屏幕 上
 for  line  in  openmyfile
txt  printline  end  这 个 代码 的 问题 在于它 在 这 部分 代码 执行 完 后 会 使 文件 在 一段 不 确定 的 时间 内 处于 打开 状态
 这 在 简单 脚本 中 不 是 问题 但 对 于 较大 的 应用程序 来说 可能是 个 问题
 with  语句 允许 像 文件 这样的 对象 能够 以 一种 确保 它们 得到 及 时 和 正确的 清理 的方式 使用
 with  openmyfile
txt  as  f  for  line  in  f  printline  end  执行 完 语句 后 即使 在 处理 行 时 遇到 问题 文件 f  也 始终 会 被关闭
 和 文件 一样 提供 预定义 清理 操作 的 对象 将 在 其 文档中 指 出 这一点
 标准库 简 介—— 第二 部分
 第二 部分 涵盖 了 专 业 编程 所 需要 的 更高级 的 模块
 这些模块 很 少 用 在 小 脚本 中
 格式化 输出
reprlib  模块提供了一个 定制 化 版本 的 repr  函数用于 缩 略 显示 大 型 或 深 层 嵌套的 容器对象 import  reprlib  reprlib
pprint  模块提供了 更 加 复杂的 打印 控制 其 输出 的内置 对象 和 用户自定义 对象 能够 被 解释器 直接 读取
 当 输出 结果 过 长 而 需要 折 行 时 美化 输出 机制 会 添加 换行符 和 缩进 以 更 清楚 地 展示 数据结构 import  pprint  t  black  cyan  white  green  red  magenta 
pprintt  width 30 black  cyan  white  green  red  magenta  yellow  bluetextwrap  模块 能够 格式化 文本 段落 以 适 应 给定的 屏幕 宽度 import  textwrap  doc  the  wrap  method  is  just  like  fill  except  that  it  returns 
locale  模块 处理 与 特定 地 域 文 化 相关的 数据格式
locale  模块 的 format  函数 包含一个 grouping  属性 可 直接 将 数字 格式化 为 带有 组 分隔符 的 样式 import  locale  locale
 模板
 使用 二进制数据 记录 格式
struct  模块提供了 pack  和 unpack  函数 用于处理 不 定 长度 的 二进制 记录 格式
 下面的例子 展示了 在 不 使用 zipfile  模块 的情况下 如何 循环 遍历 一个 zip  文件 的 所有 头 信息
pack  代码 h  和 i  分别 代表 两 字节 和 四 字节 无符号 整数
 代表 它们是 标准 尺寸 的 小 端 字节序 import  struct  with  openmyfile
 多线程
 线程 是一种 对 于 非 顺序 依赖 的多个 任务 进行 解 耦 的 技术
 多线程 可以 提高 应用 的 响应 效率 当 接收 用户 输入 的 同时 保持 其他 任务 在 后 台 运行
 一个 有关 的应用 场景 是 将 io  和 计算 运行 在 两个 并 行 的 线程中
 以下代码 展示了 高阶 的 threading  模块 如何在 后 台 运行 任务 且不 影响 主 程序 的 继续 运行 import  threading  zipfile  class  asynczipthreading
 多线程 应用 面 临 的 主要 挑 战 是 相互 协 调 的多个 线程 之间 需要 共享 数据 或其他 资源
 为 此 threading  模块提供了 多个 同步 操作 原语 包括 线程 锁、 事件、 条件 变量 和 信号 量
 尽管 这 些工具 非常 强大 但 微 小 的 设计 错误 却 可以 导致 一些 难以 复 现 的 问题
 因此 实现 多 任务 协 作 的 首选 方法 是 将所有 对 资源 的 请求 集 中 到 一个 线程中 然后 使用 queue  模块 向 该 线程 供 应 来自 其他线程 的 请求
 应用程序 使用 queue  对象进行 线程 间 通信 和协 调 更易 于 设计 更易 读 更 可靠
 日志
logging  模块提供 功能 齐 全 且 灵活的 日志记录 系统
 在 最简单 的情况下 日志消息 被 发送到 文件 或 sys
stderr  import  logging  logging
criticalcritical  error  shutting  down  这 会产生 以 下 输出 warningrootwarningconfig  file  server
conf  not  found  errorrooterror  occurred  criticalrootcritical  error  shutting  down  默认情况下 informational  和 debugging  消息 被 压 制 输出 会 发送到 标准错误 流
 其他 输出 选项 包括 将 消息 转 发 到 电子邮件 数据 报 套接字 或 http  服务器
 新 的过滤器 可以 根据 消息 优先级 选择 不同的 路 由 方式 debuginfowarningerror  和 critical
 日志 系统 可以直接 从 python  配置 也可以 从 用户 配置文件 加载 以便 自定义 日志记录 而无需 更改 应用程序
 弱引用
python  会自动 进行 内存管理 对 大多数 对象进行 引用计数 并 使用 garbagecollection  来 清除 循环 引用
 当 某个 对象 的最后一个 引用 被移除 后 不 久 就会 释放 其 所 占 用 的内存
 此 方式 对 大多数 应用 来说 都 适用 但 偶 尔 也 必须在 对象 持续 被 其他对象 所 使用 时 跟踪 它们
 不幸的是 跟踪 它们将 创建一个 会 令 其 永 久化 的 引用
 weakref  模块提供 的工具 可以 不必 创建 引用 就能 跟踪 对象
 当 对象 不再 需要 时 它 将自动 从 一个 弱引用 表 中被移除 并 为 弱引用对象 触发 一个 回调
 典型 应用 包括 对 创建 开销 较大 的 对象进行 缓存 import  weakref  gc  class  a 
 用 于 操作 列表 的工具
 许多 对 于 数据结构 的需求 可以通过 内置 列表 类型 来 满足
 但是 有 时 也会 需要 具有 不同 效 费 比 的替代 实现
array  模块 提供了一种 array  对象 它 类似于 列表 但 只能 存储 类型 一致的 数据 且 存储 密集 更高
 下面的 例子演示了 一个 以 两个 字节 为 存储 单元 的 无符号 二进制 数值 的 数组 类型 码 为 h  而 对 于 普通 列表 来说 每个 条目 存储为 标准 python  的 int  对象 通常 要 占 用16 个字节 from  array  import  array  a  arrayh 40001070022222 suma 26932 a 13 arrayh 10700 collections  模块 提供了一种 deque  对象 它 类似于 列表 但 从左 端 添加 和 弹出 的速度 较 快 而 在 中 间 查找 的速度 较 慢
 此 种 对象 适用于 实现 队列 和 广 度 优先 树 搜索 from  collections  import  deque  d  dequetask 1 task 2 task 3 d
appendm  在 替代 的 列表 实现 以外 标准库 也 提供了 其他 工具 例如 bisect  模块 具有 用 于 操作 有 序列表 的 函数 import  bisect  scores 100 perl 200 tcl 400 lua 500 python  bisect
insortscores 300 ruby  scores 100 perl 200 tcl 300 ruby 400 lua 500 pythonheapq  模块提供了 基于 常规 列表 来实现 堆 的 函数
 最小 值 的 条目 总是 保持 在 位置 零
 这 对 于 需要 重复 访问 最小 元素 而 不希望 运行 完整 列表 排序 的应用 来说 非常有用 from  heapq  import  heapify  heappop  heappush  data 1357924680 heapifydata  rearrange  the  list  into  heap  order  heappushdata 5 add  a  new  entry  heappopdata  for  i  in  range 3 fetch  the  three  smallest  entries 501
 十进制浮点 运算
decimal  模块 提供了一种 decimal  数据类型 用 于 十进制浮点 运算
 相比 内置的 float  二进制浮点 实现 该 类 特别 适用于 财 务 应用 和其他 需要 精确 十进制 表示 的 用 途 控制 精度 控制 四 舍 五 入 以 满足 法 律 或 监 管 要求 跟踪 有效 小 数 位 或 用户 期望 结果 与 手 工 完成 的 计算 相匹配 的 应用程序
 例如使用 十进制浮点 和 二进制 浮点数 计算70 美 分 手 机 和5％ 税 的 总 费 用 会产生 的不同 结果
 如果 结果 四 舍 五 入到最接近 的 分 数 差异 会 更大 from  decimal  import  rounddecimal 0
73 decimal  表示 的结果 会保留 尾 部 的 零 并 根据 具有 两个 有效位 的 被 乘 数 自动 推 出 四个 有效位
 decimal  可以 模拟 手 工 运算 来避免 当 二进制 浮点数 无法 精确 表示 十进制数 时 会导致 的 问题
 精确 表示 特性 使得 decimal  类 能够 执行 对 于 二进制 浮点数 来说 不适用 的 模 运算 和 相等 性 检测 decimal 1
0 falsedecimal  模块提供了 运算 所 需要 的 足够 精度 getcontext
 虚拟环境 和 包
 概述
python  应用程序 通常会 使用 不 在 标准库 内 的 软件包 和 模块
 应用程序 有 时 需要 特定 版本 的 库 因为 应用程序 可能需要 修复 特定的 错误 或者 可以使用 库 的 过 时 版本 的 接口 编写 应用程序
 这意味着 一个 python  安装 可能无法 满足 每个 应用程序 的 要求
 如果 应用程序 a  需要 特定 模块 的1
0 版本 但 应用程序 b  需要2
0 版本 则 需求 存 在 冲突 安装 版本1
0 或2
0 将导致 某 一个 应用程序 无法 运行
 这个问题 的 解决方案是 创建一个 virtual  environment  一个 目录 树 其 中 安装 有 特定 python  版本 以及 许多 其他 包
 然后 不同的 应用 将 可以使用 不同的 虚拟环境
 要 解决 先前 需求 相 冲突 的 例子 应用程序 a  可以 拥 有自己的 安装了1
0 版本 的 虚拟环境 而 应用程序 b  则 拥有 安装了2
0 版本 的 另一个 虚拟环境
 如果 应用程序 b  要求 将 某个 库 升级 到3
0 版本 也不 会影响 应用程序 a  的 环境
 创建虚拟环境
 用于创建 和 管理 虚拟环境 的 模块 称为 venv
venv  通常会 安装 你 可用的 最新版本的 python
 如果您 的 系统上 有 多个 版本 的 python  您 可以通过 运行 python 3 或 您 想要 的 任何 版本 来 选择 特定的 python  版本
 要 创建虚拟环境 请 确定 要 放置 它 的 目录 并 将 venv  模块 作为脚本 运行 目录 路径 python 3 m  venv  tutorialenv  如果 tutorialenv  目录 不存在 它 将 为 你 创建一个 并 在 其 中 创建 包含 python  解释器 标准库 和 各种 支持 文件 的副本 的 目录
 虚拟环境 的 常 用 目录 位置 是
 这 个 名称 通常会 令 该 目录 在你的 终端 中 保持 隐藏 从而 避免 需要 对 所 在 目录 进行 额外 解释 的 一般 名称
 它还 能 防止 与 某些 工具 所支持的
env  环境变量 定义 文件 发生 冲突
 创建虚拟环境 后 您可以 激活 它
 在 windows  上 运行 tutorialenvscriptsactivate
bat  在 unix  或 macos  上 运行 source  tutorialenvbinactivate  这 个 脚本 是 为 bash  shell  编写 的
 如果你使用 csh  或 fish  shell  你应该 改 用 activate
csh  或 activate
fish  脚本
 激活 虚拟环境 将 改变 你所 用 终端 的 提示符 以 显示 你 正 在 使用 的 虚拟环境 并 修改 环境 以 使 python  命令 所 运行 的 将 是 已安装 的特定 python  版本
 例如 source  envstutorialenvbinactivate  tutorialenv  python  python 3
 使用 pip  管理 包
 你可以使用 一个名为 pip  的 程序来 安装、 升级 和 移除 软件包
 默认情况下 pip  将 从 python  package  index  httpspypi
org  安装 软件包
 你可以在 浏览器 中 访问 python  package  index  或 是 使用 pip  受限 的 搜索 功能 tutorialenv  pip  search  astronomy  skyfield  elegant  astronomy  for  python  gary  galactic  astronomy  and  gravitational  dynamics
pip  有许多 子 命令 search 、 install 、 uninstall 、 freeze  等等
 请参阅 安装 python  模块 指南 以 了解 pip  的完整 文档
 您 可以通过 指定 包 的 名称 来 安装 最新版本的 包 tutorialenv  python  m  pip  install  novas  collecting  novas  downloading  novas 3
3 您 还可以 通过 提供 包 名称 后 跟 和 版本号 来 安装 特定 版本 的 包 tutorialenv  python  m  pip  install  requests 2
0 如果你 重新 运行 这 个 命令 pip  会 注意 到 已经 安装了 所 请求的 版本 并且 什么 都 不 做
 您 可以提供 不同的 版本号 来获取 该 版本 或者 您可以 运行 pip  installupgrade  将 软件包 升级 到 最新版本 tutorialenv  python  m  pip  install  upgrade  requests  collecting  requests  installing  collected  packages  requests  found  existing  installation  requests 2
0 pip  uninstall  后 跟 一个或多个 包 名称 将 从 虚拟环境 中删除 包
pip  show  将显示 有关 特定 包 的 信息 tutorialenv  pip  show  requests  metadataversion 2
4 sitepackages  requirespip  list  将显示 虚拟环境 中 安装 的 所有 软件包 tutorialenv  pip  list  novas 3
0 pip  freeze  将 生成一个 类似 的 已安装 包 列表 但 输出 使用 pip  install  期望的 格式
 一个 常见的 约定 是 将 此 列表 放在 requirements
txt  文件 中 tutorialenv  pip  freeze  requirements
0 然后 可以将 requirements
txt  提交 给 版本 控制 并 作为 应用程序 的一部分 提供
 然后 用户 可以使用 install  r  安装 所有 必需 的 包 tutorialenv  python  m  pip  install  r  requirements
0 pip  有 更多 选择
 有关 pip  的完整 文档 请参阅 安装 python  模块 指南
 当 您 编写 一个 包 并 希望 在 python  包 索引 中 使 它 可 用 时 请 参考 分发 python  模块 指南
 附 录
 交互模式
 错误处理
 当 发生错误 时 解释器 会打印 错误信息 和 错误 堆栈
 在 交互模式 下 将 返回 到 主 命令 提示符 如果 输入 内容 来自 文件 在 打印 错误 堆栈 之后 程序 会 以 非零 状态 退出
 这里 所 说 的 错误 不包括 try  语句中 由 except  所 捕获 的 异常
 有 些 错误 是 无 条件 致 命 的 会导致 程序 以 非零 状态 退出 比如 内部 逻辑 矛 盾 或 内存 耗 尽
 所有 错误信息 都会被 写入 标准错误 流 而 命令 的 正常 输出 则 被写入 标准输出 流
 将 中断 字符 通常 为 controlc  或 delete  键 入 主要 或 辅助 提示 会 取消 输入 并返回 主 提示符
1 在 执行 命令 时 键 入 中断 引发 的 keyboardinterrupt  异常 可以 由 try  语句 处理
 可执行 的 python  脚本
 在 bsd  等 类 unix  系统上 python  脚本 可以直接 执行 就像 shell  脚本 一样 第一行 添加 usrbinenv  python 3
5 假设 解释器 位于 用户 的 path  脚本 的开头 并 将 文件 设置为 可执行
 必须是 文件 的 前 两个 字符
 在某些 平台上 第一行 必须 以 unix  样式 的 行 结尾 n  结束 而不是 以 windowsrn  行 结尾
 请注意 散 列 或 磅 字符 在 python  中 代表 注释 开始
 可以使用 chmod  命令 为 脚本 提供 可执行 模式 或 权限
py  在 windows  系统上 没有可 执行 模式 的概念
 python  安装程序 自动将
py  文件 与 python
exe  相关联 这样 双 击 python  文件 就 会将其 作为脚本 运行
 扩展 也可以是
pyw  在这种情况下 会 隐藏 通常 出现的 控制台 窗口
 交互式 启动 文件
 当 您 以 交互 方式 使用 python  时 每次 启动 解释器 时 都会 执行 一些 标准 命令 这通常 很 方便
 您 可以通过将 名为 pythonstartup  的 环境变量 设置为 包含 启动 命令 的文件名 来实现
 这 类似于 unix  shell  的
profile  功能
 此 文件 只会 在交互式 会话 时 读取 而非 在 python  从 脚本 读取 指令 或 是 在给定 devtty  为 指令 的 明确 来源 时 后者 反 而 表 现 得 像 是一个 交互式 会话
 该文件 执行时 所在的 命名空间 与 交互式 指令 相同 所 以 它 定义 或 导入 的 对象可以 在交互式 会话 中 直接使用
 你也可以 在 该文件 中 更改 提示符 sys
ps 1 和 sys
ps 2
 如果你想 从 当前目录 中读取 一个 额外的 启动 文件 你可以使用 像 ifos
py  execopen
read  这样的 代码 在 全局 启动 文件 中 对 它 进行 编程
 如果要 在 脚本 中 使用 启动 文件 则 必须在 脚本 中 显式 执行 此操作 import  os  filename  os
 定制 模块
python  提供 了两个 钩子 来 让你 自定义 它 sitecustomize  和 usercustomize
 要 查看 其 工作 原 理 首先 需要 找到 用户 sitepackages  目录 的 位置
 启动 python  并 运行 此 代码 import  site  site
5 sitepackages  现 在 您可以 在 该 目录中 创建 一个名为 usercustomize
py  的 文件 并 将 所需 内容 放入 其 中
 它 会影响 python  的 每次 启动 除非 它 以 s  选项 启动 以 禁用 自动 导入
sitecustomize  以 相同 的方式 工作 但 通常 由 计算机 管理 员 在 全局 sitepackages  目录中 创建 并 在 usercustomize  之前 被导入
 有关 详情 请参阅 site  模块的文档
 脚注1 gnu  readline  包 的 问题 可能会 阻 止 这种情况
python  教程
 接下来？
 阅读 本 教程 可能会 增强 您 对 使用 python  的 兴趣 您 应该 热 衷 于 应用 python  来 解决 您 的 实际 问题
 你应该 去 哪 里 了解更多？ 本 教程 是 python  文档 集 的一部分
 其他 文档 python  标准库 您 应该 浏览 本 手册 该 手册 提供了 有关 标准库中 的 类型 功能 和 模块 的完整 尽管 简 洁 参考 资 料
 标准 的 python  发行版 包含 很多 的附加 代码
 有 些模 块可以 读取 unix  邮 箱 通过 http  检索 文档 生成 随机数 解析 命令行选项 编 写 cgi  程序 压缩数据 以及 许多 其他 任务
 浏览 标准库 参考 可以 了解更多 可 用 的内容
 安装 python  模块 解释 了 怎 么 安装 由 其他 python  开发者 编写 的 模块
 python  语言 参考 python  的语法 和 语义 的 详细 解释
 尽管 阅读 完 非常 繁 重 但 作为 语言 本身 的完整 指南 是 有用的
 更多 python  资源 httpswww
org  主要 的 python  网 站
 它包含 代码 文档 以及 指向 web  上 与 python  相关的 页面 的 链接
 该 网 站 世界 很多 地 区 都有 镜 像 如 欧 洲 日 本 和 澳 大 利 亚 镜 像 可能 比 主 站 点 更快 具体 取决于 您 的 地 理 位置
org  快速 访问 python  的 文档
org  the  python  package  index  以 前 也 被 昵 称为 cheese  shop 1 是 可 下载 用户自 制 python  模块 的 索引
 当你 要 开始 发布 代码 时 你可以在 此处 进行 注册 以便 其他 人 能 找到 它
comrecipeslangspython  python  cookbook  是一个 相当 大 的 代码 示例 集 更多的 模块 和 有用的 脚本
 特别 值得 注意 的 贡献 收集 在 一 本 名为 python  cookbookoreilly ＆ associatesisbn 0596007973 的 书 中
 httpwww
org  从 会 议 和 用户 组 会 议 中 收集 与 python  相关的 视 频 的 链接
org  ecientific  python  项目 包括 用 于 快速 阵 列 计算 和 操作 的 模块 以及 用 于 诸 如 线 性 代 数 傅 里 叶 变 换 非 线 性 求 解 器 随机数 分布 统计 分析 等 的 一系列 包
 对 于 与 python  相关的 问题 和 问题 报告 您可以 发布 到 新闻组 comp
python  或者 将它们 发送到 邮件列表 pythonlistpython
 新闻组 和 邮件列表 是 互 通 的因此 发布 到 一个 地方 将自动 转 发 给 另一个
 每 天 有 数 百 个 帖 子 询 问 和 回 答 问题 建议 新 功能 以及 宣 布 新 模块
 邮件列表 档案 可 在 httpsmail
orgpipermail  上 找到
 在 发 问 之前 请 务 必 查看 以 下 列表 常见问题 或 简 写 为 faq
 常见问题 包含了 很多 一次 又 一次 问 到 的 问题 及 答 案 并且 可能 已经 包含了 您 的 问题 的解决方案
 备 注1 cheese  shop  是 monty  python  的 一个 短 剧 一 位 顾 客 来 到 一 家 奶 酪 商 店 但 无论 他 要 哪 种 奶 酪 店 员 都 说 没有 货
 标准库 简 介
 操作系统 接口
os  模块提供了 许多 与 操作系统 交互 的 函数 import  os  os
systemmkdir  today  run  the  command  mkdir  in  the  system  shell 0 一 定 要使用 import  os  而不是 from  os  import 
 这 将 避免 内建 的 open  函数 被 os
open  隐式 替换 掉 因为它们 的 使用 方式 大 不 相同
 内置的 dir  和 help  函数 可用作 交互式 辅助 工具 用于处理 大 型 模块 如 os  import  os  diros  returns  a  list  of  all  module  functions  helpos  returns  an  extensive  manual  page  created  from  the  modules  docstrings  对 于 日 常 文件和目录 管理 任务 shutil  模块提供了 更易 于 使用 的 更高 级别 的 接口 import  shutil  shutil
 文件 通 配 符
glob  模块提供了一个 在 目录中 使用 通 配 符 搜索 创建 文件 列表 的 函数 import  glob  glob
 命令行参数
 通 用 实 用 程序 脚本 通常 需要 处理 命令行参数
 这些参数 作为 列表 存储在 sys  模块 的 argv  属性 中
 例如以下 输出 来自 在命令行 运行 python  demo
pyone  two  three  import  sys  printsys
py  one  two  threeargparse  模块 提供了一种 更复杂的 机制 来处理 命令行参数
 以 下 脚本 可 提取 一个或多个 文件名 并 可 选择 要 显示 的 行 数 import  argparse  parser  argparse
parseargs  printargs  当 在 通过 python  top
txt  beta
txt  在命令行 运行时 该 脚本 会 将 args
lines  设 为5 并 将 args
filenames  设 为 alpha
 错误 输出 重定向 和 程序 终止
sys  模块还 具有 stdin  stdout  和 stderr  的 属性
 后者 对 于 发出 警告 和 错误消息 非常有用 即使 在 stdout  被 重定向 后 也可以 看到 它们 sys
writewarning  log  file  not  found  starting  a  new  onen  warning  log  file  not  found  starting  a  new  one  终止 脚本 的 最 直接 方法 是 使用 sys
exit 
 字符串 模式 匹配
re  模块 为 高级 字符串 处理 提供 正则表达式 工具
 对 于 复杂的 匹配 和 操作 正则表达式 提供 简 洁 优化 的解决方案 import  re  re
subrbaz 1 r 1 cat  in  the  the  hat  cat  in  the  hat  当 只需要 简单的 功能 时 首选 字符串方法 因为它们 更容易 阅读 和 调试 tea  for  too
 数学
 互联网 访问
 有许多 模块 可用于 访问 互联网 和 处理 互联网 协议
 其 中 两个 最简单的 urllib
request  用于从 url  检索 数据 以及 smtplib  用 于 发送 邮件 from  urllib
quit  请注意 第二个 示例 需要 在 localhost  上 运行 的 邮件 服务器

 日期和时间
datetime  模块提供了 以 简单 和 复杂 的方式 操作 日期和时间 的 类
 虽然 支持 日期和时间 算法 但 实现 的 重 点 是有效的 成员 提取 以 进行 输出 格式化 和 操作
 该模块 还 支持 可 感知 时区的 对象
 数据 压缩
 常见的 数据 存档 和 压缩 格式 由 模块 直接 支持 包括 zlib  gzip  bz 2 lzma  zipfile  和 tarfile
 import  zlib  s  bwitch  which  has  which  witches  wrist  watch  lens 41 t  zlib
 性能 测量
 一些 python  用户 对 了解 同一 问题 的不同 方法 的 相对 性能 产生 了 浓 厚 的 兴趣
python  提供了一种 可以 立即 回 答 这些 问题 的 测量 工具
 例如 元组 封 包 和 拆 包 功能 相比 传统的 交换 参数 可能 更 具 吸 引 力
timeit  模块可以 快速 演示 在 运行 效率 方面 一 定 的 优 势 from  timeit  import  timer  timerta  ab  bt  a 1 b 2
54962537085770791 与 timeit  的 精 细 粒 度 级别 相反 profile  和 pstats  模块提供了 用于在 较大 的代码块 中 识别 时间 关键 部分 的工具
 质 量 控制
 开发 高 质 量 软件 的一种 方法 是 在 开发 过程中 为每个 函数 编写 测试 并 在 开发 过程中 经常 运行 这些 测试
doctest  模块提供了一个 工具 用 于 扫描 模块 并 验证 程序 文档字符串 中 嵌入 的 测试
 测试 构造 就像 将 典型 调用 及其 结果 剪 切 并 粘 贴 到 文档字符串 一样 简单
 这 通过 向 用户 提供 示例 来 改进 文档 并且 它允许 doctest  模块 确保 代码 保持 对 文档 的 真 实 def  averagevalues  computes  the  arithmetic  mean  of  a  list  of  numbers
testmod  automatically  validate  the  embedded  testsunittest  模块 不 像 doctest  模块 那样 易于 使用 但 它允许 在 一个单独的 文件 中 维护 更 全 面 的 测试 集 import  unittest  class  teststatisticalfunctionsunittest
 自 带 电 池
python  有 自 带 电 池 的 理 念
 通过 其 包 的 复杂 和 强大 功能 可以 最好 地 看到 这一点
 例如 xmlrpc
client  和 xmlrpc
server  模块 使 远程 过程 调用 的 实现 几 近 轻松
 尽管 模块名称 中 有 xml  字 样 但 用户 不需要 直接 了解 或 处理 xml
 email  包 是 一个用于 管理 电子邮件 的 库 包括 mime  和其他 基于 rfc 2822 的 邮件 文档
 与 smtplib  和 poplib  实际上 发送 和 接收 消息 不同 电子邮件 包 具有 完整的 工具集 用 于 构建 或 解码 复杂的 消息 结构 包括 附 件 以及 实现 互联网 编码 和 标头 协议
  json  包 为 解析 这种 流行的 数据 交换 格式 提供了 强大 的 支持
 csv  模块 支持 以 逗号分隔 值 格式 直接 读取 和 写入文件 这些 格式 通常 由 数据库 和 电子 表 格 支持
 xml  处理 由 xml
elementtree  xml
dom  和 xml
sax  包 支持
 这些模块 和 软件包 共同 大 大 简化 了 python  应用程序 和其他 工具 之间的 数据 交换
 sqlite 3 模块 是 sqlite  数据库 库 的 包装器 提供了一个 可以使用 稍 微 非 标准 的 sql  语法 更新 和 访问 的 持久 数据库
 国际化 由 许多 模块 支持 包括 gettext  locale  以及 codecs  包
 交互式 编辑 和 编辑 历史
 某些 版本 的 python  解释器 支持 编辑 当前 输入 行 和 编辑 历史 记录 类似 kornshell  和 gnu  bash  shell  的功能
 这 个 功能 使用了 gnu  readline  来实现 一个 支持 多种 编辑 方式 的 库
 这 个 库 有 它 自己的 文档 在这里 我们 就不 重复 说明 了
tab  补全 和 编辑 历史
 默认 交互式 解释器 的替代 品
 类
 名称 和 对象
 对象具有 个 性 多个 名称 在多个 作用域 内 可以 绑定到 同 一个 对象
 这 在 其他语言 中 称为 别名
 乍 一 看 python  时 通常不 会 理解 这一点 在 处理 不可变的 基本 类型 数字 字符串 元组 时可以 安全地 忽略 它
 但是 别名 对 涉及 可变对象 如 列表 字典 和 大多数 其他类型的 python  代码 的 语义 可能 会产生 惊 人 的 影响
 通常 这样做 是为了 使 程序 受 益 因为 别名 在某些 方面 表 现 得 像 指针
 例如 传递 一个 对象 的 代 价 很小 因为 实现 只 传递 一个 指针 如果 函数 修改 了 作为参数 传递 的 对象 调用者 将 看到 更改 这 就 不需要 像 pascal  中 那样 使用 两个 不同的 参数传递 机制
python  作用域 和 命名空间
 作用域 和 命名空间 示例
 这个例子 演示了如何 引用 不同 作用域 和 名称 空间 以及 global  和 nonlocal  会 如何 影响 变量 绑定 def  scopetest  def  dolocal  spam  local  spam  def  dononlocal  nonlocal  spam  spam  nonlocal  spam  def  doglobal  global  spam  spam  global  spam  spam  test  spam  dolocal  printafter  local  assignment  spam  dononlocal  printafter  nonlocal  assignment  spam  doglobal  printafter  global  assignment  spam  scopetest  printin  global  scope  spam  示例 代码 的 输出 是 after  local  assignment  test  spam  after  nonlocal  assignment  nonlocal  spam  after  global  assignment  nonlocal  spam  in  global  scope  global  spam  请注意 局部 赋值 这是 默认 状态 不 会 改变 scopetest  对 spam  的 绑定
 nonlocal  赋值 会 改变 scopetest  对 spam  的 绑定 而 global  赋值 会 改变 模块层级 的 绑定
 您 还可以 在 global  赋值 之前 看到 之前 没有 spam  的 绑定
 初 探 类
 类 引入 了一些 新 语法 三种 新 对象类型 和 一些 新 语义
 类定义 语法
 最简单的 类定义 看起来 像这样 class  classname  statement 1
 statementn  类定义 与 函数定义 def  语句 一样 必须 被执行 才会 起作用
 你可以 尝试 将 类定义 放在 if  语句 的 一个 分 支 或 是 函数 的 内部
 在 实 践 中 类定义 内 的 语句 通常 都 是 函数定义 但也 允许 有其他 语句 有 时 还 很有用 我们 会 稍后 再 回 来 说明 这个问题
 在 类 内部 的 函数定义 通常 具有 一种 特别 形式 的参数列表 这是 方法调用 的 约定 规范 所 指明 的 这个问题 也 将 在 稍后 再 说明
 当 进入 类定义 时 将 创建一个新的 命名空间 并将其 用 作 局部 作用域 因此 所有对 局部变量 的 赋值 都 是 在这个 新 命名空间 之内
 特别 的 函数定义 会 绑定到 这里 的 新 函数 名称
 当 从 结尾 处 正常 离 开 类定义 时 将 创建一个 类对象
 这 基本上 是一个包 围 在 类定义 所 创建 命名空间 内容 周 围 的 包装器 我们将 在 下 一节 了解有关 类对象 的更多信息
 原始 的 在 进入 类定义 之前 起作用 的局部 作用域 将 重新 生效 类对象 将 在这里 被 绑定到 类定义 头 所 给出的 类 名称 在这个 示例中 为 classname
 类对象
 类对象 支持 两种 操作 属性引用 和 实例化
 属性引用 使用 python  中所有 属性引用 所使用的 标准 语法 obj
 有效的 属性 名称 是 类对象 被 创建时 存在于 类 命名空间 中的所有 名称
 因此如果 类定义 是这样的 class  myclass  a  simple  example  class  i 12345 def  fself  return  hello  world  那么 myclass
i  和 myclass
f  就 是有效的 属性引用 将 分别 返回 一个整数 和 一个 函数对象
 类属性 也可以被 赋值 因此可以 通过 赋值 来 更改 myclass
i  的 值
 doc  也是 一个有效的 属性 将 返回 所属 类 的 文档字符串 a  simple  example  class
 类 的 实例化 使用 函数 表示法
 可以把 类对象 视为 是 返回 该类的 一个 新实例 的 不带参数 的 函数
 举例来说 假设 使用 上述 的 类 x  myclass  创建 类的新 实例 并 将 此 对象 分配 给 局部变量 x
 实例化 操作 调用 类对象 会创建一个 空 对象
 许多 类 喜欢 创建 带有 特定 初始 状态 的 自定义 实例
 为 此 类定义 可能包含 一个名为 init  的 特殊方法 就 像这样 def  initself  self
data  当 一个 类定义了 init  方法 时 类的实例 化 操作 会自动 为 新 创建 的 类实例 发起调用 init
 因此 在这个 示例中 可以通过 以 下 语句 获得 一个 经 初始化 的新实例 x  myclass  当然 init  方法 还可以 有 额外 参数 以 实现 更高 灵活 性
 在这种情况下 提供给 类 实例化 运算符 的 参数 将 被传递给 init
 例如 class  complex 
 实例对象
 现 在 我们 能 用 实例对象 做 什么？ 实例对象 理解 的唯一 操作 是 属性引用
 有两种 有效的 属性 名称 数据 属性 和 方法
 数据 属性 对应于 smalltalk  中 的 实例变量 以及 c  中 的 数据 成员
 数据 属性 不需要 声明 像 局部变量 一样 它们将 在 第一次 被赋值 时 产生
 例如如果 x  是 上面 创建 的 myclass  的实例则 以下代码 段 将打印 数值16 且不 保留 任何 追踪 信息 x
counter  另一 类实例 属性引用 称为 方法
 方法 是 从 属于 对象 的 函数
 在 python  中 方法 这 个 术 语 并不是 类实例 所 特 有 的 其他对象 也可以 有 方法
 例如 列表 对象具有 append  insert  remove  sort  等 方法
 然而 在以下 讨论 中我们 使用 方法 一 词 将 专 指 类实例 对象 的 方法 除非 另外 显式地 说明
 实例对象 的 有效 方法 名称 依赖于 其 所属 的 类
 根据 定义一个 类 中所有 是 函数对象 的 属性 都 是 定义了 其 实例 的相应 方法
 因此在 我们 的 示例中 x
f  是有效的 方法 引用 因为 myclass
f  是一个 函数 而 x
i  不 是 方法 因为 myclass
i  不是一个 函数
 但是 x
f  与 myclass
f  并不是 一 回 事 它是一个 方法 对象 不 是 函数对象
 方法 对象
 通常 方法 在 绑定 后 立即 被调用 x
f  在 myclass  示例中 这 将 返回 字符串 hello  world
 但是 立即 调用 一个 方法 并不是 必须 的 x
f  是一个 方法 对象 它可以 被 保存 起来 以 后再 调用
 例如 xf  x
f  while  true  printxf  将 继续 打印 hello  world  直到 结束
 当 一个 方法 被调用时 到 底 发生了 什么？ 你可能 已经 注意 到 上面 调用 x
f  时 并没有 带参数 虽然 f  的 函数定义 指定了 一个参数
 这 个参数 发生了 什么 事？ 当 不带参数 地调用 一个 需要 参数的函数 时 python  肯 定 会引发异常 即使 参数 实际 未被 使用
 实际上 你可能 已经 猜 到 了 答 案 方法 的 特殊 之处 就 在 于 实例对象 会 作为 函数 的 第一个参数 被 传入
 在 我们 的 示例中 调用 x
f  其 实 就 相当于 myclass
 总 之 调用 一个具有 n  个参数的 方法 就 相当于 调用 再 多 一个参数 的对应 函数 这 个参数 值 为 方法 所属 实例对象 位置 在其他 参数 之前
 如果你 仍然 无法 理解 方法 的 运 作 原 理 那么 查看 实现细节 可能会 澄 清 问题
 当 一个实例 的 非 数据 属性 被 引用 时 将 搜索 实例 所属 的 类
 如果 被 引用 的 属性 名称 表示 一个有效的 类属性 中的函数 对象 会通过 打包 指向 查找 到 的 实例对象 和 函数对象 到 一个 抽象 对象 的方式来 创建 方法 对象 这 个 抽象 对象 就是 方法 对象
 当 附带参数 列表 调用 方法 对象 时 将 基于 实例对象 和 参数列表 构建 一个新的 参数列表 并 使 用这个 新 参数列表 调用 相应的 函数对象
 类 和 实例变量
 一般 来说 实例变量 用 于 每个 实例 的唯一 数据 而 类变量 用 于 类 的 所有 实例 共享 的 属性 和 方法 class  dog  kind  canine  class  variable  shared  by  all  instances  def  initself  name  self
name  unique  to  e  buddy  正 如 名称 和 对象 中 已 讨论 过 的 共享 数据 可能在 涉及 mutable  对象例如 列表 和 字典 的时候 导致 令人 惊 讶 的结果
 例如 以下代码 中 的 tricks  列表 不应该 被用作 类变量 因为 所有的 dog  实例 将 只 共享 一个单独的 列表 class  dog  tricks  mistaken  use  of  a  class  variable  def  initself  name  self
tricks  unexpectedly  shared  by  all  dogs  roll  over  play  dead  正确的 类 设计 应该使用 实例变量 class  dog  def  initself  name  self
 补 充 说明
 继承
 当然 如果不 支持 继承 语言特性 就不 值得 称为 类
 派生类 定义 的语法 如下所示 class  derivedclassnamebaseclassname  statement 1
 statementn  名称 baseclassname  必须 定义 于 包含 派生类 定义 的 作用域中
 也 允许 用其他 任意 表达式 代替 基类 名称 所在的 位置
 这 有 时 也可能 会 用 得 上 例如 当 基类 定义 在 另一个 模块中的 时候 class  derivedclassnamemodname
baseclassname  派生类 定义 的 执行 过程 与 基类 相同
 当 构造 类对象 时 基类 会 被 记住
 此 信息 将 被用来 解析 属性引用 如果 请求的 属性 在 类 中 找不到 搜索 将 转 往 基类 中进行 查找
 如果 基类 本身 也 派生 自 其他 某个 类 则 此 规则 将 被 递归地 应用
 派生类 的 实例化 没有任何 特殊 之处 derivedclassname  会 创建 该类的 一个 新实例
 方法 引用 将按 以 下方式 解析 搜索 相应的 类属性 如 有必要 将按 基类 继承 链 逐 步 向下 查找 如果 产生 了 一个 函数对象 则 方法 引用 就 生效
 派生类 可能会 重写 其 基类 的 方法
 因为 方法 在 调用 同一 对象 的 其他方法 时 没有 特殊 权限 所 以 调用 同一 基类 中定义的 另一 方法 的 基类 方法 最终 可能会 调用 覆盖 它 的 派生类 的 方法
 对 c  程序员 的 提示 python  中所有 的 方法 实际上 都 是 virtual  方法
 在 派生类 中 的 重载 方法 实际上 可能 想要 扩展 而非 简单地 替换 同名的 基类 方法
 有一种 方式 可以 简单地 直接调用 基类 方法 即 调用 baseclassname
 有 时 这 对 客户端 来说 也是 有用的
 请注意 仅当 此 基类 可 在 全局 作用域中 以 baseclassname  的 名称 被访问 时 方 可 使用 此 方式
python  有两个 内置函数 可被用于 继承 机制 使用 isinstance  来 检查 一个实例 的 类型 isinstanceobj  int  仅 会 在 obj
class  为 int  或 某个 派生 自 int  的 类 时 为 true
 使用 issubclass  来 检查 类 的 继承 关系 issubclassbool  int  为 true  因为 bool  是 int  的子类
 但是 issubclassfloat  int  为 false  因为 float  不 是 int  的子类
 多重 继承
python  也支持 一种 多重 继承
 带有 多个 基类 的 类定义 语句 如下所示 class  derivedclassnamebase 1 base 2 base 3 statement 1
 statementn  对 于 多 数 应用 来说 在 最简单 的情况下 你可以 认为 搜索 从 父 类 所 继承 属性 的 操作 是 深度 优先、 从左至右 的 当 层次结构 中 存 在 重 叠 时 不会在 同 一个 类 中搜索 两次
 因此如果 某一 属性 在 derivedclassname  中 未找到 则 会 到 base 1 中搜索 它 然后 递归地 到 base 1 的 基类 中搜索 如果在 那 里 未找到 再 到 base 2 中搜索 依 此类推
 真 实 情况 比 这 个 更复杂 一些 方法 解析 顺序 会 动态 改变 以 支持 对 super  的 协 同 调用
 这种方式 在某些 其他 多重 继承 型 语言中 被称为 后续 方法调用 它 比 单 继承 型 语言中 的 super  调用 更 强大
 动态 改变 顺序 是 有必要 的因为 所有 多重 继承 的 情况 都 会显示 出 一个 或更多 的 菱 形 关联 即 至少有 一个 父 类 可通过 多 条 路径 被 最 底层 类 所 访问
 例如 所有 类 都 是 继承自 object  因此 任何 多重 继承 的 情况 都 提供了一 条 以 上 的 路径 可以通 向 object
 为 了 确保 基类 不会被 访问 一次 以 上 动态 算法 会 用 一种 特殊 方式 将 搜索 顺序 线 性 化 保留 每个 类 所指定的 从左至右 的顺序 只 调用 每个 父 类 一次 并且 保持 单 调 即 一个 类 可以被 子类化 而 不 影响 其 父 类 的 优先 顺序
 总 而言 之 这些 特性 使得 设计 具有 多重 继承 的 可靠 且 可扩展 的 类 成为 可能
 要 了解 更多细节 请参阅 httpswww
 私有 变量
 杂项 说明
 有 时 会 需要使用 类似于 pascal  的 record  或 c  的 struct  这样的 数据类型 将 一些 命名 数据 项 捆 绑 在一起
 这种情况 适合 定义一个 空 类 class  employee  pass  john  employee  create  an  empty  employee  record  fill  the  fields  of  the  record  john
salary 1000 一段 需要 特定 抽象 数据类型 的 python  代码 往往 可以被 传入一个 模拟 了 该 数据类型 的 方法 的 类 作为 替代
 例如 如果你 有 一个 基于 文件对象 来 格式化 某些 数据 的 函数 你可以 定义 一个带有 read  和 readline  方法 从字符串 缓存 获取 数据 的 类 并将其 作为参数 传入
 实例方法 对象 也 具有 属性 m
self  就是 带有 m  方法 的 实例对象 而 m
func  则 是 该方法 所对应的 函数对象
 迭代器
 到 目前 为止 您 可能 已经 注意 到 大多数 容器对象 都 可以使用 for  语句 for  element  in 123 printelement  for  element  in 123 printelement  for  key  in  one 1 two 2 printkey  for  char  in 123 printchar  for  line  in  openmyfile
txt  printline  end  这种 访问 风格 清晰、 简 洁 又 方便
 迭代器 的 使用 非常 普 遍 并 使得 python  成为 一个 统 一 的 整 体
 在 幕 后 for  语句 会 在 容器对象 上调用 iter
 该函数 返回 一个 定义了 next  方法 的 迭代器对象 此方法将 逐 一 访问 容器 中的元素
 当 元素 用 尽 时 next  将引发 stopiteration  异常 来 通知 终止 for  循环
 你可以使用 next  内置函数 来 调用 next  方法 这个例子 显示了 它 的 运 作 方式 s  abc  it  iters  it  iterator  object  at 0 x 00 a 1 db 50 nextit  a  nextit  b  nextit  c  nextit  traceback  most  recent  call  last  file  stdin  line 1 in  module  nextit  stopiteration  看 过 迭代器 协议 的 幕 后 机制 给 你 的 类 添加 迭代器 行为 就 很容易 了
 定义一个 iter  方法来 返回 一个带有 next  方法的对象
 如果 类 已 定义了 next  则 iter  可以 简单地 返回 self  class  reverse  iterator  for  looping  over  a  sequence  backwards
 生成器
 生成器 是一个 用于创建 迭代器 的简单 而 强大 的工具
 它们 的写法 类似于 标准 的 函数 但 当 它们 要 返回 数据 时 会 使用 yield  语句
 每次 在 生成器 上调用 next  时它会 从 上 次 离 开 的 位置 恢复 执行 它 会 记住 上 次 执行 语句 时 的 所有 数据 值
 一个 显示 如何 非常 容易 地 创建 生成器 的 示例 如 下 def  reversedata  for  index  in  rangelendata 111 yield  dataindex  for  char  in  reversegolf 
 f  l  o  g  可以用 生成器 来完成 的 操作 同样 可以用 前 一节 所描述的 基于 类 的 迭代器 来完成
 但 生成器 的写法 更 为 紧凑 因为它 会 自动创建 iter  和 next  方法
 另一个 关键 特性 在 于 局部变量 和 执行 状态 会 在每次 调用 之间 自动 保存
 这使得 该函数 相比 使用 self
index  和 self
data  这种 实例变量 的方式 更易 编写 且 更 为 清晰
 除了 会 自动创建 方法 和 保存 程序 状态 当 生成器 终结 时 它们 还 会自动 引发 stopiteration
 这些 特性 结合 在一起 使得 创建 迭代器 能 与 编写 常规 函数 一样 容易
 生成器表达式
 某些 简单的 生成器 可以 写成 简 洁 的 表达式 代码 所 用 语法 类似 列表推导式 但 外层 为 圆括号 而非 方括号
 这种 表达式 被设计用 于 生成器 将 立即 被 外层 函数 所使用的 情况
 生成器表达式 相比 完整的 生成器 更 紧凑 但 较 不 灵活 相比 等效 的 列表推导式 则 更 为 节 省 内存
 例如 sumii  for  i  in  range 10 sum  of  squares 285 xvec 102030 yvec 753 sumxy  for  xy  in  zipxvec  yvec  dot  product 260 uniquewords  setword  for  line  in  page  for  word  in  line
name  for  student  in  graduates  data  golf  listdatai  for  i  in  rangelendata 111 f  l  o  g  脚注1 存在一个 例外
 模块 对象 有 一个 秘 密 的只读 属性 dict  它 返回 用 于 实现 模块 命名空间 的字典 dict  是 属性 但不是 全局 名称
 显然 使 用这个 将 违 反 命名空间 实现 的 抽象 应当 仅 被用于 事 后 调试器 之 类 的 场合
 模块
 如果你 从 python  解释器 退出 并 再次 进入 之前的 定义 函数 和 变量 都会 丢失
 因此如果 你想 编写 一个 稍 长 些 的 程序 最好 使用 文本 编辑器 为 解释器 准备 输入 并 将 该文件 作为 输入 运行
 这 被称 作 编写 脚本
 随着 程序 变得 越 来 越 长 你 或 许 会 想 把它 拆分 成 几个 文件 以 方便 维护
 你 亦 或 想 在不同的 程序中 使用 一个 便捷 的 函数 而不必 把 这个函数 复制 到 每 一个 程序中 去
 为 支持 这些 python  有一种 方法 可以把 定义 放在 一个 文件 里 并 在 脚本 或 解释器 的 交互式 实例 中 使用它们
 这样的 文件 被称 作 模块 模块中的 定义 可以 导入 到 其 它 模块 或者 主 模块 你 在 顶 级 和 计算 器 模式下 执行 的 脚本 中可以 访问 的 变量 集合
 模块 是一个包含 python  定义 和 语句 的 文件
 文件名 就是 模块名 后 跟 文件 后缀
py 
 在 一个 模块 内部 模块名 作为一个 字符串 可以通过 全局变量 name  的 值 获得
 例如使用 你 最 喜 爱 的 文本 编辑器 在 当前目录 下 创建 一个名为 fibo
py  的 文件 文件 中 含 有以下 内容 fibonacci  numbers  module  def  fibn  write  fibonacci  series  up  to  n  a  b 01 while  a  n  printa  end  a  b  b  ab  print  def  fib 2 n  return  fibonacci  series  up  to  n  result  a  b 01 while  a  n  result
appenda  a  b  b  ab  return  result  现 在 进入 python  解释器 并 用以下 命令 导入 该模块 import  fibo  在当前 的符号 表 中 这 并不会 直接 进入 到 定义 在 fibo  函数 内 的 名称 它 只是 进入 到 模块名 fibo  中
 你可以用 模块名 访问 这些函数 fibo
name  fibo  如果你想 经常 使用 某个 函数 你可以 把它 赋值给 一个 局部变量 fib  fibo
 有关 模块 的更多信息
 以 脚本 的方式 执行 模块
 当你 用 下面 方式 运行 一个 python  模块 python  fibo
py  arguments  模块 里 的 代码 会被执行 就 好 像 你 导入 了 模块 一样 但是 name  被赋值 为 main
 这意味着 通过 在你的 模块 末尾 添加 这些 代码 if  name  main  import  sys  fibintsys
argv 1 你 既 可以把 这 个 文件 当 作 脚本 又 可 当 作 一个可调 入的模块 来 使用 因为 那 段 解析 命令行 的 代码 只有在 当 模块 是 以 main  文件 的方式 执行 的时候 才会 运行 python  fibo
py 500112358132134 如果模块 是 被导入 的 那些 代码 是 不 运行 的 import  fibo  这 经 常用于 为 模块 提供一个 方便的 用户 接口 或 用 于 测试 以 脚本 的方式 运行 模块 从而 执行 一些 测试 套件
 模块 搜索路径
 编译 过 的 python  文件
 标准 模块
python  附带 了 一个 标准 模块 库 在 单独的 文档 python  库参考 以 下 称为 库参考 中进行 了 描述
 一些 模块 内置 于 解释器中 它们 提供对 不 属于 语言核心 但 仍然 内置的 操作 的 访问 以 提高 效率 或 提供对 系统调用 等 操作系统 原语 的 访问
 这些模块 的 集合 是一个 配置 选项 它 也 取决于 底层 平台
 例如 winreg  模块 只 在 windows  操作系统 上 提供
 一个 特别 值得 注意 的 模块 sys  它 被 内 嵌 到 每 一个 python  解释器中
 变量 sys
ps 1 和 sys
ps 2 定义 用 作 主要 和 辅助 提示 的 字符串 import  sys  sys
ps 1 c  c  printyuck  yuck  c  这两个 变量 只有在 编译器 是 交互模式 下 才 被定义
sys
path  变量 是一个字符串 列表 用于确定 解释器 的 模块 搜索路径
 该 变量 被初始化 为 从 环境变量 pythonpath  获取 的 默认 路径 或者如果 pythonpath  未 设置 则 从 内置 默认 路径 初始化
 你可以使用 标准 列表 操作 对 其 进行 修改 import  sys  sys
dir  函数
 内置函数 dir  用 于 查找 模块定义 的 名称
 它 返回 一个 排序 过 的 字符串列表 import  fibo  sys  dirfibo  name  fib  fib 2 dirsys  breakpointhook  displayhook  doc  excepthook  interactivehook  loader  name  package  spec  stderr  stdin  stdout  unraisablehook  cleartypecache  currentframes  debugmallocstats  framework  getframe  git  home  xoptions  abiflags  addaudithook  apiversion  argv  audit  baseexecprefix  baseprefix  breakpointhook  builtinmodulenames  byteorder  calltracing  callstats  copyright  displayhook  dontwritebytecode  excinfo  excepthook  execprefix  executable  exit  flags  floatinfo  floatreprstyle  getasyncgenhooks  getcoroutineorigintrackingdepth  getallocatedblocks  getdefaultencoding  getdlopenflags  getfilesystemencodeerrors  getfilesystemencoding  getprofile  getrecursionlimit  getrefcount  getsizeof  getswitchinterval  gettrace  hashinfo  hexversion  implementation  intinfo  intern  isfinalizing  lasttraceback  lasttype  lastvalue  maxsize  maxunicode  metapath  modules  path  pathhooks  pathimportercache  platform  prefix  ps 1 ps 2 pycacheprefix  setasyncgenhooks  setcoroutineorigintrackingdepth  setdlopenflags  setprofile  setrecursionlimit  setswitchinterval  settrace  stderr  stdin  stdout  threadinfo  unraisablehook  version  versioninfo  warnoptions  如果没有 参数 dir  会 列出 你 当前 定义 的 名称 a 12345 import  fibo  fib  fibo
fib  dir  builtins  name  a  fib  fibo  sys  注意 它 列出 所有 类型 的 名称 变量 模块 函数 等等
dir  不 会 列出 内置函数 和 变量 的 名称
 如果你想要 这些 它们的 定义 是 在 标准 模块 builtins  中 import  builtins  dirbuiltins  arithmeticerror  assertionerror  attributeerror  baseexception  blockingioerror  brokenpipeerror  buffererror  byteswarning  childprocesserror  connectionabortederror  connectionerror  connectionrefusederror  connectionreseterror  deprecationwarning  eoferror  ellipsis  environmenterror  exception  false  fileexistserror  filenotfounderror  floatingpointerror  futurewarning  generatorexit  ioerror  importerror  importwarning  indentationerror  indexerror  interruptederror  isadirectoryerror  keyerror  keyboardinterrupt  lookuperror  memoryerror  nameerror  none  notadirectoryerror  notimplemented  notimplementederror  oserror  overflowerror  pendingdeprecationwarning  permissionerror  processlookuperror  referenceerror  resourcewarning  runtimeerror  runtimewarning  stopiteration  syntaxerror  syntaxwarning  systemerror  systemexit  taberror  timeouterror  true  typeerror  unboundlocalerror  unicodedecodeerror  unicodeencodeerror  unicodeerror  unicodetranslateerror  unicodewarning  userwarning  valueerror  warning  zerodivisionerror  buildclass  debug  doc  import  name  package  abs  all  any  ascii  bin  bool  bytearray  bytes  callable  chr  classmethod  compile  complex  copyright  credits  delattr  dict  dir  divmod  enumerate  eval  exec  exit  filter  float  format  frozenset  getattr  globals  hasattr  hash  help  hex  id  input  int  isinstance  issubclass  iter  len  license  list  locals  map  max  memoryview  min  next  object  oct  open  ord  pow  print  property  quit  range  repr  reversed  round  set  setattr  slice  sorted  staticmethod  str  sum  super  tuple  type  vars  zip
 包
 包 是一种 通过 用 带 点 号 的模块名 来 构造 python  模块 命名空间 的 方法
 例如 模块名 a
b  表示 a  包 中 名为 b  的 子模块
 正 如 模块 的 使用 使得 不同 模块 的 作者 不必 担 心 彼 此 的 全局变量 名称 一样 使用 加 点 的模块名 可以 使得 numpy  或 pillow  等 多 模块 软件包的 作者 不必 担 心 彼 此 的 模块名称 一样
 假设 你想 为 声 音 文件 和 声 音 数据 的 统 一 处理 设计 一个 模块 集合 一个 包
 由 于 存 在 很多 不同的 声 音 文件格式 通常 由 它们的 扩展名 来 识别 例如
wav 
aiff 
au  因此 为 了 不同 文件格式 间 的 转换 你 可能需要 创建 和 维护 一个 不 断 增 长 的 模块 集合
 你可能 还 想 对 声 音 数据 还 做 很多 不同的 处理 例如 混 声 添加 回 声 使用 均 衡 器 功能 创 造 人 工 立 体 声 效果 因此 为 了 实现 这些 处理 你 将 另外 写 一个 无穷 尽 的 模块 流
 这是 你 的 包 的 可能 结构 以 分 层 文件系统 的形式 表示 sound  toplevel  package  init
 当 导入 这 个 包 时 python  搜索 sys
path  里 的 目录 查找 包 的 子目录
 必须 要 有 init
py  文件 才能 让 python  将 包含 该文件 的 目录 当 作 包
 这样 可 以防止 具有 通常 名称 例如 string  的 目录 在 无 意 中 隐藏 稍后 在 模块 搜索路径 上 出现的 有效 模块
 在 最简单 的情况下 init
py  可以 只是 一个空 文件 但它 也可以 执行 包 的 初始化 代码 或 设置 all  变量 具体 将 在 后 文 介绍
 包 的 用户 可以从 包 中 导入 单个 模块 例如 import  sound
echo  这 会 加载 子模块 sound
echo 
 但 引用 它 时 必须使用 它 的 全 名
7 atten 4 导入 子模块 的 另一种 方法 是 from  sound
effects  import  echo  这 也会 加载 子模块 echo  并 使 其 在没有 包 前缀 的情况下 可 用 因此可以 按 如 下方式 使用 echo
7 atten 4 另一种 形式 是 直接 导入 所需的 函数 或 变量 from  sound
echo  import  echofilter  同样 这 也会 加载 子模块 echo  但 这 会 使 其 函数 echofilter  直接 可 用 echofilterinput  output  delay 0
7 atten 4 请注意 当使用 from  package  import  item  时 item  可以是 包 的 子模块 或 子 包 也可以是 包 中定义的 其他 名称 如 函数 类 或 变量
 import  语句 首先 测试 是否 在 包 中 定义了 item  如果没有 它 假定 它是一个 模块 并 尝试 加载 它
 如果 找不到 它 则引发 importerror  异常
 相反 当使用 import  item
subsubitem  这样的 语法 时 除了 最后一 项 之外 的每一 项 都 必须是一个 包 最后一 项 可以是 模块 或 包 但不 能 是 前 一 项 中定义的 类 或 函数 或 变量
 从 包 中 导入
 当 用户 写 from  sound
effects  import  会发生 什么？ 理 想 情况下 人 们 希望 这 会 以 某 种方式 传递给 文件系统 找到 包 中 存 在 哪些 子模块 并 将它们 全部 导入
 这 可能需要 很 长时间 导入 子模块 可能 会产生 不 必要的 副作 用这种 副作 用 只有在 显式 导入 子模块 时才会 发生
 唯一的 解决方案是 让 包 作者 提供一个 包 的 显式 索引
import  语句 使用 下面的 规范 如果一个 包 的 init
py  代码 定义了 一个名为 all  的 列表 它 会被视为 在 遇到 from  package  import  时 应该 导入 的模块名 列表
 在 发布 该 包 的 新 版本 时 包 作者 可以 决定 是否 让 此 列表 保持 更新
 包 作者 如果 认为 从 他们 的 包 中 导入 的 操作 没 有必要 被使用 也可以 决定 不支持 此 列表
 例如 文件 soundeffectsinit
py  可以包含 以下代码 all  echo  surround  reverse  这意味着 from  sound
effects  import  将 导入 sound  包 的 三个 命名 子模块
 如果没有 定义 allfrom  sound
effects  import  语句 不 会 从 包 sound
effects  中 导入 所有子 模块 到 当前 命名空间 它只 确保 导入 了 包 sound
effects  可能 运行 任何 在 init
py  中 的 初始化 代码 然后 导入 包 中定义的 任何 名称
 这 包括 init
py  定义 的 任何 名称 以及 显式 加载 的 子模块
 它还 包括 由 之前的 import  语句 显式 加载 的 包 的 任何 子模块
 思 考 下面的 代码 import  sound
effects  import  在 这个例子 中 echo  和 surround  模块 是 在 执行 from
import  语句 时 导入 到 当前 命名空间中 的 因为它们 定义 在 sound
effects  包 中
 这 在 定义了 all  时 也 有效
 虽然 某些 模块 被设计为 在 使用 import  时 只 导出 遵循 某些 模式 的 名称 但 在 生产 代码中 它 仍然 被认为 是 不 好 的做法
 请 记住 使用 from  package  import  specificsubmodule  没有任何 问题 实际上 除非 导入 的 模块 需要使用 来自 不同 包 的 同名 子模块 否则 这是 推荐的 表示法
 子 包 参考
 当 包 被 构造 成 子 包 时 与 示例中 的 sound  包 一样 你可以使用 绝对 导入 来 引用 兄 弟 包 的 子模块
 例如如果 模块 sound
vocoder  需要 在 sound
effects  包 中 使用 echo  模块 它 可以使用 from  sound
effectsimport  echo 
 你 还可以 使用 import  语句 的 from  module  import  name  形式 编写 相对导入
 这些 导入 使用 前导 点 来 指示 相对导入 中 涉及 的当前 包 和 父 包
 例如 从 surround  模块 你可以使用 from 
filters  import  equalizer  请注意 相对导入 是基于 当前 模块 的 名称 进行 导入 的
 由 于 主模块 的 名称 总是 main  因此 用 作 python  应用程序 主模块 的 模块 必须 始终 使用 绝对 导入
 多个 目录中 的 包
 包 支持 另一个 特殊 属性 path 
 它 被初始化 为 一个列表 其中包含 在 执行 该 文件中的 代码 之前 保存 包 的 文件 init
py  的 目录 的 名称
 这 个 变量 可以 修改 这样做 会影响 将 来 对 包 中包含 的 模块 和 子 包 的 搜索
 虽然 通常 不需要 此功能 但它 可用于 扩展 程序 包 中 的 模块 集
 脚注1 实际上 函数定义 也是 被执行 的 语句 模块级 函数定义 的 执行 在 模块 的 全局 符号 表 中 输入 该函数 名
python  的 非 正式 介绍
 在 下面的例子 中 通过 提示符 与
 的 出现 与 否 来 区分 输入和输出 如果你想 复 现 这些 例子 当 提示符 出现 后 你必须 在 提示符 后 键 入 例子 中的每 一个 词 不 以 提示符 开头的 那些 行 是 解释器 的 输出
 注意 例子中 某 行 中出现 第二个 提示符 意味着 你必须 键 入一个 空白 行 这是 用来 结束 多 行 命令 的
 这 个 手册 中 的 许多 例子 都 包含 注释 甚至 交互 性 命令 中 也 有
python  中 的 注释 以 井 号 开头 并且 一 直 延伸 到 该 文本 行 结束 为止
 注释 可以 出现在 一行的 开头 或者是 空白 和 代码 的 后 边 但是 不 能 出现在 字符串 中 间
 字符串中的 井 号 就是 井 号
 因为 注释 是 用来 阐 明 代码 的 不会被 python  解释 所 以 在 键 入 这些 例子 时 注释 是 可以被 忽略 的
 几个 例子 this  is  the  first  comment  spam 1 and  this  is  the  second  comment 
python  作为 计算 器 使用
 数字
 字符串
 列表
 走 向 编程 的第一 步
 当然 我们可以 将 python  用 于 更复杂的 任务 而不是 仅仅 两个 和 两个 一起 添加
 例如 我们可以 编写 斐 波 那 契 数 列 的 初始 子 序列 如下所示 fibonacci  series 
0112358 这个例子 引入了 几个 新的特 点
 第一行 含 有 一个 多重 赋值 变量 a  和 b  同时 得到 了 新 值0 和1
 最后一 行 又 用 了 一次 多重 赋值 这 体 现 出了 右 手 边 的 表达式 在任何 赋值 发生 之前 就 被求值 了
 右 手 边 的 表达式 是 从左 到 右 被求值 的
 while  循环 只要 它 的 条件 这里 指 a 10 保持 为真 就会 一 直 执行
 python  和 c  一样 任何 非零 整数 都 为真 零 为假
 这 个 条件 也可以是 字符串 或 是 列表 的 值 事实 上 任何 序列 都可以 长度 非零 就 为真 空 序列 就 为假
 在 这个例子 里 判断 条件 是一个简单的 比较
 标准 的 比较 操作符 的写法 和 c  语 言 里 是 一样 小于、 大于、 等于、 小 于 或 等于、 大于 或 等于 以及 不 等于
 循环 体 是 缩进 的 缩进 是 python  组织 语句 的方式
 在交互式 命令行 里 你 得 给 每个 缩进 的 行 敲 下 tab  键 或者 多 个空格 键
 实际上 用 文本编 辑器 的话 你 要 准备 更复杂的 输入 方式 所有 像 样 的 文本 编辑器 都有 自动 缩进 的 设置
 交互式 命令行 里 当 一个 组合 的 语句 输入 时 需要 在 最后 敲 一个 空白 行 表示 完成 因为 语法 分析器 猜 不 出来 你 什么 时候 打 的 是 最后一 行
 注意 在同一 块 语句中 的每一 行 都 要 缩进 相同 的长度
 print  函数 将所有 传 进 来 的 参数 值 打印出 来
 它 和 直接 输入 你 要 显示 的 表 达式 比如 我们 之前 在 计算 器 的 例子 里 做 的 不 一样 print  能 处理 多个 参 数 包括 浮点数 字符串
 字符串 会打印 不带 引号 的内容 并且 在 参数 项 之 间 会 插入 一个 空格 这样 你 就可以 很好 的 把 东西 格式化 像这样 i 256256 printthe  value  of  i  is  i  the  value  of  i  is 65536 关键字参数 end  可以用来 取消 输出 后面 的 换行 或 是 用 另外 一个字符串 来 结尾 a  b 01 while  a 1000
01123581321345589144233377610987 脚注1 因为 比 有 更高的 优先级 所 以32 会 被解释 成32 因此 结果是9
 为 了 避免 这 个 并且 得到 结果9 你可以 用这个 式 子32
2 和 其他语言 不 一样的 是 特殊 字符 比如 说 n  在 单 引号
 和 双 引号
 里有 一样的 意义
 这两种 引号 唯一的 区别 是 你 不需要 在 单 引号 里 转义 双引号 但是 你必须 把 单 引号 转义 成 反 之 亦 然
 输入 输出
 有 几种 方法可以 显示 程序 的 输出 数据 可以 以 人 类 可读的 形式 打印出 来 或者 写入文件 以 供 将 来 使用
 本章 将 讨论 一些 可能 性
 更 漂 亮 的 输出 格式
 格式化 字符串文字
 格式化 字符串字面值 常 简 称为 f  字符串 能 让你 在 字符串 前 加上 f  和 f  并 将 表达式 写成 expression  来 在 字符串 中包含 python  表达式 的 值
 可选的 格式 说明符 可以 跟 在 表达式 后面
 这 样可以 更好地 控制 值 的 格式化 方式
 以下示例 将 pi  舍入到 小数点 后 三 位 import  math  printfthe  value  of  pi  is  approximately  math
 在 后 传递 一个整数 可以让 该 字段 成为 最小 字符 宽度
 这 在 使 列 对齐 时 很有用
 table  sjoerd 4127 jack 4098 dcab 7678 for  name  phone  in  table
 sjoerd 4127 jack 4098 dcab 7678 其他的 修 饰 符 可用于 在 格式化 之前 转化 值
 a  应用 ascii  s  应用 str  还有 r  应用 repr  animals  eels  printfmy  hovercraft  is  full  of  animals
 有关 这些 格式 规范 的 参考 请参阅 参考 指南 格式 规格 迷 你 语言
 字符串 的 format  方法
str
format  方法 的基本 用 法 如下所示 printwe  are  the  who  say 
formatknights  ni  we  are  the  knights  who  say  ni  花括号 和 其中的 字符 称为 格式 字段 将 替换为 传递给 str
format  方法的对象
 花括号 中 的 数字 可用来 表示 传递给 str
format  方法的对象 的 位置
formatspam  eggs  eggs  and  spam  如果在 str
format  方法 中 使用 关键字参数 则 使用 参数 的 名称 引用 它们的 值
 printthis  food  is  adjective
 位置 和 关键字参数 可以 任意 组合 printthe  story  of 01 and  other
 如果你 有 一个 非常 长 的 格式字符串 你 不 想 把它 拆 开 那么你 最好 是 按 名称 而不是 按 位置 引用 变量 来进行 格式化
 这可以通过 简单地 传递 字典 并 使用 方括号 访问 键 来完成
formattable  jack 4098 sjoerd 4127 dcab 8637678 这 也可以通过 使用 符号 将 table  作为 关键字参数 传递
formattable  jack 4098 sjoerd 4127 dcab 8637678 这 在 与 内置函数 vars  结合 使用 时 非常有用 它 会 返回包含 所有 局部变量 的字典
 例如 下面 几 行 代码 生成 一 组 整 齐 的 列 其中包含 给定的 整数 和 它 的 平方 以及 立 方 for  x  in  range 111
111248392741664525125636216749343864512981729101001000 关于 使用 str
format  进行 字符串格式化 的完整 概述 请参阅 格式字符串 语法
 手动 格式化字符串
 旧 的 字符串格式化 方法
 运算符 求 余 也 可用于 字符串格式化
 给定 string  values  则 string  中 的 实例 会 以 零 个或多个 values  元素 替换
 此操作 通常 被称为 字符串 插值
 例如 import  math  printthe  value  of  pi  is  approximately 5
 可 在 printf  风格的 字符串格式化 部分 找到 更多信息
 读写 文件
open  返回 一个 file  object  最 常用的 有 两个参数 openfilenamemode
 f  openworkfile  w  第一个参数 是包含 文件名 的 字符串
 第二个 参数 是 另一个 字符串 其中包含 一些 描述 文件 使用 方式 的 字符
mode  可以是 r  表示 文件 只能 读取 w  表示 只能 写入 已存在 的 同名 文件 会 被 删除 还有 a  表示 打开文件 以 追 加 内容 任何 写入的 数据 会自动 添加到 文件 的末尾
r  表示 打开 文件进行 读写
mode  参数 是可选的 省略 时 默认为 r
 通常 文件 是 以 text  mode  打开 的 这意味着 从 文件 中 读取或写入 字符串 时 都会 以 指定 的 编码 方式 进行编码
 如果未指定 编码格式 默认值 与 平台 相关 参见 open
 在 mode  中 追 加 的 b  则 以 binary  mode  打开文件 现 在 数据 是 以字节 对象 的形式 进行 读写 的
 这 个 模式 应该 用 于所有 不包含 文本 的 文件
 在 文本模式 下 读取 时 默认 会把 平台 特定的 行 结束 符 unix  上 的 nwindows  上 的 rn  转换为 n
 在 文本模式 下 写入 时 默认 会把 出现的 n  转换 回 平台 特定的 结束 符
 这样 在 幕 后 修改 文件 数据 对 文本 文件 来说 没有 问题 但是 会破坏 二进制数据 例如 jpeg  或 exe  文件中的 数据
 请 一 定 要注意 在 读写 此 类 文件 时 应 使用 二进制模式
 在 处理 文件对象 时 最好 使用 with  关键字
 优点 是 当 子句体 结束 后 文件 会 正确 关闭 即使 在 某个 时 刻 引发了 异常
 而且 使用 with  相比 等效 的 tryfinally  代码块 要 简短 得 多 with  openworkfile  as  f 
closed  true  如果你 没有 使用 with  关键字 那么 你应该 调用 f
close  来 关闭 文件 并 立即 释放 它 使用 的 所有 系统 资源
 如果你 没有 显式地 关闭 文件 python  的 垃圾回收 器 最终 将 销 毁 该对象 并 为 你 关闭 打开的文件 但 这 个 文件 可能会 保持 打开 状态 一段 时间
 另外 一个 风 险 是 不同的 python  实现 会 在不同的 时间 进行 清理
 通过 with  语句 或者 调用 f
close  关闭 文件对象 后 尝试 使用 该 文件对象 将自动 失败
 f
 文件对象 的 方法
 本节 中 剩 下 的 例子 将 假定 你 已 创建 名为 f  的 文件对象
 要 读取 文件 内容 请 调用 f
readsize  它 会 读取 一些 数据 并将其 作为 字符串 在 文本模式 下 或 字节串对象 在 二进制模式 下 返回
 size  是 一个可选的 数值 参数
 当 size  被省略 或者 为 负数 时 将 读取 并返回 整个 文件 的内容 如果文件 的大小 是 你 的 机器 内存 的 两 倍 就 会出现 问题
 当 取 其他值 时 将 读取 并返回 至多 size  个 字符 在 文本模式 下 或 size  个字节 在 二进制模式 下
 如果 已 到达 文件末尾 f
read  将返回一个 空字符串
readline  从 文件 中 读取一 行 换行符 n  留 在 字符串 的末尾 如果文件 不 以 换行符 结尾 则 在 文件 的最后一 行 省略
 这使得 返回值 明确 无 误 如果 f
readline  返回 一个空 的 字符串 则表示 已经 到达 了 文件末尾 而 空行 使用 n  表示 该 字符串 只包含 一个 换行符
 f
readline  要 从 文件 中读取 行 你可以 循环 遍历 文件对象
 这是 内存 高效 快速 的 并 简化 代码 for  line  in  f 
 second  line  of  the  file  如果你想 以 列表 的形式 读取 文件 中的所有 行 你也可以 使用 listf  或 f
writestring  会把 string  的内容 写入到 文件 中 并返回 写入的 字符 数
 f
writethis  is  a  testn 15 在 写入 其他类型的 对象 之前 需要 先 把 它们 转化为 字符串 在 文本模式 下 或者 字节 对象 在 二进制模式 下 value  the  answer 42 s  strvalue  convert  the  tuple  to  string  f
tell  返回 一个整数 给出 文件对象 在 文件中的 当前位置 表示为 二进制模式 下 时 从 文件 开始 的字节数 以及 文本模式 下 的 意义 不 明 的 数字
 要 改变 文件对象 的 位置 请使用 f
 通过 向 一个 参考 点 添加 offset  来 计算 位置 参考 点 由 whence  参数指定
 whence  的0 值表示 从 文件 开头 起 算1 表示 使用当前 文件 位置2 表示 使用 文件末尾 作为 参考 点
 whence  如果省略 则 默认值为0 即 使用 文件 开头 作为 参考 点
read 1 bd  在 文本 文件 那些 在 模式 字符串 中没有 b  的 打开的文件 中 只 允许 相对于 文件 开头 搜索 使用 seek 02 搜索 到 文件末尾 是 个 例外 并且 唯一 有效的 offset  值 是 那些 能 从 f
tell  中 返回 的 或者是 零
 其他 offset  值 都 会产生 未定义 的 行为
 文件对象 有一些 额外的 方法 例如 isatty  和 truncate  它们 使用 频 率 较 低 有关 文件对象 的完整 指南 请参阅 库参考
 使用 json  保存 结构化 数据
 字符串 可以 很 轻松 地 写入文件 并 从 文件 中读取 出来
 数字 可能会 费 点 劲 因为 read  方法 只能 返回 字符串 这些 字符串 必须 传递给 类似 int  的 函数 它 会 接受 类似123 这样的 字符串 并返回其 数字 值123
 当 你想 保存 诸 如 嵌套 列表 和 字典 这样 更复杂的 数据类型 时 手动 解析 和 序列化 会 变得 复杂
python  允许你 使用 称为 json  javascript  object  notation  的 流 行 数据 交换 格式 而不是 让 用户 不 断 的 编写 和 调试 代码 以 将 复杂的 数据类型 保存 到 文件 中
 名为 json  的 标准 模块可以 采用 python  数据 层次结构 并 将它们 转化为 字符串 表示形式 这 个 过程 称为 serializing 
 从 字符串表示 中 重 建 数据 称为 deserializing 
 在 序列化 和 反序列化 之间 表示 对象 的 字符串 可能已 存储在 文件 或 数据 中 或 通过 网络 连接 发送到 某个 远程 机器
 注解 json  格式 通常 被 现 代 应用程序 用 于 允许 数据 交换
 许多 程序员 已经 熟悉 它 这 使 其 成为 互 操作 性 的 良 好 选择
 如果你 有 一个 对象 x  你可以用 一 行 简单的 代码 来 查看 它 的 json  字符串表示 import  json  json
dumps 1 simple  list 1 simple  listdumps  函数 的 另一个 变体 叫 做 dump  它 只是 将 对象 序列化 为 textfile 
 因此如果 f  是一个 text  file  对象 我们可以 这样做 json
dumpx  f  要 再次 解码 对象 如果 f  是一个 打开 的 以 供 阅读 的 text  file  对象 x  json
loadf  这种 简单的 序列化 技术 可以 处理 列表 和 字典 但是 在 json  中 序列化 任意 类的实例 需要 额外的 努 力
 json  模块 的 参考 包含 对 此 的 解释
 参见 pickle  封存 模块 与 json  不同 pickle  是一种 允许 对 任意 复杂 python  对象进行 序列化 的 协议
 因此它 为 python  所 特 有 不能用 于 与 其他语言 编写 的 应用程序 通信
 默认情况下 它 也是 不安全 的 如果 数据 是 由 熟 练 的 攻击 者 精 心 设计 的 则 反 序列化 来自 不受 信 任 来源 的 pickle  数据 可以 执行 任意 代码
 最高层级 组件
python  解释器 可以从 多种 源 获得 输入 作为 标准输入 或 程序 参数 传入的 脚本 以 交互 方式 键 入 的 语句 导入 的 模块 源文件 等等
 这 一章 将 给出 在 这 些情况下 所用的 语法
 完整的 python  程序
 虽然 语言 规范 描述 不必 规 定 如何 发起调用 语言 解释器 但 对 完整的 python  程序 加 以 说明 还是 很有用 的
 一个完整 的 python  程序 会 在 最小 初始化 环境中 被执行 所有 内置 和 标准 模块 均为 可 用 但 均 处于 未 初始化 状态 只有 sys  各种 系统 服务 builtins  内置函数、 异常 以及 none  和 main  除外
 最后一个 模块 用 于 为 完整 程序 的 执行 提供 局部 和 全局 命名空间
 适用于 一个完整 python  程序 的语法 即 下 节 所描述的 文件 输入
 解释器 也可以通过 交互模式 被 发起调用 在此情况下 它并不 读取 和 执行 一个完整 程序 而 是 每次 读取 和 执行 一条 语句 可能为 复合语句
 此 时 的 初始 环境 与 一个完整 程序 的 相同 每条 语句 会 在 main  的 命名空间中 被执行
 一个完整 程序 可通过 三种 形式 被传递给 解释器 使用 c  字符串 命令行选项 使用 一个 文件 作为 第一个 命令行参数 或者 使用 标准输入
 如果文件 或 标准输入 是一个 tty  设置 解释器 会 进入 交互模式 否则 的话 它 会 将 文件 当 作 一个完整 程序 来执行
 文件 输入
 所有 从 非 交互式 文件 读取 的 输入 都 具有相同的 形式 fileinput  newline  statement  此 语法 用 于 下列 几种 情况 解析 一个完整 python  程序 时 从 文件 或 字符串 解析 一个 模块 时 解析 一个 传递给 exec  函数 的 字符串 时
 交互式 输入
 交互模式 下 的 输入 使用以下 语法 进行 解析 interactiveinput  stmtlist  newline  compoundstmt  newline  请注意 在 交互模式 下 一条 最高层级 复合语句 必须 带有一个 空行 这 对 于 帮助 解析器 确定 输入 的 结束 是 必须 的
 表达式 输入
eval  被用于 表达式 输入
 它 会 忽略 开头的 空白
 传递给 eval  的 字符串 参数必须 具 有以下 形式 evalinput  expressionlist  newline
 复合语句
 复合语句 是包含 其 它 语句 语句 组 的 语句 它们会 以 某 种方式 影响 或 控制 所 包含 其 它 语句 的 执行
 通常 复合语句 会 跨 越 多 行 虽然 在某些 简单 形式 下 整个 复合语句 也可能 包含于 一 行 之内
if  while  和 for  语句 用 来实现 传统的 控制 流程 构造
 try  语句 为 一 组 语句 指定 异常处理 和 和 清理 代码 而 with  语句 允许在 一个 代码块 周 围 执行 初始化 和 终结 化 代码
 函数和类 定义 在 语法上 也 属于 复合语句
 一条 复合语句 由 一个或多个‘ 子句’ 组成
 一个 子句 则 包含一个 句 头 和 一个‘ 句体’
 特定 复合语句 的 子句 头 都 处于 相同 的缩进 层级
 每个 子句 头 以 一个 作为 唯一 标识 的 关键字 开始 并 以 一个 冒号 结束
 子句体 是 由 一个 子句 控制 的 一 组 语句
 子句体 可以是 在 子句 头 的 冒号 之后 与 其 同 处 一行的 一条 或 由 分 号分隔的 多 条 简单 语句 或者 也可以是 在 其 之后 缩进 的 一 行 或 多 行 语句
 只有 后 一种 形式 的 子句体 才 能包含 嵌套的 复合语句 以 下 形式 是 不 合法的 这 主要 是因为 无法 分 清 某个 后续的 else  子句 应该 属于 哪个 if  子句 if  test 1 if  test 2 printx  还要注意 的 是 在这种情 形 下 分 号 的 绑定 比 冒号 更 紧 密 因此在 以下示例 中所有 print  调用 或者 都 不 执行 或者 都 执行 if  x  y  z  printx  printy  printz  总结 compoundstmt  ifstmt  whilestmt  forstmt  trystmt  withstmt  funcdef  classdef  asyncwithstmt  asyncforstmt  asyncfuncdef  suite  stmtlist  newline  newline  indent  statement  dedent  statement  stmtlist  newline  compoundstmt  stmtlist  simplestmt  simplestmt  请注意 语句 总是 以 newline  结束 之后 可能 跟 随 一个 dedent
 还要注意 可选的 后续 子句 总是 以 一个 不 能 作为 语句 开头的 关键字 作为 开头 因此 不 会产生 歧义‘ 悬 空 的 else ’ 问题 在 python  中 是通过 要求 嵌套的 if  语句 必须 缩进 来 解决 的
 为 了 保证 清晰 以 下 各 节 中 语法 规则 采用 将每个 子句 都 放在 单独 行 中 的 格式
if  语句
if  语句 用 于 有 条件 的 执行 ifstmt  if  assignmentexpression  suite  elif  assignmentexpression  suite  else  suite  它 通过 对 表达式 逐 个 求值 直至 找到 一个 真值 请参阅 布尔运算 了解 真值 与 假值 的 定义 在 子句体 中选择 唯一 匹配 的 一个 然后 执行 该 子句体 而且 if  语句 的其他 部分 不会被 执行 或 求值
 如果所 有 表达式 均 为假值 则 如果 else  子句体 如果存在 就 会被执行
while  语句
while  语句 用于在 表达式 保持 为真 的情况下 重复 地 执行 whilestmt  while  assignmentexpression  suite  else  suite  这 将 重复 地 检 验 表达式 并且 如果其 值 为真 就 执行 第一个 子句体 如果 表达式 值 为假 这可能 在 第一次 检 验 时就 发生 则 如果 else  子句体 存 在 就 会被执行 并 终止 循环
 第一个 子句体 中 的 break  语句 在 执行时 将 终止 循环 且不 执行 else  子句体
 第一个 子句体 中 的 continue  语句 在 执行时 将 跳过 子句体 中 的 剩余 部分 并返回 检 验 表达式
for  语句
try  语句
try  语句 可 为 一 组 语句 指定 异常处理器 和 或 清理 代码 trystmt  try 1 stmt  try 2 stmt  try 1 stmt  try  suite  except  expression  as  identifier  suite  else  suite  finally  suite  try 2 stmt  try  suite  finally  suiteexcept  子句 指定 一个或多个 异常处理器
 当 try  子句 中没有 发生异常 时 没有 异常处理器 会被执行
 当 try  子句中 发生异常 时 将 启动 对 异常处理器 的 搜索
 此 搜索 会 依 次 检查 except  子句 直至 找到 与 该异常 相匹配 的 子句
 如果存在 无 表达式 的 except  子句 它必须 是 最后一个 它 将 匹配任何 异常
 对 于 带有 表达式 的 except  子句 该 表达式 会被求值 如果 结果 对象 与 发生 的 异常 兼容 则 该 子句 将匹配 该异常
 一个 对象 如果是 异常 对象 所属 的 类 或 基类 或者是 包含有 兼容 该异常 的 项 的 元组 则 两者 就是 兼容的
 如果没有 except  子句 与 异常 相匹配 则会在 周 边 代码 和 发起调用 栈 上 继续 搜索 异常处理器
1 如果在 对 except  子句 头 中 的 表达式 求值 时 引发了 异常则 原 来 对 处理器 的 搜索 会 被取消 并 在 周 边 代码 和 调用 栈 上 启动 对 新 异常 的 搜索 它 会被视 作 是 整个 try  语句 所 引发的异常
 当 找到 一个 匹配 的 except  子句 时 该异常 将 被 赋值给 该 except  子句 在 as  关键字 之后 指定 的 目标 如果存在 此 关键字 的话 并且 该 except  子句体 将 被执行
 所有 except  子句 都必须 有 可执行 的 子句体
 当 到达 子句体 的末尾 时 通常会 转 向 整个 try  语句 之后 继续执行
 这意味着 如果对 于 同一 异常 存 在 有 嵌套的 两个 处理器 而 异常 发生 于 内 层 处理器 的 try  子句中 则 外层 处理器 将不会 处理 该异常
 当使用 as  将 目标 赋值为 一个异常 时 它 将 在 except  子句 结束 时 被 清除
 这 就 相当于 except  e  as  n  foo  被 转 写 为 except  e  as  n  try  foo  finally  del  n  这意味着 异常 必须 赋值给 一个 不同的 名称 才能 在 except  子句 之后 引用 它
 异常会被 清除 是因为 在 附加 了 回溯 信息 的情况下 它们会 形 成 堆栈 帧 的 循环 引用 使得 所有 局部变量 保持 存 活 直到 发生 下 一次 垃圾回收
 在 一个 except  子句体 被执行 之前 有关 异常 的详细信息 存放 在 sys  模块 中 可通过 sys
excinfo  来访问
excinfo  返回 一个3 元组 由 异常类、 异常 实例 和 回溯 对象 组成 参见 标准类型层级结构 一节 用 于 在程序中 标识 异常 发生 点
 当 从 处理 异常 的 函数返回 时 sys
excinfo  的值会 恢复 为 调用 前 的 原 值
 如果 控制 流 离 开 try  子句体 时 没有 引发异常 并且没有 执行 returncontinue  或 break  语句 可选的 else  子句 将 被执行
 else  语句中 的 异常 不 会 由 之前的 except  子句 处理
 如果存在 finally  它 将 指定一个‘ 清理’ 处理程序
 try  子句 会被执行 包括 任何 except  和 else  子句
 如果在 这些 子句中 发生 任何 未 处理 的 异常 该 异常会被 临时 保存
 finally  子句 将 被执行
 如果存在 被 保存 的 异常 它会在 finally  子句 的末尾 被 重新引发
 如果 finally  子句 引发了 另一个 异常 被 保存 的 异常 会 被设为 新 异常 的 上下文
 如果 finally  子句 执行 了 return  break  或 continue  语句 则 被 保存 的 异常会被 丢弃 def  f 
 f 42 在 finally  子句 执行 期间 程序 不 能 获取 异常 信息
 当 return  break  或 continue  语句 在 一个 try
finally  语句 的 try  子 语句体 中 被执行 时 finally  子 语句 也会‘ 在 离 开 时’ 被执行
 函数 的返回值 是 由 最后 被执行 的 return  语句 所 决定 的
 由 于 finally  子句 总是 被执行 因此在 finally  子句中 被执行 的 return  语句 总是 最后 被执行 的 def  foo 
 foo  finally  有关 异常 的更多信息 可以在 异常 一节 找到 有关 使用 raise  语句 生成 异常 的 信息 可以在 raise  语句 一节 找到
 在3
8 版更改 在 python 3
8 之前 continue  语句 不允许 在 finally  子句中 使用 这 是因为 具体实现 存在一个 问题
with  语句
with  语句 用 于 包装 带有 使用 上下文管理器 参见 with  语句 上下文管理器 一节 定义 的 方法 的代码块 的 执行
 这允许 对 普通的 try
finally  使用 模式 进行 封装 以 方便地 重 用
 withstmt  with  withitem  withitem  suite  withitem  expression  as  target  带有一个 项目的 with  语句 的 执行 过程 如 下1
 对 上下文 表达式 在 withitem  中 给出的 表达式 求值 以 获得 一个 上下文 管理器
 载入 上下文管理器的 enter  以便 后续 使用
 载入 上下文管理器的 exit  以便 后续 使用
 发起调用 上下文管理器的 enter  方法
 如果 with  语句中 包含一个 目标 来自 enter  的返回值 将 被赋值 给 它
 注解 with  语句 会 保证 如果 enter  方法 返回 时 未 发生错误 则 exit  将总是 被调用
 因此如果 在 对 目标列表 赋值 期间发生 错 误 则 会将其 视为 在 语句体 内部 发生 的 错误
 参见 下面的 第6 步
 执行 语句体
 发起调用 上下文管理器的 exit  方法
 如果 语句体 的 退出 是 由 异常 导致 的 则 其 类型、 值 和 回溯 信息 将 被 作为参数 传递给 exit
 否 则的话 将 提供 三个 none  参数
 如果 语句体 的 退出 是 由 异常 导致 的 并且 来自 exit  方法 的返回值 为假 则 该 异常会被 重新引发
 如果 返回值为 真 则 该 异常会被 抑 制 并 会 继续执行 with  语句 之后的 语句
 如果 语句体 由 于 异常 以外的 任何 原因 退出 则 来自 exit  的返回值 会被忽略 并 会 在 该 类 退出 正常的 发生 位置 继续执行
 以下代码 with  expression  as  target  suite  在 语义 上 等价于 manager  expression  enter  typemanager
excinfo  raise  finally  if  not  hitexcept  exitmanager  none  none  none  如果有 多个 项目 则 会 视 作 存 在多个 with  语句 嵌套 来处理 多个 上下文管理器 with  a  as  a  b  as  b  suite  在 语义 上 等价于 with  a  as  a  with  b  as  b  suite  在3
1 版更改 支持 多个 上下文 表达式
 参见 pep 343 with  语句 python  with  语句 的规范 描述、 背景 和 示例
 函数定义
 类定义
 类定义 就是 对 类对象的 定义 参见 标准类型层级结构 一节 classdef  decorators  class  classname  inheritance  suite  inheritance  argumentlist  classname  identifier  类定义 是 一条 可执行 语句
 其 中 继承 列表 通常 给出 基类 的 列表 进 阶 用 法 请参见 元 类 列表中 的每一 项 都 应当 被求值 为 一个 允许 子类 的 类对象
 没有 继承 列表 的 类 默认 继承自 基类 object  因此 class  foo  pass  等价于 class  fooobject  pass  随后 类 体 将 在 一个新的 执行 帧 参见 命名 与 绑定 中 被执行 使用 新 创建 的局部 命名空间 和 原 有 的 全局 命名空间
 通常 类 体 主要 包含 函数定义
 当 类 体 结束 执行时 其 执行 帧 将 被丢弃 而 其 局部 命名空间 会 被 保存
3 一个 类对象 随后 会 被创建 其 基类 使用 给定的 继承 列表 属性 字典 使用 保存 的局部 命名空间
 类 名称 将 在 原 有 的 全局 命名空间中 绑定到 该 类对象
 在 类 体 内 定义 的 属性 的顺序 保存在 新 类 的 dict  中
 请注意此 顺序 的 可靠 性 只 限于 类 刚 被 创建时 并且 只 适用于 使用 定义 语法 所定义的 类
 类 的 创建 可 使用 元 类 进行 重 度 定制
 类 也可以被 装饰 就像 装饰 函数 一样 f 1 arg  f 2 class  foo  pass  大致 等价于 class  foo  pass  foo  f 1 argf 2 foo  装饰器 表达式 的 求值 规则 与 函数 装饰器 相同
 结果 随后 会 被 绑定到 类 名称
 在3
9 版更改 类 可 使用 任何 有效的 assignmentexpression  来 装饰
 在之前版本中 此 语法 则 更 为 受限 详情参见 pep 614
 程序员 注意 事项 在 类定义 内 定义 的 变量 是 类属性 它们将 被 类实例 所 共享
 实例属性 可通过 self
name  value  在 方法 中 设 定
 类 和 实例属性 均 可通过 self
name  表示法 来访问 当 通过 此 方式 访问 时 实例属性 会 隐藏 同名的 类属性
 类属性 可 被用作 实例属性 的 默认值 但 在 此 场景 下 使用 可变 值 可能导致 未 预期的 结果
 可以使用 描述器 来创建 具有 不同 实现细节 的 实例变量
 参见 pep 3115 python 3000 中的元 类 将 元 类 声明 修改 为当前 语法 的 提议 以及 关于 如何 构建 带有 元 类 的 类 的 语 义 描述
 pep 3129 类 装饰器 增加 类 装饰器 的 提议
 函数 和 方法 装饰器 是 在 pep 318 中 被 引入 的
 协程
3
5 新版功能
 协程 函数定义
asyncfuncdef  decorators  async  def  funcname  parameterlist  expression  suitepython  协程 可以 在多个 位置 上 挂起 和 恢复 执行 参见 coroutine
 在 协程函数 体 内部 await  和 async  标识符 已 成为 保留 关键字 await  表达式 async  for  以及 async  with  只能 在 协程函数 体 中 使用
 使用 async  def  语法 定义 的 函数总是 为 协程函数 即使 它们 不包含 await  或 async  关键字
 在 协程函数 体 中 使用 yield  from  表达式 将引发 syntaxerror
 协程函数 的 例子 async  def  funcparam 1 param 2 dostuff  await  somecoroutine
async  for  语句
asyncforstmt  async  forstmtasynchronous  iterable  能够 在 其 iter  实现 中 调用 异步 代码 而 asynchronous  iterator  可以在 其 next  方法 中 调用 异步 代码
async  for  语句 允许 方便地 对 异步 迭代器 进行迭代
 以下代码 async  for  target  in  iter  suite  else  suite 2 在 语义 上 等价于 iter  iter  iter  typeiter
anextiter  except  stopasynciteration  running  false  else  suite  else  suite 2 另请参阅 aiter  和 anext  了解详情
 在 协程函数 体 之外 使用 async  for  语句 将引发 syntaxerror
async  with  语句
asyncwithstmt  async  withstmtasynchronous  context  manager  是一种 context  manager  能够 在 其 enter  和 exit  方法 中 暂 停 执行
 以下代码 async  with  expression  as  target  suite  在 语义 上 等价于 manager  expression  aenter  typemanager
excinfo  raise  finally  if  not  hitexcept  await  aexitmanager  none  none  none  另请参阅 aenter  和 aexit  了解详情
 在 协程函数 体 之外 使用 async  with  语句 将引发 syntaxerror
 参见 pep 492 使用 async  和 await  语法 实现 协程 将 协程 作为 python  中的一个 正式 的 单独 概念 并 增加 相应的 支持 语法
 脚注1 异常会被 传播 给 发起调用 栈 除非 存在一个 finally  子句 正 好 引发了 另 一个异常
 新 引发的异常 将导致 旧 异常 的 丢失
2 作为 函数体 的第一 条 语句 出现的 字符串字面值 会 被转换为 函数 的 doc  属性 也就是 该函数 的 docstring
3 作为 类 体 的第一 条 语句 出现的 字符串字面值 会 被转换为 命名空间 的 doc  条目 也就是 该类的 docstring
 词法分析
 行 结构
 一个 python  程序可 分 为 许多 逻辑 行
 逻辑 行
 物理 行
 物理 行 是 以 一个 行 终止 序列 结束 的 字符 序列
 在 源文件 和 字符串 中 可以使用 任何 标准 平台上 的 行 终止 序列 unix  所用的 ascii  字符 lf  换行 windows  所用的 ascii  字符 序列 cr  lf  回 车 加 换行 或者 旧 macintosh  所用的 ascii  字符 cr  回 车
 所有这些 形式 均可 使用 无论 具体 平台
 输入 的 结束 也会 被作为 最后一个 物理 行 的 隐 含 终止 标志
 当 嵌入 python  时 源码 字符串 传入 python  api  应 使用标准 c  的 传统 换行符 即 n  表示 ascii  字符 lf  作为 行 终止 标志
 注释
 一条 注释 以 不包含 在 字符串字面值 内 的 井 号 开头 并 在 物理 行 的末尾 结束
 一条 注释 标志 着 逻辑 行 的 结束 除非 存 在 隐 含 的 行 拼接 规则
 注释 在 语法分析 中 会被忽略
 编码 声明
 如果 一条 注释 位于 python  脚本 的第一 或 第二 行 并且 匹配 正则表达式 codingsw
 这 条 注释 会 被作为 编码 声明 来处理 上述 表达式 的第一 组 指定了 源码 文件 的 编码
 编码 声明 必须 独 占 一 行
 如果它 是 在 第二 行 则 第一行 也 必须是 注释
 推荐的 编码 声明 形式 如 下 coding  encodingname  这 也是 gnu  emacs  认 可 的形式 以及 vimfileencodingencodingname  这是 bram  moolenaar  的 vim  认 可 的形式
 如果没有 编码 声明 则 默认 编码 为 utf 8
 此外 如果文件 的 首 字节 为 utf 8 字节顺序 标志 bxefxbbxbf  文件 编码 也 声明为 utf 8 这是 microsoft  的 notepad  等 软件 支持 的形式
 编码 声明 指定 的 编码 名称 必须是 python  所 认 可 的 编码
 所有 词法分析 将 使用 此 编码 包括 语义 字符串、 注释 和 标识符
 显式 的 行 拼接
 隐式 的 行 拼接
 圆括号、 方括号 或 花括号 以 内 的 表达式 允许 分 成 多个 物理 行 无需 使用 反斜杠
 例如 monthnames  januari  februari  maart  these  are  the  april  mei  juni  dutch  names  juli  augustus  september  for  the  months  oktober  november  december  of  the  year  隐式 的 行 拼接 可以 带有 注释
 后续 行 的缩进 不 影响 程序 结构
 后续 行 也 允许 为 空白 行
 隐式 拼接 的 行 之间 不 会 有 newline  形 符
 隐式 拼接 的 行 也可以 出现于 三 引号 字符串 中 见 下 此情况下 这些 行 不允许 带有 注释
 空白 行
 缩进
 一个 逻辑 行 开头 处 的空白 空格符 和 制表符 被用来 计算 该 行 的缩进 等级 以 决定 语句 段落 的 组织 结构
 制表符 会 被 从左至右 替换为 一 至 八 个空格 这样 缩进 的空格 总 数 为 八 的 倍 数 这 是为了 与 unix  所用的 规则 一致
 首 个 非 空白字符 之前的 空格 总 数 将 确定 该 行 的缩进 层次
 一个 缩进 不 可 使用 反斜杠 进行 多 行 拼接 首 个反斜杠 之前的 空格 将 确定 缩进 层次
 在 一个 源文件 中如果 混合 使用 制表符 和 空格符 缩进 并 使得 确定 缩进 层次 需要 依赖于 制表符 对应的 空格 数量 设置 则 被视为 不 合 规则 此情况 将会引发 taberror
 跨平台 兼容性 注释 由 于 非 unix  平台上 文本 编辑器 本身 的 特性 在 一个 源文件 中 混合 使用 制表符 和 空格符 是 不 明 智 的
 另外 也 要注意 不同 平台 还 可能会 显式地 限制 最大 缩进 层级
 行 首 有 时 可能会 有 一个 进 纸 符 它 在 上述 缩进 层级 计算 中 会被忽略
 处于 行 首 空格 内 其他 位置 的 进 纸 符 的效果 未定义 例如 它 可能导致 空格 计数 重置 为零
 多个 连续 行 各 自 的缩进 层级 将会被 放入 一个 堆栈 用来 生成 indent  和 dedent  形 符 具体 说明 如 下
 在 读取 文件 的 第一行 之前 先 向 堆栈 推 入一个 零值 它 将不再 被 弹出
 被 推 入 栈 的 层级 数值 从 底 至 顶 持续 增加
 每个 逻辑 行 开头的 行 缩进 层级 将 与 栈 顶 行 比较
 如果 相同 则 不 做 处理
 如果 新 行 层级 较 高 则 会 被 推 入 栈 顶 并 生成一个 indent  形 符
 如果 新 行 层级 较 低 则 应当 是 栈 中 的 层级 数值 之一 栈 中 高 于 该 层级的 所有 数值 都 将 被 弹出 每 弹出 一 级 数值 生成一个 dedent  形 符
 在 文件末尾 栈 中 剩余 的 每个 大于 零 的 数值 生成一个 dedent  形 符
 这是一个 正确 但 令人 迷 惑 的 python  代码 缩进 示例 def  perml  compute  the  list  of  all  permutations  of  l  if  lenl 1 return  l  r  for  i  in  rangelenl  s  li  li 1 p  perms  for  x  in  p  r
appendlii 1 x  return  r  以下示例 显示了 各种 缩进 错误 def  perml  error  first  line  indented  for  i  in  rangelenl  error  not  indented  s  li  li 1 p  permli  li 1 error  unexpected  indent  for  x  in  p  r
appendlii 1 x  return  r  error  inconsistent  dedent  实际上 前 三个 错误 会 被 解析器 发 现 只有 最后一个 错误 是 由 词法分析 器 发 现 的 return  r  的缩进 无法 匹配 弹出 栈 的缩进 层级
 形 符 之间的 空白
 其他 形 符
 除了 newline  indent  和 dedent  还 存 在以下 类别 的 形 符 标识符 关键字 字面值 运算符 以及 分隔符
 空白字符 之前 讨论 过 的 行 终止 符 除外 不 属于 形 符 而 是 用来 分隔 形 符
 如果存在 二 义 性 将 从左至右 读取 尽可能 长 的 合 法 字符串 组成 一个 形 符
 标识符 和关键字
 标识符 或者 叫 做 名称 由 以 下 词法 定义 进行 描述
python  中 的 标识符 语法 是基于 unicode  标准 附 件 uax 31 并 加入 了 下文 所定义的 细 化 与 修改 更多细节 还 可 参见 pep 3131
 在 ascii  范围内 u 0001
u 007 f  可用于 标识符 的 字符 与 python 2
x  一致 大写 和 小写字母 a  至 z  下划线 以及 数字0 至9 但不 可以 数字 打头
0 引入了 ascii  范围 以外的 额外 字符 见 pep 3131
 这些字符 的 分 类 使用 包含于 unicodedata  模块中的 unicode  字符 数据库 版本
 标识符 的长度 没有 限制
 对 大小写 敏感
 identifier  xidstart  xidcontinue  idstart  all  characters  in  general  categories  lu  ll  lt  lm  lo  nl  the  underscore  and  characters  with  the  otheridstart  property  idcontinue  all  characters  in  idstart  plus  characters  in  the  categories  mn  mc  nd  pc  and  others  with  the  otheridcontinue  property  xidstart  all  characters  in  idstart  whose  nfkc  normalization  is  in  idstart  xidcontinue  xidcontinue  all  characters  in  idcontinue  whose  nfkc  normalization  is  in  idcontinue  上 文 所 用 unicode  类别 码 的含义 lu  大写字母 ll  小写字母 lt  词 首 大写字母 lm  修 饰 字母 lo  其他 字母 nl  字母数字 mn  非 空白 标识 mc  含 空白 标识 nd  十进制 数字 pc  连接 标 点 otheridstart  由 proplist
txt  定义 的 显式 字符 列表 用 于 支持 向后 兼容 otheridcontinue  同 上 所有 标识符 在 解析 时会被 转换为 规范 形式 nfkc  标识符 的 比较 都 是基于 nfkc
unicode 4
1 中所有 可用的 标识符 字符 列表可 参见 以 下 非 正式 html  文件 httpswww
 关键字
 保留 的 标识符 类
 某些 标识符 类 除了 关键字 具有 特殊 的含义
 这些 标识符 类 的 命名 模式 是 以 下划线 字符 打头 和 结尾 不会被 from  module  import  导入
 特殊 标识符 在交互式 解释器中 被用来 存放 最近 一次 求值 结果 它 保存在 builtins  模块 中
 当 不 处于 交 互模式 时 无 特殊 含义 也 没有 预定义
 参见 import  语句
 注解 作为 名称 常用于 连接 国际化 文本 请 参看 gettext  模块 文档 了解有 关 此 约定 的 详情
 系统 定义 的 名称 在 非 正式 场合 下 被 叫 做 dunder  名称
 这些 名称 是 由 解 释器 及其 实现 包括 标准库 定义 的
 现有 系统 定义 名称 相关的 讨论 请参见 特殊方法 名称 等 章节
 未来的 python  版本中 还 将 定义 更多 此 类 名称
 任 何 情况下 任何 不 遵循 文档 所 显式 指明 的 名称 使用 方式 都 可能导 致 无 警告 的 错误
 类 的 私有 名称
 这种 名称 在 类定义 中 使用 时 会 以 一种 混合 形式 重写 以避免 在 基类 及 派生类 的 私有 属性 之间 出现 名称 冲突
 参见 标识符 名称
 字面值
 字面值 用于表示 一些 内置类型 的常量
 字符串 和 字节串 字面值
 字符串字面值 拼接
 多个 相 邻 的 字符串或 字节串 字面值 以 空白符 分隔 所用的 引号 可以 彼 此 不同 其 含义 等同于 全部 拼接 为 一 体
 因此 hello  world  等同于 helloworld
 此 特性 可以 减少 反斜杠 的 使用 以 方便地 将 很长 的 字符串 分 成 多个 物理 行 甚至 每 部分 字符串 还 可 分别 加 注释 例如 re
compileazaz  letter  or  underscore  azaz 09 letter  digit  or  underscore  注意此 特性 是 在 句 法 层 面 定义 的 但是 在 编译时 实现
 在运行时 拼接 字符串 表达式 必须使用 运算符
 还要注意 字面值 拼接 时 每个 部分 可以使用 不同的 引号 风格 甚至 混合 使用 原始字符串 和 三 引号 字符串格式化 字符串字面值 也可 与 普通 字符串字面值 拼接
 格式化 字符串字面值
 数字 字面值
 数字 字面值 有 三种 类型 整型数、 浮点数 和 虚 数
 没有 专门 的 复数 字面值 复数 可 由 一个 实 数 加一个 虚 数 合 成
 注意 数字 字面值 并 不包含 正负 号1 这样的 负数 实际上是 由 单 目 运算符 和 字面值1 合 成 的
 整型数 字面值
 整型数 字面值 由 以 下 词法 定义 进行 描述 integer  decinteger  bininteger  octinteger  hexinteger  decinteger  nonzerodigit  digit 00 bininteger 0 b  b  bindigit  octinteger 0 o  o  octdigit  hexinteger 0 x  x  hexdigit  nonzerodigit 1
f  整型数 字面值 的长度 没有 限制 能 一 直 大 到 占 满 可 用 内存
 在 确定 数字 大小 时 字面值 中 的 下划线 会被忽略
 它们 可用来 将 数 码 分组 以 提高 可读性
 一个 下划线 可 放在 数 码 之间 也可 放在 基 数 说明符 例如0 x  之后
 注意 非零 的 十进制数 开头 不允许 有 额外的 零
 这 是为了 避免 与 python  在 版本3
0 之前 所使用的 c  风格 八进制 字面值 相 混 淆
 一些 整型数 字面值 的 示例 如 下721474836470 o 1770 b 1001101113792281625142643375935439503360 o 3770 xdeadbeef 1000000000000 b 11100101 在3
6 版更改 允许在 字面值 中 使用 下划线 进行 分组
 浮点数 字面值
 浮点数 字面值 由 以 下 词法 定义 进行 描述 floatnumber  pointfloat  exponentfloat  pointfloat  digitpart  fraction  digitpart 
 digitpart  exponent  e  e  digitpart  注意 整型数 部分 和 指 数 部分 在 解析 时 总是 以10 为基数
 例如077 e 010 是 合法的 且 表示 的 数值 与77 e 10 相同
 浮点数 字面值 允许 的范围 依赖于 具体实现
 对 于 整型数 字面值 支持 以 下划线 进行 分组
 一些 浮点数 字面值 的 示例 如 下3
141593 在3
6 版更改 允许在 字面值 中 使用 下划线 进行 分组
 虚 数字面值
 运算符
 以 下 形 符 属于 运算符
 分隔符
 以 下 形 符 在 语法 中 归 类 为 分隔符
 句 点 也可 出现于 浮点数 和 虚 数字面值 中
 连续 三个 句 点 有 表示一个 省略 符 的 特殊 含义
 以 上 列表 的 后 半 部分 为 增强赋值 操作符 在 词法 中 作为 分隔符 但也 起 到 运算 作 用
 以 下 可打印 ascii  字符 作为 其他 形 符 的 组成部分 时 具有 特殊 含义 或 是 对 词法分析 器 有 重要 意义 以 下 可打印 ascii  字符 不 在 python  词法 中 使用
 如果 出现于 字符串字面值 和 注释 之外 将 无 条件 地 引发错误 脚注1 httpswww
python  语言 参考
 本 参考 手册 描述了 python  的语法 和 核心 语义
 本 参考 是 简 洁 的 但 试 图 做 到 准确 和 完整
 非 必要的 内建 对象类型 和 内建 函数、 模块 的 语义 描述 在 python  标准库 中
 有关 该 语言 的 非 正式 介绍 请参阅 python  教程
 对 c  或 c  程序员 还 有两个 额外的 手册 扩展 和 嵌入 python  解释器 概述 了如何 编写 一个 python  扩展模块 pythonc  api  参考 手册 详细 介绍了 cc  中 可用的 接口
 概述1
 其他 实现1
 标注2
 词法分析2
 行 结构2
 其他 形 符2
 标识符 和关键字2
 字面值2
 运算符2
 分隔符3
 数据 模 型3
 对象、 值 与 类型3
 标准类型层级结构3
 特殊方法 名称3
 协程4
 执行模 型4
 程序 的 结构4
 命名 与 绑定4
 异常5
 导入系统5
 包5
 搜索5
 加载5
 基于 路径 的 查找器5
 替换 标准 导入系统5
 包 相对导入5
 有关 main  的 特殊 事项5
 开 放 问题 项5
 参考 文 献6
 表达式6
 算术 转换6
 原子6
 原型6
 await  表达式6
 幂 运算符6
 一 元 算术 和 位运算6
 二元 算术运算 符6
 移 位运算6
 二元 位运算6
 比较 运算6
 布尔运算6
 赋值 表达式6
 条件 表达式6
 lambda  表达式6
 表达式列表6
 求值 顺序6
 运算符 优先级7
 简单 语句7
 表达式 语句7
 赋值语句7
 assert  语句7
 pass  语句7
 del  语句7
 return  语句7
 yield  语句7
 raise  语句7
 break  语句7
 continue  语句7
 import  语句7
 global  语句7
 nonlocal  语句8
 复合语句8
 if  语句8
 while  语句8
 for  语句8
 try  语句8
 with  语句8
 函数定义8
 类定义8
 协程9
 最高层级 组件9
 完整的 python  程序9
 文件 输入9
 交互式 输入9
 表达式 输入10
 完整的 语法 规范
 数据 模 型
 对象、 值 与 类型
 标准类型层级结构
 特殊方法 名称
 一个 类 可以通过 定义 具有 特殊 名称 的 方法 来实现 由 特殊 语法 所引发的 特定 操作 例如 算术运算 或 下 标 与 切片
 这是 python  实现 操作符 重载 的方式 允许 每个 类 自 行 定义 基于 操作符 的特定 行为
 例如 如果一个 类定义了 名为 getitem  的 方法 并且 x  为 该类的 一个实例 则 xi  基本 就 等同于 typex
 除非 有 说明 例外 情况 在没有 定义 适当 方法 的情况下 尝试 执行 一种 操作 将 引发一个 异常 通常 为 attributeerror  或 typeerror
 将 一个 特殊方法 设 为 none  表示 对应的 操作 不可用
 例如 如果一个 类 将 iter  设 为 none  则 该 类 就 是不可 迭代 的因此 对 其 实例 调用 iter  将 引发一个 typeerror  而不会 回退 至 getitem
2 在 实现 模拟 任何 内置类型 的 类 时 很重要 的 一点 是 模拟 的 实现 程度 对 于 被 模拟 对象 来说 应当 是 有意义 的
 例如 提取 单个 元素 的 操作 对 于 某些 序列 来说 是 适 宜 的 但 提取 切片 可能 就 没 有意义
 这种情况 的 一个实例 是 w 3 c  的 文档 对象 模 型 中 的 nodelist  接口
 基本 定制
 自定义 属性 访问
 自定义类 创建
 自定义 实例 及 子类 检查
 以下方法 被用来 重载 isinstance  和 issubclass  内置函数 的 默认行为
 特别地 元 类 abc
abcmeta  实现了 这些方法 以便 允许 将 抽象基类 abc  作为 虚拟 基类 添加到 任何 类 或 类型 包括 内置类型 包括 其他 abc  之 中
instancecheckself  instance  如果 instance  应 被视为 class  的 一个 直接 或 间接 实例 则返回真值
 如果定义了 此方法 则 会被调用 以 实现 isinstanceinstance  class 
subclasscheckself  subclass  return  true  如果 subclass  应 被视为 class  的 一个 直接 或 间接 子 类 则返回真值
 如果定义了 此方法 则 会被调用 以 实现 issubclasssubclass  class
 请注意 这些方法 的 查找 是基于 类 的 类型 元 类
 它们不 能 作为 类 方法 在 实际 的 类 中 被定义
 这 与 基于 实例 被调用 的 特殊方法 的 查找 是 一致的 只有 在此情况下 实例 本身 被当作 是 类
 参见 pep 3119 引入 抽象基类 新增 功能 描述 通过 instancecheck  和 subclasscheck  来 定制 isinstance  和 issubclass  行为 加入 此功能 的 动 机 是 出 于 向 该 语言 添加 抽象基类 的内容 参见 abc  模块
 模拟 泛型类型
 通过 定义一个 特殊 方法可以 实现 由 pep 484 所 规 定 的 泛型类 语法 例如 listintclassmethod  object
classgetitemcls  key  按照 key  参数指定 的 类型 返回 一个 表示 泛型类 的 专门 化 对象
 此方法 的 查找 会 基于 对象 自身 并且 当 定义 于 类 体 内部 时 此方法将 隐式地 成为 类 方法
 请注意此 机制 主要 是 被 保留 用 于 静态类型 提示 不 鼓 励 在其他 场合 使用
 参见 pep 560 对 typing  模块 和 泛型类型 的 核心 支持
 模拟 可调用对象
 此方法会 在 实例 作为一个 函数 被调用 时被调用 如果定义了 此方法 则 xarg 1 arg 2
 就 大致 可以被 改 写 为 typex
callx  arg 1
 模拟 容器 类型
 可以定义 下列方法 来实现 容器对象
 容器 通常 属于 序列 如 列表或 元组或 映射 如 字典 但也 存 在其他 形式 的容器
 前 几个 方法 集 被用于 模拟 序列或 是 模拟 映射 两者 的 不同之处在于 序列 允许 的 键 应 为整数 k  且0 k  n  其 中 n  是 序列或 定义 指定 区 间 的 项 的 切片 对象 的长度
 此外还 建议 让 映射 提供 keys  values  items  get  clearsetdefault  pop  popitem  copy  以及 update  等 方法 它们的 行为 应 与 python  标准 字典 对象 的相应 方法 类似
 此外 collections
abc  模块提供了一个 mutablemapping  抽象基类 以便 根据 由 getitem  setitem  delitem  和 keys  组成的 基本 集 来创建 所需的 方法
 可变序列 还 应 像 python  标准 列表对象 那样 提供 append  count  index  extend  insert  popremove  reverse  和 sort  等 方法
 最后 序列类型 还 应 通过 定义 下文 描述 的 add  radd  iadd  mulrmul  和 imul  等 方法 来实现 加 法 指 拼接 和 乘法 指 重复 它们不 应 定义 其他 数值 运算符
 此外还 建议 映射 和 序列 都 实现 contains  方法 以允许 高效 地 使用 in  运算符 对 于 映射 in  应该 搜索 映射 的 键 对 于 序列 则 应 搜索 其中的 值
 另外 还 建议 映射 和 序列 都 实现 iter  方法 以允许 高效 地 迭代 容器 中 的 条目 对 于 映射 iter  应当 迭代对象 的 键 对 于 序列 则 应当 迭代 其中的 值
lenself  调用此方法 以 实现 内置函数 len
 应该 返回 对象 的长度 以 一个0 的 整数表示
 此外 如果一个 对象 未定义 bool  方法 而 其 len  方法 返回值 为零则 在 布尔运算 中 会被视为 假值
 cpython  implementation  detail  在 cpython  中 要求 长度 最大 为 sys
 如果 长度 大于 sys
maxsize  则 某些 特性 例如 len  可能 会引发 overflowerror
 要 通过 真值 检测 来 防止 引发 overflowerror  对象 必须 定义 bool  方法
lengthhintself  调用此方法 以 实现 operator
 应该 返回 对象 长度 的 估 计 值可能 大于 或 小于 实际 长度
 此 长度 应 为 一个0 的 整数
 返回 值 也可以 为 notimplemented  这 会被视 作 与 lengthhint  方法 完 全 不存在 时 一样 处理
 此方法 纯 粹 是为了 优化 性能 并 不 要求 正确 无 误
3
4 新版功能
 注解 切片 是通过 下 述 三个 专门 方法 完成 的
 以 下 形式 的 调用 a 12 b  会 为 转 写 为 aslice 12 none  b  其他 形式 以 此类推
 略 去 的 切片 项 总是 以 none  补全
getitemself  key  调用此方法 以 实现 selfkey  的 求值
 对 于 序列类型 接受 的 键 应 为整数 和 切片 对象
 请注意 负数 索引 如果 类 想要 模拟 序列类型 的 特殊 解读 是 取 决于 getitem  方法
 如果 key  的 类型 不正确 则会引发 typeerror  异常 如果为 序列 索引 集 范围 以外的 值 在 进行 任何 负数 索引 的 特殊 解读 之后 则 应 引发 indexerror  异常
 对 于 映射 类型 如果 key  找不到 不 在 容器 中 则 应 引发 keyerror  异常
 注解 for  循环 在 有 不 合 法 索引 时 会 期 待 捕获 indexerror  以便 正确地 检测 到 序列 的 结束
setitemself  key  value  调用此方法 以 实现 向 selfkey  赋值
 注意 事项 与 getitem  相 同
 为 对象 实现 此方法 应该 仅限 于 需要 映射 允许 基于 键 修改 值 或 添加 键 或 是 序列 允许 元素 被替换 时
 不 正确的 key  值 所 引发的异常 应 与 getitem  方法 的 情况 相同
delitemself  key  调用此方法 以 实现 selfkey  的 删除
 注意 事项 与 getitem  相 同
 为 对象 实现 此方法 应该 权限 于 需要 映射 允许 移除 键 或 是 序列 允许 移除 元素 时
 不 正确的 key  值 所 引发的异常 应 与 getitem  方法 的 情 况 相同
missingself  key  此方法 由 dict
getitem  在 找不到 字典中 的 键 时 调用 以 实现 dict  子类 的 selfkey
iterself  此方法 在 需要 为 容器 创建 迭代器 时被调用
 此方法 应该 返回一个新的 迭代器 对象 它 能够 逐 个迭代 容器 中的所有 对象
 对 于 映射 它应该 逐 个迭代 容器 中 的 键
 迭代器对象 也 需要 实现 此方法 它们 需要 返回 对象 自身
 有关 迭代器对象 的 详情 请 参看 迭代器 类型 一节
reversedself  此方法 如果存在 会 被 reversed  内置函数 调用 以 实现 逆 向 迭代
 它 应当 返回一个新的 以 逆 序 逐 个迭代 容器 内 所有 对象 的 迭代器对象
 如果未 提供 reversed  方法 则 reversed  内置函数 将 回退 到 使用 序列 协议 len  和 getitem
 支持 序列 协议 的 对象 应 当 仅在 能够 提供 比 reversed  所提供的 实现 更 高效 的 实现 时才 提供 reversed  方法
 成员检测 运算符 in  和 not  in  通常 以 对 容器 进行 逐 个迭代 的方式来 实现
 不 过 容器对象 可以提供 以 下 特殊方法 并 采用 更 有 效率 的 实现 这样 也不 要求 对象 必须为 可迭代对象
containsself  item  调用此方法 以 实现 成员检测 运算符
 如果 item  是 self  的成员 则 应 返 回真 否则返回 假
 对 于 映射 类型 此 检测 应 基于 映射 的 键 而不是 值 或者 键 值 对
 对 于 未定义 contains  的 对象 成员检测 将 首先 尝试 通过 iter  进行迭代 然后再 使用 getitem  的 旧式 序列 迭代 协 议 参看 语言 参考 中 的相应 部分
 模拟 数字类型
with  语句 上下文管理器
 特殊方法 查找
 协程
 可等待对象
awaitable  对象 主要 实现了 await  方法
 从 async  def  函数返回 的 协程对象 即 属于 可等待对象
 注解 从 带有 types
coroutine  或 asyncio
coroutine  装饰器 的 生成器 返 回 的 generator  iterator  对象 也 属于 可等待对象 但它们 并 未 实现 await
awaitself  必须返回 一个 iterator
 应当 被用来 实现 awaitable  对象
 例如 asyncio
future  实现了 此方法 以 与 await  表达式 相 兼容
3
5 新版功能
 参见 pep 492 了解有关 可等待对象 的详细信息
 协程对象
 协程对象 属于 awaitable  对象
 协程 的 执行 可通过 调用 await  并 迭代 其 结果 来 控制
 当 协程 结束 执行 并返回 时 迭代器 会引发 stopiteration  该异常 的 value  属性 将 存放 返回值
 如果 协程 引发了 异常 它会被 迭代器 所 传播
 协程 不应 直接 引发 未 处理 的 stopiteration  异常
 协程 也 具有 下 面列出的 方法 它们 类似于 生成器 的对应 方法 参见 生成器 迭代器 的 方法
 但是 与 生成器 不同 协程 并 不 直接 支持 迭代
 在3
2 版更改 等待 一个协程 超过 一次 将引发 runtimeerror
sendvalue  开始 或 恢复 协程 的 执行
 如果 value  为 none  则 这相当于 前 往 await  所 返回 迭代器 的下一 项
 如果 value  不 为 none  此方 法 将 委托给 导致 协程 挂起 的 迭代器 的 send  方法
 其 结果 返回值 stopiteration  或 是 其他 异常 将 与 上述 对 await  返回值 进行迭 代 的结果 相同
throwtype  value  traceback  在 协程 内 引发 指定 的 异常
 此方法将 委托给 导致 协程 挂起 的 迭代器 的 throw  方法 如果存在 该方法
 否则 的话 异常 会 在 挂起 点 被引发
 其 结果 返回值 stopiteration  或 是 其他 异常 将 与 上述 对 await  返回值 进行迭代 的结果 相同
 如果 异常 未 在 协程 内 被捕获 则 将 回 传给 调用者
close  此方法会 使得 协程 清理 自身 并 退出
 如果 协程 被 挂起 此方法会 先 委托给 导 致 协程 挂起 的 迭代器 的 close  方法 如果存在 该方法
 然后 它会在 挂 起 点 引发 generatorexit  使得 协程 立即 清理 自身
 最后 协程 会 被 标记 为 已 结束 执行 即使 它 根 本 未被 启动
 当 协程对象 将 要 被 销 毁 时 会 使用 以 上 处理 过程 来 自动 关闭
 异步 迭代器
 异步 迭代器 可以在 其 anext  方法 中 调用 异步 代码
 异步 迭代器 可 在 async  for  语句中 使用
aiterself  必须返回 一个 异步 迭代器 对象
anextself  必须返回 一个 可迭代对象 输出 迭代器 的下一 结果值
 当 迭代 结束 时 应该 引发 stopasynciteration  错误
 异步 可迭代对象 的 一个 示例 class  reader  async  def  readlineself 
readline  if  val  b  raise  stopasynciteration  return  val 3
5 新版功能
 在3
7 版更改 在 python 3
7 之前 aiter  可以 返回 一个 可迭代对象 并 解析为 异步 迭代器
 从 python 3
7 开始 aiter  必须 返回 一个 异步 迭代器对象
 返回 任何其他 对象 都 将导致 typeerror  错误
 异步 上下文管理器
 异步 上下文管理器 是 上下文管理器 的一种 它 能够 在 其 aenter  和 aexit  方法 中 暂 停 执行
 异步 上下文管理器 可 在 async  with  语句中 使用
aenterself  在 语义 上 类似于 enter  仅 有 的区别 是 它必须 返回 一个 可等待对 象
aexitself  exctype  excvalue  traceback  在 语义 上 类似于 exit  仅 有 的区别 是 它必须 返回 一个 可等待对象
 异步 上下文管理器 类 的 一个 示例 class  asynccontextmanager  async  def  aenterself  await  logentering  context  async  def  aexitself  exctype  exc  tb  await  logexiting  context 3
5 新版功能
 脚注1 在某些 情况下 有可能 基于 可 控 的 条件 改变 一个 对象的类型
 但 这通常 不 是 个 好 主 意 因为 如果 处理 不 当 会导致 一些 非常 怪 异 的 行为
2 hash  iter  reversed  以及 contains  方法 对 此 有特殊 处理 其他方法 仍 会引发 typeerror  但 可能 依 靠 none  属于 不 可调用对象 的 行为 来 做 到 这一点
3 这里 的 不支持 是 指 该 类 无 此方法 或 方法 返回 notimplemented
 如果 你想 强制 回退 到 右 操作数的 反 射 方法 请 不 要 设置 方法 为 none — 那 会 造 成 显式地 阻塞 此 种 回退 的 相反 效果
4 对 于 相同类型 的 操作 数如果 非 反 射 方法 例如 add  失败 则 会 认为 整个 运算 都 不 被 支持 这 就是 反 射 方法 未 被调用 的原因
 执行模 型
 程序 的 结构
python  程序 是 由 代码块 构成的
 代码块 是 被 作为一个 单元 来执行 的 一段 python  程序 文本
 以 下 几个 都 属于 代码块 模块、 函数体 和 类定义
 交互式 输入 的 每条 命令 都 是 代码块
 一个 脚本 文件 作为 标准输入 发送 给 解释器 或 是作为 命令行参数 发送 给 解释器 的 文件 也是 代码块
 一条 脚本 命令 通过 c  选项 在 解释器 命令行 中 指定 的 命令 也是 代码块
 通过 在命令行中 使用 m  参数 作为 最高层级 脚本 即 main  模块 运行 的 模块 也是 代码块
 传递给 内置函数 eval  和 exec  的 字符串参数 也是 代码块
 代码块 在 执行 帧 中 被执行
 一个 帧 会 包含 某些 管理 信息 用 于 调试 并 决定 代码块 执行 完成后 应 前 往 何处 以及 如何 继续执行
 命名 与 绑定
 名称 的 绑定
 名称 用于指 代 对象
 名称 是通过 名称 绑定 操作 来 引入 的
 以 下 构造 会 绑定 名称 传给 函数 的 正式 形参 import  语句 类 与 函数定义 这 会 在 定义 的代码块 中 绑定 类 或 函数 名称 以及 发生 以 标识符 为 目标 的 赋值 for  循环 的开头 或 with  语句 和 except  子句 的 as  之后
import  语句 的 from 
 import  形式 会 绑定 在 被导入 模块中定义的 所有 名称 那些 以 下划线 开头的 除外
 这种 形式 仅在 模块层级 上 被使用
del  语句 的 目标 也 被视 作 一种 绑定 虽然 其 实际 语义 为 解 除 名称 绑定
 每条 赋值 或 导入 语句 均 发生 于 类 或 函数 内部 定义 的代码块 中 或 是 发生 于 模块层级 即 最高层级 的代码块
 如果 名称 绑定 在 一个 代码块 中 则 为 该 代码块的 局部变量 除非 声明为 nonlocal  或 global
 如果 名称 绑定 在 模块层级 则 为 全局变量
 模块 代码块的 变量 既 为 局部变量 又 为 全局变量
 如果 变量 在 一个 代码块 中 被使用 但不是 在 其 中定义 则 为 自由 变量
 每个 在 程序 文本 中出现的 名称 是 指 由 以 下 名称 解析 规则 所 建立 的 对 该名称 的 绑定
 名称 的 解析
 内置 命名空间 和 受限 的 执行
cpython  implementation  detail  用户 不应该 接 触 builtins  严格 说 来 它 属于 实现细节
 用户 如果要 重载 内置 命名空间 中的值 则 应该 importbuiltins  并 相应地 修改 该 模块中的 属性
 与 一个 代码块的 执行 相关联 的内置 命名空间 实际上是 通过 在 其 全局 命名空间中 搜索 名称 builtins  来 找到 的 这 应该是 一个字典 或 一个 模块 在 后 一 种情况下 会 使用 该模块 的字典
 默认情况下 当 在 main  模块 中 时 builtins  就是 内置模块 builtins  当 在 任何其他 模块 中 时 builtins  则 是 builtins  模块 自身 的字典 的一个别名
 与 动态 特性 的 交互
 自由 变量 的 名称 解析 发生 于 运行时 而不是 编译时
 这意味着 以下代码 将 打印出42 i 10 def  f  printi  i 42 feval  和 exec  函数 没有 对 完整 环境 的 访问 权限 来 解析 名称
 名称 可以在 调用者 的局部 和 全局 命名空间中 被解析
 自由 变量 的 解析 不是在 最近 包含 命名空间中 而 是 在 全局 命名空间中
1 exec  和 eval  函数 有 可选参数 用来 重载 全局 和 局部 命名空间
 如果 只 指定一个 命名空间 则 它 会 同时 作用于 两者
 异常
 异常 是 中断 代码块的 正常 控制 流程 以便 处理 错误 或其他 异常 条件 的 一 种方式
 异常 会 在 错误 被 检测到 的 位置 引发 它可以 被 当前 包 围 代码块 或 是 任何 直接 或 间接 发起调用 发生错误 的代码块 的其他 代码块 所 处理
python  解析器 会 在 检测到 运行时 错误 例如 零 作为 被 除 数 的时候 引发异常
python  程序 也可以通过 raise  语句 显式地 引发异常
 异常处理 是通过 try 
 except  语句 来指定 的
 该 语句 的 finally  子句 可被用来 指定 清理 代码 它并不 处理 异常 而 是 无论 之前的 代码 是否 发生异常 都 会被执行
python  的 错误处理 采用 的 是 终止 模 型 异常处理器 可以 找 出 发生了 什么 问题 并 在 外层 继续执行 但它 不 能 修复 错误 的 根 源 并 重 试 失败 的 操作 除非 通过 从 顶 层 重新 进入 出错 的 代码 片段
 当 一个异常 完全 未被 处理 时 解释器 会 终止 程序 的 执行 或者 返回 交互模式 的 主 循环
 无论是 哪 种情况 它 都 会打印 栈回溯 信息 除非 是 当 异常 为 systemexit  的时候
 异常 是通过 类实例 来 标识 的
 except  子句 会 依 据 实例 的 类 来 选择 它必须 引用 实例 的 类 或 是 其 所属 的 基类
 实例 可通过 处理器 被 接收 并 可 携 带 有关 异常 条件 的附加 信息
 注解 异常 消息 不 是 python  api  的 组成部分
 其内容 可能在 python  升级 到 新 版 本 时 不 经 警告 地 发生改变 不应该 被 需要 在 多 版本 解释器中 运行 的 代码 所 依赖
 另请参 看 try  语句 小节 中 对 try  语句 的描述 以及 raise  语句 小节 中 对 raise  语句 的描述
 脚注1 出现 这样的 限制 是由于 通过 这些 操作 执行 的 代码 在 模块 被 编译 的时候 并 不 可 用
 完整的 语法 规范
 导入系统
 一个 module  内 的 python  代码 通过 importing  操作 就 能够 访问 另一个 模块 内 的 代码
 import  语句 是 发起调用 导入机制 的 最常 用方式 但不是 唯一的 方式
 importlib
importmodule  以及 内置的 import  等 函数 也可以 被用来 发起调用 导入机制
import  语句 结合 了 两个操作 它 先 搜索 指定 名称的模块 然后 将 搜索 结果 绑定到 当前 作用域中 的 名称
 import  语句 的 搜索 操作 定义为 对 import  函数 的 调用 并 带有 适当的 参数
 import  的返回值 会 被用于 执行 import  语句 的 名称 绑定 操作
 请参阅 import  语句 了解 名称 绑定 操作 的 更多细节
 对 import  的 直接调用 将 仅 执行 模块 搜索 以及 在 找到 时 的 模块 创建 操作
 不 过 也可能 产生 某些 副作 用 例如 导入 父 包 和 更新 各种 缓存 包括 sys
modules  只有 import  语句 会 执行 名称 绑定 操作
 当 import  语句 被执行 时 标准 的内置 import  函数 会被调用
 其他 发起调用 导入系统 的机制 例如 importlib
importmodule  可能会 选择 绕 过 import  并 使用它们 自己 的解决方案 来实现 导入机制
 当 一个 模块 首次 被导入 时 python  会 搜索 该模块 如果 找到 就 创建一个 module  对象1 并 初始化 它
 如果指定 名称的模块 未找到 则会引发 modulenotfounderror
 当 发起调用 导入机制 时 python  会 实现 多种 策略 来 搜索 指定 名称的模块
 这些 策略 可以通过 使用 使用 下文 所描述的 多种 钩子 来 加 以 修改 和 扩展
 在3
3 版更改 导入系统 已被 更新 以 完全 实现 pep 302 中 的 第二 阶 段 要求
 不会再 有任何 隐式 的 导入机制—— 整个 导入系统 都 通过 sys
metapath  暴 露 出来
 此外 对 原生 命名空间包 的 支持 也 已被 实现 参见 pep 420
importlib
importlib  模块提供了一个 丰 富 的 api  用来 与 导入系统 进行 交互
 例如 importlib
importmodule  提供了 相比 内置的 import  更 推荐、 更简单 的 api  用来 发起调用 导入机制
 更多细节 请 参看 importlib  库 文档
 包
python  只 有一种 模块 对象类型 所有 模块 都 属于 该 类型 无论 模块 是 用 python 、 c  还是 别 的 语言 实现
 为 了 帮助 组织 模块 并 提供 名称 层次结构 python  还 引入了 包 的概念
 你可以 把 包 看 成 是 文件系统 中 的 目录 并 把 模块 看 成 是 目录 中的文件 但 请 不 要 对 这个类 似 做 过 于 字面 的 理解 因为 包 和 模块 不 是 必须 来自 于 文件系统
 为 了 方便 理解 本文档 我们将 继续 使用 这种 目录 和 文件 的 类 比
 与 文件系统 一样 包 通过 层次结构 进行 组织 在 包 之内 除了 一般 的 模块 还可以 有 子 包
 要注意 的 一个 重 点 概念 是所有 包 都 是 模块 但 并非 所有 模块 都 是 包
 或者 换句话说 包 只 是一种 特殊 的 模块
 特别地 任何 具有 path  属性 的 模块 都会 被当作 是 包
 所有 模块 都 有自己 的名字
 子 包 名 与 其 父 包 名 以 点 号分隔 与 python  的 标准 属性 访问 语法 致
 例如 你可能 看到 一个名为 sys  的 模块 以及 一个名为 email  的 包 这 个 包 中 又 有 一个名为 email
mime  的 子 包 和 该 子 包 中 的 名为 email
text  的 子 包
 常规 包
python  定义了 两 种类型的 包 常规 包 和 命名空间包
 常规 包 是 传统的 包 类型 它们在 python 3
2 及 之前 就 已存在
 常规 包 通常 以 一个包含 init
py  文件 的 目录 形式 实现
 当 一个 常规 包 被导入 时这个 init
py  文件 会 隐式地 被执行 它 所定义的 对象会被 绑定到 该 包 命名空间中 的 名称
init
py  文件 可以包含 与 任何其他 模块 中 所 包含的 python  代码 相似的 代码 python  将 在 模块 被导入 时 为 其 添加 额外的 属性
 例如以下 文件系统 布局 定义了一个 最高层级 的 parent  包 和 三个 子 包 parent  init
py  导入 parent
one  将 隐式地 执行 parentinit
py  和 parentoneinit
 后续 导入 parent
two  或 parent
three  则 将 分别 执行 parenttwoinit
py  和 parentthreeinit
py
 命名空间包
 命名空间包 是 由 多个 部分 构成的 每个 部分 为 父 包 增加 一个 子 包
 各个 部分 可能 处于 文件系统 的不同 位置
 部分 也可能 处于 zip  文件 中、 网络 上 或者 python  在 导入 期间 可以 搜索 的其他 地方
 命名空间包 并 不一定 会直接 对 应 到 文件系统 中 的 对象 它们 有可能 是 无 实体 表示 的 虚拟 模块
 命名空间包 的 path  属性 不 使用 普通的 列表
 而 是 使用 定制 的可迭代 类型 如果其 父 包 的 路径 或者 最高层级 包 的 sys
path  发生改变 这种 对象 会 在 该 包 内 的下一 次 导入 尝试 时 自动 执行 新的对 包 部分 的 搜索
 命名空间包 没有 parentinit
py  文件
 实际上 在 导入 搜索 期间 可能 找到 多个 parent  目录 每个 都 由 不同的 部分 所提供
 因此 parentone  的 物理 位置 不一定 与 parenttwo  相 邻
 在这种情况下 python  将 为 顶 级 的 parent  包 创建一个 命名空间包 无论是 它 本身 还是 它 的某个 子 包 被导入
 另请参阅 pep 420 了解 对 命名空间包 的 规格 描述
 搜索
 模块 缓存
 在 导入 搜索 期间 首先 会 被 检查 的地方 是 sys
 这 个映射 起 到 缓存 之前 导入 的 所有 模块 的作用 包括 其 中 间 路径
 因此如果 之前 导入 过 foo
baz  则 sys
modules  将 包含 foo  foo
bar  和 foo
baz  条目
 每个键 的 值 就是 相应的 模块 对象
 在 导入 期间 会 在 sys
modules  查找 模块名称 如 存在则 其 关联的 值 就是 需要 导入 的 模块 导入 过程 完成
 然而 如果 值 为 none  则会引发 modulenotfounderror
 如果 找不到 指定 模块名称 python  将 继续 搜索 该模块
modules  是 可 写 的
 删除 键 可能不 会破坏 关联的 模块 因为 其他模块 可能会 保留 对 它 的 引用 但它 会 使 命名 模块 的 缓存 条目 无效 导致 python  在 下 次 导入时 重新 搜索 命名 模块
 键 也可以 赋值为 none  强制 下 一次 导入模块 导致 modulenotfounderror 
 但是 要 小 心 因为 如果你 还 保 有 对 某个 模块 对象的引用 同时 停 用 其 在 sys
modules  中 的 缓存 条目 然后 又 再次 导入 该 名称的模块 则 前 后 两个 模块 对象 将 不 是 同 一个
 相反 地 importlib
reload  将 重 用 同 一个 模块 对象 并 简单地 通过 重新 运行 模块 的 代码 来 重新 初始化 模块内容
 查找器 和 加载器
 如果指定 名称的模块 在 sys
modules  找不到 则 将 发起调用 python  的 导入 协议 以 查找 和 加载 该模块
 此 协议 由 两个 概念 性 模块 构成 即 查找器 和 加载器
 查找器 的 任务 是 确定 是否 能 使用 其 所 知 的 策略 找到 该 名称的模块
 同时 实现 这两种 接口 的 对象 称为 导入 器—— 它们在 确定 能 加载 所需的 模块 时 会返回 其 自身
python  包含了 多个 默认 查找器 和 导入 器
 第一个 知道如何 定位 内置模块 第二个 知道如何 定位 冻结 模块
 第三个 默认 查找器 会 在 import  path  中搜索 模块
 import  path  是一个 由 文件 系统路径 或 zip  文件 组成的 位置 列表
 它 还可以 扩展 为 搜索 任意 可 定位 资源 例如 由 url  指定 的 资源
 导入机制 是 可扩展 的 因此可以 加入 新 的 查找器 以 扩展模块 搜索 的范围 和 作用域
 查找器 并 不 真正 加载 模块
 如果它们 能 找到 指定 名称的模块 会返回一个 模块 规格说明 这是 对 模块 导入 相关信息 的 封装 供 后续 导入机制 用于在 加载 模块 时 使用
 以 下 各 节 描述了 有关 查找器 和 加载器 协议 的 更多细节 包括 你应该 如何 创建 并 注册 新 的 此 类对象 来 扩展 导入机制
 在3
4 版更改 在 之前的 python  版本中 查找器 会直接 返回 加载器 现 在 它们 则返回 模块 规格说明 其 中 包含 加载器
 加载器 仍然 在 导入 期间 被使用 但 负 担 的 任务 有 所 减少
 导入 钩子
 导入机制 被设计为 可扩展 其中的 基本 机制 是 导入 钩子
 导入 钩子 有两种 类型 元 钩子 和 导入 路径 钩子
 元 钩子 在 导入 过程 开始 时被调用 此 时 任何其他 导入 过程 尚未 发生 但 sys
modules  缓存 查找 除外
 这允许 元 钩子 重载 sys
path  过程、 冻结 模块 甚至 内置模块
 元 钩子 的 注册 是通过 向 sys
metapath  添加新 的 查找器 对象 具体 如下所 述
 导入 路径 钩子 是作为 sys
path  或 package
path  过程 的一部分 在 遇到 它们所 关联的 路径 项 的时候 被调用
 导入 路径 钩子 的 注册 是通过 向 sys
pathhooks  添加新 的可调用对象 具体 如下所 述
 元 路径
 加载
 当 一个 模块 说明 被 找到 时 导入机制 将 在 加载 该模块 时 使用 它 及其 所 包含的 加载器
 下面是 导入 的 加载 部分 所 发生 过程 的 简 要 说明 module  none  if  spec
name  请注意 以 下 细节 如果在 sys
modules  中 存 在 指定 名称的模块 对象 导入 操作 会 已经 将 其 返回
 在 加载器 执行 模块 代码 之前 该模块 将 存在于 sys
modules  中
 这 一 点 很 关键 因为 该模块 代码 可能 直接 或 间接 地 导入 其 自身 预 先 将 其 添加到 sys
modules  可 防止 在 最 坏 情况下 的 无限 递归 和 最好 情况下 的 多 次 加载
 如果 加载 失败 则 该模块 只 限 加载 失败 的 模块 将 从 sys
modules  中移除
 任何 已存在 于 sys
modules  缓存 的 模块 以 及 任何 作为 附带 影响 被 成功 加载 的 模块 仍 会保留 在 缓存 中
 这 与 重新 加载 不同 后者 会把 即使 加载 失败 的 模块 也 保留 在 sys
modules  中
 在 模块 创建 完成 但 还 未 执行 之前 导入机制 会 设置 导入 相关 模块属性 在 上面的 示例 伪 代码中 为 initmoduleattrs  详情参见 后续 部分
 模块 执行 是 加载 的 关键 时 刻 在 此 期间 将 填充 模块 的 命名空间
 执行 会 完 全 委托给 加载器 由 加载器 决定 要 填充 的内容 和 方式
 在 加载 过程中 创建 并 传递给 execmodule  的 模块 并 不一定 就是 在 导入 结 束 时返回 的 模块2
 在3
4 版更改 导入系统 已经 接 管 了 加载器 建立 样 板 的 责 任
 这些 在 以 前 是 由 importlib
loadmodule  方法 来执行 的
 加载器
 模块 加载器 提供 关键 的 加载 功能 模块 执行
 导入机制 调用 importlib
execmodule  方法 并 传入一个 参数 来执行 模块 对象
 从 execmodule  返回 的 任何 值 都 将被忽略
 加载器 必须 满足 下列 要求 如果模块 是一个 python  模块 而非 内置模块 或 动态 加载 的 扩展 加载 器 应该 在 模块 的 全局 命名空间 module
dict  中 执行 模块 的 代码
 如果 加载器 无法 执行 指定 模块 它应该 引发 importerror  不 过 在 execmodule  期间 引发 的 任何其他 异常 也会 被传播
 在 许多 情况下 查找器 和 加载器 可以是 同一 对象 在此情况下 findspec  方法 将返回一个 规格说明 其 中 加载器 会 被设为 self
 模块 加载器 可以选择 通过 实现 createmodule  方法 在 加载 期间 创建 模块 对象
 它接受一个 参数 即 模块 规格说明 并返回 新 的 模块 对象 供 加载 期间 使用
 createmodule  不需要 在 模块 对象 上 设置 任何 属性
 如果模块 返回 none  导入机制 将 自 行 创建新 模块
3
4 新版功能 加载器 的 createmodule  方法
 在3
4 版更改 loadmodule  方法 被 execmodule  所 替代 导入机制 会 对 加载 的 所有 样 板 责 任 作 出 假定
 为 了 与 现有的 加载器 兼容 导入机制 会 使用 导入 器 的 loadmodule  方法 如果它 存 在 且 导入 器 也 未 实现 execmodule
 但是 loadmodule  现 已弃用 加载器 应该 转 而 实现 execmodule
 除了 执行 模块 之外 loadmodule  方法 必须 实现 上 文 描述 的 所有 样 板 加载 功能
 所有 相同 的 限制 仍然 适用 并 带 有一些 附加 规 定 如果 sys
modules  中 存 在 指定 名称的模块 对象 加载器 必须使用 已存在 的 模块
 否则 importlib
reload  将 无法 正确 工作
 如果该 名 称 模块 不存在 于 sys
modules  中 加载器 必须 创建一个新的 模块 对象 并 将 其 加入 sys
 在 加载器 执行 模块 代码 之前 模块 必须 存在于 sys
modules  之 中 以防止 无限 递归 或 多次 加载
 如果 加载 失败 加载器 必须 移除 任何 它 已 加入 到 sys
modules  中 的 模块 但 它必须 仅限 移除 加载 失败 的 模块 且 所 移除 的 模块 应 为 加载器 自身 显式 加载 的
 在3
5 版更改 当 execmodule  已 定义 但 createmodule  未定义 时 将引发 deprecationwarning
 在3
6 版更改 当 execmodule  已 定义 但 createmodule  未定义 时 将引发 importerror
 子模块
 模块 规格说明
 导入 相关的 模块属性
modulepath
 模块 的 repr
 默认情况下 全部 模块 都 具有 一个 可用的 repr  但是 你可以 依 据 上述 的 属性 设置 在 模块 的 规格说明 中 更 为 显式地 控制 模块 对象 的 repr
 如果模块 具有 spec  spec  导入机制 将 尝试 用 它 来 生成一个 repr
 如果 生成 失败 或 找不到 spec  导入系统 将 使用 模块中的 各种 可 用 信息 来 制 作 一个 默认 repr
 它 将 尝试 使用 module
name  module
file  以及 module
loader  作为 repr  的 输入 并 将 任何 丢失 的 信息 赋 为默认值
 以下是 所使用的 确 切 规则 如果模块 具有 spec  属性 其中的 规格 信息 会 被用来 生成 repr
 被 查询 的 属性 有 name  loader  origin  和 haslocation  等等
 如果模块 具有 file  属性 这 会 被用作 模块 repr  的一部分
 如果模块 没有 file  但是 有 loader  且 取值 不 为 none  则 加载器 的 repr  会 被用作 模块 repr  的一部分
 对 于 其他情况 仅在 repr  中 使用 模块 的 name
 在3
4 版更改 loader
modulerepr  已弃用 导入机制 现 在 使用 模块 规格说明 来生成 模块 repr
 为 了 向后兼容 python 3
3 如果 加载器 定义了 modulerepr  方法 则会在 尝试 上述 两 种方式 之前 先 调用 该方法 来生成 模块 repr
 但 请注意 此方法 已弃用
 已 缓存 字节码 的 失效
 在 python  从
pyc  文件 加载 已 缓存 字节码 之前 它 会 检查 缓存 是否 由 最新的
py  源文件 所生成
 默认情况下 python  通过 在 所 写入 缓存 文件 中 保存 源文件 的 最新 修改 时间戳 和 大小 来实现 这一点
 在运行时 导入系统 会通过 比 对 缓存 文件 中 保存 的 元数据 和 源文件 的 元数据 确定 该 缓存 的 有效 性
python  也支持 基于哈希 的 缓存 文件 即 保存 源文件 内容的 哈希值 而不是 其 元数据
 存 在 两种 基于哈希 的
pyc  文件 检查 型 和 非 检查 型
 对 于 检查 型 基于哈希 的
pyc  文件 python  会通过 求 哈希 源文件 并 将结果 哈希值 与 缓存 文件中的 哈希值 比 对 来确定 缓存 有效 性
 如果 检查 型 基于哈希 的 缓存 文件 被 确定 为 失效 python  会 重新 生成 并 写入 一个新的 检查 型 基于哈希 的 缓存 文件
 对 于 非 检查 型
pyc  文件 只要 其 存 在 python  就 会直接 认 定 缓存 文件 有效
 确定 基于哈希 的
pyc  文件 有效 性 的 行为 可通过 checkhashbasedpycs  旗标 来 重载
 在3
7 版更改 增加了 基于哈希 的
pyc  文件
 在 此 之前 python  只 支持 基于 时间戳 来确定 字节码 缓存 的 有效 性
 基于 路径 的 查找器
 路径条目查找器
 路径条目查找器 协议
 为 了 支持 模块 和 已 初始化 包 的 导入 也 为 了 给 命名空间包 提供 组成部分 路径条目查找器 必须 实现 findspec  方法
findspec  接受 两个参数 即 要 导入模块 的完整 限定名称 以及 可选的 目标 模块
 findspec  返回 模块 的 完全 填充 好 的 规格说明
 这 个 规格说明 总 是包含 加载器 集合 但 有 一个 例外
 为 了 向 导入机制 提示 该 规格说明 代表一个 命名空间 portion  路径条目查找器 会 将 submodulesearchlocations  设 为 一个包含 该 部分 的 列表
 在3
4 版更改 findspec  替代 了 findloader  和 findmodule  后 两者 现 在 都 已弃用 但 会 在 findspec  未定义 时 被使用
 较 旧 的 路径条目查找器 可能会 实现 这两个 已弃用的 方法 中的一个 而 没有 实现 findspec
 为 保持 向后兼容 这两个 方法 仍 会 被 接受
 但是如果 在 路径条目查找器 上 实现了 findspec  这两个 遗 留 方法 就 会被忽略
findloader  接受一个 参数 即 要 导入模块 的完整 限定名称
 findloader  返回 一个2 元组其 中 第一 项 是 加载器 而 第二 项 是 命名空间 portion
 为 了 向后兼容 其他 导入 协议 的 实现 许多 路径条目查找器 也 同样 支持 元 路径 查找器 所支持的 传统 findmodule  方法
 但是 路径条目查找器 findmodule  方法 的 调用 绝 不 会 带有 path  参数 它们 被 期望 记录 来自 对 路径 钩子 初始 调用 的 恰 当 路径 信息
 路径条目查找器 的 findmodule  方法 已弃用 因为它 不允许 路径条目查找器 为 命名空间包 提供 部分
 如果 findloader  和 findmodule  同时 存在于 一个 路径条目查找器 中 导入系统 将总是 调用 findloader  而 不 选择 findmodule
 替换 标准 导入系统
 替换 整个 导入系统 的 最 可靠 机制 是 移除 sys
metapath  的 默认 内容 将 其 完全 替换为 自定义 的 元 路径 钩子
 一个 可 行 的 方式是 仅 改变 导入 语句 的 行为 而 不 影响 访问 导入系统 的其他 api  那么 替换 内置的 import  函数 可能 就 够 了
 这种 技巧 也可以在 模块层级 上运 用 即 只 在 某个 模块 内部 改变 导入 语句 的 行为
 想要 选择 性 地 预 先 防止 在 元 路径 上 从 一个 钩子 导入 某些 模块 而不是 完全 禁用 标准 导入系统 只需 直接 从 findspec  引发 modulenotfounderror  而非 返回 none  就 足够 了
 返回 后者 表示 元 路径 搜索 应当 继续 而 引发异常 则 会 立即 终止 搜索
 包 相对导入
 相对导入 使用 前缀 点 号
 一个 前缀 点 号 表示 相对导入 从 当前 包 开始
 两个 或更多 前缀 点 号 表示 对 当前 包 的 上 级 包 的 相对导入 第一个 点 号 之后的 每个 点 号 代表一 级
 例如 给定 以 下 的 包 布局 结构 package  init
py  不 论是 在 subpackage 1 modulex
py  还是 subpackage 1 init
py  中 以 下 导入 都 是有效的 from 
modulea  import  foo  绝对 导入 可以使用 import  或 from  import  语法 但 相对导入 只能 使用 第二 种形式 其中的 原因 在 于 import  xxx
zzz  应当 提供 xxx
zzz  作为 可 用 表达式 但
moduley  不 是 一个有效的 表达式
 有关 main  的 特殊 事项
 对 于 python  的 导入系统 来说 main  模块 是 一个特殊 情况
 正 如 在 另一 节 中 所述 main  模块 是 在 解释器 启动 时 直接 初始化 的 与 sys  和 builtins  很 类似
 但是 与 那 两者 不同 它并不 被 严格 归 类 为 内置模块
 这 是因为 main  被初始化 的方式 依赖于 发起调用 解释器 所 附带 的 旗标 和其他 选项
mainspec
 根据 main  被初始化 的方式 main
spec  会 被设置 相应 值 或 是 none
 当 python  附加 m  选项 启动 时 spec  会 被设为 相应 模块 或 包 的 模块 规格说明
 spec  也会 在 main  模块 作为 执行 某个 目录 zip  文件 或 其 它 sys
path  条目 的一部分 加载 时 被 填充
 在 其余 的 情况 下 main
spec  会 被设为 none  因为 用 于 填充 main  的 代码 不 直接 与 可 导入 的 模块 相对 应 交互 型提示 c  选项 从 stdin  运行 直接 从 源码 或 字节码 文件 运行 请注意 在 最后一 种情况 中 main
spec  总是 为 none  即使 文件 从 技术 上 说 可以作为 一个 模块 被导入
 如果 想要 让 main  中 的 元数据 生效 请使用 m  开 关
 还要注意 即使 是 在 main  对应于 一个 可 导入模块 且 main
spec  被 相应地 设 定 时 它们 仍 会被视为 不同的 模块
 这 是由于 以 下 事实 使用 if  name  main  检测 来 保护 的代码块 仅 会 在 模块 被用来 填充 main  命名空间 时 而非 普通的 导入时 被执行
 开 放 问题 项
 参考 文 献
 导入机制 自 python  诞 生 之 初 至 今 已 发生了 很大 的变化
 原始 的 包 规格说明 仍然可 以 查阅 但 在 撰写 该 文档 之后 许多 相关 细节 已 被修改
 原始 的 sys
metapath  规格说明 见 pep 302 后续的 扩展 说明 见 pep 420
pep 420 为 python 3
3 引入了 命名空间包
 pep 420 还 引入了 findloader  协议 作为 findmodule  的替代
pep 366 描述了 新增的 package  属性 用于在 模块中的 显式 相对导入
pep 328 引入了 绝对 和 显式 相对导入 并 初 次 提 出了 name  语义 最终 由 pep 366 为 package  加入 规范 描述
pep 338 定义了 将 模块 作为脚本 执行
pep 451 在 spec  对象 中 增加了 对 每个模块 导入 状态 的 封装
 它还 将 加载器 的大部分 样 板 责 任 移 交 回 导入机制 中
 这些 改变 允许 弃用 导入系统 中 的一些 api  并 为 查找器 和 加载器 增加 一些 新 的 方法
 脚注1 参见 types
2 importlib  实现 避免 直接使用 返回值
 而 是通过 在 sys
modules  中查找 模块名称 来获取 模块 对象
 这种方式 的 间接 影响 是 被导入 的 模块 可能在 sys
modules  中 替换 其 自身
 这 属于 具体实现 的特定 行为 不保证 能 在 其他 python  实现 中 起作用
3 在 遗 留 代码中 有可能 在 sys
pathimportercache  中找到 imp
nullimporter  的 实例
 建议 将 这些 代码 修改 为 使用 none  代替
 详情参见 porting  python  code
 简单 语句
 简单 语句 由 一个单独的 逻辑 行 构成
 多 条 简单 语句 可以 存在于 同一 行 内 并 以 分 号分隔
 简单 语句 的句法 为 simplestmt  expressionstmt  assertstmt  assignmentstmt  augmentedassignmentstmt  annotatedassignmentstmt  passstmt  delstmt  returnstmt  yieldstmt  raisestmt  breakstmt  continuestmt  importstmt  futurestmt  globalstmt  nonlocalstmt
 表达式 语句
 表达式 语句 用 于 计算 和写入 值 大多 是 在 交互模式 下 或者 通常情况 调用 一个 过程 过程 就是 不 返回 有意义 结果的 函数 在 python  中 过程 的 返回值为 none
 表达式 语句 的其他 使用 方式 也是 允许 且 有 特定 用 处 的
 表达式 语句 的句法 为 expressionstmt  starredexpression  表达式 语句 会 对 指定 的 表达式列表 也可能 为 单 一 表达式 进行 求值
 在 交互模式 下 如果 结果值 不 为 none  它 会通过 内置的 repr  函数 转换为 一个字符串 该 结果 字符串 将 以 单独 一行的 形式 写入 标准输出 例外 情况 是如果 结果为 none  则 该 过程 调用 不 产生 任何 输出

 赋值语句
 赋值语句 用于将 名称 重 绑定到 特定 值 以及 修改 属性 或 可变对象 的成员 项 assignmentstmt  targetlist  starredexpression  yieldexpression  targetlist  target  target  target  identifier  targetlist  targetlist  attributeref  subscription  slicing  target  请参阅 原型 一节 了解 属性引用 抽取 和 切片 的句法 定义
 赋值语句 会 对 指定 的 表达式列表 进行 求值 注意 这可能 为 单 一 表达式 或 是 由 逗号分隔 的 列表 后者 将 产生一个 元组 并 将 单 一 结果 对象 从左至右 逐 个 赋值给 目标列表
 赋值 是 根据 目标列表 的 格式 递归地 定义 的
 当 目标 为 一个 可变对象 属性引用、 抽取 或 切片 的 组成部分 时 该 可变对象 必须 最终 执行 赋值 并 决定 其 有效 性 如果 赋值 操作 不 可接受 也可能 引发异常
 各种 类型 可用的 规则 和 引发的异常 通过 对象类型的 定义 给出 参见 标准类型层级结构 一节
 对象 赋值 的 目标 对象 可以包含 于 圆括号 或 方括号 内 具体 操作 按 以 下方式 递归地 定义
 如果 目标列表 为 后面 不带 逗号、 可以包含 于 圆括号 内 的 单 一 目标 则 将 对象 赋 值 给 该 目标
 否则 该对象 必须为 具有与 目标列表 相同 项 数 的可迭代对象 这些 项 将按 从左 至右 的顺序 被 赋值给 对应的 目标
 如果 目标列表 包含一个 带有 星 号 前缀 的 目标 这 称为 加 星 目标 则 该对象 至少 必须为 与 目标列表 项 数 减 一 相同 项 数 的可迭代对象
 该 可迭代对象 前 面 的 项 将按 从左至右 的顺序 被 赋值给 加 星 目标 之前的 目标
 该 可迭代对象 末尾 的 项 将 被 赋值给 加 星 目标 之后的 目标
 然后 该 可迭代对象 中 剩余 项 的 列表 将 被 赋值给 加 星 目标 该 列表 可以为 空
 否则 该对象 必须为 具有与 目标列表 相同 项 数 的可迭代对象 这些 项 将按 从 左至右 的顺序 被 赋值给 对应的 目标
 对象 赋值给 单个 目标 的 操作 按 以 下方式 递归地 定义
 如果 目标 为 标识符 名称 如果该 名称 未 出现于 当前 代码块的 global  或 nonlocal  语句中 该 名 称 将 被 绑定到 当前 局部 命名空间 的 对象
 否则 该名称 将 被 分别 绑定到 全局 命名空间 或 由 nonlocal  所 确定 的 外层 命名空间 的 对象
 如果该 名称 已经被 绑定 则 将 被重新 绑定
 这 可能导致 之前被 绑定到 该名称 的 对象 的引用计数 变 为零 造成 该对象 进入 释放 过程 并 调用 其 析 构 器 如果存在
 如果该 对象 为 属性引用 引用 中 的 原型 表达式 会被求值
 它应该 产生一个 具 有 可 赋值 属性 的 对象 否 则将引发 typeerror
 该 对象会被 要求 将 可 赋值 对象 赋值给 指定 的 属性 如果它 无法 执行 赋值 则会引发 异常 通常 应 为 attributeerror  但 并 不 强制 要求
 注意如果 该对象 为 类实例 并且 属性引用 在 赋值 运算符 的 两 侧 都 出现 则 右 侧 表达式 a
x  可以 访问 实例属性 或 如果 实例属性 不存在 类属性
 左侧 目 标 a
x  将总是 设 定 为 实例属性 并 在必要时 创建 该 实例属性
 因此 a
x  的 两次 出现 不一定 指向 相同 的 属性 如果 右 侧 表达式 指向一个 类属性 则 左侧 会 创建一个新的 实例属性 作为 赋值 的 目标 class  cls  x 3 class  variable  inst  cls  inst
x  as 3 此 描述 不一定 作用于 描述器 属性 例如 通过 property  创建 的 特征属性
 如果 目标 为 一个 抽取 项 引用 中 的 原型 表达式 会被求值
 它 应当 产生一个 可 变 序列对象 例如 列表或 一个映射 对象例如 字典
 接下来 该 抽取 表 达式 会被求值
 如果 原型 为 一个 可变序列 对象例如 列表 抽取 应 产生一个 整数
 如 其 为 负值 则 再 加上 序列长度
 结果值 必须为一个 小于 序列长度 的 非负 整数 序 列 将 把 被赋值 对象 赋值给 该 整数 指定 索引号 的 项
 如果 索引 超出 范围 将 会 引发 indexerror  给 被 抽取 序列 赋值 不 能 向 列表 添加新 项
 如果 原型 为 一个映射 对象例如 字典 抽取 必须 具有与 该 映射 的 键 类型 相 兼 容 的 类型 然后 映射中 会创建一个 将 抽取 映射到 被赋值 对象 的 键值对
 这 可 以 是 替换 一个 现有 键值对 并 保持 相同 键值 也可以是 插入 一个 新 键值对 如 果 具有相同 值 的 键 不存在
 对 于 用户定义 对象 会 调用 setitem  方法 并附带 适当的 参数
 如果 目标 为 一个 切片 引用 中 的 原型 表达式 会被求值
 它 应当 产生一个 可变 序列对象 例如 列表
 被赋值 对象 应当 是一个 相同类型 的 序列对象
 接 下 来 下 界 与 上 界 表达式 如果存在 的话 将 被求值 默认值 分别 为零 和 序列长度
 上 下 边界 值 应当为 整数
 如果 某一 边界 为负值 则 会 加上 序列长度
 求 出 的 边界 会 被 裁 剪 至 介 于 零 和 序列长度 的 开 区 间 中
 最后 将 要求 序列对象 以 被 赋值 序列 的 项 替换 该 切片
 切片 的长度 可能 与 被赋值 序列 的长度 不同 这 会 在 目标 序列 允许 的情况下 改变 目标 序列 的长度
cpython  implementation  detail  在当前 实现 中 目标 的句法 被当作 与 表达式 的句法 相同 无效 的句法 会 在 代码 生成 阶 段 被 拒 绝 导致 不太 详细 的 错误信息
 虽然 赋值 的 定义 意味着 左 手 边 与 右 手 边 的 重 叠 是 同时 进行 的 例如 a  b  b  a  会 交换 两个 变量 的 值 但 在 赋值给 变量 的 多项集 之内 的 重 叠 是 从左至右 进行 的 这 有 时 会 令人 混 淆
 例如以下 程序 将 会 打印出02 x 01 i 0 i  xi 12 i  is  updated  then  xi  is  updated  printx  参见 pep 3132 扩展 的可迭代对象 拆 包 对 target  特性 的规范 说明
 增强赋值 语句
 增强赋值 语句 就是 在 单个 语句中 将 二元 运算 和 赋值语句 合 为 一 体 augmentedassignmentstmt  augtarget  augop  expressionlist  yieldexpression  augtarget  identifier  attributeref  subscription  slicing  augop  请参阅 原型 一节 了解 最后 三种 符号 的句法 定义
 增强赋值 语句 将 对 目标 和 表达式列表 求值 与 普通 赋值语句 不同的 是 前 者 不能为 可迭代对象 拆 包 对 两个操作 数 相应 类型 的 赋值 执行 指定 的 二元 运算 并 将结果 赋值给 原始 目标
 目标 仅 会被求值 一次
 增强赋值 语句 例如 x 1 可以 改 写 为 x  x 1 获得 类似 但 并非 完全 等价 的效果
 在 增强赋值 的版本中 x  仅 会被求值 一次
 而且 在 可能 的情况下 实际 的 运算 是 原地 执行 的 也就是说 并不是 创建一个新 对象 并将其 赋值给 目标 而 是 直接 修改 原 对象
 不同于 普通 赋值 增强赋值 会 在 对 右 手 边 求值 之前 对 左 手 边 求值
 例如 ai  fx  首先 查找 ai  然后 对 fx  求值 并 执行 加 法 操作 最后 将结果 写 回 到 ai
 除了 在 单个 语句中 赋值给 元组 和 多个 目标 的 例外 情况 增强赋值 语句 的 赋值 操作 处理 方式 与 普通 赋值 相同
 类似地 除了 可能 存 在 原地 操作 行为 的 例外 情况 增强赋值 语句 执行 的 二元 运算 也 与 普通 二元 运算 相同
 对 于 属性引用 类 目标 针对 常规 赋值 的 关于 类 和 实例属性 的 警告 也 同样 适用
 带 标注的 赋值语句
 标注 赋值 就是 在 单个 语句中 将 变量 或 属性 标注 和 可选的 赋值语句 合 为 一 体 annotatedassignmentstmt  augtarget  expression  starredexpression  yieldexpression  与 普通 赋值语句 的 差 别在于 仅 允许 单个 目标
 对 于 将 简单 名称 作为 赋值 目标 的 情况 如果是 在 类 或 模块 作用域中 标注 会被求值 并 存 入 一个特殊 的 类 或 模块属性 annotations  中 这是一个 将 变量 名称 如 为 私有 会 被移除 映射到 被求值 标注的 字典
 此 属性 为 可 写 并且 在 类 或 模块 体 开始 执行 时如果 静态 地 发 现 标注 就会 自动创建
 对 于 将 表达式 作为 赋值 目标 的 情况 如果是 在 类 或 模块 作用域中 标注 会被求值 但不会 保存
 如果一个 名称 在 函数 作用域 内 被 标注 则 该名称 为 该 作用域 的 局部变量
 标注 绝 不会在 函数 作用域 内 被求值 和 保存
 如果存在 右 手 边 带 标注的 赋值 会 在 对 标注 求值 之前 如果 适用 执行 实际 的 赋值
 如果 用 作 表达式 目标 的 右 手 边 不存在 则 解释器 会 对 目标 求值 但 最后 的 setitem  或 setattr  调用 除外
 参见 pep 526 变量 标注的 语法 该 提议 增加了 标注 变量 也 包括 类变量 和 实例变量 类型 的语法 而不再 是通过 注释 来进行 表达
 pep 484 类型提示 该 提议 增加了 typing  模块 以便 为 类型 标注 提供 标准 句 法 可 被 静态 分 析 工具 和 ide  所 使用
 在3
8 版更改 现 在 带有 标注的 赋值 允许在 右 边 以 同样的 表达式 作为 常规 赋值
 之前 某些 表达式 例如 未 加 圆括号 的 元组 表达式 会导致 语法错误
assert  语句
assert  语句 是 在程序中 插入 调试 性 断言 的 简 便 方式 assertstmt  assert  expression  expression  简单 形式 assert  expression  等价于 if  debug  if  not  expression  raise  assertionerror  扩展 形式 assert  expression 1 expression 2 等价于 if  debug  if  not  expression 1 raise  assertionerrorexpression 2 以 上 等价 形式 假定 debug  和 assertionerror  指向 具有 指定 名称 的内置 变量
 在当前 实现 中 内置 变量 debug  在 正 常情况下 为 true  在 请求 优化 时 为 false  对 应 命令行选项 为 o
 如果在 编译时 请求 优化 当前 代码 生成器 不 会 为 assert  语句 发出 任何 代码
 请注意 不必 在 错误信息 中包含 失败 表达式 的 源代码 它会被 作为 栈 追踪 的一部分 被 显示
 赋值给 debug  是 非 法 的
 该 内置 变量 的值会 在 解释器 启动 时 确定
pass  语句
passstmt  passpass  是 一个空 操作 当 它 被执行 时 什么 都 不 发生
 它 适合 当 语法上 需要 一条 语句 但 并 不需要 执行任何 代码 时 用来 临时 占位 例如 def  farg  pass  a  function  that  does  nothing  yet  class  c  pass  a  class  with  no  methods  yet
del  语句
delstmt  del  targetlist  删除 是 递归 定义 的 与 赋值 的 定义 方式 非常 类似
 此处 不再 详细 说明 只 给出 一些 提示
 目标列表 的 删除 将 从左至右 递归地 删除 每 一个 目标
 名称 的 删除 将 从 局部 或 全局 命名空间 中移除 该名称 的 绑定 具体 作用域 的 确定 是 看 该名称 是否有 在同一 代码块的 global  语句 中出现
 如果该 名称 未被 绑定 将会引发 nameerror
 属性引用、 抽取 和 切片 的 删除 会 被传递给 相应的 原型 对象 删除 一个 切片 基本 等价于 赋值为 一个 右 侧 类型 的 空 切片 但 即 便 这一点 也是 由 切片 对象 决定 的
 在3
2 版更改 在之前版本中 如果一个 名称 作为 被 嵌套 代码块 中 的 自由 变量 出现 则将其 从 局部 命名空间中 删除 是 非 法 的
return  语句
returnstmt  return  expressionlistreturn  在 语法上 只会 出现于 函数定义 所 嵌套的 代码 不 会 出现于 类定义 所 嵌套的 代码
 如 果提供了 表达式列表 它将被 求值 否则 以 none  替代
return  会 离 开 当前 函数调用 并 以 表达式列表 或 none  作为 返回值
 当 return  将 控制 流 传 出 一个带有 finally  子句 的 try  语句 时 该 finally  子句 会先 被执行 然后再 真正 离 开 该函数
 在 一个 生成器函数 中 return  语句 表示 生成器 已 完成 并 将导致 stopiteration  被引发
 返回值 如果有 的话 会 被当作 一个参数 用 来构建 stopiteration  并 成为 stopiteration
value  属性
 在 一个 异步生成器 函数 中 一个空 的 return  语句 表示 异步生成器 已 完成 并 将导致 stopasynciteration  被引发
 一个 非空 的 return  语句 在 异步生成器 函数 中 会导致 语法错误
yield  语句
yieldstmt  yieldexpressionyield  语句 在 语义 上 等同于 yield  表达式
 yield  语句 可用来 省略 在 使用 等效 的 yield  表达式 语句 时 所 必须 的 圆括号
 例如以下 yield  语句 yield  expr  yield  from  expr  等同于 以 下 yield  表达式 语句 yield  expr  yield  from  expryield  表达式 和 语句 仅在 定义 generator  函数 时 使用 并且 仅 被用于 生成器函数 的 函数体 内部
 在 函数定义 中 使用 yield  就 足以 使得 该 定义 创建 的 是 生成器函数 而非 普通 函数
 有关 yield  语义 的完整 细节请 参看 yield  表达式 一节
raise  语句
raisestmt  raise  expression  from  expression  如果不 带 表达式 raise  会 重新引发 当前 作用域 内 最后一个 激活 的 异常
 如果 当前 作用域 内 没有 激活 的 异常 将会引发 runtimeerror  来 提示 错误
 否则 的话 raise  会 将 第一个 表达式 求值 为 异常 对象
 它必须 为 baseexception  的子类 或 实例
 如果 它是一个 类 当 需要 时 会通过 不带参数 地 实例化 该 类 来 获得 异常 的 实例
 异常 的 类型 为 异常 实例 的 类 值 为 实例 本身
 当 异常 被引发 时 通常 会自动 创建一个 回溯 对象 并将其 关联到 可 写 的 traceback  属性
 你可以 创建 一个异常并 同时 使用 withtraceback  异常 方法 该方法 将 返回 同一 异常 实例并 将 回溯 对象 设 为 其 参数 设置 自己的 回溯 就 像这样 raise  exceptionfoo  occurred
withtracebacktracebackobjfrom  子句 用 于 异常 串 连 如果有 该 子句 则 第二个 表达式 必须为 另一个 异常 或 实例 它 将作为 可 写 的 cause  属性 被 关联到 所 引发的异常
 如果 引发的异常 未被 处理 两个 异常都 将 被 打印出 来 try 
 traceback  most  recent  call  last  file  stdin  line 2 in  module  zerodivisionerror  division  by  zero  the  above  exception  was  the  direct  cause  of  the  following  exception  traceback  most  recent  call  last  file  stdin  line 4 in  module  runtimeerror  something  bad  happened  如果一个 异常 在 异常处理器 或 finally  clause  中 被引发 类似 的机制 会 隐式地 发 挥 作 用 之前 的异常将 被 关联到 新 异常 的 context  属性 try 
 traceback  most  recent  call  last  file  stdin  line 2 in  module  zerodivisionerror  division  by  zero  during  handling  of  the  above  exception  another  exception  occurred  traceback  most  recent  call  last  file  stdin  line 4 in  module  runtimeerror  something  bad  happened  异常 串 连 可通过 在 from  子句中 指定 none  来 显式地 加 以 抑 制 try 
 traceback  most  recent  call  last  file  stdin  line 4 in  module  runtimeerror  something  bad  happened  有关 异常 的更多信息 可 在 异常 一节 查看 有关 处理 异常 的 信息 可 在 try  语句 一节 查看
 在3
3 版更改 none  现 在 允许 被用作 raise  x  from  y  中 的 y
3
3 新版功能 使用 suppresscontext  属性来 抑 制 异常 上下文 的 自动 显示
break  语句
breakstmt  breakbreak  在 语法上 只会 出现于 for  或 while  循环 所 嵌套的 代码 但不会 出现于 该 循环 内部 的 函数 或 类定义 所 嵌套的 代码
 它 会 终结 最近 的 外层 循环 如果 循环 有 可选的 else  子句 也会 跳过 该 子句
 如果一个 for  循环 被 break  所 终结 该 循环 的 控制 目标 会 保持 其 当前 值
 当 break  将 控制 流 传 出 一个带有 finally  子句 的 try  语句 时 该 finally  子句 会先 被执行 然后再 真正 离 开 该 循环
continue  语句
continuestmt  continuecontinue  在 语法上 只会 出现于 for  或 while  循环 所 嵌套 的代码中 但不会 出现于 该 循环 内部 的 函数 或 类定义 中
 它 会 继续执行 最近 的 外层 循环 的下一个 轮 次
 当 continue  将 控制 流 传 出 一个带有 finally  子句 的 try  语句 时 该 finally  子句 会先 被执行 然后再 真正 开始 循环 的下一个 轮 次
import  语句
future  语句
future  语句 是一种 针对 编译器 的 指令 指明 某个 特定 模块 应当使用 在 特定的 未来 某个 python  发行版 中 成为 标准 特性 的语法 或 语义
future  语句 的 目 的 是 使得 向 在 语言中 引入了 不兼容 改变 的 python  未来 版本 的 迁 移 更 为 容易
 它允许 基于 每个模块 在 某种 新特性 成为 标准 之前的 发行版 中 使用 该 特性
 futurestmt  from  future  import  feature  as  identifier  feature  as  identifier  from  future  import  feature  as  identifier  feature  as  identifier  feature  identifierfuture  语句 必须在 靠 近 模块 开头的 位置 出现
 可以 出现在 future  语句 之前 行 只有 模块的文档 字符串 如果存在 注释 空行 以及 其他 future  语句
 唯一 需要使用 future  语句 的 特性 是 标注 参见 pep 563
future  语句 所 启用 的 所有 历史 特性 仍然 为 python 3 所 认 可
 其 中 包括 absoluteimport  division  generators  generatorstopunicodeliterals  printfunction  nestedscopes  和 withstatement
 它们都 已 成为 冗 余 项 因为它们 总是 为 已 启用 状态 保留 它们 只 是为了 向后兼容
future  语句 在 编译 时会被 识别 并 做 特殊 对 待 对 核心 构造 语义 的改变 常 常 是通过 生成 不同的 代码 来实现
 新 的 特性 甚至 可能会 引入 新 的 不兼容 语法 例如 新 的 保留 字 在这种情况下 编译器 可能需要 以 不同 的方式来 解析 模块
 这样的 决定 不 能 推 迟 到 运行时 方 才 作 出
 对 于任何 给定的 发布 版本 编译器 要 知道 哪些 特性 名称 已 被定义 如果 某个 future  语句 包含 未 知 的 特性 则会引发 编译时 错误
 直接 运行时 的 语义 与 任何 import  语句 相同 存在一个 后 文 将 详细 说明 的 标准 模块 future  它会在 执行 future  语句 时 以 通常 的方式 被导入
 相应的 运行时 语义 取决于 future  语句 所 启用 的 指定 特性
 请注意 以 下 语句 没有任何 特别 之处 import  future  as  name  这 并非 future  语句 它 只是 一条 没有 特殊 语义 或 语法 限制 的 普通 import  语句
 在默认情况下 通过 对 code  compiled  by  calls  to  the  内置函数 exec  和 compile  的 调用 所 编译 的 代码 如果 出现于 一个包含 有 future  语句 的 模块 m  之 中 就会 使用 future  语句 所 关联的 语法 和 语义
 此行为 可以通过 compile  的 可选参数 加 以 控制 请参阅 该函数 的 文档 以 了解详情
 在交互式 解释器 提示符 中 键 入 的 future  语句 将 在 解释器 会话 此 后 的 交互 中 有效
 如果一个 解释器 的 启动 使用了 i  选项 启动 并 传入 了 一个 脚本 名称 来执行 且 该 脚本 包含 future  语句 它 将 在交互式 会话 开始 执行 脚本 之后 保持 有效
 参见 pep 236 回 到 future  有关 future  机制 的 最初 提议
global  语句
globalstmt  global  identifier  identifierglobal  语句 是 作用于 整个 当前 代码块的 声明
 它 意味着 所 列出的 标识符 将 被 解读为 全局变量
 要 给 全局变量 赋值 不 可能不 用 到 global  关键字 不 过 自由 变量 也可以 指向 全局变量 而不必 声明为 全局变量
 在 global  语句中 列出的 名称 不 得 在同一 代码块 内 该 global  语句 之前的 位置 中 使用
 在 global  语句中 列出的 名称 不 得 被定义为 正式 形参 不 也 得 出现于 for  循环 的 控制 目标、 class  定义、 函数定义、 import  语句 或 变量 标注 之 中
cpython  implementation  detail  当前的 实现 并 未 强制 要求 所有的 上述 限制 但 程序 不 应当 滥 用 这样的 自由 因为 未来的 实现 可能会 改 为 强制 要求 并 静默地 改变 程序 的含义
 程序员 注意 事项 global  是 对 解析器 的 指令
 它 仅 对 与 global  语句 同时 被解析 的 代码 起作用
 特别地 包含在 提供给 内置 exec  函数 字符串或 代码对象 中 的 global  语句 并不会 影响 包含 该函数 调用 的代码块 而 包含在 这种 字符串中的 代码 也不 会 受到 包含 该函数 调用 的代码中 的 global  语句 影响
 这 同样 适用于 eval  和 compile  函数
nonlocal  语句
nonlocalstmt  nonlocal  identifier  identifiernonlocal  语句 会 使得 所 列出的 名称 指向 之前 在 最近 的 包含 作用域中 绑定 的 除 全局变量 以外的 变量
 这种 功能 很重要 因为 绑定 的 默认行为 是 先 搜索 局部 命名空间
 这 个 语句 允许 被 封装 的 代码 重新 绑定 局部 作用域 以外 且 非 全局 模块 作用域 当 中 的 变量
 与 global  语句中 列出的 名称 不同 nonlocal  语句中 列出的 名称 必须 指向 之前 存在于 包含 作用域 之 中 的 绑定 在这个 应当 用来 创建新 绑定 的 作用域 不 能 被 无 歧义 地 确定
nonlocal  语句中 列出的 名称 不 得 与 之前 存在于 局部 作用域中 的 绑定 相 冲突
 参见 pep 3104 访问 外层 作用域中 的 名称 有关 nonlocal  语句 的规范 说明
 概述
 其他 实现
 标注
 表达式
 本章 将 解释 python  中 组成 表达式 的各种 元素 的 的含义
 语法 注释 在 本章 和 后续 章节 中 会 使用 扩展 bnf  标注 来 描述 语法 而不是 词法分析
 当 某种 替代 的语法 规则 具有 如 下 形式 name  othername  并且没有 给出 语义 则 这种 形式 的 name  在 语法上 与 othername  相同
 算术 转换
 原子
 原子 指 表达式 的 最 基本 构成 元素
 最简单的 原子 是 标识符 和 字面值
 以 圆括号、 方括号 或 花括号 包括 的形式 在 语法上 也 被 归 类 为 原子
 原子 的句法 为 atom  identifier  literal  enclosure  enclosure  parenthform  listdisplay  dictdisplay  setdisplay  generatorexpression  yieldatom
 标识符 名称
 作为 原子 出现的 标识符 叫 做 名称
 请 参看 标识符 和关键字 一节 了解 其 词法 定义 以及 命名 与 绑定 获取 有关 命名 与 绑定 的 文档
 当 名称 被 绑定到 一个 对象 时 对 该 原子 求值 将 返回 相应 对象
 当 名称 未被 绑定 时 尝试 对 其 求值 将引发 nameerror  异常
 私有 名称 转换 当 以 文本 形式 出现在 类定义 中的一个 标识符 以 两个 或更多 下划线 开头 并且不 以 两个 或更多 下划线 结尾 它 会被视为 该类的 私有 名称
 私有 名称 会 在 为 其 生成 代码 之前 被转换为 一种 更 长 的形式
 转换 时 会 插入 类 名 移除 打头 的 下划线 再 在 名称 前 增加 一个 下划线
 例如 出现在 一个名为 ham  的 类 中 的 标识符 spam  会 被转换为 hamspam
 这种 转换 独立 于 标识符 所使用的 相关 句 法
 如果 转换 后 的 名称 太 长 超过255 个 字符 可能 发生 由 具体实现 定义 的 截断
 如果 类 名 仅 由 下划线 组成 则 不 会 进行 转换
 字面值
python  支持 字符串 和 字节串 字面值 以及 几种 数字 字面值 literal  stringliteral  bytesliteral  integer  floatnumber  imagnumber  对 字面值 求值 将返回一个 该值 所对应 类型的对象 字符串、 字节串、 整数、 浮点数、 复数
 对 于 浮点数 和 虚 数 复数的 情况 该值 可能为 近似值
 详情参见 字面值
 所有 字面值 都 对 应 与 不可变 数据类型 因此 对象 标识 的重要 性 不 如 其 实际 值
 多次 对 具有相同 值 的 字面值 求值 不 论是 发生 在 程序 文本 的 相同 位置 还是 不同 位置 可能 得到 相同 对象 或 是 具有相同 值 的不同 对象
 带 圆括号 的形式
 列表、 集合 与 字典 的 显示
 为 了 构建 列表、 集合 或 字典 python  提供了 名为 显示 的 特殊 句 法 每个 类型 各 有两种 形式 第 一种 是 显式地 列出 容器 内容 第二 种 是通过 一 组 循环 和 筛选 指令 计算 出来 称为 推导式
 推导式 的 常 用 句 法 元素 为 comprehension  assignmentexpression  compfor  compfor  async  for  targetlist  in  ortest  compiter  compiter  compfor  compif  compif  if  expressionnocond  compiter  推导式 的 结构 是 一个单独 表达式 后面 加 至少 一个 for  子句 以及 零 个 或更多 个 for  或 if  子句
 在这种情况下 新 容器 的 元素 产生 方式是 将每个 for  或 if  子句 视为 一个 代码块 按 从左至右 的顺序 嵌套 然后 每次 到达 最 内 层 代码块 时就 对 表达式 进行 求值 以 产生一个 元素
 不 过 除了 最 左边 for  子句中 的可迭代 表达式 推导式 是 在 另一个 隐式 嵌套的 作用域 内 执行 的
 这 能 确保 赋 给 目标列表 的 名称 不 会 泄 露 到 外层 的 作用域
 最 左边 的 for  子句中 的可迭代对象 表达式 会直接 在 外层 作用域中 被求值 然后 作为一个 参数 被传给 隐式 嵌套的 作用域
 后续的 for  子句 以及 最 左侧 for  子句 中的任何 筛选 条件 不 能 在 外层 作用域中 被求值 因为它们 可能 依赖于 从 最 左侧 可迭代对象 中 获得 的 值
 例如 xy  for  x  in  range 10 for  y  inrangex  x 10
 为 了 确保 推导式 得 出 的结果 总是 一个 类型 正确 的容器 在 隐式 嵌套 作用域 内 禁止 使用 yield  和 yield  from  表达式
 从 python 3
6 开始 在 async  def  函数 中 可以使用 async  for  子句 来 迭代 asynchronous  iterator
 在 async  def  函数 中 构建 推导式 可以通过在 打头 的 表达式 后 加上 for  或 async  for  子句 也 可能包含 额外的 for  或 async  for  子句 还 可能 使用 await  表达式
 如果一个 推导式 包含 async  for  子句 或者 await  表达式 则 被称为 异步 推导式
 异步 推导式 可以 暂 停 执行 它 所在的 协程函数
 另请参阅 pep 530
3
6 新版功能 引入了 异步 推导式
 在3
8 版更改 yield  和 yield  from  在 隐式 嵌套的 作用域中 已被 禁用
 列表 显示
 列表 显示 是一个 用 方括号 括 起来 的 可能为 空 的 表达式 系列 listdisplay  starredlist  comprehension  列表 显示 会产生 一个新的 列表对象 其内容 通过 一系列 表达式 或 一个 推导式 来指定
 当提供 由 逗号分隔 的 一系列 表达式 时 其 元素 会 从左至右 被求值 并 按 此 顺序 放入 列表对象
 当 提供一个 推导式 时 列表 会 根据 推导式 所产生 的结果 元素 进行 构建
 集合 显示
 集合 显示 是 用 花括号 标 明 的 与 字典 显示 的 区别在于 没有 冒号 分隔 的键和值 setdisplay  starredlist  comprehension  集合 显示 会产生 一个新的 可变 集合 对象 其内容 通过 一系列 表达式 或 一个 推导式 来指定
 当提供 由 逗号分隔 的 一系列 表达式 时 其 元素 会 从左至右 被求值 并 加入 到 集合 对象
 当 提供一个 推导式 时 集合 会 根据 推导式 所产生 的结果 元素 进行 构建
 空 集合 不能用 来构建 该 字面值 所 构建 的 是 一个空 字典
 字典 显示
 字典 显示 是一个 用 花括号 括 起来 的 可能为 空 的 键 数据 对 系列 dictdisplay  keydatumlist  dictcomprehension  keydatumlist  keydatum  keydatum  keydatum  expression  expression  orexpr  dictcomprehension  expression  expression  compfor  字典 显示 会产生 一个新的 字典 对象
 如果给出 一个 由 逗号分隔 的 键 数据 对 序列 它们会 从左至右 被求值 以 定义 字典 的 条目 每个键 对象 会 被用作 在 字典中 存放 相应 数据 的 键
 这意味着 你可以在 键 数据 对 序列中 多次 指定 相同 的 键 最终 字典 的值将 由 最后一 次 给出的 键 决定
 双 星 号 表示 字典 拆 包
 它 的 操作数 必须是一个 mapping
 每个 映射 项 被 会 加入 新 的字典
 后续 的值会 替代 先前 的 键 数据 对 和 先前 的字典 拆 包 所 设置 的 值
3
5 新版功能 拆 包 到 字典 显示 最初 由 pep 448 提 出
 字典 推导式 与 列表 和 集合 推导式 有 所 不同 它需要 以 冒号 分隔 的两个 表达式 后面 带 上 标准 的 for  和 if  子句
 当 推导式 被执行 时 作为 结果 的键和值 元素 会按 它们的 产生 顺序 被加入 新 的字典
 对 键 取值 类型 的 限制 已 列 在 之前的 标准类型层级结构 一节 中
 总 的 说 来 键 的 类型 应该 为 hashable  这 就 把 所有 可变对象 都 排除 在 外
 重复 键 之间的 冲突 不会被 检测 指定 键 所 保存 的最后一个 数据 即 在 显示 中 排 最 右 边 的 文本 为 最终 有效 数据
 在3
8 版更改 在 python 3
8 之前的 字典 推导式 中 并没有 定义 好 键和值 的 求值 顺序
 在 cpython  中 值 会先 于 键 被求值
 根据 pep 572 的 提议 从3
8 开始 键 会先 于 值 被求值
 生成器表达式
yield  表达式
 原型
 原型 代表 编程语言 中 最 紧 密 绑定 的 操作
 它们 的句法 如 下 primary  atom  attributeref  subscription  slicing  call
 属性引用
 属性引用 是 后面 带有一个 句 点 加一个 名称 的 原型 attributeref  primary 
 identifier  此 原型 必须 求值 为 一个 支持 属性引用 的 类型的对象 多 数 对象 都支持 属性引用
 随后 该 对象会被 要求 产生 以 指定 标识符 为 名称 的 属性
 这 个 产生 过程 可通过 重载 getattr  方法来 自定义
 如果这 个 属性 不可用 则将引发 attributeerror  异常
 否则 的话 所产生 对象的类型 和 值 会 根据 该对象 来确定
 对 同一 属性引用 的 多次 求值 可能 产生 不同的 对象
 抽取
 对 序列 字符串、 元组或 列表或 映射 字典 对象 的 抽取 操作 通常 就是 从 相应的 多项集 中选择 一 项 subscription  primary  expressionlist  此 原型 必须 求值 为 一个 支持 抽取 操作 的 对象例如 列表或 字典
 用户定义的 对象 可通过 定义 getitem  方法来 支持 抽取 操作
 对 于 内置 对象 有两种 类型的对象 支持 抽取 操作 如果 原型 为 映射 表达式列表 必须 求值 为 一个 以 该 映射 的 键 为 值 的 对象 抽取 操作 会 在 映射中 选 出 该 键 所对应的 值
 表达式列表 为 一个元组 除非 其 中 只有一 项
 如果 原型 为 序列 表达式列表 必须 求值 为 一个整数 或 一个 切片 详情 见 下 节
 正式 句 法 规则 并没有 在 序列中 设置 负 标 号 的 特殊 保留 条 款 但是 内置 序列 所提供的 getitem  方法都 可通过 在 索引 中添加 序列长度 来 解析 负 标 号 这样 x 1 会 选 出 x  中 的最后一 项
 结果值 必须为一个 小于 序列中 项 数 的 非负 整数 抽取 操作 会 选 出 标 号 为 该值 的 项 从 零 开始 数
 由 于 对 负 标 号 和 切片 的 支持 存在于 对象 的 getitem  方法 重载此方法 的子类 需要 显式地 添加 这种 支持
 字符串 的 项 是 字符
 字符 不 是 单独的 数据类型 而 是 仅 有 一个字符 的 字符串
 对 特定 类 或 类型 的 抽取 操作 会创建一个 泛型 别名
 在此情况下 用户自定义 类型 可通过 提供 classgetitem  类 方法来 支持 抽取 操作
 切片
 调用
await  表达式
 挂起 coroutine  的 执行 以 等待 一个 awaitable  对象
 只能 在 coroutinefunction  内部 使用
 awaitexpr  await  primary 3
5 新版功能
 幂 运算符
 幂 运算符 的 绑定 比 在 其 左侧 的 一 元 运算符 更 紧 密 但 绑定 紧 密 程度 不 及 在 其 右 侧 的 一 元 运算符
 句 法 如 下 power  awaitexpr  primary  uexpr  因此在 一个 未 加 圆括号 的 幂 运算符 和 单 目 运算符 序列中 运算符 将 从 右 向左 求值 这 不 会 限制 操作数的 求值 顺序12 结果将 为1
 幂 运算符 与 附带 两个参数 调用 内置 pow  函数 具有相同的 语义 结果为 对 其 左 参数 进行 其 右 参数 所 指定 幂 次 的 乘 方 运算
 数值 参数 会先 转换为 相同类型 结果 也 为 转换 后 的 类型
 对 于 int  类型 的 操作数 结果将 具有与 操作数 相同 的 类型 除非 第二个 参数为 负数 在 那 种情况下 所有 参数 会 被转换为 float  类型 并 输出 float  类型 的结果
 例如102 返回100 而102 返回0
 对0
0 进行 负数 幂 次 运算 将导致 zerodivisionerror
 对 负数 进行 分 数 幂 次 运算 将 返回 complex  数值
 在 早期 版本中 这 将引发 valueerror

 一 元 算术 和 位运算
 所有 算术 和 位运算 具有相同的 优先级 uexpr  power  uexpr  uexpr  uexpr  一 元 运算符 负 会产生 其 数值 参数 的 负值
 一 元 运算符 正 会产生 与 其 数值 参数 相同 的 值
 一 元 运算符 取反 的 结果是 对 其 整数 参数 按位 取反
 x  的 按位 取反 被定义为 x 1
 它只 作用于 整数
 在所有 三 种情况下 如果参数 的 类型 不正确 将引发 typeerror  异常
 二元 算术运算 符
 移 位运算
 移 位运算 的优先级 低 于 算术运算 shiftexpr  aexpr  shiftexpr  aexpr  这些 运算符 接受 整数 参数
 它们会 将 第一个参数 左 移 或 右 移 第二个 参数 所指定的 比特位 数
 右 移 n  位 被定义为 被 pow 2 n  整 除
 左 移 n  位 被定义为 乘 以 pow 2 n
 二元 位运算
 三种 位运算 具有 各 不 相同 的优先级 andexpr  shiftexpr  andexpr  shiftexpr  xorexpr  andexpr  xorexpr  andexpr  orexpr  xorexpr  orexpr  xorexpr  运算符 对 两个参数 进行 按位 and  与 运算 两个参数 必须为 整数
 运算符 对 两个参数 进行 按位 xor  异 或 运算 两个参数 必须为 整数
 运算符 对 两个参数 进行 按位 or  或 运算 两个参数 必须为 整数
 比较 运算
 值 比较
 成员检测 运算
 运算符 in  和 not  in  用 于 成员检测
 如果 x  是 s  的成员 则 x  ins  求值 为 true  否则为 false
 x  not  in  s  返回 x  in  s  取反 后 的 值
 所有 内置 序列 和 集合 类型 以及 字典 都支持 此 运算 对 于 字典 来说 in  检测 其 是否有 给定的 键
 对 于 list  tuple  set  frozenset  dict  或 collections
deque  这样的 容器 类型 表达式 x  in  y  等价于 anyx  is  eor  x  e  for  e  in  y
 对 于 字符串 和 字节串 类型 来说 当且仅当 x  是 y  的 子 串 时 x  in  y  为 true
 一个 等价 的 检测 是 y
 空字符串 总是 被视为 任何其他 字符串 的 子 串 因此 in  abc  将 返回 true
 对 于 定义了 contains  方法 的 用户自定义 类 来 说如果 y
containsx  返回真值 则 x  in  y  返回 true  否则返回 false
 对 于 未定义 contains  但 定义了 iter  的 用户自定义 类 来说 如果在 对 y  进行迭代 时 产生 了 值 z  使得 表达式 x  is  z  or  x  z  为真 则 x  in  y  为 true
 如果在 迭代 期间 引发了 异常则 等同于 in  引发了 该异常
 最后 将 会 尝试 旧式 的 迭代 协议 如果一个 类定义了 getitem  则 当且仅当 存 在 非负 整数 索引号 i  使得 x  is  yi  or  x  yi  并且没有 更 小 的 索引号 引发 indexerror  异常 时 x  in  y  为 true
 如果 引发了 任何其他 异常则 等同于 in  引发了 该异常
 运算符 not  in  被定义为 具有与 in  相反 的 逻辑值
 标识 号 比较
 运算符 is  和 is  not  用 于 检测 对象 的 标识 号 当且仅当 x  和 y  是 同一 对象 时 x  is  y  为真
 一个 对象 的 标识 号 可 使用 id  函数 来确定
 xis  not  y  会产生 相反 的 逻辑值
 布尔运算
 赋值 表达式
assignmentexpression  identifier  expression  赋值 表达式 有 时 又 被 叫 做 命名 表达式 或 海 象 表达式 将 一个 expression  赋值给 一个 identifier  同时 还 返回 expression  的 值
 一个 常见 用 例 是 在 处理 匹配 的正则表达式 的时候 if  matching  pattern
searchdata  dosomethingmatching  或者是 在 处理 分块的 文件 流 的时候 while  chunk  file
read 9000 processchunk 3
8 新版功能 请参阅 pep 572 了解有关 赋值 表达式 的 详情
 条件 表达式
conditionalexpression  ortest  if  ortest  else  expression  expression  conditionalexpression  lambdaexpr  expressionnocond  ortest  lambdaexprnocond  条件 表达式 有 时 称为 三 元 运算符 在所有 python  运算 中 具有 最低 的优先级
 表达式 x  if  c  else  y  首先 是 对 条件 c  而非 x  求值
 如果 c  为真 x  将 被求值 并返回其 值 否则将 对 y  求值 并返回其 值
 请参阅 pep 308 了解有关 条件 表达式 的 详情
lambda  表达式
lambdaexpr  lambda  parameterlist  expression  lambdaexprnocond  lambda  parameterlist  expressionnocondlambda  表达式 有 时 称为 lambda  构 型 被 用于创建 匿名 函数
 表达式 lambda  parameters  expression  会产生 一个 函数对象
 该 未 命名 对象 的 行为 类似于 用 以 下方式 定义 的 函数 def  lambdaparameters  return  expression  请参阅 函数定义 了解有关 参数列表 的句法
 请注意 通过 lambda  表达式 创建 的 函数 不 能包含 语句 或 标注
 表达式列表
 求值 顺序
 运算符 优先级
