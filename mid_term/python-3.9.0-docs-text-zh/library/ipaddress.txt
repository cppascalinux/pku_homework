"ipaddress" --- IPv4/IPv6 操作库
********************************

**源代码：** Lib/ipaddress.py

======================================================================

"ipaddress" 提供了创建、处理和操作 IPv4 和 IPv6 地址和网络的功能。

该模块中的函数和类可以直接处理与IP地址相关的各种任务，包括检查两个主机
是否在同一个子网中，遍历某个子网中的所有主机，检查一个字符串是否是一个
有效的IP地址或网络定义等等。

这是完整的模块 API 参考—若要查看概述，请见 ipaddress模块介绍.

3.3 新版功能.


方便的工厂函数
==============

"ipaddress" 模块提供来工厂函数来方便地创建 IP 地址，网络和接口：

ipaddress.ip_address(address)

   返回一个 "IPv4Address" 或 "IPv6Address" 对象，取决于作为参数传递的
   IP 地址。可以提供IPv4或IPv6地址，小于 2**32 的整数默认被认为是 IPv4
   。如果 *address* 不是有效的 IPv4 或 IPv6 地址，则会抛出
   "ValueError"。

   >>> ipaddress.ip_address('192.168.0.1')
   IPv4Address('192.168.0.1')
   >>> ipaddress.ip_address('2001:db8::')
   IPv6Address('2001:db8::')

ipaddress.ip_network(address, strict=True)

   返回一个 "IPv4Network" 或 "IPv6Network" 对象，具体取决于作为参数传
   入的 IP 地址。 *address* 是表示 IP 网址的字符串或整数。 可以提供
   IPv4 或 IPv6 网址；小于 2**32 的整数默认被视为 IPv4。 *strict* 会被
   传给 "IPv4Network" 或 "IPv6Network" 构造器。 如果 *address* 不表示
   有效的 IPv4 或 IPv6 网址，或者网络设置了 host 比特位，则会引发
   "ValueError"。

   >>> ipaddress.ip_network('192.168.0.0/28')
   IPv4Network('192.168.0.0/28')

ipaddress.ip_interface(address)

   返回一个 "IPv4Interface" 或 "IPv6Interface" 对象，取决于作为参数传
   递的 IP 地址。 *address* 是代表 IP 地址的字符串或整数。 可以提供
   IPv4 或 IPv6 地址，小于 2**32 的整数默认认为是 IPv4。 如果
   *address* 不是有效的IPv4 或 IPv6 地址，则会抛出一个 "ValueError"。

这些方便的函数的一个缺点是需要同时处理IPv4和IPv6格式，这意味着提供的错
误信息并不精准，因为函数不知道是打算采用IPv4还是IPv6格式。更详细的错误
报告可以通过直接调用相应版本的类构造函数来获得。


IP 地址
=======


地址对象
--------

"IPv4Address" 和 "IPv6Address" 对象有很多共同的属性。一些只对IPv6 地址
有意义的属性也在 "IPv4Address" 对象实现，以便更容易编写正确处理两种 IP
版本的代码。地址对象是可哈希的 *hashable*，所以它们可以作为字典中的键
来使用。

class ipaddress.IPv4Address(address)

   构造一个 IPv4 地址。 如果 *address* 不是一个有效的 IPv4 地址，会抛
   出 "AddressValueError" 。

   以下是有效的 IPv4 地址：

   1. 以十进制小数点表示的字符串，由四个十进制整数组成，范围为0--255，
      用点隔开(例如 "192.168.0.1" )。每个整数代表地址中的八位（一个字
      节）。只有对于小于8的值，才允许使用前导零(因为对这种字符串的十进
      制和八进制解释之间没有任何歧义)。

   2. 一个32位可容纳的整数。

   3. 一个长度为 4 的封装在 "bytes" 对象中的整数(高位优先)。

   >>> ipaddress.IPv4Address('192.168.0.1')
   IPv4Address('192.168.0.1')
   >>> ipaddress.IPv4Address(3232235521)
   IPv4Address('192.168.0.1')
   >>> ipaddress.IPv4Address(b'\xC0\xA8\x00\x01')
   IPv4Address('192.168.0.1')

   version

      The appropriate version number: "4" for IPv4, "6" for IPv6.

   max_prefixlen

      The total number of bits in the address representation for this
      version: "32" for IPv4, "128" for IPv6.

      The prefix defines the number of leading bits in an  address
      that are compared to determine whether or not an address is part
      of a network.

   compressed

   exploded

      The string representation in dotted decimal notation. Leading
      zeroes are never included in the representation.

      As IPv4 does not define a shorthand notation for addresses with
      octets set to zero, these two attributes are always the same as
      "str(addr)" for IPv4 addresses. Exposing these attributes makes
      it easier to write display code that can handle both IPv4 and
      IPv6 addresses.

   packed

      The binary representation of this address - a "bytes" object of
      the appropriate length (most significant octet first). This is 4
      bytes for IPv4 and 16 bytes for IPv6.

   reverse_pointer

      The name of the reverse DNS PTR record for the IP address, e.g.:

         >>> ipaddress.ip_address("127.0.0.1").reverse_pointer
         '1.0.0.127.in-addr.arpa'
         >>> ipaddress.ip_address("2001:db8::1").reverse_pointer
         '1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa'

      This is the name that could be used for performing a PTR lookup,
      not the resolved hostname itself.

      3.5 新版功能.

   is_multicast

      "True" if the address is reserved for multicast use.  See **RFC
      3171** (for IPv4) or **RFC 2373** (for IPv6).

   is_private

      "True" if the address is allocated for private networks.  See
      iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-
      registry (for IPv6).

   is_global

      "True" if the address is allocated for public networks.  See
      iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-
      registry (for IPv6).

      3.4 新版功能.

   is_unspecified

      "True" if the address is unspecified.  See **RFC 5735** (for
      IPv4) or **RFC 2373** (for IPv6).

   is_reserved

      "True" if the address is otherwise IETF reserved.

   is_loopback

      "True" if this is a loopback address.  See **RFC 3330** (for
      IPv4) or **RFC 2373** (for IPv6).

   is_link_local

      "True" if the address is reserved for link-local usage.  See
      **RFC 3927**.

IPv4Address.__format__(fmt)

   Returns a string representation of the IP address, controlled by an
   explicit format string. *fmt* can be one of the following: "'s'",
   the default option, equivalent to "str()", "'b'" for a zero-padded
   binary string, "'X'" or "'x'" for an uppercase or lowercase
   hexadecimal representation, or "'n'", which is equivalent to "'b'"
   for IPv4 addresses and "'x'" for IPv6. For binary and hexadecimal
   representations, the form specifier "'#'" and the grouping option
   "'_'" are available. "__format__" is used by "format", "str.format"
   and f-strings.

   >>> format(ipaddress.IPv4Address('192.168.0.1'))
   '192.168.0.1'
   >>> '{:#b}'.format(ipaddress.IPv4Address('192.168.0.1'))
   '0b11000000101010000000000000000001'
   >>> f'{ipaddress.IPv6Address("2001:db8::1000"):s}'
   '2001:db8::1000'
   >>> format(ipaddress.IPv6Address('2001:db8::1000'), '_X')
   '2001_0DB8_0000_0000_0000_0000_0000_1000'
   >>> '{:#_n}'.format(ipaddress.IPv6Address('2001:db8::1000'))
   '0x2001_0db8_0000_0000_0000_0000_0000_1000'

   3.9 新版功能.

class ipaddress.IPv6Address(address)

   Construct an IPv6 address.  An "AddressValueError" is raised if
   *address* is not a valid IPv6 address.

   The following constitutes a valid IPv6 address:

   1. A string consisting of eight groups of four hexadecimal digits,
      each group representing 16 bits.  The groups are separated by
      colons. This describes an *exploded* (longhand) notation.  The
      string can also be *compressed* (shorthand notation) by various
      means.  See **RFC 4291** for details.  For example,
      ""0000:0000:0000:0000:0000:0abc:0007:0def"" can be compressed to
      ""::abc:7:def"".

      Optionally, the string may also have a scope zone ID, expressed
      with a suffix "%scope_id". If present, the scope ID must be non-
      empty, and may not contain "%". See **RFC 4007** for details.
      For example, "fe80::1234%1" might identify address "fe80::1234"
      on the first link of the node.

   2. An integer that fits into 128 bits.

   3. An integer packed into a "bytes" object of length 16, big-
      endian.

   >>> ipaddress.IPv6Address('2001:db8::1000')
   IPv6Address('2001:db8::1000')
   >>> ipaddress.IPv6Address('ff02::5678%1')
   IPv6Address('ff02::5678%1')

   compressed

   The short form of the address representation, with leading zeroes
   in groups omitted and the longest sequence of groups consisting
   entirely of zeroes collapsed to a single empty group.

   This is also the value returned by "str(addr)" for IPv6 addresses.

   exploded

   The long form of the address representation, with all leading
   zeroes and groups consisting entirely of zeroes included.

   For the following attributes and methods, see the corresponding
   documentation of the "IPv4Address" class:

   packed

   reverse_pointer

   version

   max_prefixlen

   is_multicast

   is_private

   is_global

   is_unspecified

   is_reserved

   is_loopback

   is_link_local

      3.4 新版功能: is_global

   is_site_local

      "True" if the address is reserved for site-local usage.  Note
      that the site-local address space has been deprecated by **RFC
      3879**. Use "is_private" to test if this address is in the space
      of unique local addresses as defined by **RFC 4193**.

   ipv4_mapped

      For addresses that appear to be IPv4 mapped addresses (starting
      with "::FFFF/96"), this property will report the embedded IPv4
      address. For any other address, this property will be "None".

   scope_id

      For scoped addresses as defined by **RFC 4007**, this property
      identifies the particular zone of the address's scope that the
      address belongs to, as a string. When no scope zone is
      specified, this property will be "None".

   sixtofour

      For addresses that appear to be 6to4 addresses  (starting with
      "2002::/16") as defined by **RFC 3056**, this property will
      report the embedded IPv4 address.  For any other address, this
      property will be "None".

   teredo

      For addresses that appear to be Teredo addresses (starting with
      "2001::/32") as defined by **RFC 4380**, this property will
      report the embedded "(server, client)" IP address pair.  For any
      other address, this property will be "None".

IPv6Address.__format__(fmt)

   Refer to the corresponding method documentation in "IPv4Address".

   3.9 新版功能.


Conversion to Strings and Integers
----------------------------------

To interoperate with networking interfaces such as the socket module,
addresses must be converted to strings or integers. This is handled
using the "str()" and "int()" builtin functions:

   >>> str(ipaddress.IPv4Address('192.168.0.1'))
   '192.168.0.1'
   >>> int(ipaddress.IPv4Address('192.168.0.1'))
   3232235521
   >>> str(ipaddress.IPv6Address('::1'))
   '::1'
   >>> int(ipaddress.IPv6Address('::1'))
   1

Note that IPv6 scoped addresses are converted to integers without
scope zone ID.


运算符
------

Address objects support some operators.  Unless stated otherwise,
operators can only be applied between compatible objects (i.e. IPv4
with IPv4, IPv6 with IPv6).


Comparison operators
~~~~~~~~~~~~~~~~~~~~

Address objects can be compared with the usual set of comparison
operators. Same IPv6 addresses with different scope zone IDs are not
equal. Some examples:

   >>> IPv4Address('127.0.0.2') > IPv4Address('127.0.0.1')
   True
   >>> IPv4Address('127.0.0.2') == IPv4Address('127.0.0.1')
   False
   >>> IPv4Address('127.0.0.2') != IPv4Address('127.0.0.1')
   True
   >>> IPv6Address('fe80::1234') == IPv6Address('fe80::1234%1')
   False
   >>> IPv6Address('fe80::1234%1') != IPv6Address('fe80::1234%2')
   True


Arithmetic operators
~~~~~~~~~~~~~~~~~~~~

Integers can be added to or subtracted from address objects.  Some
examples:

   >>> IPv4Address('127.0.0.2') + 3
   IPv4Address('127.0.0.5')
   >>> IPv4Address('127.0.0.2') - 3
   IPv4Address('126.255.255.255')
   >>> IPv4Address('255.255.255.255') + 1
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   ipaddress.AddressValueError: 4294967296 (>= 2**32) is not permitted as an IPv4 address


IP Network definitions
======================

The "IPv4Network" and "IPv6Network" objects provide a mechanism for
defining and inspecting IP network definitions.  A network definition
consists of a *mask* and a *network address*, and as such defines a
range of IP addresses that equal the network address when masked
(binary AND) with the mask.  For example, a network definition with
the mask "255.255.255.0" and the network address "192.168.1.0"
consists of IP addresses in the inclusive range "192.168.1.0" to
"192.168.1.255".


Prefix, net mask and host mask
------------------------------

There are several equivalent ways to specify IP network masks.  A
*prefix* "/<nbits>" is a notation that denotes how many high-order
bits are set in the network mask.  A *net mask* is an IP address with
some number of high-order bits set.  Thus the prefix "/24" is
equivalent to the net mask "255.255.255.0" in IPv4, or "ffff:ff00::"
in IPv6.  In addition, a *host mask* is the logical inverse of a *net
mask*, and is sometimes used (for example in Cisco access control
lists) to denote a network mask.  The host mask equivalent to "/24" in
IPv4 is "0.0.0.255".


Network objects
---------------

All attributes implemented by address objects are implemented by
network objects as well.  In addition, network objects implement
additional attributes. All of these are common between "IPv4Network"
and "IPv6Network", so to avoid duplication they are only documented
for "IPv4Network". Network objects are *hashable*, so they can be used
as keys in dictionaries.

class ipaddress.IPv4Network(address, strict=True)

   Construct an IPv4 network definition.  *address* can be one of the
   following:

   1. A string consisting of an IP address and an optional mask,
      separated by a slash ("/").  The IP address is the network
      address, and the mask can be either a single number, which means
      it's a *prefix*, or a string representation of an IPv4 address.
      If it's the latter, the mask is interpreted as a *net mask* if
      it starts with a non-zero field, or as a *host mask* if it
      starts with a zero field, with the single exception of an all-
      zero mask which is treated as a *net mask*.  If no mask is
      provided, it's considered to be "/32".

      For example, the following *address* specifications are
      equivalent: "192.168.1.0/24", "192.168.1.0/255.255.255.0" and
      "192.168.1.0/0.0.0.255".

   2. An integer that fits into 32 bits.  This is equivalent to a
      single-address network, with the network address being *address*
      and the mask being "/32".

   3. An integer packed into a "bytes" object of length 4, big-endian.
      The interpretation is similar to an integer *address*.

   4. A two-tuple of an address description and a netmask, where the
      address description is either a string, a 32-bits integer, a
      4-bytes packed integer, or an existing IPv4Address object; and
      the netmask is either an integer representing the prefix length
      (e.g. "24") or a string representing the prefix mask (e.g.
      "255.255.255.0").

   An "AddressValueError" is raised if *address* is not a valid IPv4
   address.  A "NetmaskValueError" is raised if the mask is not valid
   for an IPv4 address.

   If *strict* is "True" and host bits are set in the supplied
   address, then "ValueError" is raised.  Otherwise, the host bits are
   masked out to determine the appropriate network address.

   Unless stated otherwise, all network methods accepting other
   network/address objects will raise "TypeError" if the argument's IP
   version is incompatible to "self".

   在 3.5 版更改: Added the two-tuple form for the *address*
   constructor parameter.

   version

   max_prefixlen

      Refer to the corresponding attribute documentation in
      "IPv4Address".

   is_multicast

   is_private

   is_unspecified

   is_reserved

   is_loopback

   is_link_local

      These attributes are true for the network as a whole if they are
      true for both the network address and the broadcast address.

   network_address

      The network address for the network. The network address and the
      prefix length together uniquely define a network.

   broadcast_address

      The broadcast address for the network. Packets sent to the
      broadcast address should be received by every host on the
      network.

   hostmask

      The host mask, as an "IPv4Address" object.

   netmask

      The net mask, as an "IPv4Address" object.

   with_prefixlen

   compressed

   exploded

      A string representation of the network, with the mask in prefix
      notation.

      "with_prefixlen" and "compressed" are always the same as
      "str(network)". "exploded" uses the exploded form the network
      address.

   with_netmask

      A string representation of the network, with the mask in net
      mask notation.

   with_hostmask

      A string representation of the network, with the mask in host
      mask notation.

   num_addresses

      The total number of addresses in the network.

   prefixlen

      Length of the network prefix, in bits.

   hosts()

      Returns an iterator over the usable hosts in the network.  The
      usable hosts are all the IP addresses that belong to the
      network, except the network address itself and the network
      broadcast address.  For networks with a mask length of 31, the
      network address and network broadcast address are also included
      in the result. Networks with a mask of 32 will return a list
      containing the single host address.

      >>> list(ip_network('192.0.2.0/29').hosts())  
      [IPv4Address('192.0.2.1'), IPv4Address('192.0.2.2'),
       IPv4Address('192.0.2.3'), IPv4Address('192.0.2.4'),
       IPv4Address('192.0.2.5'), IPv4Address('192.0.2.6')]
      >>> list(ip_network('192.0.2.0/31').hosts())
      [IPv4Address('192.0.2.0'), IPv4Address('192.0.2.1')]
      >>> list(ip_network('192.0.2.1/32').hosts())
      [IPv4Address('192.0.2.1')]

   overlaps(other)

      "True" if this network is partly or wholly contained in *other*
      or *other* is wholly contained in this network.

   address_exclude(network)

      Computes the network definitions resulting from removing the
      given *network* from this one.  Returns an iterator of network
      objects. Raises "ValueError" if *network* is not completely
      contained in this network.

      >>> n1 = ip_network('192.0.2.0/28')
      >>> n2 = ip_network('192.0.2.1/32')
      >>> list(n1.address_exclude(n2))  
      [IPv4Network('192.0.2.8/29'), IPv4Network('192.0.2.4/30'),
       IPv4Network('192.0.2.2/31'), IPv4Network('192.0.2.0/32')]

   subnets(prefixlen_diff=1, new_prefix=None)

      The subnets that join to make the current network definition,
      depending on the argument values.  *prefixlen_diff* is the
      amount our prefix length should be increased by.  *new_prefix*
      is the desired new prefix of the subnets; it must be larger than
      our prefix.  One and only one of *prefixlen_diff* and
      *new_prefix* must be set.  Returns an iterator of network
      objects.

      >>> list(ip_network('192.0.2.0/24').subnets())
      [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]
      >>> list(ip_network('192.0.2.0/24').subnets(prefixlen_diff=2))  
      [IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),
       IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]
      >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=26))  
      [IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),
       IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]
      >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=23))
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
          raise ValueError('new prefix must be longer')
      ValueError: new prefix must be longer
      >>> list(ip_network('192.0.2.0/24').subnets(new_prefix=25))
      [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]

   supernet(prefixlen_diff=1, new_prefix=None)

      The supernet containing this network definition, depending on
      the argument values.  *prefixlen_diff* is the amount our prefix
      length should be decreased by.  *new_prefix* is the desired new
      prefix of the supernet; it must be smaller than our prefix.  One
      and only one of *prefixlen_diff* and *new_prefix* must be set.
      Returns a single network object.

      >>> ip_network('192.0.2.0/24').supernet()
      IPv4Network('192.0.2.0/23')
      >>> ip_network('192.0.2.0/24').supernet(prefixlen_diff=2)
      IPv4Network('192.0.0.0/22')
      >>> ip_network('192.0.2.0/24').supernet(new_prefix=20)
      IPv4Network('192.0.0.0/20')

   subnet_of(other)

      Return "True" if this network is a subnet of *other*.

      >>> a = ip_network('192.168.1.0/24')
      >>> b = ip_network('192.168.1.128/30')
      >>> b.subnet_of(a)
      True

      3.7 新版功能.

   supernet_of(other)

      Return "True" if this network is a supernet of *other*.

      >>> a = ip_network('192.168.1.0/24')
      >>> b = ip_network('192.168.1.128/30')
      >>> a.supernet_of(b)
      True

      3.7 新版功能.

   compare_networks(other)

      Compare this network to *other*.  In this comparison only the
      network addresses are considered; host bits aren't.  Returns
      either "-1", "0" or "1".

      >>> ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.2/32'))
      -1
      >>> ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.0/32'))
      1
      >>> ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.1/32'))
      0

      3.7 版后已移除: It uses the same ordering and comparison
      algorithm as "<", "==", and ">"

class ipaddress.IPv6Network(address, strict=True)

   Construct an IPv6 network definition.  *address* can be one of the
   following:

   1. A string consisting of an IP address and an optional prefix
      length, separated by a slash ("/").  The IP address is the
      network address, and the prefix length must be a single number,
      the *prefix*.  If no prefix length is provided, it's considered
      to be "/128".

      Note that currently expanded netmasks are not supported.  That
      means "2001:db00::0/24" is a valid argument while
      "2001:db00::0/ffff:ff00::" not.

   2. An integer that fits into 128 bits.  This is equivalent to a
      single-address network, with the network address being *address*
      and the mask being "/128".

   3. An integer packed into a "bytes" object of length 16, big-
      endian. The interpretation is similar to an integer *address*.

   4. A two-tuple of an address description and a netmask, where the
      address description is either a string, a 128-bits integer, a
      16-bytes packed integer, or an existing IPv6Address object; and
      the netmask is an integer representing the prefix length.

   An "AddressValueError" is raised if *address* is not a valid IPv6
   address.  A "NetmaskValueError" is raised if the mask is not valid
   for an IPv6 address.

   If *strict* is "True" and host bits are set in the supplied
   address, then "ValueError" is raised.  Otherwise, the host bits are
   masked out to determine the appropriate network address.

   在 3.5 版更改: Added the two-tuple form for the *address*
   constructor parameter.

   version

   max_prefixlen

   is_multicast

   is_private

   is_unspecified

   is_reserved

   is_loopback

   is_link_local

   network_address

   broadcast_address

   hostmask

   netmask

   with_prefixlen

   compressed

   exploded

   with_netmask

   with_hostmask

   num_addresses

   prefixlen

   hosts()

      Returns an iterator over the usable hosts in the network.  The
      usable hosts are all the IP addresses that belong to the
      network, except the Subnet-Router anycast address.  For networks
      with a mask length of 127, the Subnet-Router anycast address is
      also included in the result. Networks with a mask of 128 will
      return a list containing the single host address.

   overlaps(other)

   address_exclude(network)

   subnets(prefixlen_diff=1, new_prefix=None)

   supernet(prefixlen_diff=1, new_prefix=None)

   subnet_of(other)

   supernet_of(other)

   compare_networks(other)

      Refer to the corresponding attribute documentation in
      "IPv4Network".

   is_site_local

      These attribute is true for the network as a whole if it is true
      for both the network address and the broadcast address.


运算符
------

Network objects support some operators.  Unless stated otherwise,
operators can only be applied between compatible objects (i.e. IPv4
with IPv4, IPv6 with IPv6).


Logical operators
~~~~~~~~~~~~~~~~~

Network objects can be compared with the usual set of logical
operators. Network objects are ordered first by network address, then
by net mask.


迭代
~~~~

Network objects can be iterated to list all the addresses belonging to
the network.  For iteration, *all* hosts are returned, including
unusable hosts (for usable hosts, use the "hosts()" method).  An
example:

   >>> for addr in IPv4Network('192.0.2.0/28'):
   ...     addr
   ...
   IPv4Address('192.0.2.0')
   IPv4Address('192.0.2.1')
   IPv4Address('192.0.2.2')
   IPv4Address('192.0.2.3')
   IPv4Address('192.0.2.4')
   IPv4Address('192.0.2.5')
   IPv4Address('192.0.2.6')
   IPv4Address('192.0.2.7')
   IPv4Address('192.0.2.8')
   IPv4Address('192.0.2.9')
   IPv4Address('192.0.2.10')
   IPv4Address('192.0.2.11')
   IPv4Address('192.0.2.12')
   IPv4Address('192.0.2.13')
   IPv4Address('192.0.2.14')
   IPv4Address('192.0.2.15')


Networks as containers of addresses
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Network objects can act as containers of addresses.  Some examples:

   >>> IPv4Network('192.0.2.0/28')[0]
   IPv4Address('192.0.2.0')
   >>> IPv4Network('192.0.2.0/28')[15]
   IPv4Address('192.0.2.15')
   >>> IPv4Address('192.0.2.6') in IPv4Network('192.0.2.0/28')
   True
   >>> IPv4Address('192.0.3.6') in IPv4Network('192.0.2.0/28')
   False


Interface objects
=================

Interface objects are *hashable*, so they can be used as keys in
dictionaries.

class ipaddress.IPv4Interface(address)

   Construct an IPv4 interface.  The meaning of *address* is as in the
   constructor of "IPv4Network", except that arbitrary host addresses
   are always accepted.

   "IPv4Interface" is a subclass of "IPv4Address", so it inherits all
   the attributes from that class.  In addition, the following
   attributes are available:

   ip

      The address ("IPv4Address") without network information.

      >>> interface = IPv4Interface('192.0.2.5/24')
      >>> interface.ip
      IPv4Address('192.0.2.5')

   network

      The network ("IPv4Network") this interface belongs to.

      >>> interface = IPv4Interface('192.0.2.5/24')
      >>> interface.network
      IPv4Network('192.0.2.0/24')

   with_prefixlen

      A string representation of the interface with the mask in prefix
      notation.

      >>> interface = IPv4Interface('192.0.2.5/24')
      >>> interface.with_prefixlen
      '192.0.2.5/24'

   with_netmask

      A string representation of the interface with the network as a
      net mask.

      >>> interface = IPv4Interface('192.0.2.5/24')
      >>> interface.with_netmask
      '192.0.2.5/255.255.255.0'

   with_hostmask

      A string representation of the interface with the network as a
      host mask.

      >>> interface = IPv4Interface('192.0.2.5/24')
      >>> interface.with_hostmask
      '192.0.2.5/0.0.0.255'

class ipaddress.IPv6Interface(address)

   Construct an IPv6 interface.  The meaning of *address* is as in the
   constructor of "IPv6Network", except that arbitrary host addresses
   are always accepted.

   "IPv6Interface" is a subclass of "IPv6Address", so it inherits all
   the attributes from that class.  In addition, the following
   attributes are available:

   ip

   network

   with_prefixlen

   with_netmask

   with_hostmask

      Refer to the corresponding attribute documentation in
      "IPv4Interface".


运算符
------

Interface objects support some operators.  Unless stated otherwise,
operators can only be applied between compatible objects (i.e. IPv4
with IPv4, IPv6 with IPv6).


Logical operators
~~~~~~~~~~~~~~~~~

Interface objects can be compared with the usual set of logical
operators.

For equality comparison ("==" and "!="), both the IP address and
network must be the same for the objects to be equal.  An interface
will not compare equal to any address or network object.

For ordering ("<", ">", etc) the rules are different.  Interface and
address objects with the same IP version can be compared, and the
address objects will always sort before the interface objects.  Two
interface objects are first compared by their networks and, if those
are the same, then by their IP addresses.


Other Module Level Functions
============================

The module also provides the following module level functions:

ipaddress.v4_int_to_packed(address)

   Represent an address as 4 packed bytes in network (big-endian)
   order. *address* is an integer representation of an IPv4 IP
   address.  A "ValueError" is raised if the integer is negative or
   too large to be an IPv4 IP address.

   >>> ipaddress.ip_address(3221225985)
   IPv4Address('192.0.2.1')
   >>> ipaddress.v4_int_to_packed(3221225985)
   b'\xc0\x00\x02\x01'

ipaddress.v6_int_to_packed(address)

   Represent an address as 16 packed bytes in network (big-endian)
   order. *address* is an integer representation of an IPv6 IP
   address.  A "ValueError" is raised if the integer is negative or
   too large to be an IPv6 IP address.

ipaddress.summarize_address_range(first, last)

   Return an iterator of the summarized network range given the first
   and last IP addresses.  *first* is the first "IPv4Address" or
   "IPv6Address" in the range and *last* is the last "IPv4Address" or
   "IPv6Address" in the range.  A "TypeError" is raised if *first* or
   *last* are not IP addresses or are not of the same version.  A
   "ValueError" is raised if *last* is not greater than *first* or if
   *first* address version is not 4 or 6.

   >>> [ipaddr for ipaddr in ipaddress.summarize_address_range(
   ...    ipaddress.IPv4Address('192.0.2.0'),
   ...    ipaddress.IPv4Address('192.0.2.130'))]
   [IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'), IPv4Network('192.0.2.130/32')]

ipaddress.collapse_addresses(addresses)

   Return an iterator of the collapsed "IPv4Network" or "IPv6Network"
   objects.  *addresses* is an iterator of "IPv4Network" or
   "IPv6Network" objects.  A "TypeError" is raised if *addresses*
   contains mixed version objects.

   >>> [ipaddr for ipaddr in
   ... ipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25'),
   ... ipaddress.IPv4Network('192.0.2.128/25')])]
   [IPv4Network('192.0.2.0/24')]

ipaddress.get_mixed_type_key(obj)

   Return a key suitable for sorting between networks and addresses.
   Address and Network objects are not sortable by default; they're
   fundamentally different, so the expression:

      IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')

   doesn't make sense.  There are some times however, where you may
   wish to have "ipaddress" sort these anyway.  If you need to do
   this, you can use this function as the *key* argument to
   "sorted()".

   *obj* is either a network or address object.


Custom Exceptions
=================

To support more specific error reporting from class constructors, the
module defines the following exceptions:

exception ipaddress.AddressValueError(ValueError)

   Any value error related to the address.

exception ipaddress.NetmaskValueError(ValueError)

   Any value error related to the net mask.
